/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda
{
    #region Class
    public abstract partial class MajorRecord :
        IMajorRecordInternal,
        ILoquiObjectSetter<MajorRecord>,
        IEquatable<MajorRecord>,
        IEqualsMask
    {
        #region Ctor
        protected MajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MajorRecordFlagsRaw
        public Int32 MajorRecordFlagsRaw { get; set; } = default;
        #endregion
        #region FormKey
        public FormKey FormKey { get; protected set; } = FormKey.Null;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormKey IMajorRecordInternal.FormKey
        {
            get => this.FormKey;
            set => this.FormKey = value;
        }
        #endregion
        #region Version
        public UInt32 Version { get; set; } = default;
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MajorRecordMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMajorRecordGetter rhs)) return false;
            return ((MajorRecordCommon)((IMajorRecordGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(MajorRecord obj)
        {
            return ((MajorRecordCommon)((IMajorRecordGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MajorRecordCommon)((IMajorRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object XmlWriteTranslator => MajorRecordXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MajorRecordXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MajorRecord CreateFromXml(
            XElement node,
            MajorRecord.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MajorRecord CreateFromXml(
            XElement node,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MajorRecord.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MajorRecord CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (!LoquiXmlTranslation.Instance.TryCreate<MajorRecord>(node, out var ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown MajorRecord subclass: {node.Name.LocalName}");
            }
            ((MajorRecordSetterCommon)((IMajorRecordGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MajorRecord CreateFromXml(
            string path,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MajorRecord CreateFromXml(
            string path,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MajorRecord CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MajorRecord CreateFromXml(
            Stream stream,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MajorRecord CreateFromXml(
            Stream stream,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MajorRecord CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MajorRecordFlagsRaw = initialValue;
                this.FormKey = initialValue;
                this.Version = initialValue;
                this.EditorID = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID)
            {
                this.MajorRecordFlagsRaw = MajorRecordFlagsRaw;
                this.FormKey = FormKey;
                this.Version = Version;
                this.EditorID = EditorID;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MajorRecordFlagsRaw;
            public TItem FormKey;
            public TItem Version;
            public TItem EditorID;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MajorRecordFlagsRaw, rhs.MajorRecordFlagsRaw)) return false;
                if (!object.Equals(this.FormKey, rhs.FormKey)) return false;
                if (!object.Equals(this.Version, rhs.Version)) return false;
                if (!object.Equals(this.EditorID, rhs.EditorID)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MajorRecordFlagsRaw);
                hash.Add(this.FormKey);
                hash.Add(this.Version);
                hash.Add(this.EditorID);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MajorRecordFlagsRaw)) return false;
                if (!eval(this.FormKey)) return false;
                if (!eval(this.Version)) return false;
                if (!eval(this.EditorID)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MajorRecordFlagsRaw)) return true;
                if (eval(this.FormKey)) return true;
                if (eval(this.Version)) return true;
                if (eval(this.EditorID)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MajorRecord.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MajorRecordFlagsRaw = eval(this.MajorRecordFlagsRaw);
                obj.FormKey = eval(this.FormKey);
                obj.Version = eval(this.Version);
                obj.EditorID = eval(this.EditorID);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MajorRecord.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MajorRecord.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MajorRecord.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.MajorRecordFlagsRaw ?? true)
                    {
                        fg.AppendItem(MajorRecordFlagsRaw, "MajorRecordFlagsRaw");
                    }
                    if (printMask?.FormKey ?? true)
                    {
                        fg.AppendItem(FormKey, "FormKey");
                    }
                    if (printMask?.Version ?? true)
                    {
                        fg.AppendItem(Version, "Version");
                    }
                    if (printMask?.EditorID ?? true)
                    {
                        fg.AppendItem(EditorID, "EditorID");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MajorRecordFlagsRaw;
            public Exception? FormKey;
            public Exception? Version;
            public Exception? EditorID;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                        return MajorRecordFlagsRaw;
                    case MajorRecord_FieldIndex.FormKey:
                        return FormKey;
                    case MajorRecord_FieldIndex.Version:
                        return Version;
                    case MajorRecord_FieldIndex.EditorID:
                        return EditorID;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                        this.MajorRecordFlagsRaw = ex;
                        break;
                    case MajorRecord_FieldIndex.FormKey:
                        this.FormKey = ex;
                        break;
                    case MajorRecord_FieldIndex.Version:
                        this.Version = ex;
                        break;
                    case MajorRecord_FieldIndex.EditorID:
                        this.EditorID = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                        this.MajorRecordFlagsRaw = (Exception?)obj;
                        break;
                    case MajorRecord_FieldIndex.FormKey:
                        this.FormKey = (Exception?)obj;
                        break;
                    case MajorRecord_FieldIndex.Version:
                        this.Version = (Exception?)obj;
                        break;
                    case MajorRecord_FieldIndex.EditorID:
                        this.EditorID = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (MajorRecordFlagsRaw != null) return true;
                if (FormKey != null) return true;
                if (Version != null) return true;
                if (EditorID != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(MajorRecordFlagsRaw, "MajorRecordFlagsRaw");
                fg.AppendItem(FormKey, "FormKey");
                fg.AppendItem(Version, "Version");
                fg.AppendItem(EditorID, "EditorID");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MajorRecordFlagsRaw = this.MajorRecordFlagsRaw.Combine(rhs.MajorRecordFlagsRaw);
                ret.FormKey = this.FormKey.Combine(rhs.FormKey);
                ret.Version = this.Version.Combine(rhs.Version);
                ret.EditorID = this.EditorID.Combine(rhs.EditorID);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool MajorRecordFlagsRaw;
            public bool FormKey;
            public bool Version;
            public bool EditorID;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.MajorRecordFlagsRaw = defaultOn;
                this.FormKey = defaultOn;
                this.Version = defaultOn;
                this.EditorID = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MajorRecordFlagsRaw, null));
                ret.Add((FormKey, null));
                ret.Add((Version, null));
                ret.Add((EditorID, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual IEnumerable<ILinkGetter> Links => MajorRecordCommon.Instance.GetLinks(this);
        public MajorRecord(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public MajorRecord(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public MajorRecord(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => MajorRecordBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MajorRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMajorRecordGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MajorRecordSetterCommon)((IMajorRecordGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MajorRecord GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface IMajorRecord :
        IMajorRecordGetter,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IMajorRecordInternal>
    {
        new Int32 MajorRecordFlagsRaw { get; set; }
        new UInt32 Version { get; set; }
        new String? EditorID { get; set; }
    }

    public partial interface IMajorRecordInternal :
        IMajorRecord,
        IMajorRecordGetter
    {
        new FormKey FormKey { get; set; }
    }

    public partial interface IMajorRecordGetter :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IMajorRecordGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        Int32 MajorRecordFlagsRaw { get; }
        FormKey FormKey { get; }
        UInt32 Version { get; }
        String? EditorID { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MajorRecordMixIn
    {
        public static void Clear(this IMajorRecordInternal item)
        {
            ((MajorRecordSetterCommon)((IMajorRecordGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MajorRecord.Mask<bool> GetEqualsMask(
            this IMajorRecordGetter item,
            IMajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMajorRecordGetter item,
            string? name = null,
            MajorRecord.Mask<bool>? printMask = null)
        {
            return ((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMajorRecordGetter item,
            FileGeneration fg,
            string? name = null,
            MajorRecord.Mask<bool>? printMask = null)
        {
            ((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMajorRecordGetter item,
            MajorRecord.Mask<bool?> checkMask)
        {
            return ((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MajorRecord.Mask<bool> GetHasBeenSetMask(this IMajorRecordGetter item)
        {
            var ret = new MajorRecord.Mask<bool>(false);
            ((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMajorRecordGetter item,
            IMajorRecordGetter rhs)
        {
            return ((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMajorRecordInternal lhs,
            IMajorRecordGetter rhs,
            MajorRecord.TranslationMask? copyMask = null)
        {
            ((MajorRecordSetterTranslationCommon)((IMajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IMajorRecordInternal lhs,
            IMajorRecordGetter rhs,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MajorRecordSetterTranslationCommon)((IMajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MajorRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMajorRecordInternal lhs,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MajorRecordSetterTranslationCommon)((IMajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MajorRecord DeepCopy(
            this IMajorRecordGetter item,
            MajorRecord.TranslationMask? copyMask = null)
        {
            return ((MajorRecordSetterTranslationCommon)((IMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MajorRecord DeepCopy(
            this IMajorRecordGetter item,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? copyMask = null)
        {
            return ((MajorRecordSetterTranslationCommon)((IMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MajorRecord DeepCopy(
            this IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MajorRecordSetterTranslationCommon)((IMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            XElement node,
            MajorRecord.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            XElement node,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MajorRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((MajorRecordSetterCommon)((IMajorRecordGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            string path,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            string path,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            Stream stream,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            Stream stream,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMajorRecordInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        public static IMajorRecordCommon Duplicate(
            this MajorRecord item,
            Func<FormKey> getNextFormKey,
            IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords = null)
        {
            return ((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                getNextFormKey: getNextFormKey,
                duplicatedRecords: duplicatedRecords);
        }
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IMajorRecordGetter obj)
        {
            return ((MajorRecordCommon)((IMajorRecordGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IMajorRecordGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((MajorRecordCommon)((IMajorRecordGetter)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IMajorRecordInternal obj)
        {
            return ((MajorRecordSetterCommon)((IMajorRecordGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IMajorRecordInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((MajorRecordSetterCommon)((IMajorRecordGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMajorRecordInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MajorRecordSetterCommon)((IMajorRecordGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum MajorRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
    }
    #endregion

    #region Registration
    public partial class MajorRecord_Registration : ILoquiRegistration
    {
        public static readonly MajorRecord_Registration Instance = new MajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "1382b2d8-9016-424e-923f-502a4417cbc7";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(MajorRecord.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MajorRecord.ErrorMask);

        public static readonly Type ClassType = typeof(MajorRecord);

        public static readonly Type GetterType = typeof(IMajorRecordGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMajorRecord);

        public static readonly Type? InternalSetterType = typeof(IMajorRecordInternal);

        public const string FullName = "Mutagen.Bethesda.MajorRecord";

        public const string Name = "MajorRecord";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAJORRECORDFLAGSRAW":
                    return (ushort)MajorRecord_FieldIndex.MajorRecordFlagsRaw;
                case "FORMKEY":
                    return (ushort)MajorRecord_FieldIndex.FormKey;
                case "VERSION":
                    return (ushort)MajorRecord_FieldIndex.Version;
                case "EDITORID":
                    return (ushort)MajorRecord_FieldIndex.EditorID;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return "MajorRecordFlagsRaw";
                case MajorRecord_FieldIndex.FormKey:
                    return "FormKey";
                case MajorRecord_FieldIndex.Version:
                    return "Version";
                case MajorRecord_FieldIndex.EditorID:
                    return "EditorID";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return true;
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return typeof(Int32);
                case MajorRecord_FieldIndex.FormKey:
                    return typeof(FormKey);
                case MajorRecord_FieldIndex.Version:
                    return typeof(UInt32);
                case MajorRecord_FieldIndex.EditorID:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MajorRecordXmlWriteTranslation);
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType ANIO_HEADER = new RecordType("ANIO");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType IDLE_HEADER = new RecordType("IDLE");
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType QUST_HEADER = new RecordType("QUST");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MOD2_HEADER = new RecordType("MOD2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MOD3_HEADER = new RecordType("MOD3");
        public static readonly RecordType MOD4_HEADER = new RecordType("MOD4");
        public static readonly RecordType ICO2_HEADER = new RecordType("ICO2");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType SGST_HEADER = new RecordType("SGST");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType ASPC_HEADER = new RecordType("ASPC");
        public static readonly RecordType AACT_HEADER = new RecordType("AACT");
        public static readonly RecordType ARTO_HEADER = new RecordType("ARTO");
        public static readonly RecordType BPTD_HEADER = new RecordType("BPTD");
        public static readonly RecordType CLFM_HEADER = new RecordType("CLFM");
        public static readonly RecordType DEBR_HEADER = new RecordType("DEBR");
        public static readonly RecordType DUAL_HEADER = new RecordType("DUAL");
        public static readonly RecordType EQUP_HEADER = new RecordType("EQUP");
        public static readonly RecordType EXPL_HEADER = new RecordType("EXPL");
        public static readonly RecordType FLST_HEADER = new RecordType("FLST");
        public static readonly RecordType HAZD_HEADER = new RecordType("HAZD");
        public static readonly RecordType HDPT_HEADER = new RecordType("HDPT");
        public static readonly RecordType IPDS_HEADER = new RecordType("IPDS");
        public static readonly RecordType KYWD_HEADER = new RecordType("KYWD");
        public static readonly RecordType LCRT_HEADER = new RecordType("LCRT");
        public static readonly RecordType MATT_HEADER = new RecordType("MATT");
        public static readonly RecordType MOVT_HEADER = new RecordType("MOVT");
        public static readonly RecordType OTFT_HEADER = new RecordType("OTFT");
        public static readonly RecordType PERK_HEADER = new RecordType("PERK");
        public static readonly RecordType PROJ_HEADER = new RecordType("PROJ");
        public static readonly RecordType REVB_HEADER = new RecordType("REVB");
        public static readonly RecordType SCRL_HEADER = new RecordType("SCRL");
        public static readonly RecordType SNDR_HEADER = new RecordType("SNDR");
        public static readonly RecordType TXST_HEADER = new RecordType("TXST");
        public static readonly RecordType VTYP_HEADER = new RecordType("VTYP");
        public static readonly RecordType SHOU_HEADER = new RecordType("SHOU");
        public static readonly RecordType EDID_HEADER = new RecordType("EDID");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        ACTI_HEADER,
                        PACK_HEADER,
                        ANIO_HEADER,
                        BSGN_HEADER,
                        CLAS_HEADER,
                        CLMT_HEADER,
                        CSTY_HEADER,
                        CONT_HEADER,
                        DIAL_HEADER,
                        INFO_HEADER,
                        DOOR_HEADER,
                        EFSH_HEADER,
                        ENCH_HEADER,
                        EYES_HEADER,
                        FACT_HEADER,
                        FLOR_HEADER,
                        FURN_HEADER,
                        GMST_HEADER,
                        GLOB_HEADER,
                        GRAS_HEADER,
                        HAIR_HEADER,
                        IDLE_HEADER,
                        LAND_HEADER,
                        LTEX_HEADER,
                        LSCR_HEADER,
                        MGEF_HEADER,
                        PGRD_HEADER,
                        ACRE_HEADER,
                        ACHR_HEADER,
                        REFR_HEADER,
                        QUST_HEADER,
                        RACE_HEADER,
                        REGN_HEADER,
                        ROAD_HEADER,
                        SCPT_HEADER,
                        SKIL_HEADER,
                        SOUN_HEADER,
                        STAT_HEADER,
                        SBSP_HEADER,
                        TREE_HEADER,
                        WATR_HEADER,
                        WTHR_HEADER,
                        FULL_HEADER,
                        SCRI_HEADER,
                        ENAM_HEADER,
                        ANAM_HEADER,
                        BMDT_HEADER,
                        MODL_HEADER,
                        MOD2_HEADER,
                        ICON_HEADER,
                        MOD3_HEADER,
                        MOD4_HEADER,
                        ICO2_HEADER,
                        APPA_HEADER,
                        AMMO_HEADER,
                        BOOK_HEADER,
                        INGR_HEADER,
                        KEYM_HEADER,
                        LVLI_HEADER,
                        LIGH_HEADER,
                        MISC_HEADER,
                        ALCH_HEADER,
                        SGST_HEADER,
                        SLGM_HEADER,
                        WEAP_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER,
                        LVSP_HEADER,
                        SPEL_HEADER,
                        LVLC_HEADER,
                        CREA_HEADER,
                        NPC__HEADER,
                        CELL_HEADER,
                        WRLD_HEADER,
                        ASPC_HEADER,
                        AACT_HEADER,
                        ARTO_HEADER,
                        BPTD_HEADER,
                        CLFM_HEADER,
                        DEBR_HEADER,
                        DUAL_HEADER,
                        EQUP_HEADER,
                        EXPL_HEADER,
                        FLST_HEADER,
                        HAZD_HEADER,
                        HDPT_HEADER,
                        IPDS_HEADER,
                        KYWD_HEADER,
                        LCRT_HEADER,
                        MATT_HEADER,
                        MOVT_HEADER,
                        OTFT_HEADER,
                        PERK_HEADER,
                        PROJ_HEADER,
                        REVB_HEADER,
                        SCRL_HEADER,
                        SNDR_HEADER,
                        TXST_HEADER,
                        VTYP_HEADER,
                        SHOU_HEADER
                    })
            );
        });
        public const int NumStructFields = 3;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(MajorRecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MajorRecordSetterCommon
    {
        public static readonly MajorRecordSetterCommon Instance = new MajorRecordSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IMajorRecordInternal item)
        {
            ClearPartial();
            item.MajorRecordFlagsRaw = default;
            item.Version = default;
            item.EditorID = default;
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IMajorRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "FormKey":
                    errorMask?.PushIndex((int)MajorRecord_FieldIndex.FormKey);
                    try
                    {
                        item.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    MajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public virtual IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IMajorRecordInternal obj)
        {
            foreach (var item in MajorRecordCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public virtual IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IMajorRecordInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in MajorRecordCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual RecordType RecordType => throw new ArgumentException();
        protected static void FillBinaryStructs(
            IMajorRecordInternal item,
            MutagenFrame frame)
        {
            item.MajorRecordFlagsRaw = frame.ReadInt32();
            item.FormKey = Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Parse(frame: frame);
            item.Version = frame.ReadUInt32();
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44494445: // EDID
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EditorID = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)MajorRecord_FieldIndex.EditorID);
                }
                default:
                    frame.Position += contentLength + frame.MetaData.SubConstants.HeaderLength;
                    return TryGet<int?>.Succeed(null);
            }
        }
        
        public virtual void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        #endregion
        
    }
    public partial class MajorRecordCommon
    {
        public static readonly MajorRecordCommon Instance = new MajorRecordCommon();

        public MajorRecord.Mask<bool> GetEqualsMask(
            IMajorRecordGetter item,
            IMajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MajorRecord.Mask<bool>(false);
            ((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMajorRecordGetter item,
            IMajorRecordGetter rhs,
            MajorRecord.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MajorRecordFlagsRaw = item.MajorRecordFlagsRaw == rhs.MajorRecordFlagsRaw;
            ret.FormKey = item.FormKey == rhs.FormKey;
            ret.Version = item.Version == rhs.Version;
            ret.EditorID = string.Equals(item.EditorID, rhs.EditorID);
        }
        
        public string ToString(
            IMajorRecordGetter item,
            string? name = null,
            MajorRecord.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMajorRecordGetter item,
            FileGeneration fg,
            string? name = null,
            MajorRecord.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MajorRecord =>");
            }
            else
            {
                fg.AppendLine($"{name} (MajorRecord) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMajorRecordGetter item,
            FileGeneration fg,
            MajorRecord.Mask<bool>? printMask = null)
        {
            if (printMask?.MajorRecordFlagsRaw ?? true)
            {
                fg.AppendItem(item.MajorRecordFlagsRaw, "MajorRecordFlagsRaw");
            }
            if (printMask?.FormKey ?? true)
            {
                fg.AppendItem(item.FormKey, "FormKey");
            }
            if (printMask?.Version ?? true)
            {
                fg.AppendItem(item.Version, "Version");
            }
            if ((printMask?.EditorID ?? true)
                && item.EditorID.TryGet(out var EditorIDItem))
            {
                fg.AppendItem(EditorIDItem, "EditorID");
            }
        }
        
        public bool HasBeenSet(
            IMajorRecordGetter item,
            MajorRecord.Mask<bool?> checkMask)
        {
            if (checkMask.EditorID.HasValue && checkMask.EditorID.Value != (item.EditorID != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMajorRecordGetter item,
            MajorRecord.Mask<bool> mask)
        {
            mask.MajorRecordFlagsRaw = true;
            mask.FormKey = true;
            mask.Version = true;
            mask.EditorID = (item.EditorID != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.MajorRecordFlagsRaw != rhs.MajorRecordFlagsRaw) return false;
            if (lhs.FormKey != rhs.FormKey) return false;
            if (lhs.Version != rhs.Version) return false;
            if (!string.Equals(lhs.EditorID, rhs.EditorID)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IMajorRecordGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MajorRecordFlagsRaw);
            hash.Add(item.FormKey);
            hash.Add(item.Version);
            if (item.EditorID.TryGet(out var EditorIDitem))
            {
                hash.Add(EditorIDitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return MajorRecord.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IMajorRecordGetter obj)
        {
            yield break;
        }
        
        partial void PostDuplicate(MajorRecord obj, MajorRecord rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public virtual IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            throw new NotImplementedException();
        }
        
        public virtual IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IMajorRecordGetter obj)
        {
            yield break;
        }
        
        public virtual IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IMajorRecordGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                default:
                    throw new ArgumentException();
            }
        }
        
        #endregion
        
    }
    public partial class MajorRecordSetterTranslationCommon
    {
        public static readonly MajorRecordSetterTranslationCommon Instance = new MajorRecordSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.FormKey) ?? true))
            {
                item.FormKey = rhs.FormKey;
            }
            DeepCopyIn(
                (IMajorRecord)item,
                (IMajorRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public virtual void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.MajorRecordFlagsRaw) ?? true))
            {
                item.MajorRecordFlagsRaw = rhs.MajorRecordFlagsRaw;
            }
            if ((copyMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.Version) ?? true))
            {
                item.Version = rhs.Version;
            }
            if ((copyMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.EditorID) ?? true))
            {
                item.EditorID = rhs.EditorID;
            }
        }
        
        #endregion
        
        public MajorRecord DeepCopy(
            IMajorRecordGetter item,
            MajorRecord.TranslationMask? copyMask = null)
        {
            MajorRecord ret = (MajorRecord)((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MajorRecord DeepCopy(
            IMajorRecordGetter item,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? copyMask = null)
        {
            MajorRecord ret = (MajorRecord)((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MajorRecord DeepCopy(
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MajorRecord ret = (MajorRecord)((MajorRecordCommon)((IMajorRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda
{
    public partial class MajorRecord
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MajorRecord_Registration.Instance;
        public static MajorRecord_Registration Registration => MajorRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => MajorRecordCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return MajorRecordSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => MajorRecordSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMajorRecordGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMajorRecordGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMajorRecordGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Internals
{
    public partial class MajorRecordXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MajorRecordXmlWriteTranslation Instance = new MajorRecordXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMajorRecordGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.MajorRecordFlagsRaw) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MajorRecordFlagsRaw),
                    item: item.MajorRecordFlagsRaw,
                    fieldIndex: (int)MajorRecord_FieldIndex.MajorRecordFlagsRaw,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.FormKey) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FormKey),
                    item: item.FormKey,
                    fieldIndex: (int)MajorRecord_FieldIndex.FormKey,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.Version) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Version),
                    item: item.Version,
                    fieldIndex: (int)MajorRecord_FieldIndex.Version,
                    errorMask: errorMask);
            }
            if ((item.EditorID != null)
                && (translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.EditorID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EditorID),
                    item: item.EditorID,
                    fieldIndex: (int)MajorRecord_FieldIndex.EditorID,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.MajorRecord");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.MajorRecord");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMajorRecordGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IMajorRecordGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MajorRecordXmlCreateTranslation
    {
        public readonly static MajorRecordXmlCreateTranslation Instance = new MajorRecordXmlCreateTranslation();

        public static void FillPublicXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMajorRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "MajorRecordFlagsRaw":
                    errorMask?.PushIndex((int)MajorRecord_FieldIndex.MajorRecordFlagsRaw);
                    try
                    {
                        item.MajorRecordFlagsRaw = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Version":
                    errorMask?.PushIndex((int)MajorRecord_FieldIndex.Version);
                    try
                    {
                        item.Version = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EditorID":
                    errorMask?.PushIndex((int)MajorRecord_FieldIndex.EditorID);
                    try
                    {
                        item.EditorID = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda
{
    #region Xml Write Mixins
    public static class MajorRecordXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMajorRecordGetter item,
            XElement node,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MajorRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMajorRecordGetter item,
            string path,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMajorRecordGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMajorRecordGetter item,
            Stream stream,
            out MajorRecord.ErrorMask errorMask,
            MajorRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMajorRecordGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMajorRecordGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMajorRecordGetter item,
            XElement node,
            string? name = null,
            MajorRecord.TranslationMask? translationMask = null)
        {
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IMajorRecordGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMajorRecordGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Internals
{
    public partial class MajorRecordBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MajorRecordBinaryWriteTranslation Instance = new MajorRecordBinaryWriteTranslation();

        public static void WriteEmbedded(
            IMajorRecordGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.MajorRecordFlagsRaw);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FormKey);
            writer.Write(item.Version);
        }

        public static void WriteRecordTypes(
            IMajorRecordGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EditorID,
                header: recordTypeConverter.ConvertToCustom(MajorRecord_Registration.EDID_HEADER),
                binaryType: StringBinaryType.NullTerminate);
        }

        public virtual void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMajorRecordGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MajorRecordBinaryCreateTranslation
    {
        public readonly static MajorRecordBinaryCreateTranslation Instance = new MajorRecordBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda
{
    #region Binary Write Mixins
    public static class MajorRecordBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMajorRecordGetter item,
            MutagenWriter writer)
        {
            ((MajorRecordBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Internals
{
    public partial class MajorRecordBinaryOverlay :
        BinaryOverlay,
        IMajorRecordGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MajorRecord_Registration.Instance;
        public static MajorRecord_Registration Registration => MajorRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => MajorRecordCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => MajorRecordSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMajorRecordGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMajorRecordGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMajorRecordGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMajorRecordGetter)rhs, include);

        public virtual IEnumerable<ILinkGetter> Links => MajorRecordCommon.Instance.GetLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object XmlWriteTranslator => MajorRecordXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MajorRecordXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => MajorRecordBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MajorRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Int32 MajorRecordFlagsRaw => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x0, 0x4));
        public FormKey FormKey => FormKeyBinaryTranslation.Instance.Parse(_data.Span.Slice(4, 4), this._package.MasterReferences!);
        public UInt32 Version => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x8, 0x4));
        #region EditorID
        private int? _EditorIDLocation;
        public String? EditorID => _EditorIDLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _EditorIDLocation.Value, _package.Meta)) : default(string?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected MajorRecordBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public virtual TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44494445: // EDID
                {
                    _EditorIDLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MajorRecord_FieldIndex.EditorID);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MajorRecordMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

