/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Examples.Internals;
using Noggog.WPF;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Examples
{
    #region Class
    public partial class MainVM :
        ViewModel,
        IMainVMInternal,
        ILoquiObjectSetter<MainVM>,
        IEquatable<MainVM>,
        IEqualsMask
    {
        #region Ctor
        public MainVM()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModFilePath
        private String _ModFilePath;
        public String ModFilePath
        {
            get => this._ModFilePath;
            set => this.RaiseAndSetIfChanged(ref this._ModFilePath, value, nameof(ModFilePath));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMainVMInternalGetter)rhs, include);
        #region To String
        public override string ToString()
        {
            return MainVMMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MainVMMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IMainVMInternalGetter rhs)) return false;
            return ((MainVMCommon)((IMainVMInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(MainVM obj)
        {
            return ((MainVMCommon)((IMainVMInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((MainVMCommon)((IMainVMInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => MainVMXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MainVMXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MainVM CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MainVM_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MainVM CreateFromXml(
            XElement node,
            out MainVM_ErrorMask errorMask,
            bool doMasks = true,
            MainVM_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MainVM_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MainVM CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new MainVM() : null;
                    break;
                default:
                    break;
            }
            var ret = new MainVM();
            try
            {
                foreach (var elem in node.Elements())
                {
                    MainVMXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static MainVM CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            MainVM_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MainVM CreateFromXml(
            string path,
            out MainVM_ErrorMask errorMask,
            MainVM_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MainVM CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            MainVM_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MainVM CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MainVM_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MainVM CreateFromXml(
            Stream stream,
            out MainVM_ErrorMask errorMask,
            MainVM_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MainVM CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MainVM_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyInXml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyInXmlInternal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyInXml(
            XElement node,
            out MainVM_ErrorMask errorMask,
            MainVM_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInXmlInternal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MainVM_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyInXmlInternal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            var obj = MainVM.CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            this.CopyFieldsFrom(obj);
        }

        public void CopyInXml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            string path,
            out MainVM_ErrorMask errorMask,
            MainVM_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyInXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            Stream stream,
            out MainVM_ErrorMask errorMask,
            MainVM_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((MainVM_FieldIndex)index)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public MainVM Copy(
            MainVM_CopyMask copyMask = null,
            MainVM def = null)
        {
            return MainVM.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MainVM Copy(
            MainVM item,
            MainVM_CopyMask copyMask = null,
            MainVM def = null)
        {
            MainVM ret;
            if (item.GetType().Equals(typeof(MainVM)))
            {
                ret = new MainVM();
            }
            else
            {
                ret = (MainVM)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static MainVM Copy_ToLoqui(
            MainVM item,
            MainVM_CopyMask copyMask = null,
            MainVM def = null)
        {
            MainVM ret;
            if (item.GetType().Equals(typeof(MainVM)))
            {
                ret = new MainVM() as MainVM;
            }
            else
            {
                ret = (MainVM)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(MainVM rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            MainVM rhs,
            MainVM_CopyMask copyMask,
            MainVM def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            MainVM rhs,
            out MainVM_ErrorMask errorMask,
            MainVM_CopyMask copyMask = null,
            MainVM def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MainVMSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = MainVM_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            MainVM rhs,
            ErrorMaskBuilder errorMask,
            MainVM_CopyMask copyMask = null,
            MainVM def = null)
        {
            MainVMSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    this.ModFilePath = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            MainVMSetterCommon.Instance.Clear(this);
        }

        public static MainVM Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MainVM();
            foreach (var pair in fields)
            {
                CopyInInternal_MainVM(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_MainVM(MainVM obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MainVM_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    obj.ModFilePath = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IMainVM :
        IMainVMInternalGetter,
        ILoquiObjectSetter<IMainVMInternal>
    {
        new String ModFilePath { get; set; }

        void CopyFieldsFrom(
            MainVM rhs,
            ErrorMaskBuilder errorMask = null,
            MainVM_CopyMask copyMask = null,
            MainVM def = null);
    }

    public partial interface IMainVMInternal :
        IMainVM,
        IMainVMInternalGetter
    {
    }

    public partial interface IMainVMGetter :
        ILoquiObject,
        ILoquiObject<IMainVMInternalGetter>,
        IXmlItem
    {
        #region ModFilePath
        String ModFilePath { get; }

        #endregion

    }

    public partial interface IMainVMInternalGetter : IMainVMGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class MainVMMixIn
    {
        public static void Clear(this IMainVMInternal item)
        {
            ((MainVMSetterCommon)((IMainVMInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static MainVM_Mask<bool> GetEqualsMask(
            this IMainVMInternalGetter item,
            IMainVMInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MainVMCommon)((IMainVMInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMainVMInternalGetter item,
            string name = null,
            MainVM_Mask<bool> printMask = null)
        {
            return ((MainVMCommon)((IMainVMInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMainVMInternalGetter item,
            FileGeneration fg,
            string name = null,
            MainVM_Mask<bool> printMask = null)
        {
            ((MainVMCommon)((IMainVMInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMainVMInternalGetter item,
            MainVM_Mask<bool?> checkMask)
        {
            return ((MainVMCommon)((IMainVMInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MainVM_Mask<bool> GetHasBeenSetMask(this IMainVMInternalGetter item)
        {
            var ret = new MainVM_Mask<bool>();
            ((MainVMCommon)((IMainVMInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMainVMInternalGetter item,
            IMainVMInternalGetter rhs)
        {
            return ((MainVMCommon)((IMainVMInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Examples.Internals
{
    #region Field Index
    public enum MainVM_FieldIndex
    {
        ModFilePath = 0,
    }
    #endregion

    #region Registration
    public class MainVM_Registration : ILoquiRegistration
    {
        public static readonly MainVM_Registration Instance = new MainVM_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Examples.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Examples.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "e4d52690-eae1-4493-961a-cc5d2b974896";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(MainVM_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MainVM_ErrorMask);

        public static readonly Type ClassType = typeof(MainVM);

        public static readonly Type GetterType = typeof(IMainVMGetter);

        public static readonly Type InternalGetterType = typeof(IMainVMInternalGetter);

        public static readonly Type SetterType = typeof(IMainVM);

        public static readonly Type InternalSetterType = typeof(IMainVMInternal);

        public const string FullName = "Mutagen.Bethesda.Examples.MainVM";

        public const string Name = "MainVM";

        public const string Namespace = "Mutagen.Bethesda.Examples";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODFILEPATH":
                    return (ushort)MainVM_FieldIndex.ModFilePath;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return "ModFilePath";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MainVMXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MainVMSetterCommon
    {
        public static readonly MainVMSetterCommon Instance = new MainVMSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IMainVMInternal item)
        {
            ClearPartial();
            item.ModFilePath = default(String);
        }
        
        
    }
    public partial class MainVMCommon
    {
        public static readonly MainVMCommon Instance = new MainVMCommon();

        public MainVM_Mask<bool> GetEqualsMask(
            IMainVMInternalGetter item,
            IMainVMInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MainVM_Mask<bool>();
            ((MainVMCommon)((IMainVMInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMainVMInternalGetter item,
            IMainVMInternalGetter rhs,
            MainVM_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModFilePath = string.Equals(item.ModFilePath, rhs.ModFilePath);
        }
        
        public string ToString(
            IMainVMInternalGetter item,
            string name = null,
            MainVM_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMainVMInternalGetter item,
            FileGeneration fg,
            string name = null,
            MainVM_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MainVM =>");
            }
            else
            {
                fg.AppendLine($"{name} (MainVM) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMainVMInternalGetter item,
            FileGeneration fg,
            MainVM_Mask<bool> printMask = null)
        {
            if (printMask?.ModFilePath ?? true)
            {
                fg.AppendLine($"ModFilePath => {item.ModFilePath}");
            }
        }
        
        public bool HasBeenSet(
            IMainVMInternalGetter item,
            MainVM_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMainVMInternalGetter item,
            MainVM_Mask<bool> mask)
        {
            mask.ModFilePath = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMainVMInternalGetter lhs,
            IMainVMInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.ModFilePath, rhs.ModFilePath)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IMainVMInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.ModFilePath).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        
    }
    public partial class MainVMSetterCopyCommon
    {
        public static readonly MainVMSetterCopyCommon Instance = new MainVMSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            MainVM item,
            MainVM rhs,
            MainVM def,
            ErrorMaskBuilder errorMask,
            MainVM_CopyMask copyMask)
        {
            if (copyMask?.ModFilePath ?? true)
            {
                errorMask?.PushIndex((int)MainVM_FieldIndex.ModFilePath);
                try
                {
                    item.ModFilePath = rhs.ModFilePath;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Examples
{
    public partial class MainVM
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MainVM_Registration.Instance;
        public static MainVM_Registration Registration => MainVM_Registration.Instance;
        protected object CommonInstance()
        {
            return MainVMCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return MainVMSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return MainVMSetterCopyCommon.Instance;
        }
        object IMainVMInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IMainVMInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IMainVMInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Examples.Internals
{
    public partial class MainVMXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MainVMXmlWriteTranslation Instance = new MainVMXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMainVMInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MainVM_FieldIndex.ModFilePath) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ModFilePath),
                    item: item.ModFilePath,
                    fieldIndex: (int)MainVM_FieldIndex.ModFilePath,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IMainVMInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Examples.MainVM");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Examples.MainVM");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IMainVMInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMainVMInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IMainVMInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MainVMXmlCreateTranslation
    {
        public readonly static MainVMXmlCreateTranslation Instance = new MainVMXmlCreateTranslation();

        public static void FillPublicXml(
            IMainVMInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MainVMXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMainVMInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ModFilePath":
                    if ((translationMask?.GetShouldTranslate((int)MainVM_FieldIndex.ModFilePath) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)MainVM_FieldIndex.ModFilePath);
                            if (StringXmlTranslation.Instance.Parse(
                                node: node,
                                item: out String ModFilePathParse,
                                errorMask: errorMask))
                            {
                                item.ModFilePath = ModFilePathParse;
                            }
                            else
                            {
                                item.ModFilePath = default(String);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Examples
{
    #region Xml Write Mixins
    public static class MainVMXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMainVMInternalGetter item,
            XElement node,
            out MainVM_ErrorMask errorMask,
            bool doMasks = true,
            MainVM_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MainVMXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MainVM_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMainVMInternalGetter item,
            string path,
            out MainVM_ErrorMask errorMask,
            MainVM_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMainVMInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMainVMInternalGetter item,
            Stream stream,
            out MainVM_ErrorMask errorMask,
            MainVM_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMainVMInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMainVMInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((MainVMXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMainVMInternalGetter item,
            XElement node,
            string name = null,
            MainVM_TranslationMask translationMask = null)
        {
            ((MainVMXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IMainVMInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MainVMXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMainVMInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MainVMXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Examples.Internals
{
    public class MainVM_Mask<T> : IMask<T>, IEquatable<MainVM_Mask<T>>
    {
        #region Ctors
        public MainVM_Mask()
        {
        }

        public MainVM_Mask(T initialValue)
        {
            this.ModFilePath = initialValue;
        }
        #endregion

        #region Members
        public T ModFilePath;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MainVM_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MainVM_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ModFilePath, rhs.ModFilePath)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ModFilePath?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ModFilePath)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MainVM_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MainVM_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MainVM_Mask<R> obj, Func<T, R> eval)
        {
            obj.ModFilePath = eval(this.ModFilePath);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MainVM_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MainVM_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MainVM_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ModFilePath ?? true)
                {
                    fg.AppendLine($"ModFilePath => {ModFilePath}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MainVM_ErrorMask : IErrorMask, IErrorMask<MainVM_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ModFilePath;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    return ModFilePath;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    this.ModFilePath = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MainVM_FieldIndex enu = (MainVM_FieldIndex)index;
            switch (enu)
            {
                case MainVM_FieldIndex.ModFilePath:
                    this.ModFilePath = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ModFilePath != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MainVM_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ModFilePath => {ModFilePath}");
        }
        #endregion

        #region Combine
        public MainVM_ErrorMask Combine(MainVM_ErrorMask rhs)
        {
            var ret = new MainVM_ErrorMask();
            ret.ModFilePath = this.ModFilePath.Combine(rhs.ModFilePath);
            return ret;
        }
        public static MainVM_ErrorMask Combine(MainVM_ErrorMask lhs, MainVM_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MainVM_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MainVM_ErrorMask();
        }
        #endregion

    }
    public class MainVM_CopyMask
    {
        public MainVM_CopyMask()
        {
        }

        public MainVM_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.ModFilePath = defaultOn;
        }

        #region Members
        public bool ModFilePath;
        #endregion

    }

    public class MainVM_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool ModFilePath;
        #endregion

        #region Ctors
        public MainVM_TranslationMask()
        {
        }

        public MainVM_TranslationMask(bool defaultOn)
        {
            this.ModFilePath = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ModFilePath, null));
        }
    }
}
#endregion

#endregion

