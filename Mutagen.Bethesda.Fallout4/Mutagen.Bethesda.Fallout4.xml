<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mutagen.Bethesda.Fallout4</name>
    </assembly>
    <members>
        <member name="T:Mutagen.Bethesda.Fallout4.GameSetting">
            <summary>
            Implemented by: [GameSettingInt, GameSettingFloat, GameSettingString, GameSettingBool]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.Fallout4MajorRecord">
            <summary>
            Implemented by: [GameSetting, Keyword]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IFallout4MajorRecord">
            <summary>
            Implemented by: [GameSetting, Keyword]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IFallout4MajorRecordGetter">
            <summary>
            Implemented by: [GameSetting, Keyword]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.Fallout4Release">
            <summary>
            Different game release versions a Fallout4 mod can have
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IGameSetting">
            <summary>
            Implemented by: [GameSettingInt, GameSettingFloat, GameSettingString, GameSettingBool]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IGameSettingGetter">
            <summary>
            Implemented by: [GameSettingInt, GameSettingFloat, GameSettingString, GameSettingBool]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.WarmupFallout4">
            <summary>
            A static class to house initialization warmup logic
            </summary>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.WarmupFallout4.Init">
            <summary>
            Will initialize internals in a more efficient way that avoids reflection.
            Not required to call, but can be used to warm up ahead of time.
            <br/><br/>NOTE: Calling this warmup which is for a single game, will require you warm up
            other games in the same fashion.  Use WarmupAll if you want all games to be warmed.
            </summary>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Fallout4MajorRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Fallout4MajorRecord
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Fallout4MajorRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Fallout4MajorRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Fallout4MajorRecord
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Fallout4MajorRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSetting(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSetting
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSetting</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSetting(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSetting
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSetting</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingBool(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSettingBool
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSettingBool</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingBool(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSettingBool
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSettingBool</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingFloat(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSettingFloat
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSettingFloat</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingFloat(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSettingFloat
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSettingFloat</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingInt(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSettingInt
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSettingInt</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingInt(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSettingInt
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSettingInt</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingString(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSettingString
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSettingString</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingString(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSettingString
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSettingString</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Keyword(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Keyword
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Keyword</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Keyword(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Keyword
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Keyword</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IKeywordLinkedReference(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IKeywordLinkedReference
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IKeywordLinkedReference</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IKeywordLinkedReference(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IKeywordLinkedReference
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IKeywordLinkedReference</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(Mutagen.Bethesda.Fallout4.IFallout4ModGetter)">
            <summary>
            Creates a Link Cache using a single mod as its link target. <br/>
            Modification of the target Mod is not safe.  Internal caches can become incorrect if 
            modifications occur on content already cached.
            </summary>
            <param name="mod">Mod to construct the package relative to</param>
            <returns>LinkPackage attached to given mod</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToMutableLinkCache(Mutagen.Bethesda.Fallout4.IFallout4ModGetter)">
            <summary>
            Creates a Link Cache using a single mod as its link target.  Mod is allowed to be modified afterwards, but
            this comes at a performance cost of not allowing much caching to be done.  If the mod is not expected to
            be modified afterwards, use ImmutableModLinkCache instead.<br/>
            </summary>
            <param name="mod">Mod to construct the package relative to</param>
            <returns>LinkPackage attached to given mod</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(Mutagen.Bethesda.LoadOrder{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Creates a new linking package relative to a load order.<br/>
            Will resolve links to the highest overriding mod containing the record being sought. <br/>
            Modification of the target LoadOrder, or Mods on the LoadOrder is not safe.  Internal caches can become
            incorrect if modifications occur on content already cached.
            </summary>
            <param name="loadOrder">LoadOrder to construct the package relative to</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(Mutagen.Bethesda.LoadOrder{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Creates a new linking package relative to a load order.<br/>
            Will resolve links to the highest overriding mod containing the record being sought. <br/>
            Modification of the target LoadOrder, or Mods on the LoadOrder is not safe.  Internal caches can become
            incorrect if modifications occur on content already cached.
            </summary>
            <param name="loadOrder">LoadOrder to construct the package relative to</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Creates a new linking package relative to a load order.<br/>
            Will resolve links to the highest overriding mod containing the record being sought. <br/>
            Modification of the target LoadOrder, or Mods on the LoadOrder is not safe.  Internal caches can become
            incorrect if modifications occur on content already cached.
            </summary>
            <param name="loadOrder">LoadOrder to construct the package relative to</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Creates a new linking package relative to a load order.<br/>
            Will resolve links to the highest overriding mod containing the record being sought. <br/>
            Modification of the target LoadOrder, or Mods on the LoadOrder is not safe.  Internal caches can become
            incorrect if modifications occur on content already cached.
            </summary>
            <param name="loadOrder">LoadOrder to construct the package relative to</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToMutableLinkCache(Mutagen.Bethesda.LoadOrder{Mutagen.Bethesda.Fallout4.IFallout4ModGetter},Mutagen.Bethesda.Fallout4.IFallout4Mod[])">
            <summary>
            Creates a mutable load order link cache by combining an existing immutable load order cache,
            plus a set of mods to be put at the end of the load order and allow to be mutable.
            </summary>
            <param name="immutableBaseCache">LoadOrderCache to use as the immutable base</param>
            <param name="mutableMods">Set of mods to place at the end of the load order, which are allowed to be modified afterwards</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToMutableLinkCache(Mutagen.Bethesda.LoadOrder{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}},Mutagen.Bethesda.Fallout4.IFallout4Mod[])">
            <summary>
            Creates a mutable load order link cache by combining an existing immutable load order cache,
            plus a set of mods to be put at the end of the load order and allow to be mutable.
            </summary>
            <param name="immutableBaseCache">LoadOrderCache to use as the immutable base</param>
            <param name="mutableMods">Set of mods to place at the end of the load order, which are allowed to be modified afterwards</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToMutableLinkCache(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter},Mutagen.Bethesda.Fallout4.IFallout4Mod[])">
            <summary>
            Creates a mutable load order link cache by combining an existing immutable load order cache,
            plus a set of mods to be put at the end of the load order and allow to be mutable.
            </summary>
            <param name="immutableBaseCache">LoadOrderCache to use as the immutable base</param>
            <param name="mutableMods">Set of mods to place at the end of the load order, which are allowed to be modified afterwards</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IKeywordLinkedReference">
            <summary>
            Implemented by: [Keyword]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IKeywordLinkedReferenceGetter">
            <summary>
            Implemented by: [Keyword]
            </summary>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>Repository URL: https://github.com/Noggog/Mutagen.git</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: fo4</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: ac970b1d8</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: ac970b1d8d3d06ba09d2ead162c75d1ba5f35c5d</summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>Commit date: 2021-01-07T21:12:24-06:00</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: 0.23.4</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: 0.23.4</summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 23</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 4</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 23</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 4</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: Tag</summary>
        </member>
    </members>
</doc>
