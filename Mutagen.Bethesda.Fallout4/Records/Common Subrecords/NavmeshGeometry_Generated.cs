/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NavmeshGeometry :
        IEquatable<INavmeshGeometryGetter>,
        ILoquiObjectSetter<NavmeshGeometry>,
        INavmeshGeometry
    {
        #region Ctor
        public NavmeshGeometry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavmeshVersion
        public readonly static UInt32 _NavmeshVersion_Default = 15;
        public UInt32 NavmeshVersion { get; set; } = _NavmeshVersion_Default;
        #endregion
        #region Magic
        public readonly static UInt32 _Magic_Default = 0xA5E9A03C;
        public UInt32 Magic { get; set; } = _Magic_Default;
        #endregion
        #region Parent
        public ANavmeshParent Parent { get; set; } = default!;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IANavmeshParentGetter INavmeshGeometryGetter.Parent => Parent;
        #endregion
        #region Vertices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<P3Float> _Vertices = new ExtendedList<P3Float>();
        public ExtendedList<P3Float> Vertices
        {
            get => this._Vertices;
            init => this._Vertices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<P3Float> INavmeshGeometryGetter.Vertices => _Vertices;
        #endregion

        #endregion
        #region Triangles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavmeshTriangle> _Triangles = new ExtendedList<NavmeshTriangle>();
        public ExtendedList<NavmeshTriangle> Triangles
        {
            get => this._Triangles;
            init => this._Triangles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavmeshTriangleGetter> INavmeshGeometryGetter.Triangles => _Triangles;
        #endregion

        #endregion
        #region EdgeLinks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<EdgeLink> _EdgeLinks = new ExtendedList<EdgeLink>();
        public ExtendedList<EdgeLink> EdgeLinks
        {
            get => this._EdgeLinks;
            init => this._EdgeLinks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEdgeLinkGetter> INavmeshGeometryGetter.EdgeLinks => _EdgeLinks;
        #endregion

        #endregion
        #region DoorTriangles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DoorTriangle> _DoorTriangles = new ExtendedList<DoorTriangle>();
        public ExtendedList<DoorTriangle> DoorTriangles
        {
            get => this._DoorTriangles;
            init => this._DoorTriangles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDoorTriangleGetter> INavmeshGeometryGetter.DoorTriangles => _DoorTriangles;
        #endregion

        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<UInt64> _Unknown = new ExtendedList<UInt64>();
        public ExtendedList<UInt64> Unknown
        {
            get => this._Unknown;
            init => this._Unknown = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<UInt64> INavmeshGeometryGetter.Unknown => _Unknown;
        #endregion

        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<UInt32> _Unknown2 = new ExtendedList<UInt32>();
        public ExtendedList<UInt32> Unknown2
        {
            get => this._Unknown2;
            init => this._Unknown2 = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<UInt32> INavmeshGeometryGetter.Unknown2 => _Unknown2;
        #endregion

        #endregion
        #region Waypoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavmeshWaypoint> _Waypoints = new ExtendedList<NavmeshWaypoint>();
        public ExtendedList<NavmeshWaypoint> Waypoints
        {
            get => this._Waypoints;
            init => this._Waypoints = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavmeshWaypointGetter> INavmeshGeometryGetter.Waypoints => _Waypoints;
        #endregion

        #endregion
        #region GridSize
        public UInt32 GridSize { get; set; } = default;
        public static RangeUInt32 GridSize_Range = new RangeUInt32(UInt32.MinValue, 12);
        #endregion
        #region GridMaxDistance
        public P2Float GridMaxDistance { get; set; } = default;
        #endregion
        #region GridMin
        public P3Float GridMin { get; set; } = default;
        #endregion
        #region GridMax
        public P3Float GridMax { get; set; } = default;
        #endregion
        #region GridArrays
        public NavmeshGridArray GridArrays { get; set; } = new NavmeshGridArray();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INavmeshGridArrayGetter INavmeshGeometryGetter.GridArrays => GridArrays;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavmeshGeometryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavmeshGeometryGetter rhs) return false;
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INavmeshGeometryGetter? obj)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NavmeshVersion = initialValue;
                this.Magic = initialValue;
                this.Parent = new MaskItem<TItem, ANavmeshParent.Mask<TItem>?>(initialValue, new ANavmeshParent.Mask<TItem>(initialValue));
                this.Vertices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Triangles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>());
                this.EdgeLinks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>());
                this.DoorTriangles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>());
                this.Unknown = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Unknown2 = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Waypoints = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshWaypoint.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshWaypoint.Mask<TItem>?>>());
                this.GridSize = initialValue;
                this.GridMaxDistance = initialValue;
                this.GridMin = initialValue;
                this.GridMax = initialValue;
                this.GridArrays = new MaskItem<TItem, NavmeshGridArray.Mask<TItem>?>(initialValue, new NavmeshGridArray.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem NavmeshVersion,
                TItem Magic,
                TItem Parent,
                TItem Vertices,
                TItem Triangles,
                TItem EdgeLinks,
                TItem DoorTriangles,
                TItem Unknown,
                TItem Unknown2,
                TItem Waypoints,
                TItem GridSize,
                TItem GridMaxDistance,
                TItem GridMin,
                TItem GridMax,
                TItem GridArrays)
            {
                this.NavmeshVersion = NavmeshVersion;
                this.Magic = Magic;
                this.Parent = new MaskItem<TItem, ANavmeshParent.Mask<TItem>?>(Parent, new ANavmeshParent.Mask<TItem>(Parent));
                this.Vertices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Vertices, Enumerable.Empty<(int Index, TItem Value)>());
                this.Triangles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>?>(Triangles, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>());
                this.EdgeLinks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>?>(EdgeLinks, Enumerable.Empty<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>());
                this.DoorTriangles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>?>(DoorTriangles, Enumerable.Empty<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>());
                this.Unknown = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Unknown, Enumerable.Empty<(int Index, TItem Value)>());
                this.Unknown2 = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Unknown2, Enumerable.Empty<(int Index, TItem Value)>());
                this.Waypoints = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshWaypoint.Mask<TItem>?>>?>(Waypoints, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshWaypoint.Mask<TItem>?>>());
                this.GridSize = GridSize;
                this.GridMaxDistance = GridMaxDistance;
                this.GridMin = GridMin;
                this.GridMax = GridMax;
                this.GridArrays = new MaskItem<TItem, NavmeshGridArray.Mask<TItem>?>(GridArrays, new NavmeshGridArray.Mask<TItem>(GridArrays));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NavmeshVersion;
            public TItem Magic;
            public MaskItem<TItem, ANavmeshParent.Mask<TItem>?>? Parent { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Vertices;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>?>? Triangles;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>?>? EdgeLinks;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>?>? DoorTriangles;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Unknown;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Unknown2;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshWaypoint.Mask<TItem>?>>?>? Waypoints;
            public TItem GridSize;
            public TItem GridMaxDistance;
            public TItem GridMin;
            public TItem GridMax;
            public MaskItem<TItem, NavmeshGridArray.Mask<TItem>?>? GridArrays { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NavmeshVersion, rhs.NavmeshVersion)) return false;
                if (!object.Equals(this.Magic, rhs.Magic)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Vertices, rhs.Vertices)) return false;
                if (!object.Equals(this.Triangles, rhs.Triangles)) return false;
                if (!object.Equals(this.EdgeLinks, rhs.EdgeLinks)) return false;
                if (!object.Equals(this.DoorTriangles, rhs.DoorTriangles)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Waypoints, rhs.Waypoints)) return false;
                if (!object.Equals(this.GridSize, rhs.GridSize)) return false;
                if (!object.Equals(this.GridMaxDistance, rhs.GridMaxDistance)) return false;
                if (!object.Equals(this.GridMin, rhs.GridMin)) return false;
                if (!object.Equals(this.GridMax, rhs.GridMax)) return false;
                if (!object.Equals(this.GridArrays, rhs.GridArrays)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavmeshVersion);
                hash.Add(this.Magic);
                hash.Add(this.Parent);
                hash.Add(this.Vertices);
                hash.Add(this.Triangles);
                hash.Add(this.EdgeLinks);
                hash.Add(this.DoorTriangles);
                hash.Add(this.Unknown);
                hash.Add(this.Unknown2);
                hash.Add(this.Waypoints);
                hash.Add(this.GridSize);
                hash.Add(this.GridMaxDistance);
                hash.Add(this.GridMin);
                hash.Add(this.GridMax);
                hash.Add(this.GridArrays);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NavmeshVersion)) return false;
                if (!eval(this.Magic)) return false;
                if (Parent != null)
                {
                    if (!eval(this.Parent.Overall)) return false;
                    if (this.Parent.Specific != null && !this.Parent.Specific.All(eval)) return false;
                }
                if (this.Vertices != null)
                {
                    if (!eval(this.Vertices.Overall)) return false;
                    if (this.Vertices.Specific != null)
                    {
                        foreach (var item in this.Vertices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Triangles != null)
                {
                    if (!eval(this.Triangles.Overall)) return false;
                    if (this.Triangles.Specific != null)
                    {
                        foreach (var item in this.Triangles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.EdgeLinks != null)
                {
                    if (!eval(this.EdgeLinks.Overall)) return false;
                    if (this.EdgeLinks.Specific != null)
                    {
                        foreach (var item in this.EdgeLinks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.DoorTriangles != null)
                {
                    if (!eval(this.DoorTriangles.Overall)) return false;
                    if (this.DoorTriangles.Specific != null)
                    {
                        foreach (var item in this.DoorTriangles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Unknown != null)
                {
                    if (!eval(this.Unknown.Overall)) return false;
                    if (this.Unknown.Specific != null)
                    {
                        foreach (var item in this.Unknown.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Unknown2 != null)
                {
                    if (!eval(this.Unknown2.Overall)) return false;
                    if (this.Unknown2.Specific != null)
                    {
                        foreach (var item in this.Unknown2.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Waypoints != null)
                {
                    if (!eval(this.Waypoints.Overall)) return false;
                    if (this.Waypoints.Specific != null)
                    {
                        foreach (var item in this.Waypoints.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.GridSize)) return false;
                if (!eval(this.GridMaxDistance)) return false;
                if (!eval(this.GridMin)) return false;
                if (!eval(this.GridMax)) return false;
                if (GridArrays != null)
                {
                    if (!eval(this.GridArrays.Overall)) return false;
                    if (this.GridArrays.Specific != null && !this.GridArrays.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NavmeshVersion)) return true;
                if (eval(this.Magic)) return true;
                if (Parent != null)
                {
                    if (eval(this.Parent.Overall)) return true;
                    if (this.Parent.Specific != null && this.Parent.Specific.Any(eval)) return true;
                }
                if (this.Vertices != null)
                {
                    if (eval(this.Vertices.Overall)) return true;
                    if (this.Vertices.Specific != null)
                    {
                        foreach (var item in this.Vertices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Triangles != null)
                {
                    if (eval(this.Triangles.Overall)) return true;
                    if (this.Triangles.Specific != null)
                    {
                        foreach (var item in this.Triangles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.EdgeLinks != null)
                {
                    if (eval(this.EdgeLinks.Overall)) return true;
                    if (this.EdgeLinks.Specific != null)
                    {
                        foreach (var item in this.EdgeLinks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.DoorTriangles != null)
                {
                    if (eval(this.DoorTriangles.Overall)) return true;
                    if (this.DoorTriangles.Specific != null)
                    {
                        foreach (var item in this.DoorTriangles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Unknown != null)
                {
                    if (eval(this.Unknown.Overall)) return true;
                    if (this.Unknown.Specific != null)
                    {
                        foreach (var item in this.Unknown.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Unknown2 != null)
                {
                    if (eval(this.Unknown2.Overall)) return true;
                    if (this.Unknown2.Specific != null)
                    {
                        foreach (var item in this.Unknown2.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Waypoints != null)
                {
                    if (eval(this.Waypoints.Overall)) return true;
                    if (this.Waypoints.Specific != null)
                    {
                        foreach (var item in this.Waypoints.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.GridSize)) return true;
                if (eval(this.GridMaxDistance)) return true;
                if (eval(this.GridMin)) return true;
                if (eval(this.GridMax)) return true;
                if (GridArrays != null)
                {
                    if (eval(this.GridArrays.Overall)) return true;
                    if (this.GridArrays.Specific != null && this.GridArrays.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavmeshGeometry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NavmeshVersion = eval(this.NavmeshVersion);
                obj.Magic = eval(this.Magic);
                obj.Parent = this.Parent == null ? null : new MaskItem<R, ANavmeshParent.Mask<R>?>(eval(this.Parent.Overall), this.Parent.Specific?.Translate(eval));
                if (Vertices != null)
                {
                    obj.Vertices = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Vertices.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Vertices.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Vertices.Specific = l;
                        foreach (var item in Vertices.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Triangles != null)
                {
                    obj.Triangles = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>>?>(eval(this.Triangles.Overall), Enumerable.Empty<MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>>());
                    if (Triangles.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>>();
                        obj.Triangles.Specific = l;
                        foreach (var item in Triangles.Specific)
                        {
                            MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (EdgeLinks != null)
                {
                    obj.EdgeLinks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, EdgeLink.Mask<R>?>>?>(eval(this.EdgeLinks.Overall), Enumerable.Empty<MaskItemIndexed<R, EdgeLink.Mask<R>?>>());
                    if (EdgeLinks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, EdgeLink.Mask<R>?>>();
                        obj.EdgeLinks.Specific = l;
                        foreach (var item in EdgeLinks.Specific)
                        {
                            MaskItemIndexed<R, EdgeLink.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, EdgeLink.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (DoorTriangles != null)
                {
                    obj.DoorTriangles = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DoorTriangle.Mask<R>?>>?>(eval(this.DoorTriangles.Overall), Enumerable.Empty<MaskItemIndexed<R, DoorTriangle.Mask<R>?>>());
                    if (DoorTriangles.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DoorTriangle.Mask<R>?>>();
                        obj.DoorTriangles.Specific = l;
                        foreach (var item in DoorTriangles.Specific)
                        {
                            MaskItemIndexed<R, DoorTriangle.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DoorTriangle.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Unknown != null)
                {
                    obj.Unknown = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Unknown.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Unknown.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Unknown.Specific = l;
                        foreach (var item in Unknown.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Unknown2 != null)
                {
                    obj.Unknown2 = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Unknown2.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Unknown2.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Unknown2.Specific = l;
                        foreach (var item in Unknown2.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Waypoints != null)
                {
                    obj.Waypoints = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavmeshWaypoint.Mask<R>?>>?>(eval(this.Waypoints.Overall), Enumerable.Empty<MaskItemIndexed<R, NavmeshWaypoint.Mask<R>?>>());
                    if (Waypoints.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavmeshWaypoint.Mask<R>?>>();
                        obj.Waypoints.Specific = l;
                        foreach (var item in Waypoints.Specific)
                        {
                            MaskItemIndexed<R, NavmeshWaypoint.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NavmeshWaypoint.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.GridSize = eval(this.GridSize);
                obj.GridMaxDistance = eval(this.GridMaxDistance);
                obj.GridMin = eval(this.GridMin);
                obj.GridMax = eval(this.GridMax);
                obj.GridArrays = this.GridArrays == null ? null : new MaskItem<R, NavmeshGridArray.Mask<R>?>(eval(this.GridArrays.Overall), this.GridArrays.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NavmeshGeometry.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NavmeshGeometry.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NavmeshGeometry.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.NavmeshVersion ?? true)
                    {
                        sb.AppendItem(NavmeshVersion, "NavmeshVersion");
                    }
                    if (printMask?.Magic ?? true)
                    {
                        sb.AppendItem(Magic, "Magic");
                    }
                    if (printMask?.Parent?.Overall ?? true)
                    {
                        Parent?.Print(sb);
                    }
                    if ((printMask?.Vertices?.Overall ?? true)
                        && Vertices is {} VerticesItem)
                    {
                        sb.AppendLine("Vertices =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(VerticesItem.Overall);
                            if (VerticesItem.Specific != null)
                            {
                                foreach (var subItem in VerticesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Triangles?.Overall ?? true)
                        && Triangles is {} TrianglesItem)
                    {
                        sb.AppendLine("Triangles =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TrianglesItem.Overall);
                            if (TrianglesItem.Specific != null)
                            {
                                foreach (var subItem in TrianglesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.EdgeLinks?.Overall ?? true)
                        && EdgeLinks is {} EdgeLinksItem)
                    {
                        sb.AppendLine("EdgeLinks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EdgeLinksItem.Overall);
                            if (EdgeLinksItem.Specific != null)
                            {
                                foreach (var subItem in EdgeLinksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.DoorTriangles?.Overall ?? true)
                        && DoorTriangles is {} DoorTrianglesItem)
                    {
                        sb.AppendLine("DoorTriangles =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DoorTrianglesItem.Overall);
                            if (DoorTrianglesItem.Specific != null)
                            {
                                foreach (var subItem in DoorTrianglesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Unknown?.Overall ?? true)
                        && Unknown is {} UnknownItem)
                    {
                        sb.AppendLine("Unknown =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(UnknownItem.Overall);
                            if (UnknownItem.Specific != null)
                            {
                                foreach (var subItem in UnknownItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Unknown2?.Overall ?? true)
                        && Unknown2 is {} Unknown2Item)
                    {
                        sb.AppendLine("Unknown2 =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(Unknown2Item.Overall);
                            if (Unknown2Item.Specific != null)
                            {
                                foreach (var subItem in Unknown2Item.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Waypoints?.Overall ?? true)
                        && Waypoints is {} WaypointsItem)
                    {
                        sb.AppendLine("Waypoints =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WaypointsItem.Overall);
                            if (WaypointsItem.Specific != null)
                            {
                                foreach (var subItem in WaypointsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.GridSize ?? true)
                    {
                        sb.AppendItem(GridSize, "GridSize");
                    }
                    if (printMask?.GridMaxDistance ?? true)
                    {
                        sb.AppendItem(GridMaxDistance, "GridMaxDistance");
                    }
                    if (printMask?.GridMin ?? true)
                    {
                        sb.AppendItem(GridMin, "GridMin");
                    }
                    if (printMask?.GridMax ?? true)
                    {
                        sb.AppendItem(GridMax, "GridMax");
                    }
                    if (printMask?.GridArrays?.Overall ?? true)
                    {
                        GridArrays?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NavmeshVersion;
            public Exception? Magic;
            public MaskItem<Exception?, ANavmeshParent.ErrorMask?>? Parent;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Vertices;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshTriangle.ErrorMask?>>?>? Triangles;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EdgeLink.ErrorMask?>>?>? EdgeLinks;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DoorTriangle.ErrorMask?>>?>? DoorTriangles;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Unknown;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Unknown2;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshWaypoint.ErrorMask?>>?>? Waypoints;
            public Exception? GridSize;
            public Exception? GridMaxDistance;
            public Exception? GridMin;
            public Exception? GridMax;
            public MaskItem<Exception?, NavmeshGridArray.ErrorMask?>? GridArrays;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NavmeshGeometry_FieldIndex enu = (NavmeshGeometry_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGeometry_FieldIndex.NavmeshVersion:
                        return NavmeshVersion;
                    case NavmeshGeometry_FieldIndex.Magic:
                        return Magic;
                    case NavmeshGeometry_FieldIndex.Parent:
                        return Parent;
                    case NavmeshGeometry_FieldIndex.Vertices:
                        return Vertices;
                    case NavmeshGeometry_FieldIndex.Triangles:
                        return Triangles;
                    case NavmeshGeometry_FieldIndex.EdgeLinks:
                        return EdgeLinks;
                    case NavmeshGeometry_FieldIndex.DoorTriangles:
                        return DoorTriangles;
                    case NavmeshGeometry_FieldIndex.Unknown:
                        return Unknown;
                    case NavmeshGeometry_FieldIndex.Unknown2:
                        return Unknown2;
                    case NavmeshGeometry_FieldIndex.Waypoints:
                        return Waypoints;
                    case NavmeshGeometry_FieldIndex.GridSize:
                        return GridSize;
                    case NavmeshGeometry_FieldIndex.GridMaxDistance:
                        return GridMaxDistance;
                    case NavmeshGeometry_FieldIndex.GridMin:
                        return GridMin;
                    case NavmeshGeometry_FieldIndex.GridMax:
                        return GridMax;
                    case NavmeshGeometry_FieldIndex.GridArrays:
                        return GridArrays;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NavmeshGeometry_FieldIndex enu = (NavmeshGeometry_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGeometry_FieldIndex.NavmeshVersion:
                        this.NavmeshVersion = ex;
                        break;
                    case NavmeshGeometry_FieldIndex.Magic:
                        this.Magic = ex;
                        break;
                    case NavmeshGeometry_FieldIndex.Parent:
                        this.Parent = new MaskItem<Exception?, ANavmeshParent.ErrorMask?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.Vertices:
                        this.Vertices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.Triangles:
                        this.Triangles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshTriangle.ErrorMask?>>?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.EdgeLinks:
                        this.EdgeLinks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EdgeLink.ErrorMask?>>?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.DoorTriangles:
                        this.DoorTriangles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DoorTriangle.ErrorMask?>>?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.Unknown:
                        this.Unknown = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.Unknown2:
                        this.Unknown2 = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.Waypoints:
                        this.Waypoints = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshWaypoint.ErrorMask?>>?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.GridSize:
                        this.GridSize = ex;
                        break;
                    case NavmeshGeometry_FieldIndex.GridMaxDistance:
                        this.GridMaxDistance = ex;
                        break;
                    case NavmeshGeometry_FieldIndex.GridMin:
                        this.GridMin = ex;
                        break;
                    case NavmeshGeometry_FieldIndex.GridMax:
                        this.GridMax = ex;
                        break;
                    case NavmeshGeometry_FieldIndex.GridArrays:
                        this.GridArrays = new MaskItem<Exception?, NavmeshGridArray.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NavmeshGeometry_FieldIndex enu = (NavmeshGeometry_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGeometry_FieldIndex.NavmeshVersion:
                        this.NavmeshVersion = (Exception?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Magic:
                        this.Magic = (Exception?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Parent:
                        this.Parent = (MaskItem<Exception?, ANavmeshParent.ErrorMask?>?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Vertices:
                        this.Vertices = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Triangles:
                        this.Triangles = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshTriangle.ErrorMask?>>?>)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.EdgeLinks:
                        this.EdgeLinks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EdgeLink.ErrorMask?>>?>)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.DoorTriangles:
                        this.DoorTriangles = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DoorTriangle.ErrorMask?>>?>)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Unknown:
                        this.Unknown = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Unknown2:
                        this.Unknown2 = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Waypoints:
                        this.Waypoints = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshWaypoint.ErrorMask?>>?>)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.GridSize:
                        this.GridSize = (Exception?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.GridMaxDistance:
                        this.GridMaxDistance = (Exception?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.GridMin:
                        this.GridMin = (Exception?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.GridMax:
                        this.GridMax = (Exception?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.GridArrays:
                        this.GridArrays = (MaskItem<Exception?, NavmeshGridArray.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NavmeshVersion != null) return true;
                if (Magic != null) return true;
                if (Parent != null) return true;
                if (Vertices != null) return true;
                if (Triangles != null) return true;
                if (EdgeLinks != null) return true;
                if (DoorTriangles != null) return true;
                if (Unknown != null) return true;
                if (Unknown2 != null) return true;
                if (Waypoints != null) return true;
                if (GridSize != null) return true;
                if (GridMaxDistance != null) return true;
                if (GridMin != null) return true;
                if (GridMax != null) return true;
                if (GridArrays != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(NavmeshVersion, "NavmeshVersion");
                }
                {
                    sb.AppendItem(Magic, "Magic");
                }
                Parent?.Print(sb);
                if (Vertices is {} VerticesItem)
                {
                    sb.AppendLine("Vertices =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(VerticesItem.Overall);
                        if (VerticesItem.Specific != null)
                        {
                            foreach (var subItem in VerticesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Triangles is {} TrianglesItem)
                {
                    sb.AppendLine("Triangles =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TrianglesItem.Overall);
                        if (TrianglesItem.Specific != null)
                        {
                            foreach (var subItem in TrianglesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (EdgeLinks is {} EdgeLinksItem)
                {
                    sb.AppendLine("EdgeLinks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EdgeLinksItem.Overall);
                        if (EdgeLinksItem.Specific != null)
                        {
                            foreach (var subItem in EdgeLinksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (DoorTriangles is {} DoorTrianglesItem)
                {
                    sb.AppendLine("DoorTriangles =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DoorTrianglesItem.Overall);
                        if (DoorTrianglesItem.Specific != null)
                        {
                            foreach (var subItem in DoorTrianglesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Unknown is {} UnknownItem)
                {
                    sb.AppendLine("Unknown =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(UnknownItem.Overall);
                        if (UnknownItem.Specific != null)
                        {
                            foreach (var subItem in UnknownItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Unknown2 is {} Unknown2Item)
                {
                    sb.AppendLine("Unknown2 =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(Unknown2Item.Overall);
                        if (Unknown2Item.Specific != null)
                        {
                            foreach (var subItem in Unknown2Item.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Waypoints is {} WaypointsItem)
                {
                    sb.AppendLine("Waypoints =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WaypointsItem.Overall);
                        if (WaypointsItem.Specific != null)
                        {
                            foreach (var subItem in WaypointsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(GridSize, "GridSize");
                }
                {
                    sb.AppendItem(GridMaxDistance, "GridMaxDistance");
                }
                {
                    sb.AppendItem(GridMin, "GridMin");
                }
                {
                    sb.AppendItem(GridMax, "GridMax");
                }
                GridArrays?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavmeshVersion = this.NavmeshVersion.Combine(rhs.NavmeshVersion);
                ret.Magic = this.Magic.Combine(rhs.Magic);
                ret.Parent = this.Parent.Combine(rhs.Parent, (l, r) => l.Combine(r));
                ret.Vertices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Vertices?.Overall, rhs.Vertices?.Overall), ExceptionExt.Combine(this.Vertices?.Specific, rhs.Vertices?.Specific));
                ret.Triangles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshTriangle.ErrorMask?>>?>(ExceptionExt.Combine(this.Triangles?.Overall, rhs.Triangles?.Overall), ExceptionExt.Combine(this.Triangles?.Specific, rhs.Triangles?.Specific));
                ret.EdgeLinks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EdgeLink.ErrorMask?>>?>(ExceptionExt.Combine(this.EdgeLinks?.Overall, rhs.EdgeLinks?.Overall), ExceptionExt.Combine(this.EdgeLinks?.Specific, rhs.EdgeLinks?.Specific));
                ret.DoorTriangles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DoorTriangle.ErrorMask?>>?>(ExceptionExt.Combine(this.DoorTriangles?.Overall, rhs.DoorTriangles?.Overall), ExceptionExt.Combine(this.DoorTriangles?.Specific, rhs.DoorTriangles?.Specific));
                ret.Unknown = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Unknown?.Overall, rhs.Unknown?.Overall), ExceptionExt.Combine(this.Unknown?.Specific, rhs.Unknown?.Specific));
                ret.Unknown2 = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Unknown2?.Overall, rhs.Unknown2?.Overall), ExceptionExt.Combine(this.Unknown2?.Specific, rhs.Unknown2?.Specific));
                ret.Waypoints = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshWaypoint.ErrorMask?>>?>(ExceptionExt.Combine(this.Waypoints?.Overall, rhs.Waypoints?.Overall), ExceptionExt.Combine(this.Waypoints?.Specific, rhs.Waypoints?.Specific));
                ret.GridSize = this.GridSize.Combine(rhs.GridSize);
                ret.GridMaxDistance = this.GridMaxDistance.Combine(rhs.GridMaxDistance);
                ret.GridMin = this.GridMin.Combine(rhs.GridMin);
                ret.GridMax = this.GridMax.Combine(rhs.GridMax);
                ret.GridArrays = this.GridArrays.Combine(rhs.GridArrays, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NavmeshVersion;
            public bool Magic;
            public ANavmeshParent.TranslationMask? Parent;
            public bool Vertices;
            public NavmeshTriangle.TranslationMask? Triangles;
            public EdgeLink.TranslationMask? EdgeLinks;
            public DoorTriangle.TranslationMask? DoorTriangles;
            public bool Unknown;
            public bool Unknown2;
            public NavmeshWaypoint.TranslationMask? Waypoints;
            public bool GridSize;
            public bool GridMaxDistance;
            public bool GridMin;
            public bool GridMax;
            public NavmeshGridArray.TranslationMask? GridArrays;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NavmeshVersion = defaultOn;
                this.Magic = defaultOn;
                this.Vertices = defaultOn;
                this.Unknown = defaultOn;
                this.Unknown2 = defaultOn;
                this.GridSize = defaultOn;
                this.GridMaxDistance = defaultOn;
                this.GridMin = defaultOn;
                this.GridMax = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NavmeshVersion, null));
                ret.Add((Magic, null));
                ret.Add((Parent != null ? Parent.OnOverall : DefaultOn, Parent?.GetCrystal()));
                ret.Add((Vertices, null));
                ret.Add((Triangles == null ? DefaultOn : !Triangles.GetCrystal().CopyNothing, Triangles?.GetCrystal()));
                ret.Add((EdgeLinks == null ? DefaultOn : !EdgeLinks.GetCrystal().CopyNothing, EdgeLinks?.GetCrystal()));
                ret.Add((DoorTriangles == null ? DefaultOn : !DoorTriangles.GetCrystal().CopyNothing, DoorTriangles?.GetCrystal()));
                ret.Add((Unknown, null));
                ret.Add((Unknown2, null));
                ret.Add((Waypoints == null ? DefaultOn : !Waypoints.GetCrystal().CopyNothing, Waypoints?.GetCrystal()));
                ret.Add((GridSize, null));
                ret.Add((GridMaxDistance, null));
                ret.Add((GridMin, null));
                ret.Add((GridMax, null));
                ret.Add((GridArrays != null ? GridArrays.OnOverall : DefaultOn, GridArrays?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavmeshGeometryCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavmeshGeometrySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshGeometryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavmeshGeometryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NavmeshGeometry CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NavmeshGeometry();
            ((NavmeshGeometrySetterCommon)((INavmeshGeometryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavmeshGeometry item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NavmeshGeometrySetterCommon)((INavmeshGeometryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NavmeshGeometry GetNew()
        {
            return new NavmeshGeometry();
        }

    }
    #endregion

    #region Interface
    public partial interface INavmeshGeometry :
        IFormLinkContainer,
        ILoquiObjectSetter<INavmeshGeometry>,
        INavmeshGeometryGetter
    {
        new UInt32 NavmeshVersion { get; set; }
        new UInt32 Magic { get; set; }
        new ANavmeshParent Parent { get; set; }
        new ExtendedList<P3Float> Vertices { get; }
        new ExtendedList<NavmeshTriangle> Triangles { get; }
        new ExtendedList<EdgeLink> EdgeLinks { get; }
        new ExtendedList<DoorTriangle> DoorTriangles { get; }
        new ExtendedList<UInt64> Unknown { get; }
        new ExtendedList<UInt32> Unknown2 { get; }
        new ExtendedList<NavmeshWaypoint> Waypoints { get; }
        new UInt32 GridSize { get; set; }
        new P2Float GridMaxDistance { get; set; }
        new P3Float GridMin { get; set; }
        new P3Float GridMax { get; set; }
        new NavmeshGridArray GridArrays { get; set; }
    }

    public partial interface INavmeshGeometryGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INavmeshGeometryGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NavmeshGeometry_Registration.Instance;
        UInt32 NavmeshVersion { get; }
        UInt32 Magic { get; }
        IANavmeshParentGetter Parent { get; }
        IReadOnlyList<P3Float> Vertices { get; }
        IReadOnlyList<INavmeshTriangleGetter> Triangles { get; }
        IReadOnlyList<IEdgeLinkGetter> EdgeLinks { get; }
        IReadOnlyList<IDoorTriangleGetter> DoorTriangles { get; }
        IReadOnlyList<UInt64> Unknown { get; }
        IReadOnlyList<UInt32> Unknown2 { get; }
        IReadOnlyList<INavmeshWaypointGetter> Waypoints { get; }
        UInt32 GridSize { get; }
        P2Float GridMaxDistance { get; }
        P3Float GridMin { get; }
        P3Float GridMax { get; }
        INavmeshGridArrayGetter GridArrays { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavmeshGeometryMixIn
    {
        public static void Clear(this INavmeshGeometry item)
        {
            ((NavmeshGeometrySetterCommon)((INavmeshGeometryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavmeshGeometry.Mask<bool> GetEqualsMask(
            this INavmeshGeometryGetter item,
            INavmeshGeometryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INavmeshGeometryGetter item,
            string? name = null,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INavmeshGeometryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavmeshGeometryGetter item,
            INavmeshGeometryGetter rhs,
            NavmeshGeometry.TranslationMask? equalsMask = null)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INavmeshGeometry lhs,
            INavmeshGeometryGetter rhs)
        {
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshGeometry lhs,
            INavmeshGeometryGetter rhs,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshGeometry lhs,
            INavmeshGeometryGetter rhs,
            out NavmeshGeometry.ErrorMask errorMask,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavmeshGeometry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavmeshGeometry lhs,
            INavmeshGeometryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavmeshGeometry DeepCopy(
            this INavmeshGeometryGetter item,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            return ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavmeshGeometry DeepCopy(
            this INavmeshGeometryGetter item,
            out NavmeshGeometry.ErrorMask errorMask,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            return ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavmeshGeometry DeepCopy(
            this INavmeshGeometryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavmeshGeometry item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NavmeshGeometrySetterCommon)((INavmeshGeometryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum NavmeshGeometry_FieldIndex
    {
        NavmeshVersion = 0,
        Magic = 1,
        Parent = 2,
        Vertices = 3,
        Triangles = 4,
        EdgeLinks = 5,
        DoorTriangles = 6,
        Unknown = 7,
        Unknown2 = 8,
        Waypoints = 9,
        GridSize = 10,
        GridMaxDistance = 11,
        GridMin = 12,
        GridMax = 13,
        GridArrays = 14,
    }
    #endregion

    #region Registration
    internal partial class NavmeshGeometry_Registration : ILoquiRegistration
    {
        public static readonly NavmeshGeometry_Registration Instance = new NavmeshGeometry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 324,
            version: 0);

        public const string GUID = "0f14b502-0797-43b9-810a-e958643a5d68";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(NavmeshGeometry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavmeshGeometry.ErrorMask);

        public static readonly Type ClassType = typeof(NavmeshGeometry);

        public static readonly Type GetterType = typeof(INavmeshGeometryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavmeshGeometry);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NavmeshGeometry";

        public const string Name = "NavmeshGeometry";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NVNM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.NVNM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NavmeshGeometryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NavmeshGeometrySetterCommon
    {
        public static readonly NavmeshGeometrySetterCommon Instance = new NavmeshGeometrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavmeshGeometry item)
        {
            ClearPartial();
            item.NavmeshVersion = NavmeshGeometry._NavmeshVersion_Default;
            item.Magic = NavmeshGeometry._Magic_Default;
            item.Parent.Clear();
            item.Vertices.Clear();
            item.Triangles.Clear();
            item.EdgeLinks.Clear();
            item.DoorTriangles.Clear();
            item.Unknown.Clear();
            item.Unknown2.Clear();
            item.Waypoints.Clear();
            item.GridSize = default;
            item.GridMaxDistance = default;
            item.GridMin = default;
            item.GridMax = default;
            item.GridArrays.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(INavmeshGeometry obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Parent.RemapLinks(mapping);
            obj.EdgeLinks.RemapLinks(mapping);
            obj.DoorTriangles.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavmeshGeometry item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.NVNM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NavmeshGeometryBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NavmeshGeometryCommon
    {
        public static readonly NavmeshGeometryCommon Instance = new NavmeshGeometryCommon();

        public NavmeshGeometry.Mask<bool> GetEqualsMask(
            INavmeshGeometryGetter item,
            INavmeshGeometryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavmeshGeometry.Mask<bool>(false);
            ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavmeshGeometryGetter item,
            INavmeshGeometryGetter rhs,
            NavmeshGeometry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.NavmeshVersion = item.NavmeshVersion == rhs.NavmeshVersion;
            ret.Magic = item.Magic == rhs.Magic;
            ret.Parent = MaskItemExt.Factory(item.Parent.GetEqualsMask(rhs.Parent, include), include);
            ret.Vertices = item.Vertices.CollectionEqualsHelper(
                rhs.Vertices,
                (l, r) => l.Equals(r),
                include);
            ret.Triangles = item.Triangles.CollectionEqualsHelper(
                rhs.Triangles,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EdgeLinks = item.EdgeLinks.CollectionEqualsHelper(
                rhs.EdgeLinks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DoorTriangles = item.DoorTriangles.CollectionEqualsHelper(
                rhs.DoorTriangles,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Unknown = item.Unknown.CollectionEqualsHelper(
                rhs.Unknown,
                (l, r) => l == r,
                include);
            ret.Unknown2 = item.Unknown2.CollectionEqualsHelper(
                rhs.Unknown2,
                (l, r) => l == r,
                include);
            ret.Waypoints = item.Waypoints.CollectionEqualsHelper(
                rhs.Waypoints,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.GridSize = item.GridSize == rhs.GridSize;
            ret.GridMaxDistance = item.GridMaxDistance.Equals(rhs.GridMaxDistance);
            ret.GridMin = item.GridMin.Equals(rhs.GridMin);
            ret.GridMax = item.GridMax.Equals(rhs.GridMax);
            ret.GridArrays = MaskItemExt.Factory(item.GridArrays.GetEqualsMask(rhs.GridArrays, include), include);
        }
        
        public string Print(
            INavmeshGeometryGetter item,
            string? name = null,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INavmeshGeometryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NavmeshGeometry =>");
            }
            else
            {
                sb.AppendLine($"{name} (NavmeshGeometry) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INavmeshGeometryGetter item,
            StructuredStringBuilder sb,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            if (printMask?.NavmeshVersion ?? true)
            {
                sb.AppendItem(item.NavmeshVersion, "NavmeshVersion");
            }
            if (printMask?.Magic ?? true)
            {
                sb.AppendItem(item.Magic, "Magic");
            }
            if (printMask?.Parent?.Overall ?? true)
            {
                item.Parent?.Print(sb, "Parent");
            }
            if (printMask?.Vertices?.Overall ?? true)
            {
                sb.AppendLine("Vertices =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Vertices)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.Triangles?.Overall ?? true)
            {
                sb.AppendLine("Triangles =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Triangles)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.EdgeLinks?.Overall ?? true)
            {
                sb.AppendLine("EdgeLinks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.EdgeLinks)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.DoorTriangles?.Overall ?? true)
            {
                sb.AppendLine("DoorTriangles =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.DoorTriangles)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Unknown?.Overall ?? true)
            {
                sb.AppendLine("Unknown =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Unknown)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.Unknown2?.Overall ?? true)
            {
                sb.AppendLine("Unknown2 =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Unknown2)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.Waypoints?.Overall ?? true)
            {
                sb.AppendLine("Waypoints =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Waypoints)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.GridSize ?? true)
            {
                sb.AppendItem(item.GridSize, "GridSize");
            }
            if (printMask?.GridMaxDistance ?? true)
            {
                sb.AppendItem(item.GridMaxDistance, "GridMaxDistance");
            }
            if (printMask?.GridMin ?? true)
            {
                sb.AppendItem(item.GridMin, "GridMin");
            }
            if (printMask?.GridMax ?? true)
            {
                sb.AppendItem(item.GridMax, "GridMax");
            }
            if (printMask?.GridArrays?.Overall ?? true)
            {
                item.GridArrays?.Print(sb, "GridArrays");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavmeshGeometryGetter? lhs,
            INavmeshGeometryGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.NavmeshVersion) ?? true))
            {
                if (lhs.NavmeshVersion != rhs.NavmeshVersion) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Magic) ?? true))
            {
                if (lhs.Magic != rhs.Magic) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Parent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Parent, rhs.Parent, out var lhsParent, out var rhsParent, out var isParentEqual))
                {
                    if (!((ANavmeshParentCommon)((IANavmeshParentGetter)lhsParent).CommonInstance()!).Equals(lhsParent, rhsParent, crystal?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.Parent))) return false;
                }
                else if (!isParentEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Vertices) ?? true))
            {
                if (!lhs.Vertices.SequenceEqualNullable(rhs.Vertices)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Triangles) ?? true))
            {
                if (!lhs.Triangles.SequenceEqual(rhs.Triangles, (l, r) => ((NavmeshTriangleCommon)((INavmeshTriangleGetter)l).CommonInstance()!).Equals(l, r, crystal?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.Triangles)))) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.EdgeLinks) ?? true))
            {
                if (!lhs.EdgeLinks.SequenceEqual(rhs.EdgeLinks, (l, r) => ((EdgeLinkCommon)((IEdgeLinkGetter)l).CommonInstance()!).Equals(l, r, crystal?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.EdgeLinks)))) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.DoorTriangles) ?? true))
            {
                if (!lhs.DoorTriangles.SequenceEqual(rhs.DoorTriangles, (l, r) => ((DoorTriangleCommon)((IDoorTriangleGetter)l).CommonInstance()!).Equals(l, r, crystal?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.DoorTriangles)))) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Unknown) ?? true))
            {
                if (!lhs.Unknown.SequenceEqualNullable(rhs.Unknown)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Unknown2) ?? true))
            {
                if (!lhs.Unknown2.SequenceEqualNullable(rhs.Unknown2)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Waypoints) ?? true))
            {
                if (!lhs.Waypoints.SequenceEqual(rhs.Waypoints, (l, r) => ((NavmeshWaypointCommon)((INavmeshWaypointGetter)l).CommonInstance()!).Equals(l, r, crystal?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.Waypoints)))) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridSize) ?? true))
            {
                if (lhs.GridSize != rhs.GridSize) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridMaxDistance) ?? true))
            {
                if (!lhs.GridMaxDistance.Equals(rhs.GridMaxDistance)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridMin) ?? true))
            {
                if (!lhs.GridMin.Equals(rhs.GridMin)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridMax) ?? true))
            {
                if (!lhs.GridMax.Equals(rhs.GridMax)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridArrays) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GridArrays, rhs.GridArrays, out var lhsGridArrays, out var rhsGridArrays, out var isGridArraysEqual))
                {
                    if (!((NavmeshGridArrayCommon)((INavmeshGridArrayGetter)lhsGridArrays).CommonInstance()!).Equals(lhsGridArrays, rhsGridArrays, crystal?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.GridArrays))) return false;
                }
                else if (!isGridArraysEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INavmeshGeometryGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NavmeshVersion);
            hash.Add(item.Magic);
            hash.Add(item.Parent);
            hash.Add(item.Vertices);
            hash.Add(item.Triangles);
            hash.Add(item.EdgeLinks);
            hash.Add(item.DoorTriangles);
            hash.Add(item.Unknown);
            hash.Add(item.Unknown2);
            hash.Add(item.Waypoints);
            hash.Add(item.GridSize);
            hash.Add(item.GridMaxDistance);
            hash.Add(item.GridMin);
            hash.Add(item.GridMax);
            hash.Add(item.GridArrays);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NavmeshGeometry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INavmeshGeometryGetter obj)
        {
            if (obj.Parent is IFormLinkContainerGetter ParentlinkCont)
            {
                foreach (var item in ParentlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.EdgeLinks.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.DoorTriangles.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NavmeshGeometrySetterTranslationCommon
    {
        public static readonly NavmeshGeometrySetterTranslationCommon Instance = new NavmeshGeometrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavmeshGeometry item,
            INavmeshGeometryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.NavmeshVersion) ?? true))
            {
                item.NavmeshVersion = rhs.NavmeshVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Magic) ?? true))
            {
                item.Magic = rhs.Magic;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Parent) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.Parent);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Parent) ?? true))
                    {
                        item.Parent = rhs.Parent.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.Parent),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Vertices) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.Vertices);
                try
                {
                    item.Vertices.SetTo(rhs.Vertices);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Triangles) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.Triangles);
                try
                {
                    item.Triangles.SetTo(
                        rhs.Triangles
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.EdgeLinks) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.EdgeLinks);
                try
                {
                    item.EdgeLinks.SetTo(
                        rhs.EdgeLinks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.DoorTriangles) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.DoorTriangles);
                try
                {
                    item.DoorTriangles.SetTo(
                        rhs.DoorTriangles
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Unknown) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.Unknown);
                try
                {
                    item.Unknown.SetTo(rhs.Unknown);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Unknown2) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.Unknown2);
                try
                {
                    item.Unknown2.SetTo(rhs.Unknown2);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Waypoints) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.Waypoints);
                try
                {
                    item.Waypoints.SetTo(
                        rhs.Waypoints
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridSize) ?? true))
            {
                item.GridSize = rhs.GridSize;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridMaxDistance) ?? true))
            {
                item.GridMaxDistance = rhs.GridMaxDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridMin) ?? true))
            {
                item.GridMin = rhs.GridMin;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridMax) ?? true))
            {
                item.GridMax = rhs.GridMax;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridArrays) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.GridArrays);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.GridArrays) ?? true))
                    {
                        item.GridArrays = rhs.GridArrays.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.GridArrays),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public NavmeshGeometry DeepCopy(
            INavmeshGeometryGetter item,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            NavmeshGeometry ret = (NavmeshGeometry)((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavmeshGeometry DeepCopy(
            INavmeshGeometryGetter item,
            out NavmeshGeometry.ErrorMask errorMask,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavmeshGeometry ret = (NavmeshGeometry)((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavmeshGeometry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavmeshGeometry DeepCopy(
            INavmeshGeometryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavmeshGeometry ret = (NavmeshGeometry)((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavmeshGeometry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshGeometry_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavmeshGeometry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshGeometryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NavmeshGeometrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshGeometrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavmeshGeometryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NavmeshGeometryBinaryWriteTranslation Instance = new NavmeshGeometryBinaryWriteTranslation();

        public static void WriteEmbedded(
            INavmeshGeometryGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.NavmeshVersion);
            writer.Write(item.Magic);
            NavmeshGeometryBinaryWriteTranslation.WriteBinaryParent(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<P3Float>.Instance.Write(
                writer: writer,
                items: item.Vertices,
                countLengthLength: 4,
                transl: P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<INavmeshTriangleGetter>.Instance.Write(
                writer: writer,
                items: item.Triangles,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, INavmeshTriangleGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((NavmeshTriangleBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IEdgeLinkGetter>.Instance.Write(
                writer: writer,
                items: item.EdgeLinks,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IEdgeLinkGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((EdgeLinkBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IDoorTriangleGetter>.Instance.Write(
                writer: writer,
                items: item.DoorTriangles,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IDoorTriangleGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((DoorTriangleBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<UInt64>.Instance.Write(
                writer: writer,
                items: item.Unknown,
                countLengthLength: 4,
                transl: UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<UInt32>.Instance.Write(
                writer: writer,
                items: item.Unknown2,
                countLengthLength: 4,
                transl: UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<INavmeshWaypointGetter>.Instance.Write(
                writer: writer,
                items: item.Waypoints,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, INavmeshWaypointGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((NavmeshWaypointBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            writer.Write(item.GridSize);
            P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GridMaxDistance);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GridMin);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GridMax);
            var GridArraysItem = item.GridArrays;
            ((NavmeshGridArrayBinaryWriteTranslation)((IBinaryItem)GridArraysItem).BinaryWriteTranslator).Write(
                item: GridArraysItem,
                writer: writer);
        }

        public static partial void WriteBinaryParentCustom(
            MutagenWriter writer,
            INavmeshGeometryGetter item);

        public static void WriteBinaryParent(
            MutagenWriter writer,
            INavmeshGeometryGetter item)
        {
            WriteBinaryParentCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            INavmeshGeometryGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.NVNM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INavmeshGeometryGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NavmeshGeometryBinaryCreateTranslation
    {
        public static readonly NavmeshGeometryBinaryCreateTranslation Instance = new NavmeshGeometryBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INavmeshGeometry item,
            MutagenFrame frame)
        {
            item.NavmeshVersion = frame.ReadUInt32();
            item.Magic = frame.ReadUInt32();
            NavmeshGeometryBinaryCreateTranslation.FillBinaryParentCustom(
                frame: frame,
                item: item);
            item.Vertices.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<P3Float>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
            item.Triangles.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<NavmeshTriangle>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: NavmeshTriangle.TryCreateFromBinary));
            item.EdgeLinks.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<EdgeLink>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: EdgeLink.TryCreateFromBinary));
            item.DoorTriangles.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<DoorTriangle>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: DoorTriangle.TryCreateFromBinary));
            item.Unknown.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<UInt64>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
            item.Unknown2.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<UInt32>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
            item.Waypoints.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<NavmeshWaypoint>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: NavmeshWaypoint.TryCreateFromBinary));
            item.GridSize = frame.ReadUInt32();
            item.GridMaxDistance = P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.GridMin = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.GridMax = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.GridArrays = Mutagen.Bethesda.Fallout4.NavmeshGridArray.CreateFromBinary(frame: frame);
        }

        public static partial void FillBinaryParentCustom(
            MutagenFrame frame,
            INavmeshGeometry item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NavmeshGeometryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INavmeshGeometryGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavmeshGeometryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class NavmeshGeometryBinaryOverlay :
        PluginBinaryOverlay,
        INavmeshGeometryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshGeometry_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavmeshGeometry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshGeometryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshGeometrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INavmeshGeometryGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavmeshGeometryCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshGeometryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavmeshGeometryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt32 NavmeshVersion => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x0, 0x4));
        public UInt32 Magic => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x4, 0x4));
        #region Parent
        public partial IANavmeshParentGetter GetParentCustom(int location);
        public IANavmeshParentGetter Parent => GetParentCustom(location: 0x8);
        #endregion
        #region Vertices
        public IReadOnlyList<P3Float> Vertices => BinaryOverlayList.FactoryByCountLength<P3Float>(_data.Slice(0x10), _package, 12, countLength: 4, (s, p) => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(s));
        protected int VerticesEndingPos;
        #endregion
        #region Triangles
        protected int TrianglesEndingPos;
        partial void CustomTrianglesEndPos();
        #endregion
        #region EdgeLinks
        public IReadOnlyList<IEdgeLinkGetter> EdgeLinks => BinaryOverlayList.FactoryByCountLength<IEdgeLinkGetter>(_data.Slice(TrianglesEndingPos), _package, 11, countLength: 4, (s, p) => EdgeLinkBinaryOverlay.EdgeLinkFactory(s, p));
        protected int EdgeLinksEndingPos;
        #endregion
        #region DoorTriangles
        public IReadOnlyList<IDoorTriangleGetter> DoorTriangles => BinaryOverlayList.FactoryByCountLength<IDoorTriangleGetter>(_data.Slice(EdgeLinksEndingPos), _package, 10, countLength: 4, (s, p) => DoorTriangleBinaryOverlay.DoorTriangleFactory(s, p));
        protected int DoorTrianglesEndingPos;
        #endregion
        #region Unknown
        public IReadOnlyList<UInt64> Unknown => BinaryOverlayList.FactoryByCountLength<UInt64>(_data.Slice(DoorTrianglesEndingPos), _package, 8, countLength: 4, (s, p) => BinaryPrimitives.ReadUInt64LittleEndian(s));
        protected int UnknownEndingPos;
        #endregion
        #region Unknown2
        public IReadOnlyList<UInt32> Unknown2 => BinaryOverlayList.FactoryByCountLength<UInt32>(_data.Slice(UnknownEndingPos), _package, 4, countLength: 4, (s, p) => BinaryPrimitives.ReadUInt32LittleEndian(s));
        protected int Unknown2EndingPos;
        #endregion
        #region Waypoints
        public IReadOnlyList<INavmeshWaypointGetter> Waypoints => BinaryOverlayList.FactoryByCountLength<INavmeshWaypointGetter>(_data.Slice(Unknown2EndingPos), _package, 18, countLength: 4, (s, p) => NavmeshWaypointBinaryOverlay.NavmeshWaypointFactory(s, p));
        protected int WaypointsEndingPos;
        #endregion
        public UInt32 GridSize => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(WaypointsEndingPos, 0x4));
        public P2Float GridMaxDistance => P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(WaypointsEndingPos + 0x4, 0x8));
        public P3Float GridMin => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(WaypointsEndingPos + 0xC, 0xC));
        public P3Float GridMax => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(WaypointsEndingPos + 0x18, 0xC));
        #region GridArrays
        public INavmeshGridArrayGetter GridArrays => NavmeshGridArrayBinaryOverlay.NavmeshGridArrayFactory(new OverlayStream(_data.Slice(WaypointsEndingPos + 0x24), _package), _package, default(TypedParseParams));
        protected int GridArraysEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavmeshGeometryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static INavmeshGeometryGetter NavmeshGeometryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            var ret = new NavmeshGeometryBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, translationParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecordHeader().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            ret.VerticesEndingPos = 0x10 + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(0x10)) * 12 + 4;
            ret.CustomTrianglesEndPos();
            ret.EdgeLinksEndingPos = ret.TrianglesEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(ret.TrianglesEndingPos)) * 11 + 4;
            ret.DoorTrianglesEndingPos = ret.EdgeLinksEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(ret.EdgeLinksEndingPos)) * 10 + 4;
            ret.UnknownEndingPos = ret.DoorTrianglesEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(ret.DoorTrianglesEndingPos)) * 8 + 4;
            ret.Unknown2EndingPos = ret.UnknownEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(ret.UnknownEndingPos)) * 4 + 4;
            ret.WaypointsEndingPos = ret.Unknown2EndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(ret.Unknown2EndingPos)) * 18 + 4;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INavmeshGeometryGetter NavmeshGeometryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NavmeshGeometryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavmeshGeometryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavmeshGeometryGetter rhs) return false;
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INavmeshGeometryGetter? obj)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

