/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NavmeshGrid :
        IEquatable<INavmeshGridGetter>,
        ILoquiObjectSetter<NavmeshGrid>,
        INavmeshGrid
    {
        #region Ctor
        public NavmeshGrid()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Size
        public UInt32 Size { get; set; } = default;
        public static RangeUInt32 Size_Range = new RangeUInt32(UInt32.MinValue, 12);
        #endregion
        #region MaxDistance
        public P2Float MaxDistance { get; set; } = default;
        #endregion
        #region Min
        public P3Float Min { get; set; } = default;
        #endregion
        #region Max
        public P3Float Max { get; set; } = default;
        #endregion
        #region GridArrays
        public NavmeshGridArray GridArrays { get; set; } = new NavmeshGridArray();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INavmeshGridArrayGetter INavmeshGridGetter.GridArrays => GridArrays;
        #endregion

        #region To String

        public void ToString(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavmeshGridMixIn.ToString(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavmeshGridGetter rhs) return false;
            return ((NavmeshGridCommon)((INavmeshGridGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INavmeshGridGetter? obj)
        {
            return ((NavmeshGridCommon)((INavmeshGridGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NavmeshGridCommon)((INavmeshGridGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Size = initialValue;
                this.MaxDistance = initialValue;
                this.Min = initialValue;
                this.Max = initialValue;
                this.GridArrays = new MaskItem<TItem, NavmeshGridArray.Mask<TItem>?>(initialValue, new NavmeshGridArray.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Size,
                TItem MaxDistance,
                TItem Min,
                TItem Max,
                TItem GridArrays)
            {
                this.Size = Size;
                this.MaxDistance = MaxDistance;
                this.Min = Min;
                this.Max = Max;
                this.GridArrays = new MaskItem<TItem, NavmeshGridArray.Mask<TItem>?>(GridArrays, new NavmeshGridArray.Mask<TItem>(GridArrays));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Size;
            public TItem MaxDistance;
            public TItem Min;
            public TItem Max;
            public MaskItem<TItem, NavmeshGridArray.Mask<TItem>?>? GridArrays { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Size, rhs.Size)) return false;
                if (!object.Equals(this.MaxDistance, rhs.MaxDistance)) return false;
                if (!object.Equals(this.Min, rhs.Min)) return false;
                if (!object.Equals(this.Max, rhs.Max)) return false;
                if (!object.Equals(this.GridArrays, rhs.GridArrays)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Size);
                hash.Add(this.MaxDistance);
                hash.Add(this.Min);
                hash.Add(this.Max);
                hash.Add(this.GridArrays);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Size)) return false;
                if (!eval(this.MaxDistance)) return false;
                if (!eval(this.Min)) return false;
                if (!eval(this.Max)) return false;
                if (GridArrays != null)
                {
                    if (!eval(this.GridArrays.Overall)) return false;
                    if (this.GridArrays.Specific != null && !this.GridArrays.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Size)) return true;
                if (eval(this.MaxDistance)) return true;
                if (eval(this.Min)) return true;
                if (eval(this.Max)) return true;
                if (GridArrays != null)
                {
                    if (eval(this.GridArrays.Overall)) return true;
                    if (this.GridArrays.Specific != null && this.GridArrays.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavmeshGrid.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Size = eval(this.Size);
                obj.MaxDistance = eval(this.MaxDistance);
                obj.Min = eval(this.Min);
                obj.Max = eval(this.Max);
                obj.GridArrays = this.GridArrays == null ? null : new MaskItem<R, NavmeshGridArray.Mask<R>?>(eval(this.GridArrays.Overall), this.GridArrays.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NavmeshGrid.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                ToString(sb, printMask);
                return sb.ToString();
            }

            public void ToString(StructuredStringBuilder sb, NavmeshGrid.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NavmeshGrid.Mask<TItem>)} =>");
                sb.AppendLine("[");
                using (sb.IncreaseDepth())
                {
                    if (printMask?.Size ?? true)
                    {
                        sb.AppendItem(Size, "Size");
                    }
                    if (printMask?.MaxDistance ?? true)
                    {
                        sb.AppendItem(MaxDistance, "MaxDistance");
                    }
                    if (printMask?.Min ?? true)
                    {
                        sb.AppendItem(Min, "Min");
                    }
                    if (printMask?.Max ?? true)
                    {
                        sb.AppendItem(Max, "Max");
                    }
                    if (printMask?.GridArrays?.Overall ?? true)
                    {
                        GridArrays?.ToString(sb);
                    }
                }
                sb.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Size;
            public Exception? MaxDistance;
            public Exception? Min;
            public Exception? Max;
            public MaskItem<Exception?, NavmeshGridArray.ErrorMask?>? GridArrays;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NavmeshGrid_FieldIndex enu = (NavmeshGrid_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGrid_FieldIndex.Size:
                        return Size;
                    case NavmeshGrid_FieldIndex.MaxDistance:
                        return MaxDistance;
                    case NavmeshGrid_FieldIndex.Min:
                        return Min;
                    case NavmeshGrid_FieldIndex.Max:
                        return Max;
                    case NavmeshGrid_FieldIndex.GridArrays:
                        return GridArrays;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NavmeshGrid_FieldIndex enu = (NavmeshGrid_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGrid_FieldIndex.Size:
                        this.Size = ex;
                        break;
                    case NavmeshGrid_FieldIndex.MaxDistance:
                        this.MaxDistance = ex;
                        break;
                    case NavmeshGrid_FieldIndex.Min:
                        this.Min = ex;
                        break;
                    case NavmeshGrid_FieldIndex.Max:
                        this.Max = ex;
                        break;
                    case NavmeshGrid_FieldIndex.GridArrays:
                        this.GridArrays = new MaskItem<Exception?, NavmeshGridArray.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NavmeshGrid_FieldIndex enu = (NavmeshGrid_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGrid_FieldIndex.Size:
                        this.Size = (Exception?)obj;
                        break;
                    case NavmeshGrid_FieldIndex.MaxDistance:
                        this.MaxDistance = (Exception?)obj;
                        break;
                    case NavmeshGrid_FieldIndex.Min:
                        this.Min = (Exception?)obj;
                        break;
                    case NavmeshGrid_FieldIndex.Max:
                        this.Max = (Exception?)obj;
                        break;
                    case NavmeshGrid_FieldIndex.GridArrays:
                        this.GridArrays = (MaskItem<Exception?, NavmeshGridArray.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Size != null) return true;
                if (MaxDistance != null) return true;
                if (Min != null) return true;
                if (Max != null) return true;
                if (GridArrays != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var sb = new StructuredStringBuilder();
                ToString(sb, null);
                return sb.ToString();
            }

            public void ToString(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                sb.AppendLine("[");
                using (sb.IncreaseDepth())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        sb.AppendLine("[");
                        using (sb.IncreaseDepth())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                        sb.AppendLine("]");
                    }
                    ToString_FillInternal(sb);
                }
                sb.AppendLine("]");
            }
            protected void ToString_FillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Size, "Size");
                }
                {
                    sb.AppendItem(MaxDistance, "MaxDistance");
                }
                {
                    sb.AppendItem(Min, "Min");
                }
                {
                    sb.AppendItem(Max, "Max");
                }
                GridArrays?.ToString(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Size = this.Size.Combine(rhs.Size);
                ret.MaxDistance = this.MaxDistance.Combine(rhs.MaxDistance);
                ret.Min = this.Min.Combine(rhs.Min);
                ret.Max = this.Max.Combine(rhs.Max);
                ret.GridArrays = this.GridArrays.Combine(rhs.GridArrays, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Size;
            public bool MaxDistance;
            public bool Min;
            public bool Max;
            public NavmeshGridArray.TranslationMask? GridArrays;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Size = defaultOn;
                this.MaxDistance = defaultOn;
                this.Min = defaultOn;
                this.Max = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Size, null));
                ret.Add((MaxDistance, null));
                ret.Add((Min, null));
                ret.Add((Max, null));
                ret.Add((GridArrays != null ? GridArrays.OnOverall : DefaultOn, GridArrays?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshGridBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NavmeshGridBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NavmeshGrid CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new NavmeshGrid();
            ((NavmeshGridSetterCommon)((INavmeshGridGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavmeshGrid item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(StructuredStringBuilder sb, string? name) => this.ToString(sb, name);

        void IClearable.Clear()
        {
            ((NavmeshGridSetterCommon)((INavmeshGridGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NavmeshGrid GetNew()
        {
            return new NavmeshGrid();
        }

    }
    #endregion

    #region Interface
    public partial interface INavmeshGrid :
        ILoquiObjectSetter<INavmeshGrid>,
        INavmeshGridGetter
    {
        new UInt32 Size { get; set; }
        new P2Float MaxDistance { get; set; }
        new P3Float Min { get; set; }
        new P3Float Max { get; set; }
        new NavmeshGridArray GridArrays { get; set; }
    }

    public partial interface INavmeshGridGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INavmeshGridGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NavmeshGrid_Registration.Instance;
        UInt32 Size { get; }
        P2Float MaxDistance { get; }
        P3Float Min { get; }
        P3Float Max { get; }
        INavmeshGridArrayGetter GridArrays { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavmeshGridMixIn
    {
        public static void Clear(this INavmeshGrid item)
        {
            ((NavmeshGridSetterCommon)((INavmeshGridGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavmeshGrid.Mask<bool> GetEqualsMask(
            this INavmeshGridGetter item,
            INavmeshGridGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavmeshGridCommon)((INavmeshGridGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INavmeshGridGetter item,
            string? name = null,
            NavmeshGrid.Mask<bool>? printMask = null)
        {
            return ((NavmeshGridCommon)((INavmeshGridGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INavmeshGridGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavmeshGrid.Mask<bool>? printMask = null)
        {
            ((NavmeshGridCommon)((INavmeshGridGetter)item).CommonInstance()!).ToString(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavmeshGridGetter item,
            INavmeshGridGetter rhs,
            NavmeshGrid.TranslationMask? equalsMask = null)
        {
            return ((NavmeshGridCommon)((INavmeshGridGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INavmeshGrid lhs,
            INavmeshGridGetter rhs)
        {
            ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshGrid lhs,
            INavmeshGridGetter rhs,
            NavmeshGrid.TranslationMask? copyMask = null)
        {
            ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshGrid lhs,
            INavmeshGridGetter rhs,
            out NavmeshGrid.ErrorMask errorMask,
            NavmeshGrid.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavmeshGrid.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavmeshGrid lhs,
            INavmeshGridGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavmeshGrid DeepCopy(
            this INavmeshGridGetter item,
            NavmeshGrid.TranslationMask? copyMask = null)
        {
            return ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavmeshGrid DeepCopy(
            this INavmeshGridGetter item,
            out NavmeshGrid.ErrorMask errorMask,
            NavmeshGrid.TranslationMask? copyMask = null)
        {
            return ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavmeshGrid DeepCopy(
            this INavmeshGridGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavmeshGrid item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((NavmeshGridSetterCommon)((INavmeshGridGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum NavmeshGrid_FieldIndex
    {
        Size = 0,
        MaxDistance = 1,
        Min = 2,
        Max = 3,
        GridArrays = 4,
    }
    #endregion

    #region Registration
    internal partial class NavmeshGrid_Registration : ILoquiRegistration
    {
        public static readonly NavmeshGrid_Registration Instance = new NavmeshGrid_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 327,
            version: 0);

        public const string GUID = "36ec4d04-9bfc-4126-a1dc-5bbe75ce65c0";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(NavmeshGrid.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavmeshGrid.ErrorMask);

        public static readonly Type ClassType = typeof(NavmeshGrid);

        public static readonly Type GetterType = typeof(INavmeshGridGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavmeshGrid);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NavmeshGrid";

        public const string Name = "NavmeshGrid";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(NavmeshGridBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NavmeshGridSetterCommon
    {
        public static readonly NavmeshGridSetterCommon Instance = new NavmeshGridSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavmeshGrid item)
        {
            ClearPartial();
            item.Size = default;
            item.MaxDistance = default;
            item.Min = default;
            item.Max = default;
            item.GridArrays.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(INavmeshGrid obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavmeshGrid item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NavmeshGridBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NavmeshGridCommon
    {
        public static readonly NavmeshGridCommon Instance = new NavmeshGridCommon();

        public NavmeshGrid.Mask<bool> GetEqualsMask(
            INavmeshGridGetter item,
            INavmeshGridGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavmeshGrid.Mask<bool>(false);
            ((NavmeshGridCommon)((INavmeshGridGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavmeshGridGetter item,
            INavmeshGridGetter rhs,
            NavmeshGrid.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Size = item.Size == rhs.Size;
            ret.MaxDistance = item.MaxDistance.Equals(rhs.MaxDistance);
            ret.Min = item.Min.Equals(rhs.Min);
            ret.Max = item.Max.Equals(rhs.Max);
            ret.GridArrays = MaskItemExt.Factory(item.GridArrays.GetEqualsMask(rhs.GridArrays, include), include);
        }
        
        public string ToString(
            INavmeshGridGetter item,
            string? name = null,
            NavmeshGrid.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            ToString(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void ToString(
            INavmeshGridGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavmeshGrid.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NavmeshGrid =>");
            }
            else
            {
                sb.AppendLine($"{name} (NavmeshGrid) =>");
            }
            sb.AppendLine("[");
            using (sb.IncreaseDepth())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
            sb.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INavmeshGridGetter item,
            StructuredStringBuilder sb,
            NavmeshGrid.Mask<bool>? printMask = null)
        {
            if (printMask?.Size ?? true)
            {
                sb.AppendItem(item.Size, "Size");
            }
            if (printMask?.MaxDistance ?? true)
            {
                sb.AppendItem(item.MaxDistance, "MaxDistance");
            }
            if (printMask?.Min ?? true)
            {
                sb.AppendItem(item.Min, "Min");
            }
            if (printMask?.Max ?? true)
            {
                sb.AppendItem(item.Max, "Max");
            }
            if (printMask?.GridArrays?.Overall ?? true)
            {
                item.GridArrays?.ToString(sb, "GridArrays");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavmeshGridGetter? lhs,
            INavmeshGridGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.Size) ?? true))
            {
                if (lhs.Size != rhs.Size) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.MaxDistance) ?? true))
            {
                if (!lhs.MaxDistance.Equals(rhs.MaxDistance)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.Min) ?? true))
            {
                if (!lhs.Min.Equals(rhs.Min)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.Max) ?? true))
            {
                if (!lhs.Max.Equals(rhs.Max)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.GridArrays) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GridArrays, rhs.GridArrays, out var lhsGridArrays, out var rhsGridArrays, out var isGridArraysEqual))
                {
                    if (!((NavmeshGridArrayCommon)((INavmeshGridArrayGetter)lhsGridArrays).CommonInstance()!).Equals(lhsGridArrays, rhsGridArrays, crystal?.GetSubCrystal((int)NavmeshGrid_FieldIndex.GridArrays))) return false;
                }
                else if (!isGridArraysEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INavmeshGridGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Size);
            hash.Add(item.MaxDistance);
            hash.Add(item.Min);
            hash.Add(item.Max);
            hash.Add(item.GridArrays);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NavmeshGrid.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(INavmeshGridGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NavmeshGridSetterTranslationCommon
    {
        public static readonly NavmeshGridSetterTranslationCommon Instance = new NavmeshGridSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavmeshGrid item,
            INavmeshGridGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.Size) ?? true))
            {
                item.Size = rhs.Size;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.MaxDistance) ?? true))
            {
                item.MaxDistance = rhs.MaxDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.Min) ?? true))
            {
                item.Min = rhs.Min;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.Max) ?? true))
            {
                item.Max = rhs.Max;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.GridArrays) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGrid_FieldIndex.GridArrays);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NavmeshGrid_FieldIndex.GridArrays) ?? true))
                    {
                        item.GridArrays = rhs.GridArrays.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NavmeshGrid_FieldIndex.GridArrays),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public NavmeshGrid DeepCopy(
            INavmeshGridGetter item,
            NavmeshGrid.TranslationMask? copyMask = null)
        {
            NavmeshGrid ret = (NavmeshGrid)((NavmeshGridCommon)((INavmeshGridGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavmeshGrid DeepCopy(
            INavmeshGridGetter item,
            out NavmeshGrid.ErrorMask errorMask,
            NavmeshGrid.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavmeshGrid ret = (NavmeshGrid)((NavmeshGridCommon)((INavmeshGridGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavmeshGrid.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavmeshGrid DeepCopy(
            INavmeshGridGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavmeshGrid ret = (NavmeshGrid)((NavmeshGridCommon)((INavmeshGridGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGridSetterTranslationCommon)((INavmeshGridGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavmeshGrid
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshGrid_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavmeshGrid_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshGridCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NavmeshGridSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshGridSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshGridGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INavmeshGridGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INavmeshGridGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavmeshGridBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static NavmeshGridBinaryWriteTranslation Instance = new NavmeshGridBinaryWriteTranslation();

        public static void WriteEmbedded(
            INavmeshGridGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Size);
            P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MaxDistance);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Min);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Max);
            var GridArraysItem = item.GridArrays;
            ((NavmeshGridArrayBinaryWriteTranslation)((IBinaryItem)GridArraysItem).BinaryWriteTranslator).Write(
                item: GridArraysItem,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            INavmeshGridGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (INavmeshGridGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NavmeshGridBinaryCreateTranslation
    {
        public readonly static NavmeshGridBinaryCreateTranslation Instance = new NavmeshGridBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INavmeshGrid item,
            MutagenFrame frame)
        {
            item.Size = frame.ReadUInt32();
            item.MaxDistance = P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Min = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Max = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.GridArrays = Mutagen.Bethesda.Fallout4.NavmeshGridArray.CreateFromBinary(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NavmeshGridBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INavmeshGridGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NavmeshGridBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class NavmeshGridBinaryOverlay :
        PluginBinaryOverlay,
        INavmeshGridGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshGrid_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavmeshGrid_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshGridCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshGridSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshGridGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INavmeshGridGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INavmeshGridGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(StructuredStringBuilder sb, string? name) => this.ToString(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshGridBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NavmeshGridBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt32 Size => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x0, 0x4));
        public P2Float MaxDistance => P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(0x4, 0x8));
        public P3Float Min => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(0xC, 0xC));
        public P3Float Max => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(0x18, 0xC));
        #region GridArrays
        public INavmeshGridArrayGetter GridArrays => NavmeshGridArrayBinaryOverlay.NavmeshGridArrayFactory(new OverlayStream(_data.Slice(0x24), _package), _package, default(TypedParseParams));
        protected int GridArraysEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavmeshGridBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NavmeshGridBinaryOverlay NavmeshGridFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new NavmeshGridBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            stream.Position += ret.GridArraysEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static NavmeshGridBinaryOverlay NavmeshGridFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return NavmeshGridFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavmeshGridMixIn.ToString(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavmeshGridGetter rhs) return false;
            return ((NavmeshGridCommon)((INavmeshGridGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INavmeshGridGetter? obj)
        {
            return ((NavmeshGridCommon)((INavmeshGridGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NavmeshGridCommon)((INavmeshGridGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

