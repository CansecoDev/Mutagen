/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DefaultWeightObject :
        IDefaultWeightObject,
        IEquatable<IDefaultWeightObjectGetter>,
        ILoquiObjectSetter<DefaultWeightObject>
    {
        #region Ctor
        public DefaultWeightObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Thin
        public readonly static Single _Thin_Default = 0;
        public Single Thin { get; set; } = _Thin_Default;
        #endregion
        #region Muscular
        public readonly static Single _Muscular_Default = 0;
        public Single Muscular { get; set; } = _Muscular_Default;
        #endregion
        #region Fat
        public readonly static Single _Fat_Default = 0;
        public Single Fat { get; set; } = _Fat_Default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DefaultWeightObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDefaultWeightObjectGetter rhs)) return false;
            return ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDefaultWeightObjectGetter? obj)
        {
            return ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Thin = initialValue;
                this.Muscular = initialValue;
                this.Fat = initialValue;
            }

            public Mask(
                TItem Thin,
                TItem Muscular,
                TItem Fat)
            {
                this.Thin = Thin;
                this.Muscular = Muscular;
                this.Fat = Fat;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Thin;
            public TItem Muscular;
            public TItem Fat;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Thin, rhs.Thin)) return false;
                if (!object.Equals(this.Muscular, rhs.Muscular)) return false;
                if (!object.Equals(this.Fat, rhs.Fat)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Thin);
                hash.Add(this.Muscular);
                hash.Add(this.Fat);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Thin)) return false;
                if (!eval(this.Muscular)) return false;
                if (!eval(this.Fat)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Thin)) return true;
                if (eval(this.Muscular)) return true;
                if (eval(this.Fat)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DefaultWeightObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Thin = eval(this.Thin);
                obj.Muscular = eval(this.Muscular);
                obj.Fat = eval(this.Fat);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DefaultWeightObject.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DefaultWeightObject.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DefaultWeightObject.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Thin ?? true)
                    {
                        fg.AppendItem(Thin, "Thin");
                    }
                    if (printMask?.Muscular ?? true)
                    {
                        fg.AppendItem(Muscular, "Muscular");
                    }
                    if (printMask?.Fat ?? true)
                    {
                        fg.AppendItem(Fat, "Fat");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Thin;
            public Exception? Muscular;
            public Exception? Fat;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DefaultWeightObject_FieldIndex enu = (DefaultWeightObject_FieldIndex)index;
                switch (enu)
                {
                    case DefaultWeightObject_FieldIndex.Thin:
                        return Thin;
                    case DefaultWeightObject_FieldIndex.Muscular:
                        return Muscular;
                    case DefaultWeightObject_FieldIndex.Fat:
                        return Fat;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DefaultWeightObject_FieldIndex enu = (DefaultWeightObject_FieldIndex)index;
                switch (enu)
                {
                    case DefaultWeightObject_FieldIndex.Thin:
                        this.Thin = ex;
                        break;
                    case DefaultWeightObject_FieldIndex.Muscular:
                        this.Muscular = ex;
                        break;
                    case DefaultWeightObject_FieldIndex.Fat:
                        this.Fat = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DefaultWeightObject_FieldIndex enu = (DefaultWeightObject_FieldIndex)index;
                switch (enu)
                {
                    case DefaultWeightObject_FieldIndex.Thin:
                        this.Thin = (Exception?)obj;
                        break;
                    case DefaultWeightObject_FieldIndex.Muscular:
                        this.Muscular = (Exception?)obj;
                        break;
                    case DefaultWeightObject_FieldIndex.Fat:
                        this.Fat = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Thin != null) return true;
                if (Muscular != null) return true;
                if (Fat != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Thin, "Thin");
                fg.AppendItem(Muscular, "Muscular");
                fg.AppendItem(Fat, "Fat");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Thin = this.Thin.Combine(rhs.Thin);
                ret.Muscular = this.Muscular.Combine(rhs.Muscular);
                ret.Fat = this.Fat.Combine(rhs.Fat);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Thin;
            public bool Muscular;
            public bool Fat;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Thin = defaultOn;
                this.Muscular = defaultOn;
                this.Fat = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Thin, null));
                ret.Add((Muscular, null));
                ret.Add((Fat, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DefaultWeightObjectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DefaultWeightObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static DefaultWeightObject CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DefaultWeightObject();
            ((DefaultWeightObjectSetterCommon)((IDefaultWeightObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DefaultWeightObject item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DefaultWeightObjectSetterCommon)((IDefaultWeightObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DefaultWeightObject GetNew()
        {
            return new DefaultWeightObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IDefaultWeightObject :
        IDefaultWeightObjectGetter,
        ILoquiObjectSetter<IDefaultWeightObject>
    {
        new Single Thin { get; set; }
        new Single Muscular { get; set; }
        new Single Fat { get; set; }
    }

    public partial interface IDefaultWeightObjectGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IDefaultWeightObjectGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => DefaultWeightObject_Registration.Instance;
        Single Thin { get; }
        Single Muscular { get; }
        Single Fat { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DefaultWeightObjectMixIn
    {
        public static void Clear(this IDefaultWeightObject item)
        {
            ((DefaultWeightObjectSetterCommon)((IDefaultWeightObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DefaultWeightObject.Mask<bool> GetEqualsMask(
            this IDefaultWeightObjectGetter item,
            IDefaultWeightObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDefaultWeightObjectGetter item,
            string? name = null,
            DefaultWeightObject.Mask<bool>? printMask = null)
        {
            return ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDefaultWeightObjectGetter item,
            FileGeneration fg,
            string? name = null,
            DefaultWeightObject.Mask<bool>? printMask = null)
        {
            ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDefaultWeightObjectGetter item,
            IDefaultWeightObjectGetter rhs)
        {
            return ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDefaultWeightObject lhs,
            IDefaultWeightObjectGetter rhs)
        {
            ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDefaultWeightObject lhs,
            IDefaultWeightObjectGetter rhs,
            DefaultWeightObject.TranslationMask? copyMask = null)
        {
            ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDefaultWeightObject lhs,
            IDefaultWeightObjectGetter rhs,
            out DefaultWeightObject.ErrorMask errorMask,
            DefaultWeightObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DefaultWeightObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDefaultWeightObject lhs,
            IDefaultWeightObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DefaultWeightObject DeepCopy(
            this IDefaultWeightObjectGetter item,
            DefaultWeightObject.TranslationMask? copyMask = null)
        {
            return ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DefaultWeightObject DeepCopy(
            this IDefaultWeightObjectGetter item,
            out DefaultWeightObject.ErrorMask errorMask,
            DefaultWeightObject.TranslationMask? copyMask = null)
        {
            return ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DefaultWeightObject DeepCopy(
            this IDefaultWeightObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDefaultWeightObject item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DefaultWeightObjectSetterCommon)((IDefaultWeightObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum DefaultWeightObject_FieldIndex
    {
        Thin = 0,
        Muscular = 1,
        Fat = 2,
    }
    #endregion

    #region Registration
    public partial class DefaultWeightObject_Registration : ILoquiRegistration
    {
        public static readonly DefaultWeightObject_Registration Instance = new DefaultWeightObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 92,
            version: 0);

        public const string GUID = "c4afceb0-d1e6-4386-8d1b-fb3a4201d4ff";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(DefaultWeightObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DefaultWeightObject.ErrorMask);

        public static readonly Type ClassType = typeof(DefaultWeightObject);

        public static readonly Type GetterType = typeof(IDefaultWeightObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDefaultWeightObject);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.DefaultWeightObject";

        public const string Name = "DefaultWeightObject";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(DefaultWeightObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DefaultWeightObjectSetterCommon
    {
        public static readonly DefaultWeightObjectSetterCommon Instance = new DefaultWeightObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDefaultWeightObject item)
        {
            ClearPartial();
            item.Thin = DefaultWeightObject._Thin_Default;
            item.Muscular = DefaultWeightObject._Muscular_Default;
            item.Fat = DefaultWeightObject._Fat_Default;
        }
        
        #region Mutagen
        public void RemapLinks(IDefaultWeightObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDefaultWeightObject item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DefaultWeightObjectBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class DefaultWeightObjectCommon
    {
        public static readonly DefaultWeightObjectCommon Instance = new DefaultWeightObjectCommon();

        public DefaultWeightObject.Mask<bool> GetEqualsMask(
            IDefaultWeightObjectGetter item,
            IDefaultWeightObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DefaultWeightObject.Mask<bool>(false);
            ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDefaultWeightObjectGetter item,
            IDefaultWeightObjectGetter rhs,
            DefaultWeightObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Thin = item.Thin.EqualsWithin(rhs.Thin);
            ret.Muscular = item.Muscular.EqualsWithin(rhs.Muscular);
            ret.Fat = item.Fat.EqualsWithin(rhs.Fat);
        }
        
        public string ToString(
            IDefaultWeightObjectGetter item,
            string? name = null,
            DefaultWeightObject.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDefaultWeightObjectGetter item,
            FileGeneration fg,
            string? name = null,
            DefaultWeightObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DefaultWeightObject =>");
            }
            else
            {
                fg.AppendLine($"{name} (DefaultWeightObject) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDefaultWeightObjectGetter item,
            FileGeneration fg,
            DefaultWeightObject.Mask<bool>? printMask = null)
        {
            if (printMask?.Thin ?? true)
            {
                fg.AppendItem(item.Thin, "Thin");
            }
            if (printMask?.Muscular ?? true)
            {
                fg.AppendItem(item.Muscular, "Muscular");
            }
            if (printMask?.Fat ?? true)
            {
                fg.AppendItem(item.Fat, "Fat");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDefaultWeightObjectGetter? lhs,
            IDefaultWeightObjectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Thin.EqualsWithin(rhs.Thin)) return false;
            if (!lhs.Muscular.EqualsWithin(rhs.Muscular)) return false;
            if (!lhs.Fat.EqualsWithin(rhs.Fat)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IDefaultWeightObjectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Thin);
            hash.Add(item.Muscular);
            hash.Add(item.Fat);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DefaultWeightObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IDefaultWeightObjectGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class DefaultWeightObjectSetterTranslationCommon
    {
        public static readonly DefaultWeightObjectSetterTranslationCommon Instance = new DefaultWeightObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDefaultWeightObject item,
            IDefaultWeightObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DefaultWeightObject_FieldIndex.Thin) ?? true))
            {
                item.Thin = rhs.Thin;
            }
            if ((copyMask?.GetShouldTranslate((int)DefaultWeightObject_FieldIndex.Muscular) ?? true))
            {
                item.Muscular = rhs.Muscular;
            }
            if ((copyMask?.GetShouldTranslate((int)DefaultWeightObject_FieldIndex.Fat) ?? true))
            {
                item.Fat = rhs.Fat;
            }
        }
        
        #endregion
        
        public DefaultWeightObject DeepCopy(
            IDefaultWeightObjectGetter item,
            DefaultWeightObject.TranslationMask? copyMask = null)
        {
            DefaultWeightObject ret = (DefaultWeightObject)((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)item).CommonInstance()!).GetNew();
            ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DefaultWeightObject DeepCopy(
            IDefaultWeightObjectGetter item,
            out DefaultWeightObject.ErrorMask errorMask,
            DefaultWeightObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DefaultWeightObject ret = (DefaultWeightObject)((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)item).CommonInstance()!).GetNew();
            ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DefaultWeightObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DefaultWeightObject DeepCopy(
            IDefaultWeightObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DefaultWeightObject ret = (DefaultWeightObject)((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)item).CommonInstance()!).GetNew();
            ((DefaultWeightObjectSetterTranslationCommon)((IDefaultWeightObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DefaultWeightObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DefaultWeightObject_Registration.Instance;
        public static DefaultWeightObject_Registration Registration => DefaultWeightObject_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DefaultWeightObjectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DefaultWeightObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DefaultWeightObjectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDefaultWeightObjectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDefaultWeightObjectGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDefaultWeightObjectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DefaultWeightObjectBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static DefaultWeightObjectBinaryWriteTranslation Instance = new DefaultWeightObjectBinaryWriteTranslation();

        public static void WriteEmbedded(
            IDefaultWeightObjectGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Thin);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Muscular);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fat);
        }

        public void Write(
            MutagenWriter writer,
            IDefaultWeightObjectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDefaultWeightObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DefaultWeightObjectBinaryCreateTranslation
    {
        public readonly static DefaultWeightObjectBinaryCreateTranslation Instance = new DefaultWeightObjectBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IDefaultWeightObject item,
            MutagenFrame frame)
        {
            item.Thin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Muscular = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Fat = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DefaultWeightObjectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDefaultWeightObjectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DefaultWeightObjectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DefaultWeightObjectBinaryOverlay :
        BinaryOverlay,
        IDefaultWeightObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DefaultWeightObject_Registration.Instance;
        public static DefaultWeightObject_Registration Registration => DefaultWeightObject_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DefaultWeightObjectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DefaultWeightObjectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDefaultWeightObjectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDefaultWeightObjectGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDefaultWeightObjectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DefaultWeightObjectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DefaultWeightObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Single Thin => _data.Slice(0x0, 0x4).Float();
        public Single Muscular => _data.Slice(0x4, 0x4).Float();
        public Single Fat => _data.Slice(0x8, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DefaultWeightObjectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DefaultWeightObjectBinaryOverlay DefaultWeightObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DefaultWeightObjectBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0xC),
                package: package);
            int offset = stream.Position;
            stream.Position += 0xC;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static DefaultWeightObjectBinaryOverlay DefaultWeightObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DefaultWeightObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DefaultWeightObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDefaultWeightObjectGetter rhs)) return false;
            return ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDefaultWeightObjectGetter? obj)
        {
            return ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DefaultWeightObjectCommon)((IDefaultWeightObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

