/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class FurnitureMarkerParameters :
        IEquatable<IFurnitureMarkerParametersGetter>,
        IFurnitureMarkerParameters,
        ILoquiObjectSetter<FurnitureMarkerParameters>
    {
        #region Ctor
        public FurnitureMarkerParameters()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public FurnitureMarkerParameters.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region Offset
        public P3Float Offset { get; set; } = default;
        #endregion
        #region RotationZ
        public Single RotationZ { get; set; } = default;
        #endregion
        #region Keyword
        private readonly IFormLink<IKeywordGetter> _Keyword = new FormLink<IKeywordGetter>();
        public IFormLink<IKeywordGetter> Keyword
        {
            get => _Keyword;
            set => _Keyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IKeywordGetter> IFurnitureMarkerParametersGetter.Keyword => this.Keyword;
        #endregion
        #region EntryTypes
        public Furniture.EntryParameterType EntryTypes { get; set; } = default;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[3];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IFurnitureMarkerParametersGetter.Unknown => this.Unknown;
        #endregion
        #region Enabled
        public Boolean Enabled { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FurnitureMarkerParametersMixIn.ToString(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFurnitureMarkerParametersGetter rhs) return false;
            return ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFurnitureMarkerParametersGetter? obj)
        {
            return ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Offset = initialValue;
                this.RotationZ = initialValue;
                this.Keyword = initialValue;
                this.EntryTypes = initialValue;
                this.Unknown = initialValue;
                this.Enabled = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Offset,
                TItem RotationZ,
                TItem Keyword,
                TItem EntryTypes,
                TItem Unknown,
                TItem Enabled)
            {
                this.Versioning = Versioning;
                this.Offset = Offset;
                this.RotationZ = RotationZ;
                this.Keyword = Keyword;
                this.EntryTypes = EntryTypes;
                this.Unknown = Unknown;
                this.Enabled = Enabled;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Offset;
            public TItem RotationZ;
            public TItem Keyword;
            public TItem EntryTypes;
            public TItem Unknown;
            public TItem Enabled;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Offset, rhs.Offset)) return false;
                if (!object.Equals(this.RotationZ, rhs.RotationZ)) return false;
                if (!object.Equals(this.Keyword, rhs.Keyword)) return false;
                if (!object.Equals(this.EntryTypes, rhs.EntryTypes)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Enabled, rhs.Enabled)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Offset);
                hash.Add(this.RotationZ);
                hash.Add(this.Keyword);
                hash.Add(this.EntryTypes);
                hash.Add(this.Unknown);
                hash.Add(this.Enabled);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Offset)) return false;
                if (!eval(this.RotationZ)) return false;
                if (!eval(this.Keyword)) return false;
                if (!eval(this.EntryTypes)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Enabled)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Offset)) return true;
                if (eval(this.RotationZ)) return true;
                if (eval(this.Keyword)) return true;
                if (eval(this.EntryTypes)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Enabled)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FurnitureMarkerParameters.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Offset = eval(this.Offset);
                obj.RotationZ = eval(this.RotationZ);
                obj.Keyword = eval(this.Keyword);
                obj.EntryTypes = eval(this.EntryTypes);
                obj.Unknown = eval(this.Unknown);
                obj.Enabled = eval(this.Enabled);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FurnitureMarkerParameters.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                ToString(sb, printMask);
                return sb.ToString();
            }

            public void ToString(StructuredStringBuilder sb, FurnitureMarkerParameters.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FurnitureMarkerParameters.Mask<TItem>)} =>");
                sb.AppendLine("[");
                using (new DepthWrapper(sb))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Offset ?? true)
                    {
                        sb.AppendItem(Offset, "Offset");
                    }
                    if (printMask?.RotationZ ?? true)
                    {
                        sb.AppendItem(RotationZ, "RotationZ");
                    }
                    if (printMask?.Keyword ?? true)
                    {
                        sb.AppendItem(Keyword, "Keyword");
                    }
                    if (printMask?.EntryTypes ?? true)
                    {
                        sb.AppendItem(EntryTypes, "EntryTypes");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Enabled ?? true)
                    {
                        sb.AppendItem(Enabled, "Enabled");
                    }
                }
                sb.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Offset;
            public Exception? RotationZ;
            public Exception? Keyword;
            public Exception? EntryTypes;
            public Exception? Unknown;
            public Exception? Enabled;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FurnitureMarkerParameters_FieldIndex enu = (FurnitureMarkerParameters_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarkerParameters_FieldIndex.Versioning:
                        return Versioning;
                    case FurnitureMarkerParameters_FieldIndex.Offset:
                        return Offset;
                    case FurnitureMarkerParameters_FieldIndex.RotationZ:
                        return RotationZ;
                    case FurnitureMarkerParameters_FieldIndex.Keyword:
                        return Keyword;
                    case FurnitureMarkerParameters_FieldIndex.EntryTypes:
                        return EntryTypes;
                    case FurnitureMarkerParameters_FieldIndex.Unknown:
                        return Unknown;
                    case FurnitureMarkerParameters_FieldIndex.Enabled:
                        return Enabled;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FurnitureMarkerParameters_FieldIndex enu = (FurnitureMarkerParameters_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarkerParameters_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.Offset:
                        this.Offset = ex;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.RotationZ:
                        this.RotationZ = ex;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.Keyword:
                        this.Keyword = ex;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.EntryTypes:
                        this.EntryTypes = ex;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.Enabled:
                        this.Enabled = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FurnitureMarkerParameters_FieldIndex enu = (FurnitureMarkerParameters_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarkerParameters_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.Offset:
                        this.Offset = (Exception?)obj;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.RotationZ:
                        this.RotationZ = (Exception?)obj;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.Keyword:
                        this.Keyword = (Exception?)obj;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.EntryTypes:
                        this.EntryTypes = (Exception?)obj;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case FurnitureMarkerParameters_FieldIndex.Enabled:
                        this.Enabled = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Offset != null) return true;
                if (RotationZ != null) return true;
                if (Keyword != null) return true;
                if (EntryTypes != null) return true;
                if (Unknown != null) return true;
                if (Enabled != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var sb = new StructuredStringBuilder();
                ToString(sb, null);
                return sb.ToString();
            }

            public void ToString(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                sb.AppendLine("[");
                using (new DepthWrapper(sb))
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        sb.AppendLine("[");
                        using (new DepthWrapper(sb))
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                        sb.AppendLine("]");
                    }
                    ToString_FillInternal(sb);
                }
                sb.AppendLine("]");
            }
            protected void ToString_FillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(Offset, "Offset");
                }
                {
                    sb.AppendItem(RotationZ, "RotationZ");
                }
                {
                    sb.AppendItem(Keyword, "Keyword");
                }
                {
                    sb.AppendItem(EntryTypes, "EntryTypes");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Enabled, "Enabled");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Offset = this.Offset.Combine(rhs.Offset);
                ret.RotationZ = this.RotationZ.Combine(rhs.RotationZ);
                ret.Keyword = this.Keyword.Combine(rhs.Keyword);
                ret.EntryTypes = this.EntryTypes.Combine(rhs.EntryTypes);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Enabled = this.Enabled.Combine(rhs.Enabled);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool Offset;
            public bool RotationZ;
            public bool Keyword;
            public bool EntryTypes;
            public bool Unknown;
            public bool Enabled;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.Offset = defaultOn;
                this.RotationZ = defaultOn;
                this.Keyword = defaultOn;
                this.EntryTypes = defaultOn;
                this.Unknown = defaultOn;
                this.Enabled = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Offset, null));
                ret.Add((RotationZ, null));
                ret.Add((Keyword, null));
                ret.Add((EntryTypes, null));
                ret.Add((Unknown, null));
                ret.Add((Enabled, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1,
            Break1 = 2
        }
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => FurnitureMarkerParametersCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureMarkerParametersSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FurnitureMarkerParametersBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FurnitureMarkerParametersBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static FurnitureMarkerParameters CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new FurnitureMarkerParameters();
            ((FurnitureMarkerParametersSetterCommon)((IFurnitureMarkerParametersGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FurnitureMarkerParameters item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(StructuredStringBuilder sb, string? name) => this.ToString(sb, name);

        void IClearable.Clear()
        {
            ((FurnitureMarkerParametersSetterCommon)((IFurnitureMarkerParametersGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FurnitureMarkerParameters GetNew()
        {
            return new FurnitureMarkerParameters();
        }

    }
    #endregion

    #region Interface
    public partial interface IFurnitureMarkerParameters :
        IFormLinkContainer,
        IFurnitureMarkerParametersGetter,
        ILoquiObjectSetter<IFurnitureMarkerParameters>
    {
        new FurnitureMarkerParameters.VersioningBreaks Versioning { get; set; }
        new P3Float Offset { get; set; }
        new Single RotationZ { get; set; }
        new IFormLink<IKeywordGetter> Keyword { get; set; }
        new Furniture.EntryParameterType EntryTypes { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
        new Boolean Enabled { get; set; }
    }

    public partial interface IFurnitureMarkerParametersGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFurnitureMarkerParametersGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => FurnitureMarkerParameters_Registration.Instance;
        FurnitureMarkerParameters.VersioningBreaks Versioning { get; }
        P3Float Offset { get; }
        Single RotationZ { get; }
        IFormLinkGetter<IKeywordGetter> Keyword { get; }
        Furniture.EntryParameterType EntryTypes { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        Boolean Enabled { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FurnitureMarkerParametersMixIn
    {
        public static void Clear(this IFurnitureMarkerParameters item)
        {
            ((FurnitureMarkerParametersSetterCommon)((IFurnitureMarkerParametersGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FurnitureMarkerParameters.Mask<bool> GetEqualsMask(
            this IFurnitureMarkerParametersGetter item,
            IFurnitureMarkerParametersGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFurnitureMarkerParametersGetter item,
            string? name = null,
            FurnitureMarkerParameters.Mask<bool>? printMask = null)
        {
            return ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFurnitureMarkerParametersGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FurnitureMarkerParameters.Mask<bool>? printMask = null)
        {
            ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)item).CommonInstance()!).ToString(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFurnitureMarkerParametersGetter item,
            IFurnitureMarkerParametersGetter rhs,
            FurnitureMarkerParameters.TranslationMask? equalsMask = null)
        {
            return ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFurnitureMarkerParameters lhs,
            IFurnitureMarkerParametersGetter rhs)
        {
            ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFurnitureMarkerParameters lhs,
            IFurnitureMarkerParametersGetter rhs,
            FurnitureMarkerParameters.TranslationMask? copyMask = null)
        {
            ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFurnitureMarkerParameters lhs,
            IFurnitureMarkerParametersGetter rhs,
            out FurnitureMarkerParameters.ErrorMask errorMask,
            FurnitureMarkerParameters.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FurnitureMarkerParameters.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFurnitureMarkerParameters lhs,
            IFurnitureMarkerParametersGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FurnitureMarkerParameters DeepCopy(
            this IFurnitureMarkerParametersGetter item,
            FurnitureMarkerParameters.TranslationMask? copyMask = null)
        {
            return ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FurnitureMarkerParameters DeepCopy(
            this IFurnitureMarkerParametersGetter item,
            out FurnitureMarkerParameters.ErrorMask errorMask,
            FurnitureMarkerParameters.TranslationMask? copyMask = null)
        {
            return ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FurnitureMarkerParameters DeepCopy(
            this IFurnitureMarkerParametersGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFurnitureMarkerParameters item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((FurnitureMarkerParametersSetterCommon)((IFurnitureMarkerParametersGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum FurnitureMarkerParameters_FieldIndex
    {
        Versioning = 0,
        Offset = 1,
        RotationZ = 2,
        Keyword = 3,
        EntryTypes = 4,
        Unknown = 5,
        Enabled = 6,
    }
    #endregion

    #region Registration
    internal partial class FurnitureMarkerParameters_Registration : ILoquiRegistration
    {
        public static readonly FurnitureMarkerParameters_Registration Instance = new FurnitureMarkerParameters_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 334,
            version: 0);

        public const string GUID = "c75d9213-af7a-438c-a3d9-d953c0001d6a";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(FurnitureMarkerParameters.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FurnitureMarkerParameters.ErrorMask);

        public static readonly Type ClassType = typeof(FurnitureMarkerParameters);

        public static readonly Type GetterType = typeof(IFurnitureMarkerParametersGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFurnitureMarkerParameters);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.FurnitureMarkerParameters";

        public const string Name = "FurnitureMarkerParameters";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(FurnitureMarkerParametersBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FurnitureMarkerParametersSetterCommon
    {
        public static readonly FurnitureMarkerParametersSetterCommon Instance = new FurnitureMarkerParametersSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFurnitureMarkerParameters item)
        {
            ClearPartial();
            item.Versioning = default;
            item.Offset = default;
            item.RotationZ = default;
            item.Keyword.Clear();
            item.EntryTypes = default;
            item.Unknown = new byte[3];
            item.Enabled = default;
        }
        
        #region Mutagen
        public void RemapLinks(IFurnitureMarkerParameters obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Keyword.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFurnitureMarkerParameters item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FurnitureMarkerParametersBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class FurnitureMarkerParametersCommon
    {
        public static readonly FurnitureMarkerParametersCommon Instance = new FurnitureMarkerParametersCommon();

        public FurnitureMarkerParameters.Mask<bool> GetEqualsMask(
            IFurnitureMarkerParametersGetter item,
            IFurnitureMarkerParametersGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FurnitureMarkerParameters.Mask<bool>(false);
            ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFurnitureMarkerParametersGetter item,
            IFurnitureMarkerParametersGetter rhs,
            FurnitureMarkerParameters.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Offset = item.Offset.Equals(rhs.Offset);
            ret.RotationZ = item.RotationZ.EqualsWithin(rhs.RotationZ);
            ret.Keyword = item.Keyword.Equals(rhs.Keyword);
            ret.EntryTypes = item.EntryTypes == rhs.EntryTypes;
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.Enabled = item.Enabled == rhs.Enabled;
        }
        
        public string ToString(
            IFurnitureMarkerParametersGetter item,
            string? name = null,
            FurnitureMarkerParameters.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            ToString(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void ToString(
            IFurnitureMarkerParametersGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FurnitureMarkerParameters.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FurnitureMarkerParameters =>");
            }
            else
            {
                sb.AppendLine($"{name} (FurnitureMarkerParameters) =>");
            }
            sb.AppendLine("[");
            using (new DepthWrapper(sb))
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
            sb.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFurnitureMarkerParametersGetter item,
            StructuredStringBuilder sb,
            FurnitureMarkerParameters.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Offset ?? true)
            {
                sb.AppendItem(item.Offset, "Offset");
            }
            if (printMask?.RotationZ ?? true)
            {
                sb.AppendItem(item.RotationZ, "RotationZ");
            }
            if (printMask?.Keyword ?? true)
            {
                sb.AppendItem(item.Keyword.FormKey, "Keyword");
            }
            if (printMask?.EntryTypes ?? true)
            {
                sb.AppendItem(item.EntryTypes, "EntryTypes");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.Enabled ?? true)
            {
                sb.AppendItem(item.Enabled, "Enabled");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFurnitureMarkerParametersGetter? lhs,
            IFurnitureMarkerParametersGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Offset) ?? true))
            {
                if (!lhs.Offset.Equals(rhs.Offset)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.RotationZ) ?? true))
            {
                if (!lhs.RotationZ.EqualsWithin(rhs.RotationZ)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Keyword) ?? true))
            {
                if (!lhs.Keyword.Equals(rhs.Keyword)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.EntryTypes) ?? true))
            {
                if (lhs.EntryTypes != rhs.EntryTypes) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Unknown) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Enabled) ?? true))
            {
                if (lhs.Enabled != rhs.Enabled) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IFurnitureMarkerParametersGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Offset);
            hash.Add(item.RotationZ);
            hash.Add(item.Keyword);
            hash.Add(item.EntryTypes);
            hash.Add(item.Unknown);
            hash.Add(item.Enabled);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FurnitureMarkerParameters.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IFurnitureMarkerParametersGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Keyword);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class FurnitureMarkerParametersSetterTranslationCommon
    {
        public static readonly FurnitureMarkerParametersSetterTranslationCommon Instance = new FurnitureMarkerParametersSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFurnitureMarkerParameters item,
            IFurnitureMarkerParametersGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Offset) ?? true))
            {
                item.Offset = rhs.Offset;
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.RotationZ) ?? true))
            {
                item.RotationZ = rhs.RotationZ;
            }
            if (rhs.Versioning.HasFlag(FurnitureMarkerParameters.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Keyword) ?? true))
            {
                item.Keyword.SetTo(rhs.Keyword.FormKey);
            }
            if (rhs.Versioning.HasFlag(FurnitureMarkerParameters.VersioningBreaks.Break1)) return;
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.EntryTypes) ?? true))
            {
                item.EntryTypes = rhs.EntryTypes;
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarkerParameters_FieldIndex.Enabled) ?? true))
            {
                item.Enabled = rhs.Enabled;
            }
        }
        
        #endregion
        
        public FurnitureMarkerParameters DeepCopy(
            IFurnitureMarkerParametersGetter item,
            FurnitureMarkerParameters.TranslationMask? copyMask = null)
        {
            FurnitureMarkerParameters ret = (FurnitureMarkerParameters)((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)item).CommonInstance()!).GetNew();
            ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FurnitureMarkerParameters DeepCopy(
            IFurnitureMarkerParametersGetter item,
            out FurnitureMarkerParameters.ErrorMask errorMask,
            FurnitureMarkerParameters.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FurnitureMarkerParameters ret = (FurnitureMarkerParameters)((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)item).CommonInstance()!).GetNew();
            ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FurnitureMarkerParameters.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FurnitureMarkerParameters DeepCopy(
            IFurnitureMarkerParametersGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FurnitureMarkerParameters ret = (FurnitureMarkerParameters)((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)item).CommonInstance()!).GetNew();
            ((FurnitureMarkerParametersSetterTranslationCommon)((IFurnitureMarkerParametersGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class FurnitureMarkerParameters
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FurnitureMarkerParameters_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => FurnitureMarkerParameters_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FurnitureMarkerParametersCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FurnitureMarkerParametersSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FurnitureMarkerParametersSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFurnitureMarkerParametersGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFurnitureMarkerParametersGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFurnitureMarkerParametersGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class FurnitureMarkerParametersBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FurnitureMarkerParametersBinaryWriteTranslation Instance = new FurnitureMarkerParametersBinaryWriteTranslation();

        public static void WriteEmbedded(
            IFurnitureMarkerParametersGetter item,
            MutagenWriter writer)
        {
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Offset);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotationZ,
                multiplier: 57.2958f);
            if (!item.Versioning.HasFlag(FurnitureMarkerParameters.VersioningBreaks.Break0))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Keyword);
                if (!item.Versioning.HasFlag(FurnitureMarkerParameters.VersioningBreaks.Break1))
                {
                    EnumBinaryTranslation<Furniture.EntryParameterType, MutagenFrame, MutagenWriter>.Instance.Write(
                        writer,
                        item.EntryTypes,
                        length: 1);
                    ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.Unknown);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IFurnitureMarkerParametersGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IFurnitureMarkerParametersGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FurnitureMarkerParametersBinaryCreateTranslation
    {
        public readonly static FurnitureMarkerParametersBinaryCreateTranslation Instance = new FurnitureMarkerParametersBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IFurnitureMarkerParameters item,
            MutagenFrame frame)
        {
            item.Offset = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotationZ = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.2958f);
            if (frame.Complete)
            {
                item.Versioning |= FurnitureMarkerParameters.VersioningBreaks.Break0;
                return;
            }
            item.Keyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            if (frame.Complete)
            {
                item.Versioning |= FurnitureMarkerParameters.VersioningBreaks.Break1;
                return;
            }
            item.EntryTypes = EnumBinaryTranslation<Furniture.EntryParameterType, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.Unknown = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(3));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class FurnitureMarkerParametersBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFurnitureMarkerParametersGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FurnitureMarkerParametersBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class FurnitureMarkerParametersBinaryOverlay :
        PluginBinaryOverlay,
        IFurnitureMarkerParametersGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FurnitureMarkerParameters_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => FurnitureMarkerParameters_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FurnitureMarkerParametersCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FurnitureMarkerParametersSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFurnitureMarkerParametersGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFurnitureMarkerParametersGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFurnitureMarkerParametersGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(StructuredStringBuilder sb, string? name) => this.ToString(sb, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => FurnitureMarkerParametersCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FurnitureMarkerParametersBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FurnitureMarkerParametersBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public FurnitureMarkerParameters.VersioningBreaks Versioning { get; private set; }
        public P3Float Offset => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(0x0, 0xC));
        public Single RotationZ => _data.Slice(0xC, 0x4).Float() * 57.2958f;
        public IFormLinkGetter<IKeywordGetter> Keyword => new FormLink<IKeywordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x10, 0x4))));
        public Furniture.EntryParameterType EntryTypes => _data.Span.Length <= 0x14 ? default : (Furniture.EntryParameterType)_data.Span.Slice(0x14, 0x1)[0];
        public ReadOnlyMemorySlice<Byte> Unknown => _data.Span.Slice(0x15, 0x3).ToArray();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FurnitureMarkerParametersBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FurnitureMarkerParametersBinaryOverlay FurnitureMarkerParametersFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            int finalPos,
            TypedParseParams? parseParams = null)
        {
            var ret = new FurnitureMarkerParametersBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, finalPos - stream.Position),
                package: package);
            int offset = stream.Position;
            if (ret._data.Length <= 0x10)
            {
                ret.Versioning |= FurnitureMarkerParameters.VersioningBreaks.Break0;
            }
            if (ret._data.Length <= 0x14)
            {
                ret.Versioning |= FurnitureMarkerParameters.VersioningBreaks.Break1;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static FurnitureMarkerParametersBinaryOverlay FurnitureMarkerParametersFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return FurnitureMarkerParametersFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                finalPos: slice.Length,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FurnitureMarkerParametersMixIn.ToString(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFurnitureMarkerParametersGetter rhs) return false;
            return ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFurnitureMarkerParametersGetter? obj)
        {
            return ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

