/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Furniture :
        Fallout4MajorRecord,
        IEquatable<IFurnitureGetter>,
        IFurnitureInternal,
        ILoquiObjectSetter<Furniture>
    {
        #region Ctor
        protected Furniture()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IFurnitureGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IFurnitureGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region PreviewTransform
        private readonly IFormLinkNullable<ITransformGetter> _PreviewTransform = new FormLinkNullable<ITransformGetter>();
        public IFormLinkNullable<ITransformGetter> PreviewTransform
        {
            get => _PreviewTransform;
            set => _PreviewTransform.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITransformGetter> IFurnitureGetter.PreviewTransform => this.PreviewTransform;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFurnitureGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IFurnitureGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IFurnitureGetter.Destructible => this.Destructible;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IFurnitureGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? IFurnitureGetter.Properties => _Properties;
        #endregion

        #endregion
        #region NativeTerminal
        private readonly IFormLinkNullable<ITerminalGetter> _NativeTerminal = new FormLinkNullable<ITerminalGetter>();
        public IFormLinkNullable<ITerminalGetter> NativeTerminal
        {
            get => _NativeTerminal;
            set => _NativeTerminal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITerminalGetter> IFurnitureGetter.NativeTerminal => this.NativeTerminal;
        #endregion
        #region ForcedLocRefType
        private readonly IFormLinkNullable<ILocationReferenceTypeGetter> _ForcedLocRefType = new FormLinkNullable<ILocationReferenceTypeGetter>();
        public IFormLinkNullable<ILocationReferenceTypeGetter> ForcedLocRefType
        {
            get => _ForcedLocRefType;
            set => _ForcedLocRefType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationReferenceTypeGetter> IFurnitureGetter.ForcedLocRefType => this.ForcedLocRefType;
        #endregion
        #region PNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PNAM;
        public MemorySlice<Byte>? PNAM
        {
            get => this._PNAM;
            set => this._PNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFurnitureGetter.PNAM => this.PNAM;
        #endregion
        #region DrinkingWater
        private readonly IFormLinkNullable<IWaterGetter> _DrinkingWater = new FormLinkNullable<IWaterGetter>();
        public IFormLinkNullable<IWaterGetter> DrinkingWater
        {
            get => _DrinkingWater;
            set => _DrinkingWater.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWaterGetter> IFurnitureGetter.DrinkingWater => this.DrinkingWater;
        #endregion
        #region ActivateTextOverride
        public TranslatedString? ActivateTextOverride { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFurnitureGetter.ActivateTextOverride => this.ActivateTextOverride;
        #endregion
        #region Flags
        public Furniture.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Furniture.Flag? IFurnitureGetter.Flags => this.Flags;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IFurnitureGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? IFurnitureGetter.Items => _Items;
        #endregion

        #endregion
        #region BenchType
        public Furniture.BenchTypes BenchType { get; set; } = default;
        #endregion
        #region UsesSkill
        public Skill? UsesSkill { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Skill? IFurnitureGetter.UsesSkill => this.UsesSkill;
        #endregion
        #region AssociatedForm
        private readonly IFormLinkNullable<IFurnitureAssociationGetter> _AssociatedForm = new FormLinkNullable<IFurnitureAssociationGetter>();
        public IFormLinkNullable<IFurnitureAssociationGetter> AssociatedForm
        {
            get => _AssociatedForm;
            set => _AssociatedForm.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFurnitureAssociationGetter> IFurnitureGetter.AssociatedForm => this.AssociatedForm;
        #endregion
        #region EnabledEntryPoints
        public Furniture.EntryPointType? EnabledEntryPoints { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Furniture.EntryPointType? IFurnitureGetter.EnabledEntryPoints => this.EnabledEntryPoints;
        #endregion
        #region MarkerEntryPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FurnitureMarkerEntryPoints> _MarkerEntryPoints = new ExtendedList<FurnitureMarkerEntryPoints>();
        public ExtendedList<FurnitureMarkerEntryPoints> MarkerEntryPoints
        {
            get => this._MarkerEntryPoints;
            init => this._MarkerEntryPoints = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFurnitureMarkerEntryPointsGetter> IFurnitureGetter.MarkerEntryPoints => _MarkerEntryPoints;
        #endregion

        #endregion
        #region ModelFilename
        public String? ModelFilename { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFurnitureGetter.ModelFilename => this.ModelFilename;
        #endregion
        #region MarkerParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FurnitureMarkerParameters>? _MarkerParameters;
        public ExtendedList<FurnitureMarkerParameters>? MarkerParameters
        {
            get => this._MarkerParameters;
            set => this._MarkerParameters = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFurnitureMarkerParametersGetter>? IFurnitureGetter.MarkerParameters => _MarkerParameters;
        #endregion

        #endregion
        #region AttachParentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _AttachParentSlots;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots
        {
            get => this._AttachParentSlots;
            set => this._AttachParentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IFurnitureGetter.AttachParentSlots => _AttachParentSlots;
        #endregion

        #endregion
        #region ObjectTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectTemplate<Furniture.Property>>? _ObjectTemplates;
        public ExtendedList<ObjectTemplate<Furniture.Property>>? ObjectTemplates
        {
            get => this._ObjectTemplates;
            set => this._ObjectTemplates = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectTemplateGetter<Furniture.Property>>? IFurnitureGetter.ObjectTemplates => _ObjectTemplates;
        #endregion

        #endregion
        #region NavmeshGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NavmeshGeometry? _NavmeshGeometry;
        public NavmeshGeometry? NavmeshGeometry
        {
            get => _NavmeshGeometry;
            set => _NavmeshGeometry = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INavmeshGeometryGetter? IFurnitureGetter.NavmeshGeometry => this.NavmeshGeometry;
        #endregion
        #region WBDTDataTypeState
        public Furniture.WBDTDataType WBDTDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FurnitureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.PreviewTransform = initialValue;
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.NativeTerminal = initialValue;
                this.ForcedLocRefType = initialValue;
                this.PNAM = initialValue;
                this.DrinkingWater = initialValue;
                this.ActivateTextOverride = initialValue;
                this.Flags = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.BenchType = initialValue;
                this.UsesSkill = initialValue;
                this.AssociatedForm = initialValue;
                this.EnabledEntryPoints = initialValue;
                this.MarkerEntryPoints = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>());
                this.ModelFilename = initialValue;
                this.MarkerParameters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>());
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectTemplates = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>());
                this.NavmeshGeometry = new MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>(initialValue, new NavmeshGeometry.Mask<TItem>(initialValue));
                this.WBDTDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem PreviewTransform,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Keywords,
                TItem Properties,
                TItem NativeTerminal,
                TItem ForcedLocRefType,
                TItem PNAM,
                TItem DrinkingWater,
                TItem ActivateTextOverride,
                TItem Flags,
                TItem Conditions,
                TItem Items,
                TItem BenchType,
                TItem UsesSkill,
                TItem AssociatedForm,
                TItem EnabledEntryPoints,
                TItem MarkerEntryPoints,
                TItem ModelFilename,
                TItem MarkerParameters,
                TItem AttachParentSlots,
                TItem ObjectTemplates,
                TItem NavmeshGeometry,
                TItem WBDTDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.PreviewTransform = PreviewTransform;
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.NativeTerminal = NativeTerminal;
                this.ForcedLocRefType = ForcedLocRefType;
                this.PNAM = PNAM;
                this.DrinkingWater = DrinkingWater;
                this.ActivateTextOverride = ActivateTextOverride;
                this.Flags = Flags;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.BenchType = BenchType;
                this.UsesSkill = UsesSkill;
                this.AssociatedForm = AssociatedForm;
                this.EnabledEntryPoints = EnabledEntryPoints;
                this.MarkerEntryPoints = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>?>(MarkerEntryPoints, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>());
                this.ModelFilename = ModelFilename;
                this.MarkerParameters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>(MarkerParameters, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>());
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AttachParentSlots, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectTemplates = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>(ObjectTemplates, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>());
                this.NavmeshGeometry = new MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>(NavmeshGeometry, new NavmeshGeometry.Mask<TItem>(NavmeshGeometry));
                this.WBDTDataTypeState = WBDTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem PreviewTransform;
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public TItem NativeTerminal;
            public TItem ForcedLocRefType;
            public TItem PNAM;
            public TItem DrinkingWater;
            public TItem ActivateTextOverride;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public TItem BenchType;
            public TItem UsesSkill;
            public TItem AssociatedForm;
            public TItem EnabledEntryPoints;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>?>? MarkerEntryPoints;
            public TItem ModelFilename;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>? MarkerParameters;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AttachParentSlots;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>? ObjectTemplates;
            public MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>? NavmeshGeometry { get; set; }
            public TItem WBDTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.PreviewTransform, rhs.PreviewTransform)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.NativeTerminal, rhs.NativeTerminal)) return false;
                if (!object.Equals(this.ForcedLocRefType, rhs.ForcedLocRefType)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.DrinkingWater, rhs.DrinkingWater)) return false;
                if (!object.Equals(this.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.BenchType, rhs.BenchType)) return false;
                if (!object.Equals(this.UsesSkill, rhs.UsesSkill)) return false;
                if (!object.Equals(this.AssociatedForm, rhs.AssociatedForm)) return false;
                if (!object.Equals(this.EnabledEntryPoints, rhs.EnabledEntryPoints)) return false;
                if (!object.Equals(this.MarkerEntryPoints, rhs.MarkerEntryPoints)) return false;
                if (!object.Equals(this.ModelFilename, rhs.ModelFilename)) return false;
                if (!object.Equals(this.MarkerParameters, rhs.MarkerParameters)) return false;
                if (!object.Equals(this.AttachParentSlots, rhs.AttachParentSlots)) return false;
                if (!object.Equals(this.ObjectTemplates, rhs.ObjectTemplates)) return false;
                if (!object.Equals(this.NavmeshGeometry, rhs.NavmeshGeometry)) return false;
                if (!object.Equals(this.WBDTDataTypeState, rhs.WBDTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.PreviewTransform);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Keywords);
                hash.Add(this.Properties);
                hash.Add(this.NativeTerminal);
                hash.Add(this.ForcedLocRefType);
                hash.Add(this.PNAM);
                hash.Add(this.DrinkingWater);
                hash.Add(this.ActivateTextOverride);
                hash.Add(this.Flags);
                hash.Add(this.Conditions);
                hash.Add(this.Items);
                hash.Add(this.BenchType);
                hash.Add(this.UsesSkill);
                hash.Add(this.AssociatedForm);
                hash.Add(this.EnabledEntryPoints);
                hash.Add(this.MarkerEntryPoints);
                hash.Add(this.ModelFilename);
                hash.Add(this.MarkerParameters);
                hash.Add(this.AttachParentSlots);
                hash.Add(this.ObjectTemplates);
                hash.Add(this.NavmeshGeometry);
                hash.Add(this.WBDTDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.PreviewTransform)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.NativeTerminal)) return false;
                if (!eval(this.ForcedLocRefType)) return false;
                if (!eval(this.PNAM)) return false;
                if (!eval(this.DrinkingWater)) return false;
                if (!eval(this.ActivateTextOverride)) return false;
                if (!eval(this.Flags)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.BenchType)) return false;
                if (!eval(this.UsesSkill)) return false;
                if (!eval(this.AssociatedForm)) return false;
                if (!eval(this.EnabledEntryPoints)) return false;
                if (this.MarkerEntryPoints != null)
                {
                    if (!eval(this.MarkerEntryPoints.Overall)) return false;
                    if (this.MarkerEntryPoints.Specific != null)
                    {
                        foreach (var item in this.MarkerEntryPoints.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ModelFilename)) return false;
                if (this.MarkerParameters != null)
                {
                    if (!eval(this.MarkerParameters.Overall)) return false;
                    if (this.MarkerParameters.Specific != null)
                    {
                        foreach (var item in this.MarkerParameters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AttachParentSlots != null)
                {
                    if (!eval(this.AttachParentSlots.Overall)) return false;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ObjectTemplates != null)
                {
                    if (!eval(this.ObjectTemplates.Overall)) return false;
                    if (this.ObjectTemplates.Specific != null)
                    {
                        foreach (var item in this.ObjectTemplates.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (NavmeshGeometry != null)
                {
                    if (!eval(this.NavmeshGeometry.Overall)) return false;
                    if (this.NavmeshGeometry.Specific != null && !this.NavmeshGeometry.Specific.All(eval)) return false;
                }
                if (!eval(this.WBDTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.PreviewTransform)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.NativeTerminal)) return true;
                if (eval(this.ForcedLocRefType)) return true;
                if (eval(this.PNAM)) return true;
                if (eval(this.DrinkingWater)) return true;
                if (eval(this.ActivateTextOverride)) return true;
                if (eval(this.Flags)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.BenchType)) return true;
                if (eval(this.UsesSkill)) return true;
                if (eval(this.AssociatedForm)) return true;
                if (eval(this.EnabledEntryPoints)) return true;
                if (this.MarkerEntryPoints != null)
                {
                    if (eval(this.MarkerEntryPoints.Overall)) return true;
                    if (this.MarkerEntryPoints.Specific != null)
                    {
                        foreach (var item in this.MarkerEntryPoints.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ModelFilename)) return true;
                if (this.MarkerParameters != null)
                {
                    if (eval(this.MarkerParameters.Overall)) return true;
                    if (this.MarkerParameters.Specific != null)
                    {
                        foreach (var item in this.MarkerParameters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AttachParentSlots != null)
                {
                    if (eval(this.AttachParentSlots.Overall)) return true;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ObjectTemplates != null)
                {
                    if (eval(this.ObjectTemplates.Overall)) return true;
                    if (this.ObjectTemplates.Specific != null)
                    {
                        foreach (var item in this.ObjectTemplates.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (NavmeshGeometry != null)
                {
                    if (eval(this.NavmeshGeometry.Overall)) return true;
                    if (this.NavmeshGeometry.Specific != null && this.NavmeshGeometry.Specific.Any(eval)) return true;
                }
                if (eval(this.WBDTDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Furniture.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.PreviewTransform = eval(this.PreviewTransform);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.NativeTerminal = eval(this.NativeTerminal);
                obj.ForcedLocRefType = eval(this.ForcedLocRefType);
                obj.PNAM = eval(this.PNAM);
                obj.DrinkingWater = eval(this.DrinkingWater);
                obj.ActivateTextOverride = eval(this.ActivateTextOverride);
                obj.Flags = eval(this.Flags);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BenchType = eval(this.BenchType);
                obj.UsesSkill = eval(this.UsesSkill);
                obj.AssociatedForm = eval(this.AssociatedForm);
                obj.EnabledEntryPoints = eval(this.EnabledEntryPoints);
                if (MarkerEntryPoints != null)
                {
                    obj.MarkerEntryPoints = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>>?>(eval(this.MarkerEntryPoints.Overall), Enumerable.Empty<MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>>());
                    if (MarkerEntryPoints.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>>();
                        obj.MarkerEntryPoints.Specific = l;
                        foreach (var item in MarkerEntryPoints.Specific)
                        {
                            MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ModelFilename = eval(this.ModelFilename);
                if (MarkerParameters != null)
                {
                    obj.MarkerParameters = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>?>(eval(this.MarkerParameters.Overall), Enumerable.Empty<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>());
                    if (MarkerParameters.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>();
                        obj.MarkerParameters.Specific = l;
                        foreach (var item in MarkerParameters.Specific)
                        {
                            MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (AttachParentSlots != null)
                {
                    obj.AttachParentSlots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AttachParentSlots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AttachParentSlots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AttachParentSlots.Specific = l;
                        foreach (var item in AttachParentSlots.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ObjectTemplates != null)
                {
                    obj.ObjectTemplates = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>?>(eval(this.ObjectTemplates.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>());
                    if (ObjectTemplates.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>();
                        obj.ObjectTemplates.Specific = l;
                        foreach (var item in ObjectTemplates.Specific)
                        {
                            MaskItemIndexed<R, ObjectTemplate.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectTemplate.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.NavmeshGeometry = this.NavmeshGeometry == null ? null : new MaskItem<R, NavmeshGeometry.Mask<R>?>(eval(this.NavmeshGeometry.Overall), this.NavmeshGeometry.Specific?.Translate(eval));
                obj.WBDTDataTypeState = eval(this.WBDTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Furniture.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Furniture.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Furniture.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.PreviewTransform ?? true)
                    {
                        fg.AppendItem(PreviewTransform, "PreviewTransform");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        fg.AppendLine("Properties =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.NativeTerminal ?? true)
                    {
                        fg.AppendItem(NativeTerminal, "NativeTerminal");
                    }
                    if (printMask?.ForcedLocRefType ?? true)
                    {
                        fg.AppendItem(ForcedLocRefType, "ForcedLocRefType");
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        fg.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.DrinkingWater ?? true)
                    {
                        fg.AppendItem(DrinkingWater, "DrinkingWater");
                    }
                    if (printMask?.ActivateTextOverride ?? true)
                    {
                        fg.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.BenchType ?? true)
                    {
                        fg.AppendItem(BenchType, "BenchType");
                    }
                    if (printMask?.UsesSkill ?? true)
                    {
                        fg.AppendItem(UsesSkill, "UsesSkill");
                    }
                    if (printMask?.AssociatedForm ?? true)
                    {
                        fg.AppendItem(AssociatedForm, "AssociatedForm");
                    }
                    if (printMask?.EnabledEntryPoints ?? true)
                    {
                        fg.AppendItem(EnabledEntryPoints, "EnabledEntryPoints");
                    }
                    if ((printMask?.MarkerEntryPoints?.Overall ?? true)
                        && MarkerEntryPoints is {} MarkerEntryPointsItem)
                    {
                        fg.AppendLine("MarkerEntryPoints =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MarkerEntryPointsItem.Overall);
                            if (MarkerEntryPointsItem.Specific != null)
                            {
                                foreach (var subItem in MarkerEntryPointsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ModelFilename ?? true)
                    {
                        fg.AppendItem(ModelFilename, "ModelFilename");
                    }
                    if ((printMask?.MarkerParameters?.Overall ?? true)
                        && MarkerParameters is {} MarkerParametersItem)
                    {
                        fg.AppendLine("MarkerParameters =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MarkerParametersItem.Overall);
                            if (MarkerParametersItem.Specific != null)
                            {
                                foreach (var subItem in MarkerParametersItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.AttachParentSlots?.Overall ?? true)
                        && AttachParentSlots is {} AttachParentSlotsItem)
                    {
                        fg.AppendLine("AttachParentSlots =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AttachParentSlotsItem.Overall);
                            if (AttachParentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in AttachParentSlotsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.ObjectTemplates?.Overall ?? true)
                        && ObjectTemplates is {} ObjectTemplatesItem)
                    {
                        fg.AppendLine("ObjectTemplates =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ObjectTemplatesItem.Overall);
                            if (ObjectTemplatesItem.Specific != null)
                            {
                                foreach (var subItem in ObjectTemplatesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.NavmeshGeometry?.Overall ?? true)
                    {
                        NavmeshGeometry?.ToString(fg);
                    }
                    if (printMask?.WBDTDataTypeState ?? true)
                    {
                        fg.AppendItem(WBDTDataTypeState, "WBDTDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? PreviewTransform;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public Exception? NativeTerminal;
            public Exception? ForcedLocRefType;
            public Exception? PNAM;
            public Exception? DrinkingWater;
            public Exception? ActivateTextOverride;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public Exception? BenchType;
            public Exception? UsesSkill;
            public Exception? AssociatedForm;
            public Exception? EnabledEntryPoints;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerEntryPoints.ErrorMask?>>?>? MarkerEntryPoints;
            public Exception? ModelFilename;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>? MarkerParameters;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AttachParentSlots;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>? ObjectTemplates;
            public MaskItem<Exception?, NavmeshGeometry.ErrorMask?>? NavmeshGeometry;
            public Exception? WBDTDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Furniture_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Furniture_FieldIndex.PreviewTransform:
                        return PreviewTransform;
                    case Furniture_FieldIndex.Name:
                        return Name;
                    case Furniture_FieldIndex.Model:
                        return Model;
                    case Furniture_FieldIndex.Destructible:
                        return Destructible;
                    case Furniture_FieldIndex.Keywords:
                        return Keywords;
                    case Furniture_FieldIndex.Properties:
                        return Properties;
                    case Furniture_FieldIndex.NativeTerminal:
                        return NativeTerminal;
                    case Furniture_FieldIndex.ForcedLocRefType:
                        return ForcedLocRefType;
                    case Furniture_FieldIndex.PNAM:
                        return PNAM;
                    case Furniture_FieldIndex.DrinkingWater:
                        return DrinkingWater;
                    case Furniture_FieldIndex.ActivateTextOverride:
                        return ActivateTextOverride;
                    case Furniture_FieldIndex.Flags:
                        return Flags;
                    case Furniture_FieldIndex.Conditions:
                        return Conditions;
                    case Furniture_FieldIndex.Items:
                        return Items;
                    case Furniture_FieldIndex.BenchType:
                        return BenchType;
                    case Furniture_FieldIndex.UsesSkill:
                        return UsesSkill;
                    case Furniture_FieldIndex.AssociatedForm:
                        return AssociatedForm;
                    case Furniture_FieldIndex.EnabledEntryPoints:
                        return EnabledEntryPoints;
                    case Furniture_FieldIndex.MarkerEntryPoints:
                        return MarkerEntryPoints;
                    case Furniture_FieldIndex.ModelFilename:
                        return ModelFilename;
                    case Furniture_FieldIndex.MarkerParameters:
                        return MarkerParameters;
                    case Furniture_FieldIndex.AttachParentSlots:
                        return AttachParentSlots;
                    case Furniture_FieldIndex.ObjectTemplates:
                        return ObjectTemplates;
                    case Furniture_FieldIndex.NavmeshGeometry:
                        return NavmeshGeometry;
                    case Furniture_FieldIndex.WBDTDataTypeState:
                        return WBDTDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.PreviewTransform:
                        this.PreviewTransform = ex;
                        break;
                    case Furniture_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Furniture_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.NativeTerminal:
                        this.NativeTerminal = ex;
                        break;
                    case Furniture_FieldIndex.ForcedLocRefType:
                        this.ForcedLocRefType = ex;
                        break;
                    case Furniture_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case Furniture_FieldIndex.DrinkingWater:
                        this.DrinkingWater = ex;
                        break;
                    case Furniture_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = ex;
                        break;
                    case Furniture_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Furniture_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.BenchType:
                        this.BenchType = ex;
                        break;
                    case Furniture_FieldIndex.UsesSkill:
                        this.UsesSkill = ex;
                        break;
                    case Furniture_FieldIndex.AssociatedForm:
                        this.AssociatedForm = ex;
                        break;
                    case Furniture_FieldIndex.EnabledEntryPoints:
                        this.EnabledEntryPoints = ex;
                        break;
                    case Furniture_FieldIndex.MarkerEntryPoints:
                        this.MarkerEntryPoints = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerEntryPoints.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.ModelFilename:
                        this.ModelFilename = ex;
                        break;
                    case Furniture_FieldIndex.MarkerParameters:
                        this.MarkerParameters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.ObjectTemplates:
                        this.ObjectTemplates = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.NavmeshGeometry:
                        this.NavmeshGeometry = new MaskItem<Exception?, NavmeshGeometry.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.WBDTDataTypeState:
                        this.WBDTDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.PreviewTransform:
                        this.PreviewTransform = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Furniture_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.NativeTerminal:
                        this.NativeTerminal = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.ForcedLocRefType:
                        this.ForcedLocRefType = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.DrinkingWater:
                        this.DrinkingWater = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.BenchType:
                        this.BenchType = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.UsesSkill:
                        this.UsesSkill = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.AssociatedForm:
                        this.AssociatedForm = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.EnabledEntryPoints:
                        this.EnabledEntryPoints = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.MarkerEntryPoints:
                        this.MarkerEntryPoints = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerEntryPoints.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.ModelFilename:
                        this.ModelFilename = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.MarkerParameters:
                        this.MarkerParameters = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Furniture_FieldIndex.ObjectTemplates:
                        this.ObjectTemplates = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.NavmeshGeometry:
                        this.NavmeshGeometry = (MaskItem<Exception?, NavmeshGeometry.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.WBDTDataTypeState:
                        this.WBDTDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (PreviewTransform != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Keywords != null) return true;
                if (Properties != null) return true;
                if (NativeTerminal != null) return true;
                if (ForcedLocRefType != null) return true;
                if (PNAM != null) return true;
                if (DrinkingWater != null) return true;
                if (ActivateTextOverride != null) return true;
                if (Flags != null) return true;
                if (Conditions != null) return true;
                if (Items != null) return true;
                if (BenchType != null) return true;
                if (UsesSkill != null) return true;
                if (AssociatedForm != null) return true;
                if (EnabledEntryPoints != null) return true;
                if (MarkerEntryPoints != null) return true;
                if (ModelFilename != null) return true;
                if (MarkerParameters != null) return true;
                if (AttachParentSlots != null) return true;
                if (ObjectTemplates != null) return true;
                if (NavmeshGeometry != null) return true;
                if (WBDTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(PreviewTransform, "PreviewTransform");
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Destructible?.ToString(fg);
                if (Keywords is {} KeywordsItem)
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Properties is {} PropertiesItem)
                {
                    fg.AppendLine("Properties =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(NativeTerminal, "NativeTerminal");
                fg.AppendItem(ForcedLocRefType, "ForcedLocRefType");
                fg.AppendItem(PNAM, "PNAM");
                fg.AppendItem(DrinkingWater, "DrinkingWater");
                fg.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                fg.AppendItem(Flags, "Flags");
                if (Conditions is {} ConditionsItem)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Items is {} ItemsItem)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(BenchType, "BenchType");
                fg.AppendItem(UsesSkill, "UsesSkill");
                fg.AppendItem(AssociatedForm, "AssociatedForm");
                fg.AppendItem(EnabledEntryPoints, "EnabledEntryPoints");
                if (MarkerEntryPoints is {} MarkerEntryPointsItem)
                {
                    fg.AppendLine("MarkerEntryPoints =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MarkerEntryPointsItem.Overall);
                        if (MarkerEntryPointsItem.Specific != null)
                        {
                            foreach (var subItem in MarkerEntryPointsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(ModelFilename, "ModelFilename");
                if (MarkerParameters is {} MarkerParametersItem)
                {
                    fg.AppendLine("MarkerParameters =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MarkerParametersItem.Overall);
                        if (MarkerParametersItem.Specific != null)
                        {
                            foreach (var subItem in MarkerParametersItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (AttachParentSlots is {} AttachParentSlotsItem)
                {
                    fg.AppendLine("AttachParentSlots =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AttachParentSlotsItem.Overall);
                        if (AttachParentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in AttachParentSlotsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (ObjectTemplates is {} ObjectTemplatesItem)
                {
                    fg.AppendLine("ObjectTemplates =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ObjectTemplatesItem.Overall);
                        if (ObjectTemplatesItem.Specific != null)
                        {
                            foreach (var subItem in ObjectTemplatesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                NavmeshGeometry?.ToString(fg);
                fg.AppendItem(WBDTDataTypeState, "WBDTDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.PreviewTransform = this.PreviewTransform.Combine(rhs.PreviewTransform);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.NativeTerminal = this.NativeTerminal.Combine(rhs.NativeTerminal);
                ret.ForcedLocRefType = this.ForcedLocRefType.Combine(rhs.ForcedLocRefType);
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.DrinkingWater = this.DrinkingWater.Combine(rhs.DrinkingWater);
                ret.ActivateTextOverride = this.ActivateTextOverride.Combine(rhs.ActivateTextOverride);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.BenchType = this.BenchType.Combine(rhs.BenchType);
                ret.UsesSkill = this.UsesSkill.Combine(rhs.UsesSkill);
                ret.AssociatedForm = this.AssociatedForm.Combine(rhs.AssociatedForm);
                ret.EnabledEntryPoints = this.EnabledEntryPoints.Combine(rhs.EnabledEntryPoints);
                ret.MarkerEntryPoints = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerEntryPoints.ErrorMask?>>?>(ExceptionExt.Combine(this.MarkerEntryPoints?.Overall, rhs.MarkerEntryPoints?.Overall), ExceptionExt.Combine(this.MarkerEntryPoints?.Specific, rhs.MarkerEntryPoints?.Specific));
                ret.ModelFilename = this.ModelFilename.Combine(rhs.ModelFilename);
                ret.MarkerParameters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>(ExceptionExt.Combine(this.MarkerParameters?.Overall, rhs.MarkerParameters?.Overall), ExceptionExt.Combine(this.MarkerParameters?.Specific, rhs.MarkerParameters?.Specific));
                ret.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AttachParentSlots?.Overall, rhs.AttachParentSlots?.Overall), ExceptionExt.Combine(this.AttachParentSlots?.Specific, rhs.AttachParentSlots?.Specific));
                ret.ObjectTemplates = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>(ExceptionExt.Combine(this.ObjectTemplates?.Overall, rhs.ObjectTemplates?.Overall), ExceptionExt.Combine(this.ObjectTemplates?.Specific, rhs.ObjectTemplates?.Specific));
                ret.NavmeshGeometry = this.NavmeshGeometry.Combine(rhs.NavmeshGeometry, (l, r) => l.Combine(r));
                ret.WBDTDataTypeState = this.WBDTDataTypeState.Combine(rhs.WBDTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool PreviewTransform;
            public bool Name;
            public Model.TranslationMask? Model;
            public Destructible.TranslationMask? Destructible;
            public bool Keywords;
            public ObjectProperty.TranslationMask? Properties;
            public bool NativeTerminal;
            public bool ForcedLocRefType;
            public bool PNAM;
            public bool DrinkingWater;
            public bool ActivateTextOverride;
            public bool Flags;
            public Condition.TranslationMask? Conditions;
            public ContainerEntry.TranslationMask? Items;
            public bool BenchType;
            public bool UsesSkill;
            public bool AssociatedForm;
            public bool EnabledEntryPoints;
            public FurnitureMarkerEntryPoints.TranslationMask? MarkerEntryPoints;
            public bool ModelFilename;
            public FurnitureMarkerParameters.TranslationMask? MarkerParameters;
            public bool AttachParentSlots;
            public ObjectTemplate.TranslationMask? ObjectTemplates;
            public NavmeshGeometry.TranslationMask? NavmeshGeometry;
            public bool WBDTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.PreviewTransform = defaultOn;
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.NativeTerminal = defaultOn;
                this.ForcedLocRefType = defaultOn;
                this.PNAM = defaultOn;
                this.DrinkingWater = defaultOn;
                this.ActivateTextOverride = defaultOn;
                this.Flags = defaultOn;
                this.BenchType = defaultOn;
                this.UsesSkill = defaultOn;
                this.AssociatedForm = defaultOn;
                this.EnabledEntryPoints = defaultOn;
                this.ModelFilename = defaultOn;
                this.AttachParentSlots = defaultOn;
                this.WBDTDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((PreviewTransform, null));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((NativeTerminal, null));
                ret.Add((ForcedLocRefType, null));
                ret.Add((PNAM, null));
                ret.Add((DrinkingWater, null));
                ret.Add((ActivateTextOverride, null));
                ret.Add((Flags, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((BenchType, null));
                ret.Add((UsesSkill, null));
                ret.Add((AssociatedForm, null));
                ret.Add((EnabledEntryPoints, null));
                ret.Add((MarkerEntryPoints == null ? DefaultOn : !MarkerEntryPoints.GetCrystal().CopyNothing, MarkerEntryPoints?.GetCrystal()));
                ret.Add((ModelFilename, null));
                ret.Add((MarkerParameters == null ? DefaultOn : !MarkerParameters.GetCrystal().CopyNothing, MarkerParameters?.GetCrystal()));
                ret.Add((AttachParentSlots, null));
                ret.Add((ObjectTemplates == null ? DefaultOn : !ObjectTemplates.GetCrystal().CopyNothing, ObjectTemplates?.GetCrystal()));
                ret.Add((NavmeshGeometry != null ? NavmeshGeometry.OnOverall : DefaultOn, NavmeshGeometry?.GetCrystal()));
                ret.Add((WBDTDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Furniture_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => FurnitureCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureSetterCommon.Instance.RemapLinks(this, mapping);
        public Furniture(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Furniture(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Furniture(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Furniture(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Furniture(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Furniture>.ToString(this);
        }

        protected override Type LinkType => typeof(IFurniture);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum WBDTDataType
        {
            Break0 = 1
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFurnitureGetter rhs) return false;
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFurnitureGetter? obj)
        {
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FurnitureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FurnitureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Furniture CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Furniture();
            ((FurnitureSetterCommon)((IFurnitureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Furniture item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Furniture GetNew()
        {
            return new Furniture();
        }

    }
    #endregion

    #region Interface
    public partial interface IFurniture :
        IConstructible,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IFurnitureGetter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IFurnitureInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectId,
        IScripted,
        IStaticObject,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new IFormLinkNullable<ITransformGetter> PreviewTransform { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new IFormLinkNullable<ITerminalGetter> NativeTerminal { get; set; }
        new IFormLinkNullable<ILocationReferenceTypeGetter> ForcedLocRefType { get; set; }
        new MemorySlice<Byte>? PNAM { get; set; }
        new IFormLinkNullable<IWaterGetter> DrinkingWater { get; set; }
        new TranslatedString? ActivateTextOverride { get; set; }
        new Furniture.Flag? Flags { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new Furniture.BenchTypes BenchType { get; set; }
        new Skill? UsesSkill { get; set; }
        new IFormLinkNullable<IFurnitureAssociationGetter> AssociatedForm { get; set; }
        new Furniture.EntryPointType? EnabledEntryPoints { get; set; }
        new ExtendedList<FurnitureMarkerEntryPoints> MarkerEntryPoints { get; }
        new String? ModelFilename { get; set; }
        new ExtendedList<FurnitureMarkerParameters>? MarkerParameters { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; set; }
        new ExtendedList<ObjectTemplate<Furniture.Property>>? ObjectTemplates { get; set; }
        new NavmeshGeometry? NavmeshGeometry { get; set; }
        new Furniture.WBDTDataType WBDTDataTypeState { get; set; }
        #region Mutagen
        new Furniture.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IFurnitureInternal :
        IFallout4MajorRecordInternal,
        IFurniture,
        IFurnitureGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.FURN)]
    public partial interface IFurnitureGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IConstructibleGetter,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IFurnitureGetter>,
        IMapsToGetter<IFurnitureGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IObjectIdGetter,
        IScriptedGetter,
        IStaticObjectGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Furniture_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        IFormLinkNullableGetter<ITransformGetter> PreviewTransform { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IDestructibleGetter? Destructible { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        IFormLinkNullableGetter<ITerminalGetter> NativeTerminal { get; }
        IFormLinkNullableGetter<ILocationReferenceTypeGetter> ForcedLocRefType { get; }
        ReadOnlyMemorySlice<Byte>? PNAM { get; }
        IFormLinkNullableGetter<IWaterGetter> DrinkingWater { get; }
        ITranslatedStringGetter? ActivateTextOverride { get; }
        Furniture.Flag? Flags { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        Furniture.BenchTypes BenchType { get; }
        Skill? UsesSkill { get; }
        IFormLinkNullableGetter<IFurnitureAssociationGetter> AssociatedForm { get; }
        Furniture.EntryPointType? EnabledEntryPoints { get; }
        IReadOnlyList<IFurnitureMarkerEntryPointsGetter> MarkerEntryPoints { get; }
        String? ModelFilename { get; }
        IReadOnlyList<IFurnitureMarkerParametersGetter>? MarkerParameters { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; }
        IReadOnlyList<IObjectTemplateGetter<Furniture.Property>>? ObjectTemplates { get; }
        INavmeshGeometryGetter? NavmeshGeometry { get; }
        Furniture.WBDTDataType WBDTDataTypeState { get; }

        #region Mutagen
        Furniture.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class FurnitureMixIn
    {
        public static void Clear(this IFurnitureInternal item)
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Furniture.Mask<bool> GetEqualsMask(
            this IFurnitureGetter item,
            IFurnitureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFurnitureGetter item,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFurnitureGetter item,
            FileGeneration fg,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFurnitureGetter item,
            IFurnitureGetter rhs,
            Furniture.TranslationMask? equalsMask = null)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFurnitureInternal lhs,
            IFurnitureGetter rhs,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Furniture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFurnitureInternal lhs,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            Furniture.TranslationMask? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Furniture Duplicate(
            this IFurnitureGetter item,
            FormKey formKey,
            Furniture.TranslationMask? copyMask = null)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFurnitureInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Furniture_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        PreviewTransform = 8,
        Name = 9,
        Model = 10,
        Destructible = 11,
        Keywords = 12,
        Properties = 13,
        NativeTerminal = 14,
        ForcedLocRefType = 15,
        PNAM = 16,
        DrinkingWater = 17,
        ActivateTextOverride = 18,
        Flags = 19,
        Conditions = 20,
        Items = 21,
        BenchType = 22,
        UsesSkill = 23,
        AssociatedForm = 24,
        EnabledEntryPoints = 25,
        MarkerEntryPoints = 26,
        ModelFilename = 27,
        MarkerParameters = 28,
        AttachParentSlots = 29,
        ObjectTemplates = 30,
        NavmeshGeometry = 31,
        WBDTDataTypeState = 32,
    }
    #endregion

    #region Registration
    public partial class Furniture_Registration : ILoquiRegistration
    {
        public static readonly Furniture_Registration Instance = new Furniture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 204,
            version: 0);

        public const string GUID = "37ea297d-9233-4548-b692-fe2d298b35c4";

        public const ushort AdditionalFieldCount = 27;

        public const ushort FieldCount = 33;

        public static readonly Type MaskType = typeof(Furniture.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Furniture.ErrorMask);

        public static readonly Type ClassType = typeof(Furniture);

        public static readonly Type GetterType = typeof(IFurnitureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFurniture);

        public static readonly Type? InternalSetterType = typeof(IFurnitureInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Furniture";

        public const string Name = "Furniture";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FURN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.FURN);
            var all = RecordCollection.Factory(
                RecordTypes.FURN,
                RecordTypes.VMAD,
                RecordTypes.OBND,
                RecordTypes.PTRN,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.DEST,
                RecordTypes.DAMC,
                RecordTypes.DSTD,
                RecordTypes.DSTA,
                RecordTypes.DMDL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PRPS,
                RecordTypes.NTRM,
                RecordTypes.FTYP,
                RecordTypes.PNAM,
                RecordTypes.WNAM,
                RecordTypes.ATTX,
                RecordTypes.FNAM,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.CNTO,
                RecordTypes.COCT,
                RecordTypes.COED,
                RecordTypes.MNAM,
                RecordTypes.WBDT,
                RecordTypes.NAM1,
                RecordTypes.ENAM,
                RecordTypes.FNPR,
                RecordTypes.XMRK,
                RecordTypes.SNAM,
                RecordTypes.APPR,
                RecordTypes.OBTE,
                RecordTypes.OBTF,
                RecordTypes.OBTS,
                RecordTypes.STOP,
                RecordTypes.NVNM);
            return new RecordTriggerSpecs(allRecordTypes: all, triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FurnitureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class FurnitureSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly FurnitureSetterCommon Instance = new FurnitureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFurnitureInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.PreviewTransform.Clear();
            item.Name = default;
            item.Model = null;
            item.Destructible = null;
            item.Keywords = null;
            item.Properties = null;
            item.NativeTerminal.Clear();
            item.ForcedLocRefType.Clear();
            item.PNAM = default;
            item.DrinkingWater.Clear();
            item.ActivateTextOverride = default;
            item.Flags = default;
            item.Conditions = null;
            item.Items = null;
            item.BenchType = default;
            item.UsesSkill = default;
            item.AssociatedForm.Clear();
            item.EnabledEntryPoints = default;
            item.MarkerEntryPoints.Clear();
            item.ModelFilename = default;
            item.MarkerParameters = null;
            item.AttachParentSlots = null;
            item.ObjectTemplates = null;
            item.NavmeshGeometry = null;
            item.WBDTDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IFurnitureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFurnitureInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFurniture obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.PreviewTransform.Relink(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.NativeTerminal.Relink(mapping);
            obj.ForcedLocRefType.Relink(mapping);
            obj.DrinkingWater.Relink(mapping);
            obj.Conditions?.RemapLinks(mapping);
            obj.Items?.RemapLinks(mapping);
            obj.AssociatedForm.Relink(mapping);
            obj.MarkerParameters?.RemapLinks(mapping);
            obj.AttachParentSlots?.RemapLinks(mapping);
            obj.ObjectTemplates?.RemapLinks(mapping);
            obj.NavmeshGeometry?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFurnitureInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IFurnitureInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FurnitureBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FurnitureBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Furniture)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Furniture)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class FurnitureCommon : Fallout4MajorRecordCommon
    {
        public new static readonly FurnitureCommon Instance = new FurnitureCommon();

        public Furniture.Mask<bool> GetEqualsMask(
            IFurnitureGetter item,
            IFurnitureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Furniture.Mask<bool>(false);
            ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFurnitureGetter item,
            IFurnitureGetter rhs,
            Furniture.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.PreviewTransform = item.PreviewTransform.Equals(rhs.PreviewTransform);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NativeTerminal = item.NativeTerminal.Equals(rhs.NativeTerminal);
            ret.ForcedLocRefType = item.ForcedLocRefType.Equals(rhs.ForcedLocRefType);
            ret.PNAM = MemorySliceExt.Equal(item.PNAM, rhs.PNAM);
            ret.DrinkingWater = item.DrinkingWater.Equals(rhs.DrinkingWater);
            ret.ActivateTextOverride = object.Equals(item.ActivateTextOverride, rhs.ActivateTextOverride);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BenchType = item.BenchType == rhs.BenchType;
            ret.UsesSkill = item.UsesSkill == rhs.UsesSkill;
            ret.AssociatedForm = item.AssociatedForm.Equals(rhs.AssociatedForm);
            ret.EnabledEntryPoints = item.EnabledEntryPoints == rhs.EnabledEntryPoints;
            ret.MarkerEntryPoints = item.MarkerEntryPoints.CollectionEqualsHelper(
                rhs.MarkerEntryPoints,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ModelFilename = string.Equals(item.ModelFilename, rhs.ModelFilename);
            ret.MarkerParameters = item.MarkerParameters.CollectionEqualsHelper(
                rhs.MarkerParameters,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AttachParentSlots = item.AttachParentSlots.CollectionEqualsHelper(
                rhs.AttachParentSlots,
                (l, r) => object.Equals(l, r),
                include);
            ret.ObjectTemplates = item.ObjectTemplates.CollectionEqualsHelper(
                rhs.ObjectTemplates,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NavmeshGeometry = EqualsMaskHelper.EqualsHelper(
                item.NavmeshGeometry,
                rhs.NavmeshGeometry,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.WBDTDataTypeState = item.WBDTDataTypeState == rhs.WBDTDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFurnitureGetter item,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFurnitureGetter item,
            FileGeneration fg,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Furniture =>");
            }
            else
            {
                fg.AppendLine($"{name} (Furniture) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFurnitureGetter item,
            FileGeneration fg,
            Furniture.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if (printMask?.PreviewTransform ?? true)
            {
                fg.AppendItem(item.PreviewTransform.FormKeyNullable, "PreviewTransform");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                fg.AppendLine("Properties =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.NativeTerminal ?? true)
            {
                fg.AppendItem(item.NativeTerminal.FormKeyNullable, "NativeTerminal");
            }
            if (printMask?.ForcedLocRefType ?? true)
            {
                fg.AppendItem(item.ForcedLocRefType.FormKeyNullable, "ForcedLocRefType");
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                fg.AppendLine($"PNAM => {SpanExt.ToHexString(PNAMItem)}");
            }
            if (printMask?.DrinkingWater ?? true)
            {
                fg.AppendItem(item.DrinkingWater.FormKeyNullable, "DrinkingWater");
            }
            if ((printMask?.ActivateTextOverride ?? true)
                && item.ActivateTextOverride is {} ActivateTextOverrideItem)
            {
                fg.AppendItem(ActivateTextOverrideItem, "ActivateTextOverride");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions is {} ConditionsItem)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items is {} ItemsItem)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ItemsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.BenchType ?? true)
            {
                fg.AppendItem(item.BenchType, "BenchType");
            }
            if ((printMask?.UsesSkill ?? true)
                && item.UsesSkill is {} UsesSkillItem)
            {
                fg.AppendItem(UsesSkillItem, "UsesSkill");
            }
            if (printMask?.AssociatedForm ?? true)
            {
                fg.AppendItem(item.AssociatedForm.FormKeyNullable, "AssociatedForm");
            }
            if ((printMask?.EnabledEntryPoints ?? true)
                && item.EnabledEntryPoints is {} EnabledEntryPointsItem)
            {
                fg.AppendItem(EnabledEntryPointsItem, "EnabledEntryPoints");
            }
            if (printMask?.MarkerEntryPoints?.Overall ?? true)
            {
                fg.AppendLine("MarkerEntryPoints =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MarkerEntryPoints)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ModelFilename ?? true)
                && item.ModelFilename is {} ModelFilenameItem)
            {
                fg.AppendItem(ModelFilenameItem, "ModelFilename");
            }
            if ((printMask?.MarkerParameters?.Overall ?? true)
                && item.MarkerParameters is {} MarkerParametersItem)
            {
                fg.AppendLine("MarkerParameters =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in MarkerParametersItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.AttachParentSlots?.Overall ?? true)
                && item.AttachParentSlots is {} AttachParentSlotsItem)
            {
                fg.AppendLine("AttachParentSlots =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AttachParentSlotsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ObjectTemplates?.Overall ?? true)
                && item.ObjectTemplates is {} ObjectTemplatesItem)
            {
                fg.AppendLine("ObjectTemplates =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ObjectTemplatesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.NavmeshGeometry?.Overall ?? true)
                && item.NavmeshGeometry is {} NavmeshGeometryItem)
            {
                NavmeshGeometryItem?.ToString(fg, "NavmeshGeometry");
            }
            if (printMask?.WBDTDataTypeState ?? true)
            {
                fg.AppendItem(item.WBDTDataTypeState, "WBDTDataTypeState");
            }
        }
        
        public static Furniture_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Furniture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Furniture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Furniture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Furniture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Furniture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Furniture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Furniture_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Furniture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFurnitureGetter? lhs,
            IFurnitureGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, crystal?.GetSubCrystal((int)Furniture_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, crystal?.GetSubCrystal((int)Furniture_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.PreviewTransform) ?? true))
            {
                if (!lhs.PreviewTransform.Equals(rhs.PreviewTransform)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, crystal?.GetSubCrystal((int)Furniture_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, crystal?.GetSubCrystal((int)Furniture_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.NativeTerminal) ?? true))
            {
                if (!lhs.NativeTerminal.Equals(rhs.NativeTerminal)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.ForcedLocRefType) ?? true))
            {
                if (!lhs.ForcedLocRefType.Equals(rhs.ForcedLocRefType)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.PNAM) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.PNAM, rhs.PNAM)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.DrinkingWater) ?? true))
            {
                if (!lhs.DrinkingWater.Equals(rhs.DrinkingWater)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.ActivateTextOverride) ?? true))
            {
                if (!object.Equals(lhs.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqualNullable(rhs.Items)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.BenchType) ?? true))
            {
                if (lhs.BenchType != rhs.BenchType) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.UsesSkill) ?? true))
            {
                if (lhs.UsesSkill != rhs.UsesSkill) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.AssociatedForm) ?? true))
            {
                if (!lhs.AssociatedForm.Equals(rhs.AssociatedForm)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.EnabledEntryPoints) ?? true))
            {
                if (lhs.EnabledEntryPoints != rhs.EnabledEntryPoints) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerEntryPoints) ?? true))
            {
                if (!lhs.MarkerEntryPoints.SequenceEqualNullable(rhs.MarkerEntryPoints)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.ModelFilename) ?? true))
            {
                if (!string.Equals(lhs.ModelFilename, rhs.ModelFilename)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerParameters) ?? true))
            {
                if (!lhs.MarkerParameters.SequenceEqualNullable(rhs.MarkerParameters)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.AttachParentSlots) ?? true))
            {
                if (!lhs.AttachParentSlots.SequenceEqualNullable(rhs.AttachParentSlots)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectTemplates) ?? true))
            {
                if (!lhs.ObjectTemplates.SequenceEqualNullable(rhs.ObjectTemplates)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.NavmeshGeometry) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavmeshGeometry, rhs.NavmeshGeometry, out var lhsNavmeshGeometry, out var rhsNavmeshGeometry, out var isNavmeshGeometryEqual))
                {
                    if (!((NavmeshGeometryCommon)((INavmeshGeometryGetter)lhsNavmeshGeometry).CommonInstance()!).Equals(lhsNavmeshGeometry, rhsNavmeshGeometry, crystal?.GetSubCrystal((int)Furniture_FieldIndex.NavmeshGeometry))) return false;
                }
                else if (!isNavmeshGeometryEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Furniture_FieldIndex.WBDTDataTypeState) ?? true))
            {
                if (lhs.WBDTDataTypeState != rhs.WBDTDataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IFurnitureGetter?)lhs,
                rhs: rhs as IFurnitureGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IFurnitureGetter?)lhs,
                rhs: rhs as IFurnitureGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IFurnitureGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.PreviewTransform);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Properties);
            hash.Add(item.NativeTerminal);
            hash.Add(item.ForcedLocRefType);
            if (item.PNAM is {} PNAMItem)
            {
                hash.Add(PNAMItem);
            }
            hash.Add(item.DrinkingWater);
            if (item.ActivateTextOverride is {} ActivateTextOverrideitem)
            {
                hash.Add(ActivateTextOverrideitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.Items);
            hash.Add(item.BenchType);
            if (item.UsesSkill is {} UsesSkillitem)
            {
                hash.Add(UsesSkillitem);
            }
            hash.Add(item.AssociatedForm);
            if (item.EnabledEntryPoints is {} EnabledEntryPointsitem)
            {
                hash.Add(EnabledEntryPointsitem);
            }
            hash.Add(item.MarkerEntryPoints);
            if (item.ModelFilename is {} ModelFilenameitem)
            {
                hash.Add(ModelFilenameitem);
            }
            hash.Add(item.MarkerParameters);
            hash.Add(item.AttachParentSlots);
            hash.Add(item.ObjectTemplates);
            if (item.NavmeshGeometry is {} NavmeshGeometryitem)
            {
                hash.Add(NavmeshGeometryitem);
            }
            hash.Add(item.WBDTDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IFurnitureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFurnitureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Furniture.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IFurnitureGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.PreviewTransform, out var PreviewTransformInfo))
            {
                yield return PreviewTransformInfo;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.NativeTerminal, out var NativeTerminalInfo))
            {
                yield return NativeTerminalInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ForcedLocRefType, out var ForcedLocRefTypeInfo))
            {
                yield return ForcedLocRefTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DrinkingWater, out var DrinkingWaterInfo))
            {
                yield return DrinkingWaterInfo;
            }
            if (obj.Conditions is {} ConditionsItem)
            {
                foreach (var item in ConditionsItem.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Items is {} ItemsItem)
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.AssociatedForm, out var AssociatedFormInfo))
            {
                yield return AssociatedFormInfo;
            }
            if (obj.MarkerParameters is {} MarkerParametersItem)
            {
                foreach (var item in MarkerParametersItem.SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AttachParentSlots is {} AttachParentSlotsItem)
            {
                foreach (var item in AttachParentSlotsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ObjectTemplates is {} ObjectTemplatesItem)
            {
                foreach (var item in ObjectTemplatesItem.SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.NavmeshGeometry is IFormLinkContainerGetter NavmeshGeometrylinkCont)
            {
                foreach (var item in NavmeshGeometrylinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Furniture Duplicate(
            IFurnitureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Furniture(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFurnitureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFurnitureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class FurnitureSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly FurnitureSetterTranslationCommon Instance = new FurnitureSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFurnitureInternal item,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFurniture item,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Furniture_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.PreviewTransform) ?? true))
            {
                item.PreviewTransform.SetTo(rhs.PreviewTransform.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.NativeTerminal) ?? true))
            {
                item.NativeTerminal.SetTo(rhs.NativeTerminal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ForcedLocRefType) ?? true))
            {
                item.ForcedLocRefType.SetTo(rhs.ForcedLocRefType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.PNAM) ?? true))
            {
                if(rhs.PNAM is {} PNAMrhs)
                {
                    item.PNAM = PNAMrhs.ToArray();
                }
                else
                {
                    item.PNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.DrinkingWater) ?? true))
            {
                item.DrinkingWater.SetTo(rhs.DrinkingWater.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ActivateTextOverride) ?? true))
            {
                item.ActivateTextOverride = rhs.ActivateTextOverride?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.BenchType) ?? true))
            {
                item.BenchType = rhs.BenchType;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.UsesSkill) ?? true))
            {
                item.UsesSkill = rhs.UsesSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.AssociatedForm) ?? true))
            {
                item.AssociatedForm.SetTo(rhs.AssociatedForm.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.EnabledEntryPoints) ?? true))
            {
                item.EnabledEntryPoints = rhs.EnabledEntryPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerEntryPoints) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.MarkerEntryPoints);
                try
                {
                    item.MarkerEntryPoints.SetTo(
                        rhs.MarkerEntryPoints
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ModelFilename) ?? true))
            {
                item.ModelFilename = rhs.ModelFilename;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerParameters) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.MarkerParameters);
                try
                {
                    if ((rhs.MarkerParameters != null))
                    {
                        item.MarkerParameters = 
                            rhs.MarkerParameters
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<FurnitureMarkerParameters>();
                    }
                    else
                    {
                        item.MarkerParameters = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.AttachParentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.AttachParentSlots);
                try
                {
                    if ((rhs.AttachParentSlots != null))
                    {
                        item.AttachParentSlots = 
                            rhs.AttachParentSlots
                            .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.AttachParentSlots = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectTemplates) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.ObjectTemplates);
                try
                {
                    if ((rhs.ObjectTemplates != null))
                    {
                        item.ObjectTemplates = 
                            rhs.ObjectTemplates
                            .Select(r =>
                            {
                                return r.DeepCopy<Furniture.Property>(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectTemplate<Furniture.Property>>();
                    }
                    else
                    {
                        item.ObjectTemplates = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.NavmeshGeometry) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.NavmeshGeometry);
                try
                {
                    if(rhs.NavmeshGeometry is {} rhsNavmeshGeometry)
                    {
                        item.NavmeshGeometry = rhsNavmeshGeometry.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.NavmeshGeometry));
                    }
                    else
                    {
                        item.NavmeshGeometry = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.WBDTDataTypeState) ?? true))
            {
                item.WBDTDataTypeState = rhs.WBDTDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurnitureInternal)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurniture)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurnitureInternal)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurniture)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            Furniture.TranslationMask? copyMask = null)
        {
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Furniture.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Furniture
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Furniture_Registration.Instance;
        public new static Furniture_Registration StaticRegistration => Furniture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FurnitureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FurnitureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FurnitureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FurnitureBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FurnitureBinaryWriteTranslation Instance = new FurnitureBinaryWriteTranslation();

        public static void WriteEmbedded(
            IFurnitureGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IFurnitureGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviewTransform,
                header: translationParams.ConvertToCustom(RecordTypes.PTRN));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NativeTerminal,
                header: translationParams.ConvertToCustom(RecordTypes.NTRM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ForcedLocRefType,
                header: translationParams.ConvertToCustom(RecordTypes.FTYP));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DrinkingWater,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ActivateTextOverride,
                header: translationParams.ConvertToCustom(RecordTypes.ATTX),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            FurnitureBinaryWriteTranslation.WriteBinaryFlags(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Conditions,
                counterType: RecordTypes.CITC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FurnitureBinaryWriteTranslation.WriteBinaryFlags2(
                writer: writer,
                item: item);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WBDT)))
            {
                EnumBinaryTranslation<Furniture.BenchTypes, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.BenchType,
                    length: 1);
                if (!item.WBDTDataTypeState.HasFlag(Furniture.WBDTDataType.Break0))
                {
                    EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Write(
                        writer,
                        ((int?)item.UsesSkill) ?? -1,
                        length: 1);
                }
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AssociatedForm,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            FurnitureBinaryWriteTranslation.WriteBinaryEnabledEntryPoints(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFurnitureMarkerEntryPointsGetter>.Instance.Write(
                writer: writer,
                items: item.MarkerEntryPoints,
                transl: (MutagenWriter subWriter, IFurnitureMarkerEntryPointsGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((FurnitureMarkerEntryPointsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ModelFilename,
                header: translationParams.ConvertToCustom(RecordTypes.XMRK),
                binaryType: StringBinaryType.NullTerminate);
            FurnitureBinaryWriteTranslation.WriteBinaryMarkerParameters(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.AttachParentSlots,
                recordType: translationParams.ConvertToCustom(RecordTypes.APPR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectTemplateGetter<Furniture.Property>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ObjectTemplates,
                counterType: RecordTypes.OBTE,
                counterLength: 4,
                endMarker: RecordTypes.STOP,
                transl: (MutagenWriter subWriter, IObjectTemplateGetter<Furniture.Property> subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ObjectTemplateBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write<Furniture.Property>(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.NavmeshGeometry is {} NavmeshGeometryItem)
            {
                ((NavmeshGeometryBinaryWriteTranslation)((IBinaryItem)NavmeshGeometryItem).BinaryWriteTranslator).Write(
                    item: NavmeshGeometryItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            IFurnitureGetter item);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            IFurnitureGetter item)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFlags2Custom(
            MutagenWriter writer,
            IFurnitureGetter item);

        public static void WriteBinaryFlags2(
            MutagenWriter writer,
            IFurnitureGetter item)
        {
            WriteBinaryFlags2Custom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryEnabledEntryPointsCustom(
            MutagenWriter writer,
            IFurnitureGetter item);

        public static void WriteBinaryEnabledEntryPoints(
            MutagenWriter writer,
            IFurnitureGetter item)
        {
            WriteBinaryEnabledEntryPointsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryMarkerParametersCustom(
            MutagenWriter writer,
            IFurnitureGetter item);

        public static void WriteBinaryMarkerParameters(
            MutagenWriter writer,
            IFurnitureGetter item)
        {
            WriteBinaryMarkerParametersCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IFurnitureGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.FURN)))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class FurnitureBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static FurnitureBinaryCreateTranslation Instance = new FurnitureBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FURN;
        public static void FillBinaryStructs(
            IFurnitureInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IFurnitureInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Furniture_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Furniture_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviewTransform.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Furniture_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Furniture_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Furniture_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DSTA:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Furniture_FieldIndex.Destructible;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Furniture_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Properties = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ObjectProperty.TryCreateFromBinary)
                        .CastExtendedList<ObjectProperty>();
                    return (int)Furniture_FieldIndex.Properties;
                }
                case RecordTypeInts.NTRM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NativeTerminal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Furniture_FieldIndex.NativeTerminal;
                }
                case RecordTypeInts.FTYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedLocRefType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Furniture_FieldIndex.ForcedLocRefType;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Furniture_FieldIndex.PNAM;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DrinkingWater.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Furniture_FieldIndex.DrinkingWater;
                }
                case RecordTypeInts.ATTX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActivateTextOverride = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Furniture_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.FNAM:
                {
                    FurnitureBinaryCreateTranslation.FillBinaryFlagsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Furniture_FieldIndex.Flags;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    item.Conditions = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.CITC,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary)
                        .CastExtendedList<Condition>();
                    return (int)Furniture_FieldIndex.Conditions;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Items = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: ContainerEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ContainerEntry.TryCreateFromBinary)
                        .CastExtendedList<ContainerEntry>();
                    return (int)Furniture_FieldIndex.Items;
                }
                case RecordTypeInts.MNAM:
                {
                    return FurnitureBinaryCreateTranslation.FillBinaryFlags2Custom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                }
                case RecordTypeInts.WBDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.BenchType = EnumBinaryTranslation<Furniture.BenchTypes, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Complete)
                    {
                        item.WBDTDataTypeState |= Furniture.WBDTDataType.Break0;
                        return (int)Furniture_FieldIndex.BenchType;
                    }
                    item.UsesSkill = EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    return (int)Furniture_FieldIndex.UsesSkill;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AssociatedForm.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Furniture_FieldIndex.AssociatedForm;
                }
                case RecordTypeInts.ENAM:
                {
                    FurnitureBinaryCreateTranslation.FillBinaryEnabledEntryPointsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Furniture_FieldIndex.EnabledEntryPoints;
                }
                case RecordTypeInts.FNPR:
                {
                    item.MarkerEntryPoints.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FurnitureMarkerEntryPoints>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: FurnitureMarkerEntryPoints_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: FurnitureMarkerEntryPoints.TryCreateFromBinary));
                    return (int)Furniture_FieldIndex.MarkerEntryPoints;
                }
                case RecordTypeInts.XMRK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ModelFilename = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Furniture_FieldIndex.ModelFilename;
                }
                case RecordTypeInts.SNAM:
                {
                    FurnitureBinaryCreateTranslation.FillBinaryMarkerParametersCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Furniture_FieldIndex.MarkerParameters;
                }
                case RecordTypeInts.APPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttachParentSlots = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Furniture_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.OBTE:
                {
                    item.ObjectTemplates = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectTemplate<Furniture.Property>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.OBTE,
                            triggeringRecord: ObjectTemplate_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ObjectTemplate<Furniture.Property>.TryCreateFromBinary)
                        .CastExtendedList<ObjectTemplate<Furniture.Property>>();
                    return (int)Furniture_FieldIndex.ObjectTemplates;
                }
                case RecordTypeInts.NVNM:
                {
                    item.NavmeshGeometry = Mutagen.Bethesda.Fallout4.NavmeshGeometry.CreateFromBinary(frame: frame);
                    return (int)Furniture_FieldIndex.NavmeshGeometry;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        public static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            IFurnitureInternal item);

        public static partial ParseResult FillBinaryFlags2Custom(
            MutagenFrame frame,
            IFurnitureInternal item);

        public static partial void FillBinaryEnabledEntryPointsCustom(
            MutagenFrame frame,
            IFurnitureInternal item);

        public static partial void FillBinaryMarkerParametersCustom(
            MutagenFrame frame,
            IFurnitureInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class FurnitureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FurnitureBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IFurnitureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Furniture_Registration.Instance;
        public new static Furniture_Registration StaticRegistration => Furniture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FurnitureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FurnitureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => FurnitureCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FurnitureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FurnitureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IFurniture);

        public Furniture.MajorFlag MajorFlags => (Furniture.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region PreviewTransform
        private int? _PreviewTransformLocation;
        public IFormLinkNullableGetter<ITransformGetter> PreviewTransform => _PreviewTransformLocation.HasValue ? new FormLinkNullable<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PreviewTransformLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITransformGetter>.Null;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        #region NativeTerminal
        private int? _NativeTerminalLocation;
        public IFormLinkNullableGetter<ITerminalGetter> NativeTerminal => _NativeTerminalLocation.HasValue ? new FormLinkNullable<ITerminalGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NativeTerminalLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITerminalGetter>.Null;
        #endregion
        #region ForcedLocRefType
        private int? _ForcedLocRefTypeLocation;
        public IFormLinkNullableGetter<ILocationReferenceTypeGetter> ForcedLocRefType => _ForcedLocRefTypeLocation.HasValue ? new FormLinkNullable<ILocationReferenceTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ForcedLocRefTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationReferenceTypeGetter>.Null;
        #endregion
        #region PNAM
        private int? _PNAMLocation;
        public ReadOnlyMemorySlice<Byte>? PNAM => _PNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _PNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DrinkingWater
        private int? _DrinkingWaterLocation;
        public IFormLinkNullableGetter<IWaterGetter> DrinkingWater => _DrinkingWaterLocation.HasValue ? new FormLinkNullable<IWaterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _DrinkingWaterLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWaterGetter>.Null;
        #endregion
        #region ActivateTextOverride
        private int? _ActivateTextOverrideLocation;
        public ITranslatedStringGetter? ActivateTextOverride => _ActivateTextOverrideLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _ActivateTextOverrideLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        #region Flags
        partial void FlagsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public partial Furniture.Flag? GetFlagsCustom();
        public Furniture.Flag? Flags => GetFlagsCustom();
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        #region Flags2
        public partial ParseResult Flags2CustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        private int? _WBDTLocation;
        public Furniture.WBDTDataType WBDTDataTypeState { get; private set; }
        #region BenchType
        private int _BenchTypeLocation => _WBDTLocation!.Value;
        private bool _BenchType_IsSet => _WBDTLocation.HasValue;
        public Furniture.BenchTypes BenchType => _BenchType_IsSet ? (Furniture.BenchTypes)_data.Span.Slice(_BenchTypeLocation, 0x1)[0] : default;
        #endregion
        #region UsesSkill
        private int _UsesSkillLocation => _WBDTLocation!.Value + 0x1;
        private bool _UsesSkill_IsSet => _WBDTLocation.HasValue && !WBDTDataTypeState.HasFlag(Furniture.WBDTDataType.Break0);
        public Skill? UsesSkill
        {
            get
            {
                var val = (Skill)_data.Span.Slice(_UsesSkillLocation, 0x1)[0];
                if (((int)val) == -1) return null;
                return val;
            }
        }
        #endregion
        #region AssociatedForm
        private int? _AssociatedFormLocation;
        public IFormLinkNullableGetter<IFurnitureAssociationGetter> AssociatedForm => _AssociatedFormLocation.HasValue ? new FormLinkNullable<IFurnitureAssociationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AssociatedFormLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFurnitureAssociationGetter>.Null;
        #endregion
        #region EnabledEntryPoints
        partial void EnabledEntryPointsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public partial Furniture.EntryPointType? GetEnabledEntryPointsCustom();
        public Furniture.EntryPointType? EnabledEntryPoints => GetEnabledEntryPointsCustom();
        #endregion
        public IReadOnlyList<IFurnitureMarkerEntryPointsGetter> MarkerEntryPoints { get; private set; } = ListExt.Empty<FurnitureMarkerEntryPointsBinaryOverlay>();
        #region ModelFilename
        private int? _ModelFilenameLocation;
        public String? ModelFilename => _ModelFilenameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ModelFilenameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MarkerParameters
        partial void MarkerParametersCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; private set; }
        public IReadOnlyList<IObjectTemplateGetter<Furniture.Property>>? ObjectTemplates { get; private set; }
        #region NavmeshGeometry
        private RangeInt32? _NavmeshGeometryLocation;
        public INavmeshGeometryGetter? NavmeshGeometry => _NavmeshGeometryLocation.HasValue ? NavmeshGeometryBinaryOverlay.NavmeshGeometryFactory(new OverlayStream(_data.Slice(_NavmeshGeometryLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FurnitureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FurnitureBinaryOverlay FurnitureFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new FurnitureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static FurnitureBinaryOverlay FurnitureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return FurnitureFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Furniture_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Furniture_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    _PreviewTransformLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Furniture_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DSTA:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Furniture_FieldIndex.Destructible;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Furniture_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.Properties = BinaryOverlayList.FactoryByStartIndex<ObjectPropertyBinaryOverlay>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 8,
                        getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                    stream.Position += subLen;
                    return (int)Furniture_FieldIndex.Properties;
                }
                case RecordTypeInts.NTRM:
                {
                    _NativeTerminalLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.NativeTerminal;
                }
                case RecordTypeInts.FTYP:
                {
                    _ForcedLocRefTypeLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.ForcedLocRefType;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.PNAM;
                }
                case RecordTypeInts.WNAM:
                {
                    _DrinkingWaterLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.DrinkingWater;
                }
                case RecordTypeInts.ATTX:
                {
                    _ActivateTextOverrideLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.FNAM:
                {
                    FlagsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Furniture_FieldIndex.Flags;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Furniture_FieldIndex.Conditions;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Items = BinaryOverlayList.FactoryByCountPerItem<ContainerEntryBinaryOverlay>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ContainerEntry_Registration.TriggerSpecs,
                        countType: RecordTypes.COCT,
                        parseParams: parseParams,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Furniture_FieldIndex.Items;
                }
                case RecordTypeInts.MNAM:
                {
                    return Flags2CustomParse(
                        stream,
                        offset);
                }
                case RecordTypeInts.WBDT:
                {
                    _WBDTLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x1)
                    {
                        this.WBDTDataTypeState |= Furniture.WBDTDataType.Break0;
                    }
                    return (int)Furniture_FieldIndex.UsesSkill;
                }
                case RecordTypeInts.NAM1:
                {
                    _AssociatedFormLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.AssociatedForm;
                }
                case RecordTypeInts.ENAM:
                {
                    EnabledEntryPointsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Furniture_FieldIndex.EnabledEntryPoints;
                }
                case RecordTypeInts.FNPR:
                {
                    this.MarkerEntryPoints = BinaryOverlayList.FactoryByArray<FurnitureMarkerEntryPointsBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        parseParams: parseParams,
                        getter: (s, p, recConv) => FurnitureMarkerEntryPointsBinaryOverlay.FurnitureMarkerEntryPointsFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Furniture_FieldIndex.MarkerEntryPoints;
                }
                case RecordTypeInts.XMRK:
                {
                    _ModelFilenameLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.ModelFilename;
                }
                case RecordTypeInts.SNAM:
                {
                    MarkerParametersCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Furniture_FieldIndex.MarkerParameters;
                }
                case RecordTypeInts.APPR:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.AttachParentSlots = BinaryOverlayList.FactoryByStartIndex<IFormLinkGetter<IKeywordGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)Furniture_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.OBTE:
                {
                    this.ObjectTemplates = BinaryOverlayList.FactoryByCountPerItem<ObjectTemplateBinaryOverlay<Furniture.Property>>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ObjectTemplate_Registration.TriggerSpecs,
                        countType: RecordTypes.OBTE,
                        parseParams: parseParams,
                        getter: (s, p, recConv) => ObjectTemplateBinaryOverlay<Furniture.Property>.ObjectTemplateFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Furniture_FieldIndex.ObjectTemplates;
                }
                case RecordTypeInts.NVNM:
                {
                    _NavmeshGeometryLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Furniture_FieldIndex.NavmeshGeometry;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FurnitureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Furniture>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFurnitureGetter rhs) return false;
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFurnitureGetter? obj)
        {
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

