/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PlacedFlame :
        APlacedTrap,
        IEquatable<IPlacedFlameGetter>,
        ILoquiObjectSetter<PlacedFlame>,
        IPlacedFlameInternal
    {
        #region Ctor
        protected PlacedFlame()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Projectile
        private readonly IFormLink<IProjectileGetter> _Projectile = new FormLink<IProjectileGetter>();
        public IFormLink<IProjectileGetter> Projectile
        {
            get => _Projectile;
            set => _Projectile.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IProjectileGetter> IPlacedFlameGetter.Projectile => this.Projectile;
        #endregion

        #region To String

        public override void ToString(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedFlameMixIn.ToString(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APlacedTrap.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Projectile = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem EncounterZone,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem Reflections,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem UnknownReference,
                TItem XATP,
                TItem AmmoCount,
                TItem LinkedRefTransient,
                TItem Layer,
                TItem MaterialSwap,
                TItem ReferenceGroup,
                TItem XCVR,
                TItem EnableParent,
                TItem Ownership,
                TItem Emittance,
                TItem MultiBoundReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem LocationReference,
                TItem Scale,
                TItem DistantLodData,
                TItem Position,
                TItem Rotation,
                TItem Comments,
                TItem DATADataTypeState,
                TItem Projectile)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                VirtualMachineAdapter: VirtualMachineAdapter,
                EncounterZone: EncounterZone,
                HeadTrackingWeight: HeadTrackingWeight,
                FavorCost: FavorCost,
                Reflections: Reflections,
                LinkedReferences: LinkedReferences,
                ActivateParents: ActivateParents,
                UnknownReference: UnknownReference,
                XATP: XATP,
                AmmoCount: AmmoCount,
                LinkedRefTransient: LinkedRefTransient,
                Layer: Layer,
                MaterialSwap: MaterialSwap,
                ReferenceGroup: ReferenceGroup,
                XCVR: XCVR,
                EnableParent: EnableParent,
                Ownership: Ownership,
                Emittance: Emittance,
                MultiBoundReference: MultiBoundReference,
                IgnoredBySandbox: IgnoredBySandbox,
                LocationRefTypes: LocationRefTypes,
                LocationReference: LocationReference,
                Scale: Scale,
                DistantLodData: DistantLodData,
                Position: Position,
                Rotation: Rotation,
                Comments: Comments,
                DATADataTypeState: DATADataTypeState)
            {
                this.Projectile = Projectile;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Projectile;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Projectile, rhs.Projectile)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Projectile);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Projectile)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Projectile)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedFlame.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Projectile = eval(this.Projectile);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlacedFlame.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                ToString(sb, printMask);
                return sb.ToString();
            }

            public void ToString(StructuredStringBuilder sb, PlacedFlame.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedFlame.Mask<TItem>)} =>");
                sb.AppendLine("[");
                using (new DepthWrapper(sb))
                {
                    if (printMask?.Projectile ?? true)
                    {
                        sb.AppendItem(Projectile, "Projectile");
                    }
                }
                sb.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APlacedTrap.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Projectile;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedFlame_FieldIndex enu = (PlacedFlame_FieldIndex)index;
                switch (enu)
                {
                    case PlacedFlame_FieldIndex.Projectile:
                        return Projectile;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedFlame_FieldIndex enu = (PlacedFlame_FieldIndex)index;
                switch (enu)
                {
                    case PlacedFlame_FieldIndex.Projectile:
                        this.Projectile = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedFlame_FieldIndex enu = (PlacedFlame_FieldIndex)index;
                switch (enu)
                {
                    case PlacedFlame_FieldIndex.Projectile:
                        this.Projectile = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Projectile != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var sb = new StructuredStringBuilder();
                ToString(sb, null);
                return sb.ToString();
            }

            public override void ToString(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                sb.AppendLine("[");
                using (new DepthWrapper(sb))
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        sb.AppendLine("[");
                        using (new DepthWrapper(sb))
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                        sb.AppendLine("]");
                    }
                    ToString_FillInternal(sb);
                }
                sb.AppendLine("]");
            }
            protected override void ToString_FillInternal(StructuredStringBuilder sb)
            {
                base.ToString_FillInternal(sb);
                {
                    sb.AppendItem(Projectile, "Projectile");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Projectile = this.Projectile.Combine(rhs.Projectile);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APlacedTrap.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Projectile;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Projectile = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Projectile, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlacedFlame_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => PlacedFlameCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedFlameSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedFlame(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private PlacedFlame(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal PlacedFlame(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedFlame(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public PlacedFlame(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedFlame>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlacedFlame);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedFlameGetter rhs) return false;
            return ((PlacedFlameCommon)((IPlacedFlameGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IPlacedFlameGetter? obj)
        {
            return ((PlacedFlameCommon)((IPlacedFlameGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((PlacedFlameCommon)((IPlacedFlameGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedFlameBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((PlacedFlameBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlacedFlame CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new PlacedFlame();
            ((PlacedFlameSetterCommon)((IPlacedFlameGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedFlame item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(StructuredStringBuilder sb, string? name) => this.ToString(sb, name);

        void IClearable.Clear()
        {
            ((PlacedFlameSetterCommon)((IPlacedFlameGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedFlame GetNew()
        {
            return new PlacedFlame();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedFlame :
        IAPlacedTrapInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IPlacedFlameInternal>,
        IPlacedFlameGetter,
        IScripted
    {
        new IFormLink<IProjectileGetter> Projectile { get; set; }
    }

    public partial interface IPlacedFlameInternal :
        IAPlacedTrapInternal,
        IPlacedFlame,
        IPlacedFlameGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.PFLA)]
    public partial interface IPlacedFlameGetter :
        IAPlacedTrapGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPlacedFlameGetter>,
        IMapsToGetter<IPlacedFlameGetter>,
        IScriptedGetter
    {
        static new ILoquiRegistration StaticRegistration => PlacedFlame_Registration.Instance;
        IFormLinkGetter<IProjectileGetter> Projectile { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedFlameMixIn
    {
        public static void Clear(this IPlacedFlameInternal item)
        {
            ((PlacedFlameSetterCommon)((IPlacedFlameGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedFlame.Mask<bool> GetEqualsMask(
            this IPlacedFlameGetter item,
            IPlacedFlameGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedFlameGetter item,
            string? name = null,
            PlacedFlame.Mask<bool>? printMask = null)
        {
            return ((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedFlameGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedFlame.Mask<bool>? printMask = null)
        {
            ((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).ToString(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedFlameGetter item,
            IPlacedFlameGetter rhs,
            PlacedFlame.TranslationMask? equalsMask = null)
        {
            return ((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedFlameInternal lhs,
            IPlacedFlameGetter rhs,
            out PlacedFlame.ErrorMask errorMask,
            PlacedFlame.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedFlameSetterTranslationCommon)((IPlacedFlameGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedFlame.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedFlameInternal lhs,
            IPlacedFlameGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedFlameSetterTranslationCommon)((IPlacedFlameGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedFlame DeepCopy(
            this IPlacedFlameGetter item,
            PlacedFlame.TranslationMask? copyMask = null)
        {
            return ((PlacedFlameSetterTranslationCommon)((IPlacedFlameGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedFlame DeepCopy(
            this IPlacedFlameGetter item,
            out PlacedFlame.ErrorMask errorMask,
            PlacedFlame.TranslationMask? copyMask = null)
        {
            return ((PlacedFlameSetterTranslationCommon)((IPlacedFlameGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedFlame DeepCopy(
            this IPlacedFlameGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedFlameSetterTranslationCommon)((IPlacedFlameGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedFlame Duplicate(
            this IPlacedFlameGetter item,
            FormKey formKey,
            PlacedFlame.TranslationMask? copyMask = null)
        {
            return ((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedFlameInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((PlacedFlameSetterCommon)((IPlacedFlameGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum PlacedFlame_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        EncounterZone = 7,
        HeadTrackingWeight = 8,
        FavorCost = 9,
        Reflections = 10,
        LinkedReferences = 11,
        ActivateParents = 12,
        UnknownReference = 13,
        XATP = 14,
        AmmoCount = 15,
        LinkedRefTransient = 16,
        Layer = 17,
        MaterialSwap = 18,
        ReferenceGroup = 19,
        XCVR = 20,
        EnableParent = 21,
        Ownership = 22,
        Emittance = 23,
        MultiBoundReference = 24,
        IgnoredBySandbox = 25,
        LocationRefTypes = 26,
        LocationReference = 27,
        Scale = 28,
        DistantLodData = 29,
        Position = 30,
        Rotation = 31,
        Comments = 32,
        DATADataTypeState = 33,
        Projectile = 34,
    }
    #endregion

    #region Registration
    internal partial class PlacedFlame_Registration : ILoquiRegistration
    {
        public static readonly PlacedFlame_Registration Instance = new PlacedFlame_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 477,
            version: 0);

        public const string GUID = "b82409a6-0b72-42da-abcc-6b4fa587d835";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 35;

        public static readonly Type MaskType = typeof(PlacedFlame.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedFlame.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedFlame);

        public static readonly Type GetterType = typeof(IPlacedFlameGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedFlame);

        public static readonly Type? InternalSetterType = typeof(IPlacedFlameInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.PlacedFlame";

        public const string Name = "PlacedFlame";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PFLA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.PFLA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedFlameBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedFlameSetterCommon : APlacedTrapSetterCommon
    {
        public new static readonly PlacedFlameSetterCommon Instance = new PlacedFlameSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedFlameInternal item)
        {
            ClearPartial();
            item.Projectile.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAPlacedTrapInternal item)
        {
            Clear(item: (IPlacedFlameInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IPlacedFlameInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedFlameInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedFlame obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Projectile.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedFlameInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlacedFlameInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedFlameBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedFlameBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (PlacedFlame)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (PlacedFlame)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (PlacedFlame)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlacedFlameCommon : APlacedTrapCommon
    {
        public new static readonly PlacedFlameCommon Instance = new PlacedFlameCommon();

        public PlacedFlame.Mask<bool> GetEqualsMask(
            IPlacedFlameGetter item,
            IPlacedFlameGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedFlame.Mask<bool>(false);
            ((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedFlameGetter item,
            IPlacedFlameGetter rhs,
            PlacedFlame.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Projectile = item.Projectile.Equals(rhs.Projectile);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedFlameGetter item,
            string? name = null,
            PlacedFlame.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            ToString(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void ToString(
            IPlacedFlameGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedFlame.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedFlame =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedFlame) =>");
            }
            sb.AppendLine("[");
            using (new DepthWrapper(sb))
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
            sb.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedFlameGetter item,
            StructuredStringBuilder sb,
            PlacedFlame.Mask<bool>? printMask = null)
        {
            APlacedTrapCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Projectile ?? true)
            {
                sb.AppendItem(item.Projectile.FormKey, "Projectile");
            }
        }
        
        public static PlacedFlame_FieldIndex ConvertFieldIndex(APlacedTrap_FieldIndex index)
        {
            switch (index)
            {
                case APlacedTrap_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormKey:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VersionControl:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EditorID:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormVersion:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Version2:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EncounterZone:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FavorCost:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Reflections:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LinkedReferences:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.ActivateParents:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.UnknownReference:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.XATP:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.AmmoCount:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LinkedRefTransient:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Layer:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.MaterialSwap:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.ReferenceGroup:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.XCVR:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EnableParent:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Ownership:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Emittance:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.MultiBoundReference:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationRefTypes:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationReference:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Scale:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.DistantLodData:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Position:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Rotation:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Comments:
                    return (PlacedFlame_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.DATADataTypeState:
                    return (PlacedFlame_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedFlame_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedFlame_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (PlacedFlame_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (PlacedFlame_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (PlacedFlame_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (PlacedFlame_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (PlacedFlame_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedFlame_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedFlame_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedFlame_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedFlame_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedFlame_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedFlameGetter? lhs,
            IPlacedFlameGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAPlacedTrapGetter)lhs, (IAPlacedTrapGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)PlacedFlame_FieldIndex.Projectile) ?? true))
            {
                if (!lhs.Projectile.Equals(rhs.Projectile)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAPlacedTrapGetter? lhs,
            IAPlacedTrapGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IPlacedFlameGetter?)lhs,
                rhs: rhs as IPlacedFlameGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IPlacedFlameGetter?)lhs,
                rhs: rhs as IPlacedFlameGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IPlacedFlameGetter?)lhs,
                rhs: rhs as IPlacedFlameGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IPlacedFlameGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Projectile);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPlacedTrapGetter item)
        {
            return GetHashCode(item: (IPlacedFlameGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedFlameGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedFlameGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedFlame.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IPlacedFlameGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Projectile);
            yield break;
        }
        
        #region Duplicate
        public PlacedFlame Duplicate(
            IPlacedFlameGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedFlame(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override APlacedTrap Duplicate(
            IAPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedFlameGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedFlameGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedFlameGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlacedFlameSetterTranslationCommon : APlacedTrapSetterTranslationCommon
    {
        public new static readonly PlacedFlameSetterTranslationCommon Instance = new PlacedFlameSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedFlameInternal item,
            IPlacedFlameGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedFlame item,
            IPlacedFlameGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPlacedTrap)item,
                (IAPlacedTrapGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedFlame_FieldIndex.Projectile) ?? true))
            {
                item.Projectile.SetTo(rhs.Projectile.FormKey);
            }
        }
        
        public override void DeepCopyIn(
            IAPlacedTrapInternal item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedFlameInternal)item,
                rhs: (IPlacedFlameGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedFlame)item,
                rhs: (IPlacedFlameGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedFlameInternal)item,
                rhs: (IPlacedFlameGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedFlame)item,
                rhs: (IPlacedFlameGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedFlameInternal)item,
                rhs: (IPlacedFlameGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedFlame)item,
                rhs: (IPlacedFlameGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedFlame DeepCopy(
            IPlacedFlameGetter item,
            PlacedFlame.TranslationMask? copyMask = null)
        {
            PlacedFlame ret = (PlacedFlame)((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).GetNew();
            ((PlacedFlameSetterTranslationCommon)((IPlacedFlameGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedFlame DeepCopy(
            IPlacedFlameGetter item,
            out PlacedFlame.ErrorMask errorMask,
            PlacedFlame.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedFlame ret = (PlacedFlame)((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).GetNew();
            ((PlacedFlameSetterTranslationCommon)((IPlacedFlameGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedFlame.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedFlame DeepCopy(
            IPlacedFlameGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedFlame ret = (PlacedFlame)((PlacedFlameCommon)((IPlacedFlameGetter)item).CommonInstance()!).GetNew();
            ((PlacedFlameSetterTranslationCommon)((IPlacedFlameGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedFlame
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedFlame_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedFlame_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedFlameCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedFlameSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedFlameSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedFlameBinaryWriteTranslation :
        APlacedTrapBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedFlameBinaryWriteTranslation Instance = new PlacedFlameBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPlacedFlameGetter item,
            MutagenWriter writer)
        {
            APlacedTrapBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedFlameGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.PFLA)))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    APlacedTrapBinaryWriteTranslation.WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IPlacedFlameGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedTrapGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IPlacedFlameGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IPlacedFlameGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IPlacedFlameGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedFlameBinaryCreateTranslation : APlacedTrapBinaryCreateTranslation
    {
        public new readonly static PlacedFlameBinaryCreateTranslation Instance = new PlacedFlameBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PFLA;
        public static void FillBinaryStructs(
            IPlacedFlameInternal item,
            MutagenFrame frame)
        {
            APlacedTrapBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PlacedFlameBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class PlacedFlameBinaryOverlay :
        APlacedTrapBinaryOverlay,
        IPlacedFlameGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedFlame_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedFlame_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedFlameCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedFlameSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(StructuredStringBuilder sb, string? name) => this.ToString(sb, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => PlacedFlameCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedFlameBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((PlacedFlameBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlacedFlame);


        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedFlameBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PlacedFlameBinaryOverlay PlacedFlameFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = Decompression.DecompressStream(stream);
            var ret = new PlacedFlameBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecordHeader().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PlacedFlameBinaryOverlay PlacedFlameFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return PlacedFlameFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public override void ToString(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedFlameMixIn.ToString(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedFlame>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedFlameGetter rhs) return false;
            return ((PlacedFlameCommon)((IPlacedFlameGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IPlacedFlameGetter? obj)
        {
            return ((PlacedFlameCommon)((IPlacedFlameGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((PlacedFlameCommon)((IPlacedFlameGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

