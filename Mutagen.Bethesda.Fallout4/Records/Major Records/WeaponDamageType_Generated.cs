/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class WeaponDamageType :
        IEquatable<IWeaponDamageTypeGetter>,
        ILoquiObjectSetter<WeaponDamageType>,
        IWeaponDamageType
    {
        #region Ctor
        public WeaponDamageType()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DamageType
        private readonly IFormLink<IDamageTypeGetter> _DamageType = new FormLink<IDamageTypeGetter>();
        public IFormLink<IDamageTypeGetter> DamageType
        {
            get => _DamageType;
            set => _DamageType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDamageTypeGetter> IWeaponDamageTypeGetter.DamageType => this.DamageType;
        #endregion
        #region Amount
        public UInt32 Amount { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeaponDamageTypeMixIn.ToString(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWeaponDamageTypeGetter rhs) return false;
            return ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWeaponDamageTypeGetter? obj)
        {
            return ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.DamageType = initialValue;
                this.Amount = initialValue;
            }

            public Mask(
                TItem DamageType,
                TItem Amount)
            {
                this.DamageType = DamageType;
                this.Amount = Amount;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DamageType;
            public TItem Amount;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.DamageType, rhs.DamageType)) return false;
                if (!object.Equals(this.Amount, rhs.Amount)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DamageType);
                hash.Add(this.Amount);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.DamageType)) return false;
                if (!eval(this.Amount)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.DamageType)) return true;
                if (eval(this.Amount)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WeaponDamageType.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.DamageType = eval(this.DamageType);
                obj.Amount = eval(this.Amount);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WeaponDamageType.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                ToString(sb, printMask);
                return sb.ToString();
            }

            public void ToString(StructuredStringBuilder sb, WeaponDamageType.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(WeaponDamageType.Mask<TItem>)} =>");
                sb.AppendLine("[");
                using (sb.IncreaseDepth())
                {
                    if (printMask?.DamageType ?? true)
                    {
                        sb.AppendItem(DamageType, "DamageType");
                    }
                    if (printMask?.Amount ?? true)
                    {
                        sb.AppendItem(Amount, "Amount");
                    }
                }
                sb.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? DamageType;
            public Exception? Amount;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WeaponDamageType_FieldIndex enu = (WeaponDamageType_FieldIndex)index;
                switch (enu)
                {
                    case WeaponDamageType_FieldIndex.DamageType:
                        return DamageType;
                    case WeaponDamageType_FieldIndex.Amount:
                        return Amount;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WeaponDamageType_FieldIndex enu = (WeaponDamageType_FieldIndex)index;
                switch (enu)
                {
                    case WeaponDamageType_FieldIndex.DamageType:
                        this.DamageType = ex;
                        break;
                    case WeaponDamageType_FieldIndex.Amount:
                        this.Amount = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WeaponDamageType_FieldIndex enu = (WeaponDamageType_FieldIndex)index;
                switch (enu)
                {
                    case WeaponDamageType_FieldIndex.DamageType:
                        this.DamageType = (Exception?)obj;
                        break;
                    case WeaponDamageType_FieldIndex.Amount:
                        this.Amount = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (DamageType != null) return true;
                if (Amount != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var sb = new StructuredStringBuilder();
                ToString(sb, null);
                return sb.ToString();
            }

            public void ToString(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                sb.AppendLine("[");
                using (sb.IncreaseDepth())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        sb.AppendLine("[");
                        using (sb.IncreaseDepth())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                        sb.AppendLine("]");
                    }
                    ToString_FillInternal(sb);
                }
                sb.AppendLine("]");
            }
            protected void ToString_FillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(DamageType, "DamageType");
                }
                {
                    sb.AppendItem(Amount, "Amount");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DamageType = this.DamageType.Combine(rhs.DamageType);
                ret.Amount = this.Amount.Combine(rhs.Amount);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool DamageType;
            public bool Amount;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.DamageType = defaultOn;
                this.Amount = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((DamageType, null));
                ret.Add((Amount, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => WeaponDamageTypeCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeaponDamageTypeSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeaponDamageTypeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WeaponDamageTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static WeaponDamageType CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new WeaponDamageType();
            ((WeaponDamageTypeSetterCommon)((IWeaponDamageTypeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WeaponDamageType item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(StructuredStringBuilder sb, string? name) => this.ToString(sb, name);

        void IClearable.Clear()
        {
            ((WeaponDamageTypeSetterCommon)((IWeaponDamageTypeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WeaponDamageType GetNew()
        {
            return new WeaponDamageType();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeaponDamageType :
        IFormLinkContainer,
        ILoquiObjectSetter<IWeaponDamageType>,
        IWeaponDamageTypeGetter
    {
        new IFormLink<IDamageTypeGetter> DamageType { get; set; }
        new UInt32 Amount { get; set; }
    }

    public partial interface IWeaponDamageTypeGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWeaponDamageTypeGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => WeaponDamageType_Registration.Instance;
        IFormLinkGetter<IDamageTypeGetter> DamageType { get; }
        UInt32 Amount { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeaponDamageTypeMixIn
    {
        public static void Clear(this IWeaponDamageType item)
        {
            ((WeaponDamageTypeSetterCommon)((IWeaponDamageTypeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WeaponDamageType.Mask<bool> GetEqualsMask(
            this IWeaponDamageTypeGetter item,
            IWeaponDamageTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeaponDamageTypeGetter item,
            string? name = null,
            WeaponDamageType.Mask<bool>? printMask = null)
        {
            return ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeaponDamageTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WeaponDamageType.Mask<bool>? printMask = null)
        {
            ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)item).CommonInstance()!).ToString(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWeaponDamageTypeGetter item,
            IWeaponDamageTypeGetter rhs,
            WeaponDamageType.TranslationMask? equalsMask = null)
        {
            return ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWeaponDamageType lhs,
            IWeaponDamageTypeGetter rhs)
        {
            ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWeaponDamageType lhs,
            IWeaponDamageTypeGetter rhs,
            WeaponDamageType.TranslationMask? copyMask = null)
        {
            ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWeaponDamageType lhs,
            IWeaponDamageTypeGetter rhs,
            out WeaponDamageType.ErrorMask errorMask,
            WeaponDamageType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WeaponDamageType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeaponDamageType lhs,
            IWeaponDamageTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WeaponDamageType DeepCopy(
            this IWeaponDamageTypeGetter item,
            WeaponDamageType.TranslationMask? copyMask = null)
        {
            return ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WeaponDamageType DeepCopy(
            this IWeaponDamageTypeGetter item,
            out WeaponDamageType.ErrorMask errorMask,
            WeaponDamageType.TranslationMask? copyMask = null)
        {
            return ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WeaponDamageType DeepCopy(
            this IWeaponDamageTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWeaponDamageType item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((WeaponDamageTypeSetterCommon)((IWeaponDamageTypeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum WeaponDamageType_FieldIndex
    {
        DamageType = 0,
        Amount = 1,
    }
    #endregion

    #region Registration
    internal partial class WeaponDamageType_Registration : ILoquiRegistration
    {
        public static readonly WeaponDamageType_Registration Instance = new WeaponDamageType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 337,
            version: 0);

        public const string GUID = "a188e5af-64a3-40af-8022-3898f4d59cdf";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(WeaponDamageType.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeaponDamageType.ErrorMask);

        public static readonly Type ClassType = typeof(WeaponDamageType);

        public static readonly Type GetterType = typeof(IWeaponDamageTypeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeaponDamageType);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.WeaponDamageType";

        public const string Name = "WeaponDamageType";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DAMA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.DAMA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WeaponDamageTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WeaponDamageTypeSetterCommon
    {
        public static readonly WeaponDamageTypeSetterCommon Instance = new WeaponDamageTypeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeaponDamageType item)
        {
            ClearPartial();
            item.DamageType.Clear();
            item.Amount = default;
        }
        
        #region Mutagen
        public void RemapLinks(IWeaponDamageType obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.DamageType.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeaponDamageType item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DAMA),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WeaponDamageTypeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class WeaponDamageTypeCommon
    {
        public static readonly WeaponDamageTypeCommon Instance = new WeaponDamageTypeCommon();

        public WeaponDamageType.Mask<bool> GetEqualsMask(
            IWeaponDamageTypeGetter item,
            IWeaponDamageTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeaponDamageType.Mask<bool>(false);
            ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeaponDamageTypeGetter item,
            IWeaponDamageTypeGetter rhs,
            WeaponDamageType.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DamageType = item.DamageType.Equals(rhs.DamageType);
            ret.Amount = item.Amount == rhs.Amount;
        }
        
        public string ToString(
            IWeaponDamageTypeGetter item,
            string? name = null,
            WeaponDamageType.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            ToString(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void ToString(
            IWeaponDamageTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WeaponDamageType.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"WeaponDamageType =>");
            }
            else
            {
                sb.AppendLine($"{name} (WeaponDamageType) =>");
            }
            sb.AppendLine("[");
            using (sb.IncreaseDepth())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
            sb.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeaponDamageTypeGetter item,
            StructuredStringBuilder sb,
            WeaponDamageType.Mask<bool>? printMask = null)
        {
            if (printMask?.DamageType ?? true)
            {
                sb.AppendItem(item.DamageType.FormKey, "DamageType");
            }
            if (printMask?.Amount ?? true)
            {
                sb.AppendItem(item.Amount, "Amount");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeaponDamageTypeGetter? lhs,
            IWeaponDamageTypeGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)WeaponDamageType_FieldIndex.DamageType) ?? true))
            {
                if (!lhs.DamageType.Equals(rhs.DamageType)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WeaponDamageType_FieldIndex.Amount) ?? true))
            {
                if (lhs.Amount != rhs.Amount) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IWeaponDamageTypeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.DamageType);
            hash.Add(item.Amount);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WeaponDamageType.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IWeaponDamageTypeGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.DamageType);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class WeaponDamageTypeSetterTranslationCommon
    {
        public static readonly WeaponDamageTypeSetterTranslationCommon Instance = new WeaponDamageTypeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWeaponDamageType item,
            IWeaponDamageTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)WeaponDamageType_FieldIndex.DamageType) ?? true))
            {
                item.DamageType.SetTo(rhs.DamageType.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponDamageType_FieldIndex.Amount) ?? true))
            {
                item.Amount = rhs.Amount;
            }
        }
        
        #endregion
        
        public WeaponDamageType DeepCopy(
            IWeaponDamageTypeGetter item,
            WeaponDamageType.TranslationMask? copyMask = null)
        {
            WeaponDamageType ret = (WeaponDamageType)((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)item).CommonInstance()!).GetNew();
            ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WeaponDamageType DeepCopy(
            IWeaponDamageTypeGetter item,
            out WeaponDamageType.ErrorMask errorMask,
            WeaponDamageType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeaponDamageType ret = (WeaponDamageType)((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)item).CommonInstance()!).GetNew();
            ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WeaponDamageType.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WeaponDamageType DeepCopy(
            IWeaponDamageTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WeaponDamageType ret = (WeaponDamageType)((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)item).CommonInstance()!).GetNew();
            ((WeaponDamageTypeSetterTranslationCommon)((IWeaponDamageTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeaponDamageType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeaponDamageType_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => WeaponDamageType_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeaponDamageTypeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WeaponDamageTypeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeaponDamageTypeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeaponDamageTypeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWeaponDamageTypeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWeaponDamageTypeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeaponDamageTypeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WeaponDamageTypeBinaryWriteTranslation Instance = new WeaponDamageTypeBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWeaponDamageTypeGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DamageType);
            writer.Write(item.Amount);
        }

        public void Write(
            MutagenWriter writer,
            IWeaponDamageTypeGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DAMA),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWeaponDamageTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WeaponDamageTypeBinaryCreateTranslation
    {
        public readonly static WeaponDamageTypeBinaryCreateTranslation Instance = new WeaponDamageTypeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWeaponDamageType item,
            MutagenFrame frame)
        {
            item.DamageType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Amount = frame.ReadUInt32();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class WeaponDamageTypeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWeaponDamageTypeGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WeaponDamageTypeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class WeaponDamageTypeBinaryOverlay :
        PluginBinaryOverlay,
        IWeaponDamageTypeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeaponDamageType_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => WeaponDamageType_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeaponDamageTypeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeaponDamageTypeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeaponDamageTypeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWeaponDamageTypeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWeaponDamageTypeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(StructuredStringBuilder sb, string? name) => this.ToString(sb, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => WeaponDamageTypeCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeaponDamageTypeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WeaponDamageTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IDamageTypeGetter> DamageType => new FormLink<IDamageTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public UInt32 Amount => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x4, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeaponDamageTypeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WeaponDamageTypeBinaryOverlay WeaponDamageTypeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new WeaponDamageTypeBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecordHeader().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x8 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static WeaponDamageTypeBinaryOverlay WeaponDamageTypeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return WeaponDamageTypeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeaponDamageTypeMixIn.ToString(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWeaponDamageTypeGetter rhs) return false;
            return ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWeaponDamageTypeGetter? obj)
        {
            return ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

