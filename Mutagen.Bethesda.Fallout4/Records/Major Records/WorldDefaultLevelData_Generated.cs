/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class WorldDefaultLevelData :
        IEquatable<IWorldDefaultLevelDataGetter>,
        ILoquiObjectSetter<WorldDefaultLevelData>,
        IWorldDefaultLevelData
    {
        #region Ctor
        public WorldDefaultLevelData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NorthwestCellCoords
        public P2UInt8 NorthwestCellCoords { get; set; } = default;
        #endregion
        #region NorthwestCellSize
        public P2UInt8 NorthwestCellSize { get; set; } = default;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Data;
        public MemorySlice<Byte>? Data
        {
            get => this._Data;
            set => this._Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWorldDefaultLevelDataGetter.Data => this.Data;
        #endregion
        #region WLEVDataTypeState
        public WorldDefaultLevelData.WLEVDataType WLEVDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WorldDefaultLevelDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWorldDefaultLevelDataGetter rhs) return false;
            return ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWorldDefaultLevelDataGetter? obj)
        {
            return ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NorthwestCellCoords = initialValue;
                this.NorthwestCellSize = initialValue;
                this.Data = initialValue;
                this.WLEVDataTypeState = initialValue;
            }

            public Mask(
                TItem NorthwestCellCoords,
                TItem NorthwestCellSize,
                TItem Data,
                TItem WLEVDataTypeState)
            {
                this.NorthwestCellCoords = NorthwestCellCoords;
                this.NorthwestCellSize = NorthwestCellSize;
                this.Data = Data;
                this.WLEVDataTypeState = WLEVDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NorthwestCellCoords;
            public TItem NorthwestCellSize;
            public TItem Data;
            public TItem WLEVDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NorthwestCellCoords, rhs.NorthwestCellCoords)) return false;
                if (!object.Equals(this.NorthwestCellSize, rhs.NorthwestCellSize)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.WLEVDataTypeState, rhs.WLEVDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NorthwestCellCoords);
                hash.Add(this.NorthwestCellSize);
                hash.Add(this.Data);
                hash.Add(this.WLEVDataTypeState);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NorthwestCellCoords)) return false;
                if (!eval(this.NorthwestCellSize)) return false;
                if (!eval(this.Data)) return false;
                if (!eval(this.WLEVDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NorthwestCellCoords)) return true;
                if (eval(this.NorthwestCellSize)) return true;
                if (eval(this.Data)) return true;
                if (eval(this.WLEVDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WorldDefaultLevelData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NorthwestCellCoords = eval(this.NorthwestCellCoords);
                obj.NorthwestCellSize = eval(this.NorthwestCellSize);
                obj.Data = eval(this.Data);
                obj.WLEVDataTypeState = eval(this.WLEVDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(WorldDefaultLevelData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, WorldDefaultLevelData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(WorldDefaultLevelData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.NorthwestCellCoords ?? true)
                    {
                        sb.AppendItem(NorthwestCellCoords, "NorthwestCellCoords");
                    }
                    if (printMask?.NorthwestCellSize ?? true)
                    {
                        sb.AppendItem(NorthwestCellSize, "NorthwestCellSize");
                    }
                    if (printMask?.Data ?? true)
                    {
                        sb.AppendItem(Data, "Data");
                    }
                    if (printMask?.WLEVDataTypeState ?? true)
                    {
                        sb.AppendItem(WLEVDataTypeState, "WLEVDataTypeState");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NorthwestCellCoords;
            public Exception? NorthwestCellSize;
            public Exception? Data;
            public Exception? WLEVDataTypeState;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WorldDefaultLevelData_FieldIndex enu = (WorldDefaultLevelData_FieldIndex)index;
                switch (enu)
                {
                    case WorldDefaultLevelData_FieldIndex.NorthwestCellCoords:
                        return NorthwestCellCoords;
                    case WorldDefaultLevelData_FieldIndex.NorthwestCellSize:
                        return NorthwestCellSize;
                    case WorldDefaultLevelData_FieldIndex.Data:
                        return Data;
                    case WorldDefaultLevelData_FieldIndex.WLEVDataTypeState:
                        return WLEVDataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WorldDefaultLevelData_FieldIndex enu = (WorldDefaultLevelData_FieldIndex)index;
                switch (enu)
                {
                    case WorldDefaultLevelData_FieldIndex.NorthwestCellCoords:
                        this.NorthwestCellCoords = ex;
                        break;
                    case WorldDefaultLevelData_FieldIndex.NorthwestCellSize:
                        this.NorthwestCellSize = ex;
                        break;
                    case WorldDefaultLevelData_FieldIndex.Data:
                        this.Data = ex;
                        break;
                    case WorldDefaultLevelData_FieldIndex.WLEVDataTypeState:
                        this.WLEVDataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WorldDefaultLevelData_FieldIndex enu = (WorldDefaultLevelData_FieldIndex)index;
                switch (enu)
                {
                    case WorldDefaultLevelData_FieldIndex.NorthwestCellCoords:
                        this.NorthwestCellCoords = (Exception?)obj;
                        break;
                    case WorldDefaultLevelData_FieldIndex.NorthwestCellSize:
                        this.NorthwestCellSize = (Exception?)obj;
                        break;
                    case WorldDefaultLevelData_FieldIndex.Data:
                        this.Data = (Exception?)obj;
                        break;
                    case WorldDefaultLevelData_FieldIndex.WLEVDataTypeState:
                        this.WLEVDataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NorthwestCellCoords != null) return true;
                if (NorthwestCellSize != null) return true;
                if (Data != null) return true;
                if (WLEVDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(NorthwestCellCoords, "NorthwestCellCoords");
                }
                {
                    sb.AppendItem(NorthwestCellSize, "NorthwestCellSize");
                }
                {
                    sb.AppendItem(Data, "Data");
                }
                {
                    sb.AppendItem(WLEVDataTypeState, "WLEVDataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NorthwestCellCoords = this.NorthwestCellCoords.Combine(rhs.NorthwestCellCoords);
                ret.NorthwestCellSize = this.NorthwestCellSize.Combine(rhs.NorthwestCellSize);
                ret.Data = this.Data.Combine(rhs.Data);
                ret.WLEVDataTypeState = this.WLEVDataTypeState.Combine(rhs.WLEVDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NorthwestCellCoords;
            public bool NorthwestCellSize;
            public bool Data;
            public bool WLEVDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NorthwestCellCoords = defaultOn;
                this.NorthwestCellSize = defaultOn;
                this.Data = defaultOn;
                this.WLEVDataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NorthwestCellCoords, null));
                ret.Add((NorthwestCellSize, null));
                ret.Add((Data, null));
                ret.Add((WLEVDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum WLEVDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WorldDefaultLevelDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WorldDefaultLevelDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static WorldDefaultLevelData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new WorldDefaultLevelData();
            ((WorldDefaultLevelDataSetterCommon)((IWorldDefaultLevelDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WorldDefaultLevelData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WorldDefaultLevelDataSetterCommon)((IWorldDefaultLevelDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WorldDefaultLevelData GetNew()
        {
            return new WorldDefaultLevelData();
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldDefaultLevelData :
        ILoquiObjectSetter<IWorldDefaultLevelData>,
        IWorldDefaultLevelDataGetter
    {
        new P2UInt8 NorthwestCellCoords { get; set; }
        new P2UInt8 NorthwestCellSize { get; set; }
        new MemorySlice<Byte>? Data { get; set; }
        new WorldDefaultLevelData.WLEVDataType WLEVDataTypeState { get; set; }
    }

    public partial interface IWorldDefaultLevelDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IWorldDefaultLevelDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => WorldDefaultLevelData_Registration.Instance;
        P2UInt8 NorthwestCellCoords { get; }
        P2UInt8 NorthwestCellSize { get; }
        ReadOnlyMemorySlice<Byte>? Data { get; }
        WorldDefaultLevelData.WLEVDataType WLEVDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WorldDefaultLevelDataMixIn
    {
        public static void Clear(this IWorldDefaultLevelData item)
        {
            ((WorldDefaultLevelDataSetterCommon)((IWorldDefaultLevelDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WorldDefaultLevelData.Mask<bool> GetEqualsMask(
            this IWorldDefaultLevelDataGetter item,
            IWorldDefaultLevelDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWorldDefaultLevelDataGetter item,
            string? name = null,
            WorldDefaultLevelData.Mask<bool>? printMask = null)
        {
            return ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWorldDefaultLevelDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WorldDefaultLevelData.Mask<bool>? printMask = null)
        {
            ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWorldDefaultLevelDataGetter item,
            IWorldDefaultLevelDataGetter rhs,
            WorldDefaultLevelData.TranslationMask? equalsMask = null)
        {
            return ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWorldDefaultLevelData lhs,
            IWorldDefaultLevelDataGetter rhs)
        {
            ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWorldDefaultLevelData lhs,
            IWorldDefaultLevelDataGetter rhs,
            WorldDefaultLevelData.TranslationMask? copyMask = null)
        {
            ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWorldDefaultLevelData lhs,
            IWorldDefaultLevelDataGetter rhs,
            out WorldDefaultLevelData.ErrorMask errorMask,
            WorldDefaultLevelData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WorldDefaultLevelData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWorldDefaultLevelData lhs,
            IWorldDefaultLevelDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WorldDefaultLevelData DeepCopy(
            this IWorldDefaultLevelDataGetter item,
            WorldDefaultLevelData.TranslationMask? copyMask = null)
        {
            return ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WorldDefaultLevelData DeepCopy(
            this IWorldDefaultLevelDataGetter item,
            out WorldDefaultLevelData.ErrorMask errorMask,
            WorldDefaultLevelData.TranslationMask? copyMask = null)
        {
            return ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WorldDefaultLevelData DeepCopy(
            this IWorldDefaultLevelDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWorldDefaultLevelData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((WorldDefaultLevelDataSetterCommon)((IWorldDefaultLevelDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum WorldDefaultLevelData_FieldIndex
    {
        NorthwestCellCoords = 0,
        NorthwestCellSize = 1,
        Data = 2,
        WLEVDataTypeState = 3,
    }
    #endregion

    #region Registration
    internal partial class WorldDefaultLevelData_Registration : ILoquiRegistration
    {
        public static readonly WorldDefaultLevelData_Registration Instance = new WorldDefaultLevelData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 511,
            version: 0);

        public const string GUID = "40c8c9de-51f2-488e-b290-c9dc65e380d1";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(WorldDefaultLevelData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WorldDefaultLevelData.ErrorMask);

        public static readonly Type ClassType = typeof(WorldDefaultLevelData);

        public static readonly Type GetterType = typeof(IWorldDefaultLevelDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWorldDefaultLevelData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.WorldDefaultLevelData";

        public const string Name = "WorldDefaultLevelData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WLEV;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.WLEV);
            var all = RecordCollection.Factory(
                RecordTypes.WLEV,
                RecordTypes.XXXX);
            return new RecordTriggerSpecs(allRecordTypes: all, triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WorldDefaultLevelDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WorldDefaultLevelDataSetterCommon
    {
        public static readonly WorldDefaultLevelDataSetterCommon Instance = new WorldDefaultLevelDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWorldDefaultLevelData item)
        {
            ClearPartial();
            item.NorthwestCellCoords = default;
            item.NorthwestCellSize = default;
            item.Data = default;
            item.WLEVDataTypeState = default;
        }
        
        #region Mutagen
        public void RemapLinks(IWorldDefaultLevelData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWorldDefaultLevelData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WorldDefaultLevelDataBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WorldDefaultLevelDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class WorldDefaultLevelDataCommon
    {
        public static readonly WorldDefaultLevelDataCommon Instance = new WorldDefaultLevelDataCommon();

        public WorldDefaultLevelData.Mask<bool> GetEqualsMask(
            IWorldDefaultLevelDataGetter item,
            IWorldDefaultLevelDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WorldDefaultLevelData.Mask<bool>(false);
            ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWorldDefaultLevelDataGetter item,
            IWorldDefaultLevelDataGetter rhs,
            WorldDefaultLevelData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.NorthwestCellCoords = item.NorthwestCellCoords.Equals(rhs.NorthwestCellCoords);
            ret.NorthwestCellSize = item.NorthwestCellSize.Equals(rhs.NorthwestCellSize);
            ret.Data = MemorySliceExt.Equal(item.Data, rhs.Data);
            ret.WLEVDataTypeState = item.WLEVDataTypeState == rhs.WLEVDataTypeState;
        }
        
        public string Print(
            IWorldDefaultLevelDataGetter item,
            string? name = null,
            WorldDefaultLevelData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWorldDefaultLevelDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WorldDefaultLevelData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"WorldDefaultLevelData =>");
            }
            else
            {
                sb.AppendLine($"{name} (WorldDefaultLevelData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWorldDefaultLevelDataGetter item,
            StructuredStringBuilder sb,
            WorldDefaultLevelData.Mask<bool>? printMask = null)
        {
            if (printMask?.NorthwestCellCoords ?? true)
            {
                sb.AppendItem(item.NorthwestCellCoords, "NorthwestCellCoords");
            }
            if (printMask?.NorthwestCellSize ?? true)
            {
                sb.AppendItem(item.NorthwestCellSize, "NorthwestCellSize");
            }
            if ((printMask?.Data ?? true)
                && item.Data is {} DataItem)
            {
                sb.AppendLine($"Data => {SpanExt.ToHexString(DataItem)}");
            }
            if (printMask?.WLEVDataTypeState ?? true)
            {
                sb.AppendItem(item.WLEVDataTypeState, "WLEVDataTypeState");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWorldDefaultLevelDataGetter? lhs,
            IWorldDefaultLevelDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)WorldDefaultLevelData_FieldIndex.NorthwestCellCoords) ?? true))
            {
                if (!lhs.NorthwestCellCoords.Equals(rhs.NorthwestCellCoords)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize) ?? true))
            {
                if (!lhs.NorthwestCellSize.Equals(rhs.NorthwestCellSize)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WorldDefaultLevelData_FieldIndex.Data) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.Data, rhs.Data)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WorldDefaultLevelData_FieldIndex.WLEVDataTypeState) ?? true))
            {
                if (lhs.WLEVDataTypeState != rhs.WLEVDataTypeState) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IWorldDefaultLevelDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NorthwestCellCoords);
            hash.Add(item.NorthwestCellSize);
            if (item.Data is {} DataItem)
            {
                hash.Add(DataItem);
            }
            hash.Add(item.WLEVDataTypeState);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WorldDefaultLevelData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWorldDefaultLevelDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class WorldDefaultLevelDataSetterTranslationCommon
    {
        public static readonly WorldDefaultLevelDataSetterTranslationCommon Instance = new WorldDefaultLevelDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWorldDefaultLevelData item,
            IWorldDefaultLevelDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)WorldDefaultLevelData_FieldIndex.NorthwestCellCoords) ?? true))
            {
                item.NorthwestCellCoords = rhs.NorthwestCellCoords;
            }
            if ((copyMask?.GetShouldTranslate((int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize) ?? true))
            {
                item.NorthwestCellSize = rhs.NorthwestCellSize;
            }
            if ((copyMask?.GetShouldTranslate((int)WorldDefaultLevelData_FieldIndex.Data) ?? true))
            {
                if(rhs.Data is {} Datarhs)
                {
                    item.Data = Datarhs.ToArray();
                }
                else
                {
                    item.Data = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)WorldDefaultLevelData_FieldIndex.WLEVDataTypeState) ?? true))
            {
                item.WLEVDataTypeState = rhs.WLEVDataTypeState;
            }
        }
        
        #endregion
        
        public WorldDefaultLevelData DeepCopy(
            IWorldDefaultLevelDataGetter item,
            WorldDefaultLevelData.TranslationMask? copyMask = null)
        {
            WorldDefaultLevelData ret = (WorldDefaultLevelData)((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)item).CommonInstance()!).GetNew();
            ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WorldDefaultLevelData DeepCopy(
            IWorldDefaultLevelDataGetter item,
            out WorldDefaultLevelData.ErrorMask errorMask,
            WorldDefaultLevelData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WorldDefaultLevelData ret = (WorldDefaultLevelData)((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)item).CommonInstance()!).GetNew();
            ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WorldDefaultLevelData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WorldDefaultLevelData DeepCopy(
            IWorldDefaultLevelDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WorldDefaultLevelData ret = (WorldDefaultLevelData)((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)item).CommonInstance()!).GetNew();
            ((WorldDefaultLevelDataSetterTranslationCommon)((IWorldDefaultLevelDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class WorldDefaultLevelData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldDefaultLevelData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => WorldDefaultLevelData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WorldDefaultLevelDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WorldDefaultLevelDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WorldDefaultLevelDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWorldDefaultLevelDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWorldDefaultLevelDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWorldDefaultLevelDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class WorldDefaultLevelDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WorldDefaultLevelDataBinaryWriteTranslation Instance = new WorldDefaultLevelDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWorldDefaultLevelDataGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IWorldDefaultLevelDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WLEV)))
            {
                P2UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.NorthwestCellCoords);
                P2UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.NorthwestCellSize);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Data,
                header: translationParams.ConvertToCustom(RecordTypes.WLEV),
                overflowRecord: RecordTypes.XXXX);
        }

        public void Write(
            MutagenWriter writer,
            IWorldDefaultLevelDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWorldDefaultLevelDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WorldDefaultLevelDataBinaryCreateTranslation
    {
        public readonly static WorldDefaultLevelDataBinaryCreateTranslation Instance = new WorldDefaultLevelDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWorldDefaultLevelData item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IWorldDefaultLevelData item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WLEV:
                {
                    if (!lastParsed.ParsedIndex.HasValue)
                    {
                        if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize) return ParseResult.Stop;
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        var dataFrame = frame.SpawnWithLength(contentLength);
                        item.NorthwestCellCoords = P2UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                        item.NorthwestCellSize = P2UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                        return new ParseResult((int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.Data = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                        return new ParseResult((int)WorldDefaultLevelData_FieldIndex.Data, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize) return ParseResult.Stop;
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                var dataFrame = frame.SpawnWithLength(contentLength);
                                item.NorthwestCellCoords = P2UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                                item.NorthwestCellSize = P2UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                                return new ParseResult((int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize, nextRecordType);
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.Data = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                                return new ParseResult((int)WorldDefaultLevelData_FieldIndex.Data, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class WorldDefaultLevelDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWorldDefaultLevelDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WorldDefaultLevelDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class WorldDefaultLevelDataBinaryOverlay :
        PluginBinaryOverlay,
        IWorldDefaultLevelDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldDefaultLevelData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => WorldDefaultLevelData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WorldDefaultLevelDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WorldDefaultLevelDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWorldDefaultLevelDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWorldDefaultLevelDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWorldDefaultLevelDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WorldDefaultLevelDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WorldDefaultLevelDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _WLEVLocation;
        public WorldDefaultLevelData.WLEVDataType WLEVDataTypeState { get; private set; }
        #region NorthwestCellCoords
        private int _NorthwestCellCoordsLocation => _WLEVLocation!.Value.Min;
        private bool _NorthwestCellCoords_IsSet => _WLEVLocation.HasValue;
        public P2UInt8 NorthwestCellCoords => _NorthwestCellCoords_IsSet ? P2UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(_NorthwestCellCoordsLocation, 2)) : default;
        #endregion
        #region NorthwestCellSize
        private int _NorthwestCellSizeLocation => _WLEVLocation!.Value.Min + 0x2;
        private bool _NorthwestCellSize_IsSet => _WLEVLocation.HasValue;
        public P2UInt8 NorthwestCellSize => _NorthwestCellSize_IsSet ? P2UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_data.Slice(_NorthwestCellSizeLocation, 2)) : default;
        #endregion
        #region Data
        private int? _DataLocation;
        private int? _DataLengthOverride;
        public ReadOnlyMemorySlice<Byte>? Data => PluginUtilityTranslation.ReadByteArrayWithOverflow(
            _data,
            _package.MetaData.Constants,
            _DataLocation,
            _DataLengthOverride);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WorldDefaultLevelDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWorldDefaultLevelDataGetter WorldDefaultLevelDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? translationParams = null)
        {
            var ret = new WorldDefaultLevelDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IWorldDefaultLevelDataGetter WorldDefaultLevelDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? translationParams = null)
        {
            return WorldDefaultLevelDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? translationParams = null)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WLEV:
                {
                    if (!lastParsed.ParsedIndex.HasValue)
                    {
                        if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize) return ParseResult.Stop;
                        _WLEVLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                        return new ParseResult((int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize)
                    {
                        _DataLocation = (stream.Position - offset);
                        _DataLengthOverride = lastParsed.LengthOverride;
                        if (lastParsed.LengthOverride.HasValue)
                        {
                            stream.Position += lastParsed.LengthOverride.Value;
                        }
                        return new ParseResult((int)WorldDefaultLevelData_FieldIndex.Data, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                                if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize) return ParseResult.Stop;
                                _WLEVLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                                return new ParseResult((int)WorldDefaultLevelData_FieldIndex.NorthwestCellSize, type);
                            case 1:
                                _DataLocation = (stream.Position - offset);
                                _DataLengthOverride = lastParsed.LengthOverride;
                                if (lastParsed.LengthOverride.HasValue)
                                {
                                    stream.Position += lastParsed.LengthOverride.Value;
                                }
                                return new ParseResult((int)WorldDefaultLevelData_FieldIndex.Data, type);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WorldDefaultLevelDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWorldDefaultLevelDataGetter rhs) return false;
            return ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWorldDefaultLevelDataGetter? obj)
        {
            return ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WorldDefaultLevelDataCommon)((IWorldDefaultLevelDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

