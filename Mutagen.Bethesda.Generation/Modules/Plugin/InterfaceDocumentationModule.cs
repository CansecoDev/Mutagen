using Loqui;
using Loqui.Generation;
using Mutagen.Bethesda.Generation.Modules.Aspects;
using Noggog;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace Mutagen.Bethesda.Generation.Modules.Plugin
{
    public class InterfaceDocumentationModule : GenerationModule
    {
        public override async Task FinalizeGeneration(ProtocolGeneration proto)
        {
            FileGeneration fg = new FileGeneration();

            if (LinkInterfaceModule.ObjectMappings.TryGetValue(proto.Protocol, out var linkInterfaces))
            {
                Dictionary<string, List<string>> reverse = new Dictionary<string, List<string>>();

                fg.AppendLine("# Link Interfaces");
                fg.AppendLine("Link Interfaces are used by FormLinks to point to several record types at once.  For example, a Container record might be able to contain Armors, Weapons, Ingredients, etc.");
                fg.AppendLine();
                fg.AppendLine("An interface would be defined such as 'IItem', which all Armor, Weapon, Ingredients would all implement.");
                fg.AppendLine();
                fg.AppendLine("A `FormLink<IItem>` could then point to all those record types by pointing to the interface instead.");
                fg.AppendLine($"## Interfaces to Concrete Classes");
                foreach (var interf in linkInterfaces.OrderBy(x => x.Key))
                {
                    fg.AppendLine($"### {interf.Key}");
                    foreach (var obj in interf.Value.OrderBy(o => o.Name))
                    {
                        fg.AppendLine($"- {obj.Name}");
                        reverse.GetOrAdd(obj.Name).Add(interf.Key);
                    }
                }

                fg.AppendLine($"## Concrete Classes to Interfaces");
                foreach (var obj in reverse.OrderBy(x => x.Key))
                {
                    fg.AppendLine($"### {obj.Key}");
                    foreach (var interf in obj.Value.OrderBy(x => x))
                    {
                        fg.AppendLine($"- {interf}");
                    }
                }
            }

            var path = Path.Combine(proto.DefFileLocation.FullName, $"../Documentation/LinkInterfaceDocumentation{Loqui.Generation.Constants.AutogeneratedMarkerString}.md");
            if (fg.Count > 0)
            {
                fg.Generate(path);
            }


            fg = new FileGeneration();

            if (AspectInterfaceModule.ObjectMappings.TryGetValue(proto.Protocol, out var aspectInterfaces))
            {
                Dictionary<string, List<string>> reverse = new Dictionary<string, List<string>>();

                fg.AppendLine("# Aspect Interfaces");
                fg.AppendLine("Aspect Interfaces expose common aspects of records.  For example, `INamed` are implemented by all records that have a `Name`.");
                fg.AppendLine();
                fg.AppendLine("Functions can then be written that take in `INamed`, allowing any record that has a name to be passed in.");
                fg.AppendLine($"## Interfaces to Concrete Classes");
                foreach (var interf in aspectInterfaces.OrderBy(x => x.Key.Name))
                {
                    fg.AppendLine($"### {interf.Key.Name}");
                    foreach (var obj in interf.Value.OrderBy(x => x.Name))
                    {
                        fg.AppendLine($"- {obj.Name}");
                        reverse.GetOrAdd(obj.Name).Add(interf.Key.Name);
                    }
                }

                fg.AppendLine($"## Concrete Classes to Interfaces");
                foreach (var obj in reverse.OrderBy(x => x.Key))
                {
                    fg.AppendLine($"### {obj.Key}");
                    foreach (var interf in obj.Value.OrderBy(x => x))
                    {
                        fg.AppendLine($"- {interf}");
                    }
                }
            }

            path = Path.Combine(proto.DefFileLocation.FullName, $"../Documentation/AspectInterfaceDocumentation{Loqui.Generation.Constants.AutogeneratedMarkerString}.md");
            if (fg.Count > 0)
            {
                fg.Generate(path);
            }
        }
    }
}
