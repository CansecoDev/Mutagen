/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Condition :
        LoquiNotifyingObject,
        ICondition,
        ILoquiObjectSetter<Condition>,
        IEquatable<Condition>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Condition_Registration.Instance;
        public static Condition_Registration Registration => Condition_Registration.Instance;
        protected object CommonInstance => ConditionCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public Condition()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CompareOperator
        private CompareOperator _CompareOperator;
        public CompareOperator CompareOperator
        {
            get => this._CompareOperator;
            set => this.RaiseAndSetIfChanged(ref this._CompareOperator, value, nameof(CompareOperator));
        }
        #endregion
        #region Flags
        private Condition.Flag _Flags;
        public Condition.Flag Flags
        {
            get => this._Flags;
            set => this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
        }
        #endregion
        #region Fluff
        private Byte[] _Fluff = new byte[3];
        public Byte[] Fluff
        {
            get => _Fluff;
            set
            {
                this._Fluff = value;
                if (value == null)
                {
                    this._Fluff = new byte[3];
                }
            }
        }
        ReadOnlySpan<Byte> IConditionGetter.Fluff => this.Fluff;
        #endregion
        #region ComparisonValue
        private Single _ComparisonValue;
        public Single ComparisonValue
        {
            get => this._ComparisonValue;
            set => this.RaiseAndSetIfChanged(ref this._ComparisonValue, value, nameof(ComparisonValue));
        }
        #endregion
        #region Function
        private Function _Function;
        public Function Function
        {
            get => this._Function;
            set => this.RaiseAndSetIfChanged(ref this._Function, value, nameof(Function));
        }
        #endregion
        #region FirstParameter
        private Int32 _FirstParameter;
        public Int32 FirstParameter
        {
            get => this._FirstParameter;
            set => this.RaiseAndSetIfChanged(ref this._FirstParameter, value, nameof(FirstParameter));
        }
        #endregion
        #region SecondParameter
        private Int32 _SecondParameter;
        public Int32 SecondParameter
        {
            get => this._SecondParameter;
            set => this.RaiseAndSetIfChanged(ref this._SecondParameter, value, nameof(SecondParameter));
        }
        #endregion
        #region ThirdParameter
        private Int32 _ThirdParameter;
        public Int32 ThirdParameter
        {
            get => this._ThirdParameter;
            set => this.RaiseAndSetIfChanged(ref this._ThirdParameter, value, nameof(ThirdParameter));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IConditionGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ConditionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IConditionGetter rhs)) return false;
            return ((ConditionCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(Condition obj)
        {
            return ((ConditionCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((ConditionCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => ConditionXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static Condition CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Condition_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Condition CreateFromXml(
            XElement node,
            out Condition_ErrorMask errorMask,
            bool doMasks = true,
            Condition_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Condition_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Condition CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Condition() : null;
                    break;
                default:
                    break;
            }
            var ret = new Condition();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ConditionXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Condition CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Condition_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Condition CreateFromXml(
            string path,
            out Condition_ErrorMask errorMask,
            Condition_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Condition CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Condition_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Condition CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Condition_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Condition CreateFromXml(
            Stream stream,
            out Condition_ErrorMask errorMask,
            Condition_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Condition CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Condition_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Condition_FieldIndex)index)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => ConditionBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static Condition CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Condition CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Condition_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Condition_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Condition CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var nextRecord = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var customLen);
            nextRecord = recordTypeConverter.ConvertToCustom(nextRecord);
            switch (nextRecord.TypeInt)
            {
                case 1413764163: // CTDT
                    return CustomRecordTypeTrigger(
                        frame: frame.SpawnWithLength(customLen + frame.MetaData.SubConstants.HeaderLength),
                        recordType: nextRecord,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                default:
                    break;
            }
            var ret = new Condition();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(Condition_Registration.CTDA_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            Condition item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ConditionBinaryCreateTranslation.FillBinaryInitialParserCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(3),
                item: out Byte[] FluffParse))
            {
                item.Fluff = FluffParse;
            }
            else
            {
                item.Fluff = default(Byte[]);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single ComparisonValueParse))
            {
                item.ComparisonValue = ComparisonValueParse;
            }
            else
            {
                item.ComparisonValue = default(Single);
            }
            if (EnumBinaryTranslation<Function>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out Function FunctionParse))
            {
                item.Function = FunctionParse;
            }
            else
            {
                item.Function = default(Function);
            }
            item.FirstParameter = frame.ReadInt32();
            item.SecondParameter = frame.ReadInt32();
            item.ThirdParameter = frame.ReadInt32();
        }

        #endregion

        public Condition Copy(
            Condition_CopyMask copyMask = null,
            Condition def = null)
        {
            return Condition.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Condition Copy(
            Condition item,
            Condition_CopyMask copyMask = null,
            Condition def = null)
        {
            Condition ret;
            if (item.GetType().Equals(typeof(Condition)))
            {
                ret = new Condition();
            }
            else
            {
                ret = (Condition)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Condition Copy_ToLoqui(
            Condition item,
            Condition_CopyMask copyMask = null,
            Condition def = null)
        {
            Condition ret;
            if (item.GetType().Equals(typeof(Condition)))
            {
                ret = new Condition() as Condition;
            }
            else
            {
                ret = (Condition)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(Condition rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Condition rhs,
            Condition_CopyMask copyMask,
            Condition def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Condition rhs,
            out Condition_ErrorMask errorMask,
            Condition_CopyMask copyMask = null,
            Condition def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ConditionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Condition_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Condition rhs,
            ErrorMaskBuilder errorMask,
            Condition_CopyMask copyMask = null,
            Condition def = null)
        {
            ConditionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    this.CompareOperator = (CompareOperator)obj;
                    break;
                case Condition_FieldIndex.Flags:
                    this.Flags = (Condition.Flag)obj;
                    break;
                case Condition_FieldIndex.Fluff:
                    this.Fluff = (Byte[])obj;
                    break;
                case Condition_FieldIndex.ComparisonValue:
                    this.ComparisonValue = (Single)obj;
                    break;
                case Condition_FieldIndex.Function:
                    this.Function = (Function)obj;
                    break;
                case Condition_FieldIndex.FirstParameter:
                    this.FirstParameter = (Int32)obj;
                    break;
                case Condition_FieldIndex.SecondParameter:
                    this.SecondParameter = (Int32)obj;
                    break;
                case Condition_FieldIndex.ThirdParameter:
                    this.ThirdParameter = (Int32)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            ConditionCommon.Instance.Clear(this);
        }

        public static Condition Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Condition();
            foreach (var pair in fields)
            {
                CopyInInternal_Condition(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Condition(Condition obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Condition_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    obj.CompareOperator = (CompareOperator)pair.Value;
                    break;
                case Condition_FieldIndex.Flags:
                    obj.Flags = (Condition.Flag)pair.Value;
                    break;
                case Condition_FieldIndex.Fluff:
                    obj.Fluff = (Byte[])pair.Value;
                    break;
                case Condition_FieldIndex.ComparisonValue:
                    obj.ComparisonValue = (Single)pair.Value;
                    break;
                case Condition_FieldIndex.Function:
                    obj.Function = (Function)pair.Value;
                    break;
                case Condition_FieldIndex.FirstParameter:
                    obj.FirstParameter = (Int32)pair.Value;
                    break;
                case Condition_FieldIndex.SecondParameter:
                    obj.SecondParameter = (Int32)pair.Value;
                    break;
                case Condition_FieldIndex.ThirdParameter:
                    obj.ThirdParameter = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ICondition :
        IConditionGetter,
        ILoquiObjectSetter<ICondition>
    {
        new CompareOperator CompareOperator { get; set; }

        new Condition.Flag Flags { get; set; }

        new Byte[] Fluff { get; set; }

        new Single ComparisonValue { get; set; }

        new Function Function { get; set; }

        new Int32 FirstParameter { get; set; }

        new Int32 SecondParameter { get; set; }

        new Int32 ThirdParameter { get; set; }

        void CopyFieldsFrom(
            Condition rhs,
            ErrorMaskBuilder errorMask = null,
            Condition_CopyMask copyMask = null,
            Condition def = null);
    }

    public partial interface IConditionGetter :
        ILoquiObject,
        ILoquiObject<IConditionGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region CompareOperator
        CompareOperator CompareOperator { get; }

        #endregion
        #region Flags
        Condition.Flag Flags { get; }

        #endregion
        #region Fluff
        ReadOnlySpan<Byte> Fluff { get; }

        #endregion
        #region ComparisonValue
        Single ComparisonValue { get; }

        #endregion
        #region Function
        Function Function { get; }

        #endregion
        #region FirstParameter
        Int32 FirstParameter { get; }

        #endregion
        #region SecondParameter
        Int32 SecondParameter { get; }

        #endregion
        #region ThirdParameter
        Int32 ThirdParameter { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ConditionMixIn
    {
        public static void Clear(this ICondition item)
        {
            ((ConditionCommon)item.CommonInstance).Clear(item: item);
        }

        public static Condition_Mask<bool> GetEqualsMask(
            this IConditionGetter item,
            IConditionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ConditionCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IConditionGetter item,
            string name = null,
            Condition_Mask<bool> printMask = null)
        {
            return ((ConditionCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IConditionGetter item,
            FileGeneration fg,
            string name = null,
            Condition_Mask<bool> printMask = null)
        {
            ((ConditionCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IConditionGetter item,
            Condition_Mask<bool?> checkMask)
        {
            return ((ConditionCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Condition_Mask<bool> GetHasBeenSetMask(this IConditionGetter item)
        {
            var ret = new Condition_Mask<bool>();
            ((ConditionCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IConditionGetter item,
            IConditionGetter rhs)
        {
            return ((ConditionCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Condition_FieldIndex
    {
        CompareOperator = 0,
        Flags = 1,
        Fluff = 2,
        ComparisonValue = 3,
        Function = 4,
        FirstParameter = 5,
        SecondParameter = 6,
        ThirdParameter = 7,
    }
    #endregion

    #region Registration
    public class Condition_Registration : ILoquiRegistration
    {
        public static readonly Condition_Registration Instance = new Condition_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 151,
            version: 0);

        public const string GUID = "b992280d-2cc5-46ce-b935-e1cfd5bdd34f";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Condition_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Condition_ErrorMask);

        public static readonly Type ClassType = typeof(Condition);

        public static readonly Type GetterType = typeof(IConditionGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICondition);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(ConditionCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Condition";

        public const string Name = "Condition";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "COMPAREOPERATOR":
                    return (ushort)Condition_FieldIndex.CompareOperator;
                case "FLAGS":
                    return (ushort)Condition_FieldIndex.Flags;
                case "FLUFF":
                    return (ushort)Condition_FieldIndex.Fluff;
                case "COMPARISONVALUE":
                    return (ushort)Condition_FieldIndex.ComparisonValue;
                case "FUNCTION":
                    return (ushort)Condition_FieldIndex.Function;
                case "FIRSTPARAMETER":
                    return (ushort)Condition_FieldIndex.FirstParameter;
                case "SECONDPARAMETER":
                    return (ushort)Condition_FieldIndex.SecondParameter;
                case "THIRDPARAMETER":
                    return (ushort)Condition_FieldIndex.ThirdParameter;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    return "CompareOperator";
                case Condition_FieldIndex.Flags:
                    return "Flags";
                case Condition_FieldIndex.Fluff:
                    return "Fluff";
                case Condition_FieldIndex.ComparisonValue:
                    return "ComparisonValue";
                case Condition_FieldIndex.Function:
                    return "Function";
                case Condition_FieldIndex.FirstParameter:
                    return "FirstParameter";
                case Condition_FieldIndex.SecondParameter:
                    return "SecondParameter";
                case Condition_FieldIndex.ThirdParameter:
                    return "ThirdParameter";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                case Condition_FieldIndex.Flags:
                case Condition_FieldIndex.Fluff:
                case Condition_FieldIndex.ComparisonValue:
                case Condition_FieldIndex.Function:
                case Condition_FieldIndex.FirstParameter:
                case Condition_FieldIndex.SecondParameter:
                case Condition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    return typeof(CompareOperator);
                case Condition_FieldIndex.Flags:
                    return typeof(Condition.Flag);
                case Condition_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case Condition_FieldIndex.ComparisonValue:
                    return typeof(Single);
                case Condition_FieldIndex.Function:
                    return typeof(Function);
                case Condition_FieldIndex.FirstParameter:
                    return typeof(Int32);
                case Condition_FieldIndex.SecondParameter:
                    return typeof(Int32);
                case Condition_FieldIndex.ThirdParameter:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ConditionXmlWriteTranslation);
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        CTDA_HEADER,
                        CTDT_HEADER
                    })
            );
        });
        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ConditionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ConditionCommon
    {
        public static readonly ConditionCommon Instance = new ConditionCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Condition item,
            Condition rhs,
            Condition def,
            ErrorMaskBuilder errorMask,
            Condition_CopyMask copyMask)
        {
            if (copyMask?.CompareOperator ?? true)
            {
                errorMask?.PushIndex((int)Condition_FieldIndex.CompareOperator);
                try
                {
                    item.CompareOperator = rhs.CompareOperator;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Condition_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                errorMask?.PushIndex((int)Condition_FieldIndex.Fluff);
                try
                {
                    item.Fluff = rhs.Fluff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ComparisonValue ?? true)
            {
                errorMask?.PushIndex((int)Condition_FieldIndex.ComparisonValue);
                try
                {
                    item.ComparisonValue = rhs.ComparisonValue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Function ?? true)
            {
                errorMask?.PushIndex((int)Condition_FieldIndex.Function);
                try
                {
                    item.Function = rhs.Function;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FirstParameter ?? true)
            {
                errorMask?.PushIndex((int)Condition_FieldIndex.FirstParameter);
                try
                {
                    item.FirstParameter = rhs.FirstParameter;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SecondParameter ?? true)
            {
                errorMask?.PushIndex((int)Condition_FieldIndex.SecondParameter);
                try
                {
                    item.SecondParameter = rhs.SecondParameter;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ThirdParameter ?? true)
            {
                errorMask?.PushIndex((int)Condition_FieldIndex.ThirdParameter);
                try
                {
                    item.ThirdParameter = rhs.ThirdParameter;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ICondition item)
        {
            ClearPartial();
            item.CompareOperator = default(CompareOperator);
            item.Flags = default(Condition.Flag);
            item.Fluff = default(Byte[]);
            item.ComparisonValue = default(Single);
            item.Function = default(Function);
            item.FirstParameter = default(Int32);
            item.SecondParameter = default(Int32);
            item.ThirdParameter = default(Int32);
        }

        public Condition_Mask<bool> GetEqualsMask(
            IConditionGetter item,
            IConditionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Condition_Mask<bool>();
            ((ConditionCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IConditionGetter item,
            IConditionGetter rhs,
            Condition_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.CompareOperator = item.CompareOperator == rhs.CompareOperator;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
            ret.ComparisonValue = item.ComparisonValue.EqualsWithin(rhs.ComparisonValue);
            ret.Function = item.Function == rhs.Function;
            ret.FirstParameter = item.FirstParameter == rhs.FirstParameter;
            ret.SecondParameter = item.SecondParameter == rhs.SecondParameter;
            ret.ThirdParameter = item.ThirdParameter == rhs.ThirdParameter;
        }

        public string ToString(
            IConditionGetter item,
            string name = null,
            Condition_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IConditionGetter item,
            FileGeneration fg,
            string name = null,
            Condition_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Condition =>");
            }
            else
            {
                fg.AppendLine($"{name} (Condition) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IConditionGetter item,
            FileGeneration fg,
            Condition_Mask<bool> printMask = null)
        {
            if (printMask?.CompareOperator ?? true)
            {
                fg.AppendLine($"CompareOperator => {item.CompareOperator}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
            if (printMask?.ComparisonValue ?? true)
            {
                fg.AppendLine($"ComparisonValue => {item.ComparisonValue}");
            }
            if (printMask?.Function ?? true)
            {
                fg.AppendLine($"Function => {item.Function}");
            }
            if (printMask?.FirstParameter ?? true)
            {
                fg.AppendLine($"FirstParameter => {item.FirstParameter}");
            }
            if (printMask?.SecondParameter ?? true)
            {
                fg.AppendLine($"SecondParameter => {item.SecondParameter}");
            }
            if (printMask?.ThirdParameter ?? true)
            {
                fg.AppendLine($"ThirdParameter => {item.ThirdParameter}");
            }
        }

        public bool HasBeenSet(
            IConditionGetter item,
            Condition_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IConditionGetter item,
            Condition_Mask<bool> mask)
        {
            mask.CompareOperator = true;
            mask.Flags = true;
            mask.Fluff = true;
            mask.ComparisonValue = true;
            mask.Function = true;
            mask.FirstParameter = true;
            mask.SecondParameter = true;
            mask.ThirdParameter = true;
        }

        #region Equals and Hash
        public virtual bool Equals(
            IConditionGetter lhs,
            IConditionGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.CompareOperator != rhs.CompareOperator) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            if (!lhs.ComparisonValue.EqualsWithin(rhs.ComparisonValue)) return false;
            if (lhs.Function != rhs.Function) return false;
            if (lhs.FirstParameter != rhs.FirstParameter) return false;
            if (lhs.SecondParameter != rhs.SecondParameter) return false;
            if (lhs.ThirdParameter != rhs.ThirdParameter) return false;
            return true;
        }

        public virtual int GetHashCode(IConditionGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.CompareOperator).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ComparisonValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Function).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FirstParameter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SecondParameter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ThirdParameter).CombineHashCode(ret);
            return ret;
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ConditionXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ConditionXmlWriteTranslation Instance = new ConditionXmlWriteTranslation();

        public static void WriteToNodeXml(
            IConditionGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.CompareOperator) ?? true))
            {
                EnumXmlTranslation<CompareOperator>.Instance.Write(
                    node: node,
                    name: nameof(item.CompareOperator),
                    item: item.CompareOperator,
                    fieldIndex: (int)Condition_FieldIndex.CompareOperator,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Condition.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Condition_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)Condition_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.ComparisonValue) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ComparisonValue),
                    item: item.ComparisonValue,
                    fieldIndex: (int)Condition_FieldIndex.ComparisonValue,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.Function) ?? true))
            {
                EnumXmlTranslation<Function>.Instance.Write(
                    node: node,
                    name: nameof(item.Function),
                    item: item.Function,
                    fieldIndex: (int)Condition_FieldIndex.Function,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.FirstParameter) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FirstParameter),
                    item: item.FirstParameter,
                    fieldIndex: (int)Condition_FieldIndex.FirstParameter,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.SecondParameter) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SecondParameter),
                    item: item.SecondParameter,
                    fieldIndex: (int)Condition_FieldIndex.SecondParameter,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Condition_FieldIndex.ThirdParameter) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ThirdParameter),
                    item: item.ThirdParameter,
                    fieldIndex: (int)Condition_FieldIndex.ThirdParameter,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IConditionGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Condition");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Condition");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IConditionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IConditionGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IConditionGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ConditionXmlCreateTranslation
    {
        public readonly static ConditionXmlCreateTranslation Instance = new ConditionXmlCreateTranslation();

        public static void FillPublicXml(
            ICondition item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ConditionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICondition item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "CompareOperator":
                    try
                    {
                        errorMask?.PushIndex((int)Condition_FieldIndex.CompareOperator);
                        if (EnumXmlTranslation<CompareOperator>.Instance.Parse(
                            node: node,
                            item: out CompareOperator CompareOperatorParse,
                            errorMask: errorMask))
                        {
                            item.CompareOperator = CompareOperatorParse;
                        }
                        else
                        {
                            item.CompareOperator = default(CompareOperator);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Condition_FieldIndex.Flags);
                        if (EnumXmlTranslation<Condition.Flag>.Instance.Parse(
                            node: node,
                            item: out Condition.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Condition.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)Condition_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ComparisonValue":
                    try
                    {
                        errorMask?.PushIndex((int)Condition_FieldIndex.ComparisonValue);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ComparisonValueParse,
                            errorMask: errorMask))
                        {
                            item.ComparisonValue = ComparisonValueParse;
                        }
                        else
                        {
                            item.ComparisonValue = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Function":
                    try
                    {
                        errorMask?.PushIndex((int)Condition_FieldIndex.Function);
                        if (EnumXmlTranslation<Function>.Instance.Parse(
                            node: node,
                            item: out Function FunctionParse,
                            errorMask: errorMask))
                        {
                            item.Function = FunctionParse;
                        }
                        else
                        {
                            item.Function = default(Function);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FirstParameter":
                    try
                    {
                        errorMask?.PushIndex((int)Condition_FieldIndex.FirstParameter);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 FirstParameterParse,
                            errorMask: errorMask))
                        {
                            item.FirstParameter = FirstParameterParse;
                        }
                        else
                        {
                            item.FirstParameter = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondParameter":
                    try
                    {
                        errorMask?.PushIndex((int)Condition_FieldIndex.SecondParameter);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 SecondParameterParse,
                            errorMask: errorMask))
                        {
                            item.SecondParameter = SecondParameterParse;
                        }
                        else
                        {
                            item.SecondParameter = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThirdParameter":
                    try
                    {
                        errorMask?.PushIndex((int)Condition_FieldIndex.ThirdParameter);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 ThirdParameterParse,
                            errorMask: errorMask))
                        {
                            item.ThirdParameter = ThirdParameterParse;
                        }
                        else
                        {
                            item.ThirdParameter = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class ConditionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IConditionGetter item,
            XElement node,
            out Condition_ErrorMask errorMask,
            bool doMasks = true,
            Condition_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Condition_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            string path,
            out Condition_ErrorMask errorMask,
            Condition_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            Stream stream,
            out Condition_ErrorMask errorMask,
            Condition_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            XElement node,
            string name = null,
            Condition_TranslationMask translationMask = null)
        {
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IConditionGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IConditionGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ConditionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Condition_Mask<T> : IMask<T>, IEquatable<Condition_Mask<T>>
    {
        #region Ctors
        public Condition_Mask()
        {
        }

        public Condition_Mask(T initialValue)
        {
            this.CompareOperator = initialValue;
            this.Flags = initialValue;
            this.Fluff = initialValue;
            this.ComparisonValue = initialValue;
            this.Function = initialValue;
            this.FirstParameter = initialValue;
            this.SecondParameter = initialValue;
            this.ThirdParameter = initialValue;
        }
        #endregion

        #region Members
        public T CompareOperator;
        public T Flags;
        public T Fluff;
        public T ComparisonValue;
        public T Function;
        public T FirstParameter;
        public T SecondParameter;
        public T ThirdParameter;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Condition_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Condition_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.CompareOperator, rhs.CompareOperator)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.ComparisonValue, rhs.ComparisonValue)) return false;
            if (!object.Equals(this.Function, rhs.Function)) return false;
            if (!object.Equals(this.FirstParameter, rhs.FirstParameter)) return false;
            if (!object.Equals(this.SecondParameter, rhs.SecondParameter)) return false;
            if (!object.Equals(this.ThirdParameter, rhs.ThirdParameter)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.CompareOperator?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.ComparisonValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Function?.GetHashCode());
            ret = ret.CombineHashCode(this.FirstParameter?.GetHashCode());
            ret = ret.CombineHashCode(this.SecondParameter?.GetHashCode());
            ret = ret.CombineHashCode(this.ThirdParameter?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.CompareOperator)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Fluff)) return false;
            if (!eval(this.ComparisonValue)) return false;
            if (!eval(this.Function)) return false;
            if (!eval(this.FirstParameter)) return false;
            if (!eval(this.SecondParameter)) return false;
            if (!eval(this.ThirdParameter)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Condition_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Condition_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Condition_Mask<R> obj, Func<T, R> eval)
        {
            obj.CompareOperator = eval(this.CompareOperator);
            obj.Flags = eval(this.Flags);
            obj.Fluff = eval(this.Fluff);
            obj.ComparisonValue = eval(this.ComparisonValue);
            obj.Function = eval(this.Function);
            obj.FirstParameter = eval(this.FirstParameter);
            obj.SecondParameter = eval(this.SecondParameter);
            obj.ThirdParameter = eval(this.ThirdParameter);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Condition_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Condition_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Condition_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.CompareOperator ?? true)
                {
                    fg.AppendLine($"CompareOperator => {CompareOperator}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.ComparisonValue ?? true)
                {
                    fg.AppendLine($"ComparisonValue => {ComparisonValue}");
                }
                if (printMask?.Function ?? true)
                {
                    fg.AppendLine($"Function => {Function}");
                }
                if (printMask?.FirstParameter ?? true)
                {
                    fg.AppendLine($"FirstParameter => {FirstParameter}");
                }
                if (printMask?.SecondParameter ?? true)
                {
                    fg.AppendLine($"SecondParameter => {SecondParameter}");
                }
                if (printMask?.ThirdParameter ?? true)
                {
                    fg.AppendLine($"ThirdParameter => {ThirdParameter}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Condition_ErrorMask : IErrorMask, IErrorMask<Condition_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception CompareOperator;
        public Exception Flags;
        public Exception Fluff;
        public Exception ComparisonValue;
        public Exception Function;
        public Exception FirstParameter;
        public Exception SecondParameter;
        public Exception ThirdParameter;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    return CompareOperator;
                case Condition_FieldIndex.Flags:
                    return Flags;
                case Condition_FieldIndex.Fluff:
                    return Fluff;
                case Condition_FieldIndex.ComparisonValue:
                    return ComparisonValue;
                case Condition_FieldIndex.Function:
                    return Function;
                case Condition_FieldIndex.FirstParameter:
                    return FirstParameter;
                case Condition_FieldIndex.SecondParameter:
                    return SecondParameter;
                case Condition_FieldIndex.ThirdParameter:
                    return ThirdParameter;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    this.CompareOperator = ex;
                    break;
                case Condition_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Condition_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case Condition_FieldIndex.ComparisonValue:
                    this.ComparisonValue = ex;
                    break;
                case Condition_FieldIndex.Function:
                    this.Function = ex;
                    break;
                case Condition_FieldIndex.FirstParameter:
                    this.FirstParameter = ex;
                    break;
                case Condition_FieldIndex.SecondParameter:
                    this.SecondParameter = ex;
                    break;
                case Condition_FieldIndex.ThirdParameter:
                    this.ThirdParameter = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Condition_FieldIndex enu = (Condition_FieldIndex)index;
            switch (enu)
            {
                case Condition_FieldIndex.CompareOperator:
                    this.CompareOperator = (Exception)obj;
                    break;
                case Condition_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Condition_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case Condition_FieldIndex.ComparisonValue:
                    this.ComparisonValue = (Exception)obj;
                    break;
                case Condition_FieldIndex.Function:
                    this.Function = (Exception)obj;
                    break;
                case Condition_FieldIndex.FirstParameter:
                    this.FirstParameter = (Exception)obj;
                    break;
                case Condition_FieldIndex.SecondParameter:
                    this.SecondParameter = (Exception)obj;
                    break;
                case Condition_FieldIndex.ThirdParameter:
                    this.ThirdParameter = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (CompareOperator != null) return true;
            if (Flags != null) return true;
            if (Fluff != null) return true;
            if (ComparisonValue != null) return true;
            if (Function != null) return true;
            if (FirstParameter != null) return true;
            if (SecondParameter != null) return true;
            if (ThirdParameter != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Condition_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"CompareOperator => {CompareOperator}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"ComparisonValue => {ComparisonValue}");
            fg.AppendLine($"Function => {Function}");
            fg.AppendLine($"FirstParameter => {FirstParameter}");
            fg.AppendLine($"SecondParameter => {SecondParameter}");
            fg.AppendLine($"ThirdParameter => {ThirdParameter}");
        }
        #endregion

        #region Combine
        public Condition_ErrorMask Combine(Condition_ErrorMask rhs)
        {
            var ret = new Condition_ErrorMask();
            ret.CompareOperator = this.CompareOperator.Combine(rhs.CompareOperator);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.ComparisonValue = this.ComparisonValue.Combine(rhs.ComparisonValue);
            ret.Function = this.Function.Combine(rhs.Function);
            ret.FirstParameter = this.FirstParameter.Combine(rhs.FirstParameter);
            ret.SecondParameter = this.SecondParameter.Combine(rhs.SecondParameter);
            ret.ThirdParameter = this.ThirdParameter.Combine(rhs.ThirdParameter);
            return ret;
        }
        public static Condition_ErrorMask Combine(Condition_ErrorMask lhs, Condition_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Condition_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Condition_ErrorMask();
        }
        #endregion

    }
    public class Condition_CopyMask
    {
        public Condition_CopyMask()
        {
        }

        public Condition_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.CompareOperator = defaultOn;
            this.Flags = defaultOn;
            this.Fluff = defaultOn;
            this.ComparisonValue = defaultOn;
            this.Function = defaultOn;
            this.FirstParameter = defaultOn;
            this.SecondParameter = defaultOn;
            this.ThirdParameter = defaultOn;
        }

        #region Members
        public bool CompareOperator;
        public bool Flags;
        public bool Fluff;
        public bool ComparisonValue;
        public bool Function;
        public bool FirstParameter;
        public bool SecondParameter;
        public bool ThirdParameter;
        #endregion

    }

    public class Condition_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool CompareOperator;
        public bool Flags;
        public bool Fluff;
        public bool ComparisonValue;
        public bool Function;
        public bool FirstParameter;
        public bool SecondParameter;
        public bool ThirdParameter;
        #endregion

        #region Ctors
        public Condition_TranslationMask()
        {
        }

        public Condition_TranslationMask(bool defaultOn)
        {
            this.CompareOperator = defaultOn;
            this.Flags = defaultOn;
            this.Fluff = defaultOn;
            this.ComparisonValue = defaultOn;
            this.Function = defaultOn;
            this.FirstParameter = defaultOn;
            this.SecondParameter = defaultOn;
            this.ThirdParameter = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((CompareOperator, null));
            ret.Add((Flags, null));
            ret.Add((Fluff, null));
            ret.Add((ComparisonValue, null));
            ret.Add((Function, null));
            ret.Add((FirstParameter, null));
            ret.Add((SecondParameter, null));
            ret.Add((ThirdParameter, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ConditionBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ConditionBinaryWriteTranslation Instance = new ConditionBinaryWriteTranslation();

        static partial void WriteBinaryInitialParserCustom(
            MutagenWriter writer,
            IConditionGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryInitialParser(
            MutagenWriter writer,
            IConditionGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryInitialParserCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IConditionGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            ConditionBinaryWriteTranslation.WriteBinaryInitialParser(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ComparisonValue);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Function>.Instance.Write(
                writer,
                item.Function,
                length: 4);
            writer.Write(item.FirstParameter);
            writer.Write(item.SecondParameter);
            writer.Write(item.ThirdParameter);
        }

        public void Write(
            MutagenWriter writer,
            IConditionGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Condition_Registration.CTDA_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IConditionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ConditionBinaryCreateTranslation
    {
        public readonly static ConditionBinaryCreateTranslation Instance = new ConditionBinaryCreateTranslation();

        static partial void FillBinaryInitialParserCustom(
            MutagenFrame frame,
            Condition item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryInitialParserCustomPublic(
            MutagenFrame frame,
            Condition item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryInitialParserCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class ConditionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IConditionGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Condition_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ConditionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Condition_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IConditionGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ConditionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IConditionGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ConditionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    public partial class ConditionBinaryWrapper : IConditionGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Condition_Registration.Instance;
        public static Condition_Registration Registration => Condition_Registration.Instance;
        protected object CommonInstance => ConditionCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IConditionGetter)rhs, include);

        protected object XmlWriteTranslator => ConditionXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        protected object BinaryWriteTranslator => ConditionBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        protected ReadOnlyMemorySlice<byte> _data;
        protected BinaryWrapperFactoryPackage _package;

        #region InitialParser
        partial void InitialParserCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        public ReadOnlySpan<Byte> Fluff => _data.Span.Slice(1, 3).ToArray();
        public Single ComparisonValue => SpanExt.GetFloat(_data.Span.Slice(4, 4));
        public Function Function => (Function)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(8, 4));
        public Int32 FirstParameter => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(12, 4));
        public Int32 SecondParameter => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(16, 4));
        public Int32 ThirdParameter => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(20, 4));
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected ConditionBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
        {
            this._data = bytes;
            this._package = package;
        }

        public static ConditionBinaryWrapper ConditionFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ConditionBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x18 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(stream, offset);
            return ret;
        }

    }

    #endregion

    #endregion

}
