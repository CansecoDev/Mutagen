/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Loqui.Internal;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Effect : 
        IEffect,
        ILoquiObject<Effect>,
        ILoquiObjectSetter,
        IEquatable<Effect>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Effect_Registration.Instance;
        public static Effect_Registration Registration => Effect_Registration.Instance;

        #region Ctor
        public Effect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MagicEffect
        public EDIDLink<MagicEffect> MagicEffect_Property { get; } = new EDIDLink<MagicEffect>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MagicEffect MagicEffect { get => MagicEffect_Property.Item; set => MagicEffect_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EDIDLink<MagicEffect> IEffectGetter.MagicEffect_Property => this.MagicEffect_Property;
        #endregion
        #region Magnitude
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt32> _Magnitude = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Magnitude_Property => _Magnitude;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Magnitude
        {
            get => this._Magnitude.Item;
            set => this._Magnitude.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IEffect.Magnitude_Property => this.Magnitude_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IEffectGetter.Magnitude_Property => this.Magnitude_Property;
        #endregion
        #region Area
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt32> _Area = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Area_Property => _Area;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Area
        {
            get => this._Area.Item;
            set => this._Area.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IEffect.Area_Property => this.Area_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IEffectGetter.Area_Property => this.Area_Property;
        #endregion
        #region Duration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt32> _Duration = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Duration_Property => _Duration;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Duration
        {
            get => this._Duration.Item;
            set => this._Duration.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IEffect.Duration_Property => this.Duration_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IEffectGetter.Duration_Property => this.Duration_Property;
        #endregion
        #region Type
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Effect.EffectType> _Type = NotifyingItem.Factory<Effect.EffectType>();
        public INotifyingItem<Effect.EffectType> Type_Property => _Type;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Effect.EffectType Type
        {
            get => this._Type.Item;
            set => this._Type.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Effect.EffectType> IEffect.Type_Property => this.Type_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Effect.EffectType> IEffectGetter.Type_Property => this.Type_Property;
        #endregion
        #region ActorValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<ActorValueExtended> _ActorValue = NotifyingItem.Factory<ActorValueExtended>();
        public INotifyingItem<ActorValueExtended> ActorValue_Property => _ActorValue;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ActorValueExtended ActorValue
        {
            get => this._ActorValue.Item;
            set => this._ActorValue.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<ActorValueExtended> IEffect.ActorValue_Property => this.ActorValue_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<ActorValueExtended> IEffectGetter.ActorValue_Property => this.ActorValue_Property;
        #endregion
        #region ScriptEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<ScriptEffect> _ScriptEffect = new NotifyingSetItem<ScriptEffect>();
        public INotifyingSetItem<ScriptEffect> ScriptEffect_Property => this._ScriptEffect;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ScriptEffect IEffectGetter.ScriptEffect => this.ScriptEffect;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptEffect ScriptEffect { get => _ScriptEffect.Item; set => _ScriptEffect.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<ScriptEffect> IEffect.ScriptEffect_Property => this.ScriptEffect_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<ScriptEffect> IEffectGetter.ScriptEffect_Property => this.ScriptEffect_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => EffectCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => EffectCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => EffectCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            EffectCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<Effect>.GetEqualsMask(Effect rhs) => EffectCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IEffectGetter>.GetEqualsMask(IEffectGetter rhs) => EffectCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return EffectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Effect_Mask<bool> printMask = null)
        {
            return EffectCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            EffectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Effect_Mask<bool> GetHasBeenSetMask()
        {
            return EffectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Effect rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Effect rhs)
        {
            if (rhs == null) return false;
            if (!this.MagicEffect_Property.Equals(rhs.MagicEffect_Property)) return false;
            if (this.Magnitude != rhs.Magnitude) return false;
            if (this.Area != rhs.Area) return false;
            if (this.Duration != rhs.Duration) return false;
            if (this.Type != rhs.Type) return false;
            if (this.ActorValue != rhs.ActorValue) return false;
            if (ScriptEffect_Property.HasBeenSet != rhs.ScriptEffect_Property.HasBeenSet) return false;
            if (ScriptEffect_Property.HasBeenSet)
            {
                if (!object.Equals(this.ScriptEffect, rhs.ScriptEffect)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(MagicEffect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Magnitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Area).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Duration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ActorValue).CombineHashCode(ret);
            if (ScriptEffect_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ScriptEffect).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static Effect Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Effect Create_XML(
            XElement root,
            out Effect_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Effect Object, Effect_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Effect_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Effect_ErrorMask()) : default(Func<Effect_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Effect Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Effect Create_XML(
            string path,
            out Effect_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Effect Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Effect Create_XML(
            Stream stream,
            out Effect_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Effect, Effect_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Effect_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Effect, Effect_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Effect_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Effect_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Effect_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as Effect_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out Effect_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Effect_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            EffectCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Effect Create_XML_Internal(
            XElement root,
            Func<Effect_ErrorMask> errorMask)
        {
            var ret = new Effect();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Effect item,
            XElement root,
            string name,
            Func<Effect_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "MagicEffect":
                    item.MagicEffect_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                        errorMask: errorMask));
                    break;
                case "Magnitude":
                    item._Magnitude.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Effect_FieldIndex.Magnitude,
                        errorMask: errorMask));
                    break;
                case "Area":
                    item._Area.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Effect_FieldIndex.Area,
                        errorMask: errorMask));
                    break;
                case "Duration":
                    item._Duration.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Effect_FieldIndex.Duration,
                        errorMask: errorMask));
                    break;
                case "Type":
                    item._Type.SetIfSucceeded(EnumXmlTranslation<Effect.EffectType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Effect_FieldIndex.Type,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "ActorValue":
                    item._ActorValue.SetIfSucceeded(EnumXmlTranslation<ActorValueExtended>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Effect_FieldIndex.ActorValue,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "ScriptEffect":
                    item._ScriptEffect.SetIfSucceeded(LoquiXmlTranslation<ScriptEffect, ScriptEffect_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Effect_FieldIndex.ScriptEffect,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Effect_Registration.TRIGGERING_RECORD_TYPE;
        static partial void SpecialParse_EffectInitial(
            Effect item,
            MutagenFrame frame,
            Func<Effect_ErrorMask> errorMask);
        static partial void SpecialWrite_EffectInitial(
            IEffectGetter item,
            MutagenWriter writer,
            Func<Effect_ErrorMask> errorMask);
        internal static void SpecialWrite_EffectInitial_Internal(
            IEffectGetter item,
            MutagenWriter writer,
            Func<Effect_ErrorMask> errorMask)
        {
            SpecialWrite_EffectInitial(
                item: item,
                writer: writer,
                errorMask: errorMask);
        }
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return MagicEffect_Property;
            if (ScriptEffect != null)
            {
                foreach (var item in ScriptEffect.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Effect Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Effect Create_Binary(
            MutagenFrame frame,
            out Effect_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Effect Object, Effect_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Effect_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Effect_ErrorMask()) : default(Func<Effect_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Effect Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Effect Create_Binary(
            string path,
            out Effect_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Effect Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Effect Create_Binary(
            Stream stream,
            out Effect_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Effect_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as Effect_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out Effect_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Effect_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            EffectCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Effect Create_Binary_Internal(
            MutagenFrame frame,
            Func<Effect_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new Effect();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    Effect_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Effect item,
            MutagenFrame frame,
            Func<Effect_ErrorMask> errorMask)
        {
        }

        protected static TryGet<Effect_FieldIndex?> Fill_Binary_RecordTypes(
            Effect item,
            MutagenFrame frame,
            Effect_FieldIndex? lastParsed,
            Func<Effect_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "EFID":
                    if (lastParsed.HasValue && lastParsed.Value >= Effect_FieldIndex.MagicEffect) return TryGet<Effect_FieldIndex?>.Failure;
                    SpecialParse_EffectInitial(
                        item: item,
                        frame: frame,
                        errorMask: errorMask);
                    return TryGet<Effect_FieldIndex?>.Succeed(lastParsed);
                case "EFIT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        item.MagicEffect_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                            errorMask: errorMask));
                        item._Magnitude.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Effect_FieldIndex.Magnitude,
                            errorMask: errorMask));
                        item._Area.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Effect_FieldIndex.Area,
                            errorMask: errorMask));
                        item._Duration.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Effect_FieldIndex.Duration,
                            errorMask: errorMask));
                        item._Type.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Effect.EffectType>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            fieldIndex: (int)Effect_FieldIndex.Type,
                            errorMask: errorMask));
                        item._ActorValue.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValueExtended>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            fieldIndex: (int)Effect_FieldIndex.ActorValue,
                            errorMask: errorMask));
                    }
                    return TryGet<Effect_FieldIndex?>.Succeed(Effect_FieldIndex.ActorValue);
                case "SCIT":
                    item._ScriptEffect.SetIfSucceeded(LoquiBinaryTranslation<ScriptEffect, ScriptEffect_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Effect_FieldIndex.ScriptEffect,
                        errorMask: errorMask));
                    return TryGet<Effect_FieldIndex?>.Succeed(Effect_FieldIndex.ScriptEffect);
                default:
                    return TryGet<Effect_FieldIndex?>.Failure;
            }
        }

        #endregion

        public Effect Copy(
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null)
        {
            return Effect.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Effect Copy(
            IEffect item,
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null)
        {
            Effect ret;
            if (item.GetType().Equals(typeof(Effect)))
            {
                ret = new Effect();
            }
            else
            {
                ret = (Effect)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Effect Copy_ToLoqui(
            IEffectGetter item,
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null)
        {
            Effect ret;
            if (item.GetType().Equals(typeof(Effect)))
            {
                ret = new Effect() as Effect;
            }
            else
            {
                ret = (Effect)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IEffectGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEffectGetter rhs,
            Effect_CopyMask copyMask,
            IEffectGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEffectGetter rhs,
            out Effect_ErrorMask errorMask,
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Effect_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Effect_ErrorMask();
                }
                return retErrorMask;
            };
            EffectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    this.MagicEffect_Property.Set(
                        (EDIDLink<MagicEffect>)obj,
                        cmds);
                    break;
                case Effect_FieldIndex.Magnitude:
                    this._Magnitude.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Effect_FieldIndex.Area:
                    this._Area.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Effect_FieldIndex.Duration:
                    this._Duration.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Effect_FieldIndex.Type:
                    this._Type.Set(
                        (Effect.EffectType)obj,
                        cmds);
                    break;
                case Effect_FieldIndex.ActorValue:
                    this._ActorValue.Set(
                        (ActorValueExtended)obj,
                        cmds);
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    this._ScriptEffect.Set(
                        (ScriptEffect)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            EffectCommon.Clear(this, cmds);
        }


        public static Effect Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Effect();
            foreach (var pair in fields)
            {
                CopyInInternal_Effect(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Effect(Effect obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Effect_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    obj.MagicEffect_Property.Set(
                        (EDIDLink<MagicEffect>)pair.Value,
                        null);
                    break;
                case Effect_FieldIndex.Magnitude:
                    obj._Magnitude.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Effect_FieldIndex.Area:
                    obj._Area.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Effect_FieldIndex.Duration:
                    obj._Duration.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Effect_FieldIndex.Type:
                    obj._Type.Set(
                        (Effect.EffectType)pair.Value,
                        null);
                    break;
                case Effect_FieldIndex.ActorValue:
                    obj._ActorValue.Set(
                        (ActorValueExtended)pair.Value,
                        null);
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    obj._ScriptEffect.Set(
                        (ScriptEffect)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Effect obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IEffect : IEffectGetter, ILoquiClass<IEffect, IEffectGetter>, ILoquiClass<Effect, IEffectGetter>
    {
        new MagicEffect MagicEffect { get; set; }
        new UInt32 Magnitude { get; set; }
        new INotifyingItem<UInt32> Magnitude_Property { get; }

        new UInt32 Area { get; set; }
        new INotifyingItem<UInt32> Area_Property { get; }

        new UInt32 Duration { get; set; }
        new INotifyingItem<UInt32> Duration_Property { get; }

        new Effect.EffectType Type { get; set; }
        new INotifyingItem<Effect.EffectType> Type_Property { get; }

        new ActorValueExtended ActorValue { get; set; }
        new INotifyingItem<ActorValueExtended> ActorValue_Property { get; }

        new ScriptEffect ScriptEffect { get; set; }
        new INotifyingSetItem<ScriptEffect> ScriptEffect_Property { get; }

    }

    public partial interface IEffectGetter : ILoquiObject
    {
        #region MagicEffect
        MagicEffect MagicEffect { get; }
        EDIDLink<MagicEffect> MagicEffect_Property { get; }

        #endregion
        #region Magnitude
        UInt32 Magnitude { get; }
        INotifyingItemGetter<UInt32> Magnitude_Property { get; }

        #endregion
        #region Area
        UInt32 Area { get; }
        INotifyingItemGetter<UInt32> Area_Property { get; }

        #endregion
        #region Duration
        UInt32 Duration { get; }
        INotifyingItemGetter<UInt32> Duration_Property { get; }

        #endregion
        #region Type
        Effect.EffectType Type { get; }
        INotifyingItemGetter<Effect.EffectType> Type_Property { get; }

        #endregion
        #region ActorValue
        ActorValueExtended ActorValue { get; }
        INotifyingItemGetter<ActorValueExtended> ActorValue_Property { get; }

        #endregion
        #region ScriptEffect
        ScriptEffect ScriptEffect { get; }
        INotifyingSetItemGetter<ScriptEffect> ScriptEffect_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Effect_FieldIndex
    {
        MagicEffect = 0,
        Magnitude = 1,
        Area = 2,
        Duration = 3,
        Type = 4,
        ActorValue = 5,
        ScriptEffect = 6,
    }
    #endregion

    #region Registration
    public class Effect_Registration : ILoquiRegistration
    {
        public static readonly Effect_Registration Instance = new Effect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 53,
            version: 0);

        public const string GUID = "85ccb56e-7055-4f2a-894d-f998f0ac9ab8";

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Effect_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Effect_ErrorMask);

        public static readonly Type ClassType = typeof(Effect);

        public static readonly Type GetterType = typeof(IEffectGetter);

        public static readonly Type SetterType = typeof(IEffect);

        public static readonly Type CommonType = typeof(EffectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Effect";

        public const string Name = "Effect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAGICEFFECT":
                    return (ushort)Effect_FieldIndex.MagicEffect;
                case "MAGNITUDE":
                    return (ushort)Effect_FieldIndex.Magnitude;
                case "AREA":
                    return (ushort)Effect_FieldIndex.Area;
                case "DURATION":
                    return (ushort)Effect_FieldIndex.Duration;
                case "TYPE":
                    return (ushort)Effect_FieldIndex.Type;
                case "ACTORVALUE":
                    return (ushort)Effect_FieldIndex.ActorValue;
                case "SCRIPTEFFECT":
                    return (ushort)Effect_FieldIndex.ScriptEffect;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.ScriptEffect:
                    return true;
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return "MagicEffect";
                case Effect_FieldIndex.Magnitude:
                    return "Magnitude";
                case Effect_FieldIndex.Area:
                    return "Area";
                case Effect_FieldIndex.Duration:
                    return "Duration";
                case Effect_FieldIndex.Type:
                    return "Type";
                case Effect_FieldIndex.ActorValue:
                    return "ActorValue";
                case Effect_FieldIndex.ScriptEffect:
                    return "ScriptEffect";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return typeof(EDIDLink<MagicEffect>);
                case Effect_FieldIndex.Magnitude:
                    return typeof(UInt32);
                case Effect_FieldIndex.Area:
                    return typeof(UInt32);
                case Effect_FieldIndex.Duration:
                    return typeof(UInt32);
                case Effect_FieldIndex.Type:
                    return typeof(Effect.EffectType);
                case Effect_FieldIndex.ActorValue:
                    return typeof(ActorValueExtended);
                case Effect_FieldIndex.ScriptEffect:
                    return typeof(ScriptEffect);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType EFIT_HEADER = new RecordType("EFIT");
        public static readonly RecordType SCIT_HEADER = new RecordType("SCIT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = EFID_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class EffectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IEffect item,
            IEffectGetter rhs,
            IEffectGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Effect_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.MagicEffect ?? true)
            {
                try
                {
                    item.MagicEffect_Property.Set(
                        value: rhs.MagicEffect,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Effect_FieldIndex.MagicEffect, ex);
                }
            }
            if (copyMask?.Magnitude ?? true)
            {
                try
                {
                    item.Magnitude_Property.Set(
                        value: rhs.Magnitude,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Effect_FieldIndex.Magnitude, ex);
                }
            }
            if (copyMask?.Area ?? true)
            {
                try
                {
                    item.Area_Property.Set(
                        value: rhs.Area,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Effect_FieldIndex.Area, ex);
                }
            }
            if (copyMask?.Duration ?? true)
            {
                try
                {
                    item.Duration_Property.Set(
                        value: rhs.Duration,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Effect_FieldIndex.Duration, ex);
                }
            }
            if (copyMask?.Type ?? true)
            {
                try
                {
                    item.Type_Property.Set(
                        value: rhs.Type,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Effect_FieldIndex.Type, ex);
                }
            }
            if (copyMask?.ActorValue ?? true)
            {
                try
                {
                    item.ActorValue_Property.Set(
                        value: rhs.ActorValue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Effect_FieldIndex.ActorValue, ex);
                }
            }
            if (copyMask?.ScriptEffect.Overall != CopyOption.Skip)
            {
                try
                {
                    item.ScriptEffect_Property.SetToWithDefault(
                        rhs.ScriptEffect_Property,
                        def?.ScriptEffect_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.ScriptEffect.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ScriptEffectCommon.CopyFieldsFrom(
                                        item: item.ScriptEffect,
                                        rhs: rhs.ScriptEffect,
                                        def: def?.ScriptEffect,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<ScriptEffect_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new ScriptEffect_ErrorMask();
                                            baseMask.SetNthMask((int)Effect_FieldIndex.ScriptEffect, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.ScriptEffect.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ScriptEffect);
                                    return ScriptEffect.Copy(
                                        r,
                                        copyMask?.ScriptEffect?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.ScriptEffect?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Effect_FieldIndex.ScriptEffect, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IEffect obj,
            NotifyingFireParameters cmds = null)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Effect_FieldIndex.ScriptEffect:
                    obj.ScriptEffect_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IEffect obj,
            NotifyingUnsetParameters cmds = null)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    obj.MagicEffect = default(EDIDLink<MagicEffect>);
                    break;
                case Effect_FieldIndex.Magnitude:
                    obj.Magnitude = default(UInt32);
                    break;
                case Effect_FieldIndex.Area:
                    obj.Area = default(UInt32);
                    break;
                case Effect_FieldIndex.Duration:
                    obj.Duration = default(UInt32);
                    break;
                case Effect_FieldIndex.Type:
                    obj.Type = default(Effect.EffectType);
                    break;
                case Effect_FieldIndex.ActorValue:
                    obj.ActorValue = default(ActorValueExtended);
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    obj.ScriptEffect_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IEffect obj)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                    return true;
                case Effect_FieldIndex.ScriptEffect:
                    return obj.ScriptEffect_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IEffectGetter obj)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return obj.MagicEffect;
                case Effect_FieldIndex.Magnitude:
                    return obj.Magnitude;
                case Effect_FieldIndex.Area:
                    return obj.Area;
                case Effect_FieldIndex.Duration:
                    return obj.Duration;
                case Effect_FieldIndex.Type:
                    return obj.Type;
                case Effect_FieldIndex.ActorValue:
                    return obj.ActorValue;
                case Effect_FieldIndex.ScriptEffect:
                    return obj.ScriptEffect;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IEffect item,
            NotifyingUnsetParameters cmds = null)
        {
            item.MagicEffect = default(EDIDLink<MagicEffect>);
            item.Magnitude = default(UInt32);
            item.Area = default(UInt32);
            item.Duration = default(UInt32);
            item.Type = default(Effect.EffectType);
            item.ActorValue = default(ActorValueExtended);
            item.ScriptEffect_Property.Unset(cmds.ToUnsetParams());
        }

        public static Effect_Mask<bool> GetEqualsMask(
            this IEffectGetter item,
            IEffectGetter rhs)
        {
            var ret = new Effect_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IEffectGetter item,
            IEffectGetter rhs,
            Effect_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MagicEffect = item.MagicEffect == rhs.MagicEffect;
            ret.Magnitude = item.Magnitude == rhs.Magnitude;
            ret.Area = item.Area == rhs.Area;
            ret.Duration = item.Duration == rhs.Duration;
            ret.Type = item.Type == rhs.Type;
            ret.ActorValue = item.ActorValue == rhs.ActorValue;
            ret.ScriptEffect = item.ScriptEffect_Property.LoquiEqualsHelper(rhs.ScriptEffect_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
        }

        public static string ToString(
            this IEffectGetter item,
            string name = null,
            Effect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IEffectGetter item,
            FileGeneration fg,
            string name = null,
            Effect_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Effect)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Effect)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MagicEffect ?? true)
                {
                    fg.AppendLine($"MagicEffect => {item.MagicEffect_Property}");
                }
                if (printMask?.Magnitude ?? true)
                {
                    fg.AppendLine($"Magnitude => {item.Magnitude}");
                }
                if (printMask?.Area ?? true)
                {
                    fg.AppendLine($"Area => {item.Area}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {item.Duration}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.ActorValue ?? true)
                {
                    fg.AppendLine($"ActorValue => {item.ActorValue}");
                }
                if (printMask?.ScriptEffect?.Overall ?? true)
                {
                    item.ScriptEffect?.ToString(fg, "ScriptEffect");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IEffectGetter item,
            Effect_Mask<bool?> checkMask)
        {
            if (checkMask.ScriptEffect.Overall.HasValue && checkMask.ScriptEffect.Overall.Value != item.ScriptEffect_Property.HasBeenSet) return false;
            if (checkMask.ScriptEffect.Specific != null && (item.ScriptEffect == null || !item.ScriptEffect.HasBeenSet(checkMask.ScriptEffect.Specific))) return false;
            return true;
        }

        public static Effect_Mask<bool> GetHasBeenSetMask(IEffectGetter item)
        {
            var ret = new Effect_Mask<bool>();
            ret.MagicEffect = true;
            ret.Magnitude = true;
            ret.Area = true;
            ret.Duration = true;
            ret.Type = true;
            ret.ActorValue = true;
            ret.ScriptEffect = new MaskItem<bool, ScriptEffect_Mask<bool>>(item.ScriptEffect_Property.HasBeenSet, ScriptEffectCommon.GetHasBeenSetMask(item.ScriptEffect));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IEffectGetter item,
            bool doMasks,
            out Effect_ErrorMask errorMask,
            string name = null)
        {
            Effect_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Effect_ErrorMask()) : default(Func<Effect_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            IEffectGetter item,
            Func<Effect_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Effect");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Effect");
                }
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.MagicEffect),
                    item: item.MagicEffect?.FormID,
                    fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                    errorMask: errorMask);
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Magnitude),
                    item: item.Magnitude_Property,
                    fieldIndex: (int)Effect_FieldIndex.Magnitude,
                    errorMask: errorMask);
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Area),
                    item: item.Area_Property,
                    fieldIndex: (int)Effect_FieldIndex.Area,
                    errorMask: errorMask);
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Duration),
                    item: item.Duration_Property,
                    fieldIndex: (int)Effect_FieldIndex.Duration,
                    errorMask: errorMask);
                EnumXmlTranslation<Effect.EffectType>.Instance.Write(
                    node: elem,
                    name: nameof(item.Type),
                    item: item.Type_Property,
                    fieldIndex: (int)Effect_FieldIndex.Type,
                    errorMask: errorMask);
                EnumXmlTranslation<ActorValueExtended>.Instance.Write(
                    node: elem,
                    name: nameof(item.ActorValue),
                    item: item.ActorValue_Property,
                    fieldIndex: (int)Effect_FieldIndex.ActorValue,
                    errorMask: errorMask);
                if (item.ScriptEffect_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<ScriptEffect, ScriptEffect_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.ScriptEffect_Property,
                        name: nameof(item.ScriptEffect),
                        fieldIndex: (int)Effect_FieldIndex.ScriptEffect,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Effect item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Effect_ErrorMask errorMask)
        {
            Effect_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Effect_ErrorMask()) : default(Func<Effect_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Effect item,
            RecordTypeConverter recordTypeConverter,
            Func<Effect_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Effect item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Effect_ErrorMask> errorMask)
        {
            Effect.SpecialWrite_EffectInitial_Internal(
                item: item,
                writer: writer,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, Effect_Registration.EFIT_HEADER))
            {
                Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MagicEffect_Property,
                    fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Magnitude_Property,
                    fieldIndex: (int)Effect_FieldIndex.Magnitude,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Area_Property,
                    fieldIndex: (int)Effect_FieldIndex.Area,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Duration_Property,
                    fieldIndex: (int)Effect_FieldIndex.Duration,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Effect.EffectType>.Instance.Write(
                    writer,
                    item.Type_Property,
                    length: 4,
                    fieldIndex: (int)Effect_FieldIndex.Type,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValueExtended>.Instance.Write(
                    writer,
                    item.ActorValue_Property,
                    length: 4,
                    fieldIndex: (int)Effect_FieldIndex.ActorValue,
                    errorMask: errorMask);
            }
            LoquiBinaryTranslation<ScriptEffect, ScriptEffect_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.ScriptEffect_Property,
                fieldIndex: (int)Effect_FieldIndex.ScriptEffect,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Effect_Mask<T> : IMask<T>, IEquatable<Effect_Mask<T>>
    {
        #region Ctors
        public Effect_Mask()
        {
        }

        public Effect_Mask(T initialValue)
        {
            this.MagicEffect = initialValue;
            this.Magnitude = initialValue;
            this.Area = initialValue;
            this.Duration = initialValue;
            this.Type = initialValue;
            this.ActorValue = initialValue;
            this.ScriptEffect = new MaskItem<T, ScriptEffect_Mask<T>>(initialValue, new ScriptEffect_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T MagicEffect;
        public T Magnitude;
        public T Area;
        public T Duration;
        public T Type;
        public T ActorValue;
        public MaskItem<T, ScriptEffect_Mask<T>> ScriptEffect { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Effect_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Effect_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MagicEffect, rhs.MagicEffect)) return false;
            if (!object.Equals(this.Magnitude, rhs.Magnitude)) return false;
            if (!object.Equals(this.Area, rhs.Area)) return false;
            if (!object.Equals(this.Duration, rhs.Duration)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.ActorValue, rhs.ActorValue)) return false;
            if (!object.Equals(this.ScriptEffect, rhs.ScriptEffect)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MagicEffect?.GetHashCode());
            ret = ret.CombineHashCode(this.Magnitude?.GetHashCode());
            ret = ret.CombineHashCode(this.Area?.GetHashCode());
            ret = ret.CombineHashCode(this.Duration?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.ActorValue?.GetHashCode());
            ret = ret.CombineHashCode(this.ScriptEffect?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MagicEffect)) return false;
            if (!eval(this.Magnitude)) return false;
            if (!eval(this.Area)) return false;
            if (!eval(this.Duration)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.ActorValue)) return false;
            if (ScriptEffect != null)
            {
                if (!eval(this.ScriptEffect.Overall)) return false;
                if (this.ScriptEffect.Specific != null && !this.ScriptEffect.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public Effect_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Effect_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Effect_Mask<R> obj, Func<T, R> eval)
        {
            obj.MagicEffect = eval(this.MagicEffect);
            obj.Magnitude = eval(this.Magnitude);
            obj.Area = eval(this.Area);
            obj.Duration = eval(this.Duration);
            obj.Type = eval(this.Type);
            obj.ActorValue = eval(this.ActorValue);
            if (this.ScriptEffect != null)
            {
                obj.ScriptEffect = new MaskItem<R, ScriptEffect_Mask<R>>();
                obj.ScriptEffect.Overall = eval(this.ScriptEffect.Overall);
                if (this.ScriptEffect.Specific != null)
                {
                    obj.ScriptEffect.Specific = this.ScriptEffect.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Effect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Effect_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Effect_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MagicEffect ?? true)
                {
                    fg.AppendLine($"MagicEffect => {MagicEffect}");
                }
                if (printMask?.Magnitude ?? true)
                {
                    fg.AppendLine($"Magnitude => {Magnitude}");
                }
                if (printMask?.Area ?? true)
                {
                    fg.AppendLine($"Area => {Area}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {Duration}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.ActorValue ?? true)
                {
                    fg.AppendLine($"ActorValue => {ActorValue}");
                }
                if (printMask?.ScriptEffect?.Overall ?? true)
                {
                    ScriptEffect?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Effect_ErrorMask : IErrorMask, IErrorMask<Effect_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MagicEffect;
        public Exception Magnitude;
        public Exception Area;
        public Exception Duration;
        public Exception Type;
        public Exception ActorValue;
        public MaskItem<Exception, ScriptEffect_ErrorMask> ScriptEffect;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return MagicEffect;
                case Effect_FieldIndex.Magnitude:
                    return Magnitude;
                case Effect_FieldIndex.Area:
                    return Area;
                case Effect_FieldIndex.Duration:
                    return Duration;
                case Effect_FieldIndex.Type:
                    return Type;
                case Effect_FieldIndex.ActorValue:
                    return ActorValue;
                case Effect_FieldIndex.ScriptEffect:
                    return ScriptEffect;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    this.MagicEffect = ex;
                    break;
                case Effect_FieldIndex.Magnitude:
                    this.Magnitude = ex;
                    break;
                case Effect_FieldIndex.Area:
                    this.Area = ex;
                    break;
                case Effect_FieldIndex.Duration:
                    this.Duration = ex;
                    break;
                case Effect_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case Effect_FieldIndex.ActorValue:
                    this.ActorValue = ex;
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    this.ScriptEffect = new MaskItem<Exception, ScriptEffect_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    this.MagicEffect = (Exception)obj;
                    break;
                case Effect_FieldIndex.Magnitude:
                    this.Magnitude = (Exception)obj;
                    break;
                case Effect_FieldIndex.Area:
                    this.Area = (Exception)obj;
                    break;
                case Effect_FieldIndex.Duration:
                    this.Duration = (Exception)obj;
                    break;
                case Effect_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case Effect_FieldIndex.ActorValue:
                    this.ActorValue = (Exception)obj;
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    this.ScriptEffect = (MaskItem<Exception, ScriptEffect_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (MagicEffect != null) return true;
            if (Magnitude != null) return true;
            if (Area != null) return true;
            if (Duration != null) return true;
            if (Type != null) return true;
            if (ActorValue != null) return true;
            if (ScriptEffect != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Effect_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MagicEffect => {MagicEffect}");
            fg.AppendLine($"Magnitude => {Magnitude}");
            fg.AppendLine($"Area => {Area}");
            fg.AppendLine($"Duration => {Duration}");
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"ActorValue => {ActorValue}");
            ScriptEffect?.ToString(fg);
        }
        #endregion

        #region Combine
        public Effect_ErrorMask Combine(Effect_ErrorMask rhs)
        {
            var ret = new Effect_ErrorMask();
            ret.MagicEffect = this.MagicEffect.Combine(rhs.MagicEffect);
            ret.Magnitude = this.Magnitude.Combine(rhs.Magnitude);
            ret.Area = this.Area.Combine(rhs.Area);
            ret.Duration = this.Duration.Combine(rhs.Duration);
            ret.Type = this.Type.Combine(rhs.Type);
            ret.ActorValue = this.ActorValue.Combine(rhs.ActorValue);
            ret.ScriptEffect = new MaskItem<Exception, ScriptEffect_ErrorMask>(this.ScriptEffect.Overall.Combine(rhs.ScriptEffect.Overall), ((IErrorMask<ScriptEffect_ErrorMask>)this.ScriptEffect.Specific).Combine(rhs.ScriptEffect.Specific));
            return ret;
        }
        public static Effect_ErrorMask Combine(Effect_ErrorMask lhs, Effect_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Effect_CopyMask
    {
        #region Members
        public bool MagicEffect;
        public bool Magnitude;
        public bool Area;
        public bool Duration;
        public bool Type;
        public bool ActorValue;
        public MaskItem<CopyOption, ScriptEffect_CopyMask> ScriptEffect;
        #endregion

    }
    #endregion





    #endregion

}
