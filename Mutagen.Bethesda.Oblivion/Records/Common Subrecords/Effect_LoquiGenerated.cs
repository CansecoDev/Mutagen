/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Effect : 
        LoquiNotifyingObject,
        IEffect,
        ILoquiObject<Effect>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<Effect>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Effect_Registration.Instance;
        public static Effect_Registration Registration => Effect_Registration.Instance;

        #region Ctor
        public Effect()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MagicEffect
        public EDIDLink<MagicEffect> MagicEffect_Property { get; } = new EDIDLink<MagicEffect>();
        public MagicEffect MagicEffect { get => MagicEffect_Property.Item; set => MagicEffect_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EDIDLink<MagicEffect> IEffectGetter.MagicEffect_Property => this.MagicEffect_Property;
        #endregion
        #region Magnitude
        private UInt32 _Magnitude;
        public UInt32 Magnitude
        {
            get => this._Magnitude;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Magnitude, value, nameof(Magnitude));
            }
        }
        #endregion
        #region Area
        private UInt32 _Area;
        public UInt32 Area
        {
            get => this._Area;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Area, value, nameof(Area));
            }
        }
        #endregion
        #region Duration
        private UInt32 _Duration;
        public UInt32 Duration
        {
            get => this._Duration;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Duration, value, nameof(Duration));
            }
        }
        #endregion
        #region Type
        private Effect.EffectType _Type;
        public Effect.EffectType Type
        {
            get => this._Type;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Type, value, nameof(Type));
            }
        }
        #endregion
        #region ActorValue
        private ActorValueExtended _ActorValue;
        public ActorValueExtended ActorValue
        {
            get => this._ActorValue;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._ActorValue, value, nameof(ActorValue));
            }
        }
        #endregion
        #region ScriptEffect
        public bool ScriptEffect_IsSet
        {
            get => _hasBeenSetTracker[(int)Effect_FieldIndex.ScriptEffect];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Effect_FieldIndex.ScriptEffect, nameof(ScriptEffect_IsSet));
        }
        bool IEffectGetter.ScriptEffect_IsSet => ScriptEffect_IsSet;
        private ScriptEffect _ScriptEffect;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptEffect ScriptEffect
        {
            get => _ScriptEffect;
            set => ScriptEffect_Set(value);
        }
        public void ScriptEffect_Set(
            ScriptEffect value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ScriptEffect, value, _hasBeenSetTracker, markSet, (int)Effect_FieldIndex.ScriptEffect, nameof(ScriptEffect), nameof(ScriptEffect_IsSet));
        }
        public void ScriptEffect_Unset()
        {
            this.ScriptEffect_Set(default(ScriptEffect), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ScriptEffect IEffectGetter.ScriptEffect => this.ScriptEffect;
        #endregion

        IMask<bool> IEqualsMask<Effect>.GetEqualsMask(Effect rhs, EqualsMaskHelper.Include include) => EffectCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IEffectGetter>.GetEqualsMask(IEffectGetter rhs, EqualsMaskHelper.Include include) => EffectCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Effect_Mask<bool> printMask = null)
        {
            return EffectCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            EffectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Effect_Mask<bool> GetHasBeenSetMask()
        {
            return EffectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Effect rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Effect rhs)
        {
            if (rhs == null) return false;
            if (!this.MagicEffect_Property.Equals(rhs.MagicEffect_Property)) return false;
            if (this.Magnitude != rhs.Magnitude) return false;
            if (this.Area != rhs.Area) return false;
            if (this.Duration != rhs.Duration) return false;
            if (this.Type != rhs.Type) return false;
            if (this.ActorValue != rhs.ActorValue) return false;
            if (ScriptEffect_IsSet != rhs.ScriptEffect_IsSet) return false;
            if (ScriptEffect_IsSet)
            {
                if (!object.Equals(this.ScriptEffect, rhs.ScriptEffect)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(MagicEffect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Magnitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Area).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Duration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ActorValue).CombineHashCode(ret);
            if (ScriptEffect_IsSet)
            {
                ret = HashHelper.GetHashCode(ScriptEffect).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Effect Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Effect_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Effect Create_Xml(
            XElement node,
            out Effect_ErrorMask errorMask,
            bool doMasks = true,
            Effect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Effect_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Effect Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Effect() : null;
                    break;
                default:
                    break;
            }
            var ret = new Effect();
            try
            {
                foreach (var elem in node.Elements())
                {
                    EffectCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Effect Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Effect_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Effect Create_Xml(
            string path,
            out Effect_ErrorMask errorMask,
            Effect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Effect Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Effect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Effect Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Effect_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Effect Create_Xml(
            Stream stream,
            out Effect_ErrorMask errorMask,
            Effect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Effect Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Effect_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Effect_ErrorMask errorMask,
            bool doMasks = true,
            Effect_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Effect_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Effect_ErrorMask errorMask,
            Effect_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Effect_ErrorMask errorMask,
            Effect_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            Effect_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            EffectCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Effect_FieldIndex)index)
            {
                case Effect_FieldIndex.ScriptEffect:
                    return _hasBeenSetTracker[index];
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Effect_Registration.TRIGGERING_RECORD_TYPE;
        static partial void SpecialParse_EffectInitial(
            Effect item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask);
        static partial void SpecialWrite_EffectInitial(
            IEffectGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask);
        internal static void SpecialWrite_EffectInitial_Internal(
            IEffectGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            SpecialWrite_EffectInitial(
                item: item,
                writer: writer,
                errorMask: errorMask);
        }
        public EFITDataType EFITDataTypeState;
        [Flags]
        public enum EFITDataType
        {
            Has = 1
        }
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return MagicEffect_Property;
            if (ScriptEffect != null)
            {
                foreach (var item in ScriptEffect.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod<M>
        {
            MagicEffect_Property.Link(
                modList,
                sourceMod);
            if (ScriptEffect != null)
            {
                ScriptEffect?.Link(
                    modList,
                    sourceMod);
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Effect Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Effect Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Effect_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Effect_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Effect Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Effect();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Effect_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Effect_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            EffectCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Effect item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Effect item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44494645: // EFID
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Effect_FieldIndex.MagicEffect) return TryGet<int?>.Failure;
                    SpecialParse_EffectInitial(
                        item: item,
                        frame: frame,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                case 0x54494645: // EFIT
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.EFITDataTypeState = EFITDataType.Has;
                    }
                    Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.ParseInto(
                        frame: dataFrame,
                        item: item.MagicEffect_Property,
                        fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                        errorMask: errorMask);
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.Magnitude);
                        if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt32 MagnitudeParse,
                            errorMask: errorMask))
                        {
                            item.Magnitude = MagnitudeParse;
                        }
                        else
                        {
                            item.Magnitude = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.Area);
                        if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt32 AreaParse,
                            errorMask: errorMask))
                        {
                            item.Area = AreaParse;
                        }
                        else
                        {
                            item.Area = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.Duration);
                        if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt32 DurationParse,
                            errorMask: errorMask))
                        {
                            item.Duration = DurationParse;
                        }
                        else
                        {
                            item.Duration = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.Type);
                        if (EnumBinaryTranslation<Effect.EffectType>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            item: out Effect.EffectType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.Type = default(Effect.EffectType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.ActorValue);
                        if (EnumBinaryTranslation<ActorValueExtended>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            item: out ActorValueExtended ActorValueParse,
                            errorMask: errorMask))
                        {
                            item.ActorValue = ActorValueParse;
                        }
                        else
                        {
                            item.ActorValue = default(ActorValueExtended);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Effect_FieldIndex.ActorValue);
                }
                case 0x54494353: // SCIT
                {
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.ScriptEffect);
                        if (LoquiBinaryTranslation<ScriptEffect>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out ScriptEffect ScriptEffectParse,
                            errorMask: errorMask))
                        {
                            item.ScriptEffect = ScriptEffectParse;
                        }
                        else
                        {
                            item.ScriptEffect = default(ScriptEffect);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Effect_FieldIndex.ScriptEffect);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public Effect Copy(
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null)
        {
            return Effect.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Effect Copy(
            IEffect item,
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null)
        {
            Effect ret;
            if (item.GetType().Equals(typeof(Effect)))
            {
                ret = new Effect();
            }
            else
            {
                ret = (Effect)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Effect Copy_ToLoqui(
            IEffectGetter item,
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null)
        {
            Effect ret;
            if (item.GetType().Equals(typeof(Effect)))
            {
                ret = new Effect() as Effect;
            }
            else
            {
                ret = (Effect)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IEffectGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IEffectGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEffectGetter rhs,
            Effect_CopyMask copyMask,
            IEffectGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEffectGetter rhs,
            out Effect_ErrorMask errorMask,
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EffectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Effect_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IEffectGetter rhs,
            ErrorMaskBuilder errorMask,
            Effect_CopyMask copyMask = null,
            IEffectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            EffectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    this.MagicEffect_Property.Set(
                        (EDIDLink<MagicEffect>)obj,
                        cmds);
                    break;
                case Effect_FieldIndex.Magnitude:
                    this.Magnitude = (UInt32)obj;
                    break;
                case Effect_FieldIndex.Area:
                    this.Area = (UInt32)obj;
                    break;
                case Effect_FieldIndex.Duration:
                    this.Duration = (UInt32)obj;
                    break;
                case Effect_FieldIndex.Type:
                    this.Type = (Effect.EffectType)obj;
                    break;
                case Effect_FieldIndex.ActorValue:
                    this.ActorValue = (ActorValueExtended)obj;
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    this.ScriptEffect = (ScriptEffect)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            EffectCommon.Clear(this, cmds);
        }


        public static Effect Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Effect();
            foreach (var pair in fields)
            {
                CopyInInternal_Effect(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Effect(Effect obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Effect_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    obj.MagicEffect_Property.Set(
                        (EDIDLink<MagicEffect>)pair.Value,
                        null);
                    break;
                case Effect_FieldIndex.Magnitude:
                    obj.Magnitude = (UInt32)pair.Value;
                    break;
                case Effect_FieldIndex.Area:
                    obj.Area = (UInt32)pair.Value;
                    break;
                case Effect_FieldIndex.Duration:
                    obj.Duration = (UInt32)pair.Value;
                    break;
                case Effect_FieldIndex.Type:
                    obj.Type = (Effect.EffectType)pair.Value;
                    break;
                case Effect_FieldIndex.ActorValue:
                    obj.ActorValue = (ActorValueExtended)pair.Value;
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    obj.ScriptEffect = (ScriptEffect)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IEffect : IEffectGetter, ILoquiClass<IEffect, IEffectGetter>, ILoquiClass<Effect, IEffectGetter>
    {
        new MagicEffect MagicEffect { get; set; }
        new UInt32 Magnitude { get; set; }

        new UInt32 Area { get; set; }

        new UInt32 Duration { get; set; }

        new Effect.EffectType Type { get; set; }

        new ActorValueExtended ActorValue { get; set; }

        new ScriptEffect ScriptEffect { get; set; }
        new bool ScriptEffect_IsSet { get; set; }
        void ScriptEffect_Set(ScriptEffect item, bool hasBeenSet = true);
        void ScriptEffect_Unset();

    }

    public partial interface IEffectGetter : ILoquiObject
    {
        #region MagicEffect
        MagicEffect MagicEffect { get; }
        EDIDLink<MagicEffect> MagicEffect_Property { get; }

        #endregion
        #region Magnitude
        UInt32 Magnitude { get; }

        #endregion
        #region Area
        UInt32 Area { get; }

        #endregion
        #region Duration
        UInt32 Duration { get; }

        #endregion
        #region Type
        Effect.EffectType Type { get; }

        #endregion
        #region ActorValue
        ActorValueExtended ActorValue { get; }

        #endregion
        #region ScriptEffect
        ScriptEffect ScriptEffect { get; }
        bool ScriptEffect_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Effect_FieldIndex
    {
        MagicEffect = 0,
        Magnitude = 1,
        Area = 2,
        Duration = 3,
        Type = 4,
        ActorValue = 5,
        ScriptEffect = 6,
    }
    #endregion

    #region Registration
    public class Effect_Registration : ILoquiRegistration
    {
        public static readonly Effect_Registration Instance = new Effect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 53,
            version: 0);

        public const string GUID = "85ccb56e-7055-4f2a-894d-f998f0ac9ab8";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Effect_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Effect_ErrorMask);

        public static readonly Type ClassType = typeof(Effect);

        public static readonly Type GetterType = typeof(IEffectGetter);

        public static readonly Type SetterType = typeof(IEffect);

        public static readonly Type CommonType = typeof(EffectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Effect";

        public const string Name = "Effect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAGICEFFECT":
                    return (ushort)Effect_FieldIndex.MagicEffect;
                case "MAGNITUDE":
                    return (ushort)Effect_FieldIndex.Magnitude;
                case "AREA":
                    return (ushort)Effect_FieldIndex.Area;
                case "DURATION":
                    return (ushort)Effect_FieldIndex.Duration;
                case "TYPE":
                    return (ushort)Effect_FieldIndex.Type;
                case "ACTORVALUE":
                    return (ushort)Effect_FieldIndex.ActorValue;
                case "SCRIPTEFFECT":
                    return (ushort)Effect_FieldIndex.ScriptEffect;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.ScriptEffect:
                    return true;
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return "MagicEffect";
                case Effect_FieldIndex.Magnitude:
                    return "Magnitude";
                case Effect_FieldIndex.Area:
                    return "Area";
                case Effect_FieldIndex.Duration:
                    return "Duration";
                case Effect_FieldIndex.Type:
                    return "Type";
                case Effect_FieldIndex.ActorValue:
                    return "ActorValue";
                case Effect_FieldIndex.ScriptEffect:
                    return "ScriptEffect";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return typeof(EDIDLink<MagicEffect>);
                case Effect_FieldIndex.Magnitude:
                    return typeof(UInt32);
                case Effect_FieldIndex.Area:
                    return typeof(UInt32);
                case Effect_FieldIndex.Duration:
                    return typeof(UInt32);
                case Effect_FieldIndex.Type:
                    return typeof(Effect.EffectType);
                case Effect_FieldIndex.ActorValue:
                    return typeof(ActorValueExtended);
                case Effect_FieldIndex.ScriptEffect:
                    return typeof(ScriptEffect);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType EFIT_HEADER = new RecordType("EFIT");
        public static readonly RecordType SCIT_HEADER = new RecordType("SCIT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = EFID_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class EffectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IEffect item,
            IEffectGetter rhs,
            IEffectGetter def,
            ErrorMaskBuilder errorMask,
            Effect_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.MagicEffect ?? true)
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.MagicEffect);
                try
                {
                    item.MagicEffect_Property.SetLink(
                        value: rhs.MagicEffect_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Magnitude ?? true)
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.Magnitude);
                try
                {
                    item.Magnitude = rhs.Magnitude;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Area ?? true)
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.Area);
                try
                {
                    item.Area = rhs.Area;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Duration ?? true)
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.Duration);
                try
                {
                    item.Duration = rhs.Duration;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Type ?? true)
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.Type);
                try
                {
                    item.Type = rhs.Type;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ActorValue ?? true)
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.ActorValue);
                try
                {
                    item.ActorValue = rhs.ActorValue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ScriptEffect.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.ScriptEffect);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ScriptEffect,
                        rhsHasBeenSet: rhs.ScriptEffect_IsSet,
                        defItem: def?.ScriptEffect,
                        defHasBeenSet: def?.ScriptEffect_IsSet ?? false,
                        outRhsItem: out var rhsScriptEffectItem,
                        outDefItem: out var defScriptEffectItem))
                    {
                        switch (copyMask?.ScriptEffect.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.ScriptEffect = rhsScriptEffectItem;
                                break;
                            case CopyOption.CopyIn:
                                ScriptEffectCommon.CopyFieldsFrom(
                                    item: item.ScriptEffect,
                                    rhs: rhs.ScriptEffect,
                                    def: def?.ScriptEffect,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.ScriptEffect.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.ScriptEffect = ScriptEffect.Copy(
                                    rhsScriptEffectItem,
                                    copyMask?.ScriptEffect?.Specific,
                                    def: defScriptEffectItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.ScriptEffect?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.ScriptEffect_Set(
                            item: default(ScriptEffect),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(
            IEffect item,
            NotifyingUnsetParameters cmds = null)
        {
            item.MagicEffect = default(MagicEffect);
            item.Magnitude = default(UInt32);
            item.Area = default(UInt32);
            item.Duration = default(UInt32);
            item.Type = default(Effect.EffectType);
            item.ActorValue = default(ActorValueExtended);
            item.ScriptEffect_Unset();
        }

        public static Effect_Mask<bool> GetEqualsMask(
            this IEffectGetter item,
            IEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Effect_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IEffectGetter item,
            IEffectGetter rhs,
            Effect_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MagicEffect = item.MagicEffect_Property.FormKey == rhs.MagicEffect_Property.FormKey;
            ret.Magnitude = item.Magnitude == rhs.Magnitude;
            ret.Area = item.Area == rhs.Area;
            ret.Duration = item.Duration == rhs.Duration;
            ret.Type = item.Type == rhs.Type;
            ret.ActorValue = item.ActorValue == rhs.ActorValue;
            ret.ScriptEffect = EqualsMaskHelper.EqualsHelper(
                item.ScriptEffect_IsSet,
                rhs.ScriptEffect_IsSet,
                item.ScriptEffect,
                rhs.ScriptEffect,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
        }

        public static string ToString(
            this IEffectGetter item,
            string name = null,
            Effect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IEffectGetter item,
            FileGeneration fg,
            string name = null,
            Effect_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Effect)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Effect)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MagicEffect ?? true)
                {
                    fg.AppendLine($"MagicEffect => {item.MagicEffect_Property}");
                }
                if (printMask?.Magnitude ?? true)
                {
                    fg.AppendLine($"Magnitude => {item.Magnitude}");
                }
                if (printMask?.Area ?? true)
                {
                    fg.AppendLine($"Area => {item.Area}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {item.Duration}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.ActorValue ?? true)
                {
                    fg.AppendLine($"ActorValue => {item.ActorValue}");
                }
                if (printMask?.ScriptEffect?.Overall ?? true)
                {
                    item.ScriptEffect?.ToString(fg, "ScriptEffect");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IEffectGetter item,
            Effect_Mask<bool?> checkMask)
        {
            if (checkMask.ScriptEffect.Overall.HasValue && checkMask.ScriptEffect.Overall.Value != item.ScriptEffect_IsSet) return false;
            if (checkMask.ScriptEffect.Specific != null && (item.ScriptEffect == null || !item.ScriptEffect.HasBeenSet(checkMask.ScriptEffect.Specific))) return false;
            return true;
        }

        public static Effect_Mask<bool> GetHasBeenSetMask(IEffectGetter item)
        {
            var ret = new Effect_Mask<bool>();
            ret.MagicEffect = true;
            ret.Magnitude = true;
            ret.Area = true;
            ret.Duration = true;
            ret.Type = true;
            ret.ActorValue = true;
            ret.ScriptEffect = new MaskItem<bool, ScriptEffect_Mask<bool>>(item.ScriptEffect_IsSet, ScriptEffectCommon.GetHasBeenSetMask(item.ScriptEffect));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Effect item,
            bool doMasks,
            out Effect_ErrorMask errorMask,
            Effect_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Effect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Effect item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Effect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Effect");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this Effect item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.EFITDataTypeState.HasFlag(Effect.EFITDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.MagicEffect) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MagicEffect),
                        item: item.MagicEffect_Property?.FormKey,
                        fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.Magnitude) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Magnitude),
                        item: item.Magnitude,
                        fieldIndex: (int)Effect_FieldIndex.Magnitude,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.Area) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Area),
                        item: item.Area,
                        fieldIndex: (int)Effect_FieldIndex.Area,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.Duration) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Duration),
                        item: item.Duration,
                        fieldIndex: (int)Effect_FieldIndex.Duration,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.Type) ?? true))
                {
                    EnumXmlTranslation<Effect.EffectType>.Instance.Write(
                        node: node,
                        name: nameof(item.Type),
                        item: item.Type,
                        fieldIndex: (int)Effect_FieldIndex.Type,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.ActorValue) ?? true))
                {
                    EnumXmlTranslation<ActorValueExtended>.Instance.Write(
                        node: node,
                        name: nameof(item.ActorValue),
                        item: item.ActorValue,
                        fieldIndex: (int)Effect_FieldIndex.ActorValue,
                        errorMask: errorMask);
                }
            }
            if (item.ScriptEffect_IsSet
                && (translationMask?.GetShouldTranslate((int)Effect_FieldIndex.ScriptEffect) ?? true))
            {
                LoquiXmlTranslation<ScriptEffect>.Instance.Write(
                    node: node,
                    item: item.ScriptEffect,
                    name: nameof(item.ScriptEffect),
                    fieldIndex: (int)Effect_FieldIndex.ScriptEffect,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Effect_FieldIndex.ScriptEffect));
            }
        }

        public static void FillPublic_Xml(
            this Effect item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EffectCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Effect item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MagicEffect":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.MagicEffect_Property,
                        fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                        errorMask: errorMask);
                    item.EFITDataTypeState |= Effect.EFITDataType.Has;
                    break;
                case "Magnitude":
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.Magnitude);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 MagnitudeParse,
                            errorMask: errorMask))
                        {
                            item.Magnitude = MagnitudeParse;
                        }
                        else
                        {
                            item.Magnitude = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Area":
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.Area);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 AreaParse,
                            errorMask: errorMask))
                        {
                            item.Area = AreaParse;
                        }
                        else
                        {
                            item.Area = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Duration":
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.Duration);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 DurationParse,
                            errorMask: errorMask))
                        {
                            item.Duration = DurationParse;
                        }
                        else
                        {
                            item.Duration = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.Type);
                        if (EnumXmlTranslation<Effect.EffectType>.Instance.Parse(
                            node: node,
                            item: out Effect.EffectType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.Type = default(Effect.EffectType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActorValue":
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.ActorValue);
                        if (EnumXmlTranslation<ActorValueExtended>.Instance.Parse(
                            node: node,
                            item: out ActorValueExtended ActorValueParse,
                            errorMask: errorMask))
                        {
                            item.ActorValue = ActorValueParse;
                        }
                        else
                        {
                            item.ActorValue = default(ActorValueExtended);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScriptEffect":
                    try
                    {
                        errorMask?.PushIndex((int)Effect_FieldIndex.ScriptEffect);
                        if (LoquiXmlTranslation<ScriptEffect>.Instance.Parse(
                            node: node,
                            item: out ScriptEffect ScriptEffectParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Effect_FieldIndex.ScriptEffect)))
                        {
                            item.ScriptEffect = ScriptEffectParse;
                        }
                        else
                        {
                            item.ScriptEffect = default(ScriptEffect);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Effect item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Effect_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Effect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Effect item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Effect item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Effect.SpecialWrite_EffectInitial_Internal(
                item: item,
                writer: writer,
                errorMask: errorMask);
            if (item.EFITDataTypeState.HasFlag(Effect.EFITDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Effect_Registration.EFIT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MagicEffect_Property,
                        fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Magnitude,
                        fieldIndex: (int)Effect_FieldIndex.Magnitude,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Area,
                        fieldIndex: (int)Effect_FieldIndex.Area,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Duration,
                        fieldIndex: (int)Effect_FieldIndex.Duration,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Effect.EffectType>.Instance.Write(
                        writer,
                        item.Type,
                        length: 4,
                        fieldIndex: (int)Effect_FieldIndex.Type,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValueExtended>.Instance.Write(
                        writer,
                        item.ActorValue,
                        length: 4,
                        fieldIndex: (int)Effect_FieldIndex.ActorValue,
                        errorMask: errorMask);
                }
            }
            if (item.ScriptEffect_IsSet)
            {
                LoquiBinaryTranslation<ScriptEffect>.Instance.Write(
                    writer: writer,
                    item: item.ScriptEffect,
                    fieldIndex: (int)Effect_FieldIndex.ScriptEffect,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Effect_Mask<T> : IMask<T>, IEquatable<Effect_Mask<T>>
    {
        #region Ctors
        public Effect_Mask()
        {
        }

        public Effect_Mask(T initialValue)
        {
            this.MagicEffect = initialValue;
            this.Magnitude = initialValue;
            this.Area = initialValue;
            this.Duration = initialValue;
            this.Type = initialValue;
            this.ActorValue = initialValue;
            this.ScriptEffect = new MaskItem<T, ScriptEffect_Mask<T>>(initialValue, new ScriptEffect_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T MagicEffect;
        public T Magnitude;
        public T Area;
        public T Duration;
        public T Type;
        public T ActorValue;
        public MaskItem<T, ScriptEffect_Mask<T>> ScriptEffect { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Effect_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Effect_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MagicEffect, rhs.MagicEffect)) return false;
            if (!object.Equals(this.Magnitude, rhs.Magnitude)) return false;
            if (!object.Equals(this.Area, rhs.Area)) return false;
            if (!object.Equals(this.Duration, rhs.Duration)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.ActorValue, rhs.ActorValue)) return false;
            if (!object.Equals(this.ScriptEffect, rhs.ScriptEffect)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MagicEffect?.GetHashCode());
            ret = ret.CombineHashCode(this.Magnitude?.GetHashCode());
            ret = ret.CombineHashCode(this.Area?.GetHashCode());
            ret = ret.CombineHashCode(this.Duration?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.ActorValue?.GetHashCode());
            ret = ret.CombineHashCode(this.ScriptEffect?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MagicEffect)) return false;
            if (!eval(this.Magnitude)) return false;
            if (!eval(this.Area)) return false;
            if (!eval(this.Duration)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.ActorValue)) return false;
            if (ScriptEffect != null)
            {
                if (!eval(this.ScriptEffect.Overall)) return false;
                if (this.ScriptEffect.Specific != null && !this.ScriptEffect.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public Effect_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Effect_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Effect_Mask<R> obj, Func<T, R> eval)
        {
            obj.MagicEffect = eval(this.MagicEffect);
            obj.Magnitude = eval(this.Magnitude);
            obj.Area = eval(this.Area);
            obj.Duration = eval(this.Duration);
            obj.Type = eval(this.Type);
            obj.ActorValue = eval(this.ActorValue);
            if (this.ScriptEffect != null)
            {
                obj.ScriptEffect = new MaskItem<R, ScriptEffect_Mask<R>>();
                obj.ScriptEffect.Overall = eval(this.ScriptEffect.Overall);
                if (this.ScriptEffect.Specific != null)
                {
                    obj.ScriptEffect.Specific = this.ScriptEffect.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Effect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Effect_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Effect_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MagicEffect ?? true)
                {
                    fg.AppendLine($"MagicEffect => {MagicEffect}");
                }
                if (printMask?.Magnitude ?? true)
                {
                    fg.AppendLine($"Magnitude => {Magnitude}");
                }
                if (printMask?.Area ?? true)
                {
                    fg.AppendLine($"Area => {Area}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {Duration}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.ActorValue ?? true)
                {
                    fg.AppendLine($"ActorValue => {ActorValue}");
                }
                if (printMask?.ScriptEffect?.Overall ?? true)
                {
                    ScriptEffect?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Effect_ErrorMask : IErrorMask, IErrorMask<Effect_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MagicEffect;
        public Exception Magnitude;
        public Exception Area;
        public Exception Duration;
        public Exception Type;
        public Exception ActorValue;
        public MaskItem<Exception, ScriptEffect_ErrorMask> ScriptEffect;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return MagicEffect;
                case Effect_FieldIndex.Magnitude:
                    return Magnitude;
                case Effect_FieldIndex.Area:
                    return Area;
                case Effect_FieldIndex.Duration:
                    return Duration;
                case Effect_FieldIndex.Type:
                    return Type;
                case Effect_FieldIndex.ActorValue:
                    return ActorValue;
                case Effect_FieldIndex.ScriptEffect:
                    return ScriptEffect;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    this.MagicEffect = ex;
                    break;
                case Effect_FieldIndex.Magnitude:
                    this.Magnitude = ex;
                    break;
                case Effect_FieldIndex.Area:
                    this.Area = ex;
                    break;
                case Effect_FieldIndex.Duration:
                    this.Duration = ex;
                    break;
                case Effect_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case Effect_FieldIndex.ActorValue:
                    this.ActorValue = ex;
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    this.ScriptEffect = new MaskItem<Exception, ScriptEffect_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    this.MagicEffect = (Exception)obj;
                    break;
                case Effect_FieldIndex.Magnitude:
                    this.Magnitude = (Exception)obj;
                    break;
                case Effect_FieldIndex.Area:
                    this.Area = (Exception)obj;
                    break;
                case Effect_FieldIndex.Duration:
                    this.Duration = (Exception)obj;
                    break;
                case Effect_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case Effect_FieldIndex.ActorValue:
                    this.ActorValue = (Exception)obj;
                    break;
                case Effect_FieldIndex.ScriptEffect:
                    this.ScriptEffect = (MaskItem<Exception, ScriptEffect_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (MagicEffect != null) return true;
            if (Magnitude != null) return true;
            if (Area != null) return true;
            if (Duration != null) return true;
            if (Type != null) return true;
            if (ActorValue != null) return true;
            if (ScriptEffect != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Effect_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MagicEffect => {MagicEffect}");
            fg.AppendLine($"Magnitude => {Magnitude}");
            fg.AppendLine($"Area => {Area}");
            fg.AppendLine($"Duration => {Duration}");
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"ActorValue => {ActorValue}");
            ScriptEffect?.ToString(fg);
        }
        #endregion

        #region Combine
        public Effect_ErrorMask Combine(Effect_ErrorMask rhs)
        {
            var ret = new Effect_ErrorMask();
            ret.MagicEffect = this.MagicEffect.Combine(rhs.MagicEffect);
            ret.Magnitude = this.Magnitude.Combine(rhs.Magnitude);
            ret.Area = this.Area.Combine(rhs.Area);
            ret.Duration = this.Duration.Combine(rhs.Duration);
            ret.Type = this.Type.Combine(rhs.Type);
            ret.ActorValue = this.ActorValue.Combine(rhs.ActorValue);
            ret.ScriptEffect = new MaskItem<Exception, ScriptEffect_ErrorMask>(this.ScriptEffect.Overall.Combine(rhs.ScriptEffect.Overall), ((IErrorMask<ScriptEffect_ErrorMask>)this.ScriptEffect.Specific).Combine(rhs.ScriptEffect.Specific));
            return ret;
        }
        public static Effect_ErrorMask Combine(Effect_ErrorMask lhs, Effect_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Effect_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Effect_ErrorMask();
        }
        #endregion

    }
    public class Effect_CopyMask
    {
        public Effect_CopyMask()
        {
        }

        public Effect_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.MagicEffect = defaultOn;
            this.Magnitude = defaultOn;
            this.Area = defaultOn;
            this.Duration = defaultOn;
            this.Type = defaultOn;
            this.ActorValue = defaultOn;
            this.ScriptEffect = new MaskItem<CopyOption, ScriptEffect_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool MagicEffect;
        public bool Magnitude;
        public bool Area;
        public bool Duration;
        public bool Type;
        public bool ActorValue;
        public MaskItem<CopyOption, ScriptEffect_CopyMask> ScriptEffect;
        #endregion

    }

    public class Effect_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool MagicEffect;
        public bool Magnitude;
        public bool Area;
        public bool Duration;
        public bool Type;
        public bool ActorValue;
        public MaskItem<bool, ScriptEffect_TranslationMask> ScriptEffect;
        #endregion

        #region Ctors
        public Effect_TranslationMask()
        {
        }

        public Effect_TranslationMask(bool defaultOn)
        {
            this.MagicEffect = defaultOn;
            this.Magnitude = defaultOn;
            this.Area = defaultOn;
            this.Duration = defaultOn;
            this.Type = defaultOn;
            this.ActorValue = defaultOn;
            this.ScriptEffect = new MaskItem<bool, ScriptEffect_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((MagicEffect, null));
            ret.Add((Magnitude, null));
            ret.Add((Area, null));
            ret.Add((Duration, null));
            ret.Add((Type, null));
            ret.Add((ActorValue, null));
            ret.Add((ScriptEffect?.Overall ?? true, ScriptEffect?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
