/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class EnableParent : 
        LoquiNotifyingObject,
        IEnableParent,
        ILoquiObject<EnableParent>,
        ILoquiObjectSetter,
        IEquatable<EnableParent>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EnableParent_Registration.Instance;
        public static EnableParent_Registration Registration => EnableParent_Registration.Instance;

        #region Ctor
        public EnableParent()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Reference
        public FormIDLink<PlacedObject> Reference_Property { get; } = new FormIDLink<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PlacedObject Reference { get => Reference_Property.Item; set => Reference_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<PlacedObject> IEnableParentGetter.Reference_Property => this.Reference_Property;
        #endregion
        #region Flags
        private EnableParent.Flag _Flags;
        public EnableParent.Flag Flags
        {
            get => this._Flags;
            set => this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => EnableParentCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => EnableParentCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => EnableParentCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            EnableParentCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<EnableParent>.GetEqualsMask(EnableParent rhs) => EnableParentCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IEnableParentGetter>.GetEqualsMask(IEnableParentGetter rhs) => EnableParentCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return EnableParentCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            EnableParent_Mask<bool> printMask = null)
        {
            return EnableParentCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            EnableParentCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public EnableParent_Mask<bool> GetHasBeenSetMask()
        {
            return EnableParentCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is EnableParent rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(EnableParent rhs)
        {
            if (rhs == null) return false;
            if (!this.Reference_Property.Equals(rhs.Reference_Property)) return false;
            if (this.Flags != rhs.Flags) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Reference).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static EnableParent Create_Xml(
            XElement root,
            EnableParent_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static EnableParent Create_Xml(
            XElement root,
            out EnableParent_ErrorMask errorMask,
            bool doMasks = true,
            EnableParent_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = EnableParent_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static EnableParent Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new EnableParent();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static EnableParent Create_Xml(
            string path,
            EnableParent_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static EnableParent Create_Xml(
            string path,
            out EnableParent_ErrorMask errorMask,
            EnableParent_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EnableParent Create_Xml(
            Stream stream,
            EnableParent_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static EnableParent Create_Xml(
            Stream stream,
            out EnableParent_ErrorMask errorMask,
            EnableParent_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out EnableParent_ErrorMask errorMask,
            EnableParent_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = EnableParent_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<EnableParent>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out EnableParent_ErrorMask errorMask,
            EnableParent_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out EnableParent_ErrorMask errorMask,
            EnableParent_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out EnableParent_ErrorMask errorMask,
            bool doMasks = true,
            EnableParent_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EnableParent_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out EnableParent_ErrorMask errorMask,
            EnableParent_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out EnableParent_ErrorMask errorMask,
            EnableParent_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            EnableParent_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            EnableParentCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            EnableParent item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Reference":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Reference_Property,
                        fieldIndex: (int)EnableParent_FieldIndex.Reference,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)EnableParent_FieldIndex.Flags);
                        if (EnumXmlTranslation<EnableParent.Flag>.Instance.Parse(
                            root: root,
                            item: out EnableParent.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(EnableParent.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((EnableParent_FieldIndex)index)
            {
                case EnableParent_FieldIndex.Reference:
                case EnableParent_FieldIndex.Flags:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = EnableParent_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Reference_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static EnableParent Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static EnableParent Create_Binary(
            MutagenFrame frame,
            out EnableParent_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = EnableParent_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static EnableParent Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new EnableParent();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(EnableParent_Registration.XESP_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static EnableParent Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static EnableParent Create_Binary(
            string path,
            out EnableParent_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static EnableParent Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static EnableParent Create_Binary(
            Stream stream,
            out EnableParent_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out EnableParent_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = EnableParent_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out EnableParent_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out EnableParent_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            EnableParentCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            EnableParent item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                item: item.Reference_Property,
                fieldIndex: (int)EnableParent_FieldIndex.Reference,
                errorMask: errorMask);
            try
            {
                errorMask?.PushIndex((int)EnableParent_FieldIndex.Flags);
                if (EnumBinaryTranslation<EnableParent.Flag>.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out EnableParent.Flag FlagsParse,
                    errorMask: errorMask))
                {
                    item.Flags = FlagsParse;
                }
                else
                {
                    item.Flags = default(EnableParent.Flag);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public EnableParent Copy(
            EnableParent_CopyMask copyMask = null,
            IEnableParentGetter def = null)
        {
            return EnableParent.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static EnableParent Copy(
            IEnableParent item,
            EnableParent_CopyMask copyMask = null,
            IEnableParentGetter def = null)
        {
            EnableParent ret;
            if (item.GetType().Equals(typeof(EnableParent)))
            {
                ret = new EnableParent();
            }
            else
            {
                ret = (EnableParent)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static EnableParent Copy_ToLoqui(
            IEnableParentGetter item,
            EnableParent_CopyMask copyMask = null,
            IEnableParentGetter def = null)
        {
            EnableParent ret;
            if (item.GetType().Equals(typeof(EnableParent)))
            {
                ret = new EnableParent() as EnableParent;
            }
            else
            {
                ret = (EnableParent)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IEnableParentGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEnableParentGetter rhs,
            EnableParent_CopyMask copyMask,
            IEnableParentGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEnableParentGetter rhs,
            out EnableParent_ErrorMask errorMask,
            EnableParent_CopyMask copyMask = null,
            IEnableParentGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EnableParentCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = EnableParent_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IEnableParentGetter rhs,
            ErrorMaskBuilder errorMask,
            EnableParent_CopyMask copyMask = null,
            IEnableParentGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            EnableParentCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    this.Reference_Property.Set(
                        (FormIDLink<PlacedObject>)obj,
                        cmds);
                    break;
                case EnableParent_FieldIndex.Flags:
                    this.Flags = (EnableParent.Flag)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            EnableParentCommon.Clear(this, cmds);
        }


        public static EnableParent Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new EnableParent();
            foreach (var pair in fields)
            {
                CopyInInternal_EnableParent(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_EnableParent(EnableParent obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out EnableParent_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    obj.Reference_Property.Set(
                        (FormIDLink<PlacedObject>)pair.Value,
                        null);
                    break;
                case EnableParent_FieldIndex.Flags:
                    obj.Flags = (EnableParent.Flag)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, EnableParent obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IEnableParent : IEnableParentGetter, ILoquiClass<IEnableParent, IEnableParentGetter>, ILoquiClass<EnableParent, IEnableParentGetter>
    {
        new PlacedObject Reference { get; set; }
        new EnableParent.Flag Flags { get; set; }

    }

    public partial interface IEnableParentGetter : ILoquiObject
    {
        #region Reference
        PlacedObject Reference { get; }
        FormIDLink<PlacedObject> Reference_Property { get; }

        #endregion
        #region Flags
        EnableParent.Flag Flags { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum EnableParent_FieldIndex
    {
        Reference = 0,
        Flags = 1,
    }
    #endregion

    #region Registration
    public class EnableParent_Registration : ILoquiRegistration
    {
        public static readonly EnableParent_Registration Instance = new EnableParent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 124,
            version: 0);

        public const string GUID = "e078cd3d-8b51-4e47-ac43-427229d9cf88";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(EnableParent_Mask<>);

        public static readonly Type ErrorMaskType = typeof(EnableParent_ErrorMask);

        public static readonly Type ClassType = typeof(EnableParent);

        public static readonly Type GetterType = typeof(IEnableParentGetter);

        public static readonly Type SetterType = typeof(IEnableParent);

        public static readonly Type CommonType = typeof(EnableParentCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.EnableParent";

        public const string Name = "EnableParent";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REFERENCE":
                    return (ushort)EnableParent_FieldIndex.Reference;
                case "FLAGS":
                    return (ushort)EnableParent_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                case EnableParent_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                case EnableParent_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                case EnableParent_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    return "Reference";
                case EnableParent_FieldIndex.Flags:
                    return "Flags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                case EnableParent_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                case EnableParent_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    return typeof(FormIDLink<PlacedObject>);
                case EnableParent_FieldIndex.Flags:
                    return typeof(EnableParent.Flag);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = XESP_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class EnableParentCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IEnableParent item,
            IEnableParentGetter rhs,
            IEnableParentGetter def,
            ErrorMaskBuilder errorMask,
            EnableParent_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Reference ?? true)
            {
                errorMask?.PushIndex((int)EnableParent_FieldIndex.Reference);
                try
                {
                    item.Reference_Property.Set(
                        value: rhs.Reference,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)EnableParent_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IEnableParent obj,
            NotifyingFireParameters cmds = null)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                case EnableParent_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IEnableParent obj,
            NotifyingUnsetParameters cmds = null)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    obj.Reference_Property.Unset(cmds.ToUnsetParams());
                    break;
                case EnableParent_FieldIndex.Flags:
                    obj.Flags = default(EnableParent.Flag);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IEnableParent obj)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                case EnableParent_FieldIndex.Flags:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IEnableParentGetter obj)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    return obj.Reference;
                case EnableParent_FieldIndex.Flags:
                    return obj.Flags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IEnableParent item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Reference_Property.Unset(cmds.ToUnsetParams());
            item.Flags = default(EnableParent.Flag);
        }

        public static EnableParent_Mask<bool> GetEqualsMask(
            this IEnableParentGetter item,
            IEnableParentGetter rhs)
        {
            var ret = new EnableParent_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IEnableParentGetter item,
            IEnableParentGetter rhs,
            EnableParent_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Reference = item.Reference == rhs.Reference;
            ret.Flags = item.Flags == rhs.Flags;
        }

        public static string ToString(
            this IEnableParentGetter item,
            string name = null,
            EnableParent_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IEnableParentGetter item,
            FileGeneration fg,
            string name = null,
            EnableParent_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(EnableParent)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(EnableParent)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {item.Reference_Property}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IEnableParentGetter item,
            EnableParent_Mask<bool?> checkMask)
        {
            return true;
        }

        public static EnableParent_Mask<bool> GetHasBeenSetMask(IEnableParentGetter item)
        {
            var ret = new EnableParent_Mask<bool>();
            ret.Reference = true;
            ret.Flags = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            EnableParent item,
            bool doMasks,
            out EnableParent_ErrorMask errorMask,
            EnableParent_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EnableParent_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            EnableParent item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.EnableParent");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.EnableParent");
            }
            if ((translationMask?.GetShouldTranslate((int)EnableParent_FieldIndex.Reference) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Reference),
                    item: item.Reference_Property?.FormID,
                    fieldIndex: (int)EnableParent_FieldIndex.Reference,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EnableParent_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<EnableParent.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)EnableParent_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            EnableParent item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out EnableParent_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = EnableParent_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            EnableParent item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: EnableParent_Registration.XESP_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            EnableParent item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference_Property,
                fieldIndex: (int)EnableParent_FieldIndex.Reference,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<EnableParent.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                fieldIndex: (int)EnableParent_FieldIndex.Flags,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class EnableParent_Mask<T> : IMask<T>, IEquatable<EnableParent_Mask<T>>
    {
        #region Ctors
        public EnableParent_Mask()
        {
        }

        public EnableParent_Mask(T initialValue)
        {
            this.Reference = initialValue;
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public T Reference;
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is EnableParent_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(EnableParent_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Reference, rhs.Reference)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Reference?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Reference)) return false;
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public EnableParent_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new EnableParent_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(EnableParent_Mask<R> obj, Func<T, R> eval)
        {
            obj.Reference = eval(this.Reference);
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(EnableParent_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, EnableParent_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(EnableParent_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {Reference}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class EnableParent_ErrorMask : IErrorMask, IErrorMask<EnableParent_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Reference;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    return Reference;
                case EnableParent_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    this.Reference = ex;
                    break;
                case EnableParent_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            EnableParent_FieldIndex enu = (EnableParent_FieldIndex)index;
            switch (enu)
            {
                case EnableParent_FieldIndex.Reference:
                    this.Reference = (Exception)obj;
                    break;
                case EnableParent_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Reference != null) return true;
            if (Flags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("EnableParent_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Reference => {Reference}");
            fg.AppendLine($"Flags => {Flags}");
        }
        #endregion

        #region Combine
        public EnableParent_ErrorMask Combine(EnableParent_ErrorMask rhs)
        {
            var ret = new EnableParent_ErrorMask();
            ret.Reference = this.Reference.Combine(rhs.Reference);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static EnableParent_ErrorMask Combine(EnableParent_ErrorMask lhs, EnableParent_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static EnableParent_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new EnableParent_ErrorMask();
        }
        #endregion

    }
    public class EnableParent_CopyMask
    {
        #region Members
        public bool Reference;
        public bool Flags;
        #endregion

    }
    public class EnableParent_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Reference;
        public bool Flags;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Reference, null));
            ret.Add((Flags, null));
        }
    }
    #endregion

    #endregion

}
