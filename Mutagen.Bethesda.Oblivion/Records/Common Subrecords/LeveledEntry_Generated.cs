/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledEntry<T> :
        ILeveledEntry<T>,
        ILoquiObjectSetter<LeveledEntry<T>>,
        IEquatable<ILeveledEntryGetter<T>>
        where T : class, IOblivionMajorRecordInternal, IBinaryItem
    {
        #region Ctor
        public LeveledEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Level
        public Int16 Level { get; set; } = default;
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default;
        #endregion
        #region Reference
        public FormLink<T> Reference { get; set; } = new FormLink<T>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<T> ILeveledEntryGetter<T>.Reference => this.Reference;
        #endregion
        #region Count
        public Int16? Count { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ILeveledEntryGetter<T>.Count => this.Count;
        #endregion
        #region Unknown2
        public Int16? Unknown2 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ILeveledEntryGetter<T>.Unknown2 => this.Unknown2;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LeveledEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILeveledEntryGetter<T> rhs)) return false;
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs);
        }

        public bool Equals(ILeveledEntryGetter<T>? obj)
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LeveledEntry_Registration.TriggeringRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => LeveledEntryCommon<T>.Instance.GetContainedFormLinks(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LeveledEntryCommon<T>.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LeveledEntryCommon<T>.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LeveledEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static LeveledEntry<T> CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LeveledEntry<T>();
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)ret).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LeveledEntry<T> item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)this).CommonSetterInstance(typeof(T))!).Clear(this);
        }

        internal static LeveledEntry<T> GetNew()
        {
            return new LeveledEntry<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledEntry<T> :
        ILeveledEntryGetter<T>,
        ILoquiObjectSetter<ILeveledEntry<T>>,
        ILinkedFormKeyContainer
        where T : class, IOblivionMajorRecordInternal, IBinaryItem
    {
        new Int16 Level { get; set; }
        new Int16 Unknown { get; set; }
        new FormLink<T> Reference { get; set; }
        new Int16? Count { get; set; }
        new Int16? Unknown2 { get; set; }
    }

    public partial interface ILeveledEntryGetter<out T> :
        ILoquiObject,
        ILoquiObject<ILeveledEntryGetter<T>>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
        where T : class, IOblivionMajorRecordGetter, IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance(Type type0);
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance(Type type0);
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => LeveledEntry_Registration.Instance;
        Int16 Level { get; }
        Int16 Unknown { get; }
        IFormLink<T> Reference { get; }
        Int16? Count { get; }
        Int16? Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LeveledEntryMixIn
    {
        public static void Clear<T>(this ILeveledEntry<T> item)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem
        {
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)item).CommonSetterInstance(typeof(T))!).Clear(item: item);
        }

        public static LeveledEntry.Mask<bool> GetEqualsMask<T>(
            this ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance(typeof(T))!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString<T>(
            this ILeveledEntryGetter<T> item,
            string? name = null,
            LeveledEntry.Mask<bool>? printMask = null)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance(typeof(T))!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString<T>(
            this ILeveledEntryGetter<T> item,
            FileGeneration fg,
            string? name = null,
            LeveledEntry.Mask<bool>? printMask = null)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance(typeof(T))!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals<T>(
            this ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn<T, TGetter>(
            this ILeveledEntry<T> lhs,
            ILeveledEntryGetter<TGetter> rhs)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn<T, TGetter, T_TranslMask>(
            this ILeveledEntry<T> lhs,
            ILeveledEntryGetter<TGetter> rhs,
            LeveledEntry.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn<T, TGetter, T_ErrMask, T_TranslMask>(
            this ILeveledEntry<T> lhs,
            ILeveledEntryGetter<TGetter> rhs,
            out LeveledEntry.ErrorMask<T_ErrMask> errorMask,
            LeveledEntry.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LeveledEntry.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn<T, TGetter>(
            this ILeveledEntry<T> lhs,
            ILeveledEntryGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LeveledEntry<T> DeepCopy<T, TGetter, T_TranslMask>(
            this ILeveledEntryGetter<TGetter> item,
            LeveledEntry.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            return ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_TranslMask>(
                item: item,
                copyMask: copyMask);
        }

        public static LeveledEntry<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            this ILeveledEntryGetter<TGetter> item,
            out LeveledEntry.ErrorMask<T_ErrMask> errorMask,
            LeveledEntry.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            return ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LeveledEntry<T> DeepCopy<T, TGetter>(
            this ILeveledEntryGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            return ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary<T>(
            this ILeveledEntry<T> item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem
        {
            ((LeveledEntrySetterCommon<T>)((ILeveledEntryGetter<T>)item).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledEntry_FieldIndex
    {
        Level = 0,
        Unknown = 1,
        Reference = 2,
        Count = 3,
        Unknown2 = 4,
    }
    #endregion

    #region Registration
    public partial class LeveledEntry_Registration : ILoquiRegistration
    {
        public static readonly LeveledEntry_Registration Instance = new LeveledEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 92,
            version: 0);

        public const string GUID = "d73c0730-8b50-4574-9144-4738f8a8f73d";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(LeveledEntry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledEntry.ErrorMask<>);

        public static readonly Type ClassType = typeof(LeveledEntry<>);

        public static readonly Type GetterType = typeof(ILeveledEntryGetter<>);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILeveledEntry<>);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledEntry";

        public const string Name = "LeveledEntry";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 1;

        public static readonly Type? GenericRegistrationType = typeof(LeveledEntry_Registration<>);

        public static readonly RecordType TriggeringRecordType = RecordTypes.LVLO;
        public static readonly Type BinaryWriteTranslation = typeof(LeveledEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }

    public class LeveledEntry_Registration<T> : LeveledEntry_Registration
        where T : OblivionMajorRecord, IBinaryItem
    {
        public static readonly LeveledEntry_Registration<T> GenericInstance = new LeveledEntry_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    return typeof(Int16);
                case LeveledEntry_FieldIndex.Unknown:
                    return typeof(Int16);
                case LeveledEntry_FieldIndex.Reference:
                    return typeof(FormLink<T>);
                case LeveledEntry_FieldIndex.Count:
                    return typeof(Int16);
                case LeveledEntry_FieldIndex.Unknown2:
                    return typeof(Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Common
    public partial class LeveledEntrySetterCommon<T>
        where T : class, IOblivionMajorRecordInternal, IBinaryItem
    {
        public static readonly LeveledEntrySetterCommon<T> Instance = new LeveledEntrySetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(ILeveledEntry<T> item)
        {
            ClearPartial();
            item.Level = default;
            item.Unknown = default;
            item.Reference = FormLink<T>.Null;
            item.Count = default;
            item.Unknown2 = default;
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILeveledEntry<T> item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.LVLO)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LeveledEntryBinaryCreateTranslation<T>.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class LeveledEntryCommon<T>
        where T : class, IOblivionMajorRecordGetter, IBinaryItem
    {
        public static readonly LeveledEntryCommon<T> Instance = new LeveledEntryCommon<T>();

        public LeveledEntry.Mask<bool> GetEqualsMask(
            ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LeveledEntry.Mask<bool>(false);
            ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)item).CommonInstance(typeof(T))!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs,
            LeveledEntry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Level = item.Level == rhs.Level;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Reference = item.Reference.Equals(rhs.Reference);
            ret.Count = item.Count == rhs.Count;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
        }
        
        public string ToString(
            ILeveledEntryGetter<T> item,
            string? name = null,
            LeveledEntry.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILeveledEntryGetter<T> item,
            FileGeneration fg,
            string? name = null,
            LeveledEntry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LeveledEntry<{typeof(T).Name}> =>");
            }
            else
            {
                fg.AppendLine($"{name} (LeveledEntry<{typeof(T).Name}>) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILeveledEntryGetter<T> item,
            FileGeneration fg,
            LeveledEntry.Mask<bool>? printMask = null)
        {
            if (printMask?.Level ?? true)
            {
                fg.AppendItem(item.Level, "Level");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Reference ?? true)
            {
                fg.AppendItem(item.Reference.FormKey, "Reference");
            }
            if ((printMask?.Count ?? true)
                && item.Count.TryGet(out var CountItem))
            {
                fg.AppendItem(CountItem, "Count");
            }
            if ((printMask?.Unknown2 ?? true)
                && item.Unknown2.TryGet(out var Unknown2Item))
            {
                fg.AppendItem(Unknown2Item, "Unknown2");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILeveledEntryGetter<T>? lhs,
            ILeveledEntryGetter<T>? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Level != rhs.Level) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.Reference.Equals(rhs.Reference)) return false;
            if (lhs.Count != rhs.Count) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILeveledEntryGetter<T> item)
        {
            var hash = new HashCode();
            hash.Add(item.Level);
            hash.Add(item.Unknown);
            hash.Add(item.Reference);
            if (item.Count.TryGet(out var Countitem))
            {
                hash.Add(Countitem);
            }
            if (item.Unknown2.TryGet(out var Unknown2item))
            {
                hash.Add(Unknown2item);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew<T_Setter>()
            where T_Setter : class, IOblivionMajorRecordInternal, IBinaryItem
        {
            return LeveledEntry<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ILeveledEntryGetter<T> obj)
        {
            yield return FormLinkInformation.Factory(obj.Reference);
            yield break;
        }
        
        public void RemapLinks(ILeveledEntryGetter<T> obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class LeveledEntrySetterTranslationCommon
    {
        public static readonly LeveledEntrySetterTranslationCommon Instance = new LeveledEntrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn<T, TGetter>(
            ILeveledEntry<T> item,
            ILeveledEntryGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Level) ?? true))
            {
                item.Level = rhs.Level;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Reference) ?? true))
            {
                item.Reference = new FormLink<T>(rhs.Reference.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Count) ?? true))
            {
                item.Count = rhs.Count;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledEntry_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
        }
        
        #endregion
        
        public LeveledEntry<T> DeepCopy<T, TGetter, T_TranslMask>(
            ILeveledEntryGetter<TGetter> item,
            LeveledEntry.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            LeveledEntry<T> ret = (LeveledEntry<T>)((LeveledEntryCommon<TGetter>)((ILeveledEntryGetter<TGetter>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LeveledEntry<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            ILeveledEntryGetter<TGetter> item,
            out LeveledEntry.ErrorMask<T_ErrMask> errorMask,
            LeveledEntry.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LeveledEntry<T> ret = (LeveledEntry<T>)((LeveledEntryCommon<TGetter>)((ILeveledEntryGetter<TGetter>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LeveledEntry.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LeveledEntry<T> DeepCopy<T, TGetter>(
            ILeveledEntryGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            LeveledEntry<T> ret = (LeveledEntry<T>)((LeveledEntryCommon<TGetter>)((ILeveledEntryGetter<TGetter>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((LeveledEntrySetterTranslationCommon)((ILeveledEntryGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LeveledEntry<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledEntry_Registration.Instance;
        public static LeveledEntry_Registration Registration => LeveledEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(LeveledEntryCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected object CommonSetterInstance(Type type0)
        {
            return GenericCommonInstanceGetter.Get(LeveledEntrySetterCommon<T>.Instance, typeof(T), type0);
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LeveledEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonInstance(Type type0) => this.CommonInstance(type0);
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonSetterInstance(Type type0) => this.CommonSetterInstance(type0);
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LeveledEntryBinaryWriteTranslation Instance = new LeveledEntryBinaryWriteTranslation();

        public static void WriteEmbedded<T>(
            ILeveledEntryGetter<T> item,
            MutagenWriter writer)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            writer.Write(item.Level);
            writer.Write(item.Unknown);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference);
            writer.Write(item.Count);
            writer.Write(item.Unknown2);
        }

        public void Write<T>(
            MutagenWriter writer,
            ILeveledEntryGetter<T> item,
            RecordTypeConverter? recordTypeConverter = null)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.LVLO),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            throw new NotImplementedException();
        }

    }

    public partial class LeveledEntryBinaryCreateTranslation<T>
        where T : class, IOblivionMajorRecordInternal, IBinaryItem
    {
        public readonly static LeveledEntryBinaryCreateTranslation<T> Instance = new LeveledEntryBinaryCreateTranslation<T>();

        public static void FillBinaryStructs(
            ILeveledEntry<T> item,
            MutagenFrame frame)
        {
            item.Level = frame.ReadInt16();
            item.Unknown = frame.ReadInt16();
            item.Reference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            if (frame.Complete) return;
            item.Count = frame.ReadInt16();
            if (frame.Complete) return;
            item.Unknown2 = frame.ReadInt16();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LeveledEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary<T, T_ErrMask>(
            this ILeveledEntryGetter<T> item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
        {
            ((LeveledEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledEntryBinaryOverlay<T> :
        BinaryOverlay,
        ILeveledEntryGetter<T>
        where T : class, IOblivionMajorRecordGetter, IBinaryItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledEntry_Registration.Instance;
        public static LeveledEntry_Registration Registration => LeveledEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(LeveledEntryCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LeveledEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonInstance(Type type0) => this.CommonInstance(type0);
        [DebuggerStepThrough]
        object? ILeveledEntryGetter<T>.CommonSetterInstance(Type type0) => null;
        [DebuggerStepThrough]
        object ILeveledEntryGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => LeveledEntryCommon<T>.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LeveledEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Int16 Level => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x0, 0x2));
        public Int16 Unknown => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x2, 0x2));
        public IFormLink<T> Reference => new FormLink<T>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x4, 0x4))));
        public Int16? Count => _data.Length >= 10 ? BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x8, 0x2)) : default(Int16?);
        public Int16? Unknown2 => _data.Length >= 12 ? BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xA, 0x2)) : default(Int16?);
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LeveledEntryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LeveledEntryBinaryOverlay<T> LeveledEntryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LeveledEntryBinaryOverlay<T>(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static LeveledEntryBinaryOverlay<T> LeveledEntryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LeveledEntryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LeveledEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILeveledEntryGetter<T> rhs)) return false;
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs);
        }

        public bool Equals(ILeveledEntryGetter<T>? obj)
        {
            return ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledEntryCommon<T>)((ILeveledEntryGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

namespace Mutagen.Bethesda.Oblivion
{
    public static class LeveledEntry
    {
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Level = initialValue;
                this.Unknown = initialValue;
                this.Reference = initialValue;
                this.Count = initialValue;
                this.Unknown2 = initialValue;
            }
        
            public Mask(
                TItem Level,
                TItem Unknown,
                TItem Reference,
                TItem Count,
                TItem Unknown2)
            {
                this.Level = Level;
                this.Unknown = Unknown;
                this.Reference = Reference;
                this.Count = Count;
                this.Unknown2 = Unknown2;
            }
        
            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618
        
            #endregion
        
            #region Members
            public TItem Level;
            public TItem Unknown;
            public TItem Reference;
            public TItem Count;
            public TItem Unknown2;
            #endregion
        
            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }
        
            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Level, rhs.Level)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Reference, rhs.Reference)) return false;
                if (!object.Equals(this.Count, rhs.Count)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Level);
                hash.Add(this.Unknown);
                hash.Add(this.Reference);
                hash.Add(this.Count);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }
        
            #endregion
        
            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Level)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Reference)) return false;
                if (!eval(this.Count)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion
        
            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Level)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Reference)) return true;
                if (eval(this.Count)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion
        
            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LeveledEntry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }
        
            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Level = eval(this.Level);
                obj.Unknown = eval(this.Unknown);
                obj.Reference = eval(this.Reference);
                obj.Count = eval(this.Count);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion
        
            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }
        
            public string ToString(LeveledEntry.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }
        
            public void ToString(FileGeneration fg, LeveledEntry.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LeveledEntry.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Level ?? true)
                    {
                        fg.AppendItem(Level, "Level");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Reference ?? true)
                    {
                        fg.AppendItem(Reference, "Reference");
                    }
                    if (printMask?.Count ?? true)
                    {
                        fg.AppendItem(Count, "Count");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion
        
        }
        
        public class ErrorMask<T_ErrMask> :
            IErrorMask,
            IErrorMask<ErrorMask<T_ErrMask>>
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Level;
            public Exception? Unknown;
            public Exception? Reference;
            public Exception? Count;
            public Exception? Unknown2;
            #endregion
        
            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledEntry_FieldIndex.Level:
                        return Level;
                    case LeveledEntry_FieldIndex.Unknown:
                        return Unknown;
                    case LeveledEntry_FieldIndex.Reference:
                        return Reference;
                    case LeveledEntry_FieldIndex.Count:
                        return Count;
                    case LeveledEntry_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthException(int index, Exception ex)
            {
                LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledEntry_FieldIndex.Level:
                        this.Level = ex;
                        break;
                    case LeveledEntry_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case LeveledEntry_FieldIndex.Reference:
                        this.Reference = ex;
                        break;
                    case LeveledEntry_FieldIndex.Count:
                        this.Count = ex;
                        break;
                    case LeveledEntry_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthMask(int index, object obj)
            {
                LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledEntry_FieldIndex.Level:
                        this.Level = (Exception?)obj;
                        break;
                    case LeveledEntry_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case LeveledEntry_FieldIndex.Reference:
                        this.Reference = (Exception?)obj;
                        break;
                    case LeveledEntry_FieldIndex.Count:
                        this.Count = (Exception?)obj;
                        break;
                    case LeveledEntry_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Level != null) return true;
                if (Unknown != null) return true;
                if (Reference != null) return true;
                if (Count != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion
        
            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }
        
            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Level, "Level");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Reference, "Reference");
                fg.AppendItem(Count, "Count");
                fg.AppendItem(Unknown2, "Unknown2");
            }
            #endregion
        
            #region Combine
            public ErrorMask<T_ErrMask> Combine(ErrorMask<T_ErrMask>? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask<T_ErrMask>();
                ret.Level = this.Level.Combine(rhs.Level);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Reference = this.Reference.Combine(rhs.Reference);
                ret.Count = this.Count.Combine(rhs.Count);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask<T_ErrMask>? Combine(ErrorMask<T_ErrMask>? lhs, ErrorMask<T_ErrMask>? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion
        
            #region Factory
            public static ErrorMask<T_ErrMask> Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask<T_ErrMask>();
            }
            #endregion
        
        }
        public class TranslationMask<T_TranslMask> : ITranslationMask
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Level;
            public bool Unknown;
            public bool Reference;
            public bool Count;
            public bool Unknown2;
            #endregion
        
            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Level = defaultOn;
                this.Unknown = defaultOn;
                this.Reference = defaultOn;
                this.Count = defaultOn;
                this.Unknown2 = defaultOn;
            }
        
            #endregion
        
            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }
        
            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Level, null));
                ret.Add((Unknown, null));
                ret.Add((Reference, null));
                ret.Add((Count, null));
                ret.Add((Unknown2, null));
            }
        
            public static implicit operator TranslationMask<T_TranslMask>(bool defaultOn)
            {
                return new TranslationMask<T_TranslMask>(defaultOn: defaultOn, onOverall: defaultOn);
            }
        
        }
    }
}
