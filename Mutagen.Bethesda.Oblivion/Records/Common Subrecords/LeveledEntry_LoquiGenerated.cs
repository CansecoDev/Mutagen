/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledEntry<T> : ILeveledEntry<T>, ILoquiObjectSetter, IEquatable<LeveledEntry<T>>
        where T : Bethesda.MajorRecord, ILoquiObjectGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledEntry_Registration.Instance;
        public static LeveledEntry_Registration Registration => LeveledEntry_Registration.Instance;

        #region Ctor
        public LeveledEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Level
        protected readonly INotifyingItem<Int16> _Level = NotifyingItem.Factory<Int16>();
        public INotifyingItem<Int16> Level_Property => _Level;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int16 Level
        {
            get => this._Level.Item;
            set => this._Level.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int16> ILeveledEntry<T>.Level_Property => this.Level_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int16> ILeveledEntryGetter<T>.Level_Property => this.Level_Property;
        #endregion
        #region Fluff
        protected readonly INotifyingItem<Byte[]> _Fluff = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[2]);
        public INotifyingItem<Byte[]> Fluff_Property => _Fluff;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff
        {
            get => this._Fluff.Item;
            set => this._Fluff.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> ILeveledEntry<T>.Fluff_Property => this.Fluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> ILeveledEntryGetter<T>.Fluff_Property => this.Fluff_Property;
        #endregion
        #region Reference
        public FormIDLink<T> Reference_Property { get; } = new FormIDLink<T>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public T Reference { get => Reference_Property.Item; set => Reference_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<T> ILeveledEntryGetter<T>.Reference_Property => this.Reference_Property;
        #endregion
        #region Count
        protected readonly INotifyingSetItem<Int16> _Count = NotifyingSetItem.Factory<Int16>(markAsSet: false);
        public INotifyingSetItem<Int16> Count_Property => _Count;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int16 Count
        {
            get => this._Count.Item;
            set => this._Count.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int16> ILeveledEntry<T>.Count_Property => this.Count_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int16> ILeveledEntryGetter<T>.Count_Property => this.Count_Property;
        #endregion
        #region Fluff2
        protected readonly INotifyingSetItem<Byte[]> _Fluff2 = NotifyingSetItem.Factory<Byte[]>(
            markAsSet: false,
            noNullFallback: () => new byte[2]);
        public INotifyingSetItem<Byte[]> Fluff2_Property => _Fluff2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff2
        {
            get => this._Fluff2.Item;
            set => this._Fluff2.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> ILeveledEntry<T>.Fluff2_Property => this.Fluff2_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> ILeveledEntryGetter<T>.Fluff2_Property => this.Fluff2_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => LeveledEntryCommon.GetNthObject<T>(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => LeveledEntryCommon.GetNthObjectHasBeenSet<T>(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LeveledEntryCommon.UnsetNthObject<T>(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LeveledEntryCommon.SetNthObjectHasBeenSet<T>(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return LeveledEntryCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            LeveledEntry_Mask<bool> printMask = null)
        {
            return LeveledEntryCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LeveledEntryCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public LeveledEntry_Mask<bool> GetHasBeenSetMask()
        {
            return LeveledEntryCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledEntry<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledEntry<T> rhs)
        {
            if (rhs == null) return false;
            if (Level != rhs.Level) return false;
            if (!Fluff.EqualsFast(rhs.Fluff)) return false;
            if (Reference != rhs.Reference) return false;
            if (Count_Property.HasBeenSet != rhs.Count_Property.HasBeenSet) return false;
            if (Count_Property.HasBeenSet)
            {
                if (Count != rhs.Count) return false;
            }
            if (Fluff2_Property.HasBeenSet != rhs.Fluff2_Property.HasBeenSet) return false;
            if (Fluff2_Property.HasBeenSet)
            {
                if (!Fluff2.EqualsFast(rhs.Fluff2)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Level).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Reference).CombineHashCode(ret);
            if (Count_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Count).CombineHashCode(ret);
            }
            if (Fluff2_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Fluff2).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static LeveledEntry<T> Create_XML(XElement root)
        {
            return Create_XML<MajorRecord_ErrorMask>(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledEntry<T> Create_XML<T_ErrMask>(
            XElement root,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledEntry<T> Create_XML<T_ErrMask>(
            XElement root,
            bool doMasks,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var ret = Create_XML<T_ErrMask>(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LeveledEntry<T> Object, LeveledEntry_ErrorMask<T_ErrMask> ErrorMask) Create_XML<T_ErrMask>(
            XElement root,
            bool doMasks)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LeveledEntry_ErrorMask<T_ErrMask> errMaskRet = null;
            var ret = Create_XML_Internal<T_ErrMask>(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledEntry_ErrorMask<T_ErrMask>()) : default(Func<LeveledEntry_ErrorMask<T_ErrMask>>));
            return (ret, errMaskRet);
        }

        public static LeveledEntry<T> Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static LeveledEntry<T> Create_XML<T_ErrMask>(
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static LeveledEntry<T> Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static LeveledEntry<T> Create_XML<T_ErrMask>(
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LeveledEntry<T>, LeveledEntry_ErrorMask<MajorRecord_ErrorMask>>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML<T_ErrMask>(
            XElement root,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LoquiXmlTranslation<LeveledEntry<T>, LeveledEntry_ErrorMask<T_ErrMask>>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML<T_ErrMask>(
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML<T_ErrMask>(
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML<T_ErrMask>(
            XmlWriter writer,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            errorMask = (LeveledEntry_ErrorMask<T_ErrMask>)this.Write_XML_Internal<T_ErrMask>(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML<T_ErrMask>(
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML<T_ErrMask>(
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            Write_XML<MajorRecord_ErrorMask>(
                writer: writer,
                name: name);
        }

        public void Write_XML<T_ErrMask>(
            XmlWriter writer,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            this.Write_XML_Internal<T_ErrMask>(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            Write_XML<MajorRecord_ErrorMask>(
                path: path,
                name: name);
        }

        public void Write_XML<T_ErrMask>(
            string path,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            Write_XML<MajorRecord_ErrorMask>(
                stream: stream,
                name: name);
        }

        public void Write_XML<T_ErrMask>(
            Stream stream,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal<T_ErrMask>(
            XmlWriter writer,
            bool doMasks,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LeveledEntryCommon.Write_XML<T, T_ErrMask>(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LeveledEntry<T> Create_XML_Internal<T_ErrMask>(
            XElement root,
            Func<LeveledEntry_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var ret = new LeveledEntry<T>();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal<T_ErrMask>(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal<T_ErrMask>(
            LeveledEntry<T> item,
            XElement root,
            string name,
            Func<LeveledEntry_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            switch (name)
            {
                case "Level":
                    item._Level.SetIfSucceeded(Int16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)LeveledEntry_FieldIndex.Level,
                        errorMask: errorMask));
                    break;
                case "Fluff":
                    item._Fluff.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)LeveledEntry_FieldIndex.Fluff,
                        errorMask: errorMask));
                    break;
                case "Reference":
                    item.Reference_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)LeveledEntry_FieldIndex.Reference,
                        errorMask: errorMask));
                    break;
                case "Count":
                    item._Count.SetIfSucceeded(Int16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)LeveledEntry_FieldIndex.Count,
                        errorMask: errorMask));
                    break;
                case "Fluff2":
                    item._Fluff2.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)LeveledEntry_FieldIndex.Fluff2,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public bool StructCustom;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static LeveledEntry<T> Create_Binary(MutagenFrame frame)
        {
            return Create_Binary<MajorRecord_ErrorMask>(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledEntry<T> Create_Binary<T_ErrMask>(
            MutagenFrame frame,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledEntry<T> Create_Binary<T_ErrMask>(
            MutagenFrame frame,
            bool doMasks,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var ret = Create_Binary<T_ErrMask>(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LeveledEntry<T> Object, LeveledEntry_ErrorMask<T_ErrMask> ErrorMask) Create_Binary<T_ErrMask>(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LeveledEntry_ErrorMask<T_ErrMask> errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledEntry_ErrorMask<T_ErrMask>()) : default(Func<LeveledEntry_ErrorMask<T_ErrMask>>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static LeveledEntry<T> Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LeveledEntry<T> Create_Binary<T_ErrMask>(
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static LeveledEntry<T> Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LeveledEntry<T> Create_Binary<T_ErrMask>(
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<LeveledEntry<T>, LeveledEntry_ErrorMask<MajorRecord_ErrorMask>>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary<T_ErrMask>(
            MutagenFrame frame,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LoquiBinaryTranslation<LeveledEntry<T>, LeveledEntry_ErrorMask<T_ErrMask>>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary<T_ErrMask>(
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary<T_ErrMask>(
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary<T_ErrMask>(
            MutagenWriter writer,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            errorMask = (LeveledEntry_ErrorMask<T_ErrMask>)this.Write_Binary_Internal<T_ErrMask>(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary<T_ErrMask>(
            string path,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary<T_ErrMask>(
            Stream stream,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            Write_Binary<MajorRecord_ErrorMask>(writer: writer);
        }

        public void Write_Binary<T_ErrMask>(MutagenWriter writer)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            this.Write_Binary_Internal<T_ErrMask>(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            Write_Binary<MajorRecord_ErrorMask>(path: path);
        }

        public void Write_Binary<T_ErrMask>(string path)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            Write_Binary<MajorRecord_ErrorMask>(stream: stream);
        }

        public void Write_Binary<T_ErrMask>(Stream stream)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal<T_ErrMask>(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LeveledEntryCommon.Write_Binary<T, T_ErrMask>(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LeveledEntry<T> Create_Binary_Internal<T_ErrMask>(
            MutagenFrame frame,
            Func<LeveledEntry_ErrorMask<T_ErrMask>> errorMask,
            RecordTypeConverter recordTypeConverter)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var ret = new LeveledEntry<T>();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    LeveledEntry_Registration.LVLO_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
                if (ret.StructCustom)
                {
                    object structUnsubber = new object();
                    Action unsubAction = () =>
                    {
                        ret.Count_Property.Unsubscribe(structUnsubber);
                        ret.Fluff2_Property.Unsubscribe(structUnsubber);
                        ret.StructCustom = false;
                    };
                    ret.Count_Property.Subscribe(
                        owner: structUnsubber,
                        callback: unsubAction,
                        cmds: NotifyingSubscribeParameters.NoFire);
                    ret.Fluff2_Property.Subscribe(
                        owner: structUnsubber,
                        callback: unsubAction,
                        cmds: NotifyingSubscribeParameters.NoFire);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs<T_ErrMask>(
            LeveledEntry<T> item,
            MutagenFrame frame,
            Func<LeveledEntry_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            item._Level.SetIfSucceeded(Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)LeveledEntry_FieldIndex.Level,
                errorMask: errorMask));
            var FlufftryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(2)),
                fieldIndex: (int)LeveledEntry_FieldIndex.Fluff,
                errorMask: errorMask);
            item._Fluff.SetIfSucceeded(FlufftryGet);
            item.Reference_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)LeveledEntry_FieldIndex.Reference,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._Count.SetIfSucceeded(Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)LeveledEntry_FieldIndex.Count,
                errorMask: errorMask));
            if (frame.Complete) return;
            var Fluff2tryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(2)),
                fieldIndex: (int)LeveledEntry_FieldIndex.Fluff2,
                errorMask: errorMask);
            item._Fluff2.SetIfSucceeded(Fluff2tryGet);
        }

        #endregion

        public LeveledEntry<T> Copy<T_CopyMask>(
            LeveledEntry_CopyMask<T_CopyMask> copyMask = null,
            ILeveledEntryGetter<T> def = null)
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            return LeveledEntry<T>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LeveledEntry<T> Copy<T_CopyMask>(
            ILeveledEntry<T> item,
            LeveledEntry_CopyMask<T_CopyMask> copyMask = null,
            ILeveledEntryGetter<T> def = null)
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            LeveledEntry<T> ret;
            if (item.GetType().Equals(typeof(LeveledEntry<T>)))
            {
                ret = new LeveledEntry<T>();
            }
            else
            {
                ret = (LeveledEntry<T>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType, T_CopyMask>(
            CopyType item,
            LeveledEntry_CopyMask<T_CopyMask> copyMask = null,
            ILeveledEntryGetter<T> def = null)
            where T_CopyMask : MajorRecord_CopyMask, new()
            where CopyType : class, ILeveledEntry<T>
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(LeveledEntry<T>)))
            {
                ret = new LeveledEntry<T>() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<T, MajorRecord_ErrorMask, T_CopyMask>(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static LeveledEntry<T> Copy_ToLoqui<T_CopyMask>(
            ILeveledEntryGetter<T> item,
            LeveledEntry_CopyMask<T_CopyMask> copyMask = null,
            ILeveledEntryGetter<T> def = null)
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            LeveledEntry<T> ret;
            if (item.GetType().Equals(typeof(LeveledEntry<T>)))
            {
                ret = new LeveledEntry<T>() as LeveledEntry<T>;
            }
            else
            {
                ret = (LeveledEntry<T>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    this._Level.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case LeveledEntry_FieldIndex.Fluff:
                    this._Fluff.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case LeveledEntry_FieldIndex.Reference:
                    this.Reference_Property.Set(
                        (FormIDLink<T>)obj,
                        cmds);
                    break;
                case LeveledEntry_FieldIndex.Count:
                    this._Count.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case LeveledEntry_FieldIndex.Fluff2:
                    this._Fluff2.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LeveledEntryCommon.Clear(this, cmds);
        }


        public static LeveledEntry<T> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LeveledEntry<T>();
            foreach (var pair in fields)
            {
                CopyInInternal_LeveledEntry(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_LeveledEntry(LeveledEntry<T> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LeveledEntry_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    obj._Level.Set(
                        (Int16)pair.Value,
                        null);
                    break;
                case LeveledEntry_FieldIndex.Fluff:
                    obj._Fluff.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case LeveledEntry_FieldIndex.Reference:
                    obj.Reference_Property.Set(
                        (FormIDLink<T>)pair.Value,
                        null);
                    break;
                case LeveledEntry_FieldIndex.Count:
                    obj._Count.Set(
                        (Int16)pair.Value,
                        null);
                    break;
                case LeveledEntry_FieldIndex.Fluff2:
                    obj._Fluff2.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LeveledEntry<T> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ILeveledEntry<T> : ILeveledEntryGetter<T>, ILoquiClass<ILeveledEntry<T>, ILeveledEntryGetter<T>>, ILoquiClass<LeveledEntry<T>, ILeveledEntryGetter<T>>
        where T : Bethesda.MajorRecord, ILoquiObjectGetter
    {
        new Int16 Level { get; set; }
        new INotifyingItem<Int16> Level_Property { get; }

        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

        new T Reference { get; set; }
        new Int16 Count { get; set; }
        new INotifyingSetItem<Int16> Count_Property { get; }

        new Byte[] Fluff2 { get; set; }
        new INotifyingSetItem<Byte[]> Fluff2_Property { get; }

    }

    public interface ILeveledEntryGetter<T> : ILoquiObject
        where T : Bethesda.MajorRecord, ILoquiObjectGetter
    {
        #region Level
        Int16 Level { get; }
        INotifyingItemGetter<Int16> Level_Property { get; }

        #endregion
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region Reference
        T Reference { get; }
        FormIDLink<T> Reference_Property { get; }

        #endregion
        #region Count
        Int16 Count { get; }
        INotifyingSetItemGetter<Int16> Count_Property { get; }

        #endregion
        #region Fluff2
        Byte[] Fluff2 { get; }
        INotifyingSetItemGetter<Byte[]> Fluff2_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledEntry_FieldIndex
    {
        Level = 0,
        Fluff = 1,
        Reference = 2,
        Count = 3,
        Fluff2 = 4,
    }
    #endregion

    #region Registration
    public class LeveledEntry_Registration : ILoquiRegistration
    {
        public static readonly LeveledEntry_Registration Instance = new LeveledEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 92,
            version: 0);

        public const string GUID = "d73c0730-8b50-4574-9144-4738f8a8f73d";

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(LeveledEntry_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledEntry_ErrorMask<>);

        public static readonly Type ClassType = typeof(LeveledEntry<>);

        public static readonly Type GetterType = typeof(ILeveledEntryGetter<>);

        public static readonly Type SetterType = typeof(ILeveledEntry<>);

        public static readonly Type CommonType = typeof(LeveledEntryCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledEntry";

        public const string Name = "LeveledEntry";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 1;

        public static readonly Type GenericRegistrationType = typeof(LeveledEntry_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "LEVEL":
                    return (ushort)LeveledEntry_FieldIndex.Level;
                case "FLUFF":
                    return (ushort)LeveledEntry_FieldIndex.Fluff;
                case "REFERENCE":
                    return (ushort)LeveledEntry_FieldIndex.Reference;
                case "COUNT":
                    return (ushort)LeveledEntry_FieldIndex.Count;
                case "FLUFF2":
                    return (ushort)LeveledEntry_FieldIndex.Fluff2;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    return "Level";
                case LeveledEntry_FieldIndex.Fluff:
                    return "Fluff";
                case LeveledEntry_FieldIndex.Reference:
                    return "Reference";
                case LeveledEntry_FieldIndex.Count:
                    return "Count";
                case LeveledEntry_FieldIndex.Fluff2:
                    return "Fluff2";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                case LeveledEntry_FieldIndex.Count:
                case LeveledEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        public static readonly RecordType LVLO_HEADER = new RecordType("LVLO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LVLO_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class LeveledEntry_Registration<T> : LeveledEntry_Registration
        where T : Bethesda.MajorRecord, ILoquiObjectGetter
    {
        public static readonly LeveledEntry_Registration<T> GenericInstance = new LeveledEntry_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    return typeof(Int16);
                case LeveledEntry_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case LeveledEntry_FieldIndex.Reference:
                    return typeof(FormIDLink<T>);
                case LeveledEntry_FieldIndex.Count:
                    return typeof(Int16);
                case LeveledEntry_FieldIndex.Fluff2:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Extensions
    public static partial class LeveledEntryCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<T, T_CopyMask>(
            this ILeveledEntry<T> item,
            ILeveledEntryGetter<T> rhs,
            LeveledEntry_CopyMask<T_CopyMask> copyMask = null,
            ILeveledEntryGetter<T> def = null,
            NotifyingFireParameters cmds = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            LeveledEntryCommon.CopyFieldsFrom<T, MajorRecord_ErrorMask, T_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
            this ILeveledEntry<T> item,
            ILeveledEntryGetter<T> rhs,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_CopyMask<T_CopyMask> copyMask = null,
            ILeveledEntryGetter<T> def = null,
            NotifyingFireParameters cmds = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            LeveledEntryCommon.CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
            this ILeveledEntry<T> item,
            ILeveledEntryGetter<T> rhs,
            ILeveledEntryGetter<T> def,
            bool doMasks,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            LeveledEntry_CopyMask<T_CopyMask> copyMask,
            NotifyingFireParameters cmds = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            LeveledEntry_ErrorMask<T_ErrMask> retErrorMask = null;
            Func<LeveledEntry_ErrorMask<T_ErrMask>> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new LeveledEntry_ErrorMask<T_ErrMask>();
                }
                return retErrorMask;
            };
            CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
            this ILeveledEntry<T> item,
            ILeveledEntryGetter<T> rhs,
            ILeveledEntryGetter<T> def,
            bool doMasks,
            Func<LeveledEntry_ErrorMask<T_ErrMask>> errorMask,
            LeveledEntry_CopyMask<T_CopyMask> copyMask,
            NotifyingFireParameters cmds = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            if (copyMask?.Level ?? true)
            {
                try
                {
                    item.Level_Property.Set(
                        value: rhs.Level,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledEntry_FieldIndex.Level, ex);
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                try
                {
                    item.Fluff_Property.Set(
                        value: rhs.Fluff,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledEntry_FieldIndex.Fluff, ex);
                }
            }
            if (copyMask?.Reference ?? true)
            {
                try
                {
                    item.Reference_Property.Set(
                        value: rhs.Reference,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledEntry_FieldIndex.Reference, ex);
                }
            }
            if (copyMask?.Count ?? true)
            {
                try
                {
                    item.Count_Property.SetToWithDefault(
                        rhs: rhs.Count_Property,
                        def: def?.Count_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledEntry_FieldIndex.Count, ex);
                }
            }
            if (copyMask?.Fluff2 ?? true)
            {
                try
                {
                    item.Fluff2_Property.SetToWithDefault(
                        rhs: rhs.Fluff2_Property,
                        def: def?.Fluff2_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledEntry_FieldIndex.Fluff2, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet<T>(
            ushort index,
            bool on,
            ILeveledEntry<T> obj,
            NotifyingFireParameters cmds = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case LeveledEntry_FieldIndex.Count:
                    obj.Count_Property.HasBeenSet = on;
                    break;
                case LeveledEntry_FieldIndex.Fluff2:
                    obj.Fluff2_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject<T>(
            ushort index,
            ILeveledEntry<T> obj,
            NotifyingUnsetParameters cmds = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    obj.Level = default(Int16);
                    break;
                case LeveledEntry_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case LeveledEntry_FieldIndex.Reference:
                    obj.Reference = default(FormIDLink<T>);
                    break;
                case LeveledEntry_FieldIndex.Count:
                    obj.Count_Property.Unset(cmds);
                    break;
                case LeveledEntry_FieldIndex.Fluff2:
                    obj.Fluff2_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet<T>(
            ushort index,
            ILeveledEntry<T> obj)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                case LeveledEntry_FieldIndex.Fluff:
                case LeveledEntry_FieldIndex.Reference:
                    return true;
                case LeveledEntry_FieldIndex.Count:
                    return obj.Count_Property.HasBeenSet;
                case LeveledEntry_FieldIndex.Fluff2:
                    return obj.Fluff2_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject<T>(
            ushort index,
            ILeveledEntryGetter<T> obj)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    return obj.Level;
                case LeveledEntry_FieldIndex.Fluff:
                    return obj.Fluff;
                case LeveledEntry_FieldIndex.Reference:
                    return obj.Reference;
                case LeveledEntry_FieldIndex.Count:
                    return obj.Count;
                case LeveledEntry_FieldIndex.Fluff2:
                    return obj.Fluff2;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear<T>(
            ILeveledEntry<T> item,
            NotifyingUnsetParameters cmds = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            item.Level = default(Int16);
            item.Fluff = default(Byte[]);
            item.Reference = default(FormIDLink<T>);
            item.Count_Property.Unset(cmds.ToUnsetParams());
            item.Fluff2_Property.Unset(cmds.ToUnsetParams());
        }

        public static LeveledEntry_Mask<bool> GetEqualsMask<T>(
            this ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            var ret = new LeveledEntry_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask<T>(
            ILeveledEntryGetter<T> item,
            ILeveledEntryGetter<T> rhs,
            LeveledEntry_Mask<bool> ret)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            if (rhs == null) return;
            ret.Level = item.Level == rhs.Level;
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            ret.Reference = item.Reference == rhs.Reference;
            ret.Count = item.Count_Property.Equals(rhs.Count_Property, (l, r) => l == r);
            ret.Fluff2 = item.Fluff2_Property.Equals(rhs.Fluff2_Property, (l, r) => l.EqualsFast(r));
        }

        public static string ToString<T>(
            this ILeveledEntryGetter<T> item,
            string name = null,
            LeveledEntry_Mask<bool> printMask = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<T>(
            this ILeveledEntryGetter<T> item,
            FileGeneration fg,
            string name = null,
            LeveledEntry_Mask<bool> printMask = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LeveledEntry<T>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LeveledEntry<T>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {item.Level}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {item.Reference}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {item.Count}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {item.Fluff2}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<T>(
            this ILeveledEntryGetter<T> item,
            LeveledEntry_Mask<bool?> checkMask)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            if (checkMask.Count.HasValue && checkMask.Count.Value != item.Count_Property.HasBeenSet) return false;
            if (checkMask.Fluff2.HasValue && checkMask.Fluff2.Value != item.Fluff2_Property.HasBeenSet) return false;
            return true;
        }

        public static LeveledEntry_Mask<bool> GetHasBeenSetMask<T>(ILeveledEntryGetter<T> item)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
        {
            var ret = new LeveledEntry_Mask<bool>();
            ret.Level = true;
            ret.Fluff = true;
            ret.Reference = true;
            ret.Count = item.Count_Property.HasBeenSet;
            ret.Fluff2 = item.Fluff2_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML<T, T_ErrMask>(
            XmlWriter writer,
            ILeveledEntryGetter<T> item,
            bool doMasks,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask,
            string name = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LeveledEntry_ErrorMask<T_ErrMask> errMaskRet = null;
            Write_XML_Internal<T, T_ErrMask>(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledEntry_ErrorMask<T_ErrMask>()) : default(Func<LeveledEntry_ErrorMask<T_ErrMask>>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal<T, T_ErrMask>(
            XmlWriter writer,
            ILeveledEntryGetter<T> item,
            Func<LeveledEntry_ErrorMask<T_ErrMask>> errorMask,
            string name = null)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.LeveledEntry"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.LeveledEntry");
                    }
                    Int16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Level),
                        item: item.Level_Property,
                        fieldIndex: (int)LeveledEntry_FieldIndex.Level,
                        errorMask: errorMask);
                    ByteArrayXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Fluff),
                        item: item.Fluff_Property,
                        fieldIndex: (int)LeveledEntry_FieldIndex.Fluff,
                        errorMask: errorMask);
                    FormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Reference),
                        item: item.Reference?.FormID,
                        fieldIndex: (int)LeveledEntry_FieldIndex.Reference,
                        errorMask: errorMask);
                    if (item.Count_Property.HasBeenSet)
                    {
                        Int16XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Count),
                            item: item.Count_Property,
                            fieldIndex: (int)LeveledEntry_FieldIndex.Count,
                            errorMask: errorMask);
                    }
                    if (item.Fluff2_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Fluff2),
                            item: item.Fluff2_Property,
                            fieldIndex: (int)LeveledEntry_FieldIndex.Fluff2,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary<T, T_ErrMask>(
            MutagenWriter writer,
            LeveledEntry<T> item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LeveledEntry_ErrorMask<T_ErrMask> errorMask)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LeveledEntry_ErrorMask<T_ErrMask> errMaskRet = null;
            Write_Binary_Internal<T, T_ErrMask>(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledEntry_ErrorMask<T_ErrMask>()) : default(Func<LeveledEntry_ErrorMask<T_ErrMask>>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal<T, T_ErrMask>(
            MutagenWriter writer,
            LeveledEntry<T> item,
            RecordTypeConverter recordTypeConverter,
            Func<LeveledEntry_ErrorMask<T_ErrMask>> errorMask)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: LeveledEntry_Registration.LVLO_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded<T, T_ErrMask>(
            LeveledEntry<T> item,
            MutagenWriter writer,
            Func<LeveledEntry_ErrorMask<T_ErrMask>> errorMask)
            where T : Bethesda.MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Level_Property,
                fieldIndex: (int)LeveledEntry_FieldIndex.Level,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff_Property,
                fieldIndex: (int)LeveledEntry_FieldIndex.Fluff,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference_Property,
                fieldIndex: (int)LeveledEntry_FieldIndex.Reference,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Count_Property,
                fieldIndex: (int)LeveledEntry_FieldIndex.Count,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff2_Property,
                fieldIndex: (int)LeveledEntry_FieldIndex.Fluff2,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class LeveledEntry_Mask<T> : IMask<T>, IEquatable<LeveledEntry_Mask<T>>
    {
        #region Ctors
        public LeveledEntry_Mask()
        {
        }

        public LeveledEntry_Mask(T initialValue)
        {
            this.Level = initialValue;
            this.Fluff = initialValue;
            this.Reference = initialValue;
            this.Count = initialValue;
            this.Fluff2 = initialValue;
        }
        #endregion

        #region Members
        public T Level;
        public T Fluff;
        public T Reference;
        public T Count;
        public T Fluff2;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledEntry_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledEntry_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Level, rhs.Level)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.Reference, rhs.Reference)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Level?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.Reference?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff2?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Level)) return false;
            if (!eval(this.Fluff)) return false;
            if (!eval(this.Reference)) return false;
            if (!eval(this.Count)) return false;
            if (!eval(this.Fluff2)) return false;
            return true;
        }
        #endregion

        #region Translate
        public LeveledEntry_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LeveledEntry_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LeveledEntry_Mask<R> obj, Func<T, R> eval)
        {
            obj.Level = eval(this.Level);
            obj.Fluff = eval(this.Fluff);
            obj.Reference = eval(this.Reference);
            obj.Count = eval(this.Count);
            obj.Fluff2 = eval(this.Fluff2);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LeveledEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LeveledEntry_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LeveledEntry_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {Level}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {Reference}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {Fluff2}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LeveledEntry_ErrorMask<T_ErrMask> : IErrorMask, IErrorMask<LeveledEntry_ErrorMask<T_ErrMask>>
        where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Level;
        public Exception Fluff;
        public Exception Reference;
        public Exception Count;
        public Exception Fluff2;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    this.Level = ex;
                    break;
                case LeveledEntry_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case LeveledEntry_FieldIndex.Reference:
                    this.Reference = ex;
                    break;
                case LeveledEntry_FieldIndex.Count:
                    this.Count = ex;
                    break;
                case LeveledEntry_FieldIndex.Fluff2:
                    this.Fluff2 = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LeveledEntry_FieldIndex enu = (LeveledEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledEntry_FieldIndex.Level:
                    this.Level = (Exception)obj;
                    break;
                case LeveledEntry_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case LeveledEntry_FieldIndex.Reference:
                    this.Reference = (Exception)obj;
                    break;
                case LeveledEntry_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                case LeveledEntry_FieldIndex.Fluff2:
                    this.Fluff2 = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Level != null) return true;
            if (Fluff != null) return true;
            if (Reference != null) return true;
            if (Count != null) return true;
            if (Fluff2 != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LeveledEntry_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Level => {Level}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"Reference => {Reference}");
            fg.AppendLine($"Count => {Count}");
            fg.AppendLine($"Fluff2 => {Fluff2}");
        }
        #endregion

        #region Combine
        public LeveledEntry_ErrorMask<T_ErrMask> Combine(LeveledEntry_ErrorMask<T_ErrMask> rhs)
        {
            var ret = new LeveledEntry_ErrorMask<T_ErrMask>();
            ret.Level = this.Level.Combine(rhs.Level);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.Reference = this.Reference.Combine(rhs.Reference);
            ret.Count = this.Count.Combine(rhs.Count);
            ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
            return ret;
        }
        public static LeveledEntry_ErrorMask<T_ErrMask> Combine(LeveledEntry_ErrorMask<T_ErrMask> lhs, LeveledEntry_ErrorMask<T_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class LeveledEntry_CopyMask<T_CopyMask>
        where T_CopyMask : MajorRecord_CopyMask, new()
    {
        #region Members
        public bool Level;
        public bool Fluff;
        public bool Reference;
        public bool Count;
        public bool Fluff2;
        #endregion

    }
    #endregion




    #endregion

}
