/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Model : 
        LoquiNotifyingObject,
        IModel,
        ILoquiObject<Model>,
        ILoquiObjectSetter,
        IEquatable<Model>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static Model_Registration Registration => Model_Registration.Instance;

        #region Ctor
        public Model()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        private String _File;
        public String File
        {
            get => this._File;
            set => this.RaiseAndSetIfChanged(ref this._File, value, nameof(File));
        }
        #endregion
        #region BoundRadius
        private Single _BoundRadius;
        public Single BoundRadius
        {
            get => this._BoundRadius;
            set => this.RaiseAndSetIfChanged(ref this._BoundRadius, value, nameof(BoundRadius));
        }
        #endregion
        #region Hashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool Hashes_IsSet
        {
            get => _hasBeenSetTracker[(int)Model_FieldIndex.Hashes];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Model_FieldIndex.Hashes, nameof(Hashes_IsSet));
        }
        bool IModelGetter.Hashes_IsSet => Hashes_IsSet;
        protected Byte[] _Hashes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Hashes
        {
            get => this._Hashes;
            set => Hashes_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte[] IModelGetter.Hashes => this.Hashes;
        public void Hashes_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Hashes, value, _hasBeenSetTracker, markSet, (int)Model_FieldIndex.Hashes, nameof(Hashes), nameof(Hashes_IsSet));
        }
        public void Hashes_Unset()
        {
            this.Hashes_Set(default(Byte[]), false);
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ModelCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ModelCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ModelCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ModelCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<Model>.GetEqualsMask(Model rhs) => ModelCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IModelGetter>.GetEqualsMask(IModelGetter rhs) => ModelCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            Model_Mask<bool> printMask = null)
        {
            return ModelCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ModelCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Model_Mask<bool> GetHasBeenSetMask()
        {
            return ModelCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Model rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Model rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.File, rhs.File)) return false;
            if (!this.BoundRadius.EqualsWithin(rhs.BoundRadius)) return false;
            if (Hashes_IsSet != rhs.Hashes_IsSet) return false;
            if (Hashes_IsSet)
            {
                if (!this.Hashes.EqualsFast(rhs.Hashes)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(File).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BoundRadius).CombineHashCode(ret);
            if (Hashes_IsSet)
            {
                ret = HashHelper.GetHashCode(Hashes).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Model Create_Xml(
            XElement root,
            Model_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Model Create_Xml(
            XElement root,
            out Model_ErrorMask errorMask,
            bool doMasks = true,
            Model_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Model Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Model();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Model Create_Xml(
            string path,
            Model_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Model Create_Xml(
            string path,
            out Model_ErrorMask errorMask,
            Model_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Model Create_Xml(
            Stream stream,
            Model_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Model Create_Xml(
            Stream stream,
            out Model_ErrorMask errorMask,
            Model_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Model_ErrorMask errorMask,
            Model_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Model>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Model_ErrorMask errorMask,
            Model_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Model_ErrorMask errorMask,
            Model_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Model_ErrorMask errorMask,
            bool doMasks = true,
            Model_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Model_ErrorMask errorMask,
            Model_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Model_ErrorMask errorMask,
            Model_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            Model_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ModelCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Model item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "File":
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.File);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String FileParse,
                            errorMask: errorMask))
                        {
                            item.File = FileParse;
                        }
                        else
                        {
                            item.File = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BoundRadius":
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.BoundRadius);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single BoundRadiusParse,
                            errorMask: errorMask))
                        {
                            item.BoundRadius = BoundRadiusParse;
                        }
                        else
                        {
                            item.BoundRadius = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hashes":
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.Hashes);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] HashesParse,
                            errorMask: errorMask))
                        {
                            item.Hashes = HashesParse;
                        }
                        else
                        {
                            item.Hashes = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Model_FieldIndex)index)
            {
                case Model_FieldIndex.Hashes:
                    return _hasBeenSetTracker[index];
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Model_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Model Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Model Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Model_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Model Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Model();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            masterReferences: masterReferences,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Model Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static Model Create_Binary(
            string path,
            MasterReferences masterReferences,
            out Model_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        public static Model Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static Model Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Model_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Model_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out Model_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        masterReferences: masterReferences,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Model_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    masterReferences: masterReferences,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ModelCommon.Write_Binary(
                item: this,
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Model item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Model item,
            MutagenFrame frame,
            int? lastParsed,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Model_FieldIndex.File) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.File);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String FileParse,
                            errorMask: errorMask))
                        {
                            item.File = FileParse;
                        }
                        else
                        {
                            item.File = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.File);
                case 0x42444F4D: // MODB
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.BoundRadius);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single BoundRadiusParse,
                            errorMask: errorMask))
                        {
                            item.BoundRadius = BoundRadiusParse;
                        }
                        else
                        {
                            item.BoundRadius = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.BoundRadius);
                case 0x54444F4D: // MODT
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Model_FieldIndex.Hashes);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] HashesParse,
                            errorMask: errorMask))
                        {
                            item.Hashes = HashesParse;
                        }
                        else
                        {
                            item.Hashes = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.Hashes);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public Model Copy(
            Model_CopyMask copyMask = null,
            IModelGetter def = null)
        {
            return Model.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Model Copy(
            IModel item,
            Model_CopyMask copyMask = null,
            IModelGetter def = null)
        {
            Model ret;
            if (item.GetType().Equals(typeof(Model)))
            {
                ret = new Model();
            }
            else
            {
                ret = (Model)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Model Copy_ToLoqui(
            IModelGetter item,
            Model_CopyMask copyMask = null,
            IModelGetter def = null)
        {
            Model ret;
            if (item.GetType().Equals(typeof(Model)))
            {
                ret = new Model() as Model;
            }
            else
            {
                ret = (Model)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IModelGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IModelGetter rhs,
            Model_CopyMask copyMask,
            IModelGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IModelGetter rhs,
            out Model_ErrorMask errorMask,
            Model_CopyMask copyMask = null,
            IModelGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ModelCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IModelGetter rhs,
            ErrorMaskBuilder errorMask,
            Model_CopyMask copyMask = null,
            IModelGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ModelCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    this.File = (String)obj;
                    break;
                case Model_FieldIndex.BoundRadius:
                    this.BoundRadius = (Single)obj;
                    break;
                case Model_FieldIndex.Hashes:
                    this.Hashes = (Byte[])obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ModelCommon.Clear(this, cmds);
        }


        public static Model Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Model();
            foreach (var pair in fields)
            {
                CopyInInternal_Model(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Model(Model obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Model_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Model_FieldIndex.File:
                    obj.File = (String)pair.Value;
                    break;
                case Model_FieldIndex.BoundRadius:
                    obj.BoundRadius = (Single)pair.Value;
                    break;
                case Model_FieldIndex.Hashes:
                    obj.Hashes = (Byte[])pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Model obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IModel : IModelGetter, ILoquiClass<IModel, IModelGetter>, ILoquiClass<Model, IModelGetter>
    {
        new String File { get; set; }

        new Single BoundRadius { get; set; }

        new Byte[] Hashes { get; set; }
        new bool Hashes_IsSet { get; set; }
        void Hashes_Set(Byte[] item, bool hasBeenSet = true);
        void Hashes_Unset();

    }

    public partial interface IModelGetter : ILoquiObject
    {
        #region File
        String File { get; }

        #endregion
        #region BoundRadius
        Single BoundRadius { get; }

        #endregion
        #region Hashes
        Byte[] Hashes { get; }
        bool Hashes_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Model_FieldIndex
    {
        File = 0,
        BoundRadius = 1,
        Hashes = 2,
    }
    #endregion

    #region Registration
    public class Model_Registration : ILoquiRegistration
    {
        public static readonly Model_Registration Instance = new Model_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 20,
            version: 0);

        public const string GUID = "b989dfe1-feb4-4492-9a94-897f6be0c20a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Model_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Model_ErrorMask);

        public static readonly Type ClassType = typeof(Model);

        public static readonly Type GetterType = typeof(IModelGetter);

        public static readonly Type SetterType = typeof(IModel);

        public static readonly Type CommonType = typeof(ModelCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Model";

        public const string Name = "Model";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FILE":
                    return (ushort)Model_FieldIndex.File;
                case "BOUNDRADIUS":
                    return (ushort)Model_FieldIndex.BoundRadius;
                case "HASHES":
                    return (ushort)Model_FieldIndex.Hashes;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return "File";
                case Model_FieldIndex.BoundRadius:
                    return "BoundRadius";
                case Model_FieldIndex.Hashes:
                    return "Hashes";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return typeof(String);
                case Model_FieldIndex.BoundRadius:
                    return typeof(Single);
                case Model_FieldIndex.Hashes:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MODB_HEADER = new RecordType("MODB");
        public static readonly RecordType MODT_HEADER = new RecordType("MODT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MODL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ModelCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IModel item,
            IModelGetter rhs,
            IModelGetter def,
            ErrorMaskBuilder errorMask,
            Model_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.File ?? true)
            {
                errorMask?.PushIndex((int)Model_FieldIndex.File);
                try
                {
                    item.File = rhs.File;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BoundRadius ?? true)
            {
                errorMask?.PushIndex((int)Model_FieldIndex.BoundRadius);
                try
                {
                    item.BoundRadius = rhs.BoundRadius;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Hashes ?? true)
            {
                errorMask?.PushIndex((int)Model_FieldIndex.Hashes);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Hashes,
                        rhsHasBeenSet: rhs.Hashes_IsSet,
                        defItem: def?.Hashes ?? default(Byte[]),
                        defHasBeenSet: def?.Hashes_IsSet ?? false,
                        outRhsItem: out var rhsHashesItem,
                        outDefItem: out var defHashesItem))
                    {
                        item.Hashes = rhsHashesItem;
                    }
                    else
                    {
                        item.Hashes_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IModel obj,
            NotifyingFireParameters cmds = null)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Model_FieldIndex.Hashes:
                    obj.Hashes_IsSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IModel obj,
            NotifyingUnsetParameters cmds = null)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    obj.File = default(String);
                    break;
                case Model_FieldIndex.BoundRadius:
                    obj.BoundRadius = default(Single);
                    break;
                case Model_FieldIndex.Hashes:
                    obj.Hashes_Unset();
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IModel obj)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                    return true;
                case Model_FieldIndex.Hashes:
                    return obj.Hashes_IsSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IModelGetter obj)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return obj.File;
                case Model_FieldIndex.BoundRadius:
                    return obj.BoundRadius;
                case Model_FieldIndex.Hashes:
                    return obj.Hashes;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IModel item,
            NotifyingUnsetParameters cmds = null)
        {
            item.File = default(String);
            item.BoundRadius = default(Single);
            item.Hashes_Unset();
        }

        public static Model_Mask<bool> GetEqualsMask(
            this IModelGetter item,
            IModelGetter rhs)
        {
            var ret = new Model_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            Model_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.File = object.Equals(item.File, rhs.File);
            ret.BoundRadius = item.BoundRadius == rhs.BoundRadius;
            ret.Hashes = item.Hashes_IsSet == rhs.Hashes_IsSet && item.Hashes.EqualsFast(rhs.Hashes);
        }

        public static string ToString(
            this IModelGetter item,
            string name = null,
            Model_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IModelGetter item,
            FileGeneration fg,
            string name = null,
            Model_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Model)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Model)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {item.File}");
                }
                if (printMask?.BoundRadius ?? true)
                {
                    fg.AppendLine($"BoundRadius => {item.BoundRadius}");
                }
                if (printMask?.Hashes ?? true)
                {
                    fg.AppendLine($"Hashes => {item.Hashes}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IModelGetter item,
            Model_Mask<bool?> checkMask)
        {
            if (checkMask.Hashes.HasValue && checkMask.Hashes.Value != item.Hashes_IsSet) return false;
            return true;
        }

        public static Model_Mask<bool> GetHasBeenSetMask(IModelGetter item)
        {
            var ret = new Model_Mask<bool>();
            ret.File = true;
            ret.BoundRadius = true;
            ret.Hashes = item.Hashes_IsSet;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Model item,
            bool doMasks,
            out Model_ErrorMask errorMask,
            Model_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Model item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Model");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Model");
            }
            if ((translationMask?.GetShouldTranslate((int)Model_FieldIndex.File) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.File),
                    item: item.File,
                    fieldIndex: (int)Model_FieldIndex.File,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Model_FieldIndex.BoundRadius) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BoundRadius),
                    item: item.BoundRadius,
                    fieldIndex: (int)Model_FieldIndex.BoundRadius,
                    errorMask: errorMask);
            }
            if (item.Hashes_IsSet
                && (translationMask?.GetShouldTranslate((int)Model_FieldIndex.Hashes) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Hashes),
                    item: item.Hashes,
                    fieldIndex: (int)Model_FieldIndex.Hashes,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Model item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Model_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                masterReferences: masterReferences,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Model_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Model item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Model item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.File,
                fieldIndex: (int)Model_FieldIndex.File,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODL_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BoundRadius,
                fieldIndex: (int)Model_FieldIndex.BoundRadius,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODB_HEADER),
                nullable: false);
            if (item.Hashes_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Hashes,
                    fieldIndex: (int)Model_FieldIndex.Hashes,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Model_Registration.MODT_HEADER),
                    nullable: false);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Model_Mask<T> : IMask<T>, IEquatable<Model_Mask<T>>
    {
        #region Ctors
        public Model_Mask()
        {
        }

        public Model_Mask(T initialValue)
        {
            this.File = initialValue;
            this.BoundRadius = initialValue;
            this.Hashes = initialValue;
        }
        #endregion

        #region Members
        public T File;
        public T BoundRadius;
        public T Hashes;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Model_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Model_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.File, rhs.File)) return false;
            if (!object.Equals(this.BoundRadius, rhs.BoundRadius)) return false;
            if (!object.Equals(this.Hashes, rhs.Hashes)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.File?.GetHashCode());
            ret = ret.CombineHashCode(this.BoundRadius?.GetHashCode());
            ret = ret.CombineHashCode(this.Hashes?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.File)) return false;
            if (!eval(this.BoundRadius)) return false;
            if (!eval(this.Hashes)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Model_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Model_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Model_Mask<R> obj, Func<T, R> eval)
        {
            obj.File = eval(this.File);
            obj.BoundRadius = eval(this.BoundRadius);
            obj.Hashes = eval(this.Hashes);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Model_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Model_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Model_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {File}");
                }
                if (printMask?.BoundRadius ?? true)
                {
                    fg.AppendLine($"BoundRadius => {BoundRadius}");
                }
                if (printMask?.Hashes ?? true)
                {
                    fg.AppendLine($"Hashes => {Hashes}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Model_ErrorMask : IErrorMask, IErrorMask<Model_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception File;
        public Exception BoundRadius;
        public Exception Hashes;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return File;
                case Model_FieldIndex.BoundRadius:
                    return BoundRadius;
                case Model_FieldIndex.Hashes:
                    return Hashes;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    this.File = ex;
                    break;
                case Model_FieldIndex.BoundRadius:
                    this.BoundRadius = ex;
                    break;
                case Model_FieldIndex.Hashes:
                    this.Hashes = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    this.File = (Exception)obj;
                    break;
                case Model_FieldIndex.BoundRadius:
                    this.BoundRadius = (Exception)obj;
                    break;
                case Model_FieldIndex.Hashes:
                    this.Hashes = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (File != null) return true;
            if (BoundRadius != null) return true;
            if (Hashes != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Model_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"File => {File}");
            fg.AppendLine($"BoundRadius => {BoundRadius}");
            fg.AppendLine($"Hashes => {Hashes}");
        }
        #endregion

        #region Combine
        public Model_ErrorMask Combine(Model_ErrorMask rhs)
        {
            var ret = new Model_ErrorMask();
            ret.File = this.File.Combine(rhs.File);
            ret.BoundRadius = this.BoundRadius.Combine(rhs.BoundRadius);
            ret.Hashes = this.Hashes.Combine(rhs.Hashes);
            return ret;
        }
        public static Model_ErrorMask Combine(Model_ErrorMask lhs, Model_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Model_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Model_ErrorMask();
        }
        #endregion

    }
    public class Model_CopyMask
    {
        #region Members
        public bool File;
        public bool BoundRadius;
        public bool Hashes;
        #endregion

    }
    public class Model_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool File;
        public bool BoundRadius;
        public bool Hashes;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((File, null));
            ret.Add((BoundRadius, null));
            ret.Add((Hashes, null));
        }
    }
    #endregion

    #endregion

}
