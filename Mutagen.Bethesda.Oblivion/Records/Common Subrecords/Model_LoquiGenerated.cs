/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Model : IModel, ILoquiObjectSetter, IEquatable<Model>
    {
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static Model_Registration Registration => Model_Registration.Instance;

        #region Ctor
        public Model()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        protected readonly INotifyingItem<FilePath> _File = NotifyingItem.Factory<FilePath>();
        public INotifyingItem<FilePath> File_Property => _File;
        public FilePath File
        {
            get => this._File.Item;
            set => this._File.Set(value);
        }
        INotifyingItem<FilePath> IModel.File_Property => this.File_Property;
        INotifyingItemGetter<FilePath> IModelGetter.File_Property => this.File_Property;
        #endregion
        #region BoundRadius
        protected readonly INotifyingItem<Single> _BoundRadius = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> BoundRadius_Property => _BoundRadius;
        public Single BoundRadius
        {
            get => this._BoundRadius.Item;
            set => this._BoundRadius.Set(value);
        }
        INotifyingItem<Single> IModel.BoundRadius_Property => this.BoundRadius_Property;
        INotifyingItemGetter<Single> IModelGetter.BoundRadius_Property => this.BoundRadius_Property;
        #endregion
        #region Hashes
        protected readonly INotifyingSetItem<Byte[]> _Hashes = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> Hashes_Property => _Hashes;
        public Byte[] Hashes
        {
            get => this._Hashes.Item;
            set => this._Hashes.Set(value);
        }
        INotifyingSetItem<Byte[]> IModel.Hashes_Property => this.Hashes_Property;
        INotifyingSetItemGetter<Byte[]> IModelGetter.Hashes_Property => this.Hashes_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ModelCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ModelCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ModelCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ModelCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return ModelCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Model_Mask<bool> printMask = null)
        {
            return ModelCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ModelCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public Model_Mask<bool> GetHasBeenSetMask()
        {
            return ModelCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Model rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Model rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(File, rhs.File)) return false;
            if (BoundRadius != rhs.BoundRadius) return false;
            if (Hashes_Property.HasBeenSet != rhs.Hashes_Property.HasBeenSet) return false;
            if (Hashes_Property.HasBeenSet)
            {
                if (!Hashes.EqualsFast(rhs.Hashes)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(File).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BoundRadius).CombineHashCode(ret);
            if (Hashes_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Hashes).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static Model Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Model Create_XML(
            XElement root,
            out Model_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Model Create_XML(
            XElement root,
            bool doMasks,
            out Model_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Model Object, Model_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Model_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Model_ErrorMask()) : default(Func<Model_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Model Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Model Create_XML(
            string path,
            out Model_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Model Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Model Create_XML(
            Stream stream,
            out Model_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Model_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Model_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Model_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Model_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Model_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Model_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Model_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ModelCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Model Create_XML_Internal(
            XElement root,
            Func<Model_ErrorMask> errorMask)
        {
            var ret = new Model();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Model item,
            XElement root,
            string name,
            Func<Model_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "File":
                    item._File.SetIfSucceeded(FilePathXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Model_FieldIndex.File,
                        errorMask: errorMask));
                    break;
                case "BoundRadius":
                    item._BoundRadius.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Model_FieldIndex.BoundRadius,
                        errorMask: errorMask));
                    break;
                case "Hashes":
                    item._Hashes.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Model_FieldIndex.Hashes,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Model Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Model Create_Binary(
            MutagenFrame frame,
            out Model_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Model Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Model_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Model Object, Model_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Model_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Model_ErrorMask()) : default(Func<Model_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Model Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Model Create_Binary(
            string path,
            out Model_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Model Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Model Create_Binary(
            Stream stream,
            out Model_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Model_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Model_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Model_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Model_ErrorMask errorMask)
        {
            errorMask = (Model_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Model_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Model_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ModelCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Model Create_Binary_Internal(
            MutagenFrame frame,
            Func<Model_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new Model();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    Model_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Model item,
            MutagenFrame frame,
            Func<Model_ErrorMask> errorMask)
        {
        }

        protected static TryGet<Model_FieldIndex?> Fill_Binary_RecordTypes(
            Model item,
            MutagenFrame frame,
            Model_FieldIndex? lastParsed,
            Func<Model_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    if (lastParsed.HasValue && lastParsed.Value >= Model_FieldIndex.File) return TryGet<Model_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._File.SetIfSucceeded(Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Model_FieldIndex.File,
                        errorMask: errorMask));
                    return TryGet<Model_FieldIndex?>.Succeed(Model_FieldIndex.File);
                case "MODB":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._BoundRadius.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Model_FieldIndex.BoundRadius,
                        errorMask: errorMask));
                    return TryGet<Model_FieldIndex?>.Succeed(Model_FieldIndex.BoundRadius);
                case "MODT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var HashestryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)Model_FieldIndex.Hashes,
                        errorMask: errorMask);
                    item._Hashes.SetIfSucceeded(HashestryGet);
                    return TryGet<Model_FieldIndex?>.Succeed(Model_FieldIndex.Hashes);
                default:
                    return TryGet<Model_FieldIndex?>.Failure;
            }
        }

        #endregion

        public Model Copy(
            Model_CopyMask copyMask = null,
            IModelGetter def = null)
        {
            return Model.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Model Copy(
            IModel item,
            Model_CopyMask copyMask = null,
            IModelGetter def = null)
        {
            Model ret;
            if (item.GetType().Equals(typeof(Model)))
            {
                ret = new Model();
            }
            else
            {
                ret = (Model)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Model_CopyMask copyMask = null,
            IModelGetter def = null)
            where CopyType : class, IModel
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Model)))
            {
                ret = new Model() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Model Copy_ToLoqui(
            IModelGetter item,
            Model_CopyMask copyMask = null,
            IModelGetter def = null)
        {
            Model ret;
            if (item.GetType().Equals(typeof(Model)))
            {
                ret = new Model() as Model;
            }
            else
            {
                ret = (Model)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    this._File.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Model_FieldIndex.BoundRadius:
                    this._BoundRadius.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Model_FieldIndex.Hashes:
                    this._Hashes.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ModelCommon.Clear(this, cmds);
        }


        public static Model Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Model();
            foreach (var pair in fields)
            {
                CopyInInternal_Model(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Model(Model obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Model_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Model_FieldIndex.File:
                    obj._File.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Model_FieldIndex.BoundRadius:
                    obj._BoundRadius.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Model_FieldIndex.Hashes:
                    obj._Hashes.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Model obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IModel : IModelGetter, ILoquiClass<IModel, IModelGetter>, ILoquiClass<Model, IModelGetter>
    {
        new FilePath File { get; set; }
        new INotifyingItem<FilePath> File_Property { get; }

        new Single BoundRadius { get; set; }
        new INotifyingItem<Single> BoundRadius_Property { get; }

        new Byte[] Hashes { get; set; }
        new INotifyingSetItem<Byte[]> Hashes_Property { get; }

    }

    public interface IModelGetter : ILoquiObject
    {
        #region File
        FilePath File { get; }
        INotifyingItemGetter<FilePath> File_Property { get; }

        #endregion
        #region BoundRadius
        Single BoundRadius { get; }
        INotifyingItemGetter<Single> BoundRadius_Property { get; }

        #endregion
        #region Hashes
        Byte[] Hashes { get; }
        INotifyingSetItemGetter<Byte[]> Hashes_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Model_FieldIndex
    {
        File = 0,
        BoundRadius = 1,
        Hashes = 2,
    }
    #endregion

    #region Registration
    public class Model_Registration : ILoquiRegistration
    {
        public static readonly Model_Registration Instance = new Model_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 20,
            version: 0);

        public const string GUID = "b989dfe1-feb4-4492-9a94-897f6be0c20a";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Model_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Model_ErrorMask);

        public static readonly Type ClassType = typeof(Model);

        public static readonly Type GetterType = typeof(IModelGetter);

        public static readonly Type SetterType = typeof(IModel);

        public static readonly Type CommonType = typeof(ModelCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Model";

        public const string Name = "Model";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FILE":
                    return (ushort)Model_FieldIndex.File;
                case "BOUNDRADIUS":
                    return (ushort)Model_FieldIndex.BoundRadius;
                case "HASHES":
                    return (ushort)Model_FieldIndex.Hashes;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return "File";
                case Model_FieldIndex.BoundRadius:
                    return "BoundRadius";
                case Model_FieldIndex.Hashes:
                    return "Hashes";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                case Model_FieldIndex.Hashes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return typeof(FilePath);
                case Model_FieldIndex.BoundRadius:
                    return typeof(Single);
                case Model_FieldIndex.Hashes:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MODB_HEADER = new RecordType("MODB");
        public static readonly RecordType MODT_HEADER = new RecordType("MODT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MODL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ModelCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IModel item,
            IModelGetter rhs,
            Model_CopyMask copyMask = null,
            IModelGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            ModelCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IModel item,
            IModelGetter rhs,
            out Model_ErrorMask errorMask,
            Model_CopyMask copyMask = null,
            IModelGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            ModelCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IModel item,
            IModelGetter rhs,
            IModelGetter def,
            bool doMasks,
            out Model_ErrorMask errorMask,
            Model_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            Model_ErrorMask retErrorMask = null;
            Func<Model_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Model_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IModel item,
            IModelGetter rhs,
            IModelGetter def,
            bool doMasks,
            Func<Model_ErrorMask> errorMask,
            Model_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.File ?? true)
            {
                try
                {
                    item.File_Property.Set(
                        value: rhs.File,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Model_FieldIndex.File, ex);
                }
            }
            if (copyMask?.BoundRadius ?? true)
            {
                try
                {
                    item.BoundRadius_Property.Set(
                        value: rhs.BoundRadius,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Model_FieldIndex.BoundRadius, ex);
                }
            }
            if (copyMask?.Hashes ?? true)
            {
                try
                {
                    item.Hashes_Property.SetToWithDefault(
                        rhs: rhs.Hashes_Property,
                        def: def?.Hashes_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Model_FieldIndex.Hashes, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IModel obj,
            NotifyingFireParameters cmds = null)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Model_FieldIndex.Hashes:
                    obj.Hashes_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IModel obj,
            NotifyingUnsetParameters cmds = null)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    obj.File = default(FilePath);
                    break;
                case Model_FieldIndex.BoundRadius:
                    obj.BoundRadius = default(Single);
                    break;
                case Model_FieldIndex.Hashes:
                    obj.Hashes_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IModel obj)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.BoundRadius:
                    return true;
                case Model_FieldIndex.Hashes:
                    return obj.Hashes_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IModelGetter obj)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return obj.File;
                case Model_FieldIndex.BoundRadius:
                    return obj.BoundRadius;
                case Model_FieldIndex.Hashes:
                    return obj.Hashes;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IModel item,
            NotifyingUnsetParameters cmds = null)
        {
            item.File = default(FilePath);
            item.BoundRadius = default(Single);
            item.Hashes_Property.Unset(cmds.ToUnsetParams());
        }

        public static Model_Mask<bool> GetEqualsMask(
            this IModelGetter item,
            IModelGetter rhs)
        {
            var ret = new Model_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            Model_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.File = object.Equals(item.File, rhs.File);
            ret.BoundRadius = item.BoundRadius == rhs.BoundRadius;
            ret.Hashes = item.Hashes_Property.Equals(rhs.Hashes_Property, (l, r) => l.EqualsFast(r));
        }

        public static string ToString(
            this IModelGetter item,
            string name = null,
            Model_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IModelGetter item,
            FileGeneration fg,
            string name = null,
            Model_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Model)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Model)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {item.File}");
                }
                if (printMask?.BoundRadius ?? true)
                {
                    fg.AppendLine($"BoundRadius => {item.BoundRadius}");
                }
                if (printMask?.Hashes ?? true)
                {
                    fg.AppendLine($"Hashes => {item.Hashes}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IModelGetter item,
            Model_Mask<bool?> checkMask)
        {
            if (checkMask.Hashes.HasValue && checkMask.Hashes.Value != item.Hashes_Property.HasBeenSet) return false;
            return true;
        }

        public static Model_Mask<bool> GetHasBeenSetMask(IModelGetter item)
        {
            var ret = new Model_Mask<bool>();
            ret.File = true;
            ret.BoundRadius = true;
            ret.Hashes = item.Hashes_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IModelGetter item,
            bool doMasks,
            out Model_ErrorMask errorMask,
            string name = null)
        {
            Model_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Model_ErrorMask()) : default(Func<Model_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IModelGetter item,
            Func<Model_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Model"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Model");
                    }
                    FilePathXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.File),
                        item: item.File_Property,
                        fieldIndex: (int)Model_FieldIndex.File,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.BoundRadius),
                        item: item.BoundRadius_Property,
                        fieldIndex: (int)Model_FieldIndex.BoundRadius,
                        errorMask: errorMask);
                    if (item.Hashes_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Hashes),
                            item: item.Hashes_Property,
                            fieldIndex: (int)Model_FieldIndex.Hashes,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Model item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Model_ErrorMask errorMask)
        {
            Model_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Model_ErrorMask()) : default(Func<Model_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Model item,
            RecordTypeConverter recordTypeConverter,
            Func<Model_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Model item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Model_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.File_Property,
                fieldIndex: (int)Model_FieldIndex.File,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODL_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BoundRadius_Property,
                fieldIndex: (int)Model_FieldIndex.BoundRadius,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODB_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Hashes_Property,
                fieldIndex: (int)Model_FieldIndex.Hashes,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODT_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Model_Mask<T> : IMask<T>, IEquatable<Model_Mask<T>>
    {
        #region Ctors
        public Model_Mask()
        {
        }

        public Model_Mask(T initialValue)
        {
            this.File = initialValue;
            this.BoundRadius = initialValue;
            this.Hashes = initialValue;
        }
        #endregion

        #region Members
        public T File;
        public T BoundRadius;
        public T Hashes;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Model_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Model_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.File, rhs.File)) return false;
            if (!object.Equals(this.BoundRadius, rhs.BoundRadius)) return false;
            if (!object.Equals(this.Hashes, rhs.Hashes)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.File?.GetHashCode());
            ret = ret.CombineHashCode(this.BoundRadius?.GetHashCode());
            ret = ret.CombineHashCode(this.Hashes?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.File)) return false;
            if (!eval(this.BoundRadius)) return false;
            if (!eval(this.Hashes)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Model_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Model_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Model_Mask<R> obj, Func<T, R> eval)
        {
            obj.File = eval(this.File);
            obj.BoundRadius = eval(this.BoundRadius);
            obj.Hashes = eval(this.Hashes);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Model_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Model_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Model_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.File ?? true)
                {
                    fg.AppendLine($"File => {File}");
                }
                if (printMask?.BoundRadius ?? true)
                {
                    fg.AppendLine($"BoundRadius => {BoundRadius}");
                }
                if (printMask?.Hashes ?? true)
                {
                    fg.AppendLine($"Hashes => {Hashes}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Model_ErrorMask : IErrorMask, IErrorMask<Model_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception File;
        public Exception BoundRadius;
        public Exception Hashes;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    this.File = ex;
                    break;
                case Model_FieldIndex.BoundRadius:
                    this.BoundRadius = ex;
                    break;
                case Model_FieldIndex.Hashes:
                    this.Hashes = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    this.File = (Exception)obj;
                    break;
                case Model_FieldIndex.BoundRadius:
                    this.BoundRadius = (Exception)obj;
                    break;
                case Model_FieldIndex.Hashes:
                    this.Hashes = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (File != null) return true;
            if (BoundRadius != null) return true;
            if (Hashes != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Model_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"File => {File}");
            fg.AppendLine($"BoundRadius => {BoundRadius}");
            fg.AppendLine($"Hashes => {Hashes}");
        }
        #endregion

        #region Combine
        public Model_ErrorMask Combine(Model_ErrorMask rhs)
        {
            var ret = new Model_ErrorMask();
            ret.File = this.File.Combine(rhs.File);
            ret.BoundRadius = this.BoundRadius.Combine(rhs.BoundRadius);
            ret.Hashes = this.Hashes.Combine(rhs.Hashes);
            return ret;
        }
        public static Model_ErrorMask Combine(Model_ErrorMask lhs, Model_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Model_CopyMask
    {
        #region Members
        public bool File;
        public bool BoundRadius;
        public bool Hashes;
        #endregion

    }
    #endregion




    #endregion

}
