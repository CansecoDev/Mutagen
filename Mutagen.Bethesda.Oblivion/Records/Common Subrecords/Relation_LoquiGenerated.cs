/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Relation : 
        LoquiNotifyingObject,
        IRelation,
        ILoquiObject<Relation>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<Relation>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Relation_Registration.Instance;
        public static Relation_Registration Registration => Relation_Registration.Instance;

        #region Ctor
        public Relation()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Faction
        public FormIDLink<Faction> Faction_Property { get; } = new FormIDLink<Faction>();
        public Faction Faction { get => Faction_Property.Item; set => Faction_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Faction> IRelationGetter.Faction_Property => this.Faction_Property;
        #endregion
        #region Modifier
        private Int32 _Modifier;
        public Int32 Modifier
        {
            get => this._Modifier;
            set => this.RaiseAndSetIfChanged(ref this._Modifier, value, nameof(Modifier));
        }
        #endregion

        IMask<bool> IEqualsMask<Relation>.GetEqualsMask(Relation rhs, EqualsMaskHelper.Include include) => RelationCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IRelationGetter>.GetEqualsMask(IRelationGetter rhs, EqualsMaskHelper.Include include) => RelationCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Relation_Mask<bool> printMask = null)
        {
            return RelationCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RelationCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Relation_Mask<bool> GetHasBeenSetMask()
        {
            return RelationCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Relation rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Relation rhs)
        {
            if (rhs == null) return false;
            if (!this.Faction_Property.Equals(rhs.Faction_Property)) return false;
            if (this.Modifier != rhs.Modifier) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Faction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Modifier).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Relation Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Relation_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Relation Create_Xml(
            XElement node,
            out Relation_ErrorMask errorMask,
            bool doMasks = true,
            Relation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Relation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Relation Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Relation() : null;
                    break;
                default:
                    break;
            }
            var ret = new Relation();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelationCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Relation Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Relation_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Relation Create_Xml(
            string path,
            out Relation_ErrorMask errorMask,
            Relation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Relation Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Relation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Relation Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Relation_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Relation Create_Xml(
            Stream stream,
            out Relation_ErrorMask errorMask,
            Relation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Relation Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Relation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Relation_ErrorMask errorMask,
            bool doMasks = true,
            Relation_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            RelationXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Relation_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Relation_ErrorMask errorMask,
            Relation_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Relation_ErrorMask errorMask,
            Relation_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            Relation_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            RelationXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Relation_FieldIndex)index)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Relation_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Faction_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            Faction_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Relation Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Relation Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Relation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Relation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Relation Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Relation();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(Relation_Registration.XNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Relation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            RelationBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Relation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RelationBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Relation item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.Faction_Property);
            item.Modifier = frame.ReadInt32();
        }

        #endregion

        public Relation Copy(
            Relation_CopyMask copyMask = null,
            IRelationGetter def = null)
        {
            return Relation.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Relation Copy(
            IRelation item,
            Relation_CopyMask copyMask = null,
            IRelationGetter def = null)
        {
            Relation ret;
            if (item.GetType().Equals(typeof(Relation)))
            {
                ret = new Relation();
            }
            else
            {
                ret = (Relation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Relation Copy_ToLoqui(
            IRelationGetter item,
            Relation_CopyMask copyMask = null,
            IRelationGetter def = null)
        {
            Relation ret;
            if (item.GetType().Equals(typeof(Relation)))
            {
                ret = new Relation() as Relation;
            }
            else
            {
                ret = (Relation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IRelationGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IRelationGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IRelationGetter rhs,
            Relation_CopyMask copyMask,
            IRelationGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IRelationGetter rhs,
            out Relation_ErrorMask errorMask,
            Relation_CopyMask copyMask = null,
            IRelationGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RelationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Relation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRelationGetter rhs,
            ErrorMaskBuilder errorMask,
            Relation_CopyMask copyMask = null,
            IRelationGetter def = null,
            bool doMasks = true)
        {
            RelationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    this.Faction_Property.Set((FormIDLink<Faction>)obj);
                    break;
                case Relation_FieldIndex.Modifier:
                    this.Modifier = (Int32)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            RelationCommon.Clear(this);
        }


        public static Relation Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Relation();
            foreach (var pair in fields)
            {
                CopyInInternal_Relation(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Relation(Relation obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Relation_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    obj.Faction_Property.Set((FormIDLink<Faction>)pair.Value);
                    break;
                case Relation_FieldIndex.Modifier:
                    obj.Modifier = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRelation : IRelationGetter, ILoquiClass<IRelation, IRelationGetter>, ILoquiClass<Relation, IRelationGetter>
    {
        new Faction Faction { get; set; }
        new Int32 Modifier { get; set; }

    }

    public partial interface IRelationGetter : ILoquiObject
    {
        #region Faction
        Faction Faction { get; }
        FormIDLink<Faction> Faction_Property { get; }

        #endregion
        #region Modifier
        Int32 Modifier { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Relation_FieldIndex
    {
        Faction = 0,
        Modifier = 1,
    }
    #endregion

    #region Registration
    public class Relation_Registration : ILoquiRegistration
    {
        public static readonly Relation_Registration Instance = new Relation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 23,
            version: 0);

        public const string GUID = "1a14276a-e5c3-4feb-8bf0-1d16878e7eb9";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Relation_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Relation_ErrorMask);

        public static readonly Type ClassType = typeof(Relation);

        public static readonly Type GetterType = typeof(IRelationGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRelation);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RelationCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Relation";

        public const string Name = "Relation";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FACTION":
                    return (ushort)Relation_FieldIndex.Faction;
                case "MODIFIER":
                    return (ushort)Relation_FieldIndex.Modifier;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    return "Faction";
                case Relation_FieldIndex.Modifier:
                    return "Modifier";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    return typeof(FormIDLink<Faction>);
                case Relation_FieldIndex.Modifier:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = XNAM_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RelationCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRelation item,
            IRelationGetter rhs,
            IRelationGetter def,
            ErrorMaskBuilder errorMask,
            Relation_CopyMask copyMask)
        {
            if (copyMask?.Faction ?? true)
            {
                errorMask?.PushIndex((int)Relation_FieldIndex.Faction);
                try
                {
                    item.Faction_Property.SetLink(value: rhs.Faction_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Modifier ?? true)
            {
                errorMask?.PushIndex((int)Relation_FieldIndex.Modifier);
                try
                {
                    item.Modifier = rhs.Modifier;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IRelation item)
        {
            item.Faction = default(Faction);
            item.Modifier = default(Int32);
        }

        public static Relation_Mask<bool> GetEqualsMask(
            this IRelationGetter item,
            IRelationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Relation_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IRelationGetter item,
            IRelationGetter rhs,
            Relation_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Faction = item.Faction_Property.FormKey == rhs.Faction_Property.FormKey;
            ret.Modifier = item.Modifier == rhs.Modifier;
        }

        public static string ToString(
            this IRelationGetter item,
            string name = null,
            Relation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRelationGetter item,
            FileGeneration fg,
            string name = null,
            Relation_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Relation)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Relation)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Faction ?? true)
                {
                    fg.AppendLine($"Faction => {item.Faction_Property}");
                }
                if (printMask?.Modifier ?? true)
                {
                    fg.AppendLine($"Modifier => {item.Modifier}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRelationGetter item,
            Relation_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Relation_Mask<bool> GetHasBeenSetMask(IRelationGetter item)
        {
            var ret = new Relation_Mask<bool>();
            ret.Faction = true;
            ret.Modifier = true;
            return ret;
        }

        #region Xml Translation
        public static void FillPublic_Xml(
            this Relation item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelationCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Relation item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Faction":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Faction_Property,
                        fieldIndex: (int)Relation_FieldIndex.Faction,
                        errorMask: errorMask);
                    break;
                case "Modifier":
                    try
                    {
                        errorMask?.PushIndex((int)Relation_FieldIndex.Modifier);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 ModifierParse,
                            errorMask: errorMask))
                        {
                            item.Modifier = ModifierParse;
                        }
                        else
                        {
                            item.Modifier = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RelationXmlTranslation
    {
        public readonly static RelationXmlTranslation Instance = new RelationXmlTranslation();

        public static void WriteToNode_Xml(
            IRelationGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Relation_FieldIndex.Faction) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Faction),
                    item: item.Faction_Property?.FormKey,
                    fieldIndex: (int)Relation_FieldIndex.Faction,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relation_FieldIndex.Modifier) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Modifier),
                    item: item.Modifier,
                    fieldIndex: (int)Relation_FieldIndex.Modifier,
                    errorMask: errorMask);
            }
        }

        #region Xml Write
        public void Write_Xml(
            XElement node,
            IRelationGetter item,
            bool doMasks,
            out Relation_ErrorMask errorMask,
            Relation_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Relation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Xml(
            XElement node,
            IRelationGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Relation");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Relation");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

    }
    #endregion

    #region Mask
    public class Relation_Mask<T> : IMask<T>, IEquatable<Relation_Mask<T>>
    {
        #region Ctors
        public Relation_Mask()
        {
        }

        public Relation_Mask(T initialValue)
        {
            this.Faction = initialValue;
            this.Modifier = initialValue;
        }
        #endregion

        #region Members
        public T Faction;
        public T Modifier;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Relation_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Relation_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Faction, rhs.Faction)) return false;
            if (!object.Equals(this.Modifier, rhs.Modifier)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Faction?.GetHashCode());
            ret = ret.CombineHashCode(this.Modifier?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Faction)) return false;
            if (!eval(this.Modifier)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Relation_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Relation_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Relation_Mask<R> obj, Func<T, R> eval)
        {
            obj.Faction = eval(this.Faction);
            obj.Modifier = eval(this.Modifier);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Relation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Relation_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Relation_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Faction ?? true)
                {
                    fg.AppendLine($"Faction => {Faction}");
                }
                if (printMask?.Modifier ?? true)
                {
                    fg.AppendLine($"Modifier => {Modifier}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Relation_ErrorMask : IErrorMask, IErrorMask<Relation_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Faction;
        public Exception Modifier;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    return Faction;
                case Relation_FieldIndex.Modifier:
                    return Modifier;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    this.Faction = ex;
                    break;
                case Relation_FieldIndex.Modifier:
                    this.Modifier = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    this.Faction = (Exception)obj;
                    break;
                case Relation_FieldIndex.Modifier:
                    this.Modifier = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Faction != null) return true;
            if (Modifier != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Relation_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Faction => {Faction}");
            fg.AppendLine($"Modifier => {Modifier}");
        }
        #endregion

        #region Combine
        public Relation_ErrorMask Combine(Relation_ErrorMask rhs)
        {
            var ret = new Relation_ErrorMask();
            ret.Faction = this.Faction.Combine(rhs.Faction);
            ret.Modifier = this.Modifier.Combine(rhs.Modifier);
            return ret;
        }
        public static Relation_ErrorMask Combine(Relation_ErrorMask lhs, Relation_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Relation_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Relation_ErrorMask();
        }
        #endregion

    }
    public class Relation_CopyMask
    {
        public Relation_CopyMask()
        {
        }

        public Relation_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Faction = defaultOn;
            this.Modifier = defaultOn;
        }

        #region Members
        public bool Faction;
        public bool Modifier;
        #endregion

    }

    public class Relation_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Faction;
        public bool Modifier;
        #endregion

        #region Ctors
        public Relation_TranslationMask()
        {
        }

        public Relation_TranslationMask(bool defaultOn)
        {
            this.Faction = defaultOn;
            this.Modifier = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Faction, null));
            ret.Add((Modifier, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RelationBinaryTranslation
    {
        public readonly static RelationBinaryTranslation Instance = new RelationBinaryTranslation();

        public static void Write_Binary_Embedded(
            IRelationGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Faction_Property,
                masterReferences: masterReferences);
            writer.Write(item.Modifier);
        }

        #region Binary Write
        public void Write_Binary(
            MutagenWriter writer,
            IRelationGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Relation_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Relation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            IRelationGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Relation_Registration.XNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

    }
    #endregion

    #endregion

}
