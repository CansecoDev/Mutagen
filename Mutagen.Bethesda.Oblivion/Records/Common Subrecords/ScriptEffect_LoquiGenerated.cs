/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptEffect : 
        IScriptEffect,
        ILoquiObject<ScriptEffect>,
        ILoquiObjectSetter,
        IPropertySupporter<MagicSchool>,
        IPropertySupporter<ScriptEffect.Flag>,
        IPropertySupporter<String>,
        IEquatable<ScriptEffect>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptEffect_Registration.Instance;
        public static ScriptEffect_Registration Registration => ScriptEffect_Registration.Instance;

        #region Ctor
        public ScriptEffect()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Script
        public FormIDLink<Script> Script_Property { get; } = new FormIDLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Script> IScriptEffectGetter.Script_Property => this.Script_Property;
        #endregion
        #region MagicSchool
        protected MagicSchool _MagicSchool;
        protected PropertyForwarder<ScriptEffect, MagicSchool> _MagicSchoolForwarder;
        public INotifyingSetItem<MagicSchool> MagicSchool_Property => _MagicSchoolForwarder ?? (_MagicSchoolForwarder = new PropertyForwarder<ScriptEffect, MagicSchool>(this, (int)ScriptEffect_FieldIndex.MagicSchool));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MagicSchool MagicSchool
        {
            get => this._MagicSchool;
            set => this.SetMagicSchool(value);
        }
        protected void SetMagicSchool(
            MagicSchool item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.MagicSchool];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MagicSchool == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.MagicSchool] = hasBeenSet;
            }
            if (_MagicSchool_subscriptions != null)
            {
                var tmp = MagicSchool;
                _MagicSchool = item;
                _MagicSchool_subscriptions.FireSubscriptions(
                    index: (int)ScriptEffect_FieldIndex.MagicSchool,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MagicSchool = item;
            }
        }
        protected void UnsetMagicSchool()
        {
            _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.MagicSchool] = false;
            MagicSchool = default(MagicSchool);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<MagicSchool> IScriptEffect.MagicSchool_Property => this.MagicSchool_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<MagicSchool> IScriptEffectGetter.MagicSchool_Property => this.MagicSchool_Property;
        #endregion
        #region VisualEffect
        public EDIDLink<MagicEffect> VisualEffect_Property { get; } = new EDIDLink<MagicEffect>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MagicEffect VisualEffect { get => VisualEffect_Property.Item; set => VisualEffect_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EDIDLink<MagicEffect> IScriptEffectGetter.VisualEffect_Property => this.VisualEffect_Property;
        #endregion
        #region Flags
        protected ScriptEffect.Flag _Flags;
        protected PropertyForwarder<ScriptEffect, ScriptEffect.Flag> _FlagsForwarder;
        public INotifyingSetItem<ScriptEffect.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<ScriptEffect, ScriptEffect.Flag>(this, (int)ScriptEffect_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptEffect.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            ScriptEffect.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Flags] = hasBeenSet;
            }
            if (_ScriptEffectFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _ScriptEffectFlag_subscriptions.FireSubscriptions(
                    index: (int)ScriptEffect_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Flags] = false;
            Flags = default(ScriptEffect.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<ScriptEffect.Flag> IScriptEffect.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<ScriptEffect.Flag> IScriptEffectGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Name
        protected String _Name;
        protected PropertyForwarder<ScriptEffect, String> _NameForwarder;
        public INotifyingSetItem<String> Name_Property => _NameForwarder ?? (_NameForwarder = new PropertyForwarder<ScriptEffect, String>(this, (int)ScriptEffect_FieldIndex.Name));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => this.SetName(value);
        }
        protected void SetName(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Name];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Name == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Name] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Name;
                _Name = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)ScriptEffect_FieldIndex.Name,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Name = item;
            }
        }
        protected void UnsetName()
        {
            _hasBeenSetTracker[(int)ScriptEffect_FieldIndex.Name] = false;
            Name = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IScriptEffect.Name_Property => this.Name_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IScriptEffectGetter.Name_Property => this.Name_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ScriptEffectCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ScriptEffectCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ScriptEffectCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ScriptEffectCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<ScriptEffect>.GetEqualsMask(ScriptEffect rhs) => ScriptEffectCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IScriptEffectGetter>.GetEqualsMask(IScriptEffectGetter rhs) => ScriptEffectCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ScriptEffectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ScriptEffect_Mask<bool> printMask = null)
        {
            return ScriptEffectCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptEffectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public ScriptEffect_Mask<bool> GetHasBeenSetMask()
        {
            return ScriptEffectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptEffect rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptEffect rhs)
        {
            if (rhs == null) return false;
            if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            if (this.MagicSchool != rhs.MagicSchool) return false;
            if (!this.VisualEffect_Property.Equals(rhs.VisualEffect_Property)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MagicSchool).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(VisualEffect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static ScriptEffect Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptEffect Create_XML(
            XElement root,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptEffect Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptEffect();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptEffect Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static ScriptEffect Create_XML(
            string path,
            out ScriptEffect_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static ScriptEffect Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static ScriptEffect Create_XML(
            Stream stream,
            out ScriptEffect_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<ScriptEffect>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out ScriptEffect_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<ScriptEffect>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out ScriptEffect_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out ScriptEffect_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            ScriptEffectCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            ScriptEffect item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Script":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ScriptEffect_FieldIndex.Script,
                        item: item.Script_Property,
                        errorMask: errorMask);
                    break;
                case "MagicSchool":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptEffect_FieldIndex.MagicSchool);
                        if (EnumXmlTranslation<MagicSchool>.Instance.Parse(
                            root: root,
                            item: out MagicSchool MagicSchoolParse,
                            errorMask: errorMask))
                        {
                            item.MagicSchool = MagicSchoolParse;
                        }
                        else
                        {
                            item.UnsetMagicSchool();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisualEffect":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ScriptEffect_FieldIndex.VisualEffect,
                        item: item.VisualEffect_Property,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Flags);
                        if (EnumXmlTranslation<ScriptEffect.Flag>.Instance.Parse(
                            root: root,
                            item: out ScriptEffect.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        #region IPropertySupporter MagicSchool
        protected ObjectCentralizationSubscriptions<MagicSchool> _MagicSchool_subscriptions;
        MagicSchool IPropertySupporter<MagicSchool>.Get(int index)
        {
            return GetMagicSchool(index: index);
        }

        protected MagicSchool GetMagicSchool(int index)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.MagicSchool:
                    return MagicSchool;
                default:
                    throw new ArgumentException($"Unknown index for field type MagicSchool: {index}");
            }
        }

        void IPropertySupporter<MagicSchool>.Set(
            int index,
            MagicSchool item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetMagicSchool(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetMagicSchool(
            int index,
            MagicSchool item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.MagicSchool:
                    SetMagicSchool(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MagicSchool: {index}");
            }
        }

        bool IPropertySupporter<MagicSchool>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<MagicSchool>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<MagicSchool>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetMagicSchool(
                index: index,
                cmds: cmds);
        }

        protected void UnsetMagicSchool(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.MagicSchool:
                    _hasBeenSetTracker[index] = false;
                    MagicSchool = default(MagicSchool);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MagicSchool: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MagicSchool>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<MagicSchool> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_MagicSchool_subscriptions == null)
            {
                _MagicSchool_subscriptions = new ObjectCentralizationSubscriptions<MagicSchool>();
            }
            _MagicSchool_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MagicSchool>.Unsubscribe(
            int index,
            object owner)
        {
            _MagicSchool_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<MagicSchool>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        MagicSchool IPropertySupporter<MagicSchool>.DefaultValue(int index)
        {
            return DefaultValueMagicSchool(index: index);
        }

        protected MagicSchool DefaultValueMagicSchool(int index)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.MagicSchool:
                    return default(MagicSchool);
                default:
                    throw new ArgumentException($"Unknown index for field type MagicSchool: {index}");
            }
        }

        #endregion

        #region IPropertySupporter ScriptEffect.Flag
        protected ObjectCentralizationSubscriptions<ScriptEffect.Flag> _ScriptEffectFlag_subscriptions;
        ScriptEffect.Flag IPropertySupporter<ScriptEffect.Flag>.Get(int index)
        {
            return GetScriptEffectFlag(index: index);
        }

        protected ScriptEffect.Flag GetScriptEffectFlag(int index)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptEffect.Flag: {index}");
            }
        }

        void IPropertySupporter<ScriptEffect.Flag>.Set(
            int index,
            ScriptEffect.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetScriptEffectFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetScriptEffectFlag(
            int index,
            ScriptEffect.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptEffect.Flag: {index}");
            }
        }

        bool IPropertySupporter<ScriptEffect.Flag>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<ScriptEffect.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ScriptEffect.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetScriptEffectFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetScriptEffectFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Flags:
                    _hasBeenSetTracker[index] = false;
                    Flags = default(ScriptEffect.Flag);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptEffect.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptEffect.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ScriptEffect.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ScriptEffectFlag_subscriptions == null)
            {
                _ScriptEffectFlag_subscriptions = new ObjectCentralizationSubscriptions<ScriptEffect.Flag>();
            }
            _ScriptEffectFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptEffect.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _ScriptEffectFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ScriptEffect.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ScriptEffect.Flag IPropertySupporter<ScriptEffect.Flag>.DefaultValue(int index)
        {
            return DefaultValueScriptEffectFlag(index: index);
        }

        protected ScriptEffect.Flag DefaultValueScriptEffectFlag(int index)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Flags:
                    return default(ScriptEffect.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptEffect.Flag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter String
        protected ObjectCentralizationSubscriptions<String> _String_subscriptions;
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected String GetString(int index)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Name:
                    return Name;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Name:
                    SetName(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Name:
                    _hasBeenSetTracker[index] = false;
                    Name = default(String);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected String DefaultValueString(int index)
        {
            switch ((ScriptEffect_FieldIndex)index)
            {
                case ScriptEffect_FieldIndex.Name:
                    return default(String);
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptEffect_Registration.TRIGGERING_RECORD_TYPE;
        public SCITDataType SCITDataTypeState;
        [Flags]
        public enum SCITDataType
        {
            Break0 = 1,
            Break1 = 2
        }
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Script_Property;
            yield return VisualEffect_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptEffect Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptEffect Create_Binary(
            MutagenFrame frame,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptEffect Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptEffect();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
                if (ret.SCITDataTypeState != default(SCITDataType))
                {
                    object dataTypeStateSubber = new object();
                    Action unsubAction = () =>
                    {
                        ret.MagicSchool_Property.Unsubscribe(dataTypeStateSubber);
                        ret.VisualEffect_Property.Unsubscribe(dataTypeStateSubber);
                        ret.Flags_Property.Unsubscribe(dataTypeStateSubber);
                        ret.SCITDataTypeState = default(SCITDataType);
                    };
                    ret.MagicSchool_Property.Subscribe(
                        owner: dataTypeStateSubber,
                        callback: unsubAction,
                        cmds: NotifyingSubscribeParameters.NoFire);
                    ret.VisualEffect_Property.Subscribe(
                        owner: dataTypeStateSubber,
                        callback: unsubAction,
                        cmds: NotifyingSubscribeParameters.NoFire);
                    ret.Flags_Property.Subscribe(
                        owner: dataTypeStateSubber,
                        callback: unsubAction,
                        cmds: NotifyingSubscribeParameters.NoFire);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptEffect Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptEffect Create_Binary(
            string path,
            out ScriptEffect_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static ScriptEffect Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptEffect Create_Binary(
            Stream stream,
            out ScriptEffect_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ScriptEffect_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ScriptEffectCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            ScriptEffect item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            ScriptEffect item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x54494353: // SCIT
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptEffect_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)ScriptEffect_FieldIndex.Script,
                            item: item.Script_Property,
                            errorMask: errorMask);
                        if (dataFrame.Complete)
                        {
                            item.SCITDataTypeState |= SCITDataType.Break0;
                            return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.Script);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)ScriptEffect_FieldIndex.MagicSchool);
                            if (EnumBinaryTranslation<MagicSchool>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out MagicSchool MagicSchoolParse,
                                errorMask: errorMask))
                            {
                                item.MagicSchool = MagicSchoolParse;
                            }
                            else
                            {
                                item.UnsetMagicSchool();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)ScriptEffect_FieldIndex.VisualEffect,
                            item: item.VisualEffect_Property,
                            errorMask: errorMask);
                        if (dataFrame.Complete)
                        {
                            item.SCITDataTypeState |= SCITDataType.Break1;
                            return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.VisualEffect);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Flags);
                            if (EnumBinaryTranslation<ScriptEffect.Flag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out ScriptEffect.Flag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.UnsetFlags();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.Flags);
                case 0x4C4C5546: // FULL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)ScriptEffect_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ScriptEffect_FieldIndex.Name);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public ScriptEffect Copy(
            ScriptEffect_CopyMask copyMask = null,
            IScriptEffectGetter def = null)
        {
            return ScriptEffect.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ScriptEffect Copy(
            IScriptEffect item,
            ScriptEffect_CopyMask copyMask = null,
            IScriptEffectGetter def = null)
        {
            ScriptEffect ret;
            if (item.GetType().Equals(typeof(ScriptEffect)))
            {
                ret = new ScriptEffect();
            }
            else
            {
                ret = (ScriptEffect)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ScriptEffect Copy_ToLoqui(
            IScriptEffectGetter item,
            ScriptEffect_CopyMask copyMask = null,
            IScriptEffectGetter def = null)
        {
            ScriptEffect ret;
            if (item.GetType().Equals(typeof(ScriptEffect)))
            {
                ret = new ScriptEffect() as ScriptEffect;
            }
            else
            {
                ret = (ScriptEffect)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IScriptEffectGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IScriptEffectGetter rhs,
            ScriptEffect_CopyMask copyMask,
            IScriptEffectGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IScriptEffectGetter rhs,
            out ScriptEffect_ErrorMask errorMask,
            ScriptEffect_CopyMask copyMask = null,
            IScriptEffectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptEffectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IScriptEffectGetter rhs,
            ErrorMaskBuilder errorMask,
            ScriptEffect_CopyMask copyMask = null,
            IScriptEffectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ScriptEffectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDLink<Script>)obj,
                        cmds);
                    break;
                case ScriptEffect_FieldIndex.MagicSchool:
                    this.SetMagicSchool(
                        (MagicSchool)obj,
                        cmds: cmds);
                    break;
                case ScriptEffect_FieldIndex.VisualEffect:
                    this.VisualEffect_Property.Set(
                        (EDIDLink<MagicEffect>)obj,
                        cmds);
                    break;
                case ScriptEffect_FieldIndex.Flags:
                    this.SetFlags(
                        (ScriptEffect.Flag)obj,
                        cmds: cmds);
                    break;
                case ScriptEffect_FieldIndex.Name:
                    this.SetName(
                        (String)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ScriptEffectCommon.Clear(this, cmds);
        }


        public static ScriptEffect Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ScriptEffect();
            foreach (var pair in fields)
            {
                CopyInInternal_ScriptEffect(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ScriptEffect(ScriptEffect obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ScriptEffect_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDLink<Script>)pair.Value,
                        null);
                    break;
                case ScriptEffect_FieldIndex.MagicSchool:
                    obj.SetMagicSchool(
                        (MagicSchool)pair.Value,
                        cmds: null);
                    break;
                case ScriptEffect_FieldIndex.VisualEffect:
                    obj.VisualEffect_Property.Set(
                        (EDIDLink<MagicEffect>)pair.Value,
                        null);
                    break;
                case ScriptEffect_FieldIndex.Flags:
                    obj.SetFlags(
                        (ScriptEffect.Flag)pair.Value,
                        cmds: null);
                    break;
                case ScriptEffect_FieldIndex.Name:
                    obj.SetName(
                        (String)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ScriptEffect obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptEffect : IScriptEffectGetter, ILoquiClass<IScriptEffect, IScriptEffectGetter>, ILoquiClass<ScriptEffect, IScriptEffectGetter>
    {
        new Script Script { get; set; }
        new MagicSchool MagicSchool { get; set; }
        new INotifyingItem<MagicSchool> MagicSchool_Property { get; }

        new MagicEffect VisualEffect { get; set; }
        new ScriptEffect.Flag Flags { get; set; }
        new INotifyingItem<ScriptEffect.Flag> Flags_Property { get; }

        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

    }

    public partial interface IScriptEffectGetter : ILoquiObject
    {
        #region Script
        Script Script { get; }
        FormIDLink<Script> Script_Property { get; }

        #endregion
        #region MagicSchool
        MagicSchool MagicSchool { get; }
        INotifyingItemGetter<MagicSchool> MagicSchool_Property { get; }

        #endregion
        #region VisualEffect
        MagicEffect VisualEffect { get; }
        EDIDLink<MagicEffect> VisualEffect_Property { get; }

        #endregion
        #region Flags
        ScriptEffect.Flag Flags { get; }
        INotifyingItemGetter<ScriptEffect.Flag> Flags_Property { get; }

        #endregion
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptEffect_FieldIndex
    {
        Script = 0,
        MagicSchool = 1,
        VisualEffect = 2,
        Flags = 3,
        Name = 4,
    }
    #endregion

    #region Registration
    public class ScriptEffect_Registration : ILoquiRegistration
    {
        public static readonly ScriptEffect_Registration Instance = new ScriptEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 54,
            version: 0);

        public const string GUID = "52a9e0c6-6771-4b3d-a4e7-a082ff8384a9";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptEffect_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptEffect_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptEffect);

        public static readonly Type GetterType = typeof(IScriptEffectGetter);

        public static readonly Type SetterType = typeof(IScriptEffect);

        public static readonly Type CommonType = typeof(ScriptEffectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptEffect";

        public const string Name = "ScriptEffect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SCRIPT":
                    return (ushort)ScriptEffect_FieldIndex.Script;
                case "MAGICSCHOOL":
                    return (ushort)ScriptEffect_FieldIndex.MagicSchool;
                case "VISUALEFFECT":
                    return (ushort)ScriptEffect_FieldIndex.VisualEffect;
                case "FLAGS":
                    return (ushort)ScriptEffect_FieldIndex.Flags;
                case "NAME":
                    return (ushort)ScriptEffect_FieldIndex.Name;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    return "Script";
                case ScriptEffect_FieldIndex.MagicSchool:
                    return "MagicSchool";
                case ScriptEffect_FieldIndex.VisualEffect:
                    return "VisualEffect";
                case ScriptEffect_FieldIndex.Flags:
                    return "Flags";
                case ScriptEffect_FieldIndex.Name:
                    return "Name";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                case ScriptEffect_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    return typeof(FormIDLink<Script>);
                case ScriptEffect_FieldIndex.MagicSchool:
                    return typeof(MagicSchool);
                case ScriptEffect_FieldIndex.VisualEffect:
                    return typeof(EDIDLink<MagicEffect>);
                case ScriptEffect_FieldIndex.Flags:
                    return typeof(ScriptEffect.Flag);
                case ScriptEffect_FieldIndex.Name:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SCIT_HEADER = new RecordType("SCIT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCIT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ScriptEffectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IScriptEffect item,
            IScriptEffectGetter rhs,
            IScriptEffectGetter def,
            ErrorMaskBuilder errorMask,
            ScriptEffect_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Script ?? true)
            {
                errorMask.PushIndex((int)ScriptEffect_FieldIndex.Script);
                try
                {
                    item.Script_Property.Set(
                        value: rhs.Script,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MagicSchool ?? true)
            {
                errorMask.PushIndex((int)ScriptEffect_FieldIndex.MagicSchool);
                try
                {
                    item.MagicSchool_Property.Set(
                        value: rhs.MagicSchool,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.VisualEffect ?? true)
            {
                errorMask.PushIndex((int)ScriptEffect_FieldIndex.VisualEffect);
                try
                {
                    item.VisualEffect_Property.Set(
                        value: rhs.VisualEffect,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)ScriptEffect_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Name ?? true)
            {
                errorMask.PushIndex((int)ScriptEffect_FieldIndex.Name);
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IScriptEffect obj,
            NotifyingFireParameters cmds = null)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case ScriptEffect_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IScriptEffect obj,
            NotifyingUnsetParameters cmds = null)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    obj.Script = default(FormIDLink<Script>);
                    break;
                case ScriptEffect_FieldIndex.MagicSchool:
                    obj.MagicSchool = default(MagicSchool);
                    break;
                case ScriptEffect_FieldIndex.VisualEffect:
                    obj.VisualEffect = default(EDIDLink<MagicEffect>);
                    break;
                case ScriptEffect_FieldIndex.Flags:
                    obj.Flags = default(ScriptEffect.Flag);
                    break;
                case ScriptEffect_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IScriptEffect obj)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                case ScriptEffect_FieldIndex.MagicSchool:
                case ScriptEffect_FieldIndex.VisualEffect:
                case ScriptEffect_FieldIndex.Flags:
                    return true;
                case ScriptEffect_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IScriptEffectGetter obj)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    return obj.Script;
                case ScriptEffect_FieldIndex.MagicSchool:
                    return obj.MagicSchool;
                case ScriptEffect_FieldIndex.VisualEffect:
                    return obj.VisualEffect;
                case ScriptEffect_FieldIndex.Flags:
                    return obj.Flags;
                case ScriptEffect_FieldIndex.Name:
                    return obj.Name;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IScriptEffect item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Script = default(FormIDLink<Script>);
            item.MagicSchool = default(MagicSchool);
            item.VisualEffect = default(EDIDLink<MagicEffect>);
            item.Flags = default(ScriptEffect.Flag);
            item.Name_Property.Unset(cmds.ToUnsetParams());
        }

        public static ScriptEffect_Mask<bool> GetEqualsMask(
            this IScriptEffectGetter item,
            IScriptEffectGetter rhs)
        {
            var ret = new ScriptEffect_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IScriptEffectGetter item,
            IScriptEffectGetter rhs,
            ScriptEffect_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Script = item.Script == rhs.Script;
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.VisualEffect = item.VisualEffect == rhs.VisualEffect;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
        }

        public static string ToString(
            this IScriptEffectGetter item,
            string name = null,
            ScriptEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IScriptEffectGetter item,
            FileGeneration fg,
            string name = null,
            ScriptEffect_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ScriptEffect)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ScriptEffect)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.MagicSchool ?? true)
                {
                    fg.AppendLine($"MagicSchool => {item.MagicSchool}");
                }
                if (printMask?.VisualEffect ?? true)
                {
                    fg.AppendLine($"VisualEffect => {item.VisualEffect_Property}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IScriptEffectGetter item,
            ScriptEffect_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            return true;
        }

        public static ScriptEffect_Mask<bool> GetHasBeenSetMask(IScriptEffectGetter item)
        {
            var ret = new ScriptEffect_Mask<bool>();
            ret.Script = true;
            ret.MagicSchool = true;
            ret.VisualEffect = true;
            ret.Flags = true;
            ret.Name = item.Name_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IScriptEffectGetter item,
            bool doMasks,
            out ScriptEffect_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IScriptEffectGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptEffect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptEffect");
            }
            FormIDXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Script),
                item: item.Script?.FormID,
                fieldIndex: (int)ScriptEffect_FieldIndex.Script,
                errorMask: errorMask);
            EnumXmlTranslation<MagicSchool>.Instance.Write(
                node: elem,
                name: nameof(item.MagicSchool),
                item: item.MagicSchool_Property,
                fieldIndex: (int)ScriptEffect_FieldIndex.MagicSchool,
                errorMask: errorMask);
            FormIDXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.VisualEffect),
                item: item.VisualEffect?.FormID,
                fieldIndex: (int)ScriptEffect_FieldIndex.VisualEffect,
                errorMask: errorMask);
            EnumXmlTranslation<ScriptEffect.Flag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)ScriptEffect_FieldIndex.Flags,
                errorMask: errorMask);
            if (item.Name_Property.HasBeenSet)
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name_Property,
                    fieldIndex: (int)ScriptEffect_FieldIndex.Name,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ScriptEffect item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out ScriptEffect_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = ScriptEffect_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            ScriptEffect item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            ScriptEffect item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(ScriptEffect_Registration.SCIT_HEADER)))
            {
                Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    fieldIndex: (int)ScriptEffect_FieldIndex.Script,
                    errorMask: errorMask);
                if (!item.SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break0))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Write(
                        writer,
                        item.MagicSchool_Property,
                        length: 4,
                        fieldIndex: (int)ScriptEffect_FieldIndex.MagicSchool,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.VisualEffect_Property,
                        fieldIndex: (int)ScriptEffect_FieldIndex.VisualEffect,
                        errorMask: errorMask);
                    if (!item.SCITDataTypeState.HasFlag(ScriptEffect.SCITDataType.Break1))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<ScriptEffect.Flag>.Instance.Write(
                            writer,
                            item.Flags_Property,
                            length: 4,
                            fieldIndex: (int)ScriptEffect_FieldIndex.Flags,
                            errorMask: errorMask);
                    }
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)ScriptEffect_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ScriptEffect_Registration.FULL_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class ScriptEffect_Mask<T> : IMask<T>, IEquatable<ScriptEffect_Mask<T>>
    {
        #region Ctors
        public ScriptEffect_Mask()
        {
        }

        public ScriptEffect_Mask(T initialValue)
        {
            this.Script = initialValue;
            this.MagicSchool = initialValue;
            this.VisualEffect = initialValue;
            this.Flags = initialValue;
            this.Name = initialValue;
        }
        #endregion

        #region Members
        public T Script;
        public T MagicSchool;
        public T VisualEffect;
        public T Flags;
        public T Name;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptEffect_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptEffect_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
            if (!object.Equals(this.VisualEffect, rhs.VisualEffect)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicSchool?.GetHashCode());
            ret = ret.CombineHashCode(this.VisualEffect?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Script)) return false;
            if (!eval(this.MagicSchool)) return false;
            if (!eval(this.VisualEffect)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Name)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ScriptEffect_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptEffect_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptEffect_Mask<R> obj, Func<T, R> eval)
        {
            obj.Script = eval(this.Script);
            obj.MagicSchool = eval(this.MagicSchool);
            obj.VisualEffect = eval(this.VisualEffect);
            obj.Flags = eval(this.Flags);
            obj.Name = eval(this.Name);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptEffect_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptEffect_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.MagicSchool ?? true)
                {
                    fg.AppendLine($"MagicSchool => {MagicSchool}");
                }
                if (printMask?.VisualEffect ?? true)
                {
                    fg.AppendLine($"VisualEffect => {VisualEffect}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptEffect_ErrorMask : IErrorMask, IErrorMask<ScriptEffect_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Script;
        public Exception MagicSchool;
        public Exception VisualEffect;
        public Exception Flags;
        public Exception Name;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    return Script;
                case ScriptEffect_FieldIndex.MagicSchool:
                    return MagicSchool;
                case ScriptEffect_FieldIndex.VisualEffect:
                    return VisualEffect;
                case ScriptEffect_FieldIndex.Flags:
                    return Flags;
                case ScriptEffect_FieldIndex.Name:
                    return Name;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case ScriptEffect_FieldIndex.MagicSchool:
                    this.MagicSchool = ex;
                    break;
                case ScriptEffect_FieldIndex.VisualEffect:
                    this.VisualEffect = ex;
                    break;
                case ScriptEffect_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case ScriptEffect_FieldIndex.Name:
                    this.Name = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ScriptEffect_FieldIndex enu = (ScriptEffect_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffect_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.MagicSchool:
                    this.MagicSchool = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.VisualEffect:
                    this.VisualEffect = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case ScriptEffect_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Script != null) return true;
            if (MagicSchool != null) return true;
            if (VisualEffect != null) return true;
            if (Flags != null) return true;
            if (Name != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptEffect_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"MagicSchool => {MagicSchool}");
            fg.AppendLine($"VisualEffect => {VisualEffect}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Name => {Name}");
        }
        #endregion

        #region Combine
        public ScriptEffect_ErrorMask Combine(ScriptEffect_ErrorMask rhs)
        {
            var ret = new ScriptEffect_ErrorMask();
            ret.Script = this.Script.Combine(rhs.Script);
            ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
            ret.VisualEffect = this.VisualEffect.Combine(rhs.VisualEffect);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Name = this.Name.Combine(rhs.Name);
            return ret;
        }
        public static ScriptEffect_ErrorMask Combine(ScriptEffect_ErrorMask lhs, ScriptEffect_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptEffect_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptEffect_ErrorMask();
        }
        #endregion

    }
    public class ScriptEffect_CopyMask
    {
        #region Members
        public bool Script;
        public bool MagicSchool;
        public bool VisualEffect;
        public bool Flags;
        public bool Name;
        #endregion

    }
    #endregion





    #endregion

}
