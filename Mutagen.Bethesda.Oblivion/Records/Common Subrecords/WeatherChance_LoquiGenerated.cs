/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class WeatherChance : 
        LoquiNotifyingObject,
        IWeatherChance,
        ILoquiObject<WeatherChance>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<WeatherChance>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherChance_Registration.Instance;
        public static WeatherChance_Registration Registration => WeatherChance_Registration.Instance;

        #region Ctor
        public WeatherChance()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Weather
        public FormIDLink<Weather> Weather_Property { get; } = new FormIDLink<Weather>();
        public Weather Weather { get => Weather_Property.Item; set => Weather_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Weather> IWeatherChanceGetter.Weather_Property => this.Weather_Property;
        #endregion
        #region Chance
        private Int32 _Chance;
        public Int32 Chance
        {
            get => this._Chance;
            set => this.RaiseAndSetIfChanged(ref this._Chance, value, nameof(Chance));
        }
        #endregion

        IMask<bool> IEqualsMask<WeatherChance>.GetEqualsMask(WeatherChance rhs, EqualsMaskHelper.Include include) => WeatherChanceCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IWeatherChanceGetter>.GetEqualsMask(IWeatherChanceGetter rhs, EqualsMaskHelper.Include include) => WeatherChanceCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            WeatherChance_Mask<bool> printMask = null)
        {
            return WeatherChanceCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            WeatherChanceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public WeatherChance_Mask<bool> GetHasBeenSetMask()
        {
            return WeatherChanceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is WeatherChance rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(WeatherChance rhs)
        {
            if (rhs == null) return false;
            if (!this.Weather_Property.Equals(rhs.Weather_Property)) return false;
            if (this.Chance != rhs.Chance) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Weather).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Chance).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static WeatherChance Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            WeatherChance_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static WeatherChance Create_Xml(
            XElement node,
            out WeatherChance_ErrorMask errorMask,
            bool doMasks = true,
            WeatherChance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = WeatherChance_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WeatherChance Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new WeatherChance() : null;
                    break;
                default:
                    break;
            }
            var ret = new WeatherChance();
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherChanceCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static WeatherChance Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            WeatherChance_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static WeatherChance Create_Xml(
            string path,
            out WeatherChance_ErrorMask errorMask,
            WeatherChance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherChance Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            WeatherChance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static WeatherChance Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            WeatherChance_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static WeatherChance Create_Xml(
            Stream stream,
            out WeatherChance_ErrorMask errorMask,
            WeatherChance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherChance Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            WeatherChance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out WeatherChance_ErrorMask errorMask,
            bool doMasks = true,
            WeatherChance_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherChance_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out WeatherChance_ErrorMask errorMask,
            WeatherChance_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out WeatherChance_ErrorMask errorMask,
            WeatherChance_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            WeatherChance_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            WeatherChanceCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((WeatherChance_FieldIndex)index)
            {
                case WeatherChance_FieldIndex.Weather:
                case WeatherChance_FieldIndex.Chance:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Weather_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            Weather_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static WeatherChance Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static WeatherChance Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out WeatherChance_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = WeatherChance_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WeatherChance Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new WeatherChance();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out WeatherChance_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = WeatherChance_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            WeatherChanceCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            WeatherChance item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.Weather_Property);
            if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Int32 ChanceParse))
            {
                item.Chance = ChanceParse;
            }
            else
            {
                item.Chance = default(Int32);
            }
        }

        #endregion

        public WeatherChance Copy(
            WeatherChance_CopyMask copyMask = null,
            IWeatherChanceGetter def = null)
        {
            return WeatherChance.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static WeatherChance Copy(
            IWeatherChance item,
            WeatherChance_CopyMask copyMask = null,
            IWeatherChanceGetter def = null)
        {
            WeatherChance ret;
            if (item.GetType().Equals(typeof(WeatherChance)))
            {
                ret = new WeatherChance();
            }
            else
            {
                ret = (WeatherChance)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static WeatherChance Copy_ToLoqui(
            IWeatherChanceGetter item,
            WeatherChance_CopyMask copyMask = null,
            IWeatherChanceGetter def = null)
        {
            WeatherChance ret;
            if (item.GetType().Equals(typeof(WeatherChance)))
            {
                ret = new WeatherChance() as WeatherChance;
            }
            else
            {
                ret = (WeatherChance)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IWeatherChanceGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IWeatherChanceGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IWeatherChanceGetter rhs,
            WeatherChance_CopyMask copyMask,
            IWeatherChanceGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IWeatherChanceGetter rhs,
            out WeatherChance_ErrorMask errorMask,
            WeatherChance_CopyMask copyMask = null,
            IWeatherChanceGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeatherChanceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = WeatherChance_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IWeatherChanceGetter rhs,
            ErrorMaskBuilder errorMask,
            WeatherChance_CopyMask copyMask = null,
            IWeatherChanceGetter def = null,
            bool doMasks = true)
        {
            WeatherChanceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                    this.Weather_Property.Set((FormIDLink<Weather>)obj);
                    break;
                case WeatherChance_FieldIndex.Chance:
                    this.Chance = (Int32)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            WeatherChanceCommon.Clear(this);
        }


        public static WeatherChance Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new WeatherChance();
            foreach (var pair in fields)
            {
                CopyInInternal_WeatherChance(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_WeatherChance(WeatherChance obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out WeatherChance_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                    obj.Weather_Property.Set((FormIDLink<Weather>)pair.Value);
                    break;
                case WeatherChance_FieldIndex.Chance:
                    obj.Chance = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IWeatherChance : IWeatherChanceGetter, ILoquiClass<IWeatherChance, IWeatherChanceGetter>, ILoquiClass<WeatherChance, IWeatherChanceGetter>
    {
        new Weather Weather { get; set; }
        new Int32 Chance { get; set; }

    }

    public partial interface IWeatherChanceGetter : ILoquiObject
    {
        #region Weather
        Weather Weather { get; }
        FormIDLink<Weather> Weather_Property { get; }

        #endregion
        #region Chance
        Int32 Chance { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum WeatherChance_FieldIndex
    {
        Weather = 0,
        Chance = 1,
    }
    #endregion

    #region Registration
    public class WeatherChance_Registration : ILoquiRegistration
    {
        public static readonly WeatherChance_Registration Instance = new WeatherChance_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 106,
            version: 0);

        public const string GUID = "6db15123-8d44-41b3-932f-cf3d904a2690";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(WeatherChance_Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeatherChance_ErrorMask);

        public static readonly Type ClassType = typeof(WeatherChance);

        public static readonly Type GetterType = typeof(IWeatherChanceGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeatherChance);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(WeatherChanceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.WeatherChance";

        public const string Name = "WeatherChance";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "WEATHER":
                    return (ushort)WeatherChance_FieldIndex.Weather;
                case "CHANCE":
                    return (ushort)WeatherChance_FieldIndex.Chance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                case WeatherChance_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                case WeatherChance_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                case WeatherChance_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                    return "Weather";
                case WeatherChance_FieldIndex.Chance:
                    return "Chance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                case WeatherChance_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                case WeatherChance_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                    return typeof(FormIDLink<Weather>);
                case WeatherChance_FieldIndex.Chance:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class WeatherChanceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IWeatherChance item,
            IWeatherChanceGetter rhs,
            IWeatherChanceGetter def,
            ErrorMaskBuilder errorMask,
            WeatherChance_CopyMask copyMask)
        {
            if (copyMask?.Weather ?? true)
            {
                errorMask?.PushIndex((int)WeatherChance_FieldIndex.Weather);
                try
                {
                    item.Weather_Property.SetLink(value: rhs.Weather_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Chance ?? true)
            {
                errorMask?.PushIndex((int)WeatherChance_FieldIndex.Chance);
                try
                {
                    item.Chance = rhs.Chance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IWeatherChance item)
        {
            item.Weather = default(Weather);
            item.Chance = default(Int32);
        }

        public static WeatherChance_Mask<bool> GetEqualsMask(
            this IWeatherChanceGetter item,
            IWeatherChanceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeatherChance_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IWeatherChanceGetter item,
            IWeatherChanceGetter rhs,
            WeatherChance_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Weather = item.Weather_Property.FormKey == rhs.Weather_Property.FormKey;
            ret.Chance = item.Chance == rhs.Chance;
        }

        public static string ToString(
            this IWeatherChanceGetter item,
            string name = null,
            WeatherChance_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IWeatherChanceGetter item,
            FileGeneration fg,
            string name = null,
            WeatherChance_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(WeatherChance)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(WeatherChance)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weather ?? true)
                {
                    fg.AppendLine($"Weather => {item.Weather_Property}");
                }
                if (printMask?.Chance ?? true)
                {
                    fg.AppendLine($"Chance => {item.Chance}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IWeatherChanceGetter item,
            WeatherChance_Mask<bool?> checkMask)
        {
            return true;
        }

        public static WeatherChance_Mask<bool> GetHasBeenSetMask(IWeatherChanceGetter item)
        {
            var ret = new WeatherChance_Mask<bool>();
            ret.Weather = true;
            ret.Chance = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            WeatherChance item,
            bool doMasks,
            out WeatherChance_ErrorMask errorMask,
            WeatherChance_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherChance_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            WeatherChance item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.WeatherChance");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.WeatherChance");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this WeatherChance item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)WeatherChance_FieldIndex.Weather) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Weather),
                    item: item.Weather_Property?.FormKey,
                    fieldIndex: (int)WeatherChance_FieldIndex.Weather,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherChance_FieldIndex.Chance) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Chance),
                    item: item.Chance,
                    fieldIndex: (int)WeatherChance_FieldIndex.Chance,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this WeatherChance item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherChanceCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this WeatherChance item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Weather":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Weather_Property,
                        fieldIndex: (int)WeatherChance_FieldIndex.Weather,
                        errorMask: errorMask);
                    break;
                case "Chance":
                    try
                    {
                        errorMask?.PushIndex((int)WeatherChance_FieldIndex.Chance);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 ChanceParse,
                            errorMask: errorMask))
                        {
                            item.Chance = ChanceParse;
                        }
                        else
                        {
                            item.Chance = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            WeatherChance item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out WeatherChance_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = WeatherChance_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            WeatherChance item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_Embedded(
            WeatherChance item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Weather_Property,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Chance);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class WeatherChance_Mask<T> : IMask<T>, IEquatable<WeatherChance_Mask<T>>
    {
        #region Ctors
        public WeatherChance_Mask()
        {
        }

        public WeatherChance_Mask(T initialValue)
        {
            this.Weather = initialValue;
            this.Chance = initialValue;
        }
        #endregion

        #region Members
        public T Weather;
        public T Chance;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is WeatherChance_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(WeatherChance_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Weather, rhs.Weather)) return false;
            if (!object.Equals(this.Chance, rhs.Chance)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Weather?.GetHashCode());
            ret = ret.CombineHashCode(this.Chance?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Weather)) return false;
            if (!eval(this.Chance)) return false;
            return true;
        }
        #endregion

        #region Translate
        public WeatherChance_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new WeatherChance_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(WeatherChance_Mask<R> obj, Func<T, R> eval)
        {
            obj.Weather = eval(this.Weather);
            obj.Chance = eval(this.Chance);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(WeatherChance_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, WeatherChance_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(WeatherChance_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weather ?? true)
                {
                    fg.AppendLine($"Weather => {Weather}");
                }
                if (printMask?.Chance ?? true)
                {
                    fg.AppendLine($"Chance => {Chance}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class WeatherChance_ErrorMask : IErrorMask, IErrorMask<WeatherChance_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Weather;
        public Exception Chance;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                    return Weather;
                case WeatherChance_FieldIndex.Chance:
                    return Chance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                    this.Weather = ex;
                    break;
                case WeatherChance_FieldIndex.Chance:
                    this.Chance = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            WeatherChance_FieldIndex enu = (WeatherChance_FieldIndex)index;
            switch (enu)
            {
                case WeatherChance_FieldIndex.Weather:
                    this.Weather = (Exception)obj;
                    break;
                case WeatherChance_FieldIndex.Chance:
                    this.Chance = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Weather != null) return true;
            if (Chance != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("WeatherChance_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Weather => {Weather}");
            fg.AppendLine($"Chance => {Chance}");
        }
        #endregion

        #region Combine
        public WeatherChance_ErrorMask Combine(WeatherChance_ErrorMask rhs)
        {
            var ret = new WeatherChance_ErrorMask();
            ret.Weather = this.Weather.Combine(rhs.Weather);
            ret.Chance = this.Chance.Combine(rhs.Chance);
            return ret;
        }
        public static WeatherChance_ErrorMask Combine(WeatherChance_ErrorMask lhs, WeatherChance_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static WeatherChance_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new WeatherChance_ErrorMask();
        }
        #endregion

    }
    public class WeatherChance_CopyMask
    {
        public WeatherChance_CopyMask()
        {
        }

        public WeatherChance_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Weather = defaultOn;
            this.Chance = defaultOn;
        }

        #region Members
        public bool Weather;
        public bool Chance;
        #endregion

    }

    public class WeatherChance_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Weather;
        public bool Chance;
        #endregion

        #region Ctors
        public WeatherChance_TranslationMask()
        {
        }

        public WeatherChance_TranslationMask(bool defaultOn)
        {
            this.Weather = defaultOn;
            this.Chance = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Weather, null));
            ret.Add((Chance, null));
        }
    }
    #endregion

    #endregion

}
