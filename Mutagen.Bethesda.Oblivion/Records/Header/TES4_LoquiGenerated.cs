/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class TES4 : ITES4, ILoquiObjectSetter, IEquatable<TES4>
    {
        ILoquiRegistration ILoquiObject.Registration => TES4_Registration.Instance;
        public static TES4_Registration Registration => TES4_Registration.Instance;

        #region Ctor
        public TES4()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Fluff
        protected readonly INotifyingSetItem<Byte[]> _Fluff = NotifyingSetItem.Factory<Byte[]>(
            markAsSet: false,
            noNullFallback: () => new byte[12]);
        public INotifyingSetItem<Byte[]> Fluff_Property => _Fluff;
        public Byte[] Fluff
        {
            get => this._Fluff.Item;
            set => this._Fluff.Set(value);
        }
        INotifyingSetItem<Byte[]> ITES4.Fluff_Property => this.Fluff_Property;
        INotifyingSetItemGetter<Byte[]> ITES4Getter.Fluff_Property => this.Fluff_Property;
        #endregion
        #region Header
        private readonly INotifyingSetItem<Header> _Header = new NotifyingSetItemConvertWrapper<Header>(
            defaultVal: new Header(),
            incomingConverter: (change) =>
            {
                if (change.New == null)
                {
                    return TryGet<Header>.Succeed(new Header());
                }
                return TryGet<Header>.Succeed(change.New);
            }
        );
        public INotifyingSetItem<Header> Header_Property => this._Header;
        Header ITES4Getter.Header => this.Header;
        public Header Header { get => _Header.Item; set => _Header.Item = value; }
        INotifyingSetItem<Header> ITES4.Header_Property => this.Header_Property;
        INotifyingSetItemGetter<Header> ITES4Getter.Header_Property => this.Header_Property;
        #endregion
        #region TypeOffsets
        protected readonly INotifyingSetItem<Byte[]> _TypeOffsets = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> TypeOffsets_Property => _TypeOffsets;
        public Byte[] TypeOffsets
        {
            get => this._TypeOffsets.Item;
            set => this._TypeOffsets.Set(value);
        }
        INotifyingSetItem<Byte[]> ITES4.TypeOffsets_Property => this.TypeOffsets_Property;
        INotifyingSetItemGetter<Byte[]> ITES4Getter.TypeOffsets_Property => this.TypeOffsets_Property;
        #endregion
        #region Deleted
        protected readonly INotifyingSetItem<Byte[]> _Deleted = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> Deleted_Property => _Deleted;
        public Byte[] Deleted
        {
            get => this._Deleted.Item;
            set => this._Deleted.Set(value);
        }
        INotifyingSetItem<Byte[]> ITES4.Deleted_Property => this.Deleted_Property;
        INotifyingSetItemGetter<Byte[]> ITES4Getter.Deleted_Property => this.Deleted_Property;
        #endregion
        #region Author
        protected readonly INotifyingSetItem<String> _Author = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Author_Property => _Author;
        public String Author
        {
            get => this._Author.Item;
            set => this._Author.Set(value);
        }
        INotifyingSetItem<String> ITES4.Author_Property => this.Author_Property;
        INotifyingSetItemGetter<String> ITES4Getter.Author_Property => this.Author_Property;
        #endregion
        #region Description
        protected readonly INotifyingSetItem<String> _Description = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Description_Property => _Description;
        public String Description
        {
            get => this._Description.Item;
            set => this._Description.Set(value);
        }
        INotifyingSetItem<String> ITES4.Description_Property => this.Description_Property;
        INotifyingSetItemGetter<String> ITES4Getter.Description_Property => this.Description_Property;
        #endregion
        #region MasterReferences
        private readonly INotifyingList<MasterReference> _MasterReferences = new NotifyingList<MasterReference>();
        public INotifyingList<MasterReference> MasterReferences => _MasterReferences;
        #region Interface Members
        INotifyingList<MasterReference> ITES4.MasterReferences => _MasterReferences;
        INotifyingListGetter<MasterReference> ITES4Getter.MasterReferences => _MasterReferences;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TES4Common.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TES4Common.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TES4Common.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TES4Common.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return TES4Common.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TES4_Mask<bool> printMask = null)
        {
            return TES4Common.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TES4Common.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public TES4_Mask<bool> GetHasBeenSetMask()
        {
            return TES4Common.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TES4 rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TES4 rhs)
        {
            if (rhs == null) return false;
            if (Fluff_Property.HasBeenSet != rhs.Fluff_Property.HasBeenSet) return false;
            if (Fluff_Property.HasBeenSet)
            {
                if (!Fluff.EqualsFast(rhs.Fluff)) return false;
            }
            if (Header_Property.HasBeenSet != rhs.Header_Property.HasBeenSet) return false;
            if (Header_Property.HasBeenSet)
            {
                if (!object.Equals(Header, rhs.Header)) return false;
            }
            if (TypeOffsets_Property.HasBeenSet != rhs.TypeOffsets_Property.HasBeenSet) return false;
            if (TypeOffsets_Property.HasBeenSet)
            {
                if (!TypeOffsets.EqualsFast(rhs.TypeOffsets)) return false;
            }
            if (Deleted_Property.HasBeenSet != rhs.Deleted_Property.HasBeenSet) return false;
            if (Deleted_Property.HasBeenSet)
            {
                if (!Deleted.EqualsFast(rhs.Deleted)) return false;
            }
            if (Author_Property.HasBeenSet != rhs.Author_Property.HasBeenSet) return false;
            if (Author_Property.HasBeenSet)
            {
                if (!object.Equals(Author, rhs.Author)) return false;
            }
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(Description, rhs.Description)) return false;
            }
            if (MasterReferences.HasBeenSet != rhs.MasterReferences.HasBeenSet) return false;
            if (MasterReferences.HasBeenSet)
            {
                if (!MasterReferences.SequenceEqual(rhs.MasterReferences)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Fluff_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            }
            if (Header_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Header).CombineHashCode(ret);
            }
            if (TypeOffsets_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TypeOffsets).CombineHashCode(ret);
            }
            if (Deleted_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Deleted).CombineHashCode(ret);
            }
            if (Author_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Author).CombineHashCode(ret);
            }
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (MasterReferences.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MasterReferences).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static TES4 Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static TES4 Create_XML(
            XElement root,
            out TES4_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static TES4 Create_XML(
            XElement root,
            bool doMasks,
            out TES4_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (TES4 Object, TES4_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            TES4_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TES4_ErrorMask()) : default(Func<TES4_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static TES4 Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static TES4 Create_XML(
            string path,
            out TES4_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static TES4 Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static TES4 Create_XML(
            Stream stream,
            out TES4_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TES4, TES4_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out TES4_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TES4, TES4_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out TES4_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out TES4_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out TES4_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (TES4_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out TES4_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out TES4_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            TES4Common.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static TES4 Create_XML_Internal(
            XElement root,
            Func<TES4_ErrorMask> errorMask)
        {
            var ret = new TES4();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            TES4 item,
            XElement root,
            string name,
            Func<TES4_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Fluff":
                    item._Fluff.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)TES4_FieldIndex.Fluff,
                        errorMask: errorMask));
                    break;
                case "Header":
                    item._Header.SetIfSucceeded(LoquiXmlTranslation<Header, Header_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)TES4_FieldIndex.Header,
                        errorMask: errorMask));
                    break;
                case "TypeOffsets":
                    item._TypeOffsets.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)TES4_FieldIndex.TypeOffsets,
                        errorMask: errorMask));
                    break;
                case "Deleted":
                    item._Deleted.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)TES4_FieldIndex.Deleted,
                        errorMask: errorMask));
                    break;
                case "Author":
                    item._Author.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)TES4_FieldIndex.Author,
                        errorMask: errorMask));
                    break;
                case "Description":
                    item._Description.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)TES4_FieldIndex.Description,
                        errorMask: errorMask));
                    break;
                case "MasterReferences":
                    item._MasterReferences.SetIfSucceeded(ListXmlTranslation<MasterReference, MaskItem<Exception, MasterReference_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)TES4_FieldIndex.MasterReferences,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, MasterReference_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<MasterReference, MasterReference_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static TES4 Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static TES4 Create_Binary(
            MutagenFrame frame,
            out TES4_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static TES4 Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out TES4_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (TES4 Object, TES4_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            TES4_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TES4_ErrorMask()) : default(Func<TES4_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static TES4 Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static TES4 Create_Binary(
            string path,
            out TES4_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static TES4 Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static TES4 Create_Binary(
            Stream stream,
            out TES4_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<TES4, TES4_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out TES4_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<TES4, TES4_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out TES4_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out TES4_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out TES4_ErrorMask errorMask)
        {
            errorMask = (TES4_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out TES4_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out TES4_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            TES4Common.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static TES4 Create_Binary_Internal(
            MutagenFrame frame,
            Func<TES4_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new TES4();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame.Reader,
                    TES4_Registration.TES4_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            TES4 item,
            MutagenFrame frame,
            Func<TES4_ErrorMask> errorMask)
        {
            if (frame.Complete) return;
            var FlufftryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(12)),
                fieldIndex: (int)TES4_FieldIndex.Fluff,
                errorMask: errorMask);
            item._Fluff.SetIfSucceeded(FlufftryGet);
        }

        protected static TryGet<TES4_FieldIndex?> Fill_Binary_RecordTypes(
            TES4 item,
            MutagenFrame frame,
            Func<TES4_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "HEDR":
                    item._Header.SetIfSucceeded(LoquiBinaryTranslation<Header, Header_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)TES4_FieldIndex.Header,
                        errorMask: errorMask));
                    return TryGet<TES4_FieldIndex?>.Succeed(TES4_FieldIndex.Header);
                case "OFST":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var TypeOffsetstryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)TES4_FieldIndex.TypeOffsets,
                        errorMask: errorMask);
                    item._TypeOffsets.SetIfSucceeded(TypeOffsetstryGet);
                    return TryGet<TES4_FieldIndex?>.Succeed(TES4_FieldIndex.TypeOffsets);
                case "DELE":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var DeletedtryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)TES4_FieldIndex.Deleted,
                        errorMask: errorMask);
                    item._Deleted.SetIfSucceeded(DeletedtryGet);
                    return TryGet<TES4_FieldIndex?>.Succeed(TES4_FieldIndex.Deleted);
                case "CNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var AuthortryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)TES4_FieldIndex.Author,
                        errorMask: errorMask);
                    item._Author.SetIfSucceeded(AuthortryGet);
                    return TryGet<TES4_FieldIndex?>.Succeed(TES4_FieldIndex.Author);
                case "SNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var DescriptiontryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)TES4_FieldIndex.Description,
                        errorMask: errorMask);
                    item._Description.SetIfSucceeded(DescriptiontryGet);
                    return TryGet<TES4_FieldIndex?>.Succeed(TES4_FieldIndex.Description);
                case "MAST":
                case "DATA":
                    var MasterReferencestryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<MasterReference, MaskItem<Exception, MasterReference_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: MasterReference_Registration.TriggeringRecordTypes,
                        fieldIndex: (int)TES4_FieldIndex.MasterReferences,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, MasterReference_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<MasterReference, MasterReference_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._MasterReferences.SetIfSucceeded(MasterReferencestryGet);
                    return TryGet<TES4_FieldIndex?>.Succeed(TES4_FieldIndex.MasterReferences);
                default:
                    errorMask().Warnings.Add($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + Constants.SUBRECORD_LENGTH;
                    return TryGet<TES4_FieldIndex?>.Succeed(null);
            }
        }

        #endregion

        public TES4 Copy(
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null)
        {
            return TES4.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TES4 Copy(
            ITES4 item,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null)
        {
            TES4 ret;
            if (item.GetType().Equals(typeof(TES4)))
            {
                ret = new TES4();
            }
            else
            {
                ret = (TES4)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null)
            where CopyType : class, ITES4
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TES4)))
            {
                ret = new TES4() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TES4 Copy_ToLoqui(
            ITES4Getter item,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null)
        {
            TES4 ret;
            if (item.GetType().Equals(typeof(TES4)))
            {
                ret = new TES4() as TES4;
            }
            else
            {
                ret = (TES4)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    this._Fluff.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case TES4_FieldIndex.Header:
                    this._Header.Set(
                        (Header)obj,
                        cmds);
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    this._TypeOffsets.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case TES4_FieldIndex.Deleted:
                    this._Deleted.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case TES4_FieldIndex.Author:
                    this._Author.Set(
                        (String)obj,
                        cmds);
                    break;
                case TES4_FieldIndex.Description:
                    this._Description.Set(
                        (String)obj,
                        cmds);
                    break;
                case TES4_FieldIndex.MasterReferences:
                    this._MasterReferences.SetTo((IEnumerable<MasterReference>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TES4Common.Clear(this, cmds);
        }


        public static TES4 Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TES4();
            foreach (var pair in fields)
            {
                CopyInInternal_TES4(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TES4(TES4 obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TES4_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    obj._Fluff.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case TES4_FieldIndex.Header:
                    obj._Header.Set(
                        (Header)pair.Value,
                        null);
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    obj._TypeOffsets.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case TES4_FieldIndex.Deleted:
                    obj._Deleted.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case TES4_FieldIndex.Author:
                    obj._Author.Set(
                        (String)pair.Value,
                        null);
                    break;
                case TES4_FieldIndex.Description:
                    obj._Description.Set(
                        (String)pair.Value,
                        null);
                    break;
                case TES4_FieldIndex.MasterReferences:
                    obj._MasterReferences.SetTo((IEnumerable<MasterReference>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TES4 obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITES4 : ITES4Getter, ILoquiClass<ITES4, ITES4Getter>, ILoquiClass<TES4, ITES4Getter>
    {
        new Byte[] Fluff { get; set; }
        new INotifyingSetItem<Byte[]> Fluff_Property { get; }

        new Header Header { get; set; }
        new INotifyingSetItem<Header> Header_Property { get; }

        new Byte[] TypeOffsets { get; set; }
        new INotifyingSetItem<Byte[]> TypeOffsets_Property { get; }

        new Byte[] Deleted { get; set; }
        new INotifyingSetItem<Byte[]> Deleted_Property { get; }

        new String Author { get; set; }
        new INotifyingSetItem<String> Author_Property { get; }

        new String Description { get; set; }
        new INotifyingSetItem<String> Description_Property { get; }

        new INotifyingList<MasterReference> MasterReferences { get; }
    }

    public interface ITES4Getter : ILoquiObject
    {
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingSetItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region Header
        Header Header { get; }
        INotifyingSetItemGetter<Header> Header_Property { get; }

        #endregion
        #region TypeOffsets
        Byte[] TypeOffsets { get; }
        INotifyingSetItemGetter<Byte[]> TypeOffsets_Property { get; }

        #endregion
        #region Deleted
        Byte[] Deleted { get; }
        INotifyingSetItemGetter<Byte[]> Deleted_Property { get; }

        #endregion
        #region Author
        String Author { get; }
        INotifyingSetItemGetter<String> Author_Property { get; }

        #endregion
        #region Description
        String Description { get; }
        INotifyingSetItemGetter<String> Description_Property { get; }

        #endregion
        #region MasterReferences
        INotifyingListGetter<MasterReference> MasterReferences { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum TES4_FieldIndex
    {
        Fluff = 0,
        Header = 1,
        TypeOffsets = 2,
        Deleted = 3,
        Author = 4,
        Description = 5,
        MasterReferences = 6,
    }
    #endregion

    #region Registration
    public class TES4_Registration : ILoquiRegistration
    {
        public static readonly TES4_Registration Instance = new TES4_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "d26d9f2a-53af-4c45-9490-dfdb377b6655";

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(TES4_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TES4_ErrorMask);

        public static readonly Type ClassType = typeof(TES4);

        public static readonly Type GetterType = typeof(ITES4Getter);

        public static readonly Type SetterType = typeof(ITES4);

        public static readonly Type CommonType = typeof(TES4Common);

        public const string FullName = "Mutagen.Bethesda.Oblivion.TES4";

        public const string Name = "TES4";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLUFF":
                    return (ushort)TES4_FieldIndex.Fluff;
                case "HEADER":
                    return (ushort)TES4_FieldIndex.Header;
                case "TYPEOFFSETS":
                    return (ushort)TES4_FieldIndex.TypeOffsets;
                case "DELETED":
                    return (ushort)TES4_FieldIndex.Deleted;
                case "AUTHOR":
                    return (ushort)TES4_FieldIndex.Author;
                case "DESCRIPTION":
                    return (ushort)TES4_FieldIndex.Description;
                case "MASTERREFERENCES":
                    return (ushort)TES4_FieldIndex.MasterReferences;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.MasterReferences:
                    return true;
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.TypeOffsets:
                case TES4_FieldIndex.Deleted:
                case TES4_FieldIndex.Author:
                case TES4_FieldIndex.Description:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.MasterReferences:
                    return true;
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.TypeOffsets:
                case TES4_FieldIndex.Deleted:
                case TES4_FieldIndex.Author:
                case TES4_FieldIndex.Description:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.TypeOffsets:
                case TES4_FieldIndex.Deleted:
                case TES4_FieldIndex.Author:
                case TES4_FieldIndex.Description:
                case TES4_FieldIndex.MasterReferences:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    return "Fluff";
                case TES4_FieldIndex.Header:
                    return "Header";
                case TES4_FieldIndex.TypeOffsets:
                    return "TypeOffsets";
                case TES4_FieldIndex.Deleted:
                    return "Deleted";
                case TES4_FieldIndex.Author:
                    return "Author";
                case TES4_FieldIndex.Description:
                    return "Description";
                case TES4_FieldIndex.MasterReferences:
                    return "MasterReferences";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.TypeOffsets:
                case TES4_FieldIndex.Deleted:
                case TES4_FieldIndex.Author:
                case TES4_FieldIndex.Description:
                case TES4_FieldIndex.MasterReferences:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.TypeOffsets:
                case TES4_FieldIndex.Deleted:
                case TES4_FieldIndex.Author:
                case TES4_FieldIndex.Description:
                case TES4_FieldIndex.MasterReferences:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case TES4_FieldIndex.Header:
                    return typeof(Header);
                case TES4_FieldIndex.TypeOffsets:
                    return typeof(Byte[]);
                case TES4_FieldIndex.Deleted:
                    return typeof(Byte[]);
                case TES4_FieldIndex.Author:
                    return typeof(String);
                case TES4_FieldIndex.Description:
                    return typeof(String);
                case TES4_FieldIndex.MasterReferences:
                    return typeof(NotifyingList<MasterReference>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType HEDR_HEADER = new RecordType("HEDR");
        public static readonly RecordType OFST_HEADER = new RecordType("OFST");
        public static readonly RecordType DELE_HEADER = new RecordType("DELE");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType MAST_HEADER = new RecordType("MAST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TES4_HEADER;
        public const int NumStructFields = 1;
        public const int NumTypedFields = 6;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class TES4Common
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITES4 item,
            ITES4Getter rhs,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TES4Common.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITES4 item,
            ITES4Getter rhs,
            out TES4_ErrorMask errorMask,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TES4Common.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITES4 item,
            ITES4Getter rhs,
            ITES4Getter def,
            bool doMasks,
            out TES4_ErrorMask errorMask,
            TES4_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            TES4_ErrorMask retErrorMask = null;
            Func<TES4_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TES4_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ITES4 item,
            ITES4Getter rhs,
            ITES4Getter def,
            bool doMasks,
            Func<TES4_ErrorMask> errorMask,
            TES4_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Fluff ?? true)
            {
                try
                {
                    item.Fluff_Property.SetToWithDefault(
                        rhs: rhs.Fluff_Property,
                        def: def?.Fluff_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TES4_FieldIndex.Fluff, ex);
                }
            }
            if (copyMask?.Header.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Header_Property.SetToWithDefault(
                        rhs.Header_Property,
                        def?.Header_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Header.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    HeaderCommon.CopyFieldsFrom(
                                        item: item.Header,
                                        rhs: rhs.Header,
                                        def: def?.Header,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Header_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Header.Specific == null)
                                            {
                                                baseMask.Header = new MaskItem<Exception, Header_ErrorMask>(null, new Header_ErrorMask());
                                            }
                                            return baseMask.Header.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Header.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Header);
                                    return Header.Copy(
                                        r,
                                        copyMask?.Header?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Header?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TES4_FieldIndex.Header, ex);
                }
            }
            if (copyMask?.TypeOffsets ?? true)
            {
                try
                {
                    item.TypeOffsets_Property.SetToWithDefault(
                        rhs: rhs.TypeOffsets_Property,
                        def: def?.TypeOffsets_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TES4_FieldIndex.TypeOffsets, ex);
                }
            }
            if (copyMask?.Deleted ?? true)
            {
                try
                {
                    item.Deleted_Property.SetToWithDefault(
                        rhs: rhs.Deleted_Property,
                        def: def?.Deleted_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TES4_FieldIndex.Deleted, ex);
                }
            }
            if (copyMask?.Author ?? true)
            {
                try
                {
                    item.Author_Property.SetToWithDefault(
                        rhs: rhs.Author_Property,
                        def: def?.Author_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TES4_FieldIndex.Author, ex);
                }
            }
            if (copyMask?.Description ?? true)
            {
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs: rhs.Description_Property,
                        def: def?.Description_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TES4_FieldIndex.Description, ex);
                }
            }
            if (copyMask?.MasterReferences.Overall != CopyOption.Skip)
            {
                try
                {
                    item.MasterReferences.SetToWithDefault(
                        rhs.MasterReferences,
                        def?.MasterReferences,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.MasterReferences.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(MasterReference);
                                    return MasterReference.Copy(
                                        r,
                                        copyMask?.MasterReferences?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MasterReferences.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TES4_FieldIndex.MasterReferences, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITES4 obj,
            NotifyingFireParameters? cmds = null)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    obj.Fluff_Property.HasBeenSet = on;
                    break;
                case TES4_FieldIndex.Header:
                    obj.Header_Property.HasBeenSet = on;
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    obj.TypeOffsets_Property.HasBeenSet = on;
                    break;
                case TES4_FieldIndex.Deleted:
                    obj.Deleted_Property.HasBeenSet = on;
                    break;
                case TES4_FieldIndex.Author:
                    obj.Author_Property.HasBeenSet = on;
                    break;
                case TES4_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                case TES4_FieldIndex.MasterReferences:
                    obj.MasterReferences.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITES4 obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    obj.Fluff_Property.Unset(cmds);
                    break;
                case TES4_FieldIndex.Header:
                    obj.Header_Property.Unset(cmds);
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    obj.TypeOffsets_Property.Unset(cmds);
                    break;
                case TES4_FieldIndex.Deleted:
                    obj.Deleted_Property.Unset(cmds);
                    break;
                case TES4_FieldIndex.Author:
                    obj.Author_Property.Unset(cmds);
                    break;
                case TES4_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case TES4_FieldIndex.MasterReferences:
                    obj.MasterReferences.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITES4 obj)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    return obj.Fluff_Property.HasBeenSet;
                case TES4_FieldIndex.Header:
                    return obj.Header_Property.HasBeenSet;
                case TES4_FieldIndex.TypeOffsets:
                    return obj.TypeOffsets_Property.HasBeenSet;
                case TES4_FieldIndex.Deleted:
                    return obj.Deleted_Property.HasBeenSet;
                case TES4_FieldIndex.Author:
                    return obj.Author_Property.HasBeenSet;
                case TES4_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                case TES4_FieldIndex.MasterReferences:
                    return obj.MasterReferences.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITES4Getter obj)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    return obj.Fluff;
                case TES4_FieldIndex.Header:
                    return obj.Header;
                case TES4_FieldIndex.TypeOffsets:
                    return obj.TypeOffsets;
                case TES4_FieldIndex.Deleted:
                    return obj.Deleted;
                case TES4_FieldIndex.Author:
                    return obj.Author;
                case TES4_FieldIndex.Description:
                    return obj.Description;
                case TES4_FieldIndex.MasterReferences:
                    return obj.MasterReferences;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITES4 item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Fluff_Property.Unset(cmds.ToUnsetParams());
            item.Header_Property.Unset(cmds.ToUnsetParams());
            item.TypeOffsets_Property.Unset(cmds.ToUnsetParams());
            item.Deleted_Property.Unset(cmds.ToUnsetParams());
            item.Author_Property.Unset(cmds.ToUnsetParams());
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.MasterReferences.Unset(cmds.ToUnsetParams());
        }

        public static TES4_Mask<bool> GetEqualsMask(
            this ITES4Getter item,
            ITES4Getter rhs)
        {
            var ret = new TES4_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITES4Getter item,
            ITES4Getter rhs,
            TES4_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Fluff = item.Fluff_Property.Equals(rhs.Fluff_Property, (l, r) => l.EqualsFast(r));
            ret.Header = item.Header_Property.LoquiEqualsHelper(rhs.Header_Property, (loqLhs, loqRhs) => HeaderCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.TypeOffsets = item.TypeOffsets_Property.Equals(rhs.TypeOffsets_Property, (l, r) => l.EqualsFast(r));
            ret.Deleted = item.Deleted_Property.Equals(rhs.Deleted_Property, (l, r) => l.EqualsFast(r));
            ret.Author = item.Author_Property.Equals(rhs.Author_Property, (l, r) => object.Equals(l, r));
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            if (item.MasterReferences.HasBeenSet == rhs.MasterReferences.HasBeenSet)
            {
                if (item.MasterReferences.HasBeenSet)
                {
                    ret.MasterReferences = new MaskItem<bool, IEnumerable<MaskItem<bool, MasterReference_Mask<bool>>>>();
                    ret.MasterReferences.Specific = item.MasterReferences.SelectAgainst<MasterReference, MaskItem<bool, MasterReference_Mask<bool>>>(rhs.MasterReferences, ((l, r) =>
                    {
                        MaskItem<bool, MasterReference_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => MasterReferenceCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.MasterReferences.Overall);
                    ret.MasterReferences.Overall = ret.MasterReferences.Overall && ret.MasterReferences.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.MasterReferences = new MaskItem<bool, IEnumerable<MaskItem<bool, MasterReference_Mask<bool>>>>();
                    ret.MasterReferences.Overall = true;
                }
            }
            else
            {
                ret.MasterReferences = new MaskItem<bool, IEnumerable<MaskItem<bool, MasterReference_Mask<bool>>>>();
                ret.MasterReferences.Overall = false;
            }
        }

        public static string ToString(
            this ITES4Getter item,
            string name = null,
            TES4_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITES4Getter item,
            FileGeneration fg,
            string name = null,
            TES4_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TES4)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TES4)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.Header?.Overall ?? true)
                {
                    item.Header?.ToString(fg, "Header");
                }
                if (printMask?.TypeOffsets ?? true)
                {
                    fg.AppendLine($"TypeOffsets => {item.TypeOffsets}");
                }
                if (printMask?.Deleted ?? true)
                {
                    fg.AppendLine($"Deleted => {item.Deleted}");
                }
                if (printMask?.Author ?? true)
                {
                    fg.AppendLine($"Author => {item.Author}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.MasterReferences?.Overall ?? true)
                {
                    fg.AppendLine("MasterReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.MasterReferences)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITES4Getter item,
            TES4_Mask<bool?> checkMask)
        {
            if (checkMask.Fluff.HasValue && checkMask.Fluff.Value != item.Fluff_Property.HasBeenSet) return false;
            if (checkMask.Header.Overall.HasValue && checkMask.Header.Overall.Value != item.Header_Property.HasBeenSet) return false;
            if (checkMask.Header.Specific != null && (item.Header_Property.Item == null || !item.Header_Property.Item.HasBeenSet(checkMask.Header.Specific))) return false;
            if (checkMask.TypeOffsets.HasValue && checkMask.TypeOffsets.Value != item.TypeOffsets_Property.HasBeenSet) return false;
            if (checkMask.Deleted.HasValue && checkMask.Deleted.Value != item.Deleted_Property.HasBeenSet) return false;
            if (checkMask.Author.HasValue && checkMask.Author.Value != item.Author_Property.HasBeenSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            if (checkMask.MasterReferences.Overall.HasValue && checkMask.MasterReferences.Overall.Value != item.MasterReferences.HasBeenSet) return false;
            return true;
        }

        public static TES4_Mask<bool> GetHasBeenSetMask(ITES4Getter item)
        {
            var ret = new TES4_Mask<bool>();
            ret.Fluff = item.Fluff_Property.HasBeenSet;
            ret.Header = new MaskItem<bool, Header_Mask<bool>>(item.Header_Property.HasBeenSet, HeaderCommon.GetHasBeenSetMask(item.Header_Property.Item));
            ret.TypeOffsets = item.TypeOffsets_Property.HasBeenSet;
            ret.Deleted = item.Deleted_Property.HasBeenSet;
            ret.Author = item.Author_Property.HasBeenSet;
            ret.Description = item.Description_Property.HasBeenSet;
            ret.MasterReferences = new MaskItem<bool, IEnumerable<MaskItem<bool, MasterReference_Mask<bool>>>>(item.MasterReferences.HasBeenSet, item.MasterReferences.Select((i) => new MaskItem<bool, MasterReference_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ITES4Getter item,
            bool doMasks,
            out TES4_ErrorMask errorMask,
            string name = null)
        {
            TES4_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TES4_ErrorMask()) : default(Func<TES4_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ITES4Getter item,
            Func<TES4_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.TES4"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.TES4");
                    }
                    if (item.Fluff_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Fluff),
                            item: item.Fluff_Property,
                            fieldIndex: (int)TES4_FieldIndex.Fluff,
                            errorMask: errorMask);
                    }
                    if (item.Header_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Header, Header_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Header_Property,
                            name: nameof(item.Header),
                            fieldIndex: (int)TES4_FieldIndex.Header,
                            errorMask: errorMask);
                    }
                    if (item.TypeOffsets_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.TypeOffsets),
                            item: item.TypeOffsets_Property,
                            fieldIndex: (int)TES4_FieldIndex.TypeOffsets,
                            errorMask: errorMask);
                    }
                    if (item.Deleted_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Deleted),
                            item: item.Deleted_Property,
                            fieldIndex: (int)TES4_FieldIndex.Deleted,
                            errorMask: errorMask);
                    }
                    if (item.Author_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Author),
                            item: item.Author_Property,
                            fieldIndex: (int)TES4_FieldIndex.Author,
                            errorMask: errorMask);
                    }
                    if (item.Description_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Description),
                            item: item.Description_Property,
                            fieldIndex: (int)TES4_FieldIndex.Description,
                            errorMask: errorMask);
                    }
                    if (item.MasterReferences.HasBeenSet)
                    {
                        ListXmlTranslation<MasterReference, MaskItem<Exception, MasterReference_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.MasterReferences),
                            item: item.MasterReferences,
                            fieldIndex: (int)TES4_FieldIndex.MasterReferences,
                            errorMask: errorMask,
                            transl: (MasterReference subItem, bool listDoMasks, out MaskItem<Exception, MasterReference_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<MasterReference, MasterReference_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            TES4 item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out TES4_ErrorMask errorMask)
        {
            TES4_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TES4_ErrorMask()) : default(Func<TES4_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            TES4 item,
            RecordTypeConverter recordTypeConverter,
            Func<TES4_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: TES4_Registration.TES4_HEADER,
                    type: ObjectType.Record))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            TES4 item,
            MutagenWriter writer,
            Func<TES4_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff_Property,
                fieldIndex: (int)TES4_FieldIndex.Fluff,
                errorMask: errorMask);
        }

        public static void Write_Binary_RecordTypes(
            TES4 item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<TES4_ErrorMask> errorMask)
        {
            LoquiBinaryTranslation<Header, Header_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Header_Property,
                fieldIndex: (int)TES4_FieldIndex.Header,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TypeOffsets_Property,
                fieldIndex: (int)TES4_FieldIndex.TypeOffsets,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(TES4_Registration.OFST_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Deleted_Property,
                fieldIndex: (int)TES4_FieldIndex.Deleted,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(TES4_Registration.DELE_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Author_Property,
                fieldIndex: (int)TES4_FieldIndex.Author,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(TES4_Registration.CNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description_Property,
                fieldIndex: (int)TES4_FieldIndex.Description,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(TES4_Registration.SNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<MasterReference, MaskItem<Exception, MasterReference_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.MasterReferences,
                fieldIndex: (int)TES4_FieldIndex.MasterReferences,
                errorMask: errorMask,
                transl: (MasterReference subItem, bool listDoMasks, out MaskItem<Exception, MasterReference_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<MasterReference, MasterReference_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TES4_Mask<T> : IMask<T>, IEquatable<TES4_Mask<T>>
    {
        #region Ctors
        public TES4_Mask()
        {
        }

        public TES4_Mask(T initialValue)
        {
            this.Fluff = initialValue;
            this.Header = new MaskItem<T, Header_Mask<T>>(initialValue, new Header_Mask<T>(initialValue));
            this.TypeOffsets = initialValue;
            this.Deleted = initialValue;
            this.Author = initialValue;
            this.Description = initialValue;
            this.MasterReferences = new MaskItem<T, IEnumerable<MaskItem<T, MasterReference_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Fluff;
        public MaskItem<T, Header_Mask<T>> Header { get; set; }
        public T TypeOffsets;
        public T Deleted;
        public T Author;
        public T Description;
        public MaskItem<T, IEnumerable<MaskItem<T, MasterReference_Mask<T>>>> MasterReferences;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TES4_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TES4_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.Header, rhs.Header)) return false;
            if (!object.Equals(this.TypeOffsets, rhs.TypeOffsets)) return false;
            if (!object.Equals(this.Deleted, rhs.Deleted)) return false;
            if (!object.Equals(this.Author, rhs.Author)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.MasterReferences, rhs.MasterReferences)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.Header?.GetHashCode());
            ret = ret.CombineHashCode(this.TypeOffsets?.GetHashCode());
            ret = ret.CombineHashCode(this.Deleted?.GetHashCode());
            ret = ret.CombineHashCode(this.Author?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.MasterReferences?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Fluff)) return false;
            if (Header != null)
            {
                if (!eval(this.Header.Overall)) return false;
                if (this.Header.Specific != null && !this.Header.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.TypeOffsets)) return false;
            if (!eval(this.Deleted)) return false;
            if (!eval(this.Author)) return false;
            if (!eval(this.Description)) return false;
            if (this.MasterReferences != null)
            {
                if (!eval(this.MasterReferences.Overall)) return false;
                if (this.MasterReferences.Specific != null)
                {
                    foreach (var item in this.MasterReferences.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TES4_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TES4_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TES4_Mask<R> obj, Func<T, R> eval)
        {
            obj.Fluff = eval(this.Fluff);
            if (this.Header != null)
            {
                obj.Header = new MaskItem<R, Header_Mask<R>>();
                obj.Header.Overall = eval(this.Header.Overall);
                if (this.Header.Specific != null)
                {
                    obj.Header.Specific = this.Header.Specific.Translate(eval);
                }
            }
            obj.TypeOffsets = eval(this.TypeOffsets);
            obj.Deleted = eval(this.Deleted);
            obj.Author = eval(this.Author);
            obj.Description = eval(this.Description);
            if (MasterReferences != null)
            {
                obj.MasterReferences = new MaskItem<R, IEnumerable<MaskItem<R, MasterReference_Mask<R>>>>();
                obj.MasterReferences.Overall = eval(this.MasterReferences.Overall);
                if (MasterReferences.Specific != null)
                {
                    List<MaskItem<R, MasterReference_Mask<R>>> l = new List<MaskItem<R, MasterReference_Mask<R>>>();
                    obj.MasterReferences.Specific = l;
                    foreach (var item in MasterReferences.Specific)
                    {
                        MaskItem<R, MasterReference_Mask<R>> mask = default(MaskItem<R, MasterReference_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, MasterReference_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.MasterReferences.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TES4_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TES4_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TES4_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.Header?.Overall ?? true)
                {
                    Header?.ToString(fg);
                }
                if (printMask?.TypeOffsets ?? true)
                {
                    fg.AppendLine($"TypeOffsets => {TypeOffsets}");
                }
                if (printMask?.Deleted ?? true)
                {
                    fg.AppendLine($"Deleted => {Deleted}");
                }
                if (printMask?.Author ?? true)
                {
                    fg.AppendLine($"Author => {Author}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.MasterReferences?.Overall ?? true)
                {
                    fg.AppendLine("MasterReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (MasterReferences.Overall != null)
                        {
                            fg.AppendLine(MasterReferences.Overall.ToString());
                        }
                        if (MasterReferences.Specific != null)
                        {
                            foreach (var subItem in MasterReferences.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TES4_ErrorMask : IErrorMask, IErrorMask<TES4_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Fluff;
        public MaskItem<Exception, Header_ErrorMask> Header;
        public Exception TypeOffsets;
        public Exception Deleted;
        public Exception Author;
        public Exception Description;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>> MasterReferences;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case TES4_FieldIndex.Header:
                    this.Header = new MaskItem<Exception, Header_ErrorMask>(ex, null);
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    this.TypeOffsets = ex;
                    break;
                case TES4_FieldIndex.Deleted:
                    this.Deleted = ex;
                    break;
                case TES4_FieldIndex.Author:
                    this.Author = ex;
                    break;
                case TES4_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case TES4_FieldIndex.MasterReferences:
                    this.MasterReferences = new MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case TES4_FieldIndex.Header:
                    this.Header = (MaskItem<Exception, Header_ErrorMask>)obj;
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    this.TypeOffsets = (Exception)obj;
                    break;
                case TES4_FieldIndex.Deleted:
                    this.Deleted = (Exception)obj;
                    break;
                case TES4_FieldIndex.Author:
                    this.Author = (Exception)obj;
                    break;
                case TES4_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case TES4_FieldIndex.MasterReferences:
                    this.MasterReferences = (MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Fluff != null) return true;
            if (Header != null) return true;
            if (TypeOffsets != null) return true;
            if (Deleted != null) return true;
            if (Author != null) return true;
            if (Description != null) return true;
            if (MasterReferences != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TES4_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Fluff => {Fluff}");
            Header?.ToString(fg);
            fg.AppendLine($"TypeOffsets => {TypeOffsets}");
            fg.AppendLine($"Deleted => {Deleted}");
            fg.AppendLine($"Author => {Author}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine("MasterReferences =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (MasterReferences.Overall != null)
                {
                    fg.AppendLine(MasterReferences.Overall.ToString());
                }
                if (MasterReferences.Specific != null)
                {
                    foreach (var subItem in MasterReferences.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TES4_ErrorMask Combine(TES4_ErrorMask rhs)
        {
            var ret = new TES4_ErrorMask();
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.Header = new MaskItem<Exception, Header_ErrorMask>(this.Header.Overall.Combine(rhs.Header.Overall), ((IErrorMask<Header_ErrorMask>)this.Header.Specific).Combine(rhs.Header.Specific));
            ret.TypeOffsets = this.TypeOffsets.Combine(rhs.TypeOffsets);
            ret.Deleted = this.Deleted.Combine(rhs.Deleted);
            ret.Author = this.Author.Combine(rhs.Author);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.MasterReferences = new MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>(this.MasterReferences.Overall.Combine(rhs.MasterReferences.Overall), new List<MaskItem<Exception, MasterReference_ErrorMask>>(this.MasterReferences.Specific.And(rhs.MasterReferences.Specific)));
            return ret;
        }
        public static TES4_ErrorMask Combine(TES4_ErrorMask lhs, TES4_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TES4_CopyMask
    {
        #region Members
        public bool Fluff;
        public MaskItem<CopyOption, Header_CopyMask> Header;
        public bool TypeOffsets;
        public bool Deleted;
        public bool Author;
        public bool Description;
        public MaskItem<CopyOption, MasterReference_CopyMask> MasterReferences;
        #endregion

    }
    #endregion




    #endregion

}
