/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class AClothing :
        AItem,
        IAClothingInternal,
        ILoquiObjectSetter<AClothing>,
        IEquatable<AClothing>
    {
        #region Ctor
        protected AClothing()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAClothingGetter.Name => this.Name;
        #endregion
        #region Script
        public FormLinkNullable<Script> Script { get; set; } = new FormLinkNullable<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLinkNullable<IScriptGetter> IAClothingGetter.Script => this.Script.ToGetter<Script, IScriptGetter>();
        #endregion
        #region Enchantment
        public FormLinkNullable<Enchantment> Enchantment { get; set; } = new FormLinkNullable<Enchantment>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLinkNullable<IEnchantmentGetter> IAClothingGetter.Enchantment => this.Enchantment.ToGetter<Enchantment, IEnchantmentGetter>();
        #endregion
        #region EnchantmentPoints
        public UInt16? EnchantmentPoints { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IAClothingGetter.EnchantmentPoints => this.EnchantmentPoints;
        #endregion
        #region ClothingFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClothingFlags? _ClothingFlags;
        public ClothingFlags? ClothingFlags
        {
            get => _ClothingFlags;
            set => _ClothingFlags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IClothingFlagsGetter? IAClothingGetter.ClothingFlags => this.ClothingFlags;
        #endregion
        #region MaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _MaleBipedModel;
        public Model? MaleBipedModel
        {
            get => _MaleBipedModel;
            set => _MaleBipedModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAClothingGetter.MaleBipedModel => this.MaleBipedModel;
        #endregion
        #region MaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _MaleWorldModel;
        public Model? MaleWorldModel
        {
            get => _MaleWorldModel;
            set => _MaleWorldModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAClothingGetter.MaleWorldModel => this.MaleWorldModel;
        #endregion
        #region MaleIcon
        public String? MaleIcon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAClothingGetter.MaleIcon => this.MaleIcon;
        #endregion
        #region FemaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _FemaleBipedModel;
        public Model? FemaleBipedModel
        {
            get => _FemaleBipedModel;
            set => _FemaleBipedModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAClothingGetter.FemaleBipedModel => this.FemaleBipedModel;
        #endregion
        #region FemaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _FemaleWorldModel;
        public Model? FemaleWorldModel
        {
            get => _FemaleWorldModel;
            set => _FemaleWorldModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAClothingGetter.FemaleWorldModel => this.FemaleWorldModel;
        #endregion
        #region FemaleIcon
        public String? FemaleIcon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAClothingGetter.FemaleIcon => this.FemaleIcon;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AClothingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAClothingGetter rhs)) return false;
            return ((AClothingCommon)((IAClothingGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(AClothing? obj)
        {
            return ((AClothingCommon)((IAClothingGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AClothingCommon)((IAClothingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AItem.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Script = initialValue;
                this.Enchantment = initialValue;
                this.EnchantmentPoints = initialValue;
                this.ClothingFlags = new MaskItem<TItem, ClothingFlags.Mask<TItem>?>(initialValue, new ClothingFlags.Mask<TItem>(initialValue));
                this.MaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MaleIcon = initialValue;
                this.FemaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.FemaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.FemaleIcon = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Script,
                TItem Enchantment,
                TItem EnchantmentPoints,
                TItem ClothingFlags,
                TItem MaleBipedModel,
                TItem MaleWorldModel,
                TItem MaleIcon,
                TItem FemaleBipedModel,
                TItem FemaleWorldModel,
                TItem FemaleIcon)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Script = Script;
                this.Enchantment = Enchantment;
                this.EnchantmentPoints = EnchantmentPoints;
                this.ClothingFlags = new MaskItem<TItem, ClothingFlags.Mask<TItem>?>(ClothingFlags, new ClothingFlags.Mask<TItem>(ClothingFlags));
                this.MaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(MaleBipedModel, new Model.Mask<TItem>(MaleBipedModel));
                this.MaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(MaleWorldModel, new Model.Mask<TItem>(MaleWorldModel));
                this.MaleIcon = MaleIcon;
                this.FemaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(FemaleBipedModel, new Model.Mask<TItem>(FemaleBipedModel));
                this.FemaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(FemaleWorldModel, new Model.Mask<TItem>(FemaleWorldModel));
                this.FemaleIcon = FemaleIcon;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Script;
            public TItem Enchantment;
            public TItem EnchantmentPoints;
            public MaskItem<TItem, ClothingFlags.Mask<TItem>?>? ClothingFlags { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? MaleBipedModel { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? MaleWorldModel { get; set; }
            public TItem MaleIcon;
            public MaskItem<TItem, Model.Mask<TItem>?>? FemaleBipedModel { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? FemaleWorldModel { get; set; }
            public TItem FemaleIcon;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
                if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
                if (!object.Equals(this.ClothingFlags, rhs.ClothingFlags)) return false;
                if (!object.Equals(this.MaleBipedModel, rhs.MaleBipedModel)) return false;
                if (!object.Equals(this.MaleWorldModel, rhs.MaleWorldModel)) return false;
                if (!object.Equals(this.MaleIcon, rhs.MaleIcon)) return false;
                if (!object.Equals(this.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
                if (!object.Equals(this.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
                if (!object.Equals(this.FemaleIcon, rhs.FemaleIcon)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Script);
                hash.Add(this.Enchantment);
                hash.Add(this.EnchantmentPoints);
                hash.Add(this.ClothingFlags);
                hash.Add(this.MaleBipedModel);
                hash.Add(this.MaleWorldModel);
                hash.Add(this.MaleIcon);
                hash.Add(this.FemaleBipedModel);
                hash.Add(this.FemaleWorldModel);
                hash.Add(this.FemaleIcon);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Script)) return false;
                if (!eval(this.Enchantment)) return false;
                if (!eval(this.EnchantmentPoints)) return false;
                if (ClothingFlags != null)
                {
                    if (!eval(this.ClothingFlags.Overall)) return false;
                    if (this.ClothingFlags.Specific != null && !this.ClothingFlags.Specific.All(eval)) return false;
                }
                if (MaleBipedModel != null)
                {
                    if (!eval(this.MaleBipedModel.Overall)) return false;
                    if (this.MaleBipedModel.Specific != null && !this.MaleBipedModel.Specific.All(eval)) return false;
                }
                if (MaleWorldModel != null)
                {
                    if (!eval(this.MaleWorldModel.Overall)) return false;
                    if (this.MaleWorldModel.Specific != null && !this.MaleWorldModel.Specific.All(eval)) return false;
                }
                if (!eval(this.MaleIcon)) return false;
                if (FemaleBipedModel != null)
                {
                    if (!eval(this.FemaleBipedModel.Overall)) return false;
                    if (this.FemaleBipedModel.Specific != null && !this.FemaleBipedModel.Specific.All(eval)) return false;
                }
                if (FemaleWorldModel != null)
                {
                    if (!eval(this.FemaleWorldModel.Overall)) return false;
                    if (this.FemaleWorldModel.Specific != null && !this.FemaleWorldModel.Specific.All(eval)) return false;
                }
                if (!eval(this.FemaleIcon)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Script)) return true;
                if (eval(this.Enchantment)) return true;
                if (eval(this.EnchantmentPoints)) return true;
                if (ClothingFlags != null)
                {
                    if (eval(this.ClothingFlags.Overall)) return true;
                    if (this.ClothingFlags.Specific != null && this.ClothingFlags.Specific.Any(eval)) return true;
                }
                if (MaleBipedModel != null)
                {
                    if (eval(this.MaleBipedModel.Overall)) return true;
                    if (this.MaleBipedModel.Specific != null && this.MaleBipedModel.Specific.Any(eval)) return true;
                }
                if (MaleWorldModel != null)
                {
                    if (eval(this.MaleWorldModel.Overall)) return true;
                    if (this.MaleWorldModel.Specific != null && this.MaleWorldModel.Specific.Any(eval)) return true;
                }
                if (eval(this.MaleIcon)) return true;
                if (FemaleBipedModel != null)
                {
                    if (eval(this.FemaleBipedModel.Overall)) return true;
                    if (this.FemaleBipedModel.Specific != null && this.FemaleBipedModel.Specific.Any(eval)) return true;
                }
                if (FemaleWorldModel != null)
                {
                    if (eval(this.FemaleWorldModel.Overall)) return true;
                    if (this.FemaleWorldModel.Specific != null && this.FemaleWorldModel.Specific.Any(eval)) return true;
                }
                if (eval(this.FemaleIcon)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AClothing.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Script = eval(this.Script);
                obj.Enchantment = eval(this.Enchantment);
                obj.EnchantmentPoints = eval(this.EnchantmentPoints);
                obj.ClothingFlags = this.ClothingFlags == null ? null : new MaskItem<R, ClothingFlags.Mask<R>?>(eval(this.ClothingFlags.Overall), this.ClothingFlags.Specific?.Translate(eval));
                obj.MaleBipedModel = this.MaleBipedModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.MaleBipedModel.Overall), this.MaleBipedModel.Specific?.Translate(eval));
                obj.MaleWorldModel = this.MaleWorldModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.MaleWorldModel.Overall), this.MaleWorldModel.Specific?.Translate(eval));
                obj.MaleIcon = eval(this.MaleIcon);
                obj.FemaleBipedModel = this.FemaleBipedModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.FemaleBipedModel.Overall), this.FemaleBipedModel.Specific?.Translate(eval));
                obj.FemaleWorldModel = this.FemaleWorldModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.FemaleWorldModel.Overall), this.FemaleWorldModel.Specific?.Translate(eval));
                obj.FemaleIcon = eval(this.FemaleIcon);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AClothing.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AClothing.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AClothing.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.Enchantment ?? true)
                    {
                        fg.AppendItem(Enchantment, "Enchantment");
                    }
                    if (printMask?.EnchantmentPoints ?? true)
                    {
                        fg.AppendItem(EnchantmentPoints, "EnchantmentPoints");
                    }
                    if (printMask?.ClothingFlags?.Overall ?? true)
                    {
                        ClothingFlags?.ToString(fg);
                    }
                    if (printMask?.MaleBipedModel?.Overall ?? true)
                    {
                        MaleBipedModel?.ToString(fg);
                    }
                    if (printMask?.MaleWorldModel?.Overall ?? true)
                    {
                        MaleWorldModel?.ToString(fg);
                    }
                    if (printMask?.MaleIcon ?? true)
                    {
                        fg.AppendItem(MaleIcon, "MaleIcon");
                    }
                    if (printMask?.FemaleBipedModel?.Overall ?? true)
                    {
                        FemaleBipedModel?.ToString(fg);
                    }
                    if (printMask?.FemaleWorldModel?.Overall ?? true)
                    {
                        FemaleWorldModel?.ToString(fg);
                    }
                    if (printMask?.FemaleIcon ?? true)
                    {
                        fg.AppendItem(FemaleIcon, "FemaleIcon");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AItem.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Script;
            public Exception? Enchantment;
            public Exception? EnchantmentPoints;
            public MaskItem<Exception?, ClothingFlags.ErrorMask?>? ClothingFlags;
            public MaskItem<Exception?, Model.ErrorMask?>? MaleBipedModel;
            public MaskItem<Exception?, Model.ErrorMask?>? MaleWorldModel;
            public Exception? MaleIcon;
            public MaskItem<Exception?, Model.ErrorMask?>? FemaleBipedModel;
            public MaskItem<Exception?, Model.ErrorMask?>? FemaleWorldModel;
            public Exception? FemaleIcon;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
                switch (enu)
                {
                    case AClothing_FieldIndex.Name:
                        return Name;
                    case AClothing_FieldIndex.Script:
                        return Script;
                    case AClothing_FieldIndex.Enchantment:
                        return Enchantment;
                    case AClothing_FieldIndex.EnchantmentPoints:
                        return EnchantmentPoints;
                    case AClothing_FieldIndex.ClothingFlags:
                        return ClothingFlags;
                    case AClothing_FieldIndex.MaleBipedModel:
                        return MaleBipedModel;
                    case AClothing_FieldIndex.MaleWorldModel:
                        return MaleWorldModel;
                    case AClothing_FieldIndex.MaleIcon:
                        return MaleIcon;
                    case AClothing_FieldIndex.FemaleBipedModel:
                        return FemaleBipedModel;
                    case AClothing_FieldIndex.FemaleWorldModel:
                        return FemaleWorldModel;
                    case AClothing_FieldIndex.FemaleIcon:
                        return FemaleIcon;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
                switch (enu)
                {
                    case AClothing_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case AClothing_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case AClothing_FieldIndex.Enchantment:
                        this.Enchantment = ex;
                        break;
                    case AClothing_FieldIndex.EnchantmentPoints:
                        this.EnchantmentPoints = ex;
                        break;
                    case AClothing_FieldIndex.ClothingFlags:
                        this.ClothingFlags = new MaskItem<Exception?, ClothingFlags.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.MaleBipedModel:
                        this.MaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.MaleWorldModel:
                        this.MaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.MaleIcon:
                        this.MaleIcon = ex;
                        break;
                    case AClothing_FieldIndex.FemaleBipedModel:
                        this.FemaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.FemaleWorldModel:
                        this.FemaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.FemaleIcon:
                        this.FemaleIcon = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
                switch (enu)
                {
                    case AClothing_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.Enchantment:
                        this.Enchantment = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.EnchantmentPoints:
                        this.EnchantmentPoints = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.ClothingFlags:
                        this.ClothingFlags = (MaskItem<Exception?, ClothingFlags.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.MaleBipedModel:
                        this.MaleBipedModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.MaleWorldModel:
                        this.MaleWorldModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.MaleIcon:
                        this.MaleIcon = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.FemaleBipedModel:
                        this.FemaleBipedModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.FemaleWorldModel:
                        this.FemaleWorldModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.FemaleIcon:
                        this.FemaleIcon = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Script != null) return true;
                if (Enchantment != null) return true;
                if (EnchantmentPoints != null) return true;
                if (ClothingFlags != null) return true;
                if (MaleBipedModel != null) return true;
                if (MaleWorldModel != null) return true;
                if (MaleIcon != null) return true;
                if (FemaleBipedModel != null) return true;
                if (FemaleWorldModel != null) return true;
                if (FemaleIcon != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Script, "Script");
                fg.AppendItem(Enchantment, "Enchantment");
                fg.AppendItem(EnchantmentPoints, "EnchantmentPoints");
                ClothingFlags?.ToString(fg);
                MaleBipedModel?.ToString(fg);
                MaleWorldModel?.ToString(fg);
                fg.AppendItem(MaleIcon, "MaleIcon");
                FemaleBipedModel?.ToString(fg);
                FemaleWorldModel?.ToString(fg);
                fg.AppendItem(FemaleIcon, "FemaleIcon");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
                ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
                ret.ClothingFlags = this.ClothingFlags.Combine(rhs.ClothingFlags, (l, r) => l.Combine(r));
                ret.MaleBipedModel = this.MaleBipedModel.Combine(rhs.MaleBipedModel, (l, r) => l.Combine(r));
                ret.MaleWorldModel = this.MaleWorldModel.Combine(rhs.MaleWorldModel, (l, r) => l.Combine(r));
                ret.MaleIcon = this.MaleIcon.Combine(rhs.MaleIcon);
                ret.FemaleBipedModel = this.FemaleBipedModel.Combine(rhs.FemaleBipedModel, (l, r) => l.Combine(r));
                ret.FemaleWorldModel = this.FemaleWorldModel.Combine(rhs.FemaleWorldModel, (l, r) => l.Combine(r));
                ret.FemaleIcon = this.FemaleIcon.Combine(rhs.FemaleIcon);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AItem.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Script;
            public bool Enchantment;
            public bool EnchantmentPoints;
            public ClothingFlags.TranslationMask? ClothingFlags;
            public Model.TranslationMask? MaleBipedModel;
            public Model.TranslationMask? MaleWorldModel;
            public bool MaleIcon;
            public Model.TranslationMask? FemaleBipedModel;
            public Model.TranslationMask? FemaleWorldModel;
            public bool FemaleIcon;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Script = defaultOn;
                this.Enchantment = defaultOn;
                this.EnchantmentPoints = defaultOn;
                this.MaleIcon = defaultOn;
                this.FemaleIcon = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Script, null));
                ret.Add((Enchantment, null));
                ret.Add((EnchantmentPoints, null));
                ret.Add((ClothingFlags != null || DefaultOn, ClothingFlags?.GetCrystal()));
                ret.Add((MaleBipedModel != null || DefaultOn, MaleBipedModel?.GetCrystal()));
                ret.Add((MaleWorldModel != null || DefaultOn, MaleWorldModel?.GetCrystal()));
                ret.Add((MaleIcon, null));
                ret.Add((FemaleBipedModel != null || DefaultOn, FemaleBipedModel?.GetCrystal()));
                ret.Add((FemaleWorldModel != null || DefaultOn, FemaleWorldModel?.GetCrystal()));
                ret.Add((FemaleIcon, null));
            }

        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => AClothingCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => AClothingCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AClothingCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AClothingCommon.Instance.RemapLinks(this, mapping);
        public AClothing(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public AClothing(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public AClothing(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AClothingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AClothingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AClothingSetterCommon)((IAClothingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AClothing GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface IAClothing :
        IAClothingGetter,
        IAItem,
        INamed,
        ILoquiObjectSetter<IAClothingInternal>,
        ILinkedFormKeyContainer
    {
        new String? Name { get; set; }
        new FormLinkNullable<Script> Script { get; set; }
        new FormLinkNullable<Enchantment> Enchantment { get; set; }
        new UInt16? EnchantmentPoints { get; set; }
        new ClothingFlags? ClothingFlags { get; set; }
        new Model? MaleBipedModel { get; set; }
        new Model? MaleWorldModel { get; set; }
        new String? MaleIcon { get; set; }
        new Model? FemaleBipedModel { get; set; }
        new Model? FemaleWorldModel { get; set; }
        new String? FemaleIcon { get; set; }
    }

    public partial interface IAClothingInternal :
        IAItemInternal,
        IAClothing,
        IAClothingGetter
    {
    }

    public partial interface IAClothingGetter :
        IAItemGetter,
        INamedGetter,
        ILoquiObject<IAClothingGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => AClothing_Registration.Instance;
        String? Name { get; }
        FormLinkNullable<IScriptGetter> Script { get; }
        FormLinkNullable<IEnchantmentGetter> Enchantment { get; }
        UInt16? EnchantmentPoints { get; }
        IClothingFlagsGetter? ClothingFlags { get; }
        IModelGetter? MaleBipedModel { get; }
        IModelGetter? MaleWorldModel { get; }
        String? MaleIcon { get; }
        IModelGetter? FemaleBipedModel { get; }
        IModelGetter? FemaleWorldModel { get; }
        String? FemaleIcon { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AClothingMixIn
    {
        public static void Clear(this IAClothingInternal item)
        {
            ((AClothingSetterCommon)((IAClothingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AClothing.Mask<bool> GetEqualsMask(
            this IAClothingGetter item,
            IAClothingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAClothingGetter item,
            string? name = null,
            AClothing.Mask<bool>? printMask = null)
        {
            return ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAClothingGetter item,
            FileGeneration fg,
            string? name = null,
            AClothing.Mask<bool>? printMask = null)
        {
            ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAClothingGetter item,
            IAClothingGetter rhs)
        {
            return ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAClothingInternal lhs,
            IAClothingGetter rhs,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AClothingSetterTranslationCommon)((IAClothingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AClothing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAClothingInternal lhs,
            IAClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AClothingSetterTranslationCommon)((IAClothingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AClothing DeepCopy(
            this IAClothingGetter item,
            AClothing.TranslationMask? copyMask = null)
        {
            return ((AClothingSetterTranslationCommon)((IAClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AClothing DeepCopy(
            this IAClothingGetter item,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? copyMask = null)
        {
            return ((AClothingSetterTranslationCommon)((IAClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AClothing DeepCopy(
            this IAClothingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AClothingSetterTranslationCommon)((IAClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAClothingInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AClothingSetterCommon)((IAClothingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AClothing_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        ClothingFlags = 9,
        MaleBipedModel = 10,
        MaleWorldModel = 11,
        MaleIcon = 12,
        FemaleBipedModel = 13,
        FemaleWorldModel = 14,
        FemaleIcon = 15,
    }
    #endregion

    #region Registration
    public partial class AClothing_Registration : ILoquiRegistration
    {
        public static readonly AClothing_Registration Instance = new AClothing_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 69,
            version: 0);

        public const string GUID = "45098216-a539-4788-84f5-ece76ab7abf2";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(AClothing.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AClothing.ErrorMask);

        public static readonly Type ClassType = typeof(AClothing);

        public static readonly Type GetterType = typeof(IAClothingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAClothing);

        public static readonly Type? InternalSetterType = typeof(IAClothingInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AClothing";

        public const string Name = "AClothing";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)AClothing_FieldIndex.Name;
                case "SCRIPT":
                    return (ushort)AClothing_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)AClothing_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)AClothing_FieldIndex.EnchantmentPoints;
                case "CLOTHINGFLAGS":
                    return (ushort)AClothing_FieldIndex.ClothingFlags;
                case "MALEBIPEDMODEL":
                    return (ushort)AClothing_FieldIndex.MaleBipedModel;
                case "MALEWORLDMODEL":
                    return (ushort)AClothing_FieldIndex.MaleWorldModel;
                case "MALEICON":
                    return (ushort)AClothing_FieldIndex.MaleIcon;
                case "FEMALEBIPEDMODEL":
                    return (ushort)AClothing_FieldIndex.FemaleBipedModel;
                case "FEMALEWORLDMODEL":
                    return (ushort)AClothing_FieldIndex.FemaleWorldModel;
                case "FEMALEICON":
                    return (ushort)AClothing_FieldIndex.FemaleIcon;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.ClothingFlags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                case AClothing_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return AItem_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.ClothingFlags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                    return true;
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return AItem_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.ClothingFlags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                case AClothing_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return AItem_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                    return "Name";
                case AClothing_FieldIndex.Script:
                    return "Script";
                case AClothing_FieldIndex.Enchantment:
                    return "Enchantment";
                case AClothing_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case AClothing_FieldIndex.ClothingFlags:
                    return "ClothingFlags";
                case AClothing_FieldIndex.MaleBipedModel:
                    return "MaleBipedModel";
                case AClothing_FieldIndex.MaleWorldModel:
                    return "MaleWorldModel";
                case AClothing_FieldIndex.MaleIcon:
                    return "MaleIcon";
                case AClothing_FieldIndex.FemaleBipedModel:
                    return "FemaleBipedModel";
                case AClothing_FieldIndex.FemaleWorldModel:
                    return "FemaleWorldModel";
                case AClothing_FieldIndex.FemaleIcon:
                    return "FemaleIcon";
                default:
                    return AItem_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.ClothingFlags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                case AClothing_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return AItem_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.ClothingFlags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                case AClothing_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return AItem_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                    return typeof(String);
                case AClothing_FieldIndex.Script:
                    return typeof(FormLinkNullable<Script>);
                case AClothing_FieldIndex.Enchantment:
                    return typeof(FormLinkNullable<Enchantment>);
                case AClothing_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case AClothing_FieldIndex.ClothingFlags:
                    return typeof(ClothingFlags);
                case AClothing_FieldIndex.MaleBipedModel:
                    return typeof(Model);
                case AClothing_FieldIndex.MaleWorldModel:
                    return typeof(Model);
                case AClothing_FieldIndex.MaleIcon:
                    return typeof(String);
                case AClothing_FieldIndex.FemaleBipedModel:
                    return typeof(Model);
                case AClothing_FieldIndex.FemaleWorldModel:
                    return typeof(Model);
                case AClothing_FieldIndex.FemaleIcon:
                    return typeof(String);
                default:
                    return AItem_Registration.GetNthType(index);
            }
        }

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.FULL,
                        RecordTypes.SCRI,
                        RecordTypes.ENAM,
                        RecordTypes.ANAM,
                        RecordTypes.BMDT,
                        RecordTypes.MODL,
                        RecordTypes.MOD2,
                        RecordTypes.ICON,
                        RecordTypes.MOD3,
                        RecordTypes.MOD4,
                        RecordTypes.ICO2,
                        RecordTypes.ARMO,
                        RecordTypes.CLOT
                    })
            );
        });
        public static RecordTypeConverter MaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD2")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODB"),
                new RecordType("MO2B")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO2T")));
        public static RecordTypeConverter FemaleBipedModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD3")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODB"),
                new RecordType("MO3B")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO3T")));
        public static RecordTypeConverter FemaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD4")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODB"),
                new RecordType("MO4B")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO4T")));
        public static readonly Type BinaryWriteTranslation = typeof(AClothingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AClothingSetterCommon : AItemSetterCommon
    {
        public new static readonly AClothingSetterCommon Instance = new AClothingSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAClothingInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Script = FormLinkNullable<Script>.Null;
            item.Enchantment = FormLinkNullable<Enchantment>.Null;
            item.EnchantmentPoints = default;
            item.ClothingFlags = null;
            item.MaleBipedModel = null;
            item.MaleWorldModel = null;
            item.MaleIcon = default;
            item.FemaleBipedModel = null;
            item.FemaleWorldModel = null;
            item.FemaleIcon = default;
            base.Clear(item);
        }
        
        public override void Clear(IAItemInternal item)
        {
            Clear(item: (IAClothingInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IAClothingInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAClothingInternal)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAClothingInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        public override void CopyInFromBinary(
            IAItemInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AClothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AClothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AClothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class AClothingCommon : AItemCommon
    {
        public new static readonly AClothingCommon Instance = new AClothingCommon();

        public AClothing.Mask<bool> GetEqualsMask(
            IAClothingGetter item,
            IAClothingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AClothing.Mask<bool>(false);
            ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAClothingGetter item,
            IAClothingGetter rhs,
            AClothing.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Enchantment = object.Equals(item.Enchantment, rhs.Enchantment);
            ret.EnchantmentPoints = item.EnchantmentPoints == rhs.EnchantmentPoints;
            ret.ClothingFlags = EqualsMaskHelper.EqualsHelper(
                item.ClothingFlags,
                rhs.ClothingFlags,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.MaleBipedModel,
                rhs.MaleBipedModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.MaleWorldModel,
                rhs.MaleWorldModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaleIcon = string.Equals(item.MaleIcon, rhs.MaleIcon);
            ret.FemaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleBipedModel,
                rhs.FemaleBipedModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FemaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleWorldModel,
                rhs.FemaleWorldModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FemaleIcon = string.Equals(item.FemaleIcon, rhs.FemaleIcon);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAClothingGetter item,
            string? name = null,
            AClothing.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAClothingGetter item,
            FileGeneration fg,
            string? name = null,
            AClothing.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AClothing =>");
            }
            else
            {
                fg.AppendLine($"{name} (AClothing) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAClothingGetter item,
            FileGeneration fg,
            AClothing.Mask<bool>? printMask = null)
        {
            AItemCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendItem(item.Script.FormKey, "Script");
            }
            if (printMask?.Enchantment ?? true)
            {
                fg.AppendItem(item.Enchantment.FormKey, "Enchantment");
            }
            if ((printMask?.EnchantmentPoints ?? true)
                && item.EnchantmentPoints.TryGet(out var EnchantmentPointsItem))
            {
                fg.AppendItem(EnchantmentPointsItem, "EnchantmentPoints");
            }
            if ((printMask?.ClothingFlags?.Overall ?? true)
                && item.ClothingFlags.TryGet(out var ClothingFlagsItem))
            {
                ClothingFlagsItem?.ToString(fg, "ClothingFlags");
            }
            if ((printMask?.MaleBipedModel?.Overall ?? true)
                && item.MaleBipedModel.TryGet(out var MaleBipedModelItem))
            {
                MaleBipedModelItem?.ToString(fg, "MaleBipedModel");
            }
            if ((printMask?.MaleWorldModel?.Overall ?? true)
                && item.MaleWorldModel.TryGet(out var MaleWorldModelItem))
            {
                MaleWorldModelItem?.ToString(fg, "MaleWorldModel");
            }
            if ((printMask?.MaleIcon ?? true)
                && item.MaleIcon.TryGet(out var MaleIconItem))
            {
                fg.AppendItem(MaleIconItem, "MaleIcon");
            }
            if ((printMask?.FemaleBipedModel?.Overall ?? true)
                && item.FemaleBipedModel.TryGet(out var FemaleBipedModelItem))
            {
                FemaleBipedModelItem?.ToString(fg, "FemaleBipedModel");
            }
            if ((printMask?.FemaleWorldModel?.Overall ?? true)
                && item.FemaleWorldModel.TryGet(out var FemaleWorldModelItem))
            {
                FemaleWorldModelItem?.ToString(fg, "FemaleWorldModel");
            }
            if ((printMask?.FemaleIcon ?? true)
                && item.FemaleIcon.TryGet(out var FemaleIconItem))
            {
                fg.AppendItem(FemaleIconItem, "FemaleIcon");
            }
        }
        
        public static AClothing_FieldIndex ConvertFieldIndex(AItem_FieldIndex index)
        {
            switch (index)
            {
                case AItem_FieldIndex.MajorRecordFlagsRaw:
                    return (AClothing_FieldIndex)((int)index);
                case AItem_FieldIndex.FormKey:
                    return (AClothing_FieldIndex)((int)index);
                case AItem_FieldIndex.VersionControl:
                    return (AClothing_FieldIndex)((int)index);
                case AItem_FieldIndex.EditorID:
                    return (AClothing_FieldIndex)((int)index);
                case AItem_FieldIndex.OblivionMajorRecordFlags:
                    return (AClothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AClothing_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AClothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (AClothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (AClothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (AClothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (AClothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AClothing_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AClothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AClothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AClothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AClothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAClothingGetter? lhs,
            IAClothingGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Enchantment.Equals(rhs.Enchantment)) return false;
            if (lhs.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            if (!object.Equals(lhs.ClothingFlags, rhs.ClothingFlags)) return false;
            if (!object.Equals(lhs.MaleBipedModel, rhs.MaleBipedModel)) return false;
            if (!object.Equals(lhs.MaleWorldModel, rhs.MaleWorldModel)) return false;
            if (!string.Equals(lhs.MaleIcon, rhs.MaleIcon)) return false;
            if (!object.Equals(lhs.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            if (!object.Equals(lhs.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            if (!string.Equals(lhs.FemaleIcon, rhs.FemaleIcon)) return false;
            return true;
        }
        
        public override bool Equals(
            IAItemGetter? lhs,
            IAItemGetter? rhs)
        {
            return Equals(
                lhs: (IAClothingGetter?)lhs,
                rhs: rhs as IAClothingGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAClothingGetter?)lhs,
                rhs: rhs as IAClothingGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAClothingGetter?)lhs,
                rhs: rhs as IAClothingGetter);
        }
        
        public virtual int GetHashCode(IAClothingGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Script);
            hash.Add(item.Enchantment);
            if (item.EnchantmentPoints.TryGet(out var EnchantmentPointsitem))
            {
                hash.Add(EnchantmentPointsitem);
            }
            if (item.ClothingFlags.TryGet(out var ClothingFlagsitem))
            {
                hash.Add(ClothingFlagsitem);
            }
            if (item.MaleBipedModel.TryGet(out var MaleBipedModelitem))
            {
                hash.Add(MaleBipedModelitem);
            }
            if (item.MaleWorldModel.TryGet(out var MaleWorldModelitem))
            {
                hash.Add(MaleWorldModelitem);
            }
            if (item.MaleIcon.TryGet(out var MaleIconitem))
            {
                hash.Add(MaleIconitem);
            }
            if (item.FemaleBipedModel.TryGet(out var FemaleBipedModelitem))
            {
                hash.Add(FemaleBipedModelitem);
            }
            if (item.FemaleWorldModel.TryGet(out var FemaleWorldModelitem))
            {
                hash.Add(FemaleWorldModelitem);
            }
            if (item.FemaleIcon.TryGet(out var FemaleIconitem))
            {
                hash.Add(FemaleIconitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAItemGetter item)
        {
            return GetHashCode(item: (IAClothingGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IAClothingGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAClothingGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AClothing.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IAClothingGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Script.FormKey.TryGet(out var ScriptKey))
            {
                yield return ScriptKey;
            }
            if (obj.Enchantment.FormKey.TryGet(out var EnchantmentKey))
            {
                yield return EnchantmentKey;
            }
            yield break;
        }
        
        public void RemapLinks(IAClothingGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(AClothing obj, AClothing rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            throw new NotImplementedException();
        }
        
        #endregion
        
    }
    public partial class AClothingSetterTranslationCommon : AItemSetterTranslationCommon
    {
        public new static readonly AClothingSetterTranslationCommon Instance = new AClothingSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IAClothingInternal item,
            IAClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            IAClothing item,
            IAClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAItem)item,
                (IAItemGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.Script) ?? true))
            {
                item.Script = new FormLinkNullable<Script>(rhs.Script.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.Enchantment) ?? true))
            {
                item.Enchantment = new FormLinkNullable<Enchantment>(rhs.Enchantment.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.EnchantmentPoints) ?? true))
            {
                item.EnchantmentPoints = rhs.EnchantmentPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.ClothingFlags) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.ClothingFlags);
                try
                {
                    if(rhs.ClothingFlags.TryGet(out var rhsClothingFlags))
                    {
                        item.ClothingFlags = rhsClothingFlags.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.ClothingFlags));
                    }
                    else
                    {
                        item.ClothingFlags = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleBipedModel) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.MaleBipedModel);
                try
                {
                    if(rhs.MaleBipedModel.TryGet(out var rhsMaleBipedModel))
                    {
                        item.MaleBipedModel = rhsMaleBipedModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.MaleBipedModel));
                    }
                    else
                    {
                        item.MaleBipedModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleWorldModel) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.MaleWorldModel);
                try
                {
                    if(rhs.MaleWorldModel.TryGet(out var rhsMaleWorldModel))
                    {
                        item.MaleWorldModel = rhsMaleWorldModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.MaleWorldModel));
                    }
                    else
                    {
                        item.MaleWorldModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleIcon) ?? true))
            {
                item.MaleIcon = rhs.MaleIcon;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleBipedModel) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.FemaleBipedModel);
                try
                {
                    if(rhs.FemaleBipedModel.TryGet(out var rhsFemaleBipedModel))
                    {
                        item.FemaleBipedModel = rhsFemaleBipedModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.FemaleBipedModel));
                    }
                    else
                    {
                        item.FemaleBipedModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleWorldModel) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.FemaleWorldModel);
                try
                {
                    if(rhs.FemaleWorldModel.TryGet(out var rhsFemaleWorldModel))
                    {
                        item.FemaleWorldModel = rhsFemaleWorldModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.FemaleWorldModel));
                    }
                    else
                    {
                        item.FemaleWorldModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleIcon) ?? true))
            {
                item.FemaleIcon = rhs.FemaleIcon;
            }
        }
        
        public override void DeepCopyIn(
            IAItemInternal item,
            IAItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAClothingInternal)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAItem item,
            IAItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAClothing)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAClothingInternal)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAClothing)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAClothingInternal)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAClothing)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AClothing DeepCopy(
            IAClothingGetter item,
            AClothing.TranslationMask? copyMask = null)
        {
            AClothing ret = (AClothing)((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).GetNew();
            ((AClothingSetterTranslationCommon)((IAClothingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AClothing DeepCopy(
            IAClothingGetter item,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AClothing ret = (AClothing)((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).GetNew();
            ((AClothingSetterTranslationCommon)((IAClothingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AClothing.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AClothing DeepCopy(
            IAClothingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AClothing ret = (AClothing)((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).GetNew();
            ((AClothingSetterTranslationCommon)((IAClothingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AClothing
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AClothing_Registration.Instance;
        public new static AClothing_Registration Registration => AClothing_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AClothingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AClothingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AClothingSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AClothingBinaryWriteTranslation :
        AItemBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AClothingBinaryWriteTranslation Instance = new AClothingBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IAClothingGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SCRI));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Enchantment,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ENAM));
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentPoints,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM));
            if (item.ClothingFlags.TryGet(out var ClothingFlagsItem))
            {
                ((ClothingFlagsBinaryWriteTranslation)((IBinaryItem)ClothingFlagsItem).BinaryWriteTranslator).Write(
                    item: ClothingFlagsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.MaleBipedModel.TryGet(out var MaleBipedModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)MaleBipedModelItem).BinaryWriteTranslator).Write(
                    item: MaleBipedModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.MaleWorldModel.TryGet(out var MaleWorldModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)MaleWorldModelItem).BinaryWriteTranslator).Write(
                    item: MaleWorldModelItem,
                    writer: writer,
                    recordTypeConverter: AClothing_Registration.MaleWorldModelConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaleIcon,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            if (item.FemaleBipedModel.TryGet(out var FemaleBipedModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)FemaleBipedModelItem).BinaryWriteTranslator).Write(
                    item: FemaleBipedModelItem,
                    writer: writer,
                    recordTypeConverter: AClothing_Registration.FemaleBipedModelConverter);
            }
            if (item.FemaleWorldModel.TryGet(out var FemaleWorldModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)FemaleWorldModelItem).BinaryWriteTranslator).Write(
                    item: FemaleWorldModelItem,
                    writer: writer,
                    recordTypeConverter: AClothing_Registration.FemaleWorldModelConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FemaleIcon,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ICO2),
                binaryType: StringBinaryType.NullTerminate);
        }

        public virtual void Write(
            MutagenWriter writer,
            IAClothingGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            writer.MetaData.FormVersion = item.FormVersion;
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            writer.MetaData.FormVersion = null;
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAItemGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AClothingBinaryCreateTranslation : AItemBinaryCreateTranslation
    {
        public new readonly static AClothingBinaryCreateTranslation Instance = new AClothingBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
        public static ParseResult FillBinaryRecordTypes(
            IAClothingInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)AClothing_FieldIndex.Name;
                }
                case RecordTypeInts.SCRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)AClothing_FieldIndex.Script;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Enchantment = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)AClothing_FieldIndex.Enchantment;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnchantmentPoints = frame.ReadUInt16();
                    return (int)AClothing_FieldIndex.EnchantmentPoints;
                }
                case RecordTypeInts.BMDT:
                {
                    item.ClothingFlags = Mutagen.Bethesda.Oblivion.ClothingFlags.CreateFromBinary(frame: frame);
                    return (int)AClothing_FieldIndex.ClothingFlags;
                }
                case RecordTypeInts.MODL:
                {
                    item.MaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)AClothing_FieldIndex.MaleBipedModel;
                }
                case RecordTypeInts.MOD2:
                {
                    item.MaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: AClothing_Registration.MaleWorldModelConverter);
                    return (int)AClothing_FieldIndex.MaleWorldModel;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaleIcon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)AClothing_FieldIndex.MaleIcon;
                }
                case RecordTypeInts.MOD3:
                {
                    item.FemaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: AClothing_Registration.FemaleBipedModelConverter);
                    return (int)AClothing_FieldIndex.FemaleBipedModel;
                }
                case RecordTypeInts.MOD4:
                {
                    item.FemaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: AClothing_Registration.FemaleWorldModelConverter);
                    return (int)AClothing_FieldIndex.FemaleWorldModel;
                }
                case RecordTypeInts.ICO2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FemaleIcon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)AClothing_FieldIndex.FemaleIcon;
                }
                default:
                    return AItemBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AClothingBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AClothingBinaryOverlay :
        AItemBinaryOverlay,
        IAClothingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AClothing_Registration.Instance;
        public new static AClothing_Registration Registration => AClothing_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AClothingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AClothingSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => AClothingCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => AClothingCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AClothingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AClothingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Script
        private int? _ScriptLocation;
        public FormLinkNullable<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ScriptLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IScriptGetter>.Null;
        #endregion
        #region Enchantment
        private int? _EnchantmentLocation;
        public FormLinkNullable<IEnchantmentGetter> Enchantment => _EnchantmentLocation.HasValue ? new FormLinkNullable<IEnchantmentGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EnchantmentLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEnchantmentGetter>.Null;
        #endregion
        #region EnchantmentPoints
        private int? _EnchantmentPointsLocation;
        public UInt16? EnchantmentPoints => _EnchantmentPointsLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EnchantmentPointsLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region ClothingFlags
        private RangeInt32? _ClothingFlagsLocation;
        public IClothingFlagsGetter? ClothingFlags => _ClothingFlagsLocation.HasValue ? ClothingFlagsBinaryOverlay.ClothingFlagsFactory(new OverlayStream(_data.Slice(_ClothingFlagsLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IModelGetter? MaleBipedModel { get; private set; }
        public IModelGetter? MaleWorldModel { get; private set; }
        #region MaleIcon
        private int? _MaleIconLocation;
        public String? MaleIcon => _MaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MaleIconLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IModelGetter? FemaleBipedModel { get; private set; }
        public IModelGetter? FemaleWorldModel { get; private set; }
        #region FemaleIcon
        private int? _FemaleIconLocation;
        public String? FemaleIcon => _FemaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FemaleIconLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AClothingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)AClothing_FieldIndex.Name;
                }
                case RecordTypeInts.SCRI:
                {
                    _ScriptLocation = (stream.Position - offset);
                    return (int)AClothing_FieldIndex.Script;
                }
                case RecordTypeInts.ENAM:
                {
                    _EnchantmentLocation = (stream.Position - offset);
                    return (int)AClothing_FieldIndex.Enchantment;
                }
                case RecordTypeInts.ANAM:
                {
                    _EnchantmentPointsLocation = (stream.Position - offset);
                    return (int)AClothing_FieldIndex.EnchantmentPoints;
                }
                case RecordTypeInts.BMDT:
                {
                    _ClothingFlagsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)AClothing_FieldIndex.ClothingFlags;
                }
                case RecordTypeInts.MODL:
                {
                    this.MaleBipedModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)AClothing_FieldIndex.MaleBipedModel;
                }
                case RecordTypeInts.MOD2:
                {
                    this.MaleWorldModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: AClothing_Registration.MaleWorldModelConverter);
                    return (int)AClothing_FieldIndex.MaleWorldModel;
                }
                case RecordTypeInts.ICON:
                {
                    _MaleIconLocation = (stream.Position - offset);
                    return (int)AClothing_FieldIndex.MaleIcon;
                }
                case RecordTypeInts.MOD3:
                {
                    this.FemaleBipedModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: AClothing_Registration.FemaleBipedModelConverter);
                    return (int)AClothing_FieldIndex.FemaleBipedModel;
                }
                case RecordTypeInts.MOD4:
                {
                    this.FemaleWorldModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: AClothing_Registration.FemaleWorldModelConverter);
                    return (int)AClothing_FieldIndex.FemaleWorldModel;
                }
                case RecordTypeInts.ICO2:
                {
                    _FemaleIconLocation = (stream.Position - offset);
                    return (int)AClothing_FieldIndex.FemaleIcon;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AClothingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

