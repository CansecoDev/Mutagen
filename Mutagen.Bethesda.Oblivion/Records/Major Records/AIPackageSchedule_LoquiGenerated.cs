/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackageSchedule : 
        IAIPackageSchedule,
        ILoquiObject<AIPackageSchedule>,
        ILoquiObjectSetter,
        IPropertySupporter<Month>,
        IPropertySupporter<Weekday>,
        IPropertySupporter<Byte>,
        IPropertySupporter<Int32>,
        IEquatable<AIPackageSchedule>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageSchedule_Registration.Instance;
        public static AIPackageSchedule_Registration Registration => AIPackageSchedule_Registration.Instance;

        #region Ctor
        public AIPackageSchedule()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Month
        protected Month _Month;
        protected PropertyForwarder<AIPackageSchedule, Month> _MonthForwarder;
        public INotifyingSetItem<Month> Month_Property => _MonthForwarder ?? (_MonthForwarder = new PropertyForwarder<AIPackageSchedule, Month>(this, (int)AIPackageSchedule_FieldIndex.Month));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Month Month
        {
            get => this._Month;
            set => this.SetMonth(value);
        }
        protected void SetMonth(
            Month item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Month];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Month == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Month] = hasBeenSet;
            }
            if (_Month_subscriptions != null)
            {
                var tmp = Month;
                _Month = item;
                _Month_subscriptions.FireSubscriptions(
                    index: (int)AIPackageSchedule_FieldIndex.Month,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Month = item;
            }
        }
        protected void UnsetMonth()
        {
            _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Month] = false;
            Month = default(Month);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Month> IAIPackageSchedule.Month_Property => this.Month_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Month> IAIPackageScheduleGetter.Month_Property => this.Month_Property;
        #endregion
        #region DayOfWeek
        protected Weekday _DayOfWeek;
        protected PropertyForwarder<AIPackageSchedule, Weekday> _DayOfWeekForwarder;
        public INotifyingSetItem<Weekday> DayOfWeek_Property => _DayOfWeekForwarder ?? (_DayOfWeekForwarder = new PropertyForwarder<AIPackageSchedule, Weekday>(this, (int)AIPackageSchedule_FieldIndex.DayOfWeek));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Weekday DayOfWeek
        {
            get => this._DayOfWeek;
            set => this.SetDayOfWeek(value);
        }
        protected void SetDayOfWeek(
            Weekday item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.DayOfWeek];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && DayOfWeek == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.DayOfWeek] = hasBeenSet;
            }
            if (_Weekday_subscriptions != null)
            {
                var tmp = DayOfWeek;
                _DayOfWeek = item;
                _Weekday_subscriptions.FireSubscriptions(
                    index: (int)AIPackageSchedule_FieldIndex.DayOfWeek,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _DayOfWeek = item;
            }
        }
        protected void UnsetDayOfWeek()
        {
            _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.DayOfWeek] = false;
            DayOfWeek = default(Weekday);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Weekday> IAIPackageSchedule.DayOfWeek_Property => this.DayOfWeek_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Weekday> IAIPackageScheduleGetter.DayOfWeek_Property => this.DayOfWeek_Property;
        #endregion
        #region Day
        protected Byte _Day;
        protected PropertyForwarder<AIPackageSchedule, Byte> _DayForwarder;
        public INotifyingSetItem<Byte> Day_Property => _DayForwarder ?? (_DayForwarder = new PropertyForwarder<AIPackageSchedule, Byte>(this, (int)AIPackageSchedule_FieldIndex.Day));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Day
        {
            get => this._Day;
            set => this.SetDay(value);
        }
        protected void SetDay(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Day];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Day == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Day] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Day;
                _Day = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)AIPackageSchedule_FieldIndex.Day,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Day = item;
            }
        }
        protected void UnsetDay()
        {
            _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Day] = false;
            Day = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IAIPackageSchedule.Day_Property => this.Day_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IAIPackageScheduleGetter.Day_Property => this.Day_Property;
        #endregion
        #region Time
        protected Byte _Time;
        protected PropertyForwarder<AIPackageSchedule, Byte> _TimeForwarder;
        public INotifyingSetItem<Byte> Time_Property => _TimeForwarder ?? (_TimeForwarder = new PropertyForwarder<AIPackageSchedule, Byte>(this, (int)AIPackageSchedule_FieldIndex.Time));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Time
        {
            get => this._Time;
            set => this.SetTime(value);
        }
        protected void SetTime(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Time];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Time == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Time] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Time;
                _Time = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)AIPackageSchedule_FieldIndex.Time,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Time = item;
            }
        }
        protected void UnsetTime()
        {
            _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Time] = false;
            Time = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IAIPackageSchedule.Time_Property => this.Time_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IAIPackageScheduleGetter.Time_Property => this.Time_Property;
        #endregion
        #region Duration
        protected Int32 _Duration;
        protected PropertyForwarder<AIPackageSchedule, Int32> _DurationForwarder;
        public INotifyingSetItem<Int32> Duration_Property => _DurationForwarder ?? (_DurationForwarder = new PropertyForwarder<AIPackageSchedule, Int32>(this, (int)AIPackageSchedule_FieldIndex.Duration));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 Duration
        {
            get => this._Duration;
            set => this.SetDuration(value);
        }
        protected void SetDuration(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Duration];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Duration == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Duration] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = Duration;
                _Duration = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)AIPackageSchedule_FieldIndex.Duration,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Duration = item;
            }
        }
        protected void UnsetDuration()
        {
            _hasBeenSetTracker[(int)AIPackageSchedule_FieldIndex.Duration] = false;
            Duration = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> IAIPackageSchedule.Duration_Property => this.Duration_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> IAIPackageScheduleGetter.Duration_Property => this.Duration_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => AIPackageScheduleCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => AIPackageScheduleCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AIPackageScheduleCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AIPackageScheduleCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<AIPackageSchedule>.GetEqualsMask(AIPackageSchedule rhs) => AIPackageScheduleCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAIPackageScheduleGetter>.GetEqualsMask(IAIPackageScheduleGetter rhs) => AIPackageScheduleCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return AIPackageScheduleCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            AIPackageSchedule_Mask<bool> printMask = null)
        {
            return AIPackageScheduleCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            AIPackageScheduleCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public AIPackageSchedule_Mask<bool> GetHasBeenSetMask()
        {
            return AIPackageScheduleCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackageSchedule rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackageSchedule rhs)
        {
            if (rhs == null) return false;
            if (this.Month != rhs.Month) return false;
            if (this.DayOfWeek != rhs.DayOfWeek) return false;
            if (this.Day != rhs.Day) return false;
            if (this.Time != rhs.Time) return false;
            if (this.Duration != rhs.Duration) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Month).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DayOfWeek).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Day).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Time).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Duration).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static AIPackageSchedule Create_Xml(
            XElement root,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AIPackageSchedule Create_Xml(
            XElement root,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackageSchedule Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new AIPackageSchedule();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AIPackageSchedule Create_Xml(
            string path,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static AIPackageSchedule Create_Xml(
            string path,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackageSchedule Create_Xml(
            Stream stream,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static AIPackageSchedule Create_Xml(
            Stream stream,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<AIPackageSchedule>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageSchedule_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            AIPackageScheduleCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            AIPackageSchedule item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Month":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Month);
                        if (EnumXmlTranslation<Month>.Instance.Parse(
                            root: root,
                            item: out Month MonthParse,
                            errorMask: errorMask))
                        {
                            item.Month = MonthParse;
                        }
                        else
                        {
                            item.UnsetMonth();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DayOfWeek":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.DayOfWeek);
                        if (EnumXmlTranslation<Weekday>.Instance.Parse(
                            root: root,
                            item: out Weekday DayOfWeekParse,
                            errorMask: errorMask))
                        {
                            item.DayOfWeek = DayOfWeekParse;
                        }
                        else
                        {
                            item.UnsetDayOfWeek();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Day":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Day);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte DayParse,
                            errorMask: errorMask))
                        {
                            item.Day = DayParse;
                        }
                        else
                        {
                            item.UnsetDay();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Time":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Time);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte TimeParse,
                            errorMask: errorMask))
                        {
                            item.Time = TimeParse;
                        }
                        else
                        {
                            item.UnsetTime();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Duration":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Duration);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 DurationParse,
                            errorMask: errorMask))
                        {
                            item.Duration = DurationParse;
                        }
                        else
                        {
                            item.UnsetDuration();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter Month
        protected ObjectCentralizationSubscriptions<Month> _Month_subscriptions;
        Month IPropertySupporter<Month>.Get(int index)
        {
            return GetMonth(index: index);
        }

        protected Month GetMonth(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return Month;
                default:
                    throw new ArgumentException($"Unknown index for field type Month: {index}");
            }
        }

        void IPropertySupporter<Month>.Set(
            int index,
            Month item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetMonth(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetMonth(
            int index,
            Month item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    SetMonth(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Month: {index}");
            }
        }

        bool IPropertySupporter<Month>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Month>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Month>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetMonth(
                index: index,
                cmds: cmds);
        }

        protected void UnsetMonth(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    SetMonth(
                        item: default(Month),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Month: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Month>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Month> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Month_subscriptions == null)
            {
                _Month_subscriptions = new ObjectCentralizationSubscriptions<Month>();
            }
            _Month_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Month>.Unsubscribe(
            int index,
            object owner)
        {
            _Month_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Month>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Month IPropertySupporter<Month>.DefaultValue(int index)
        {
            return DefaultValueMonth(index: index);
        }

        protected Month DefaultValueMonth(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return default(Month);
                default:
                    throw new ArgumentException($"Unknown index for field type Month: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Weekday
        protected ObjectCentralizationSubscriptions<Weekday> _Weekday_subscriptions;
        Weekday IPropertySupporter<Weekday>.Get(int index)
        {
            return GetWeekday(index: index);
        }

        protected Weekday GetWeekday(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return DayOfWeek;
                default:
                    throw new ArgumentException($"Unknown index for field type Weekday: {index}");
            }
        }

        void IPropertySupporter<Weekday>.Set(
            int index,
            Weekday item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetWeekday(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetWeekday(
            int index,
            Weekday item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    SetDayOfWeek(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Weekday: {index}");
            }
        }

        bool IPropertySupporter<Weekday>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Weekday>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Weekday>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetWeekday(
                index: index,
                cmds: cmds);
        }

        protected void UnsetWeekday(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    SetDayOfWeek(
                        item: default(Weekday),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Weekday: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Weekday>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Weekday> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Weekday_subscriptions == null)
            {
                _Weekday_subscriptions = new ObjectCentralizationSubscriptions<Weekday>();
            }
            _Weekday_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Weekday>.Unsubscribe(
            int index,
            object owner)
        {
            _Weekday_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Weekday>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Weekday IPropertySupporter<Weekday>.DefaultValue(int index)
        {
            return DefaultValueWeekday(index: index);
        }

        protected Weekday DefaultValueWeekday(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return default(Weekday);
                default:
                    throw new ArgumentException($"Unknown index for field type Weekday: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Day:
                    return Day;
                case AIPackageSchedule_FieldIndex.Time:
                    return Time;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Day:
                    SetDay(item, hasBeenSet, cmds);
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    SetTime(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Day:
                    SetDay(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    SetTime(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Int32
        protected ObjectCentralizationSubscriptions<Int32> _Int32_subscriptions;
        Int32 IPropertySupporter<Int32>.Get(int index)
        {
            return GetInt32(index: index);
        }

        protected Int32 GetInt32(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Duration:
                    return Duration;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        void IPropertySupporter<Int32>.Set(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetInt32(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Duration:
                    SetDuration(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        bool IPropertySupporter<Int32>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Int32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Int32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Duration:
                    SetDuration(
                        item: default(Int32),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Int32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Int32_subscriptions == null)
            {
                _Int32_subscriptions = new ObjectCentralizationSubscriptions<Int32>();
            }
            _Int32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Unsubscribe(
            int index,
            object owner)
        {
            _Int32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Int32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Int32 IPropertySupporter<Int32>.DefaultValue(int index)
        {
            return DefaultValueInt32(index: index);
        }

        protected Int32 DefaultValueInt32(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Duration:
                    return default(Int32);
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AIPackageSchedule_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static AIPackageSchedule Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AIPackageSchedule Create_Binary(
            MutagenFrame frame,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackageSchedule Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new AIPackageSchedule();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(AIPackageSchedule_Registration.PSDT_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AIPackageSchedule Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AIPackageSchedule Create_Binary(
            string path,
            out AIPackageSchedule_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static AIPackageSchedule Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AIPackageSchedule Create_Binary(
            Stream stream,
            out AIPackageSchedule_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            AIPackageScheduleCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            AIPackageSchedule item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Month);
                if (EnumBinaryTranslation<Month>.Instance.Parse(
                    frame: frame.SpawnWithLength(1),
                    item: out Month MonthParse,
                    errorMask: errorMask))
                {
                    item.Month = MonthParse;
                }
                else
                {
                    item.UnsetMonth();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.DayOfWeek);
                if (EnumBinaryTranslation<Weekday>.Instance.Parse(
                    frame: frame.SpawnWithLength(1),
                    item: out Weekday DayOfWeekParse,
                    errorMask: errorMask))
                {
                    item.DayOfWeek = DayOfWeekParse;
                }
                else
                {
                    item.UnsetDayOfWeek();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Day);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte DayParse,
                    errorMask: errorMask))
                {
                    item.Day = DayParse;
                }
                else
                {
                    item.UnsetDay();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Time);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte TimeParse,
                    errorMask: errorMask))
                {
                    item.Time = TimeParse;
                }
                else
                {
                    item.UnsetTime();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Duration);
                if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Int32 DurationParse,
                    errorMask: errorMask))
                {
                    item.Duration = DurationParse;
                }
                else
                {
                    item.UnsetDuration();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public AIPackageSchedule Copy(
            AIPackageSchedule_CopyMask copyMask = null,
            IAIPackageScheduleGetter def = null)
        {
            return AIPackageSchedule.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AIPackageSchedule Copy(
            IAIPackageSchedule item,
            AIPackageSchedule_CopyMask copyMask = null,
            IAIPackageScheduleGetter def = null)
        {
            AIPackageSchedule ret;
            if (item.GetType().Equals(typeof(AIPackageSchedule)))
            {
                ret = new AIPackageSchedule();
            }
            else
            {
                ret = (AIPackageSchedule)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AIPackageSchedule Copy_ToLoqui(
            IAIPackageScheduleGetter item,
            AIPackageSchedule_CopyMask copyMask = null,
            IAIPackageScheduleGetter def = null)
        {
            AIPackageSchedule ret;
            if (item.GetType().Equals(typeof(AIPackageSchedule)))
            {
                ret = new AIPackageSchedule() as AIPackageSchedule;
            }
            else
            {
                ret = (AIPackageSchedule)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAIPackageScheduleGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAIPackageScheduleGetter rhs,
            AIPackageSchedule_CopyMask copyMask,
            IAIPackageScheduleGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAIPackageScheduleGetter rhs,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_CopyMask copyMask = null,
            IAIPackageScheduleGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIPackageScheduleCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IAIPackageScheduleGetter rhs,
            ErrorMaskBuilder errorMask,
            AIPackageSchedule_CopyMask copyMask = null,
            IAIPackageScheduleGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AIPackageScheduleCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    this.SetMonth(
                        (Month)obj,
                        cmds: cmds);
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    this.SetDayOfWeek(
                        (Weekday)obj,
                        cmds: cmds);
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    this.SetDay(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    this.SetTime(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    this.SetDuration(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AIPackageScheduleCommon.Clear(this, cmds);
        }


        public static AIPackageSchedule Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AIPackageSchedule();
            foreach (var pair in fields)
            {
                CopyInInternal_AIPackageSchedule(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_AIPackageSchedule(AIPackageSchedule obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AIPackageSchedule_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    obj.SetMonth(
                        (Month)pair.Value,
                        cmds: null);
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    obj.SetDayOfWeek(
                        (Weekday)pair.Value,
                        cmds: null);
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    obj.SetDay(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    obj.SetTime(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    obj.SetDuration(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, AIPackageSchedule obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAIPackageSchedule : IAIPackageScheduleGetter, ILoquiClass<IAIPackageSchedule, IAIPackageScheduleGetter>, ILoquiClass<AIPackageSchedule, IAIPackageScheduleGetter>
    {
        new Month Month { get; set; }
        new INotifyingItem<Month> Month_Property { get; }

        new Weekday DayOfWeek { get; set; }
        new INotifyingItem<Weekday> DayOfWeek_Property { get; }

        new Byte Day { get; set; }
        new INotifyingItem<Byte> Day_Property { get; }

        new Byte Time { get; set; }
        new INotifyingItem<Byte> Time_Property { get; }

        new Int32 Duration { get; set; }
        new INotifyingItem<Int32> Duration_Property { get; }

    }

    public partial interface IAIPackageScheduleGetter : ILoquiObject
    {
        #region Month
        Month Month { get; }
        INotifyingItemGetter<Month> Month_Property { get; }

        #endregion
        #region DayOfWeek
        Weekday DayOfWeek { get; }
        INotifyingItemGetter<Weekday> DayOfWeek_Property { get; }

        #endregion
        #region Day
        Byte Day { get; }
        INotifyingItemGetter<Byte> Day_Property { get; }

        #endregion
        #region Time
        Byte Time { get; }
        INotifyingItemGetter<Byte> Time_Property { get; }

        #endregion
        #region Duration
        Int32 Duration { get; }
        INotifyingItemGetter<Int32> Duration_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackageSchedule_FieldIndex
    {
        Month = 0,
        DayOfWeek = 1,
        Day = 2,
        Time = 3,
        Duration = 4,
    }
    #endregion

    #region Registration
    public class AIPackageSchedule_Registration : ILoquiRegistration
    {
        public static readonly AIPackageSchedule_Registration Instance = new AIPackageSchedule_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 158,
            version: 0);

        public const string GUID = "152fbe7f-93c5-46fd-992e-79638d01367a";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(AIPackageSchedule_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackageSchedule_ErrorMask);

        public static readonly Type ClassType = typeof(AIPackageSchedule);

        public static readonly Type GetterType = typeof(IAIPackageScheduleGetter);

        public static readonly Type SetterType = typeof(IAIPackageSchedule);

        public static readonly Type CommonType = typeof(AIPackageScheduleCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackageSchedule";

        public const string Name = "AIPackageSchedule";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MONTH":
                    return (ushort)AIPackageSchedule_FieldIndex.Month;
                case "DAYOFWEEK":
                    return (ushort)AIPackageSchedule_FieldIndex.DayOfWeek;
                case "DAY":
                    return (ushort)AIPackageSchedule_FieldIndex.Day;
                case "TIME":
                    return (ushort)AIPackageSchedule_FieldIndex.Time;
                case "DURATION":
                    return (ushort)AIPackageSchedule_FieldIndex.Duration;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return "Month";
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return "DayOfWeek";
                case AIPackageSchedule_FieldIndex.Day:
                    return "Day";
                case AIPackageSchedule_FieldIndex.Time:
                    return "Time";
                case AIPackageSchedule_FieldIndex.Duration:
                    return "Duration";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return typeof(Month);
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return typeof(Weekday);
                case AIPackageSchedule_FieldIndex.Day:
                    return typeof(Byte);
                case AIPackageSchedule_FieldIndex.Time:
                    return typeof(Byte);
                case AIPackageSchedule_FieldIndex.Duration:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType PSDT_HEADER = new RecordType("PSDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PSDT_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AIPackageScheduleCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAIPackageSchedule item,
            IAIPackageScheduleGetter rhs,
            IAIPackageScheduleGetter def,
            ErrorMaskBuilder errorMask,
            AIPackageSchedule_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Month ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Month);
                try
                {
                    item.Month_Property.Set(
                        value: rhs.Month,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DayOfWeek ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.DayOfWeek);
                try
                {
                    item.DayOfWeek_Property.Set(
                        value: rhs.DayOfWeek,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Day ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Day);
                try
                {
                    item.Day_Property.Set(
                        value: rhs.Day,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Time ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Time);
                try
                {
                    item.Time_Property.Set(
                        value: rhs.Time,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Duration ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Duration);
                try
                {
                    item.Duration_Property.Set(
                        value: rhs.Duration,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAIPackageSchedule obj,
            NotifyingFireParameters cmds = null)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAIPackageSchedule obj,
            NotifyingUnsetParameters cmds = null)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    obj.Month = default(Month);
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    obj.DayOfWeek = default(Weekday);
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    obj.Day = default(Byte);
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    obj.Time = default(Byte);
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    obj.Duration = default(Int32);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAIPackageSchedule obj)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IAIPackageScheduleGetter obj)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return obj.Month;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return obj.DayOfWeek;
                case AIPackageSchedule_FieldIndex.Day:
                    return obj.Day;
                case AIPackageSchedule_FieldIndex.Time:
                    return obj.Time;
                case AIPackageSchedule_FieldIndex.Duration:
                    return obj.Duration;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IAIPackageSchedule item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Month = default(Month);
            item.DayOfWeek = default(Weekday);
            item.Day = default(Byte);
            item.Time = default(Byte);
            item.Duration = default(Int32);
        }

        public static AIPackageSchedule_Mask<bool> GetEqualsMask(
            this IAIPackageScheduleGetter item,
            IAIPackageScheduleGetter rhs)
        {
            var ret = new AIPackageSchedule_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAIPackageScheduleGetter item,
            IAIPackageScheduleGetter rhs,
            AIPackageSchedule_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Month = item.Month == rhs.Month;
            ret.DayOfWeek = item.DayOfWeek == rhs.DayOfWeek;
            ret.Day = item.Day == rhs.Day;
            ret.Time = item.Time == rhs.Time;
            ret.Duration = item.Duration == rhs.Duration;
        }

        public static string ToString(
            this IAIPackageScheduleGetter item,
            string name = null,
            AIPackageSchedule_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAIPackageScheduleGetter item,
            FileGeneration fg,
            string name = null,
            AIPackageSchedule_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(AIPackageSchedule)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(AIPackageSchedule)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Month ?? true)
                {
                    fg.AppendLine($"Month => {item.Month}");
                }
                if (printMask?.DayOfWeek ?? true)
                {
                    fg.AppendLine($"DayOfWeek => {item.DayOfWeek}");
                }
                if (printMask?.Day ?? true)
                {
                    fg.AppendLine($"Day => {item.Day}");
                }
                if (printMask?.Time ?? true)
                {
                    fg.AppendLine($"Time => {item.Time}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {item.Duration}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAIPackageScheduleGetter item,
            AIPackageSchedule_Mask<bool?> checkMask)
        {
            return true;
        }

        public static AIPackageSchedule_Mask<bool> GetHasBeenSetMask(IAIPackageScheduleGetter item)
        {
            var ret = new AIPackageSchedule_Mask<bool>();
            ret.Month = true;
            ret.DayOfWeek = true;
            ret.Day = true;
            ret.Time = true;
            ret.Duration = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            AIPackageSchedule item,
            bool doMasks,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            AIPackageSchedule item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AIPackageSchedule");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AIPackageSchedule");
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Month) ?? true))
            {
                EnumXmlTranslation<Month>.Instance.Write(
                    node: elem,
                    name: nameof(item.Month),
                    item: item.Month_Property,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.Month,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.DayOfWeek) ?? true))
            {
                EnumXmlTranslation<Weekday>.Instance.Write(
                    node: elem,
                    name: nameof(item.DayOfWeek),
                    item: item.DayOfWeek_Property,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.DayOfWeek,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Day) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Day),
                    item: item.Day_Property,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.Day,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Time) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Time),
                    item: item.Time_Property,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.Time,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Duration) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Duration),
                    item: item.Duration_Property,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.Duration,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            AIPackageSchedule item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out AIPackageSchedule_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            AIPackageSchedule item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AIPackageSchedule_Registration.PSDT_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            AIPackageSchedule item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Month>.Instance.Write(
                writer,
                item.Month_Property,
                length: 1,
                fieldIndex: (int)AIPackageSchedule_FieldIndex.Month,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weekday>.Instance.Write(
                writer,
                item.DayOfWeek_Property,
                length: 1,
                fieldIndex: (int)AIPackageSchedule_FieldIndex.DayOfWeek,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Day_Property,
                fieldIndex: (int)AIPackageSchedule_FieldIndex.Day,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Time_Property,
                fieldIndex: (int)AIPackageSchedule_FieldIndex.Time,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Duration_Property,
                fieldIndex: (int)AIPackageSchedule_FieldIndex.Duration,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class AIPackageSchedule_Mask<T> : IMask<T>, IEquatable<AIPackageSchedule_Mask<T>>
    {
        #region Ctors
        public AIPackageSchedule_Mask()
        {
        }

        public AIPackageSchedule_Mask(T initialValue)
        {
            this.Month = initialValue;
            this.DayOfWeek = initialValue;
            this.Day = initialValue;
            this.Time = initialValue;
            this.Duration = initialValue;
        }
        #endregion

        #region Members
        public T Month;
        public T DayOfWeek;
        public T Day;
        public T Time;
        public T Duration;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackageSchedule_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackageSchedule_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Month, rhs.Month)) return false;
            if (!object.Equals(this.DayOfWeek, rhs.DayOfWeek)) return false;
            if (!object.Equals(this.Day, rhs.Day)) return false;
            if (!object.Equals(this.Time, rhs.Time)) return false;
            if (!object.Equals(this.Duration, rhs.Duration)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Month?.GetHashCode());
            ret = ret.CombineHashCode(this.DayOfWeek?.GetHashCode());
            ret = ret.CombineHashCode(this.Day?.GetHashCode());
            ret = ret.CombineHashCode(this.Time?.GetHashCode());
            ret = ret.CombineHashCode(this.Duration?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Month)) return false;
            if (!eval(this.DayOfWeek)) return false;
            if (!eval(this.Day)) return false;
            if (!eval(this.Time)) return false;
            if (!eval(this.Duration)) return false;
            return true;
        }
        #endregion

        #region Translate
        public AIPackageSchedule_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AIPackageSchedule_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AIPackageSchedule_Mask<R> obj, Func<T, R> eval)
        {
            obj.Month = eval(this.Month);
            obj.DayOfWeek = eval(this.DayOfWeek);
            obj.Day = eval(this.Day);
            obj.Time = eval(this.Time);
            obj.Duration = eval(this.Duration);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AIPackageSchedule_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AIPackageSchedule_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AIPackageSchedule_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Month ?? true)
                {
                    fg.AppendLine($"Month => {Month}");
                }
                if (printMask?.DayOfWeek ?? true)
                {
                    fg.AppendLine($"DayOfWeek => {DayOfWeek}");
                }
                if (printMask?.Day ?? true)
                {
                    fg.AppendLine($"Day => {Day}");
                }
                if (printMask?.Time ?? true)
                {
                    fg.AppendLine($"Time => {Time}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {Duration}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AIPackageSchedule_ErrorMask : IErrorMask, IErrorMask<AIPackageSchedule_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Month;
        public Exception DayOfWeek;
        public Exception Day;
        public Exception Time;
        public Exception Duration;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return Month;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return DayOfWeek;
                case AIPackageSchedule_FieldIndex.Day:
                    return Day;
                case AIPackageSchedule_FieldIndex.Time:
                    return Time;
                case AIPackageSchedule_FieldIndex.Duration:
                    return Duration;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    this.Month = ex;
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    this.DayOfWeek = ex;
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    this.Day = ex;
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    this.Time = ex;
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    this.Duration = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    this.Month = (Exception)obj;
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    this.DayOfWeek = (Exception)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    this.Day = (Exception)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    this.Time = (Exception)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    this.Duration = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Month != null) return true;
            if (DayOfWeek != null) return true;
            if (Day != null) return true;
            if (Time != null) return true;
            if (Duration != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("AIPackageSchedule_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Month => {Month}");
            fg.AppendLine($"DayOfWeek => {DayOfWeek}");
            fg.AppendLine($"Day => {Day}");
            fg.AppendLine($"Time => {Time}");
            fg.AppendLine($"Duration => {Duration}");
        }
        #endregion

        #region Combine
        public AIPackageSchedule_ErrorMask Combine(AIPackageSchedule_ErrorMask rhs)
        {
            var ret = new AIPackageSchedule_ErrorMask();
            ret.Month = this.Month.Combine(rhs.Month);
            ret.DayOfWeek = this.DayOfWeek.Combine(rhs.DayOfWeek);
            ret.Day = this.Day.Combine(rhs.Day);
            ret.Time = this.Time.Combine(rhs.Time);
            ret.Duration = this.Duration.Combine(rhs.Duration);
            return ret;
        }
        public static AIPackageSchedule_ErrorMask Combine(AIPackageSchedule_ErrorMask lhs, AIPackageSchedule_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AIPackageSchedule_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AIPackageSchedule_ErrorMask();
        }
        #endregion

    }
    public class AIPackageSchedule_CopyMask
    {
        #region Members
        public bool Month;
        public bool DayOfWeek;
        public bool Day;
        public bool Time;
        public bool Duration;
        #endregion

    }
    public class AIPackageSchedule_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Month;
        public bool DayOfWeek;
        public bool Day;
        public bool Time;
        public bool Duration;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Month, null));
            ret.Add((DayOfWeek, null));
            ret.Add((Day, null));
            ret.Add((Time, null));
            ret.Add((Duration, null));
        }
    }
    #endregion





    #endregion

}
