/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackageSchedule :
        LoquiNotifyingObject,
        IAIPackageScheduleInternal,
        ILoquiObjectSetter<AIPackageSchedule>,
        IEquatable<AIPackageSchedule>,
        IEqualsMask
    {
        #region Ctor
        public AIPackageSchedule()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Month
        private Month _Month;
        public Month Month
        {
            get => this._Month;
            set => this.RaiseAndSetIfChanged(ref this._Month, value, nameof(Month));
        }
        #endregion
        #region DayOfWeek
        private Weekday _DayOfWeek;
        public Weekday DayOfWeek
        {
            get => this._DayOfWeek;
            set => this.RaiseAndSetIfChanged(ref this._DayOfWeek, value, nameof(DayOfWeek));
        }
        #endregion
        #region Day
        private Byte _Day;
        public Byte Day
        {
            get => this._Day;
            set => this.RaiseAndSetIfChanged(ref this._Day, value, nameof(Day));
        }
        #endregion
        #region Time
        private Byte _Time;
        public Byte Time
        {
            get => this._Time;
            set => this.RaiseAndSetIfChanged(ref this._Time, value, nameof(Time));
        }
        #endregion
        #region Duration
        private Int32 _Duration;
        public Int32 Duration
        {
            get => this._Duration;
            set => this.RaiseAndSetIfChanged(ref this._Duration, value, nameof(Duration));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIPackageScheduleInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            AIPackageScheduleMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IAIPackageScheduleInternalGetter rhs)) return false;
            return ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(AIPackageSchedule obj)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => AIPackageScheduleXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AIPackageScheduleXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static AIPackageSchedule CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AIPackageSchedule CreateFromXml(
            XElement node,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageSchedule_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackageSchedule CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new AIPackageSchedule() : null;
                    break;
                default:
                    break;
            }
            var ret = new AIPackageSchedule();
            try
            {
                foreach (var elem in node.Elements())
                {
                    AIPackageScheduleXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AIPackageSchedule CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AIPackageSchedule CreateFromXml(
            string path,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackageSchedule CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AIPackageSchedule CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AIPackageSchedule CreateFromXml(
            Stream stream,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackageSchedule CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((AIPackageSchedule_FieldIndex)index)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AIPackageSchedule_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => AIPackageScheduleBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageScheduleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static AIPackageSchedule CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AIPackageSchedule CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackageSchedule CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new AIPackageSchedule();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(AIPackageSchedule_Registration.PSDT_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            AIPackageSchedule item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (EnumBinaryTranslation<Month>.Instance.Parse(
                frame: frame.SpawnWithLength(1),
                item: out Month MonthParse))
            {
                item.Month = MonthParse;
            }
            else
            {
                item.Month = default(Month);
            }
            if (EnumBinaryTranslation<Weekday>.Instance.Parse(
                frame: frame.SpawnWithLength(1),
                item: out Weekday DayOfWeekParse))
            {
                item.DayOfWeek = DayOfWeekParse;
            }
            else
            {
                item.DayOfWeek = default(Weekday);
            }
            item.Day = frame.ReadUInt8();
            item.Time = frame.ReadUInt8();
            item.Duration = frame.ReadInt32();
        }

        #endregion

        public AIPackageSchedule Copy(
            AIPackageSchedule_CopyMask copyMask = null,
            AIPackageSchedule def = null)
        {
            return AIPackageSchedule.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AIPackageSchedule Copy(
            AIPackageSchedule item,
            AIPackageSchedule_CopyMask copyMask = null,
            AIPackageSchedule def = null)
        {
            AIPackageSchedule ret;
            if (item.GetType().Equals(typeof(AIPackageSchedule)))
            {
                ret = new AIPackageSchedule();
            }
            else
            {
                ret = (AIPackageSchedule)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AIPackageSchedule Copy_ToLoqui(
            AIPackageSchedule item,
            AIPackageSchedule_CopyMask copyMask = null,
            AIPackageSchedule def = null)
        {
            AIPackageSchedule ret;
            if (item.GetType().Equals(typeof(AIPackageSchedule)))
            {
                ret = new AIPackageSchedule() as AIPackageSchedule;
            }
            else
            {
                ret = (AIPackageSchedule)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(AIPackageSchedule rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            AIPackageSchedule rhs,
            AIPackageSchedule_CopyMask copyMask,
            AIPackageSchedule def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            AIPackageSchedule rhs,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_CopyMask copyMask = null,
            AIPackageSchedule def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIPackageScheduleSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            AIPackageSchedule rhs,
            ErrorMaskBuilder errorMask,
            AIPackageSchedule_CopyMask copyMask = null,
            AIPackageSchedule def = null)
        {
            AIPackageScheduleSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    this.Month = (Month)obj;
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    this.DayOfWeek = (Weekday)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    this.Day = (Byte)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    this.Time = (Byte)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    this.Duration = (Int32)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            AIPackageScheduleSetterCommon.Instance.Clear(this);
        }

        public static AIPackageSchedule Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AIPackageSchedule();
            foreach (var pair in fields)
            {
                CopyInInternal_AIPackageSchedule(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_AIPackageSchedule(AIPackageSchedule obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AIPackageSchedule_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    obj.Month = (Month)pair.Value;
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    obj.DayOfWeek = (Weekday)pair.Value;
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    obj.Day = (Byte)pair.Value;
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    obj.Time = (Byte)pair.Value;
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    obj.Duration = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IAIPackageSchedule :
        IAIPackageScheduleInternalGetter,
        ILoquiObjectSetter<IAIPackageScheduleInternal>
    {
        new Month Month { get; set; }

        new Weekday DayOfWeek { get; set; }

        new Byte Day { get; set; }

        new Byte Time { get; set; }

        new Int32 Duration { get; set; }

        void CopyFieldsFrom(
            AIPackageSchedule rhs,
            ErrorMaskBuilder errorMask = null,
            AIPackageSchedule_CopyMask copyMask = null,
            AIPackageSchedule def = null);
    }

    public partial interface IAIPackageScheduleInternal :
        IAIPackageSchedule,
        IAIPackageScheduleInternalGetter
    {
    }

    public partial interface IAIPackageScheduleGetter :
        ILoquiObject,
        ILoquiObject<IAIPackageScheduleInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Month
        Month Month { get; }

        #endregion
        #region DayOfWeek
        Weekday DayOfWeek { get; }

        #endregion
        #region Day
        Byte Day { get; }

        #endregion
        #region Time
        Byte Time { get; }

        #endregion
        #region Duration
        Int32 Duration { get; }

        #endregion

    }

    public partial interface IAIPackageScheduleInternalGetter : IAIPackageScheduleGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class AIPackageScheduleMixIn
    {
        public static void Clear(this IAIPackageScheduleInternal item)
        {
            ((AIPackageScheduleSetterCommon)((IAIPackageScheduleInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static AIPackageSchedule_Mask<bool> GetEqualsMask(
            this IAIPackageScheduleInternalGetter item,
            IAIPackageScheduleInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAIPackageScheduleInternalGetter item,
            string name = null,
            AIPackageSchedule_Mask<bool> printMask = null)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAIPackageScheduleInternalGetter item,
            FileGeneration fg,
            string name = null,
            AIPackageSchedule_Mask<bool> printMask = null)
        {
            ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAIPackageScheduleInternalGetter item,
            AIPackageSchedule_Mask<bool?> checkMask)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AIPackageSchedule_Mask<bool> GetHasBeenSetMask(this IAIPackageScheduleInternalGetter item)
        {
            var ret = new AIPackageSchedule_Mask<bool>();
            ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAIPackageScheduleInternalGetter item,
            IAIPackageScheduleInternalGetter rhs)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackageSchedule_FieldIndex
    {
        Month = 0,
        DayOfWeek = 1,
        Day = 2,
        Time = 3,
        Duration = 4,
    }
    #endregion

    #region Registration
    public class AIPackageSchedule_Registration : ILoquiRegistration
    {
        public static readonly AIPackageSchedule_Registration Instance = new AIPackageSchedule_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 158,
            version: 0);

        public const string GUID = "152fbe7f-93c5-46fd-992e-79638d01367a";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(AIPackageSchedule_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackageSchedule_ErrorMask);

        public static readonly Type ClassType = typeof(AIPackageSchedule);

        public static readonly Type GetterType = typeof(IAIPackageScheduleGetter);

        public static readonly Type InternalGetterType = typeof(IAIPackageScheduleInternalGetter);

        public static readonly Type SetterType = typeof(IAIPackageSchedule);

        public static readonly Type InternalSetterType = typeof(IAIPackageScheduleInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackageSchedule";

        public const string Name = "AIPackageSchedule";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MONTH":
                    return (ushort)AIPackageSchedule_FieldIndex.Month;
                case "DAYOFWEEK":
                    return (ushort)AIPackageSchedule_FieldIndex.DayOfWeek;
                case "DAY":
                    return (ushort)AIPackageSchedule_FieldIndex.Day;
                case "TIME":
                    return (ushort)AIPackageSchedule_FieldIndex.Time;
                case "DURATION":
                    return (ushort)AIPackageSchedule_FieldIndex.Duration;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return "Month";
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return "DayOfWeek";
                case AIPackageSchedule_FieldIndex.Day:
                    return "Day";
                case AIPackageSchedule_FieldIndex.Time:
                    return "Time";
                case AIPackageSchedule_FieldIndex.Duration:
                    return "Duration";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                case AIPackageSchedule_FieldIndex.Day:
                case AIPackageSchedule_FieldIndex.Time:
                case AIPackageSchedule_FieldIndex.Duration:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return typeof(Month);
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return typeof(Weekday);
                case AIPackageSchedule_FieldIndex.Day:
                    return typeof(Byte);
                case AIPackageSchedule_FieldIndex.Time:
                    return typeof(Byte);
                case AIPackageSchedule_FieldIndex.Duration:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AIPackageScheduleXmlWriteTranslation);
        public static readonly RecordType PSDT_HEADER = new RecordType("PSDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PSDT_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(AIPackageScheduleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AIPackageScheduleSetterCommon
    {
        public static readonly AIPackageScheduleSetterCommon Instance = new AIPackageScheduleSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAIPackageScheduleInternal item)
        {
            ClearPartial();
            item.Month = default(Month);
            item.DayOfWeek = default(Weekday);
            item.Day = default(Byte);
            item.Time = default(Byte);
            item.Duration = default(Int32);
        }
        
        
    }
    public partial class AIPackageScheduleCommon
    {
        public static readonly AIPackageScheduleCommon Instance = new AIPackageScheduleCommon();

        public AIPackageSchedule_Mask<bool> GetEqualsMask(
            IAIPackageScheduleInternalGetter item,
            IAIPackageScheduleInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIPackageSchedule_Mask<bool>();
            ((AIPackageScheduleCommon)((IAIPackageScheduleInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIPackageScheduleInternalGetter item,
            IAIPackageScheduleInternalGetter rhs,
            AIPackageSchedule_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Month = item.Month == rhs.Month;
            ret.DayOfWeek = item.DayOfWeek == rhs.DayOfWeek;
            ret.Day = item.Day == rhs.Day;
            ret.Time = item.Time == rhs.Time;
            ret.Duration = item.Duration == rhs.Duration;
        }
        
        public string ToString(
            IAIPackageScheduleInternalGetter item,
            string name = null,
            AIPackageSchedule_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAIPackageScheduleInternalGetter item,
            FileGeneration fg,
            string name = null,
            AIPackageSchedule_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AIPackageSchedule =>");
            }
            else
            {
                fg.AppendLine($"{name} (AIPackageSchedule) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAIPackageScheduleInternalGetter item,
            FileGeneration fg,
            AIPackageSchedule_Mask<bool> printMask = null)
        {
            if (printMask?.Month ?? true)
            {
                fg.AppendLine($"Month => {item.Month}");
            }
            if (printMask?.DayOfWeek ?? true)
            {
                fg.AppendLine($"DayOfWeek => {item.DayOfWeek}");
            }
            if (printMask?.Day ?? true)
            {
                fg.AppendLine($"Day => {item.Day}");
            }
            if (printMask?.Time ?? true)
            {
                fg.AppendLine($"Time => {item.Time}");
            }
            if (printMask?.Duration ?? true)
            {
                fg.AppendLine($"Duration => {item.Duration}");
            }
        }
        
        public bool HasBeenSet(
            IAIPackageScheduleInternalGetter item,
            AIPackageSchedule_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IAIPackageScheduleInternalGetter item,
            AIPackageSchedule_Mask<bool> mask)
        {
            mask.Month = true;
            mask.DayOfWeek = true;
            mask.Day = true;
            mask.Time = true;
            mask.Duration = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIPackageScheduleInternalGetter lhs,
            IAIPackageScheduleInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Month != rhs.Month) return false;
            if (lhs.DayOfWeek != rhs.DayOfWeek) return false;
            if (lhs.Day != rhs.Day) return false;
            if (lhs.Time != rhs.Time) return false;
            if (lhs.Duration != rhs.Duration) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAIPackageScheduleInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Month).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DayOfWeek).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Day).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Time).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Duration).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        
    }
    public partial class AIPackageScheduleSetterCopyCommon
    {
        public static readonly AIPackageScheduleSetterCopyCommon Instance = new AIPackageScheduleSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            AIPackageSchedule item,
            AIPackageSchedule rhs,
            AIPackageSchedule def,
            ErrorMaskBuilder errorMask,
            AIPackageSchedule_CopyMask copyMask)
        {
            if (copyMask?.Month ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Month);
                try
                {
                    item.Month = rhs.Month;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DayOfWeek ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.DayOfWeek);
                try
                {
                    item.DayOfWeek = rhs.DayOfWeek;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Day ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Day);
                try
                {
                    item.Day = rhs.Day;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Time ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Time);
                try
                {
                    item.Time = rhs.Time;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Duration ?? true)
            {
                errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Duration);
                try
                {
                    item.Duration = rhs.Duration;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        
    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class AIPackageScheduleXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static AIPackageScheduleXmlWriteTranslation Instance = new AIPackageScheduleXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAIPackageScheduleInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Month) ?? true))
            {
                EnumXmlTranslation<Month>.Instance.Write(
                    node: node,
                    name: nameof(item.Month),
                    item: item.Month,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.Month,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.DayOfWeek) ?? true))
            {
                EnumXmlTranslation<Weekday>.Instance.Write(
                    node: node,
                    name: nameof(item.DayOfWeek),
                    item: item.DayOfWeek,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.DayOfWeek,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Day) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Day),
                    item: item.Day,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.Day,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Time) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Time),
                    item: item.Time,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.Time,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Duration) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Duration),
                    item: item.Duration,
                    fieldIndex: (int)AIPackageSchedule_FieldIndex.Duration,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAIPackageScheduleInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AIPackageSchedule");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AIPackageSchedule");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAIPackageScheduleInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IAIPackageScheduleInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IAIPackageScheduleInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class AIPackageScheduleXmlCreateTranslation
    {
        public readonly static AIPackageScheduleXmlCreateTranslation Instance = new AIPackageScheduleXmlCreateTranslation();

        public static void FillPublicXml(
            IAIPackageScheduleInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AIPackageScheduleXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAIPackageScheduleInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Month":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Month);
                        if (EnumXmlTranslation<Month>.Instance.Parse(
                            node: node,
                            item: out Month MonthParse,
                            errorMask: errorMask))
                        {
                            item.Month = MonthParse;
                        }
                        else
                        {
                            item.Month = default(Month);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DayOfWeek":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.DayOfWeek);
                        if (EnumXmlTranslation<Weekday>.Instance.Parse(
                            node: node,
                            item: out Weekday DayOfWeekParse,
                            errorMask: errorMask))
                        {
                            item.DayOfWeek = DayOfWeekParse;
                        }
                        else
                        {
                            item.DayOfWeek = default(Weekday);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Day":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Day);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte DayParse,
                            errorMask: errorMask))
                        {
                            item.Day = DayParse;
                        }
                        else
                        {
                            item.Day = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Time":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Time);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte TimeParse,
                            errorMask: errorMask))
                        {
                            item.Time = TimeParse;
                        }
                        else
                        {
                            item.Time = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Duration":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageSchedule_FieldIndex.Duration);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 DurationParse,
                            errorMask: errorMask))
                        {
                            item.Duration = DurationParse;
                        }
                        else
                        {
                            item.Duration = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class AIPackageScheduleXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            XElement node,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageSchedule_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AIPackageScheduleXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            string path,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            Stream stream,
            out AIPackageSchedule_ErrorMask errorMask,
            AIPackageSchedule_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((AIPackageScheduleXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            XElement node,
            string name = null,
            AIPackageSchedule_TranslationMask translationMask = null)
        {
            ((AIPackageScheduleXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((AIPackageScheduleXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIPackageScheduleInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((AIPackageScheduleXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class AIPackageSchedule_Mask<T> : IMask<T>, IEquatable<AIPackageSchedule_Mask<T>>
    {
        #region Ctors
        public AIPackageSchedule_Mask()
        {
        }

        public AIPackageSchedule_Mask(T initialValue)
        {
            this.Month = initialValue;
            this.DayOfWeek = initialValue;
            this.Day = initialValue;
            this.Time = initialValue;
            this.Duration = initialValue;
        }
        #endregion

        #region Members
        public T Month;
        public T DayOfWeek;
        public T Day;
        public T Time;
        public T Duration;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackageSchedule_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackageSchedule_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Month, rhs.Month)) return false;
            if (!object.Equals(this.DayOfWeek, rhs.DayOfWeek)) return false;
            if (!object.Equals(this.Day, rhs.Day)) return false;
            if (!object.Equals(this.Time, rhs.Time)) return false;
            if (!object.Equals(this.Duration, rhs.Duration)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Month?.GetHashCode());
            ret = ret.CombineHashCode(this.DayOfWeek?.GetHashCode());
            ret = ret.CombineHashCode(this.Day?.GetHashCode());
            ret = ret.CombineHashCode(this.Time?.GetHashCode());
            ret = ret.CombineHashCode(this.Duration?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Month)) return false;
            if (!eval(this.DayOfWeek)) return false;
            if (!eval(this.Day)) return false;
            if (!eval(this.Time)) return false;
            if (!eval(this.Duration)) return false;
            return true;
        }
        #endregion

        #region Translate
        public AIPackageSchedule_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AIPackageSchedule_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AIPackageSchedule_Mask<R> obj, Func<T, R> eval)
        {
            obj.Month = eval(this.Month);
            obj.DayOfWeek = eval(this.DayOfWeek);
            obj.Day = eval(this.Day);
            obj.Time = eval(this.Time);
            obj.Duration = eval(this.Duration);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AIPackageSchedule_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AIPackageSchedule_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AIPackageSchedule_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Month ?? true)
                {
                    fg.AppendLine($"Month => {Month}");
                }
                if (printMask?.DayOfWeek ?? true)
                {
                    fg.AppendLine($"DayOfWeek => {DayOfWeek}");
                }
                if (printMask?.Day ?? true)
                {
                    fg.AppendLine($"Day => {Day}");
                }
                if (printMask?.Time ?? true)
                {
                    fg.AppendLine($"Time => {Time}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {Duration}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AIPackageSchedule_ErrorMask : IErrorMask, IErrorMask<AIPackageSchedule_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Month;
        public Exception DayOfWeek;
        public Exception Day;
        public Exception Time;
        public Exception Duration;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    return Month;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    return DayOfWeek;
                case AIPackageSchedule_FieldIndex.Day:
                    return Day;
                case AIPackageSchedule_FieldIndex.Time:
                    return Time;
                case AIPackageSchedule_FieldIndex.Duration:
                    return Duration;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    this.Month = ex;
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    this.DayOfWeek = ex;
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    this.Day = ex;
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    this.Time = ex;
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    this.Duration = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
            switch (enu)
            {
                case AIPackageSchedule_FieldIndex.Month:
                    this.Month = (Exception)obj;
                    break;
                case AIPackageSchedule_FieldIndex.DayOfWeek:
                    this.DayOfWeek = (Exception)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Day:
                    this.Day = (Exception)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Time:
                    this.Time = (Exception)obj;
                    break;
                case AIPackageSchedule_FieldIndex.Duration:
                    this.Duration = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Month != null) return true;
            if (DayOfWeek != null) return true;
            if (Day != null) return true;
            if (Time != null) return true;
            if (Duration != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("AIPackageSchedule_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Month => {Month}");
            fg.AppendLine($"DayOfWeek => {DayOfWeek}");
            fg.AppendLine($"Day => {Day}");
            fg.AppendLine($"Time => {Time}");
            fg.AppendLine($"Duration => {Duration}");
        }
        #endregion

        #region Combine
        public AIPackageSchedule_ErrorMask Combine(AIPackageSchedule_ErrorMask rhs)
        {
            var ret = new AIPackageSchedule_ErrorMask();
            ret.Month = this.Month.Combine(rhs.Month);
            ret.DayOfWeek = this.DayOfWeek.Combine(rhs.DayOfWeek);
            ret.Day = this.Day.Combine(rhs.Day);
            ret.Time = this.Time.Combine(rhs.Time);
            ret.Duration = this.Duration.Combine(rhs.Duration);
            return ret;
        }
        public static AIPackageSchedule_ErrorMask Combine(AIPackageSchedule_ErrorMask lhs, AIPackageSchedule_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AIPackageSchedule_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AIPackageSchedule_ErrorMask();
        }
        #endregion

    }
    public class AIPackageSchedule_CopyMask
    {
        public AIPackageSchedule_CopyMask()
        {
        }

        public AIPackageSchedule_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Month = defaultOn;
            this.DayOfWeek = defaultOn;
            this.Day = defaultOn;
            this.Time = defaultOn;
            this.Duration = defaultOn;
        }

        #region Members
        public bool Month;
        public bool DayOfWeek;
        public bool Day;
        public bool Time;
        public bool Duration;
        #endregion

    }

    public class AIPackageSchedule_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Month;
        public bool DayOfWeek;
        public bool Day;
        public bool Time;
        public bool Duration;
        #endregion

        #region Ctors
        public AIPackageSchedule_TranslationMask()
        {
        }

        public AIPackageSchedule_TranslationMask(bool defaultOn)
        {
            this.Month = defaultOn;
            this.DayOfWeek = defaultOn;
            this.Day = defaultOn;
            this.Time = defaultOn;
            this.Duration = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Month, null));
            ret.Add((DayOfWeek, null));
            ret.Add((Day, null));
            ret.Add((Time, null));
            ret.Add((Duration, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class AIPackageScheduleBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AIPackageScheduleBinaryWriteTranslation Instance = new AIPackageScheduleBinaryWriteTranslation();

        public static void Write_Embedded(
            IAIPackageScheduleInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Month>.Instance.Write(
                writer,
                item.Month,
                length: 1);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weekday>.Instance.Write(
                writer,
                item.DayOfWeek,
                length: 1);
            writer.Write(item.Day);
            writer.Write(item.Time);
            writer.Write(item.Duration);
        }

        public void Write(
            MutagenWriter writer,
            IAIPackageScheduleInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AIPackageSchedule_Registration.PSDT_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IAIPackageScheduleInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class AIPackageScheduleBinaryCreateTranslation
    {
        public readonly static AIPackageScheduleBinaryCreateTranslation Instance = new AIPackageScheduleBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class AIPackageScheduleBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAIPackageScheduleInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out AIPackageSchedule_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AIPackageScheduleBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageSchedule_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IAIPackageScheduleInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageScheduleBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IAIPackageScheduleInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((AIPackageScheduleBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    public partial class AIPackageScheduleBinaryWrapper :
        BinaryWrapper,
        IAIPackageScheduleInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageSchedule_Registration.Instance;
        public static AIPackageSchedule_Registration Registration => AIPackageSchedule_Registration.Instance;
        protected object CommonInstance()
        {
            return AIPackageScheduleCommon.Instance;
        }
        object IAIPackageScheduleInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IAIPackageScheduleInternalGetter.CommonSetterInstance()
        {
            return null;
        }
        object IAIPackageScheduleInternalGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIPackageScheduleInternalGetter)rhs, include);

        protected object XmlWriteTranslator => AIPackageScheduleXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AIPackageScheduleXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => AIPackageScheduleBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((AIPackageScheduleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public Month Month => (Month)_data.Span.Slice(0, 1)[0];
        public Weekday DayOfWeek => (Weekday)_data.Span.Slice(1, 1)[0];
        public Byte Day => _data.Span[2];
        public Byte Time => _data.Span[3];
        public Int32 Duration => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected AIPackageScheduleBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static AIPackageScheduleBinaryWrapper AIPackageScheduleFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new AIPackageScheduleBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x8 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

    #endregion

    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIPackageSchedule
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageSchedule_Registration.Instance;
        public static AIPackageSchedule_Registration Registration => AIPackageSchedule_Registration.Instance;
        protected object CommonInstance()
        {
            return AIPackageScheduleCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return AIPackageScheduleSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return AIPackageScheduleSetterCopyCommon.Instance;
        }
        object IAIPackageScheduleInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IAIPackageScheduleInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IAIPackageScheduleInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
