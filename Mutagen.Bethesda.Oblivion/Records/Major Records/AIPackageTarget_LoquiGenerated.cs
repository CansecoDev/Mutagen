/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackageTarget : 
        LoquiNotifyingObject,
        IAIPackageTarget,
        ILoquiObject<AIPackageTarget>,
        ILoquiObjectSetter,
        IEquatable<AIPackageTarget>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageTarget_Registration.Instance;
        public static AIPackageTarget_Registration Registration => AIPackageTarget_Registration.Instance;

        #region Ctor
        public AIPackageTarget()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectType
        private AIPackageTarget.ObjectTypeEnum _ObjectType;
        public AIPackageTarget.ObjectTypeEnum ObjectType
        {
            get => this._ObjectType;
            set => this.RaiseAndSetIfChanged(ref this._ObjectType, value, nameof(ObjectType));
        }
        #endregion
        #region Object
        private Int32 _Object;
        public Int32 Object
        {
            get => this._Object;
            set => this.RaiseAndSetIfChanged(ref this._Object, value, nameof(Object));
        }
        #endregion
        #region Count
        private Int32 _Count;
        public Int32 Count
        {
            get => this._Count;
            set => this.RaiseAndSetIfChanged(ref this._Count, value, nameof(Count));
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => AIPackageTargetCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => AIPackageTargetCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AIPackageTargetCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AIPackageTargetCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<AIPackageTarget>.GetEqualsMask(AIPackageTarget rhs) => AIPackageTargetCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAIPackageTargetGetter>.GetEqualsMask(IAIPackageTargetGetter rhs) => AIPackageTargetCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            AIPackageTarget_Mask<bool> printMask = null)
        {
            return AIPackageTargetCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            AIPackageTargetCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public AIPackageTarget_Mask<bool> GetHasBeenSetMask()
        {
            return AIPackageTargetCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackageTarget rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackageTarget rhs)
        {
            if (rhs == null) return false;
            if (this.ObjectType != rhs.ObjectType) return false;
            if (this.Object != rhs.Object) return false;
            if (this.Count != rhs.Count) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ObjectType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Object).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Count).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static AIPackageTarget Create_Xml(
            XElement root,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AIPackageTarget Create_Xml(
            XElement root,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackageTarget Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new AIPackageTarget();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AIPackageTarget Create_Xml(
            string path,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static AIPackageTarget Create_Xml(
            string path,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackageTarget Create_Xml(
            Stream stream,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static AIPackageTarget Create_Xml(
            Stream stream,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<AIPackageTarget>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true,
            AIPackageTarget_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            AIPackageTarget_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            AIPackageTargetCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            AIPackageTarget item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ObjectType":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.ObjectType);
                        if (EnumXmlTranslation<AIPackageTarget.ObjectTypeEnum>.Instance.Parse(
                            root: root,
                            item: out AIPackageTarget.ObjectTypeEnum ObjectTypeParse,
                            errorMask: errorMask))
                        {
                            item.ObjectType = ObjectTypeParse;
                        }
                        else
                        {
                            item.ObjectType = default(AIPackageTarget.ObjectTypeEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Object":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.Object);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 ObjectParse,
                            errorMask: errorMask))
                        {
                            item.Object = ObjectParse;
                        }
                        else
                        {
                            item.Object = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Count":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.Count);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 CountParse,
                            errorMask: errorMask))
                        {
                            item.Count = CountParse;
                        }
                        else
                        {
                            item.Count = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((AIPackageTarget_FieldIndex)index)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AIPackageTarget_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static AIPackageTarget Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AIPackageTarget Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackageTarget Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new AIPackageTarget();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(AIPackageTarget_Registration.PTDT_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AIPackageTarget Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static AIPackageTarget Create_Binary(
            string path,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        public static AIPackageTarget Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static AIPackageTarget Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        masterReferences: masterReferences,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out AIPackageTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    masterReferences: masterReferences,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            AIPackageTargetCommon.Write_Binary(
                item: this,
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            AIPackageTarget item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.ObjectType);
                if (EnumBinaryTranslation<AIPackageTarget.ObjectTypeEnum>.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out AIPackageTarget.ObjectTypeEnum ObjectTypeParse,
                    errorMask: errorMask))
                {
                    item.ObjectType = ObjectTypeParse;
                }
                else
                {
                    item.ObjectType = default(AIPackageTarget.ObjectTypeEnum);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.Object);
                if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Int32 ObjectParse,
                    errorMask: errorMask))
                {
                    item.Object = ObjectParse;
                }
                else
                {
                    item.Object = default(Int32);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.Count);
                if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Int32 CountParse,
                    errorMask: errorMask))
                {
                    item.Count = CountParse;
                }
                else
                {
                    item.Count = default(Int32);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public AIPackageTarget Copy(
            AIPackageTarget_CopyMask copyMask = null,
            IAIPackageTargetGetter def = null)
        {
            return AIPackageTarget.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AIPackageTarget Copy(
            IAIPackageTarget item,
            AIPackageTarget_CopyMask copyMask = null,
            IAIPackageTargetGetter def = null)
        {
            AIPackageTarget ret;
            if (item.GetType().Equals(typeof(AIPackageTarget)))
            {
                ret = new AIPackageTarget();
            }
            else
            {
                ret = (AIPackageTarget)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AIPackageTarget Copy_ToLoqui(
            IAIPackageTargetGetter item,
            AIPackageTarget_CopyMask copyMask = null,
            IAIPackageTargetGetter def = null)
        {
            AIPackageTarget ret;
            if (item.GetType().Equals(typeof(AIPackageTarget)))
            {
                ret = new AIPackageTarget() as AIPackageTarget;
            }
            else
            {
                ret = (AIPackageTarget)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAIPackageTargetGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAIPackageTargetGetter rhs,
            AIPackageTarget_CopyMask copyMask,
            IAIPackageTargetGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAIPackageTargetGetter rhs,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_CopyMask copyMask = null,
            IAIPackageTargetGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIPackageTargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IAIPackageTargetGetter rhs,
            ErrorMaskBuilder errorMask,
            AIPackageTarget_CopyMask copyMask = null,
            IAIPackageTargetGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AIPackageTargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    this.ObjectType = (AIPackageTarget.ObjectTypeEnum)obj;
                    break;
                case AIPackageTarget_FieldIndex.Object:
                    this.Object = (Int32)obj;
                    break;
                case AIPackageTarget_FieldIndex.Count:
                    this.Count = (Int32)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AIPackageTargetCommon.Clear(this, cmds);
        }


        public static AIPackageTarget Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AIPackageTarget();
            foreach (var pair in fields)
            {
                CopyInInternal_AIPackageTarget(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_AIPackageTarget(AIPackageTarget obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AIPackageTarget_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    obj.ObjectType = (AIPackageTarget.ObjectTypeEnum)pair.Value;
                    break;
                case AIPackageTarget_FieldIndex.Object:
                    obj.Object = (Int32)pair.Value;
                    break;
                case AIPackageTarget_FieldIndex.Count:
                    obj.Count = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, AIPackageTarget obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAIPackageTarget : IAIPackageTargetGetter, ILoquiClass<IAIPackageTarget, IAIPackageTargetGetter>, ILoquiClass<AIPackageTarget, IAIPackageTargetGetter>
    {
        new AIPackageTarget.ObjectTypeEnum ObjectType { get; set; }

        new Int32 Object { get; set; }

        new Int32 Count { get; set; }

    }

    public partial interface IAIPackageTargetGetter : ILoquiObject
    {
        #region ObjectType
        AIPackageTarget.ObjectTypeEnum ObjectType { get; }

        #endregion
        #region Object
        Int32 Object { get; }

        #endregion
        #region Count
        Int32 Count { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackageTarget_FieldIndex
    {
        ObjectType = 0,
        Object = 1,
        Count = 2,
    }
    #endregion

    #region Registration
    public class AIPackageTarget_Registration : ILoquiRegistration
    {
        public static readonly AIPackageTarget_Registration Instance = new AIPackageTarget_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 159,
            version: 0);

        public const string GUID = "52649554-81f8-4583-82cd-dbff72bc7bd5";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(AIPackageTarget_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackageTarget_ErrorMask);

        public static readonly Type ClassType = typeof(AIPackageTarget);

        public static readonly Type GetterType = typeof(IAIPackageTargetGetter);

        public static readonly Type SetterType = typeof(IAIPackageTarget);

        public static readonly Type CommonType = typeof(AIPackageTargetCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackageTarget";

        public const string Name = "AIPackageTarget";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTTYPE":
                    return (ushort)AIPackageTarget_FieldIndex.ObjectType;
                case "OBJECT":
                    return (ushort)AIPackageTarget_FieldIndex.Object;
                case "COUNT":
                    return (ushort)AIPackageTarget_FieldIndex.Count;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    return "ObjectType";
                case AIPackageTarget_FieldIndex.Object:
                    return "Object";
                case AIPackageTarget_FieldIndex.Count:
                    return "Count";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    return typeof(AIPackageTarget.ObjectTypeEnum);
                case AIPackageTarget_FieldIndex.Object:
                    return typeof(Int32);
                case AIPackageTarget_FieldIndex.Count:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType PTDT_HEADER = new RecordType("PTDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PTDT_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AIPackageTargetCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAIPackageTarget item,
            IAIPackageTargetGetter rhs,
            IAIPackageTargetGetter def,
            ErrorMaskBuilder errorMask,
            AIPackageTarget_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.ObjectType ?? true)
            {
                errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.ObjectType);
                try
                {
                    item.ObjectType = rhs.ObjectType;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Object ?? true)
            {
                errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.Object);
                try
                {
                    item.Object = rhs.Object;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Count ?? true)
            {
                errorMask?.PushIndex((int)AIPackageTarget_FieldIndex.Count);
                try
                {
                    item.Count = rhs.Count;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAIPackageTarget obj,
            NotifyingFireParameters cmds = null)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAIPackageTarget obj,
            NotifyingUnsetParameters cmds = null)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    obj.ObjectType = default(AIPackageTarget.ObjectTypeEnum);
                    break;
                case AIPackageTarget_FieldIndex.Object:
                    obj.Object = default(Int32);
                    break;
                case AIPackageTarget_FieldIndex.Count:
                    obj.Count = default(Int32);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAIPackageTarget obj)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                case AIPackageTarget_FieldIndex.Object:
                case AIPackageTarget_FieldIndex.Count:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IAIPackageTargetGetter obj)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    return obj.ObjectType;
                case AIPackageTarget_FieldIndex.Object:
                    return obj.Object;
                case AIPackageTarget_FieldIndex.Count:
                    return obj.Count;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IAIPackageTarget item,
            NotifyingUnsetParameters cmds = null)
        {
            item.ObjectType = default(AIPackageTarget.ObjectTypeEnum);
            item.Object = default(Int32);
            item.Count = default(Int32);
        }

        public static AIPackageTarget_Mask<bool> GetEqualsMask(
            this IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs)
        {
            var ret = new AIPackageTarget_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs,
            AIPackageTarget_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.ObjectType = item.ObjectType == rhs.ObjectType;
            ret.Object = item.Object == rhs.Object;
            ret.Count = item.Count == rhs.Count;
        }

        public static string ToString(
            this IAIPackageTargetGetter item,
            string name = null,
            AIPackageTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAIPackageTargetGetter item,
            FileGeneration fg,
            string name = null,
            AIPackageTarget_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(AIPackageTarget)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(AIPackageTarget)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ObjectType ?? true)
                {
                    fg.AppendLine($"ObjectType => {item.ObjectType}");
                }
                if (printMask?.Object ?? true)
                {
                    fg.AppendLine($"Object => {item.Object}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {item.Count}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAIPackageTargetGetter item,
            AIPackageTarget_Mask<bool?> checkMask)
        {
            return true;
        }

        public static AIPackageTarget_Mask<bool> GetHasBeenSetMask(IAIPackageTargetGetter item)
        {
            var ret = new AIPackageTarget_Mask<bool>();
            ret.ObjectType = true;
            ret.Object = true;
            ret.Count = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            AIPackageTarget item,
            bool doMasks,
            out AIPackageTarget_ErrorMask errorMask,
            AIPackageTarget_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            AIPackageTarget item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AIPackageTarget");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AIPackageTarget");
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.ObjectType) ?? true))
            {
                EnumXmlTranslation<AIPackageTarget.ObjectTypeEnum>.Instance.Write(
                    node: elem,
                    name: nameof(item.ObjectType),
                    item: item.ObjectType,
                    fieldIndex: (int)AIPackageTarget_FieldIndex.ObjectType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Object) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Object),
                    item: item.Object,
                    fieldIndex: (int)AIPackageTarget_FieldIndex.Object,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Count) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Count),
                    item: item.Count,
                    fieldIndex: (int)AIPackageTarget_FieldIndex.Count,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            AIPackageTarget item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out AIPackageTarget_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                masterReferences: masterReferences,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = AIPackageTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            AIPackageTarget item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AIPackageTarget_Registration.PTDT_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            AIPackageTarget item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<AIPackageTarget.ObjectTypeEnum>.Instance.Write(
                writer,
                item.ObjectType,
                length: 4,
                fieldIndex: (int)AIPackageTarget_FieldIndex.ObjectType,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Object,
                fieldIndex: (int)AIPackageTarget_FieldIndex.Object,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Count,
                fieldIndex: (int)AIPackageTarget_FieldIndex.Count,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class AIPackageTarget_Mask<T> : IMask<T>, IEquatable<AIPackageTarget_Mask<T>>
    {
        #region Ctors
        public AIPackageTarget_Mask()
        {
        }

        public AIPackageTarget_Mask(T initialValue)
        {
            this.ObjectType = initialValue;
            this.Object = initialValue;
            this.Count = initialValue;
        }
        #endregion

        #region Members
        public T ObjectType;
        public T Object;
        public T Count;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackageTarget_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackageTarget_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ObjectType, rhs.ObjectType)) return false;
            if (!object.Equals(this.Object, rhs.Object)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ObjectType?.GetHashCode());
            ret = ret.CombineHashCode(this.Object?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ObjectType)) return false;
            if (!eval(this.Object)) return false;
            if (!eval(this.Count)) return false;
            return true;
        }
        #endregion

        #region Translate
        public AIPackageTarget_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AIPackageTarget_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AIPackageTarget_Mask<R> obj, Func<T, R> eval)
        {
            obj.ObjectType = eval(this.ObjectType);
            obj.Object = eval(this.Object);
            obj.Count = eval(this.Count);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AIPackageTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AIPackageTarget_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AIPackageTarget_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ObjectType ?? true)
                {
                    fg.AppendLine($"ObjectType => {ObjectType}");
                }
                if (printMask?.Object ?? true)
                {
                    fg.AppendLine($"Object => {Object}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AIPackageTarget_ErrorMask : IErrorMask, IErrorMask<AIPackageTarget_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ObjectType;
        public Exception Object;
        public Exception Count;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    return ObjectType;
                case AIPackageTarget_FieldIndex.Object:
                    return Object;
                case AIPackageTarget_FieldIndex.Count:
                    return Count;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    this.ObjectType = ex;
                    break;
                case AIPackageTarget_FieldIndex.Object:
                    this.Object = ex;
                    break;
                case AIPackageTarget_FieldIndex.Count:
                    this.Count = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
            switch (enu)
            {
                case AIPackageTarget_FieldIndex.ObjectType:
                    this.ObjectType = (Exception)obj;
                    break;
                case AIPackageTarget_FieldIndex.Object:
                    this.Object = (Exception)obj;
                    break;
                case AIPackageTarget_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ObjectType != null) return true;
            if (Object != null) return true;
            if (Count != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("AIPackageTarget_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ObjectType => {ObjectType}");
            fg.AppendLine($"Object => {Object}");
            fg.AppendLine($"Count => {Count}");
        }
        #endregion

        #region Combine
        public AIPackageTarget_ErrorMask Combine(AIPackageTarget_ErrorMask rhs)
        {
            var ret = new AIPackageTarget_ErrorMask();
            ret.ObjectType = this.ObjectType.Combine(rhs.ObjectType);
            ret.Object = this.Object.Combine(rhs.Object);
            ret.Count = this.Count.Combine(rhs.Count);
            return ret;
        }
        public static AIPackageTarget_ErrorMask Combine(AIPackageTarget_ErrorMask lhs, AIPackageTarget_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AIPackageTarget_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AIPackageTarget_ErrorMask();
        }
        #endregion

    }
    public class AIPackageTarget_CopyMask
    {
        #region Members
        public bool ObjectType;
        public bool Object;
        public bool Count;
        #endregion

    }
    public class AIPackageTarget_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool ObjectType;
        public bool Object;
        public bool Count;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ObjectType, null));
            ret.Add((Object, null));
            ret.Add((Count, null));
        }
    }
    #endregion

    #endregion

}
