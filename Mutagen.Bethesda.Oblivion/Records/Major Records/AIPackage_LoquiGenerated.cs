/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackage : 
        MajorRecord,
        IAIPackage,
        ILoquiObject<AIPackage>,
        ILoquiObjectSetter,
        IPropertySupporter<AIPackage.Flag>,
        IPropertySupporter<AIPackage.GeneralTypeEnum>,
        IPropertySupporter<AIPackageLocation>,
        IPropertySupporter<AIPackageSchedule>,
        IPropertySupporter<AIPackageTarget>,
        IEquatable<AIPackage>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackage_Registration.Instance;
        public new static AIPackage_Registration Registration => AIPackage_Registration.Instance;

        #region Ctor
        public AIPackage()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        protected AIPackage.Flag _Flags;
        protected PropertyForwarder<AIPackage, AIPackage.Flag> _FlagsForwarder;
        public INotifyingSetItem<AIPackage.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<AIPackage, AIPackage.Flag>(this, (int)AIPackage_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AIPackage.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            AIPackage.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackage_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackage_FieldIndex.Flags] = hasBeenSet;
            }
            if (_AIPackageFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _AIPackageFlag_subscriptions.FireSubscriptions(
                    index: (int)AIPackage_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)AIPackage_FieldIndex.Flags] = false;
            Flags = default(AIPackage.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<AIPackage.Flag> IAIPackage.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<AIPackage.Flag> IAIPackageGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region GeneralType
        protected AIPackage.GeneralTypeEnum _GeneralType;
        protected PropertyForwarder<AIPackage, AIPackage.GeneralTypeEnum> _GeneralTypeForwarder;
        public INotifyingSetItem<AIPackage.GeneralTypeEnum> GeneralType_Property => _GeneralTypeForwarder ?? (_GeneralTypeForwarder = new PropertyForwarder<AIPackage, AIPackage.GeneralTypeEnum>(this, (int)AIPackage_FieldIndex.GeneralType));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AIPackage.GeneralTypeEnum GeneralType
        {
            get => this._GeneralType;
            set => this.SetGeneralType(value);
        }
        protected void SetGeneralType(
            AIPackage.GeneralTypeEnum item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackage_FieldIndex.GeneralType];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && GeneralType == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackage_FieldIndex.GeneralType] = hasBeenSet;
            }
            if (_AIPackageGeneralTypeEnum_subscriptions != null)
            {
                var tmp = GeneralType;
                _GeneralType = item;
                _AIPackageGeneralTypeEnum_subscriptions.FireSubscriptions(
                    index: (int)AIPackage_FieldIndex.GeneralType,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _GeneralType = item;
            }
        }
        protected void UnsetGeneralType()
        {
            _hasBeenSetTracker[(int)AIPackage_FieldIndex.GeneralType] = false;
            GeneralType = default(AIPackage.GeneralTypeEnum);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<AIPackage.GeneralTypeEnum> IAIPackage.GeneralType_Property => this.GeneralType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<AIPackage.GeneralTypeEnum> IAIPackageGetter.GeneralType_Property => this.GeneralType_Property;
        #endregion
        #region Location
        protected AIPackageLocation _Location;
        protected PropertyForwarder<AIPackage, AIPackageLocation> _LocationForwarder;
        public INotifyingSetItem<AIPackageLocation> Location_Property => _LocationForwarder ?? (_LocationForwarder = new PropertyForwarder<AIPackage, AIPackageLocation>(this, (int)AIPackage_FieldIndex.Location));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AIPackageLocation Location
        {
            get => this._Location;
            set => this.SetLocation(value);
        }
        protected void SetLocation(
            AIPackageLocation item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackage_FieldIndex.Location];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Location, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackage_FieldIndex.Location] = hasBeenSet;
            }
            if (_AIPackageLocation_subscriptions != null)
            {
                var tmp = Location;
                _Location = item;
                _AIPackageLocation_subscriptions.FireSubscriptions(
                    index: (int)AIPackage_FieldIndex.Location,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Location = item;
            }
        }
        protected void UnsetLocation()
        {
            _hasBeenSetTracker[(int)AIPackage_FieldIndex.Location] = false;
            Location = default(AIPackageLocation);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<AIPackageLocation> IAIPackage.Location_Property => this.Location_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<AIPackageLocation> IAIPackageGetter.Location_Property => this.Location_Property;
        #endregion
        #region Schedule
        protected AIPackageSchedule _Schedule;
        protected PropertyForwarder<AIPackage, AIPackageSchedule> _ScheduleForwarder;
        public INotifyingSetItem<AIPackageSchedule> Schedule_Property => _ScheduleForwarder ?? (_ScheduleForwarder = new PropertyForwarder<AIPackage, AIPackageSchedule>(this, (int)AIPackage_FieldIndex.Schedule));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AIPackageSchedule Schedule
        {
            get => this._Schedule;
            set => this.SetSchedule(value);
        }
        protected void SetSchedule(
            AIPackageSchedule item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackage_FieldIndex.Schedule];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Schedule, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackage_FieldIndex.Schedule] = hasBeenSet;
            }
            if (_AIPackageSchedule_subscriptions != null)
            {
                var tmp = Schedule;
                _Schedule = item;
                _AIPackageSchedule_subscriptions.FireSubscriptions(
                    index: (int)AIPackage_FieldIndex.Schedule,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Schedule = item;
            }
        }
        protected void UnsetSchedule()
        {
            _hasBeenSetTracker[(int)AIPackage_FieldIndex.Schedule] = false;
            Schedule = default(AIPackageSchedule);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<AIPackageSchedule> IAIPackage.Schedule_Property => this.Schedule_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<AIPackageSchedule> IAIPackageGetter.Schedule_Property => this.Schedule_Property;
        #endregion
        #region Target
        protected AIPackageTarget _Target;
        protected PropertyForwarder<AIPackage, AIPackageTarget> _TargetForwarder;
        public INotifyingSetItem<AIPackageTarget> Target_Property => _TargetForwarder ?? (_TargetForwarder = new PropertyForwarder<AIPackage, AIPackageTarget>(this, (int)AIPackage_FieldIndex.Target));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AIPackageTarget Target
        {
            get => this._Target;
            set => this.SetTarget(value);
        }
        protected void SetTarget(
            AIPackageTarget item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AIPackage_FieldIndex.Target];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Target, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AIPackage_FieldIndex.Target] = hasBeenSet;
            }
            if (_AIPackageTarget_subscriptions != null)
            {
                var tmp = Target;
                _Target = item;
                _AIPackageTarget_subscriptions.FireSubscriptions(
                    index: (int)AIPackage_FieldIndex.Target,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Target = item;
            }
        }
        protected void UnsetTarget()
        {
            _hasBeenSetTracker[(int)AIPackage_FieldIndex.Target] = false;
            Target = default(AIPackageTarget);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<AIPackageTarget> IAIPackage.Target_Property => this.Target_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<AIPackageTarget> IAIPackageGetter.Target_Property => this.Target_Property;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Condition> _Conditions = new NotifyingList<Condition>();
        public INotifyingList<Condition> Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Condition> ConditionsEnumerable
        {
            get => _Conditions;
            set => _Conditions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Condition> IAIPackage.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Condition> IAIPackageGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => AIPackageCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => AIPackageCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AIPackageCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AIPackageCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<AIPackage>.GetEqualsMask(AIPackage rhs) => AIPackageCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAIPackageGetter>.GetEqualsMask(IAIPackageGetter rhs) => AIPackageCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return AIPackageCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            AIPackage_Mask<bool> printMask = null)
        {
            return AIPackageCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            AIPackageCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new AIPackage_Mask<bool> GetHasBeenSetMask()
        {
            return AIPackageCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackage rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackage rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.GeneralType != rhs.GeneralType) return false;
            if (Location_Property.HasBeenSet != rhs.Location_Property.HasBeenSet) return false;
            if (Location_Property.HasBeenSet)
            {
                if (!object.Equals(this.Location, rhs.Location)) return false;
            }
            if (Schedule_Property.HasBeenSet != rhs.Schedule_Property.HasBeenSet) return false;
            if (Schedule_Property.HasBeenSet)
            {
                if (!object.Equals(this.Schedule, rhs.Schedule)) return false;
            }
            if (Target_Property.HasBeenSet != rhs.Target_Property.HasBeenSet) return false;
            if (Target_Property.HasBeenSet)
            {
                if (!object.Equals(this.Target, rhs.Target)) return false;
            }
            if (Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (Conditions.HasBeenSet)
            {
                if (!this.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(GeneralType).CombineHashCode(ret);
            if (Location_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Location).CombineHashCode(ret);
            }
            if (Schedule_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Schedule).CombineHashCode(ret);
            }
            if (Target_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Target).CombineHashCode(ret);
            }
            if (Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Conditions).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static AIPackage Create_Xml(
            XElement root,
            AIPackage_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AIPackage Create_Xml(
            XElement root,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true,
            AIPackage_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackage Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new AIPackage();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AIPackage Create_Xml(
            string path,
            AIPackage_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static AIPackage Create_Xml(
            string path,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackage Create_Xml(
            Stream stream,
            AIPackage_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static AIPackage Create_Xml(
            Stream stream,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<AIPackage>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true,
            AIPackage_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            AIPackageCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            AIPackage item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Flags);
                        if (EnumXmlTranslation<AIPackage.Flag>.Instance.Parse(
                            root: root,
                            item: out AIPackage.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GeneralType":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.GeneralType);
                        if (EnumXmlTranslation<AIPackage.GeneralTypeEnum>.Instance.Parse(
                            root: root,
                            item: out AIPackage.GeneralTypeEnum GeneralTypeParse,
                            errorMask: errorMask))
                        {
                            item.GeneralType = GeneralTypeParse;
                        }
                        else
                        {
                            item.UnsetGeneralType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Location":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Location);
                        if (LoquiXmlTranslation<AIPackageLocation>.Instance.Parse(
                            root: root,
                            item: out AIPackageLocation LocationParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Location)))
                        {
                            item.Location = LocationParse;
                        }
                        else
                        {
                            item.UnsetLocation();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Schedule":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Schedule);
                        if (LoquiXmlTranslation<AIPackageSchedule>.Instance.Parse(
                            root: root,
                            item: out AIPackageSchedule ScheduleParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Schedule)))
                        {
                            item.Schedule = ScheduleParse;
                        }
                        else
                        {
                            item.UnsetSchedule();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Target":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Target);
                        if (LoquiXmlTranslation<AIPackageTarget>.Instance.Parse(
                            root: root,
                            item: out AIPackageTarget TargetParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Target)))
                        {
                            item.Target = TargetParse;
                        }
                        else
                        {
                            item.UnsetTarget();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            root: root,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                    return _hasBeenSetTracker[index];
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter AIPackage.Flag
        protected ObjectCentralizationSubscriptions<AIPackage.Flag> _AIPackageFlag_subscriptions;
        AIPackage.Flag IPropertySupporter<AIPackage.Flag>.Get(int index)
        {
            return GetAIPackageFlag(index: index);
        }

        protected AIPackage.Flag GetAIPackageFlag(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackage.Flag: {index}");
            }
        }

        void IPropertySupporter<AIPackage.Flag>.Set(
            int index,
            AIPackage.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetAIPackageFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetAIPackageFlag(
            int index,
            AIPackage.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackage.Flag: {index}");
            }
        }

        bool IPropertySupporter<AIPackage.Flag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<AIPackage.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<AIPackage.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetAIPackageFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetAIPackageFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Flags:
                    SetFlags(
                        item: default(AIPackage.Flag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackage.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackage.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<AIPackage.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_AIPackageFlag_subscriptions == null)
            {
                _AIPackageFlag_subscriptions = new ObjectCentralizationSubscriptions<AIPackage.Flag>();
            }
            _AIPackageFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackage.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _AIPackageFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<AIPackage.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        AIPackage.Flag IPropertySupporter<AIPackage.Flag>.DefaultValue(int index)
        {
            return DefaultValueAIPackageFlag(index: index);
        }

        protected AIPackage.Flag DefaultValueAIPackageFlag(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Flags:
                    return default(AIPackage.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackage.Flag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter AIPackage.GeneralTypeEnum
        protected ObjectCentralizationSubscriptions<AIPackage.GeneralTypeEnum> _AIPackageGeneralTypeEnum_subscriptions;
        AIPackage.GeneralTypeEnum IPropertySupporter<AIPackage.GeneralTypeEnum>.Get(int index)
        {
            return GetAIPackageGeneralTypeEnum(index: index);
        }

        protected AIPackage.GeneralTypeEnum GetAIPackageGeneralTypeEnum(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.GeneralType:
                    return GeneralType;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackage.GeneralTypeEnum: {index}");
            }
        }

        void IPropertySupporter<AIPackage.GeneralTypeEnum>.Set(
            int index,
            AIPackage.GeneralTypeEnum item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetAIPackageGeneralTypeEnum(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetAIPackageGeneralTypeEnum(
            int index,
            AIPackage.GeneralTypeEnum item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.GeneralType:
                    SetGeneralType(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackage.GeneralTypeEnum: {index}");
            }
        }

        bool IPropertySupporter<AIPackage.GeneralTypeEnum>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<AIPackage.GeneralTypeEnum>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<AIPackage.GeneralTypeEnum>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetAIPackageGeneralTypeEnum(
                index: index,
                cmds: cmds);
        }

        protected void UnsetAIPackageGeneralTypeEnum(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.GeneralType:
                    SetGeneralType(
                        item: default(AIPackage.GeneralTypeEnum),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackage.GeneralTypeEnum: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackage.GeneralTypeEnum>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<AIPackage.GeneralTypeEnum> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_AIPackageGeneralTypeEnum_subscriptions == null)
            {
                _AIPackageGeneralTypeEnum_subscriptions = new ObjectCentralizationSubscriptions<AIPackage.GeneralTypeEnum>();
            }
            _AIPackageGeneralTypeEnum_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackage.GeneralTypeEnum>.Unsubscribe(
            int index,
            object owner)
        {
            _AIPackageGeneralTypeEnum_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<AIPackage.GeneralTypeEnum>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        AIPackage.GeneralTypeEnum IPropertySupporter<AIPackage.GeneralTypeEnum>.DefaultValue(int index)
        {
            return DefaultValueAIPackageGeneralTypeEnum(index: index);
        }

        protected AIPackage.GeneralTypeEnum DefaultValueAIPackageGeneralTypeEnum(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.GeneralType:
                    return default(AIPackage.GeneralTypeEnum);
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackage.GeneralTypeEnum: {index}");
            }
        }

        #endregion

        #region IPropertySupporter AIPackageLocation
        protected ObjectCentralizationSubscriptions<AIPackageLocation> _AIPackageLocation_subscriptions;
        AIPackageLocation IPropertySupporter<AIPackageLocation>.Get(int index)
        {
            return GetAIPackageLocation(index: index);
        }

        protected AIPackageLocation GetAIPackageLocation(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Location:
                    return Location;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageLocation: {index}");
            }
        }

        void IPropertySupporter<AIPackageLocation>.Set(
            int index,
            AIPackageLocation item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetAIPackageLocation(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetAIPackageLocation(
            int index,
            AIPackageLocation item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Location:
                    SetLocation(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageLocation: {index}");
            }
        }

        bool IPropertySupporter<AIPackageLocation>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<AIPackageLocation>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<AIPackageLocation>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetAIPackageLocation(
                index: index,
                cmds: cmds);
        }

        protected void UnsetAIPackageLocation(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Location:
                    SetLocation(
                        item: default(AIPackageLocation),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageLocation: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackageLocation>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<AIPackageLocation> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_AIPackageLocation_subscriptions == null)
            {
                _AIPackageLocation_subscriptions = new ObjectCentralizationSubscriptions<AIPackageLocation>();
            }
            _AIPackageLocation_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackageLocation>.Unsubscribe(
            int index,
            object owner)
        {
            _AIPackageLocation_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<AIPackageLocation>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        AIPackageLocation IPropertySupporter<AIPackageLocation>.DefaultValue(int index)
        {
            return DefaultValueAIPackageLocation(index: index);
        }

        protected AIPackageLocation DefaultValueAIPackageLocation(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Location:
                    return default(AIPackageLocation);
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageLocation: {index}");
            }
        }

        #endregion

        #region IPropertySupporter AIPackageSchedule
        protected ObjectCentralizationSubscriptions<AIPackageSchedule> _AIPackageSchedule_subscriptions;
        AIPackageSchedule IPropertySupporter<AIPackageSchedule>.Get(int index)
        {
            return GetAIPackageSchedule(index: index);
        }

        protected AIPackageSchedule GetAIPackageSchedule(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Schedule:
                    return Schedule;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageSchedule: {index}");
            }
        }

        void IPropertySupporter<AIPackageSchedule>.Set(
            int index,
            AIPackageSchedule item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetAIPackageSchedule(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetAIPackageSchedule(
            int index,
            AIPackageSchedule item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Schedule:
                    SetSchedule(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageSchedule: {index}");
            }
        }

        bool IPropertySupporter<AIPackageSchedule>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<AIPackageSchedule>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<AIPackageSchedule>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetAIPackageSchedule(
                index: index,
                cmds: cmds);
        }

        protected void UnsetAIPackageSchedule(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Schedule:
                    SetSchedule(
                        item: default(AIPackageSchedule),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageSchedule: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackageSchedule>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<AIPackageSchedule> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_AIPackageSchedule_subscriptions == null)
            {
                _AIPackageSchedule_subscriptions = new ObjectCentralizationSubscriptions<AIPackageSchedule>();
            }
            _AIPackageSchedule_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackageSchedule>.Unsubscribe(
            int index,
            object owner)
        {
            _AIPackageSchedule_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<AIPackageSchedule>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        AIPackageSchedule IPropertySupporter<AIPackageSchedule>.DefaultValue(int index)
        {
            return DefaultValueAIPackageSchedule(index: index);
        }

        protected AIPackageSchedule DefaultValueAIPackageSchedule(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Schedule:
                    return default(AIPackageSchedule);
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageSchedule: {index}");
            }
        }

        #endregion

        #region IPropertySupporter AIPackageTarget
        protected ObjectCentralizationSubscriptions<AIPackageTarget> _AIPackageTarget_subscriptions;
        AIPackageTarget IPropertySupporter<AIPackageTarget>.Get(int index)
        {
            return GetAIPackageTarget(index: index);
        }

        protected AIPackageTarget GetAIPackageTarget(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Target:
                    return Target;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageTarget: {index}");
            }
        }

        void IPropertySupporter<AIPackageTarget>.Set(
            int index,
            AIPackageTarget item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetAIPackageTarget(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetAIPackageTarget(
            int index,
            AIPackageTarget item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Target:
                    SetTarget(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageTarget: {index}");
            }
        }

        bool IPropertySupporter<AIPackageTarget>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<AIPackageTarget>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<AIPackageTarget>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetAIPackageTarget(
                index: index,
                cmds: cmds);
        }

        protected void UnsetAIPackageTarget(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Target:
                    SetTarget(
                        item: default(AIPackageTarget),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageTarget: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackageTarget>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<AIPackageTarget> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_AIPackageTarget_subscriptions == null)
            {
                _AIPackageTarget_subscriptions = new ObjectCentralizationSubscriptions<AIPackageTarget>();
            }
            _AIPackageTarget_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<AIPackageTarget>.Unsubscribe(
            int index,
            object owner)
        {
            _AIPackageTarget_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<AIPackageTarget>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        AIPackageTarget IPropertySupporter<AIPackageTarget>.DefaultValue(int index)
        {
            return DefaultValueAIPackageTarget(index: index);
        }

        protected AIPackageTarget DefaultValueAIPackageTarget(int index)
        {
            switch ((AIPackage_FieldIndex)index)
            {
                case AIPackage_FieldIndex.Target:
                    return default(AIPackageTarget);
                default:
                    throw new ArgumentException($"Unknown index for field type AIPackageTarget: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AIPackage_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            if (Location != null)
            {
                foreach (var item in Location.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static AIPackage Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AIPackage Create_Binary(
            MutagenFrame frame,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIPackage Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<AIPackage>(
                record: new AIPackage(),
                frame: frame,
                errorMask: errorMask,
                recType: AIPackage_Registration.PACK_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static AIPackage Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AIPackage Create_Binary(
            string path,
            out AIPackage_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static AIPackage Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AIPackage Create_Binary(
            Stream stream,
            out AIPackage_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out AIPackage_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            AIPackageCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_Flags_Custom(
            MutagenFrame frame,
            AIPackage item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_Flags_Custom(
            MutagenWriter writer,
            AIPackage item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_Flags(
            MutagenWriter writer,
            AIPackage item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_Flags_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        static partial void FillBinary_GeneralType_Custom(
            MutagenFrame frame,
            AIPackage item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_GeneralType_Custom(
            MutagenWriter writer,
            AIPackage item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_GeneralType(
            MutagenWriter writer,
            AIPackage item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_GeneralType_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            AIPackage item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            AIPackage item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x54444B50: // PKDT
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        FillBinary_Flags_Custom(
                            frame: dataFrame,
                            item: item,
                            errorMask: errorMask);
                        FillBinary_GeneralType_Custom(
                            frame: dataFrame,
                            item: item,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.GeneralType);
                case 0x54444C50: // PLDT
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Location);
                        if (LoquiBinaryTranslation<AIPackageLocation>.Instance.Parse(
                            frame: frame,
                            item: out AIPackageLocation LocationParse,
                            errorMask: errorMask))
                        {
                            item.Location = LocationParse;
                        }
                        else
                        {
                            item.UnsetLocation();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Location);
                case 0x54445350: // PSDT
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Schedule);
                        if (LoquiBinaryTranslation<AIPackageSchedule>.Instance.Parse(
                            frame: frame,
                            item: out AIPackageSchedule ScheduleParse,
                            errorMask: errorMask))
                        {
                            item.Schedule = ScheduleParse;
                        }
                        else
                        {
                            item.UnsetSchedule();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Schedule);
                case 0x54445450: // PTDT
                    try
                    {
                        errorMask?.PushIndex((int)AIPackage_FieldIndex.Target);
                        if (LoquiBinaryTranslation<AIPackageTarget>.Instance.Parse(
                            frame: frame,
                            item: out AIPackageTarget TargetParse,
                            errorMask: errorMask))
                        {
                            item.Target = TargetParse;
                        }
                        else
                        {
                            item.UnsetTarget();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Target);
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)AIPackage_FieldIndex.Conditions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<Condition>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Conditions);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public AIPackage Copy(
            AIPackage_CopyMask copyMask = null,
            IAIPackageGetter def = null)
        {
            return AIPackage.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AIPackage Copy(
            IAIPackage item,
            AIPackage_CopyMask copyMask = null,
            IAIPackageGetter def = null)
        {
            AIPackage ret;
            if (item.GetType().Equals(typeof(AIPackage)))
            {
                ret = new AIPackage();
            }
            else
            {
                ret = (AIPackage)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AIPackage Copy_ToLoqui(
            IAIPackageGetter item,
            AIPackage_CopyMask copyMask = null,
            IAIPackageGetter def = null)
        {
            AIPackage ret;
            if (item.GetType().Equals(typeof(AIPackage)))
            {
                ret = new AIPackage() as AIPackage;
            }
            else
            {
                ret = (AIPackage)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAIPackageGetter rhs,
            AIPackage_CopyMask copyMask,
            IAIPackageGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAIPackageGetter rhs,
            out AIPackage_ErrorMask errorMask,
            AIPackage_CopyMask copyMask = null,
            IAIPackageGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIPackageCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IAIPackageGetter rhs,
            ErrorMaskBuilder errorMask,
            AIPackage_CopyMask copyMask = null,
            IAIPackageGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AIPackageCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    this.SetFlags(
                        (AIPackage.Flag)obj,
                        cmds: cmds);
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    this.SetGeneralType(
                        (AIPackage.GeneralTypeEnum)obj,
                        cmds: cmds);
                    break;
                case AIPackage_FieldIndex.Location:
                    this.SetLocation(
                        (AIPackageLocation)obj,
                        cmds: cmds);
                    break;
                case AIPackage_FieldIndex.Schedule:
                    this.SetSchedule(
                        (AIPackageSchedule)obj,
                        cmds: cmds);
                    break;
                case AIPackage_FieldIndex.Target:
                    this.SetTarget(
                        (AIPackageTarget)obj,
                        cmds: cmds);
                    break;
                case AIPackage_FieldIndex.Conditions:
                    this._Conditions.SetTo((IEnumerable<Condition>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AIPackageCommon.Clear(this, cmds);
        }


        public new static AIPackage Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AIPackage();
            foreach (var pair in fields)
            {
                CopyInInternal_AIPackage(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_AIPackage(AIPackage obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AIPackage_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    obj.SetFlags(
                        (AIPackage.Flag)pair.Value,
                        cmds: null);
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    obj.SetGeneralType(
                        (AIPackage.GeneralTypeEnum)pair.Value,
                        cmds: null);
                    break;
                case AIPackage_FieldIndex.Location:
                    obj.SetLocation(
                        (AIPackageLocation)pair.Value,
                        cmds: null);
                    break;
                case AIPackage_FieldIndex.Schedule:
                    obj.SetSchedule(
                        (AIPackageSchedule)pair.Value,
                        cmds: null);
                    break;
                case AIPackage_FieldIndex.Target:
                    obj.SetTarget(
                        (AIPackageTarget)pair.Value,
                        cmds: null);
                    break;
                case AIPackage_FieldIndex.Conditions:
                    obj._Conditions.SetTo((IEnumerable<Condition>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, AIPackage obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAIPackage : IAIPackageGetter, IMajorRecord, ILoquiClass<IAIPackage, IAIPackageGetter>, ILoquiClass<AIPackage, IAIPackageGetter>
    {
        new AIPackage.Flag Flags { get; set; }
        new INotifyingItem<AIPackage.Flag> Flags_Property { get; }

        new AIPackage.GeneralTypeEnum GeneralType { get; set; }
        new INotifyingItem<AIPackage.GeneralTypeEnum> GeneralType_Property { get; }

        new AIPackageLocation Location { get; set; }
        new INotifyingSetItem<AIPackageLocation> Location_Property { get; }

        new AIPackageSchedule Schedule { get; set; }
        new INotifyingSetItem<AIPackageSchedule> Schedule_Property { get; }

        new AIPackageTarget Target { get; set; }
        new INotifyingSetItem<AIPackageTarget> Target_Property { get; }

        new INotifyingList<Condition> Conditions { get; }
    }

    public partial interface IAIPackageGetter : IMajorRecordGetter
    {
        #region Flags
        AIPackage.Flag Flags { get; }
        INotifyingItemGetter<AIPackage.Flag> Flags_Property { get; }

        #endregion
        #region GeneralType
        AIPackage.GeneralTypeEnum GeneralType { get; }
        INotifyingItemGetter<AIPackage.GeneralTypeEnum> GeneralType_Property { get; }

        #endregion
        #region Location
        AIPackageLocation Location { get; }
        INotifyingSetItemGetter<AIPackageLocation> Location_Property { get; }

        #endregion
        #region Schedule
        AIPackageSchedule Schedule { get; }
        INotifyingSetItemGetter<AIPackageSchedule> Schedule_Property { get; }

        #endregion
        #region Target
        AIPackageTarget Target { get; }
        INotifyingSetItemGetter<AIPackageTarget> Target_Property { get; }

        #endregion
        #region Conditions
        INotifyingListGetter<Condition> Conditions { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackage_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Flags = 5,
        GeneralType = 6,
        Location = 7,
        Schedule = 8,
        Target = 9,
        Conditions = 10,
    }
    #endregion

    #region Registration
    public class AIPackage_Registration : ILoquiRegistration
    {
        public static readonly AIPackage_Registration Instance = new AIPackage_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 87,
            version: 0);

        public const string GUID = "e9210f75-0cfe-4e96-8c3a-415255e0d359";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(AIPackage_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackage_ErrorMask);

        public static readonly Type ClassType = typeof(AIPackage);

        public static readonly Type GetterType = typeof(IAIPackageGetter);

        public static readonly Type SetterType = typeof(IAIPackage);

        public static readonly Type CommonType = typeof(AIPackageCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackage";

        public const string Name = "AIPackage";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)AIPackage_FieldIndex.Flags;
                case "GENERALTYPE":
                    return (ushort)AIPackage_FieldIndex.GeneralType;
                case "LOCATION":
                    return (ushort)AIPackage_FieldIndex.Location;
                case "SCHEDULE":
                    return (ushort)AIPackage_FieldIndex.Schedule;
                case "TARGET":
                    return (ushort)AIPackage_FieldIndex.Target;
                case "CONDITIONS":
                    return (ushort)AIPackage_FieldIndex.Conditions;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Conditions:
                    return true;
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                    return true;
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return "Flags";
                case AIPackage_FieldIndex.GeneralType:
                    return "GeneralType";
                case AIPackage_FieldIndex.Location:
                    return "Location";
                case AIPackage_FieldIndex.Schedule:
                    return "Schedule";
                case AIPackage_FieldIndex.Target:
                    return "Target";
                case AIPackage_FieldIndex.Conditions:
                    return "Conditions";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return typeof(AIPackage.Flag);
                case AIPackage_FieldIndex.GeneralType:
                    return typeof(AIPackage.GeneralTypeEnum);
                case AIPackage_FieldIndex.Location:
                    return typeof(AIPackageLocation);
                case AIPackage_FieldIndex.Schedule:
                    return typeof(AIPackageSchedule);
                case AIPackage_FieldIndex.Target:
                    return typeof(AIPackageTarget);
                case AIPackage_FieldIndex.Conditions:
                    return typeof(NotifyingList<Condition>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType PKDT_HEADER = new RecordType("PKDT");
        public static readonly RecordType PLDT_HEADER = new RecordType("PLDT");
        public static readonly RecordType PSDT_HEADER = new RecordType("PSDT");
        public static readonly RecordType PTDT_HEADER = new RecordType("PTDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PACK_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AIPackageCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAIPackage item,
            IAIPackageGetter rhs,
            IAIPackageGetter def,
            ErrorMaskBuilder errorMask,
            AIPackage_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)AIPackage_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.GeneralType ?? true)
            {
                errorMask.PushIndex((int)AIPackage_FieldIndex.GeneralType);
                try
                {
                    item.GeneralType_Property.Set(
                        value: rhs.GeneralType,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Location.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)AIPackage_FieldIndex.Location);
                try
                {
                    item.Location_Property.SetToWithDefault(
                        rhs.Location_Property,
                        def?.Location_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Location.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    AIPackageLocationCommon.CopyFieldsFrom(
                                        item: item.Location,
                                        rhs: rhs.Location,
                                        def: def?.Location,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Location.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(AIPackageLocation);
                                    return AIPackageLocation.Copy(
                                        r,
                                        copyMask?.Location?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Location?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Schedule.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)AIPackage_FieldIndex.Schedule);
                try
                {
                    item.Schedule_Property.SetToWithDefault(
                        rhs.Schedule_Property,
                        def?.Schedule_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Schedule.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    AIPackageScheduleCommon.CopyFieldsFrom(
                                        item: item.Schedule,
                                        rhs: rhs.Schedule,
                                        def: def?.Schedule,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Schedule.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(AIPackageSchedule);
                                    return AIPackageSchedule.Copy(
                                        r,
                                        copyMask?.Schedule?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Schedule?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Target.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)AIPackage_FieldIndex.Target);
                try
                {
                    item.Target_Property.SetToWithDefault(
                        rhs.Target_Property,
                        def?.Target_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Target.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    AIPackageTargetCommon.CopyFieldsFrom(
                                        item: item.Target,
                                        rhs: rhs.Target,
                                        def: def?.Target,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Target.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(AIPackageTarget);
                                    return AIPackageTarget.Copy(
                                        r,
                                        copyMask?.Target?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Target?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)AIPackage_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Condition);
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAIPackage obj,
            NotifyingFireParameters cmds = null)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case AIPackage_FieldIndex.Location:
                    obj.Location_Property.HasBeenSet = on;
                    break;
                case AIPackage_FieldIndex.Schedule:
                    obj.Schedule_Property.HasBeenSet = on;
                    break;
                case AIPackage_FieldIndex.Target:
                    obj.Target_Property.HasBeenSet = on;
                    break;
                case AIPackage_FieldIndex.Conditions:
                    obj.Conditions.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAIPackage obj,
            NotifyingUnsetParameters cmds = null)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    obj.Flags = default(AIPackage.Flag);
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    obj.GeneralType = default(AIPackage.GeneralTypeEnum);
                    break;
                case AIPackage_FieldIndex.Location:
                    obj.Location_Property.Unset(cmds);
                    break;
                case AIPackage_FieldIndex.Schedule:
                    obj.Schedule_Property.Unset(cmds);
                    break;
                case AIPackage_FieldIndex.Target:
                    obj.Target_Property.Unset(cmds);
                    break;
                case AIPackage_FieldIndex.Conditions:
                    obj.Conditions.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAIPackage obj)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                    return true;
                case AIPackage_FieldIndex.Location:
                    return obj.Location_Property.HasBeenSet;
                case AIPackage_FieldIndex.Schedule:
                    return obj.Schedule_Property.HasBeenSet;
                case AIPackage_FieldIndex.Target:
                    return obj.Target_Property.HasBeenSet;
                case AIPackage_FieldIndex.Conditions:
                    return obj.Conditions.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IAIPackageGetter obj)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return obj.Flags;
                case AIPackage_FieldIndex.GeneralType:
                    return obj.GeneralType;
                case AIPackage_FieldIndex.Location:
                    return obj.Location;
                case AIPackage_FieldIndex.Schedule:
                    return obj.Schedule;
                case AIPackage_FieldIndex.Target:
                    return obj.Target;
                case AIPackage_FieldIndex.Conditions:
                    return obj.Conditions;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IAIPackage item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Flags = default(AIPackage.Flag);
            item.GeneralType = default(AIPackage.GeneralTypeEnum);
            item.Location_Property.Unset(cmds.ToUnsetParams());
            item.Schedule_Property.Unset(cmds.ToUnsetParams());
            item.Target_Property.Unset(cmds.ToUnsetParams());
            item.Conditions.Unset(cmds.ToUnsetParams());
        }

        public static AIPackage_Mask<bool> GetEqualsMask(
            this IAIPackageGetter item,
            IAIPackageGetter rhs)
        {
            var ret = new AIPackage_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAIPackageGetter item,
            IAIPackageGetter rhs,
            AIPackage_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.GeneralType = item.GeneralType == rhs.GeneralType;
            ret.Location = item.Location_Property.LoquiEqualsHelper(rhs.Location_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Schedule = item.Schedule_Property.LoquiEqualsHelper(rhs.Schedule_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Target = item.Target_Property.LoquiEqualsHelper(rhs.Target_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.Conditions.HasBeenSet == rhs.Conditions.HasBeenSet)
            {
                if (item.Conditions.HasBeenSet)
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Specific = item.Conditions.SelectAgainst<Condition, MaskItem<bool, Condition_Mask<bool>>>(rhs.Conditions, ((l, r) =>
                    {
                        MaskItem<bool, Condition_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Conditions.Overall);
                    ret.Conditions.Overall = ret.Conditions.Overall && ret.Conditions.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Overall = true;
                }
            }
            else
            {
                ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                ret.Conditions.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IAIPackageGetter item,
            string name = null,
            AIPackage_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAIPackageGetter item,
            FileGeneration fg,
            string name = null,
            AIPackage_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(AIPackage)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(AIPackage)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.GeneralType ?? true)
                {
                    fg.AppendLine($"GeneralType => {item.GeneralType}");
                }
                if (printMask?.Location?.Overall ?? true)
                {
                    item.Location?.ToString(fg, "Location");
                }
                if (printMask?.Schedule?.Overall ?? true)
                {
                    item.Schedule?.ToString(fg, "Schedule");
                }
                if (printMask?.Target?.Overall ?? true)
                {
                    item.Target?.ToString(fg, "Target");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Conditions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAIPackageGetter item,
            AIPackage_Mask<bool?> checkMask)
        {
            if (checkMask.Location.Overall.HasValue && checkMask.Location.Overall.Value != item.Location_Property.HasBeenSet) return false;
            if (checkMask.Location.Specific != null && (item.Location == null || !item.Location.HasBeenSet(checkMask.Location.Specific))) return false;
            if (checkMask.Schedule.Overall.HasValue && checkMask.Schedule.Overall.Value != item.Schedule_Property.HasBeenSet) return false;
            if (checkMask.Schedule.Specific != null && (item.Schedule == null || !item.Schedule.HasBeenSet(checkMask.Schedule.Specific))) return false;
            if (checkMask.Target.Overall.HasValue && checkMask.Target.Overall.Value != item.Target_Property.HasBeenSet) return false;
            if (checkMask.Target.Specific != null && (item.Target == null || !item.Target.HasBeenSet(checkMask.Target.Specific))) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            return true;
        }

        public static AIPackage_Mask<bool> GetHasBeenSetMask(IAIPackageGetter item)
        {
            var ret = new AIPackage_Mask<bool>();
            ret.Flags = true;
            ret.GeneralType = true;
            ret.Location = new MaskItem<bool, AIPackageLocation_Mask<bool>>(item.Location_Property.HasBeenSet, AIPackageLocationCommon.GetHasBeenSetMask(item.Location));
            ret.Schedule = new MaskItem<bool, AIPackageSchedule_Mask<bool>>(item.Schedule_Property.HasBeenSet, AIPackageScheduleCommon.GetHasBeenSetMask(item.Schedule));
            ret.Target = new MaskItem<bool, AIPackageTarget_Mask<bool>>(item.Target_Property.HasBeenSet, AIPackageTargetCommon.GetHasBeenSetMask(item.Target));
            ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.Select((i) => new MaskItem<bool, Condition_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static AIPackage_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static AIPackage_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (AIPackage_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            AIPackage item,
            bool doMasks,
            out AIPackage_ErrorMask errorMask,
            AIPackage_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            AIPackage item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AIPackage");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AIPackage");
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<AIPackage.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)AIPackage_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.GeneralType) ?? true))
            {
                EnumXmlTranslation<AIPackage.GeneralTypeEnum>.Instance.Write(
                    node: elem,
                    name: nameof(item.GeneralType),
                    item: item.GeneralType_Property,
                    fieldIndex: (int)AIPackage_FieldIndex.GeneralType,
                    errorMask: errorMask);
            }
            if (item.Location_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Location) ?? true))
            {
                LoquiXmlTranslation<AIPackageLocation>.Instance.Write(
                    node: elem,
                    item: item.Location_Property,
                    name: nameof(item.Location),
                    fieldIndex: (int)AIPackage_FieldIndex.Location,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            if (item.Schedule_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Schedule) ?? true))
            {
                LoquiXmlTranslation<AIPackageSchedule>.Instance.Write(
                    node: elem,
                    item: item.Schedule_Property,
                    name: nameof(item.Schedule),
                    fieldIndex: (int)AIPackage_FieldIndex.Schedule,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            if (item.Target_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Target) ?? true))
            {
                LoquiXmlTranslation<AIPackageTarget>.Instance.Write(
                    node: elem,
                    item: item.Target_Property,
                    name: nameof(item.Target),
                    fieldIndex: (int)AIPackage_FieldIndex.Target,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<Condition>.Instance.Write(
                    node: elem,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)AIPackage_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Conditions),
                    transl: (XElement subNode, Condition subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Condition>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            AIPackage item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out AIPackage_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = AIPackage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            AIPackage item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AIPackage_Registration.PACK_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            AIPackage item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(AIPackage_Registration.PKDT_HEADER)))
            {
                AIPackage.WriteBinary_Flags(
                    writer: writer,
                    item: item,
                    errorMask: errorMask);
                AIPackage.WriteBinary_GeneralType(
                    writer: writer,
                    item: item,
                    errorMask: errorMask);
            }
            LoquiBinaryTranslation<AIPackageLocation>.Instance.Write(
                writer: writer,
                item: item.Location_Property,
                fieldIndex: (int)AIPackage_FieldIndex.Location,
                errorMask: errorMask);
            LoquiBinaryTranslation<AIPackageSchedule>.Instance.Write(
                writer: writer,
                item: item.Schedule_Property,
                fieldIndex: (int)AIPackage_FieldIndex.Schedule,
                errorMask: errorMask);
            LoquiBinaryTranslation<AIPackageTarget>.Instance.Write(
                writer: writer,
                item: item.Target_Property,
                fieldIndex: (int)AIPackage_FieldIndex.Target,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                fieldIndex: (int)AIPackage_FieldIndex.Conditions,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<Condition>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class AIPackage_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<AIPackage_Mask<T>>
    {
        #region Ctors
        public AIPackage_Mask()
        {
        }

        public AIPackage_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.GeneralType = initialValue;
            this.Location = new MaskItem<T, AIPackageLocation_Mask<T>>(initialValue, new AIPackageLocation_Mask<T>(initialValue));
            this.Schedule = new MaskItem<T, AIPackageSchedule_Mask<T>>(initialValue, new AIPackageSchedule_Mask<T>(initialValue));
            this.Target = new MaskItem<T, AIPackageTarget_Mask<T>>(initialValue, new AIPackageTarget_Mask<T>(initialValue));
            this.Conditions = new MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Flags;
        public T GeneralType;
        public MaskItem<T, AIPackageLocation_Mask<T>> Location { get; set; }
        public MaskItem<T, AIPackageSchedule_Mask<T>> Schedule { get; set; }
        public MaskItem<T, AIPackageTarget_Mask<T>> Target { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>> Conditions;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AIPackage_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AIPackage_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.GeneralType, rhs.GeneralType)) return false;
            if (!object.Equals(this.Location, rhs.Location)) return false;
            if (!object.Equals(this.Schedule, rhs.Schedule)) return false;
            if (!object.Equals(this.Target, rhs.Target)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.GeneralType?.GetHashCode());
            ret = ret.CombineHashCode(this.Location?.GetHashCode());
            ret = ret.CombineHashCode(this.Schedule?.GetHashCode());
            ret = ret.CombineHashCode(this.Target?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.GeneralType)) return false;
            if (Location != null)
            {
                if (!eval(this.Location.Overall)) return false;
                if (this.Location.Specific != null && !this.Location.Specific.AllEqual(eval)) return false;
            }
            if (Schedule != null)
            {
                if (!eval(this.Schedule.Overall)) return false;
                if (this.Schedule.Specific != null && !this.Schedule.Specific.AllEqual(eval)) return false;
            }
            if (Target != null)
            {
                if (!eval(this.Target.Overall)) return false;
                if (this.Target.Specific != null && !this.Target.Specific.AllEqual(eval)) return false;
            }
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new AIPackage_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AIPackage_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AIPackage_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Flags = eval(this.Flags);
            obj.GeneralType = eval(this.GeneralType);
            if (this.Location != null)
            {
                obj.Location = new MaskItem<R, AIPackageLocation_Mask<R>>();
                obj.Location.Overall = eval(this.Location.Overall);
                if (this.Location.Specific != null)
                {
                    obj.Location.Specific = this.Location.Specific.Translate(eval);
                }
            }
            if (this.Schedule != null)
            {
                obj.Schedule = new MaskItem<R, AIPackageSchedule_Mask<R>>();
                obj.Schedule.Overall = eval(this.Schedule.Overall);
                if (this.Schedule.Specific != null)
                {
                    obj.Schedule.Specific = this.Schedule.Specific.Translate(eval);
                }
            }
            if (this.Target != null)
            {
                obj.Target = new MaskItem<R, AIPackageTarget_Mask<R>>();
                obj.Target.Overall = eval(this.Target.Overall);
                if (this.Target.Specific != null)
                {
                    obj.Target.Specific = this.Target.Specific.Translate(eval);
                }
            }
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItem<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItem<R, Condition_Mask<R>>> l = new List<MaskItem<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific)
                    {
                        MaskItem<R, Condition_Mask<R>> mask = default(MaskItem<R, Condition_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Condition_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Conditions.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AIPackage_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AIPackage_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AIPackage_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.GeneralType ?? true)
                {
                    fg.AppendLine($"GeneralType => {GeneralType}");
                }
                if (printMask?.Location?.Overall ?? true)
                {
                    Location?.ToString(fg);
                }
                if (printMask?.Schedule?.Overall ?? true)
                {
                    Schedule?.ToString(fg);
                }
                if (printMask?.Target?.Overall ?? true)
                {
                    Target?.ToString(fg);
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AIPackage_ErrorMask : MajorRecord_ErrorMask, IErrorMask<AIPackage_ErrorMask>
    {
        #region Members
        public Exception Flags;
        public Exception GeneralType;
        public MaskItem<Exception, AIPackageLocation_ErrorMask> Location;
        public MaskItem<Exception, AIPackageSchedule_ErrorMask> Schedule;
        public MaskItem<Exception, AIPackageTarget_ErrorMask> Target;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return Flags;
                case AIPackage_FieldIndex.GeneralType:
                    return GeneralType;
                case AIPackage_FieldIndex.Location:
                    return Location;
                case AIPackage_FieldIndex.Schedule:
                    return Schedule;
                case AIPackage_FieldIndex.Target:
                    return Target;
                case AIPackage_FieldIndex.Conditions:
                    return Conditions;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    this.GeneralType = ex;
                    break;
                case AIPackage_FieldIndex.Location:
                    this.Location = new MaskItem<Exception, AIPackageLocation_ErrorMask>(ex, null);
                    break;
                case AIPackage_FieldIndex.Schedule:
                    this.Schedule = new MaskItem<Exception, AIPackageSchedule_ErrorMask>(ex, null);
                    break;
                case AIPackage_FieldIndex.Target:
                    this.Target = new MaskItem<Exception, AIPackageTarget_ErrorMask>(ex, null);
                    break;
                case AIPackage_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case AIPackage_FieldIndex.GeneralType:
                    this.GeneralType = (Exception)obj;
                    break;
                case AIPackage_FieldIndex.Location:
                    this.Location = (MaskItem<Exception, AIPackageLocation_ErrorMask>)obj;
                    break;
                case AIPackage_FieldIndex.Schedule:
                    this.Schedule = (MaskItem<Exception, AIPackageSchedule_ErrorMask>)obj;
                    break;
                case AIPackage_FieldIndex.Target:
                    this.Target = (MaskItem<Exception, AIPackageTarget_ErrorMask>)obj;
                    break;
                case AIPackage_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (GeneralType != null) return true;
            if (Location != null) return true;
            if (Schedule != null) return true;
            if (Target != null) return true;
            if (Conditions != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("AIPackage_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"GeneralType => {GeneralType}");
            Location?.ToString(fg);
            Schedule?.ToString(fg);
            Target?.ToString(fg);
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public AIPackage_ErrorMask Combine(AIPackage_ErrorMask rhs)
        {
            var ret = new AIPackage_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.GeneralType = this.GeneralType.Combine(rhs.GeneralType);
            ret.Location = new MaskItem<Exception, AIPackageLocation_ErrorMask>(this.Location.Overall.Combine(rhs.Location.Overall), ((IErrorMask<AIPackageLocation_ErrorMask>)this.Location.Specific).Combine(rhs.Location.Specific));
            ret.Schedule = new MaskItem<Exception, AIPackageSchedule_ErrorMask>(this.Schedule.Overall.Combine(rhs.Schedule.Overall), ((IErrorMask<AIPackageSchedule_ErrorMask>)this.Schedule.Specific).Combine(rhs.Schedule.Specific));
            ret.Target = new MaskItem<Exception, AIPackageTarget_ErrorMask>(this.Target.Overall.Combine(rhs.Target.Overall), ((IErrorMask<AIPackageTarget_ErrorMask>)this.Target.Specific).Combine(rhs.Target.Specific));
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            return ret;
        }
        public static AIPackage_ErrorMask Combine(AIPackage_ErrorMask lhs, AIPackage_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AIPackage_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AIPackage_ErrorMask();
        }
        #endregion

    }
    public class AIPackage_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Flags;
        public bool GeneralType;
        public MaskItem<CopyOption, AIPackageLocation_CopyMask> Location;
        public MaskItem<CopyOption, AIPackageSchedule_CopyMask> Schedule;
        public MaskItem<CopyOption, AIPackageTarget_CopyMask> Target;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        #endregion

    }
    public class AIPackage_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Flags;
        public bool GeneralType;
        public MaskItem<bool, AIPackageLocation_TranslationMask> Location;
        public MaskItem<bool, AIPackageSchedule_TranslationMask> Schedule;
        public MaskItem<bool, AIPackageTarget_TranslationMask> Target;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Flags, null));
            ret.Add((GeneralType, null));
            ret.Add((Location?.Overall ?? true, Location?.Specific?.GetCrystal()));
            ret.Add((Schedule?.Overall ?? true, Schedule?.Specific?.GetCrystal()));
            ret.Add((Target?.Overall ?? true, Target?.Specific?.GetCrystal()));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
        }
    }
    #endregion





    #endregion

}
