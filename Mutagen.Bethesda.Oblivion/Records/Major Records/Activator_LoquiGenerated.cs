/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Activator :
        OblivionMajorRecord,
        IActivatorInternal,
        ILoquiObjectSetter<Activator>,
        INamed,
        ILinkSubContainer,
        IEquatable<Activator>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Activator_Registration.Instance;
        public new static Activator_Registration Registration => Activator_Registration.Instance;
        protected override object CommonInstance => ActivatorCommon.Instance;

        #region Ctor
        protected Activator()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Activator_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Activator_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IActivatorGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IActivatorGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Activator_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Activator_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Activator_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool IActivatorGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, hasBeenSet, (int)Activator_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IActivatorGetter.Model => this.Model;
        #endregion
        #region Script
        public IFormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Script> IActivator.Script_Property => this.Script_Property;
        IScriptInternalGetter IActivatorGetter.Script => this.Script_Property.Item;
        IFormIDSetLinkGetter<Script> IActivatorGetter.Script_Property => this.Script_Property;
        #endregion
        #region Sound
        public IFormIDSetLink<Sound> Sound_Property { get; } = new FormIDSetLink<Sound>();
        public Sound Sound { get => Sound_Property.Item; set => Sound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Sound> IActivator.Sound_Property => this.Sound_Property;
        ISoundInternalGetter IActivatorGetter.Sound => this.Sound_Property.Item;
        IFormIDSetLinkGetter<Sound> IActivatorGetter.Sound_Property => this.Sound_Property;
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IActivatorInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ActivatorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Activator rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Activator rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!string.Equals(this.Name, rhs.Name)) return false;
            }
            if (Model_IsSet != rhs.Model_IsSet) return false;
            if (Model_IsSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (Sound_Property.HasBeenSet != rhs.Sound_Property.HasBeenSet) return false;
            if (Sound_Property.HasBeenSet)
            {
                if (!this.Sound_Property.Equals(rhs.Sound_Property)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Model_IsSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Sound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sound).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override object XmlWriteTranslator => ActivatorXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Activator CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Activator_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Activator CreateFromXml(
            XElement node,
            out Activator_ErrorMask errorMask,
            bool doMasks = true,
            Activator_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Activator_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Activator CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Activator() : null;
                    break;
                default:
                    break;
            }
            var ret = new Activator();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ActivatorXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Activator CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Activator_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Activator CreateFromXml(
            string path,
            out Activator_ErrorMask errorMask,
            Activator_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Activator CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Activator_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Activator CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Activator_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Activator CreateFromXml(
            Stream stream,
            out Activator_ErrorMask errorMask,
            Activator_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Activator CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Activator_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Activator item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Activator_FieldIndex)index)
            {
                case Activator_FieldIndex.Name:
                case Activator_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case Activator_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Activator_FieldIndex.Sound:
                    return Sound_Property.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Activator_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Sound_Property;
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            Script_Property.Link(
                modList,
                sourceMod);
            Sound_Property.Link(
                modList,
                sourceMod);
        }

        public Activator(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Activator(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(Activator obj, Activator rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Activator(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => ActivatorBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Activator CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Activator CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Activator_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Activator_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Activator CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Activator>(
                record: new Activator(),
                frame: frame,
                errorMask: errorMask,
                recType: Activator_Registration.ACTI_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Activator item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Activator item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Activator_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Activator_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Activator_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property);
                    return TryGet<int?>.Succeed((int)Activator_FieldIndex.Script);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Sound_Property);
                    return TryGet<int?>.Succeed((int)Activator_FieldIndex.Sound);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Activator Copy(
            Activator_CopyMask copyMask = null,
            Activator def = null)
        {
            return Activator.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Activator Copy(
            Activator item,
            Activator_CopyMask copyMask = null,
            Activator def = null)
        {
            Activator ret;
            if (item.GetType().Equals(typeof(Activator)))
            {
                ret = new Activator();
            }
            else
            {
                ret = (Activator)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Activator Copy_ToLoqui(
            Activator item,
            Activator_CopyMask copyMask = null,
            Activator def = null)
        {
            Activator ret;
            if (item.GetType().Equals(typeof(Activator)))
            {
                ret = new Activator() as Activator;
            }
            else
            {
                ret = (Activator)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Activator rhs,
            Activator_CopyMask copyMask,
            Activator def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Activator rhs,
            out Activator_ErrorMask errorMask,
            Activator_CopyMask copyMask = null,
            Activator def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ActivatorCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Activator_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Activator rhs,
            ErrorMaskBuilder errorMask,
            Activator_CopyMask copyMask = null,
            Activator def = null)
        {
            ActivatorCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Activator_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Activator_FieldIndex.Script:
                    this.Script_Property.Set((IFormIDSetLink<Script>)obj);
                    break;
                case Activator_FieldIndex.Sound:
                    this.Sound_Property.Set((IFormIDSetLink<Sound>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            ActivatorCommon.Instance.Clear(this);
        }

        public new static Activator Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Activator();
            foreach (var pair in fields)
            {
                CopyInInternal_Activator(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Activator(Activator obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Activator_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Activator_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Activator_FieldIndex.Script:
                    obj.Script_Property.Set((IFormIDSetLink<Script>)pair.Value);
                    break;
                case Activator_FieldIndex.Sound:
                    obj.Sound_Property.Set((IFormIDSetLink<Sound>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IActivator :
        IActivatorInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IActivatorInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Sound Sound { get; set; }
        new IFormIDSetLink<Sound> Sound_Property { get; }
        void CopyFieldsFrom(
            Activator rhs,
            ErrorMaskBuilder errorMask = null,
            Activator_CopyMask copyMask = null,
            Activator def = null);
    }

    public partial interface IActivatorInternal :
        IOblivionMajorRecordInternal,
        IActivator,
        IActivatorInternalGetter
    {
        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Sound Sound { get; set; }
        new IFormIDSetLink<Sound> Sound_Property { get; }
    }

    public partial interface IActivatorGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IActivatorInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Script
        IScriptInternalGetter Script { get; }
        IFormIDSetLinkGetter<Script> Script_Property { get; }

        #endregion
        #region Sound
        ISoundInternalGetter Sound { get; }
        IFormIDSetLinkGetter<Sound> Sound_Property { get; }

        #endregion

    }

    public partial interface IActivatorInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IActivatorGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class ActivatorMixIn
    {
        public static void Clear(this IActivatorInternal item)
        {
            ((ActivatorCommon)item.CommonInstance).Clear(item: item);
        }

        public static Activator_Mask<bool> GetEqualsMask(
            this IActivatorInternalGetter item,
            IActivatorInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ActivatorCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IActivatorInternalGetter item,
            string name = null,
            Activator_Mask<bool> printMask = null)
        {
            return ((ActivatorCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IActivatorInternalGetter item,
            FileGeneration fg,
            string name = null,
            Activator_Mask<bool> printMask = null)
        {
            ((ActivatorCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IActivatorInternalGetter item,
            Activator_Mask<bool?> checkMask)
        {
            return ((ActivatorCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Activator_Mask<bool> GetHasBeenSetMask(this IActivatorInternalGetter item)
        {
            var ret = new Activator_Mask<bool>();
            ((ActivatorCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Activator_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        Sound = 8,
    }
    #endregion

    #region Registration
    public class Activator_Registration : ILoquiRegistration
    {
        public static readonly Activator_Registration Instance = new Activator_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 65,
            version: 0);

        public const string GUID = "4c83cb95-a21f-4772-be1a-c0a60582e80f";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(Activator_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Activator_ErrorMask);

        public static readonly Type ClassType = typeof(Activator);

        public static readonly Type GetterType = typeof(IActivatorGetter);

        public static readonly Type InternalGetterType = typeof(IActivatorInternalGetter);

        public static readonly Type SetterType = typeof(IActivator);

        public static readonly Type InternalSetterType = typeof(IActivatorInternal);

        public static readonly Type CommonType = typeof(ActivatorCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Activator";

        public const string Name = "Activator";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Activator_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Activator_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Activator_FieldIndex.Script;
                case "SOUND":
                    return (ushort)Activator_FieldIndex.Sound;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                case Activator_FieldIndex.Model:
                case Activator_FieldIndex.Script:
                case Activator_FieldIndex.Sound:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Model:
                    return true;
                case Activator_FieldIndex.Name:
                case Activator_FieldIndex.Script:
                case Activator_FieldIndex.Sound:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                case Activator_FieldIndex.Model:
                case Activator_FieldIndex.Script:
                case Activator_FieldIndex.Sound:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                    return "Name";
                case Activator_FieldIndex.Model:
                    return "Model";
                case Activator_FieldIndex.Script:
                    return "Script";
                case Activator_FieldIndex.Sound:
                    return "Sound";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                case Activator_FieldIndex.Model:
                case Activator_FieldIndex.Script:
                case Activator_FieldIndex.Sound:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                case Activator_FieldIndex.Model:
                case Activator_FieldIndex.Script:
                case Activator_FieldIndex.Sound:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                    return typeof(String);
                case Activator_FieldIndex.Model:
                    return typeof(Model);
                case Activator_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Activator_FieldIndex.Sound:
                    return typeof(IFormIDSetLink<Sound>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ActivatorXmlWriteTranslation);
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ACTI_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(ActivatorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ActivatorCommon : OblivionMajorRecordCommon
    {
        public static readonly ActivatorCommon Instance = new ActivatorCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Activator item,
            Activator rhs,
            Activator def,
            ErrorMaskBuilder errorMask,
            Activator_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetLink(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sound ?? true)
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Sound);
                try
                {
                    item.Sound_Property.SetLink(
                        rhs: rhs.Sound_Property,
                        def: def?.Sound_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IActivatorInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Model_Unset();
            item.Script_Property.Unset();
            item.Sound_Property.Unset();
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IActivatorInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IActivatorInternal)item);
        }

        public Activator_Mask<bool> GetEqualsMask(
            IActivatorInternalGetter item,
            IActivatorInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Activator_Mask<bool>();
            ((ActivatorCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IActivatorInternalGetter item,
            IActivatorInternalGetter rhs,
            Activator_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.Sound = item.Sound_Property.FormKey == rhs.Sound_Property.FormKey;
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IActivatorInternalGetter item,
            string name = null,
            Activator_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IActivatorInternalGetter item,
            FileGeneration fg,
            string name = null,
            Activator_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Activator =>");
            }
            else
            {
                fg.AppendLine($"{name} (Activator) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IActivatorInternalGetter item,
            FileGeneration fg,
            Activator_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script_Property}");
            }
            if (printMask?.Sound ?? true)
            {
                fg.AppendLine($"Sound => {item.Sound_Property}");
            }
        }

        public bool HasBeenSet(
            IActivatorInternalGetter item,
            Activator_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Sound.HasValue && checkMask.Sound.Value != item.Sound_Property.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IActivatorInternalGetter item,
            Activator_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Script = item.Script_Property.HasBeenSet;
            mask.Sound = item.Sound_Property.HasBeenSet;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Activator_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Activator_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Activator_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Activator_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Activator_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Activator_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Activator_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Activator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Activator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Activator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Activator_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ActivatorXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ActivatorXmlWriteTranslation Instance = new ActivatorXmlWriteTranslation();

        public static void WriteToNodeXml(
            IActivatorInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Activator_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Activator_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Activator_FieldIndex.Model) ?? true))
            {
                ((ModelXmlWriteTranslation)((IXmlItem)item.Model).XmlWriteTranslator).Write(
                    item: item.Model,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Activator_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Activator_FieldIndex.Model));
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Activator_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)Activator_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Sound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Activator_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound_Property?.FormKey,
                    fieldIndex: (int)Activator_FieldIndex.Sound,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IActivatorInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Activator");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Activator");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IActivatorInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IActivatorInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IActivatorInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ActivatorXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static ActivatorXmlCreateTranslation Instance = new ActivatorXmlCreateTranslation();

        public static void FillPublicXml(
            IActivatorInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ActivatorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IActivatorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Activator_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Activator_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Activator_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)Activator_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Sound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Sound_Property,
                        fieldIndex: (int)Activator_FieldIndex.Sound,
                        errorMask: errorMask);
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class ActivatorXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IActivatorInternalGetter item,
            XElement node,
            out Activator_ErrorMask errorMask,
            bool doMasks = true,
            Activator_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ActivatorXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Activator_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IActivatorInternalGetter item,
            string path,
            out Activator_ErrorMask errorMask,
            Activator_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IActivatorInternalGetter item,
            Stream stream,
            out Activator_ErrorMask errorMask,
            Activator_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Activator_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Activator_Mask<T>>
    {
        #region Ctors
        public Activator_Mask()
        {
        }

        public Activator_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Script = initialValue;
            this.Sound = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Script;
        public T Sound;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Activator_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Activator_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Script)) return false;
            if (!eval(this.Sound)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Activator_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Activator_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Activator_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Script = eval(this.Script);
            obj.Sound = eval(this.Sound);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Activator_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Activator_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Activator_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Activator_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Activator_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Script;
        public Exception Sound;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                    return Name;
                case Activator_FieldIndex.Model:
                    return Model;
                case Activator_FieldIndex.Script:
                    return Script;
                case Activator_FieldIndex.Sound:
                    return Sound;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Activator_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Activator_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Activator_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Activator_FieldIndex enu = (Activator_FieldIndex)index;
            switch (enu)
            {
                case Activator_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Activator_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Activator_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Activator_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Script != null) return true;
            if (Sound != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Activator_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Sound => {Sound}");
        }
        #endregion

        #region Combine
        public Activator_ErrorMask Combine(Activator_ErrorMask rhs)
        {
            var ret = new Activator_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Sound = this.Sound.Combine(rhs.Sound);
            return ret;
        }
        public static Activator_ErrorMask Combine(Activator_ErrorMask lhs, Activator_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Activator_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Activator_ErrorMask();
        }
        #endregion

    }
    public class Activator_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Activator_CopyMask()
        {
        }

        public Activator_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Script = defaultOn;
            this.Sound = defaultOn;
        }

        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Script;
        public bool Sound;
        #endregion

    }

    public class Activator_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Script;
        public bool Sound;
        #endregion

        #region Ctors
        public Activator_TranslationMask()
            : base()
        {
        }

        public Activator_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Script = defaultOn;
            this.Sound = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Script, null));
            ret.Add((Sound, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ActivatorBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ActivatorBinaryWriteTranslation Instance = new ActivatorBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IActivatorInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Activator_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)item.Model).BinaryWriteTranslator).Write(
                    item: item.Model,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    header: recordTypeConverter.ConvertToCustom(Activator_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Sound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound_Property,
                    header: recordTypeConverter.ConvertToCustom(Activator_Registration.SNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            IActivatorInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Activator_Registration.ACTI_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IActivatorInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IActivatorInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IActivatorInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ActivatorBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static ActivatorBinaryCreateTranslation Instance = new ActivatorBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class ActivatorBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IActivatorInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Activator_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ActivatorBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Activator_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
