/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AlchemicalApparatus : NamedMajorRecord, IAlchemicalApparatus, ILoquiObject<AlchemicalApparatus>, ILoquiObjectSetter, IEquatable<AlchemicalApparatus>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlchemicalApparatus_Registration.Instance;
        public new static AlchemicalApparatus_Registration Registration => AlchemicalApparatus_Registration.Instance;

        #region Ctor
        public AlchemicalApparatus()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _Model = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> Model_Property => this._Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IAlchemicalApparatusGetter.Model => this.Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IAlchemicalApparatus.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IAlchemicalApparatusGetter.Model_Property => this.Model_Property;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _Icon = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> Icon_Property => _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath Icon
        {
            get => this._Icon.Item;
            set => this._Icon.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> IAlchemicalApparatus.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> IAlchemicalApparatusGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> IAlchemicalApparatusGetter.Script_Property => this.Script_Property;
        #endregion
        #region Type
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<AlchemicalApparatus.ApparatusType> _Type = NotifyingItem.Factory<AlchemicalApparatus.ApparatusType>();
        public INotifyingItem<AlchemicalApparatus.ApparatusType> Type_Property => _Type;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AlchemicalApparatus.ApparatusType Type
        {
            get => this._Type.Item;
            set => this._Type.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<AlchemicalApparatus.ApparatusType> IAlchemicalApparatus.Type_Property => this.Type_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<AlchemicalApparatus.ApparatusType> IAlchemicalApparatusGetter.Type_Property => this.Type_Property;
        #endregion
        #region Value
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt32> _Value = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Value_Property => _Value;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Value
        {
            get => this._Value.Item;
            set => this._Value.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IAlchemicalApparatus.Value_Property => this.Value_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IAlchemicalApparatusGetter.Value_Property => this.Value_Property;
        #endregion
        #region Weight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _Weight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Weight_Property => _Weight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Weight
        {
            get => this._Weight.Item;
            set => this._Weight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IAlchemicalApparatus.Weight_Property => this.Weight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IAlchemicalApparatusGetter.Weight_Property => this.Weight_Property;
        #endregion
        #region Quality
        protected INotifyingItem<Single> _Quality = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Quality_Property => _Quality;
        public Single Quality
        {
            get => this._Quality.Item;
            set => this._Quality.Set(value.PutInRange(Quality_Range.Min, Quality_Range.Max));
        }
        INotifyingItem<Single> IAlchemicalApparatus.Quality_Property => this.Quality_Property;
        INotifyingItemGetter<Single> IAlchemicalApparatusGetter.Quality_Property => this.Quality_Property;
        public static RangeFloat Quality_Range = new RangeFloat(0f, 255f);
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => AlchemicalApparatusCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => AlchemicalApparatusCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AlchemicalApparatusCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AlchemicalApparatusCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<AlchemicalApparatus>.GetEqualsMask(AlchemicalApparatus rhs) => AlchemicalApparatusCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAlchemicalApparatusGetter>.GetEqualsMask(IAlchemicalApparatusGetter rhs) => AlchemicalApparatusCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return AlchemicalApparatusCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            AlchemicalApparatus_Mask<bool> printMask = null)
        {
            return AlchemicalApparatusCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            AlchemicalApparatusCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new AlchemicalApparatus_Mask<bool> GetHasBeenSetMask()
        {
            return AlchemicalApparatusCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is AlchemicalApparatus rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AlchemicalApparatus rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(Model, rhs.Model)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(Icon, rhs.Icon)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (Script != rhs.Script) return false;
            }
            if (Type != rhs.Type) return false;
            if (Value != rhs.Value) return false;
            if (Weight != rhs.Weight) return false;
            if (Quality != rhs.Quality) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Quality).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static AlchemicalApparatus Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static AlchemicalApparatus Create_XML(
            XElement root,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static AlchemicalApparatus Create_XML(
            XElement root,
            bool doMasks,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (AlchemicalApparatus Object, AlchemicalApparatus_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            AlchemicalApparatus_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new AlchemicalApparatus_ErrorMask()) : default(Func<AlchemicalApparatus_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static AlchemicalApparatus Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static AlchemicalApparatus Create_XML(
            string path,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static AlchemicalApparatus Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static AlchemicalApparatus Create_XML(
            Stream stream,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<AlchemicalApparatus, AlchemicalApparatus_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out AlchemicalApparatus_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<AlchemicalApparatus, AlchemicalApparatus_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out AlchemicalApparatus_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out AlchemicalApparatus_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out AlchemicalApparatus_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out AlchemicalApparatus_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out AlchemicalApparatus_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (AlchemicalApparatus_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out AlchemicalApparatus_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out AlchemicalApparatus_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            AlchemicalApparatusCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static AlchemicalApparatus Create_XML_Internal(
            XElement root,
            Func<AlchemicalApparatus_ErrorMask> errorMask)
        {
            var ret = new AlchemicalApparatus();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            AlchemicalApparatus item,
            XElement root,
            string name,
            Func<AlchemicalApparatus_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Model":
                    item._Model.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Model,
                        errorMask: errorMask));
                    break;
                case "Icon":
                    item._Icon.SetIfSucceeded(FilePathXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Icon,
                        errorMask: errorMask));
                    break;
                case "Script":
                    item.Script_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Script,
                        errorMask: errorMask));
                    break;
                case "Type":
                    item._Type.SetIfSucceeded(EnumXmlTranslation<AlchemicalApparatus.ApparatusType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Type,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Value":
                    item._Value.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Value,
                        errorMask: errorMask));
                    break;
                case "Weight":
                    item._Weight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Weight,
                        errorMask: errorMask));
                    break;
                case "Quality":
                    item._Quality.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Quality,
                        errorMask: errorMask));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static AlchemicalApparatus Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static AlchemicalApparatus Create_Binary(
            MutagenFrame frame,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static AlchemicalApparatus Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (AlchemicalApparatus Object, AlchemicalApparatus_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            AlchemicalApparatus_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new AlchemicalApparatus_ErrorMask()) : default(Func<AlchemicalApparatus_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static AlchemicalApparatus Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AlchemicalApparatus Create_Binary(
            string path,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static AlchemicalApparatus Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AlchemicalApparatus Create_Binary(
            Stream stream,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<AlchemicalApparatus, AlchemicalApparatus_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out AlchemicalApparatus_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<AlchemicalApparatus, AlchemicalApparatus_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out AlchemicalApparatus_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out AlchemicalApparatus_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out AlchemicalApparatus_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out AlchemicalApparatus_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            errorMask = (AlchemicalApparatus_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            AlchemicalApparatusCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static AlchemicalApparatus Create_Binary_Internal(
            MutagenFrame frame,
            Func<AlchemicalApparatus_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<AlchemicalApparatus, AlchemicalApparatus_ErrorMask, AlchemicalApparatus_FieldIndex>(
                record: new AlchemicalApparatus(),
                frame: frame,
                errorMask: errorMask,
                recType: AlchemicalApparatus_Registration.APPA_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            AlchemicalApparatus item,
            MutagenFrame frame,
            Func<AlchemicalApparatus_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<AlchemicalApparatus_FieldIndex?> Fill_Binary_RecordTypes(
            AlchemicalApparatus item,
            MutagenFrame frame,
            Func<AlchemicalApparatus_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    item._Model.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Model,
                        errorMask: errorMask));
                    return TryGet<AlchemicalApparatus_FieldIndex?>.Succeed(AlchemicalApparatus_FieldIndex.Model);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Icon.SetIfSucceeded(Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Icon,
                        errorMask: errorMask));
                    return TryGet<AlchemicalApparatus_FieldIndex?>.Succeed(AlchemicalApparatus_FieldIndex.Icon);
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Script_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Script,
                        errorMask: errorMask));
                    return TryGet<AlchemicalApparatus_FieldIndex?>.Succeed(AlchemicalApparatus_FieldIndex.Script);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._Type.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<AlchemicalApparatus.ApparatusType>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(1)),
                            fieldIndex: (int)AlchemicalApparatus_FieldIndex.Type,
                            errorMask: errorMask));
                        item._Value.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)AlchemicalApparatus_FieldIndex.Value,
                            errorMask: errorMask));
                        item._Weight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)AlchemicalApparatus_FieldIndex.Weight,
                            errorMask: errorMask));
                        item._Quality.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)AlchemicalApparatus_FieldIndex.Quality,
                            errorMask: errorMask));
                    }
                    return TryGet<AlchemicalApparatus_FieldIndex?>.Succeed(AlchemicalApparatus_FieldIndex.Quality);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => AlchemicalApparatusCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public AlchemicalApparatus Copy(
            AlchemicalApparatus_CopyMask copyMask = null,
            IAlchemicalApparatusGetter def = null)
        {
            return AlchemicalApparatus.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AlchemicalApparatus Copy(
            IAlchemicalApparatus item,
            AlchemicalApparatus_CopyMask copyMask = null,
            IAlchemicalApparatusGetter def = null)
        {
            AlchemicalApparatus ret;
            if (item.GetType().Equals(typeof(AlchemicalApparatus)))
            {
                ret = new AlchemicalApparatus();
            }
            else
            {
                ret = (AlchemicalApparatus)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AlchemicalApparatus Copy_ToLoqui(
            IAlchemicalApparatusGetter item,
            AlchemicalApparatus_CopyMask copyMask = null,
            IAlchemicalApparatusGetter def = null)
        {
            AlchemicalApparatus ret;
            if (item.GetType().Equals(typeof(AlchemicalApparatus)))
            {
                ret = new AlchemicalApparatus() as AlchemicalApparatus;
            }
            else
            {
                ret = (AlchemicalApparatus)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAlchemicalApparatusGetter rhs,
            AlchemicalApparatus_CopyMask copyMask,
            IAlchemicalApparatusGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAlchemicalApparatusGetter rhs,
            out AlchemicalApparatus_ErrorMask errorMask,
            AlchemicalApparatus_CopyMask copyMask = null,
            IAlchemicalApparatusGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AlchemicalApparatus_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new AlchemicalApparatus_ErrorMask();
                }
                return retErrorMask;
            };
            AlchemicalApparatusCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Icon:
                    this._Icon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Type:
                    this._Type.Set(
                        (AlchemicalApparatus.ApparatusType)obj,
                        cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Value:
                    this._Value.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Weight:
                    this._Weight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Quality:
                    this._Quality.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AlchemicalApparatusCommon.Clear(this, cmds);
        }


        public new static AlchemicalApparatus Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AlchemicalApparatus();
            foreach (var pair in fields)
            {
                CopyInInternal_AlchemicalApparatus(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_AlchemicalApparatus(AlchemicalApparatus obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AlchemicalApparatus_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case AlchemicalApparatus_FieldIndex.Icon:
                    obj._Icon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case AlchemicalApparatus_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case AlchemicalApparatus_FieldIndex.Type:
                    obj._Type.Set(
                        (AlchemicalApparatus.ApparatusType)pair.Value,
                        null);
                    break;
                case AlchemicalApparatus_FieldIndex.Value:
                    obj._Value.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case AlchemicalApparatus_FieldIndex.Weight:
                    obj._Weight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case AlchemicalApparatus_FieldIndex.Quality:
                    obj._Quality.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, AlchemicalApparatus obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAlchemicalApparatus : IAlchemicalApparatusGetter, INamedMajorRecord, ILoquiClass<IAlchemicalApparatus, IAlchemicalApparatusGetter>, ILoquiClass<AlchemicalApparatus, IAlchemicalApparatusGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new FilePath Icon { get; set; }
        new INotifyingSetItem<FilePath> Icon_Property { get; }

        new Script Script { get; set; }
        new AlchemicalApparatus.ApparatusType Type { get; set; }
        new INotifyingItem<AlchemicalApparatus.ApparatusType> Type_Property { get; }

        new UInt32 Value { get; set; }
        new INotifyingItem<UInt32> Value_Property { get; }

        new Single Weight { get; set; }
        new INotifyingItem<Single> Weight_Property { get; }

        new Single Quality { get; set; }
        new INotifyingItem<Single> Quality_Property { get; }

    }

    public partial interface IAlchemicalApparatusGetter : INamedMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Icon
        FilePath Icon { get; }
        INotifyingSetItemGetter<FilePath> Icon_Property { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Type
        AlchemicalApparatus.ApparatusType Type { get; }
        INotifyingItemGetter<AlchemicalApparatus.ApparatusType> Type_Property { get; }

        #endregion
        #region Value
        UInt32 Value { get; }
        INotifyingItemGetter<UInt32> Value_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        INotifyingItemGetter<Single> Weight_Property { get; }

        #endregion
        #region Quality
        Single Quality { get; }
        INotifyingItemGetter<Single> Quality_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AlchemicalApparatus_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Type = 9,
        Value = 10,
        Weight = 11,
        Quality = 12,
    }
    #endregion

    #region Registration
    public class AlchemicalApparatus_Registration : ILoquiRegistration
    {
        public static readonly AlchemicalApparatus_Registration Instance = new AlchemicalApparatus_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 66,
            version: 0);

        public const string GUID = "731a9b97-8051-4d72-8008-3e53a96659cd";

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(AlchemicalApparatus_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AlchemicalApparatus_ErrorMask);

        public static readonly Type ClassType = typeof(AlchemicalApparatus);

        public static readonly Type GetterType = typeof(IAlchemicalApparatusGetter);

        public static readonly Type SetterType = typeof(IAlchemicalApparatus);

        public static readonly Type CommonType = typeof(AlchemicalApparatusCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AlchemicalApparatus";

        public const string Name = "AlchemicalApparatus";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)AlchemicalApparatus_FieldIndex.Model;
                case "ICON":
                    return (ushort)AlchemicalApparatus_FieldIndex.Icon;
                case "SCRIPT":
                    return (ushort)AlchemicalApparatus_FieldIndex.Script;
                case "TYPE":
                    return (ushort)AlchemicalApparatus_FieldIndex.Type;
                case "VALUE":
                    return (ushort)AlchemicalApparatus_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)AlchemicalApparatus_FieldIndex.Weight;
                case "QUALITY":
                    return (ushort)AlchemicalApparatus_FieldIndex.Quality;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icon:
                case AlchemicalApparatus_FieldIndex.Script:
                case AlchemicalApparatus_FieldIndex.Type:
                case AlchemicalApparatus_FieldIndex.Value:
                case AlchemicalApparatus_FieldIndex.Weight:
                case AlchemicalApparatus_FieldIndex.Quality:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    return true;
                case AlchemicalApparatus_FieldIndex.Icon:
                case AlchemicalApparatus_FieldIndex.Script:
                case AlchemicalApparatus_FieldIndex.Type:
                case AlchemicalApparatus_FieldIndex.Value:
                case AlchemicalApparatus_FieldIndex.Weight:
                case AlchemicalApparatus_FieldIndex.Quality:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icon:
                case AlchemicalApparatus_FieldIndex.Script:
                case AlchemicalApparatus_FieldIndex.Type:
                case AlchemicalApparatus_FieldIndex.Value:
                case AlchemicalApparatus_FieldIndex.Weight:
                case AlchemicalApparatus_FieldIndex.Quality:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    return "Model";
                case AlchemicalApparatus_FieldIndex.Icon:
                    return "Icon";
                case AlchemicalApparatus_FieldIndex.Script:
                    return "Script";
                case AlchemicalApparatus_FieldIndex.Type:
                    return "Type";
                case AlchemicalApparatus_FieldIndex.Value:
                    return "Value";
                case AlchemicalApparatus_FieldIndex.Weight:
                    return "Weight";
                case AlchemicalApparatus_FieldIndex.Quality:
                    return "Quality";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icon:
                case AlchemicalApparatus_FieldIndex.Script:
                case AlchemicalApparatus_FieldIndex.Type:
                case AlchemicalApparatus_FieldIndex.Value:
                case AlchemicalApparatus_FieldIndex.Weight:
                case AlchemicalApparatus_FieldIndex.Quality:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icon:
                case AlchemicalApparatus_FieldIndex.Script:
                case AlchemicalApparatus_FieldIndex.Type:
                case AlchemicalApparatus_FieldIndex.Value:
                case AlchemicalApparatus_FieldIndex.Weight:
                case AlchemicalApparatus_FieldIndex.Quality:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    return typeof(Model);
                case AlchemicalApparatus_FieldIndex.Icon:
                    return typeof(FilePath);
                case AlchemicalApparatus_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case AlchemicalApparatus_FieldIndex.Type:
                    return typeof(AlchemicalApparatus.ApparatusType);
                case AlchemicalApparatus_FieldIndex.Value:
                    return typeof(UInt32);
                case AlchemicalApparatus_FieldIndex.Weight:
                    return typeof(Single);
                case AlchemicalApparatus_FieldIndex.Quality:
                    return typeof(Single);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = APPA_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AlchemicalApparatusCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAlchemicalApparatus item,
            IAlchemicalApparatusGetter rhs,
            IAlchemicalApparatusGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            AlchemicalApparatus_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Model_ErrorMask();
                                            baseMask.SetNthMask((int)AlchemicalApparatus_FieldIndex.Model, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)AlchemicalApparatus_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)AlchemicalApparatus_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.Script ?? true)
            {
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)AlchemicalApparatus_FieldIndex.Script, ex);
                }
            }
            if (copyMask?.Type ?? true)
            {
                try
                {
                    item.Type_Property.Set(
                        value: rhs.Type,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)AlchemicalApparatus_FieldIndex.Type, ex);
                }
            }
            if (copyMask?.Value ?? true)
            {
                try
                {
                    item.Value_Property.Set(
                        value: rhs.Value,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)AlchemicalApparatus_FieldIndex.Value, ex);
                }
            }
            if (copyMask?.Weight ?? true)
            {
                try
                {
                    item.Weight_Property.Set(
                        value: rhs.Weight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)AlchemicalApparatus_FieldIndex.Weight, ex);
                }
            }
            if (copyMask?.Quality ?? true)
            {
                try
                {
                    item.Quality_Property.Set(
                        value: rhs.Quality,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)AlchemicalApparatus_FieldIndex.Quality, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAlchemicalApparatus obj,
            NotifyingFireParameters cmds = null)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Type:
                case AlchemicalApparatus_FieldIndex.Value:
                case AlchemicalApparatus_FieldIndex.Weight:
                case AlchemicalApparatus_FieldIndex.Quality:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case AlchemicalApparatus_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case AlchemicalApparatus_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case AlchemicalApparatus_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAlchemicalApparatus obj,
            NotifyingUnsetParameters cmds = null)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case AlchemicalApparatus_FieldIndex.Type:
                    obj.Type = default(AlchemicalApparatus.ApparatusType);
                    break;
                case AlchemicalApparatus_FieldIndex.Value:
                    obj.Value = default(UInt32);
                    break;
                case AlchemicalApparatus_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                case AlchemicalApparatus_FieldIndex.Quality:
                    obj.Quality = default(Single);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAlchemicalApparatus obj)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Type:
                case AlchemicalApparatus_FieldIndex.Value:
                case AlchemicalApparatus_FieldIndex.Weight:
                case AlchemicalApparatus_FieldIndex.Quality:
                    return true;
                case AlchemicalApparatus_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case AlchemicalApparatus_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case AlchemicalApparatus_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IAlchemicalApparatusGetter obj)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    return obj.Model;
                case AlchemicalApparatus_FieldIndex.Icon:
                    return obj.Icon;
                case AlchemicalApparatus_FieldIndex.Script:
                    return obj.Script;
                case AlchemicalApparatus_FieldIndex.Type:
                    return obj.Type;
                case AlchemicalApparatus_FieldIndex.Value:
                    return obj.Value;
                case AlchemicalApparatus_FieldIndex.Weight:
                    return obj.Weight;
                case AlchemicalApparatus_FieldIndex.Quality:
                    return obj.Quality;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IAlchemicalApparatus item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Type = default(AlchemicalApparatus.ApparatusType);
            item.Value = default(UInt32);
            item.Weight = default(Single);
            item.Quality = default(Single);
        }

        public static AlchemicalApparatus_Mask<bool> GetEqualsMask(
            this IAlchemicalApparatusGetter item,
            IAlchemicalApparatusGetter rhs)
        {
            var ret = new AlchemicalApparatus_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAlchemicalApparatusGetter item,
            IAlchemicalApparatusGetter rhs,
            AlchemicalApparatus_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Type = item.Type == rhs.Type;
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight == rhs.Weight;
            ret.Quality = item.Quality == rhs.Quality;
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IAlchemicalApparatusGetter item,
            string name = null,
            AlchemicalApparatus_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAlchemicalApparatusGetter item,
            FileGeneration fg,
            string name = null,
            AlchemicalApparatus_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(AlchemicalApparatus)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(AlchemicalApparatus)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
                if (printMask?.Quality ?? true)
                {
                    fg.AppendLine($"Quality => {item.Quality}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAlchemicalApparatusGetter item,
            AlchemicalApparatus_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model_Property.Item == null || !item.Model_Property.Item.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            return true;
        }

        public static AlchemicalApparatus_Mask<bool> GetHasBeenSetMask(IAlchemicalApparatusGetter item)
        {
            var ret = new AlchemicalApparatus_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model_Property.Item));
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Type = true;
            ret.Value = true;
            ret.Weight = true;
            ret.Quality = true;
            return ret;
        }

        public static AlchemicalApparatus_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static AlchemicalApparatus_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static AlchemicalApparatus_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static AlchemicalApparatus_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IAlchemicalApparatusGetter item,
            bool doMasks,
            out AlchemicalApparatus_ErrorMask errorMask,
            string name = null)
        {
            AlchemicalApparatus_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new AlchemicalApparatus_ErrorMask()) : default(Func<AlchemicalApparatus_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IAlchemicalApparatusGetter item,
            Func<AlchemicalApparatus_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.AlchemicalApparatus"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.AlchemicalApparatus");
                    }
                    if (item.Model_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Model_Property,
                            name: nameof(item.Model),
                            fieldIndex: (int)AlchemicalApparatus_FieldIndex.Model,
                            errorMask: errorMask);
                    }
                    if (item.Icon_Property.HasBeenSet)
                    {
                        FilePathXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Icon),
                            item: item.Icon_Property,
                            fieldIndex: (int)AlchemicalApparatus_FieldIndex.Icon,
                            errorMask: errorMask);
                    }
                    if (item.Script_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Script),
                            item: item.Script?.FormID,
                            fieldIndex: (int)AlchemicalApparatus_FieldIndex.Script,
                            errorMask: errorMask);
                    }
                    EnumXmlTranslation<AlchemicalApparatus.ApparatusType>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Type),
                        item: item.Type_Property,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Type,
                        errorMask: errorMask);
                    UInt32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Value),
                        item: item.Value_Property,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Value,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Weight),
                        item: item.Weight_Property,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Weight,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Quality),
                        item: item.Quality_Property,
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Quality,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            AlchemicalApparatus item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out AlchemicalApparatus_ErrorMask errorMask)
        {
            AlchemicalApparatus_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new AlchemicalApparatus_ErrorMask()) : default(Func<AlchemicalApparatus_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            AlchemicalApparatus item,
            RecordTypeConverter recordTypeConverter,
            Func<AlchemicalApparatus_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: AlchemicalApparatus_Registration.APPA_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            AlchemicalApparatus item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<AlchemicalApparatus_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)AlchemicalApparatus_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)AlchemicalApparatus_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(AlchemicalApparatus_Registration.ICON_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)AlchemicalApparatus_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(AlchemicalApparatus_Registration.SCRI_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, AlchemicalApparatus_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<AlchemicalApparatus.ApparatusType>.Instance.Write(
                    writer,
                    item.Type_Property,
                    length: new ContentLength(1),
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.Type,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Value_Property,
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.Value,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight_Property,
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.Weight,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Quality_Property,
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.Quality,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class AlchemicalApparatus_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<AlchemicalApparatus_Mask<T>>
    {
        #region Ctors
        public AlchemicalApparatus_Mask()
        {
        }

        public AlchemicalApparatus_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Script = initialValue;
            this.Type = initialValue;
            this.Value = initialValue;
            this.Weight = initialValue;
            this.Quality = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public T Script;
        public T Type;
        public T Value;
        public T Weight;
        public T Quality;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AlchemicalApparatus_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AlchemicalApparatus_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.Quality, rhs.Quality)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.Quality?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.Quality)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new AlchemicalApparatus_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AlchemicalApparatus_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AlchemicalApparatus_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            obj.Script = eval(this.Script);
            obj.Type = eval(this.Type);
            obj.Value = eval(this.Value);
            obj.Weight = eval(this.Weight);
            obj.Quality = eval(this.Quality);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AlchemicalApparatus_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AlchemicalApparatus_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AlchemicalApparatus_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.Quality ?? true)
                {
                    fg.AppendLine($"Quality => {Quality}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AlchemicalApparatus_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<AlchemicalApparatus_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public Exception Script;
        public Exception Type;
        public Exception Value;
        public Exception Weight;
        public Exception Quality;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case AlchemicalApparatus_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case AlchemicalApparatus_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case AlchemicalApparatus_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case AlchemicalApparatus_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case AlchemicalApparatus_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case AlchemicalApparatus_FieldIndex.Quality:
                    this.Quality = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case AlchemicalApparatus_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case AlchemicalApparatus_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case AlchemicalApparatus_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case AlchemicalApparatus_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case AlchemicalApparatus_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case AlchemicalApparatus_FieldIndex.Quality:
                    this.Quality = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (Script != null) return true;
            if (Type != null) return true;
            if (Value != null) return true;
            if (Weight != null) return true;
            if (Quality != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("AlchemicalApparatus_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"Quality => {Quality}");
        }
        #endregion

        #region Combine
        public AlchemicalApparatus_ErrorMask Combine(AlchemicalApparatus_ErrorMask rhs)
        {
            var ret = new AlchemicalApparatus_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Type = this.Type.Combine(rhs.Type);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.Quality = this.Quality.Combine(rhs.Quality);
            return ret;
        }
        public static AlchemicalApparatus_ErrorMask Combine(AlchemicalApparatus_ErrorMask lhs, AlchemicalApparatus_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class AlchemicalApparatus_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public bool Script;
        public bool Type;
        public bool Value;
        public bool Weight;
        public bool Quality;
        #endregion

    }
    #endregion




    #endregion

}
