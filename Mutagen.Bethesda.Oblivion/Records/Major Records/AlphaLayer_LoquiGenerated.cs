/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AlphaLayer : BaseLayer, IAlphaLayer, ILoquiObject<AlphaLayer>, ILoquiObjectSetter, IEquatable<AlphaLayer>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlphaLayer_Registration.Instance;
        public new static AlphaLayer_Registration Registration => AlphaLayer_Registration.Instance;

        #region Ctor
        public AlphaLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AlphaLayerData
        protected INotifyingSetItem<Byte[]> _AlphaLayerData = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> AlphaLayerData_Property => _AlphaLayerData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] AlphaLayerData
        {
            get => this._AlphaLayerData.Item;
            set => this._AlphaLayerData.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IAlphaLayer.AlphaLayerData_Property => this.AlphaLayerData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IAlphaLayerGetter.AlphaLayerData_Property => this.AlphaLayerData_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => AlphaLayerCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => AlphaLayerCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AlphaLayerCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AlphaLayerCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<AlphaLayer>.GetEqualsMask(AlphaLayer rhs) => AlphaLayerCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAlphaLayerGetter>.GetEqualsMask(IAlphaLayerGetter rhs) => AlphaLayerCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return AlphaLayerCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            AlphaLayer_Mask<bool> printMask = null)
        {
            return AlphaLayerCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            AlphaLayerCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new AlphaLayer_Mask<bool> GetHasBeenSetMask()
        {
            return AlphaLayerCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is AlphaLayer rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AlphaLayer rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (AlphaLayerData_Property.HasBeenSet != rhs.AlphaLayerData_Property.HasBeenSet) return false;
            if (AlphaLayerData_Property.HasBeenSet)
            {
                if (!AlphaLayerData.EqualsFast(rhs.AlphaLayerData)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (AlphaLayerData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(AlphaLayerData).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static AlphaLayer Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static AlphaLayer Create_XML(
            XElement root,
            out AlphaLayer_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static AlphaLayer Create_XML(
            XElement root,
            bool doMasks,
            out AlphaLayer_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (AlphaLayer Object, AlphaLayer_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            AlphaLayer_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new AlphaLayer_ErrorMask()) : default(Func<AlphaLayer_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static AlphaLayer Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static AlphaLayer Create_XML(
            string path,
            out AlphaLayer_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static AlphaLayer Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static AlphaLayer Create_XML(
            Stream stream,
            out AlphaLayer_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out AlphaLayer_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (AlphaLayer_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out AlphaLayer_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out AlphaLayer_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_XML(
            XmlWriter writer,
            out BaseLayer_ErrorMask errorMask,
            string name = null)
        {
            Write_XML(
                writer: writer,
                name: name,
                errorMask: out AlphaLayer_ErrorMask errMask);
            errorMask = errMask;
        }

        public override void Write_XML(
            string path,
            out BaseLayer_ErrorMask errorMask,
            string name = null)
        {
            Write_XML(
                path: path,
                name: name,
                errorMask: out AlphaLayer_ErrorMask errMask);
            errorMask = errMask;
        }

        public override void Write_XML(
            Stream stream,
            out BaseLayer_ErrorMask errorMask,
            string name = null)
        {
            Write_XML(
                stream: stream,
                name: name,
                errorMask: out AlphaLayer_ErrorMask errMask);
            errorMask = errMask;
        }

        #endregion

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            AlphaLayerCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static AlphaLayer Create_XML_Internal(
            XElement root,
            Func<AlphaLayer_ErrorMask> errorMask)
        {
            var ret = new AlphaLayer();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            AlphaLayer item,
            XElement root,
            string name,
            Func<AlphaLayer_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "AlphaLayerData":
                    item._AlphaLayerData.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)AlphaLayer_FieldIndex.AlphaLayerData,
                        errorMask: errorMask));
                    break;
                default:
                    BaseLayer.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AlphaLayer_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static AlphaLayer Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static AlphaLayer Create_Binary(
            MutagenFrame frame,
            out AlphaLayer_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static AlphaLayer Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out AlphaLayer_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (AlphaLayer Object, AlphaLayer_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            AlphaLayer_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new AlphaLayer_ErrorMask()) : default(Func<AlphaLayer_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static AlphaLayer Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AlphaLayer Create_Binary(
            string path,
            out AlphaLayer_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static AlphaLayer Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AlphaLayer Create_Binary(
            Stream stream,
            out AlphaLayer_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out AlphaLayer_ErrorMask errorMask)
        {
            errorMask = (AlphaLayer_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out AlphaLayer_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out AlphaLayer_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out BaseLayer_ErrorMask errorMask)
        {
            Write_Binary(
                writer: writer,
                errorMask: out AlphaLayer_ErrorMask errMask);
            errorMask = errMask;
        }

        public override void Write_Binary(
            string path,
            out BaseLayer_ErrorMask errorMask)
        {
            Write_Binary(
                path: path,
                errorMask: out AlphaLayer_ErrorMask errMask);
            errorMask = errMask;
        }

        public override void Write_Binary(
            Stream stream,
            out BaseLayer_ErrorMask errorMask)
        {
            Write_Binary(
                stream: stream,
                errorMask: out AlphaLayer_ErrorMask errMask);
            errorMask = errMask;
        }

        #endregion

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            AlphaLayerCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static AlphaLayer Create_Binary_Internal(
            MutagenFrame frame,
            Func<AlphaLayer_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new AlphaLayer();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    AlphaLayer_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static TryGet<AlphaLayer_FieldIndex?> Fill_Binary_RecordTypes(
            AlphaLayer item,
            MutagenFrame frame,
            AlphaLayer_FieldIndex? lastParsed,
            Func<AlphaLayer_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "VTXT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var AlphaLayerDatatryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)AlphaLayer_FieldIndex.AlphaLayerData,
                        errorMask: errorMask);
                    item._AlphaLayerData.SetIfSucceeded(AlphaLayerDatatryGet);
                    return TryGet<AlphaLayer_FieldIndex?>.Succeed(AlphaLayer_FieldIndex.AlphaLayerData);
                default:
                    return BaseLayer.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: null,
                        recordTypeConverter: recordTypeConverter.Combine(AlphaLayer_Registration.BaseConverter),
                        errorMask: errorMask).Bubble((i) => AlphaLayerCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public AlphaLayer Copy(
            AlphaLayer_CopyMask copyMask = null,
            IAlphaLayerGetter def = null)
        {
            return AlphaLayer.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AlphaLayer Copy(
            IAlphaLayer item,
            AlphaLayer_CopyMask copyMask = null,
            IAlphaLayerGetter def = null)
        {
            AlphaLayer ret;
            if (item.GetType().Equals(typeof(AlphaLayer)))
            {
                ret = new AlphaLayer();
            }
            else
            {
                ret = (AlphaLayer)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AlphaLayer Copy_ToLoqui(
            IAlphaLayerGetter item,
            AlphaLayer_CopyMask copyMask = null,
            IAlphaLayerGetter def = null)
        {
            AlphaLayer ret;
            if (item.GetType().Equals(typeof(AlphaLayer)))
            {
                ret = new AlphaLayer() as AlphaLayer;
            }
            else
            {
                ret = (AlphaLayer)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAlphaLayerGetter rhs,
            AlphaLayer_CopyMask copyMask,
            IAlphaLayerGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAlphaLayerGetter rhs,
            out AlphaLayer_ErrorMask errorMask,
            AlphaLayer_CopyMask copyMask = null,
            IAlphaLayerGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AlphaLayer_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new AlphaLayer_ErrorMask();
                }
                return retErrorMask;
            };
            AlphaLayerCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    this._AlphaLayerData.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AlphaLayerCommon.Clear(this, cmds);
        }


        public new static AlphaLayer Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AlphaLayer();
            foreach (var pair in fields)
            {
                CopyInInternal_AlphaLayer(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_AlphaLayer(AlphaLayer obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AlphaLayer_FieldIndex enu))
            {
                CopyInInternal_BaseLayer(obj, pair);
            }
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    obj._AlphaLayerData.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, AlphaLayer obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAlphaLayer : IAlphaLayerGetter, IBaseLayer, ILoquiClass<IAlphaLayer, IAlphaLayerGetter>, ILoquiClass<AlphaLayer, IAlphaLayerGetter>
    {
        new Byte[] AlphaLayerData { get; set; }
        new INotifyingSetItem<Byte[]> AlphaLayerData_Property { get; }

    }

    public partial interface IAlphaLayerGetter : IBaseLayerGetter
    {
        #region AlphaLayerData
        Byte[] AlphaLayerData { get; }
        INotifyingSetItemGetter<Byte[]> AlphaLayerData_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AlphaLayer_FieldIndex
    {
        Texture = 0,
        Quadrant = 1,
        LayerNumber = 2,
        AlphaLayerData = 3,
    }
    #endregion

    #region Registration
    public class AlphaLayer_Registration : ILoquiRegistration
    {
        public static readonly AlphaLayer_Registration Instance = new AlphaLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 144,
            version: 0);

        public const string GUID = "757f00fc-f49c-4ce3-90c8-a86cf9e93ff7";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(AlphaLayer_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AlphaLayer_ErrorMask);

        public static readonly Type ClassType = typeof(AlphaLayer);

        public static readonly Type GetterType = typeof(IAlphaLayerGetter);

        public static readonly Type SetterType = typeof(IAlphaLayer);

        public static readonly Type CommonType = typeof(AlphaLayerCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AlphaLayer";

        public const string Name = "AlphaLayer";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ALPHALAYERDATA":
                    return (ushort)AlphaLayer_FieldIndex.AlphaLayerData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return "AlphaLayerData";
                default:
                    return BaseLayer_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return typeof(Byte[]);
                default:
                    return BaseLayer_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ATXT_HEADER = new RecordType("ATXT");
        public static readonly RecordType VTXT_HEADER = new RecordType("VTXT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ATXT_HEADER;
        public static RecordTypeConverter BaseConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                BaseLayer_Registration.BTXT_HEADER,
                new RecordType("ATXT"))
            );
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AlphaLayerCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAlphaLayer item,
            IAlphaLayerGetter rhs,
            IAlphaLayerGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            AlphaLayer_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            BaseLayerCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.AlphaLayerData ?? true)
            {
                try
                {
                    item.AlphaLayerData_Property.SetToWithDefault(
                        rhs: rhs.AlphaLayerData_Property,
                        def: def?.AlphaLayerData_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)AlphaLayer_FieldIndex.AlphaLayerData, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAlphaLayer obj,
            NotifyingFireParameters cmds = null)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    obj.AlphaLayerData_Property.HasBeenSet = on;
                    break;
                default:
                    BaseLayerCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAlphaLayer obj,
            NotifyingUnsetParameters cmds = null)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    obj.AlphaLayerData_Property.Unset(cmds);
                    break;
                default:
                    BaseLayerCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAlphaLayer obj)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return obj.AlphaLayerData_Property.HasBeenSet;
                default:
                    return BaseLayerCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IAlphaLayerGetter obj)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return obj.AlphaLayerData;
                default:
                    return BaseLayerCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IAlphaLayer item,
            NotifyingUnsetParameters cmds = null)
        {
            item.AlphaLayerData_Property.Unset(cmds.ToUnsetParams());
        }

        public static AlphaLayer_Mask<bool> GetEqualsMask(
            this IAlphaLayerGetter item,
            IAlphaLayerGetter rhs)
        {
            var ret = new AlphaLayer_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAlphaLayerGetter item,
            IAlphaLayerGetter rhs,
            AlphaLayer_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.AlphaLayerData = item.AlphaLayerData_Property.Equals(rhs.AlphaLayerData_Property, (l, r) => l.EqualsFast(r));
            BaseLayerCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IAlphaLayerGetter item,
            string name = null,
            AlphaLayer_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAlphaLayerGetter item,
            FileGeneration fg,
            string name = null,
            AlphaLayer_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(AlphaLayer)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(AlphaLayer)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.AlphaLayerData ?? true)
                {
                    fg.AppendLine($"AlphaLayerData => {item.AlphaLayerData}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAlphaLayerGetter item,
            AlphaLayer_Mask<bool?> checkMask)
        {
            if (checkMask.AlphaLayerData.HasValue && checkMask.AlphaLayerData.Value != item.AlphaLayerData_Property.HasBeenSet) return false;
            return true;
        }

        public static AlphaLayer_Mask<bool> GetHasBeenSetMask(IAlphaLayerGetter item)
        {
            var ret = new AlphaLayer_Mask<bool>();
            ret.AlphaLayerData = item.AlphaLayerData_Property.HasBeenSet;
            return ret;
        }

        public static AlphaLayer_FieldIndex? ConvertFieldIndex(BaseLayer_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static AlphaLayer_FieldIndex ConvertFieldIndex(BaseLayer_FieldIndex index)
        {
            switch (index)
            {
                case BaseLayer_FieldIndex.Texture:
                    return (AlphaLayer_FieldIndex)((int)index);
                case BaseLayer_FieldIndex.Quadrant:
                    return (AlphaLayer_FieldIndex)((int)index);
                case BaseLayer_FieldIndex.LayerNumber:
                    return (AlphaLayer_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IAlphaLayerGetter item,
            bool doMasks,
            out AlphaLayer_ErrorMask errorMask,
            string name = null)
        {
            AlphaLayer_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new AlphaLayer_ErrorMask()) : default(Func<AlphaLayer_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IAlphaLayerGetter item,
            Func<AlphaLayer_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.AlphaLayer"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.AlphaLayer");
                    }
                    if (item.AlphaLayerData_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.AlphaLayerData),
                            item: item.AlphaLayerData_Property,
                            fieldIndex: (int)AlphaLayer_FieldIndex.AlphaLayerData,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            AlphaLayer item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out AlphaLayer_ErrorMask errorMask)
        {
            AlphaLayer_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new AlphaLayer_ErrorMask()) : default(Func<AlphaLayer_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            AlphaLayer item,
            RecordTypeConverter recordTypeConverter,
            Func<AlphaLayer_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            AlphaLayer item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<AlphaLayer_ErrorMask> errorMask)
        {
            BaseLayerCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AlphaLayerData_Property,
                fieldIndex: (int)AlphaLayer_FieldIndex.AlphaLayerData,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(AlphaLayer_Registration.VTXT_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class AlphaLayer_Mask<T> : BaseLayer_Mask<T>, IMask<T>, IEquatable<AlphaLayer_Mask<T>>
    {
        #region Ctors
        public AlphaLayer_Mask()
        {
        }

        public AlphaLayer_Mask(T initialValue)
        {
            this.AlphaLayerData = initialValue;
        }
        #endregion

        #region Members
        public T AlphaLayerData;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AlphaLayer_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AlphaLayer_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.AlphaLayerData, rhs.AlphaLayerData)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.AlphaLayerData?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.AlphaLayerData)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new AlphaLayer_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AlphaLayer_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AlphaLayer_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.AlphaLayerData = eval(this.AlphaLayerData);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AlphaLayer_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AlphaLayer_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AlphaLayer_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.AlphaLayerData ?? true)
                {
                    fg.AppendLine($"AlphaLayerData => {AlphaLayerData}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AlphaLayer_ErrorMask : BaseLayer_ErrorMask, IErrorMask<AlphaLayer_ErrorMask>
    {
        #region Members
        public Exception AlphaLayerData;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    this.AlphaLayerData = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    this.AlphaLayerData = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (AlphaLayerData != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("AlphaLayer_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"AlphaLayerData => {AlphaLayerData}");
        }
        #endregion

        #region Combine
        public AlphaLayer_ErrorMask Combine(AlphaLayer_ErrorMask rhs)
        {
            var ret = new AlphaLayer_ErrorMask();
            ret.AlphaLayerData = this.AlphaLayerData.Combine(rhs.AlphaLayerData);
            return ret;
        }
        public static AlphaLayer_ErrorMask Combine(AlphaLayer_ErrorMask lhs, AlphaLayer_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class AlphaLayer_CopyMask : BaseLayer_CopyMask
    {
        #region Members
        public bool AlphaLayerData;
        #endregion

    }
    #endregion




    #endregion

}
