/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Ammo : 
        ItemAbstract,
        IAmmo,
        ILoquiObject<Ammo>,
        ILoquiObjectSetter,
        INamed,
        IPropertySupporter<String>,
        IPropertySupporter<Model>,
        IPropertySupporter<UInt16>,
        IPropertySupporter<Single>,
        IPropertySupporter<Ammo.AmmoFlag>,
        IPropertySupporter<UInt32>,
        ILinkSubContainer,
        IEquatable<Ammo>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Ammo_Registration.Instance;
        public new static Ammo_Registration Registration => Ammo_Registration.Instance;

        #region Ctor
        public Ammo()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        protected String _Name;
        protected PropertyForwarder<Ammo, String> _NameForwarder;
        public INotifyingSetItem<String> Name_Property => _NameForwarder ?? (_NameForwarder = new PropertyForwarder<Ammo, String>(this, (int)Ammo_FieldIndex.Name));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => this.SetName(value);
        }
        protected void SetName(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.Name];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Name == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.Name] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Name;
                _Name = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.Name,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Name = item;
            }
        }
        protected void UnsetName()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.Name] = false;
            Name = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IAmmo.Name_Property => this.Name_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IAmmoGetter.Name_Property => this.Name_Property;
        #endregion
        #region Model
        protected Model _Model;
        protected PropertyForwarder<Ammo, Model> _ModelForwarder;
        public INotifyingSetItem<Model> Model_Property => _ModelForwarder ?? (_ModelForwarder = new PropertyForwarder<Ammo, Model>(this, (int)Ammo_FieldIndex.Model));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => this._Model;
            set => this.SetModel(value);
        }
        protected void SetModel(
            Model item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.Model];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Model, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.Model] = hasBeenSet;
            }
            if (_Model_subscriptions != null)
            {
                var tmp = Model;
                _Model = item;
                _Model_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.Model,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Model = item;
            }
        }
        protected void UnsetModel()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.Model] = false;
            Model = default(Model);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IAmmo.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IAmmoGetter.Model_Property => this.Model_Property;
        #endregion
        #region Icon
        protected String _Icon;
        protected PropertyForwarder<Ammo, String> _IconForwarder;
        public INotifyingSetItem<String> Icon_Property => _IconForwarder ?? (_IconForwarder = new PropertyForwarder<Ammo, String>(this, (int)Ammo_FieldIndex.Icon));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => this.SetIcon(value);
        }
        protected void SetIcon(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.Icon];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Icon == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.Icon] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Icon;
                _Icon = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.Icon,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Icon = item;
            }
        }
        protected void UnsetIcon()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.Icon] = false;
            Icon = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IAmmo.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IAmmoGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Enchantment
        public FormIDSetLink<Enchantment> Enchantment_Property { get; } = new FormIDSetLink<Enchantment>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Enchantment Enchantment { get => Enchantment_Property.Item; set => Enchantment_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Enchantment> IAmmoGetter.Enchantment_Property => this.Enchantment_Property;
        #endregion
        #region EnchantmentPoints
        protected UInt16 _EnchantmentPoints;
        protected PropertyForwarder<Ammo, UInt16> _EnchantmentPointsForwarder;
        public INotifyingSetItem<UInt16> EnchantmentPoints_Property => _EnchantmentPointsForwarder ?? (_EnchantmentPointsForwarder = new PropertyForwarder<Ammo, UInt16>(this, (int)Ammo_FieldIndex.EnchantmentPoints));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 EnchantmentPoints
        {
            get => this._EnchantmentPoints;
            set => this.SetEnchantmentPoints(value);
        }
        protected void SetEnchantmentPoints(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.EnchantmentPoints];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && EnchantmentPoints == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.EnchantmentPoints] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = EnchantmentPoints;
                _EnchantmentPoints = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.EnchantmentPoints,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _EnchantmentPoints = item;
            }
        }
        protected void UnsetEnchantmentPoints()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.EnchantmentPoints] = false;
            EnchantmentPoints = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<UInt16> IAmmo.EnchantmentPoints_Property => this.EnchantmentPoints_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<UInt16> IAmmoGetter.EnchantmentPoints_Property => this.EnchantmentPoints_Property;
        #endregion
        #region Speed
        protected Single _Speed;
        protected PropertyForwarder<Ammo, Single> _SpeedForwarder;
        public INotifyingSetItem<Single> Speed_Property => _SpeedForwarder ?? (_SpeedForwarder = new PropertyForwarder<Ammo, Single>(this, (int)Ammo_FieldIndex.Speed));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Speed
        {
            get => this._Speed;
            set => this.SetSpeed(value);
        }
        protected void SetSpeed(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.Speed];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Speed == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.Speed] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Speed;
                _Speed = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.Speed,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Speed = item;
            }
        }
        protected void UnsetSpeed()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.Speed] = false;
            Speed = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IAmmo.Speed_Property => this.Speed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IAmmoGetter.Speed_Property => this.Speed_Property;
        #endregion
        #region Flags
        protected Ammo.AmmoFlag _Flags;
        protected PropertyForwarder<Ammo, Ammo.AmmoFlag> _FlagsForwarder;
        public INotifyingSetItem<Ammo.AmmoFlag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<Ammo, Ammo.AmmoFlag>(this, (int)Ammo_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Ammo.AmmoFlag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            Ammo.AmmoFlag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.Flags] = hasBeenSet;
            }
            if (_AmmoAmmoFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _AmmoAmmoFlag_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.Flags] = false;
            Flags = default(Ammo.AmmoFlag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Ammo.AmmoFlag> IAmmo.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Ammo.AmmoFlag> IAmmoGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Value
        protected UInt32 _Value;
        protected PropertyForwarder<Ammo, UInt32> _ValueForwarder;
        public INotifyingSetItem<UInt32> Value_Property => _ValueForwarder ?? (_ValueForwarder = new PropertyForwarder<Ammo, UInt32>(this, (int)Ammo_FieldIndex.Value));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Value
        {
            get => this._Value;
            set => this.SetValue(value);
        }
        protected void SetValue(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.Value];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Value == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.Value] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = Value;
                _Value = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.Value,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Value = item;
            }
        }
        protected void UnsetValue()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.Value] = false;
            Value = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IAmmo.Value_Property => this.Value_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IAmmoGetter.Value_Property => this.Value_Property;
        #endregion
        #region Weight
        protected Single _Weight;
        protected PropertyForwarder<Ammo, Single> _WeightForwarder;
        public INotifyingSetItem<Single> Weight_Property => _WeightForwarder ?? (_WeightForwarder = new PropertyForwarder<Ammo, Single>(this, (int)Ammo_FieldIndex.Weight));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Weight
        {
            get => this._Weight;
            set => this.SetWeight(value);
        }
        protected void SetWeight(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.Weight];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Weight == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.Weight] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Weight;
                _Weight = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.Weight,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Weight = item;
            }
        }
        protected void UnsetWeight()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.Weight] = false;
            Weight = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IAmmo.Weight_Property => this.Weight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IAmmoGetter.Weight_Property => this.Weight_Property;
        #endregion
        #region Damage
        protected UInt16 _Damage;
        protected PropertyForwarder<Ammo, UInt16> _DamageForwarder;
        public INotifyingSetItem<UInt16> Damage_Property => _DamageForwarder ?? (_DamageForwarder = new PropertyForwarder<Ammo, UInt16>(this, (int)Ammo_FieldIndex.Damage));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 Damage
        {
            get => this._Damage;
            set => this.SetDamage(value);
        }
        protected void SetDamage(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Ammo_FieldIndex.Damage];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Damage == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Ammo_FieldIndex.Damage] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = Damage;
                _Damage = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)Ammo_FieldIndex.Damage,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Damage = item;
            }
        }
        protected void UnsetDamage()
        {
            _hasBeenSetTracker[(int)Ammo_FieldIndex.Damage] = false;
            Damage = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> IAmmo.Damage_Property => this.Damage_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> IAmmoGetter.Damage_Property => this.Damage_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => AmmoCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => AmmoCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AmmoCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AmmoCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Ammo>.GetEqualsMask(Ammo rhs) => AmmoCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAmmoGetter>.GetEqualsMask(IAmmoGetter rhs) => AmmoCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            Ammo_Mask<bool> printMask = null)
        {
            return AmmoCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            AmmoCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Ammo_Mask<bool> GetHasBeenSetMask()
        {
            return AmmoCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Ammo rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Ammo rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (Enchantment_Property.HasBeenSet != rhs.Enchantment_Property.HasBeenSet) return false;
            if (Enchantment_Property.HasBeenSet)
            {
                if (!this.Enchantment_Property.Equals(rhs.Enchantment_Property)) return false;
            }
            if (EnchantmentPoints_Property.HasBeenSet != rhs.EnchantmentPoints_Property.HasBeenSet) return false;
            if (EnchantmentPoints_Property.HasBeenSet)
            {
                if (this.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            }
            if (!this.Speed.EqualsWithin(rhs.Speed)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.Value != rhs.Value) return false;
            if (!this.Weight.EqualsWithin(rhs.Weight)) return false;
            if (this.Damage != rhs.Damage) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Enchantment_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Enchantment).CombineHashCode(ret);
            }
            if (EnchantmentPoints_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnchantmentPoints).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Damage).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Ammo Create_Xml(
            XElement root,
            Ammo_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Ammo Create_Xml(
            XElement root,
            out Ammo_ErrorMask errorMask,
            bool doMasks = true,
            Ammo_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Ammo Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Ammo();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Ammo Create_Xml(
            string path,
            Ammo_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Ammo Create_Xml(
            string path,
            out Ammo_ErrorMask errorMask,
            Ammo_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Ammo Create_Xml(
            Stream stream,
            Ammo_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Ammo Create_Xml(
            Stream stream,
            out Ammo_ErrorMask errorMask,
            Ammo_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Ammo_ErrorMask errorMask,
            Ammo_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Ammo>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Ammo_ErrorMask errorMask,
            Ammo_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Ammo_ErrorMask errorMask,
            Ammo_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out ItemAbstract_ErrorMask errorMask,
            ItemAbstract_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Ammo_ErrorMask errorMask,
            bool doMasks = true,
            Ammo_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Ammo_ErrorMask errorMask,
            Ammo_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Ammo_ErrorMask errorMask,
            Ammo_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out ItemAbstract_ErrorMask errorMask,
            bool doMasks = true,
            ItemAbstract_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            AmmoCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Ammo item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Ammo_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Enchantment":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Enchantment_Property,
                        fieldIndex: (int)Ammo_FieldIndex.Enchantment,
                        errorMask: errorMask);
                    break;
                case "EnchantmentPoints":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.EnchantmentPoints);
                        if (UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt16 EnchantmentPointsParse,
                            errorMask: errorMask))
                        {
                            item.EnchantmentPoints = EnchantmentPointsParse;
                        }
                        else
                        {
                            item.UnsetEnchantmentPoints();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Speed);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single SpeedParse,
                            errorMask: errorMask))
                        {
                            item.Speed = SpeedParse;
                        }
                        else
                        {
                            item.UnsetSpeed();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Flags);
                        if (EnumXmlTranslation<Ammo.AmmoFlag>.Instance.Parse(
                            root: root,
                            item: out Ammo.AmmoFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Value);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 ValueParse,
                            errorMask: errorMask))
                        {
                            item.Value = ValueParse;
                        }
                        else
                        {
                            item.UnsetValue();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Weight);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WeightParse,
                            errorMask: errorMask))
                        {
                            item.Weight = WeightParse;
                        }
                        else
                        {
                            item.UnsetWeight();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Damage":
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Damage);
                        if (UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt16 DamageParse,
                            errorMask: errorMask))
                        {
                            item.Damage = DamageParse;
                        }
                        else
                        {
                            item.UnsetDamage();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstract.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Name:
                case Ammo_FieldIndex.Model:
                case Ammo_FieldIndex.Icon:
                case Ammo_FieldIndex.EnchantmentPoints:
                    return _hasBeenSetTracker[index];
                case Ammo_FieldIndex.Enchantment:
                    return Enchantment_Property.HasBeenSet;
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Flags:
                case Ammo_FieldIndex.Value:
                case Ammo_FieldIndex.Weight:
                case Ammo_FieldIndex.Damage:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Name:
                    return Name;
                case Ammo_FieldIndex.Icon:
                    return Icon;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Name:
                    SetName(item, hasBeenSet, cmds);
                    break;
                case Ammo_FieldIndex.Icon:
                    SetIcon(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Name:
                    SetName(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                case Ammo_FieldIndex.Icon:
                    SetIcon(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Name:
                case Ammo_FieldIndex.Icon:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter Model
        protected ObjectCentralizationSubscriptions<Model> _Model_subscriptions;
        Model IPropertySupporter<Model>.Get(int index)
        {
            return GetModel(index: index);
        }

        protected Model GetModel(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Model:
                    return Model;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        void IPropertySupporter<Model>.Set(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetModel(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetModel(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Model:
                    SetModel(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        bool IPropertySupporter<Model>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Model>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Model>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetModel(
                index: index,
                cmds: cmds);
        }

        protected void UnsetModel(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Model:
                    SetModel(
                        item: default(Model),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Model> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Model_subscriptions == null)
            {
                _Model_subscriptions = new ObjectCentralizationSubscriptions<Model>();
            }
            _Model_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Unsubscribe(
            int index,
            object owner)
        {
            _Model_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Model>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Model IPropertySupporter<Model>.DefaultValue(int index)
        {
            return DefaultValueModel(index: index);
        }

        protected Model DefaultValueModel(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Model:
                    return default(Model);
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        #endregion

        #region IPropertySupporter UInt16
        protected ObjectCentralizationSubscriptions<UInt16> _UInt16_subscriptions;
        UInt16 IPropertySupporter<UInt16>.Get(int index)
        {
            return GetUInt16(index: index);
        }

        protected UInt16 GetUInt16(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case Ammo_FieldIndex.Damage:
                    return Damage;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        void IPropertySupporter<UInt16>.Set(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt16(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt16(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.EnchantmentPoints:
                    SetEnchantmentPoints(item, hasBeenSet, cmds);
                    break;
                case Ammo_FieldIndex.Damage:
                    SetDamage(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        bool IPropertySupporter<UInt16>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<UInt16>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt16>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt16(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt16(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.EnchantmentPoints:
                    SetEnchantmentPoints(
                        item: default(UInt16),
                        hasBeenSet: false);
                    break;
                case Ammo_FieldIndex.Damage:
                    SetDamage(
                        item: default(UInt16),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt16> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt16_subscriptions == null)
            {
                _UInt16_subscriptions = new ObjectCentralizationSubscriptions<UInt16>();
            }
            _UInt16_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt16_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt16>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt16 IPropertySupporter<UInt16>.DefaultValue(int index)
        {
            return DefaultValueUInt16(index: index);
        }

        protected UInt16 DefaultValueUInt16(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.EnchantmentPoints:
                case Ammo_FieldIndex.Damage:
                    return default(UInt16);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Speed:
                    return Speed;
                case Ammo_FieldIndex.Weight:
                    return Weight;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Speed:
                    SetSpeed(item, hasBeenSet, cmds);
                    break;
                case Ammo_FieldIndex.Weight:
                    SetWeight(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Speed:
                    SetSpeed(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Ammo_FieldIndex.Weight:
                    SetWeight(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Weight:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Ammo.AmmoFlag
        protected ObjectCentralizationSubscriptions<Ammo.AmmoFlag> _AmmoAmmoFlag_subscriptions;
        Ammo.AmmoFlag IPropertySupporter<Ammo.AmmoFlag>.Get(int index)
        {
            return GetAmmoAmmoFlag(index: index);
        }

        protected Ammo.AmmoFlag GetAmmoAmmoFlag(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type Ammo.AmmoFlag: {index}");
            }
        }

        void IPropertySupporter<Ammo.AmmoFlag>.Set(
            int index,
            Ammo.AmmoFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetAmmoAmmoFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetAmmoAmmoFlag(
            int index,
            Ammo.AmmoFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Ammo.AmmoFlag: {index}");
            }
        }

        bool IPropertySupporter<Ammo.AmmoFlag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Ammo.AmmoFlag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Ammo.AmmoFlag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetAmmoAmmoFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetAmmoAmmoFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Flags:
                    SetFlags(
                        item: default(Ammo.AmmoFlag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Ammo.AmmoFlag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Ammo.AmmoFlag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Ammo.AmmoFlag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_AmmoAmmoFlag_subscriptions == null)
            {
                _AmmoAmmoFlag_subscriptions = new ObjectCentralizationSubscriptions<Ammo.AmmoFlag>();
            }
            _AmmoAmmoFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Ammo.AmmoFlag>.Unsubscribe(
            int index,
            object owner)
        {
            _AmmoAmmoFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Ammo.AmmoFlag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Ammo.AmmoFlag IPropertySupporter<Ammo.AmmoFlag>.DefaultValue(int index)
        {
            return DefaultValueAmmoAmmoFlag(index: index);
        }

        protected Ammo.AmmoFlag DefaultValueAmmoAmmoFlag(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Flags:
                    return default(Ammo.AmmoFlag);
                default:
                    throw new ArgumentException($"Unknown index for field type Ammo.AmmoFlag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter UInt32
        UInt32 IPropertySupporter<UInt32>.Get(int index)
        {
            return GetUInt32(index: index);
        }

        protected override UInt32 GetUInt32(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Value:
                    return Value;
                default:
                    return base.GetUInt32(index: index);
            }
        }

        void IPropertySupporter<UInt32>.Set(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetUInt32(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Value:
                    SetValue(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetUInt32(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<UInt32>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<UInt32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt32(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetUInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Value:
                    SetValue(
                        item: default(UInt32),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetUInt32(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt32_subscriptions == null)
            {
                _UInt32_subscriptions = new ObjectCentralizationSubscriptions<UInt32>();
            }
            _UInt32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt32 IPropertySupporter<UInt32>.DefaultValue(int index)
        {
            return DefaultValueUInt32(index: index);
        }

        protected override UInt32 DefaultValueUInt32(int index)
        {
            switch ((Ammo_FieldIndex)index)
            {
                case Ammo_FieldIndex.Value:
                    return default(UInt32);
                default:
                    return base.DefaultValueUInt32(index: index);
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Ammo_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Enchantment_Property;
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            Enchantment_Property.Link(
                modList,
                sourceMod,
                cmds);
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Ammo Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Ammo Create_Binary(
            MutagenFrame frame,
            out Ammo_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Ammo Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Ammo>(
                record: new Ammo(),
                frame: frame,
                errorMask: errorMask,
                recType: Ammo_Registration.AMMO_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Ammo Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Ammo Create_Binary(
            string path,
            out Ammo_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Ammo Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Ammo Create_Binary(
            Stream stream,
            out Ammo_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Ammo_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Ammo_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Ammo_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out ItemAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            AmmoCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Ammo item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            ItemAbstract.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Ammo item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Ammo_FieldIndex.Name);
                case 0x4C444F4D: // MODL
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Ammo_FieldIndex.Model);
                case 0x4E4F4349: // ICON
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.Icon);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Ammo_FieldIndex.Icon);
                case 0x4D414E45: // ENAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Enchantment_Property,
                        fieldIndex: (int)Ammo_FieldIndex.Enchantment,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Ammo_FieldIndex.Enchantment);
                case 0x4D414E41: // ANAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Ammo_FieldIndex.EnchantmentPoints);
                        if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out UInt16 EnchantmentPointsParse,
                            errorMask: errorMask))
                        {
                            item.EnchantmentPoints = EnchantmentPointsParse;
                        }
                        else
                        {
                            item.UnsetEnchantmentPoints();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Ammo_FieldIndex.EnchantmentPoints);
                case 0x41544144: // DATA
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Ammo_FieldIndex.Speed);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single SpeedParse,
                                errorMask: errorMask))
                            {
                                item.Speed = SpeedParse;
                            }
                            else
                            {
                                item.UnsetSpeed();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Ammo_FieldIndex.Flags);
                            if (EnumBinaryTranslation<Ammo.AmmoFlag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Ammo.AmmoFlag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.UnsetFlags();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Ammo_FieldIndex.Value);
                            if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt32 ValueParse,
                                errorMask: errorMask))
                            {
                                item.Value = ValueParse;
                            }
                            else
                            {
                                item.UnsetValue();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Ammo_FieldIndex.Weight);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single WeightParse,
                                errorMask: errorMask))
                            {
                                item.Weight = WeightParse;
                            }
                            else
                            {
                                item.UnsetWeight();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Ammo_FieldIndex.Damage);
                            if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt16 DamageParse,
                                errorMask: errorMask))
                            {
                                item.Damage = DamageParse;
                            }
                            else
                            {
                                item.UnsetDamage();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Ammo_FieldIndex.Damage);
                default:
                    return ItemAbstract.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Ammo Copy(
            Ammo_CopyMask copyMask = null,
            IAmmoGetter def = null)
        {
            return Ammo.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Ammo Copy(
            IAmmo item,
            Ammo_CopyMask copyMask = null,
            IAmmoGetter def = null)
        {
            Ammo ret;
            if (item.GetType().Equals(typeof(Ammo)))
            {
                ret = new Ammo();
            }
            else
            {
                ret = (Ammo)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Ammo Copy_ToLoqui(
            IAmmoGetter item,
            Ammo_CopyMask copyMask = null,
            IAmmoGetter def = null)
        {
            Ammo ret;
            if (item.GetType().Equals(typeof(Ammo)))
            {
                ret = new Ammo() as Ammo;
            }
            else
            {
                ret = (Ammo)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAmmoGetter rhs,
            Ammo_CopyMask copyMask,
            IAmmoGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAmmoGetter rhs,
            out Ammo_ErrorMask errorMask,
            Ammo_CopyMask copyMask = null,
            IAmmoGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AmmoCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IAmmoGetter rhs,
            ErrorMaskBuilder errorMask,
            Ammo_CopyMask copyMask = null,
            IAmmoGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AmmoCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    this.SetName(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Ammo_FieldIndex.Model:
                    this.SetModel(
                        (Model)obj,
                        cmds: cmds);
                    break;
                case Ammo_FieldIndex.Icon:
                    this.SetIcon(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Ammo_FieldIndex.Enchantment:
                    this.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)obj,
                        cmds);
                    break;
                case Ammo_FieldIndex.EnchantmentPoints:
                    this.SetEnchantmentPoints(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                case Ammo_FieldIndex.Speed:
                    this.SetSpeed(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Ammo_FieldIndex.Flags:
                    this.SetFlags(
                        (Ammo.AmmoFlag)obj,
                        cmds: cmds);
                    break;
                case Ammo_FieldIndex.Value:
                    this.SetValue(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case Ammo_FieldIndex.Weight:
                    this.SetWeight(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Ammo_FieldIndex.Damage:
                    this.SetDamage(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AmmoCommon.Clear(this, cmds);
        }


        public new static Ammo Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Ammo();
            foreach (var pair in fields)
            {
                CopyInInternal_Ammo(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Ammo(Ammo obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Ammo_FieldIndex enu))
            {
                CopyInInternal_ItemAbstract(obj, pair);
            }
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    obj.SetName(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Ammo_FieldIndex.Model:
                    obj.SetModel(
                        (Model)pair.Value,
                        cmds: null);
                    break;
                case Ammo_FieldIndex.Icon:
                    obj.SetIcon(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Ammo_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)pair.Value,
                        null);
                    break;
                case Ammo_FieldIndex.EnchantmentPoints:
                    obj.SetEnchantmentPoints(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                case Ammo_FieldIndex.Speed:
                    obj.SetSpeed(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Ammo_FieldIndex.Flags:
                    obj.SetFlags(
                        (Ammo.AmmoFlag)pair.Value,
                        cmds: null);
                    break;
                case Ammo_FieldIndex.Value:
                    obj.SetValue(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case Ammo_FieldIndex.Weight:
                    obj.SetWeight(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Ammo_FieldIndex.Damage:
                    obj.SetDamage(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Ammo obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAmmo : IAmmoGetter, IItemAbstract, ILoquiClass<IAmmo, IAmmoGetter>, ILoquiClass<Ammo, IAmmoGetter>
    {
        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

        new Enchantment Enchantment { get; set; }
        new UInt16 EnchantmentPoints { get; set; }
        new INotifyingSetItem<UInt16> EnchantmentPoints_Property { get; }

        new Single Speed { get; set; }
        new INotifyingItem<Single> Speed_Property { get; }

        new Ammo.AmmoFlag Flags { get; set; }
        new INotifyingItem<Ammo.AmmoFlag> Flags_Property { get; }

        new UInt32 Value { get; set; }
        new INotifyingItem<UInt32> Value_Property { get; }

        new Single Weight { get; set; }
        new INotifyingItem<Single> Weight_Property { get; }

        new UInt16 Damage { get; set; }
        new INotifyingItem<UInt16> Damage_Property { get; }

    }

    public partial interface IAmmoGetter : IItemAbstractGetter
    {
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion
        #region Enchantment
        Enchantment Enchantment { get; }
        FormIDSetLink<Enchantment> Enchantment_Property { get; }

        #endregion
        #region EnchantmentPoints
        UInt16 EnchantmentPoints { get; }
        INotifyingSetItemGetter<UInt16> EnchantmentPoints_Property { get; }

        #endregion
        #region Speed
        Single Speed { get; }
        INotifyingItemGetter<Single> Speed_Property { get; }

        #endregion
        #region Flags
        Ammo.AmmoFlag Flags { get; }
        INotifyingItemGetter<Ammo.AmmoFlag> Flags_Property { get; }

        #endregion
        #region Value
        UInt32 Value { get; }
        INotifyingItemGetter<UInt32> Value_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        INotifyingItemGetter<Single> Weight_Property { get; }

        #endregion
        #region Damage
        UInt16 Damage { get; }
        INotifyingItemGetter<UInt16> Damage_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Ammo_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Enchantment = 8,
        EnchantmentPoints = 9,
        Speed = 10,
        Flags = 11,
        Value = 12,
        Weight = 13,
        Damage = 14,
    }
    #endregion

    #region Registration
    public class Ammo_Registration : ILoquiRegistration
    {
        public static readonly Ammo_Registration Instance = new Ammo_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 83,
            version: 0);

        public const string GUID = "b9883ff5-be2f-44d5-acf7-69751cd6e87f";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(Ammo_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Ammo_ErrorMask);

        public static readonly Type ClassType = typeof(Ammo);

        public static readonly Type GetterType = typeof(IAmmoGetter);

        public static readonly Type SetterType = typeof(IAmmo);

        public static readonly Type CommonType = typeof(AmmoCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Ammo";

        public const string Name = "Ammo";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Ammo_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Ammo_FieldIndex.Model;
                case "ICON":
                    return (ushort)Ammo_FieldIndex.Icon;
                case "ENCHANTMENT":
                    return (ushort)Ammo_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)Ammo_FieldIndex.EnchantmentPoints;
                case "SPEED":
                    return (ushort)Ammo_FieldIndex.Speed;
                case "FLAGS":
                    return (ushort)Ammo_FieldIndex.Flags;
                case "VALUE":
                    return (ushort)Ammo_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)Ammo_FieldIndex.Weight;
                case "DAMAGE":
                    return (ushort)Ammo_FieldIndex.Damage;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                case Ammo_FieldIndex.Model:
                case Ammo_FieldIndex.Icon:
                case Ammo_FieldIndex.Enchantment:
                case Ammo_FieldIndex.EnchantmentPoints:
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Flags:
                case Ammo_FieldIndex.Value:
                case Ammo_FieldIndex.Weight:
                case Ammo_FieldIndex.Damage:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Model:
                    return true;
                case Ammo_FieldIndex.Name:
                case Ammo_FieldIndex.Icon:
                case Ammo_FieldIndex.Enchantment:
                case Ammo_FieldIndex.EnchantmentPoints:
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Flags:
                case Ammo_FieldIndex.Value:
                case Ammo_FieldIndex.Weight:
                case Ammo_FieldIndex.Damage:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                case Ammo_FieldIndex.Model:
                case Ammo_FieldIndex.Icon:
                case Ammo_FieldIndex.Enchantment:
                case Ammo_FieldIndex.EnchantmentPoints:
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Flags:
                case Ammo_FieldIndex.Value:
                case Ammo_FieldIndex.Weight:
                case Ammo_FieldIndex.Damage:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    return "Name";
                case Ammo_FieldIndex.Model:
                    return "Model";
                case Ammo_FieldIndex.Icon:
                    return "Icon";
                case Ammo_FieldIndex.Enchantment:
                    return "Enchantment";
                case Ammo_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case Ammo_FieldIndex.Speed:
                    return "Speed";
                case Ammo_FieldIndex.Flags:
                    return "Flags";
                case Ammo_FieldIndex.Value:
                    return "Value";
                case Ammo_FieldIndex.Weight:
                    return "Weight";
                case Ammo_FieldIndex.Damage:
                    return "Damage";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                case Ammo_FieldIndex.Model:
                case Ammo_FieldIndex.Icon:
                case Ammo_FieldIndex.Enchantment:
                case Ammo_FieldIndex.EnchantmentPoints:
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Flags:
                case Ammo_FieldIndex.Value:
                case Ammo_FieldIndex.Weight:
                case Ammo_FieldIndex.Damage:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                case Ammo_FieldIndex.Model:
                case Ammo_FieldIndex.Icon:
                case Ammo_FieldIndex.Enchantment:
                case Ammo_FieldIndex.EnchantmentPoints:
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Flags:
                case Ammo_FieldIndex.Value:
                case Ammo_FieldIndex.Weight:
                case Ammo_FieldIndex.Damage:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    return typeof(String);
                case Ammo_FieldIndex.Model:
                    return typeof(Model);
                case Ammo_FieldIndex.Icon:
                    return typeof(String);
                case Ammo_FieldIndex.Enchantment:
                    return typeof(FormIDSetLink<Enchantment>);
                case Ammo_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case Ammo_FieldIndex.Speed:
                    return typeof(Single);
                case Ammo_FieldIndex.Flags:
                    return typeof(Ammo.AmmoFlag);
                case Ammo_FieldIndex.Value:
                    return typeof(UInt32);
                case Ammo_FieldIndex.Weight:
                    return typeof(Single);
                case Ammo_FieldIndex.Damage:
                    return typeof(UInt16);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = AMMO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AmmoCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAmmo item,
            IAmmoGetter rhs,
            IAmmoGetter def,
            ErrorMaskBuilder errorMask,
            Ammo_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            ItemAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Name);
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Model);
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Icon);
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Enchantment ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Enchantment);
                try
                {
                    item.Enchantment_Property.SetToWithDefault(
                        rhs: rhs.Enchantment_Property,
                        def: def?.Enchantment_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EnchantmentPoints ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.EnchantmentPoints);
                try
                {
                    item.EnchantmentPoints_Property.SetToWithDefault(
                        rhs: rhs.EnchantmentPoints_Property,
                        def: def?.EnchantmentPoints_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Speed ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Speed);
                try
                {
                    item.Speed_Property.Set(
                        value: rhs.Speed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Value ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Value);
                try
                {
                    item.Value_Property.Set(
                        value: rhs.Value,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weight ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Weight);
                try
                {
                    item.Weight_Property.Set(
                        value: rhs.Weight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Damage ?? true)
            {
                errorMask?.PushIndex((int)Ammo_FieldIndex.Damage);
                try
                {
                    item.Damage_Property.Set(
                        value: rhs.Damage,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAmmo obj,
            NotifyingFireParameters cmds = null)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Flags:
                case Ammo_FieldIndex.Value:
                case Ammo_FieldIndex.Weight:
                case Ammo_FieldIndex.Damage:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Ammo_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                case Ammo_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Ammo_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Ammo_FieldIndex.Enchantment:
                    obj.Enchantment_Property.HasBeenSet = on;
                    break;
                case Ammo_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints_Property.HasBeenSet = on;
                    break;
                default:
                    ItemAbstractCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAmmo obj,
            NotifyingUnsetParameters cmds = null)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                case Ammo_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Ammo_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Ammo_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Unset(cmds);
                    break;
                case Ammo_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints_Property.Unset(cmds);
                    break;
                case Ammo_FieldIndex.Speed:
                    obj.Speed = default(Single);
                    break;
                case Ammo_FieldIndex.Flags:
                    obj.Flags = default(Ammo.AmmoFlag);
                    break;
                case Ammo_FieldIndex.Value:
                    obj.Value = default(UInt32);
                    break;
                case Ammo_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                case Ammo_FieldIndex.Damage:
                    obj.Damage = default(UInt16);
                    break;
                default:
                    ItemAbstractCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAmmo obj)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Speed:
                case Ammo_FieldIndex.Flags:
                case Ammo_FieldIndex.Value:
                case Ammo_FieldIndex.Weight:
                case Ammo_FieldIndex.Damage:
                    return true;
                case Ammo_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                case Ammo_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Ammo_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Ammo_FieldIndex.Enchantment:
                    return obj.Enchantment_Property.HasBeenSet;
                case Ammo_FieldIndex.EnchantmentPoints:
                    return obj.EnchantmentPoints_Property.HasBeenSet;
                default:
                    return ItemAbstractCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IAmmoGetter obj)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    return obj.Name;
                case Ammo_FieldIndex.Model:
                    return obj.Model;
                case Ammo_FieldIndex.Icon:
                    return obj.Icon;
                case Ammo_FieldIndex.Enchantment:
                    return obj.Enchantment;
                case Ammo_FieldIndex.EnchantmentPoints:
                    return obj.EnchantmentPoints;
                case Ammo_FieldIndex.Speed:
                    return obj.Speed;
                case Ammo_FieldIndex.Flags:
                    return obj.Flags;
                case Ammo_FieldIndex.Value:
                    return obj.Value;
                case Ammo_FieldIndex.Weight:
                    return obj.Weight;
                case Ammo_FieldIndex.Damage:
                    return obj.Damage;
                default:
                    return ItemAbstractCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IAmmo item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Property.Unset(cmds.ToUnsetParams());
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Enchantment_Property.Unset(cmds.ToUnsetParams());
            item.EnchantmentPoints_Property.Unset(cmds.ToUnsetParams());
            item.Speed = default(Single);
            item.Flags = default(Ammo.AmmoFlag);
            item.Value = default(UInt32);
            item.Weight = default(Single);
            item.Damage = default(UInt16);
        }

        public static Ammo_Mask<bool> GetEqualsMask(
            this IAmmoGetter item,
            IAmmoGetter rhs)
        {
            var ret = new Ammo_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAmmoGetter item,
            IAmmoGetter rhs,
            Ammo_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Enchantment = item.Enchantment_Property.Equals(rhs.Enchantment_Property, (l, r) => l == r);
            ret.EnchantmentPoints = item.EnchantmentPoints_Property.Equals(rhs.EnchantmentPoints_Property, (l, r) => l == r);
            ret.Speed = item.Speed == rhs.Speed;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight == rhs.Weight;
            ret.Damage = item.Damage == rhs.Damage;
            ItemAbstractCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IAmmoGetter item,
            string name = null,
            Ammo_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAmmoGetter item,
            FileGeneration fg,
            string name = null,
            Ammo_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Ammo)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Ammo)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {item.Enchantment_Property}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {item.EnchantmentPoints}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {item.Speed}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
                if (printMask?.Damage ?? true)
                {
                    fg.AppendLine($"Damage => {item.Damage}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAmmoGetter item,
            Ammo_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment_Property.HasBeenSet) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != item.EnchantmentPoints_Property.HasBeenSet) return false;
            return true;
        }

        public static Ammo_Mask<bool> GetHasBeenSetMask(IAmmoGetter item)
        {
            var ret = new Ammo_Mask<bool>();
            ret.Name = item.Name_Property.HasBeenSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Enchantment = item.Enchantment_Property.HasBeenSet;
            ret.EnchantmentPoints = item.EnchantmentPoints_Property.HasBeenSet;
            ret.Speed = true;
            ret.Flags = true;
            ret.Value = true;
            ret.Weight = true;
            ret.Damage = true;
            return ret;
        }

        public static Ammo_FieldIndex? ConvertFieldIndex(ItemAbstract_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Ammo_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlags:
                    return (Ammo_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormID:
                    return (Ammo_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (Ammo_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (Ammo_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.RecordType:
                    return (Ammo_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Ammo_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Ammo_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Ammo_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Ammo_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Ammo_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Ammo_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Ammo_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Ammo item,
            bool doMasks,
            out Ammo_ErrorMask errorMask,
            Ammo_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Ammo item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Ammo");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Ammo");
            }
            if (item.Name_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name_Property,
                    fieldIndex: (int)Ammo_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Model) ?? true))
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model_Property,
                    name: nameof(item.Model),
                    fieldIndex: (int)Ammo_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Ammo_FieldIndex.Model));
            }
            if (item.Icon_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Icon),
                    item: item.Icon_Property,
                    fieldIndex: (int)Ammo_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Enchantment_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Enchantment) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Enchantment),
                    item: item.Enchantment_Property?.FormID,
                    fieldIndex: (int)Ammo_FieldIndex.Enchantment,
                    errorMask: errorMask);
            }
            if (item.EnchantmentPoints_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.EnchantmentPoints) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.EnchantmentPoints),
                    item: item.EnchantmentPoints_Property,
                    fieldIndex: (int)Ammo_FieldIndex.EnchantmentPoints,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Speed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Speed),
                    item: item.Speed_Property,
                    fieldIndex: (int)Ammo_FieldIndex.Speed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Ammo.AmmoFlag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)Ammo_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Value) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Value),
                    item: item.Value_Property,
                    fieldIndex: (int)Ammo_FieldIndex.Value,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Weight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Weight),
                    item: item.Weight_Property,
                    fieldIndex: (int)Ammo_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ammo_FieldIndex.Damage) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Damage),
                    item: item.Damage_Property,
                    fieldIndex: (int)Ammo_FieldIndex.Damage,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Ammo item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Ammo_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Ammo_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Ammo item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Ammo_Registration.AMMO_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Ammo item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)Ammo_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Ammo_Registration.FULL_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Ammo_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Ammo_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Ammo_Registration.ICON_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Enchantment_Property,
                fieldIndex: (int)Ammo_FieldIndex.Enchantment,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Ammo_Registration.ENAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantmentPoints_Property,
                fieldIndex: (int)Ammo_FieldIndex.EnchantmentPoints,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Ammo_Registration.ANAM_HEADER),
                nullable: false);
            if (item.DATADataTypeState.HasFlag(Ammo.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Ammo_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Speed_Property,
                        fieldIndex: (int)Ammo_FieldIndex.Speed,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Ammo.AmmoFlag>.Instance.Write(
                        writer,
                        item.Flags_Property,
                        length: 4,
                        fieldIndex: (int)Ammo_FieldIndex.Flags,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Value_Property,
                        fieldIndex: (int)Ammo_FieldIndex.Value,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight_Property,
                        fieldIndex: (int)Ammo_FieldIndex.Weight,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Damage_Property,
                        fieldIndex: (int)Ammo_FieldIndex.Damage,
                        errorMask: errorMask);
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Ammo_Mask<T> : ItemAbstract_Mask<T>, IMask<T>, IEquatable<Ammo_Mask<T>>
    {
        #region Ctors
        public Ammo_Mask()
        {
        }

        public Ammo_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Enchantment = initialValue;
            this.EnchantmentPoints = initialValue;
            this.Speed = initialValue;
            this.Flags = initialValue;
            this.Value = initialValue;
            this.Weight = initialValue;
            this.Damage = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public T Enchantment;
        public T EnchantmentPoints;
        public T Speed;
        public T Flags;
        public T Value;
        public T Weight;
        public T Damage;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Ammo_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Ammo_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
            if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.Damage, rhs.Damage)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantmentPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.Damage?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Enchantment)) return false;
            if (!eval(this.EnchantmentPoints)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.Damage)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Ammo_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Ammo_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Ammo_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            obj.Enchantment = eval(this.Enchantment);
            obj.EnchantmentPoints = eval(this.EnchantmentPoints);
            obj.Speed = eval(this.Speed);
            obj.Flags = eval(this.Flags);
            obj.Value = eval(this.Value);
            obj.Weight = eval(this.Weight);
            obj.Damage = eval(this.Damage);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Ammo_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Ammo_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Ammo_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {Enchantment}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.Damage ?? true)
                {
                    fg.AppendLine($"Damage => {Damage}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Ammo_ErrorMask : ItemAbstract_ErrorMask, IErrorMask<Ammo_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public Exception Enchantment;
        public Exception EnchantmentPoints;
        public Exception Speed;
        public Exception Flags;
        public Exception Value;
        public Exception Weight;
        public Exception Damage;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    return Name;
                case Ammo_FieldIndex.Model:
                    return Model;
                case Ammo_FieldIndex.Icon:
                    return Icon;
                case Ammo_FieldIndex.Enchantment:
                    return Enchantment;
                case Ammo_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case Ammo_FieldIndex.Speed:
                    return Speed;
                case Ammo_FieldIndex.Flags:
                    return Flags;
                case Ammo_FieldIndex.Value:
                    return Value;
                case Ammo_FieldIndex.Weight:
                    return Weight;
                case Ammo_FieldIndex.Damage:
                    return Damage;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Ammo_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Ammo_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Ammo_FieldIndex.Enchantment:
                    this.Enchantment = ex;
                    break;
                case Ammo_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = ex;
                    break;
                case Ammo_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case Ammo_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Ammo_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Ammo_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Ammo_FieldIndex.Damage:
                    this.Damage = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Ammo_FieldIndex enu = (Ammo_FieldIndex)index;
            switch (enu)
            {
                case Ammo_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Ammo_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Ammo_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Ammo_FieldIndex.Enchantment:
                    this.Enchantment = (Exception)obj;
                    break;
                case Ammo_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (Exception)obj;
                    break;
                case Ammo_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case Ammo_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Ammo_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Ammo_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Ammo_FieldIndex.Damage:
                    this.Damage = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (Enchantment != null) return true;
            if (EnchantmentPoints != null) return true;
            if (Speed != null) return true;
            if (Flags != null) return true;
            if (Value != null) return true;
            if (Weight != null) return true;
            if (Damage != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Ammo_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Enchantment => {Enchantment}");
            fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"Damage => {Damage}");
        }
        #endregion

        #region Combine
        public Ammo_ErrorMask Combine(Ammo_ErrorMask rhs)
        {
            var ret = new Ammo_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
            ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.Damage = this.Damage.Combine(rhs.Damage);
            return ret;
        }
        public static Ammo_ErrorMask Combine(Ammo_ErrorMask lhs, Ammo_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Ammo_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Ammo_ErrorMask();
        }
        #endregion

    }
    public class Ammo_CopyMask : ItemAbstract_CopyMask
    {
        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool Speed;
        public bool Flags;
        public bool Value;
        public bool Weight;
        public bool Damage;
        #endregion

    }
    public class Ammo_TranslationMask : ItemAbstract_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Icon;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool Speed;
        public bool Flags;
        public bool Value;
        public bool Weight;
        public bool Damage;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
            ret.Add((Enchantment, null));
            ret.Add((EnchantmentPoints, null));
            ret.Add((Speed, null));
            ret.Add((Flags, null));
            ret.Add((Value, null));
            ret.Add((Weight, null));
            ret.Add((Damage, null));
        }
    }
    #endregion

    #endregion

}
