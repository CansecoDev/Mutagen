/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AnimatedObject : 
        MajorRecord,
        IAnimatedObject,
        ILoquiObject<AnimatedObject>,
        ILoquiObjectSetter,
        IPropertySupporter<Model>,
        IEquatable<AnimatedObject>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AnimatedObject_Registration.Instance;
        public new static AnimatedObject_Registration Registration => AnimatedObject_Registration.Instance;

        #region Ctor
        public AnimatedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        protected Model _Model;
        protected PropertyForwarder<AnimatedObject, Model> _ModelForwarder;
        public INotifyingSetItem<Model> Model_Property => _ModelForwarder ?? (_ModelForwarder = new PropertyForwarder<AnimatedObject, Model>(this, (int)AnimatedObject_FieldIndex.Model));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => this._Model;
            set => this.SetModel(value);
        }
        protected void SetModel(
            Model item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)AnimatedObject_FieldIndex.Model];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Model, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)AnimatedObject_FieldIndex.Model] = hasBeenSet;
            }
            if (_Model_subscriptions != null)
            {
                var tmp = Model;
                _Model = item;
                _Model_subscriptions.FireSubscriptions(
                    index: (int)AnimatedObject_FieldIndex.Model,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Model = item;
            }
        }
        protected void UnsetModel()
        {
            _hasBeenSetTracker[(int)AnimatedObject_FieldIndex.Model] = false;
            Model = default(Model);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IAnimatedObject.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IAnimatedObjectGetter.Model_Property => this.Model_Property;
        #endregion
        #region IdleAnimation
        public FormIDSetLink<IdleAnimation> IdleAnimation_Property { get; } = new FormIDSetLink<IdleAnimation>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IdleAnimation IdleAnimation { get => IdleAnimation_Property.Item; set => IdleAnimation_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<IdleAnimation> IAnimatedObjectGetter.IdleAnimation_Property => this.IdleAnimation_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => AnimatedObjectCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => AnimatedObjectCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AnimatedObjectCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AnimatedObjectCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<AnimatedObject>.GetEqualsMask(AnimatedObject rhs) => AnimatedObjectCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAnimatedObjectGetter>.GetEqualsMask(IAnimatedObjectGetter rhs) => AnimatedObjectCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return AnimatedObjectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            AnimatedObject_Mask<bool> printMask = null)
        {
            return AnimatedObjectCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            AnimatedObjectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new AnimatedObject_Mask<bool> GetHasBeenSetMask()
        {
            return AnimatedObjectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is AnimatedObject rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AnimatedObject rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (IdleAnimation_Property.HasBeenSet != rhs.IdleAnimation_Property.HasBeenSet) return false;
            if (IdleAnimation_Property.HasBeenSet)
            {
                if (!this.IdleAnimation_Property.Equals(rhs.IdleAnimation_Property)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (IdleAnimation_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(IdleAnimation).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static AnimatedObject Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AnimatedObject Create_XML(
            XElement root,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AnimatedObject Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new AnimatedObject();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AnimatedObject Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static AnimatedObject Create_XML(
            string path,
            out AnimatedObject_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static AnimatedObject Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static AnimatedObject Create_XML(
            Stream stream,
            out AnimatedObject_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<AnimatedObject>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out AnimatedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<AnimatedObject>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out AnimatedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out AnimatedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out AnimatedObject_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            AnimatedObjectCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            AnimatedObject item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)AnimatedObject_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleAnimation":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)AnimatedObject_FieldIndex.IdleAnimation,
                        item: item.IdleAnimation_Property,
                        errorMask: errorMask);
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((AnimatedObject_FieldIndex)index)
            {
                case AnimatedObject_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return IdleAnimation_Property.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter Model
        protected ObjectCentralizationSubscriptions<Model> _Model_subscriptions;
        Model IPropertySupporter<Model>.Get(int index)
        {
            return GetModel(index: index);
        }

        protected Model GetModel(int index)
        {
            switch ((AnimatedObject_FieldIndex)index)
            {
                case AnimatedObject_FieldIndex.Model:
                    return Model;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        void IPropertySupporter<Model>.Set(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetModel(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetModel(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((AnimatedObject_FieldIndex)index)
            {
                case AnimatedObject_FieldIndex.Model:
                    SetModel(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        bool IPropertySupporter<Model>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Model>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Model>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetModel(
                index: index,
                cmds: cmds);
        }

        protected void UnsetModel(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((AnimatedObject_FieldIndex)index)
            {
                case AnimatedObject_FieldIndex.Model:
                    SetModel(
                        item: default(Model),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Model> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Model_subscriptions == null)
            {
                _Model_subscriptions = new ObjectCentralizationSubscriptions<Model>();
            }
            _Model_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Unsubscribe(
            int index,
            object owner)
        {
            _Model_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Model>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Model IPropertySupporter<Model>.DefaultValue(int index)
        {
            return DefaultValueModel(index: index);
        }

        protected Model DefaultValueModel(int index)
        {
            switch ((AnimatedObject_FieldIndex)index)
            {
                case AnimatedObject_FieldIndex.Model:
                    return default(Model);
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AnimatedObject_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return IdleAnimation_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static AnimatedObject Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static AnimatedObject Create_Binary(
            MutagenFrame frame,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AnimatedObject Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<AnimatedObject>(
                record: new AnimatedObject(),
                frame: frame,
                errorMask: errorMask,
                recType: AnimatedObject_Registration.ANIO_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static AnimatedObject Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AnimatedObject Create_Binary(
            string path,
            out AnimatedObject_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static AnimatedObject Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static AnimatedObject Create_Binary(
            Stream stream,
            out AnimatedObject_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out AnimatedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            AnimatedObjectCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            AnimatedObject item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            AnimatedObject item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                    try
                    {
                        errorMask?.PushIndex((int)AnimatedObject_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)AnimatedObject_FieldIndex.Model);
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)AnimatedObject_FieldIndex.IdleAnimation,
                        item: item.IdleAnimation_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)AnimatedObject_FieldIndex.IdleAnimation);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public AnimatedObject Copy(
            AnimatedObject_CopyMask copyMask = null,
            IAnimatedObjectGetter def = null)
        {
            return AnimatedObject.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AnimatedObject Copy(
            IAnimatedObject item,
            AnimatedObject_CopyMask copyMask = null,
            IAnimatedObjectGetter def = null)
        {
            AnimatedObject ret;
            if (item.GetType().Equals(typeof(AnimatedObject)))
            {
                ret = new AnimatedObject();
            }
            else
            {
                ret = (AnimatedObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AnimatedObject Copy_ToLoqui(
            IAnimatedObjectGetter item,
            AnimatedObject_CopyMask copyMask = null,
            IAnimatedObjectGetter def = null)
        {
            AnimatedObject ret;
            if (item.GetType().Equals(typeof(AnimatedObject)))
            {
                ret = new AnimatedObject() as AnimatedObject;
            }
            else
            {
                ret = (AnimatedObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAnimatedObjectGetter rhs,
            AnimatedObject_CopyMask copyMask,
            IAnimatedObjectGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAnimatedObjectGetter rhs,
            out AnimatedObject_ErrorMask errorMask,
            AnimatedObject_CopyMask copyMask = null,
            IAnimatedObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AnimatedObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IAnimatedObjectGetter rhs,
            ErrorMaskBuilder errorMask,
            AnimatedObject_CopyMask copyMask = null,
            IAnimatedObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AnimatedObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    this.SetModel(
                        (Model)obj,
                        cmds: cmds);
                    break;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    this.IdleAnimation_Property.Set(
                        (FormIDSetLink<IdleAnimation>)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AnimatedObjectCommon.Clear(this, cmds);
        }


        public new static AnimatedObject Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AnimatedObject();
            foreach (var pair in fields)
            {
                CopyInInternal_AnimatedObject(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_AnimatedObject(AnimatedObject obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AnimatedObject_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    obj.SetModel(
                        (Model)pair.Value,
                        cmds: null);
                    break;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    obj.IdleAnimation_Property.Set(
                        (FormIDSetLink<IdleAnimation>)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, AnimatedObject obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAnimatedObject : IAnimatedObjectGetter, IMajorRecord, ILoquiClass<IAnimatedObject, IAnimatedObjectGetter>, ILoquiClass<AnimatedObject, IAnimatedObjectGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new IdleAnimation IdleAnimation { get; set; }
    }

    public partial interface IAnimatedObjectGetter : IMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region IdleAnimation
        IdleAnimation IdleAnimation { get; }
        FormIDSetLink<IdleAnimation> IdleAnimation_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AnimatedObject_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Model = 5,
        IdleAnimation = 6,
    }
    #endregion

    #region Registration
    public class AnimatedObject_Registration : ILoquiRegistration
    {
        public static readonly AnimatedObject_Registration Instance = new AnimatedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 165,
            version: 0);

        public const string GUID = "08eca501-d197-4c2f-aa92-e326a4a9de2d";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(AnimatedObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AnimatedObject_ErrorMask);

        public static readonly Type ClassType = typeof(AnimatedObject);

        public static readonly Type GetterType = typeof(IAnimatedObjectGetter);

        public static readonly Type SetterType = typeof(IAnimatedObject);

        public static readonly Type CommonType = typeof(AnimatedObjectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AnimatedObject";

        public const string Name = "AnimatedObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)AnimatedObject_FieldIndex.Model;
                case "IDLEANIMATION":
                    return (ushort)AnimatedObject_FieldIndex.IdleAnimation;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return true;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return "Model";
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return "IdleAnimation";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return typeof(Model);
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return typeof(FormIDSetLink<IdleAnimation>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ANIO_HEADER = new RecordType("ANIO");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ANIO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AnimatedObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAnimatedObject item,
            IAnimatedObjectGetter rhs,
            IAnimatedObjectGetter def,
            ErrorMaskBuilder errorMask,
            AnimatedObject_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)AnimatedObject_FieldIndex.Model);
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.IdleAnimation ?? true)
            {
                errorMask?.PushIndex((int)AnimatedObject_FieldIndex.IdleAnimation);
                try
                {
                    item.IdleAnimation_Property.SetToWithDefault(
                        rhs: rhs.IdleAnimation_Property,
                        def: def?.IdleAnimation_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAnimatedObject obj,
            NotifyingFireParameters cmds = null)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    obj.IdleAnimation_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAnimatedObject obj,
            NotifyingUnsetParameters cmds = null)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    obj.IdleAnimation_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAnimatedObject obj)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return obj.IdleAnimation_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IAnimatedObjectGetter obj)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return obj.Model;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return obj.IdleAnimation;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IAnimatedObject item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.IdleAnimation_Property.Unset(cmds.ToUnsetParams());
        }

        public static AnimatedObject_Mask<bool> GetEqualsMask(
            this IAnimatedObjectGetter item,
            IAnimatedObjectGetter rhs)
        {
            var ret = new AnimatedObject_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAnimatedObjectGetter item,
            IAnimatedObjectGetter rhs,
            AnimatedObject_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.IdleAnimation = item.IdleAnimation_Property.Equals(rhs.IdleAnimation_Property, (l, r) => l == r);
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IAnimatedObjectGetter item,
            string name = null,
            AnimatedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAnimatedObjectGetter item,
            FileGeneration fg,
            string name = null,
            AnimatedObject_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(AnimatedObject)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(AnimatedObject)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.IdleAnimation ?? true)
                {
                    fg.AppendLine($"IdleAnimation => {item.IdleAnimation_Property}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAnimatedObjectGetter item,
            AnimatedObject_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.IdleAnimation.HasValue && checkMask.IdleAnimation.Value != item.IdleAnimation_Property.HasBeenSet) return false;
            return true;
        }

        public static AnimatedObject_Mask<bool> GetHasBeenSetMask(IAnimatedObjectGetter item)
        {
            var ret = new AnimatedObject_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.IdleAnimation = item.IdleAnimation_Property.HasBeenSet;
            return ret;
        }

        public static AnimatedObject_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static AnimatedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (AnimatedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (AnimatedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AnimatedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AnimatedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (AnimatedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IAnimatedObjectGetter item,
            bool doMasks,
            out AnimatedObject_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IAnimatedObjectGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AnimatedObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AnimatedObject");
            }
            if (item.Model_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model_Property,
                    name: nameof(item.Model),
                    fieldIndex: (int)AnimatedObject_FieldIndex.Model,
                    errorMask: errorMask);
            }
            if (item.IdleAnimation_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.IdleAnimation),
                    item: item.IdleAnimation?.FormID,
                    fieldIndex: (int)AnimatedObject_FieldIndex.IdleAnimation,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            AnimatedObject item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out AnimatedObject_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = AnimatedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            AnimatedObject item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AnimatedObject_Registration.ANIO_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            AnimatedObject item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)AnimatedObject_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.IdleAnimation_Property,
                fieldIndex: (int)AnimatedObject_FieldIndex.IdleAnimation,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(AnimatedObject_Registration.DATA_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class AnimatedObject_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<AnimatedObject_Mask<T>>
    {
        #region Ctors
        public AnimatedObject_Mask()
        {
        }

        public AnimatedObject_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.IdleAnimation = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T IdleAnimation;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AnimatedObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AnimatedObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.IdleAnimation, rhs.IdleAnimation)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.IdleAnimation?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.IdleAnimation)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new AnimatedObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AnimatedObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AnimatedObject_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.IdleAnimation = eval(this.IdleAnimation);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AnimatedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AnimatedObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AnimatedObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.IdleAnimation ?? true)
                {
                    fg.AppendLine($"IdleAnimation => {IdleAnimation}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AnimatedObject_ErrorMask : MajorRecord_ErrorMask, IErrorMask<AnimatedObject_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception IdleAnimation;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    return Model;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    return IdleAnimation;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    this.IdleAnimation = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            AnimatedObject_FieldIndex enu = (AnimatedObject_FieldIndex)index;
            switch (enu)
            {
                case AnimatedObject_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case AnimatedObject_FieldIndex.IdleAnimation:
                    this.IdleAnimation = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (IdleAnimation != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("AnimatedObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"IdleAnimation => {IdleAnimation}");
        }
        #endregion

        #region Combine
        public AnimatedObject_ErrorMask Combine(AnimatedObject_ErrorMask rhs)
        {
            var ret = new AnimatedObject_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.IdleAnimation = this.IdleAnimation.Combine(rhs.IdleAnimation);
            return ret;
        }
        public static AnimatedObject_ErrorMask Combine(AnimatedObject_ErrorMask lhs, AnimatedObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AnimatedObject_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AnimatedObject_ErrorMask();
        }
        #endregion

    }
    public class AnimatedObject_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool IdleAnimation;
        #endregion

    }
    #endregion





    #endregion

}
