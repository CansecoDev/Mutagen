/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Armor : NamedMajorRecord, IArmor, ILoquiObjectSetter, IEquatable<Armor>
    {
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static Armor_Registration Registration => Armor_Registration.Instance;

        #region Ctor
        public Armor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        FormIDSetLink<Script> IArmorGetter.Script_Property => this.Script_Property;
        #endregion
        #region Enchantment
        public FormIDSetLink<Enchantment> Enchantment_Property { get; } = new FormIDSetLink<Enchantment>();
        public Enchantment Enchantment { get => Enchantment_Property.Item; set => Enchantment_Property.Item = value; }
        FormIDSetLink<Enchantment> IArmorGetter.Enchantment_Property => this.Enchantment_Property;
        #endregion
        #region Points
        protected readonly INotifyingSetItem<UInt16> _Points = NotifyingSetItem.Factory<UInt16>(markAsSet: false);
        public INotifyingSetItem<UInt16> Points_Property => _Points;
        public UInt16 Points
        {
            get => this._Points.Item;
            set => this._Points.Set(value);
        }
        INotifyingSetItem<UInt16> IArmor.Points_Property => this.Points_Property;
        INotifyingSetItemGetter<UInt16> IArmorGetter.Points_Property => this.Points_Property;
        #endregion
        #region BipedFlags
        protected readonly INotifyingSetItem<BipedFlag> _BipedFlags = NotifyingSetItem.Factory<BipedFlag>(markAsSet: false);
        public INotifyingSetItem<BipedFlag> BipedFlags_Property => _BipedFlags;
        public BipedFlag BipedFlags
        {
            get => this._BipedFlags.Item;
            set => this._BipedFlags.Set(value);
        }
        INotifyingSetItem<BipedFlag> IArmor.BipedFlags_Property => this.BipedFlags_Property;
        INotifyingSetItemGetter<BipedFlag> IArmorGetter.BipedFlags_Property => this.BipedFlags_Property;
        #endregion
        #region Flags
        protected readonly INotifyingSetItem<Armor.ArmorFlag> _Flags = NotifyingSetItem.Factory<Armor.ArmorFlag>(markAsSet: false);
        public INotifyingSetItem<Armor.ArmorFlag> Flags_Property => _Flags;
        public Armor.ArmorFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        INotifyingSetItem<Armor.ArmorFlag> IArmor.Flags_Property => this.Flags_Property;
        INotifyingSetItemGetter<Armor.ArmorFlag> IArmorGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region MaleBipedModel
        private readonly INotifyingSetItem<Model> _MaleBipedModel = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> MaleBipedModel_Property => this._MaleBipedModel;
        Model IArmorGetter.MaleBipedModel => this.MaleBipedModel;
        public Model MaleBipedModel { get => _MaleBipedModel.Item; set => _MaleBipedModel.Item = value; }
        INotifyingSetItem<Model> IArmor.MaleBipedModel_Property => this.MaleBipedModel_Property;
        INotifyingSetItemGetter<Model> IArmorGetter.MaleBipedModel_Property => this.MaleBipedModel_Property;
        #endregion
        #region MaleWorldModel
        private readonly INotifyingSetItem<Model> _MaleWorldModel = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> MaleWorldModel_Property => this._MaleWorldModel;
        Model IArmorGetter.MaleWorldModel => this.MaleWorldModel;
        public Model MaleWorldModel { get => _MaleWorldModel.Item; set => _MaleWorldModel.Item = value; }
        INotifyingSetItem<Model> IArmor.MaleWorldModel_Property => this.MaleWorldModel_Property;
        INotifyingSetItemGetter<Model> IArmorGetter.MaleWorldModel_Property => this.MaleWorldModel_Property;
        #endregion
        #region MaleIcon
        protected readonly INotifyingSetItem<String> _MaleIcon = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> MaleIcon_Property => _MaleIcon;
        public String MaleIcon
        {
            get => this._MaleIcon.Item;
            set => this._MaleIcon.Set(value);
        }
        INotifyingSetItem<String> IArmor.MaleIcon_Property => this.MaleIcon_Property;
        INotifyingSetItemGetter<String> IArmorGetter.MaleIcon_Property => this.MaleIcon_Property;
        #endregion
        #region FemaleBipedModel
        private readonly INotifyingSetItem<Model> _FemaleBipedModel = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> FemaleBipedModel_Property => this._FemaleBipedModel;
        Model IArmorGetter.FemaleBipedModel => this.FemaleBipedModel;
        public Model FemaleBipedModel { get => _FemaleBipedModel.Item; set => _FemaleBipedModel.Item = value; }
        INotifyingSetItem<Model> IArmor.FemaleBipedModel_Property => this.FemaleBipedModel_Property;
        INotifyingSetItemGetter<Model> IArmorGetter.FemaleBipedModel_Property => this.FemaleBipedModel_Property;
        #endregion
        #region FemaleWorldModel
        private readonly INotifyingSetItem<Model> _FemaleWorldModel = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> FemaleWorldModel_Property => this._FemaleWorldModel;
        Model IArmorGetter.FemaleWorldModel => this.FemaleWorldModel;
        public Model FemaleWorldModel { get => _FemaleWorldModel.Item; set => _FemaleWorldModel.Item = value; }
        INotifyingSetItem<Model> IArmor.FemaleWorldModel_Property => this.FemaleWorldModel_Property;
        INotifyingSetItemGetter<Model> IArmorGetter.FemaleWorldModel_Property => this.FemaleWorldModel_Property;
        #endregion
        #region FemaleIcon
        protected readonly INotifyingSetItem<String> _FemaleIcon = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> FemaleIcon_Property => _FemaleIcon;
        public String FemaleIcon
        {
            get => this._FemaleIcon.Item;
            set => this._FemaleIcon.Set(value);
        }
        INotifyingSetItem<String> IArmor.FemaleIcon_Property => this.FemaleIcon_Property;
        INotifyingSetItemGetter<String> IArmorGetter.FemaleIcon_Property => this.FemaleIcon_Property;
        #endregion
        #region ArmorValue
        protected readonly INotifyingSetItem<Single> _ArmorValue = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> ArmorValue_Property => _ArmorValue;
        public Single ArmorValue
        {
            get => this._ArmorValue.Item;
            set => this._ArmorValue.Set(value);
        }
        INotifyingSetItem<Single> IArmor.ArmorValue_Property => this.ArmorValue_Property;
        INotifyingSetItemGetter<Single> IArmorGetter.ArmorValue_Property => this.ArmorValue_Property;
        #endregion
        #region Value
        protected readonly INotifyingSetItem<UInt32> _Value = NotifyingSetItem.Factory<UInt32>(markAsSet: false);
        public INotifyingSetItem<UInt32> Value_Property => _Value;
        public UInt32 Value
        {
            get => this._Value.Item;
            set => this._Value.Set(value);
        }
        INotifyingSetItem<UInt32> IArmor.Value_Property => this.Value_Property;
        INotifyingSetItemGetter<UInt32> IArmorGetter.Value_Property => this.Value_Property;
        #endregion
        #region Health
        protected readonly INotifyingSetItem<UInt32> _Health = NotifyingSetItem.Factory<UInt32>(markAsSet: false);
        public INotifyingSetItem<UInt32> Health_Property => _Health;
        public UInt32 Health
        {
            get => this._Health.Item;
            set => this._Health.Set(value);
        }
        INotifyingSetItem<UInt32> IArmor.Health_Property => this.Health_Property;
        INotifyingSetItemGetter<UInt32> IArmorGetter.Health_Property => this.Health_Property;
        #endregion
        #region Weight
        protected readonly INotifyingSetItem<UInt32> _Weight = NotifyingSetItem.Factory<UInt32>(markAsSet: false);
        public INotifyingSetItem<UInt32> Weight_Property => _Weight;
        public UInt32 Weight
        {
            get => this._Weight.Item;
            set => this._Weight.Set(value);
        }
        INotifyingSetItem<UInt32> IArmor.Weight_Property => this.Weight_Property;
        INotifyingSetItemGetter<UInt32> IArmorGetter.Weight_Property => this.Weight_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ArmorCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ArmorCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => ArmorCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ArmorCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ArmorCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            return ArmorCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ArmorCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Armor_Mask<bool> GetHasBeenSetMask()
        {
            return ArmorCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Armor rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (Script != rhs.Script) return false;
            }
            if (Enchantment_Property.HasBeenSet != rhs.Enchantment_Property.HasBeenSet) return false;
            if (Enchantment_Property.HasBeenSet)
            {
                if (Enchantment != rhs.Enchantment) return false;
            }
            if (Points_Property.HasBeenSet != rhs.Points_Property.HasBeenSet) return false;
            if (Points_Property.HasBeenSet)
            {
                if (Points != rhs.Points) return false;
            }
            if (BipedFlags_Property.HasBeenSet != rhs.BipedFlags_Property.HasBeenSet) return false;
            if (BipedFlags_Property.HasBeenSet)
            {
                if (BipedFlags != rhs.BipedFlags) return false;
            }
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (Flags != rhs.Flags) return false;
            }
            if (MaleBipedModel_Property.HasBeenSet != rhs.MaleBipedModel_Property.HasBeenSet) return false;
            if (MaleBipedModel_Property.HasBeenSet)
            {
                if (!object.Equals(MaleBipedModel, rhs.MaleBipedModel)) return false;
            }
            if (MaleWorldModel_Property.HasBeenSet != rhs.MaleWorldModel_Property.HasBeenSet) return false;
            if (MaleWorldModel_Property.HasBeenSet)
            {
                if (!object.Equals(MaleWorldModel, rhs.MaleWorldModel)) return false;
            }
            if (MaleIcon_Property.HasBeenSet != rhs.MaleIcon_Property.HasBeenSet) return false;
            if (MaleIcon_Property.HasBeenSet)
            {
                if (!object.Equals(MaleIcon, rhs.MaleIcon)) return false;
            }
            if (FemaleBipedModel_Property.HasBeenSet != rhs.FemaleBipedModel_Property.HasBeenSet) return false;
            if (FemaleBipedModel_Property.HasBeenSet)
            {
                if (!object.Equals(FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            }
            if (FemaleWorldModel_Property.HasBeenSet != rhs.FemaleWorldModel_Property.HasBeenSet) return false;
            if (FemaleWorldModel_Property.HasBeenSet)
            {
                if (!object.Equals(FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            }
            if (FemaleIcon_Property.HasBeenSet != rhs.FemaleIcon_Property.HasBeenSet) return false;
            if (FemaleIcon_Property.HasBeenSet)
            {
                if (!object.Equals(FemaleIcon, rhs.FemaleIcon)) return false;
            }
            if (ArmorValue_Property.HasBeenSet != rhs.ArmorValue_Property.HasBeenSet) return false;
            if (ArmorValue_Property.HasBeenSet)
            {
                if (ArmorValue != rhs.ArmorValue) return false;
            }
            if (Value_Property.HasBeenSet != rhs.Value_Property.HasBeenSet) return false;
            if (Value_Property.HasBeenSet)
            {
                if (Value != rhs.Value) return false;
            }
            if (Health_Property.HasBeenSet != rhs.Health_Property.HasBeenSet) return false;
            if (Health_Property.HasBeenSet)
            {
                if (Health != rhs.Health) return false;
            }
            if (Weight_Property.HasBeenSet != rhs.Weight_Property.HasBeenSet) return false;
            if (Weight_Property.HasBeenSet)
            {
                if (Weight != rhs.Weight) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Enchantment_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Enchantment).CombineHashCode(ret);
            }
            if (Points_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Points).CombineHashCode(ret);
            }
            if (BipedFlags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BipedFlags).CombineHashCode(ret);
            }
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (MaleBipedModel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleBipedModel).CombineHashCode(ret);
            }
            if (MaleWorldModel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleWorldModel).CombineHashCode(ret);
            }
            if (MaleIcon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleIcon).CombineHashCode(ret);
            }
            if (FemaleBipedModel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleBipedModel).CombineHashCode(ret);
            }
            if (FemaleWorldModel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleWorldModel).CombineHashCode(ret);
            }
            if (FemaleIcon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleIcon).CombineHashCode(ret);
            }
            if (ArmorValue_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ArmorValue).CombineHashCode(ret);
            }
            if (Value_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            }
            if (Health_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            }
            if (Weight_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Armor Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Armor Create_XML(
            XElement root,
            out Armor_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Armor Create_XML(
            XElement root,
            bool doMasks,
            out Armor_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Armor Object, Armor_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Armor_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Armor_ErrorMask()) : default(Func<Armor_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Armor Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Armor Create_XML(
            string path,
            out Armor_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Armor Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Armor Create_XML(
            Stream stream,
            out Armor_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Armor, Armor_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Armor, Armor_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Armor_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Armor_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Armor_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Armor_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ArmorCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Armor Create_XML_Internal(
            XElement root,
            Func<Armor_ErrorMask> errorMask)
        {
            var ret = new Armor();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Armor item,
            XElement root,
            string name,
            Func<Armor_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Script":
                    item.Script_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Script,
                        errorMask: errorMask));
                    break;
                case "Enchantment":
                    item.Enchantment_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Enchantment,
                        errorMask: errorMask));
                    break;
                case "Points":
                    item._Points.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Points,
                        errorMask: errorMask));
                    break;
                case "BipedFlags":
                    item._BipedFlags.SetIfSucceeded(EnumXmlTranslation<BipedFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Armor_FieldIndex.BipedFlags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<Armor.ArmorFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Armor_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "MaleBipedModel":
                    item._MaleBipedModel.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Armor_FieldIndex.MaleBipedModel,
                        errorMask: errorMask));
                    break;
                case "MaleWorldModel":
                    item._MaleWorldModel.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Armor_FieldIndex.MaleWorldModel,
                        errorMask: errorMask));
                    break;
                case "MaleIcon":
                    item._MaleIcon.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.MaleIcon,
                        errorMask: errorMask));
                    break;
                case "FemaleBipedModel":
                    item._FemaleBipedModel.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Armor_FieldIndex.FemaleBipedModel,
                        errorMask: errorMask));
                    break;
                case "FemaleWorldModel":
                    item._FemaleWorldModel.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Armor_FieldIndex.FemaleWorldModel,
                        errorMask: errorMask));
                    break;
                case "FemaleIcon":
                    item._FemaleIcon.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.FemaleIcon,
                        errorMask: errorMask));
                    break;
                case "ArmorValue":
                    item._ArmorValue.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                        errorMask: errorMask));
                    break;
                case "Value":
                    item._Value.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Value,
                        errorMask: errorMask));
                    break;
                case "Health":
                    item._Health.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Health,
                        errorMask: errorMask));
                    break;
                case "Weight":
                    item._Weight.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Weight,
                        errorMask: errorMask));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Armor Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Armor Create_Binary(
            MutagenFrame frame,
            out Armor_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Armor Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Armor_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Armor Object, Armor_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Armor_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Armor_ErrorMask()) : default(Func<Armor_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Armor Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Armor Create_Binary(
            string path,
            out Armor_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Armor Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Armor Create_Binary(
            Stream stream,
            out Armor_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Armor, Armor_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Armor, Armor_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Armor_ErrorMask errorMask)
        {
            errorMask = (Armor_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Armor_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Armor_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ArmorCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_ArmorValue_Custom(
            MutagenFrame frame,
            IArmor item,
            int fieldIndex,
            Func<Armor_ErrorMask> errorMask);

        static partial void WriteBinary_ArmorValue_Custom(
            MutagenWriter writer,
            IArmorGetter item,
            int fieldIndex,
            Func<Armor_ErrorMask> errorMask);

        public static void WriteBinary_ArmorValue(
            MutagenWriter writer,
            IArmorGetter item,
            int fieldIndex,
            Func<Armor_ErrorMask> errorMask)
        {
            WriteBinary_ArmorValue_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        private static Armor Create_Binary_Internal(
            MutagenFrame frame,
            Func<Armor_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new Armor();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame,
                    Armor_Registration.ARMO_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Armor item,
            MutagenFrame frame,
            Func<Armor_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Armor_FieldIndex?> Fill_Binary_RecordTypes(
            Armor item,
            MutagenFrame frame,
            Func<Armor_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Script_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Armor_FieldIndex.Script,
                        errorMask: errorMask));
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.Script);
                case "ENAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Enchantment_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Armor_FieldIndex.Enchantment,
                        errorMask: errorMask));
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.Enchantment);
                case "ANAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Points.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Armor_FieldIndex.Points,
                        errorMask: errorMask));
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.Points);
                case "BMDT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        var BipedFlagstryGet = Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedFlag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(2)),
                            fieldIndex: (int)Armor_FieldIndex.BipedFlags,
                            errorMask: errorMask);
                        item._BipedFlags.SetIfSucceeded(BipedFlagstryGet);
                        var FlagstryGet = Mutagen.Bethesda.Binary.EnumBinaryTranslation<Armor.ArmorFlag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(2)),
                            fieldIndex: (int)Armor_FieldIndex.Flags,
                            errorMask: errorMask);
                        item._Flags.SetIfSucceeded(FlagstryGet);
                    }
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.Flags);
                case "MODL":
                    item._MaleBipedModel.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Armor_FieldIndex.MaleBipedModel,
                        errorMask: errorMask));
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.MaleBipedModel);
                case "MOD2":
                    item._MaleWorldModel.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Armor_FieldIndex.MaleWorldModel,
                        errorMask: errorMask,
                        recordTypeConverter: Armor_Registration.MaleWorldModelConverter));
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.MaleWorldModel);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var MaleIcontryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Armor_FieldIndex.MaleIcon,
                        errorMask: errorMask);
                    item._MaleIcon.SetIfSucceeded(MaleIcontryGet);
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.MaleIcon);
                case "MOD3":
                    item._FemaleBipedModel.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Armor_FieldIndex.FemaleBipedModel,
                        errorMask: errorMask,
                        recordTypeConverter: Armor_Registration.FemaleBipedModelConverter));
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.FemaleBipedModel);
                case "MOD4":
                    item._FemaleWorldModel.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Armor_FieldIndex.FemaleWorldModel,
                        errorMask: errorMask,
                        recordTypeConverter: Armor_Registration.FemaleWorldModelConverter));
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.FemaleWorldModel);
                case "ICO2":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var FemaleIcontryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Armor_FieldIndex.FemaleIcon,
                        errorMask: errorMask);
                    item._FemaleIcon.SetIfSucceeded(FemaleIcontryGet);
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.FemaleIcon);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        FillBinary_ArmorValue_Custom(
                            frame: dataFrame,
                            item: item,
                            fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                            errorMask: errorMask);
                        item._Value.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Armor_FieldIndex.Value,
                            errorMask: errorMask));
                        item._Health.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Armor_FieldIndex.Health,
                            errorMask: errorMask));
                        item._Weight.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Armor_FieldIndex.Weight,
                            errorMask: errorMask));
                    }
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.Weight);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => ArmorCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Armor Copy(
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            return Armor.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Armor Copy(
            IArmor item,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            Armor ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor();
            }
            else
            {
                ret = (Armor)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
            where CopyType : class, IArmor
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Armor Copy_ToLoqui(
            IArmorGetter item,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            Armor ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor() as Armor;
            }
            else
            {
                ret = (Armor)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Enchantment:
                    this.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Points:
                    this._Points.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.BipedFlags:
                    this._BipedFlags.Set(
                        (BipedFlag)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Flags:
                    this._Flags.Set(
                        (Armor.ArmorFlag)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.MaleBipedModel:
                    this._MaleBipedModel.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.MaleWorldModel:
                    this._MaleWorldModel.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.MaleIcon:
                    this._MaleIcon.Set(
                        (String)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.FemaleBipedModel:
                    this._FemaleBipedModel.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.FemaleWorldModel:
                    this._FemaleWorldModel.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.FemaleIcon:
                    this._FemaleIcon.Set(
                        (String)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.ArmorValue:
                    this._ArmorValue.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Value:
                    this._Value.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Health:
                    this._Health.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Weight:
                    this._Weight.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ArmorCommon.Clear(this, cmds);
        }


        public new static Armor Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Armor();
            foreach (var pair in fields)
            {
                CopyInInternal_Armor(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Armor(Armor obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Armor_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Points:
                    obj._Points.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.BipedFlags:
                    obj._BipedFlags.Set(
                        (BipedFlag)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Armor.ArmorFlag)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.MaleBipedModel:
                    obj._MaleBipedModel.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.MaleWorldModel:
                    obj._MaleWorldModel.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.MaleIcon:
                    obj._MaleIcon.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.FemaleBipedModel:
                    obj._FemaleBipedModel.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.FemaleWorldModel:
                    obj._FemaleWorldModel.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.FemaleIcon:
                    obj._FemaleIcon.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.ArmorValue:
                    obj._ArmorValue.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Value:
                    obj._Value.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Health:
                    obj._Health.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Weight:
                    obj._Weight.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Armor obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IArmor : IArmorGetter, INamedMajorRecord, ILoquiClass<IArmor, IArmorGetter>, ILoquiClass<Armor, IArmorGetter>
    {
        new Script Script { get; set; }
        new Enchantment Enchantment { get; set; }
        new UInt16 Points { get; set; }
        new INotifyingSetItem<UInt16> Points_Property { get; }

        new BipedFlag BipedFlags { get; set; }
        new INotifyingSetItem<BipedFlag> BipedFlags_Property { get; }

        new Armor.ArmorFlag Flags { get; set; }
        new INotifyingSetItem<Armor.ArmorFlag> Flags_Property { get; }

        new Model MaleBipedModel { get; set; }
        new INotifyingSetItem<Model> MaleBipedModel_Property { get; }

        new Model MaleWorldModel { get; set; }
        new INotifyingSetItem<Model> MaleWorldModel_Property { get; }

        new String MaleIcon { get; set; }
        new INotifyingSetItem<String> MaleIcon_Property { get; }

        new Model FemaleBipedModel { get; set; }
        new INotifyingSetItem<Model> FemaleBipedModel_Property { get; }

        new Model FemaleWorldModel { get; set; }
        new INotifyingSetItem<Model> FemaleWorldModel_Property { get; }

        new String FemaleIcon { get; set; }
        new INotifyingSetItem<String> FemaleIcon_Property { get; }

        new Single ArmorValue { get; set; }
        new INotifyingSetItem<Single> ArmorValue_Property { get; }

        new UInt32 Value { get; set; }
        new INotifyingSetItem<UInt32> Value_Property { get; }

        new UInt32 Health { get; set; }
        new INotifyingSetItem<UInt32> Health_Property { get; }

        new UInt32 Weight { get; set; }
        new INotifyingSetItem<UInt32> Weight_Property { get; }

    }

    public interface IArmorGetter : INamedMajorRecordGetter
    {
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Enchantment
        Enchantment Enchantment { get; }
        FormIDSetLink<Enchantment> Enchantment_Property { get; }

        #endregion
        #region Points
        UInt16 Points { get; }
        INotifyingSetItemGetter<UInt16> Points_Property { get; }

        #endregion
        #region BipedFlags
        BipedFlag BipedFlags { get; }
        INotifyingSetItemGetter<BipedFlag> BipedFlags_Property { get; }

        #endregion
        #region Flags
        Armor.ArmorFlag Flags { get; }
        INotifyingSetItemGetter<Armor.ArmorFlag> Flags_Property { get; }

        #endregion
        #region MaleBipedModel
        Model MaleBipedModel { get; }
        INotifyingSetItemGetter<Model> MaleBipedModel_Property { get; }

        #endregion
        #region MaleWorldModel
        Model MaleWorldModel { get; }
        INotifyingSetItemGetter<Model> MaleWorldModel_Property { get; }

        #endregion
        #region MaleIcon
        String MaleIcon { get; }
        INotifyingSetItemGetter<String> MaleIcon_Property { get; }

        #endregion
        #region FemaleBipedModel
        Model FemaleBipedModel { get; }
        INotifyingSetItemGetter<Model> FemaleBipedModel_Property { get; }

        #endregion
        #region FemaleWorldModel
        Model FemaleWorldModel { get; }
        INotifyingSetItemGetter<Model> FemaleWorldModel_Property { get; }

        #endregion
        #region FemaleIcon
        String FemaleIcon { get; }
        INotifyingSetItemGetter<String> FemaleIcon_Property { get; }

        #endregion
        #region ArmorValue
        Single ArmorValue { get; }
        INotifyingSetItemGetter<Single> ArmorValue_Property { get; }

        #endregion
        #region Value
        UInt32 Value { get; }
        INotifyingSetItemGetter<UInt32> Value_Property { get; }

        #endregion
        #region Health
        UInt32 Health { get; }
        INotifyingSetItemGetter<UInt32> Health_Property { get; }

        #endregion
        #region Weight
        UInt32 Weight { get; }
        INotifyingSetItemGetter<UInt32> Weight_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Armor_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        Points = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        ArmorValue = 17,
        Value = 18,
        Health = 19,
        Weight = 20,
    }
    #endregion

    #region Registration
    public class Armor_Registration : ILoquiRegistration
    {
        public static readonly Armor_Registration Instance = new Armor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 67,
            version: 0);

        public const string GUID = "484e38f3-afde-4661-9c39-a8bc1e92eb99";

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(Armor_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Armor_ErrorMask);

        public static readonly Type ClassType = typeof(Armor);

        public static readonly Type GetterType = typeof(IArmorGetter);

        public static readonly Type SetterType = typeof(IArmor);

        public static readonly Type CommonType = typeof(ArmorCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Armor";

        public const string Name = "Armor";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SCRIPT":
                    return (ushort)Armor_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)Armor_FieldIndex.Enchantment;
                case "POINTS":
                    return (ushort)Armor_FieldIndex.Points;
                case "BIPEDFLAGS":
                    return (ushort)Armor_FieldIndex.BipedFlags;
                case "FLAGS":
                    return (ushort)Armor_FieldIndex.Flags;
                case "MALEBIPEDMODEL":
                    return (ushort)Armor_FieldIndex.MaleBipedModel;
                case "MALEWORLDMODEL":
                    return (ushort)Armor_FieldIndex.MaleWorldModel;
                case "MALEICON":
                    return (ushort)Armor_FieldIndex.MaleIcon;
                case "FEMALEBIPEDMODEL":
                    return (ushort)Armor_FieldIndex.FemaleBipedModel;
                case "FEMALEWORLDMODEL":
                    return (ushort)Armor_FieldIndex.FemaleWorldModel;
                case "FEMALEICON":
                    return (ushort)Armor_FieldIndex.FemaleIcon;
                case "ARMORVALUE":
                    return (ushort)Armor_FieldIndex.ArmorValue;
                case "VALUE":
                    return (ushort)Armor_FieldIndex.Value;
                case "HEALTH":
                    return (ushort)Armor_FieldIndex.Health;
                case "WEIGHT":
                    return (ushort)Armor_FieldIndex.Weight;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                case Armor_FieldIndex.Enchantment:
                case Armor_FieldIndex.Points:
                case Armor_FieldIndex.BipedFlags:
                case Armor_FieldIndex.Flags:
                case Armor_FieldIndex.MaleBipedModel:
                case Armor_FieldIndex.MaleWorldModel:
                case Armor_FieldIndex.MaleIcon:
                case Armor_FieldIndex.FemaleBipedModel:
                case Armor_FieldIndex.FemaleWorldModel:
                case Armor_FieldIndex.FemaleIcon:
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.MaleBipedModel:
                case Armor_FieldIndex.MaleWorldModel:
                case Armor_FieldIndex.FemaleBipedModel:
                case Armor_FieldIndex.FemaleWorldModel:
                    return true;
                case Armor_FieldIndex.Script:
                case Armor_FieldIndex.Enchantment:
                case Armor_FieldIndex.Points:
                case Armor_FieldIndex.BipedFlags:
                case Armor_FieldIndex.Flags:
                case Armor_FieldIndex.MaleIcon:
                case Armor_FieldIndex.FemaleIcon:
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                case Armor_FieldIndex.Enchantment:
                case Armor_FieldIndex.Points:
                case Armor_FieldIndex.BipedFlags:
                case Armor_FieldIndex.Flags:
                case Armor_FieldIndex.MaleBipedModel:
                case Armor_FieldIndex.MaleWorldModel:
                case Armor_FieldIndex.MaleIcon:
                case Armor_FieldIndex.FemaleBipedModel:
                case Armor_FieldIndex.FemaleWorldModel:
                case Armor_FieldIndex.FemaleIcon:
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    return "Script";
                case Armor_FieldIndex.Enchantment:
                    return "Enchantment";
                case Armor_FieldIndex.Points:
                    return "Points";
                case Armor_FieldIndex.BipedFlags:
                    return "BipedFlags";
                case Armor_FieldIndex.Flags:
                    return "Flags";
                case Armor_FieldIndex.MaleBipedModel:
                    return "MaleBipedModel";
                case Armor_FieldIndex.MaleWorldModel:
                    return "MaleWorldModel";
                case Armor_FieldIndex.MaleIcon:
                    return "MaleIcon";
                case Armor_FieldIndex.FemaleBipedModel:
                    return "FemaleBipedModel";
                case Armor_FieldIndex.FemaleWorldModel:
                    return "FemaleWorldModel";
                case Armor_FieldIndex.FemaleIcon:
                    return "FemaleIcon";
                case Armor_FieldIndex.ArmorValue:
                    return "ArmorValue";
                case Armor_FieldIndex.Value:
                    return "Value";
                case Armor_FieldIndex.Health:
                    return "Health";
                case Armor_FieldIndex.Weight:
                    return "Weight";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                case Armor_FieldIndex.Enchantment:
                case Armor_FieldIndex.Points:
                case Armor_FieldIndex.BipedFlags:
                case Armor_FieldIndex.Flags:
                case Armor_FieldIndex.MaleBipedModel:
                case Armor_FieldIndex.MaleWorldModel:
                case Armor_FieldIndex.MaleIcon:
                case Armor_FieldIndex.FemaleBipedModel:
                case Armor_FieldIndex.FemaleWorldModel:
                case Armor_FieldIndex.FemaleIcon:
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                case Armor_FieldIndex.Enchantment:
                case Armor_FieldIndex.Points:
                case Armor_FieldIndex.BipedFlags:
                case Armor_FieldIndex.Flags:
                case Armor_FieldIndex.MaleBipedModel:
                case Armor_FieldIndex.MaleWorldModel:
                case Armor_FieldIndex.MaleIcon:
                case Armor_FieldIndex.FemaleBipedModel:
                case Armor_FieldIndex.FemaleWorldModel:
                case Armor_FieldIndex.FemaleIcon:
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Armor_FieldIndex.Enchantment:
                    return typeof(FormIDSetLink<Enchantment>);
                case Armor_FieldIndex.Points:
                    return typeof(UInt16);
                case Armor_FieldIndex.BipedFlags:
                    return typeof(BipedFlag);
                case Armor_FieldIndex.Flags:
                    return typeof(Armor.ArmorFlag);
                case Armor_FieldIndex.MaleBipedModel:
                    return typeof(Model);
                case Armor_FieldIndex.MaleWorldModel:
                    return typeof(Model);
                case Armor_FieldIndex.MaleIcon:
                    return typeof(String);
                case Armor_FieldIndex.FemaleBipedModel:
                    return typeof(Model);
                case Armor_FieldIndex.FemaleWorldModel:
                    return typeof(Model);
                case Armor_FieldIndex.FemaleIcon:
                    return typeof(String);
                case Armor_FieldIndex.ArmorValue:
                    return typeof(Single);
                case Armor_FieldIndex.Value:
                    return typeof(UInt32);
                case Armor_FieldIndex.Health:
                    return typeof(UInt32);
                case Armor_FieldIndex.Weight:
                    return typeof(UInt32);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MOD2_HEADER = new RecordType("MOD2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MOD3_HEADER = new RecordType("MOD3");
        public static readonly RecordType MOD4_HEADER = new RecordType("MOD4");
        public static readonly RecordType ICO2_HEADER = new RecordType("ICO2");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ARMO_HEADER;
        public static RecordTypeConverter MaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD2"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO2B"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO2T"))
            );
        public static RecordTypeConverter FemaleBipedModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD3"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO3B"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO3T"))
            );
        public static RecordTypeConverter FemaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD4"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO4B"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO4T"))
            );
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ArmorCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IArmor item,
            IArmorGetter rhs,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ArmorCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IArmor item,
            IArmorGetter rhs,
            out Armor_ErrorMask errorMask,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ArmorCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IArmor item,
            IArmorGetter rhs,
            IArmorGetter def,
            bool doMasks,
            out Armor_ErrorMask errorMask,
            Armor_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Armor_ErrorMask retErrorMask = null;
            Func<Armor_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Armor_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IArmor item,
            IArmorGetter rhs,
            IArmorGetter def,
            bool doMasks,
            Func<Armor_ErrorMask> errorMask,
            Armor_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Script ?? true)
            {
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Script, ex);
                }
            }
            if (copyMask?.Enchantment ?? true)
            {
                try
                {
                    item.Enchantment_Property.SetToWithDefault(
                        rhs: rhs.Enchantment_Property,
                        def: def?.Enchantment_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Enchantment, ex);
                }
            }
            if (copyMask?.Points ?? true)
            {
                try
                {
                    item.Points_Property.SetToWithDefault(
                        rhs: rhs.Points_Property,
                        def: def?.Points_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Points, ex);
                }
            }
            if (copyMask?.BipedFlags ?? true)
            {
                try
                {
                    item.BipedFlags_Property.SetToWithDefault(
                        rhs: rhs.BipedFlags_Property,
                        def: def?.BipedFlags_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.BipedFlags, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs: rhs.Flags_Property,
                        def: def?.Flags_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.MaleBipedModel.Overall != CopyOption.Skip)
            {
                try
                {
                    item.MaleBipedModel_Property.SetToWithDefault(
                        rhs.MaleBipedModel_Property,
                        def?.MaleBipedModel_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.MaleBipedModel.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.MaleBipedModel,
                                        rhs: rhs.MaleBipedModel,
                                        def: def?.MaleBipedModel,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.MaleBipedModel.Specific == null)
                                            {
                                                baseMask.MaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.MaleBipedModel.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.MaleBipedModel.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.MaleBipedModel?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MaleBipedModel?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.MaleBipedModel, ex);
                }
            }
            if (copyMask?.MaleWorldModel.Overall != CopyOption.Skip)
            {
                try
                {
                    item.MaleWorldModel_Property.SetToWithDefault(
                        rhs.MaleWorldModel_Property,
                        def?.MaleWorldModel_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.MaleWorldModel.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.MaleWorldModel,
                                        rhs: rhs.MaleWorldModel,
                                        def: def?.MaleWorldModel,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.MaleWorldModel.Specific == null)
                                            {
                                                baseMask.MaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.MaleWorldModel.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.MaleWorldModel.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.MaleWorldModel?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MaleWorldModel?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.MaleWorldModel, ex);
                }
            }
            if (copyMask?.MaleIcon ?? true)
            {
                try
                {
                    item.MaleIcon_Property.SetToWithDefault(
                        rhs: rhs.MaleIcon_Property,
                        def: def?.MaleIcon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.MaleIcon, ex);
                }
            }
            if (copyMask?.FemaleBipedModel.Overall != CopyOption.Skip)
            {
                try
                {
                    item.FemaleBipedModel_Property.SetToWithDefault(
                        rhs.FemaleBipedModel_Property,
                        def?.FemaleBipedModel_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.FemaleBipedModel.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.FemaleBipedModel,
                                        rhs: rhs.FemaleBipedModel,
                                        def: def?.FemaleBipedModel,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.FemaleBipedModel.Specific == null)
                                            {
                                                baseMask.FemaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.FemaleBipedModel.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.FemaleBipedModel.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.FemaleBipedModel?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FemaleBipedModel?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.FemaleBipedModel, ex);
                }
            }
            if (copyMask?.FemaleWorldModel.Overall != CopyOption.Skip)
            {
                try
                {
                    item.FemaleWorldModel_Property.SetToWithDefault(
                        rhs.FemaleWorldModel_Property,
                        def?.FemaleWorldModel_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.FemaleWorldModel.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.FemaleWorldModel,
                                        rhs: rhs.FemaleWorldModel,
                                        def: def?.FemaleWorldModel,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.FemaleWorldModel.Specific == null)
                                            {
                                                baseMask.FemaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.FemaleWorldModel.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.FemaleWorldModel.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.FemaleWorldModel?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FemaleWorldModel?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.FemaleWorldModel, ex);
                }
            }
            if (copyMask?.FemaleIcon ?? true)
            {
                try
                {
                    item.FemaleIcon_Property.SetToWithDefault(
                        rhs: rhs.FemaleIcon_Property,
                        def: def?.FemaleIcon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.FemaleIcon, ex);
                }
            }
            if (copyMask?.ArmorValue ?? true)
            {
                try
                {
                    item.ArmorValue_Property.SetToWithDefault(
                        rhs: rhs.ArmorValue_Property,
                        def: def?.ArmorValue_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.ArmorValue, ex);
                }
            }
            if (copyMask?.Value ?? true)
            {
                try
                {
                    item.Value_Property.SetToWithDefault(
                        rhs: rhs.Value_Property,
                        def: def?.Value_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Value, ex);
                }
            }
            if (copyMask?.Health ?? true)
            {
                try
                {
                    item.Health_Property.SetToWithDefault(
                        rhs: rhs.Health_Property,
                        def: def?.Health_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Health, ex);
                }
            }
            if (copyMask?.Weight ?? true)
            {
                try
                {
                    item.Weight_Property.SetToWithDefault(
                        rhs: rhs.Weight_Property,
                        def: def?.Weight_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Weight, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IArmor obj,
            NotifyingFireParameters? cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.Enchantment:
                    obj.Enchantment_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.Points:
                    obj.Points_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.BipedFlags:
                    obj.BipedFlags_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.MaleBipedModel:
                    obj.MaleBipedModel_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.MaleWorldModel:
                    obj.MaleWorldModel_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.MaleIcon:
                    obj.MaleIcon_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.FemaleBipedModel:
                    obj.FemaleBipedModel_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.FemaleWorldModel:
                    obj.FemaleWorldModel_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.FemaleIcon:
                    obj.FemaleIcon_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.ArmorValue:
                    obj.ArmorValue_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.Value:
                    obj.Value_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.Health:
                    obj.Health_Property.HasBeenSet = on;
                    break;
                case Armor_FieldIndex.Weight:
                    obj.Weight_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IArmor obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.Points:
                    obj.Points_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.BipedFlags:
                    obj.BipedFlags_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.MaleBipedModel:
                    obj.MaleBipedModel_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.MaleWorldModel:
                    obj.MaleWorldModel_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.MaleIcon:
                    obj.MaleIcon_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.FemaleBipedModel:
                    obj.FemaleBipedModel_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.FemaleWorldModel:
                    obj.FemaleWorldModel_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.FemaleIcon:
                    obj.FemaleIcon_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.ArmorValue:
                    obj.ArmorValue_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.Value:
                    obj.Value_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.Health:
                    obj.Health_Property.Unset(cmds);
                    break;
                case Armor_FieldIndex.Weight:
                    obj.Weight_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IArmor obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case Armor_FieldIndex.Enchantment:
                    return obj.Enchantment_Property.HasBeenSet;
                case Armor_FieldIndex.Points:
                    return obj.Points_Property.HasBeenSet;
                case Armor_FieldIndex.BipedFlags:
                    return obj.BipedFlags_Property.HasBeenSet;
                case Armor_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case Armor_FieldIndex.MaleBipedModel:
                    return obj.MaleBipedModel_Property.HasBeenSet;
                case Armor_FieldIndex.MaleWorldModel:
                    return obj.MaleWorldModel_Property.HasBeenSet;
                case Armor_FieldIndex.MaleIcon:
                    return obj.MaleIcon_Property.HasBeenSet;
                case Armor_FieldIndex.FemaleBipedModel:
                    return obj.FemaleBipedModel_Property.HasBeenSet;
                case Armor_FieldIndex.FemaleWorldModel:
                    return obj.FemaleWorldModel_Property.HasBeenSet;
                case Armor_FieldIndex.FemaleIcon:
                    return obj.FemaleIcon_Property.HasBeenSet;
                case Armor_FieldIndex.ArmorValue:
                    return obj.ArmorValue_Property.HasBeenSet;
                case Armor_FieldIndex.Value:
                    return obj.Value_Property.HasBeenSet;
                case Armor_FieldIndex.Health:
                    return obj.Health_Property.HasBeenSet;
                case Armor_FieldIndex.Weight:
                    return obj.Weight_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IArmorGetter obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    return obj.Script;
                case Armor_FieldIndex.Enchantment:
                    return obj.Enchantment;
                case Armor_FieldIndex.Points:
                    return obj.Points;
                case Armor_FieldIndex.BipedFlags:
                    return obj.BipedFlags;
                case Armor_FieldIndex.Flags:
                    return obj.Flags;
                case Armor_FieldIndex.MaleBipedModel:
                    return obj.MaleBipedModel;
                case Armor_FieldIndex.MaleWorldModel:
                    return obj.MaleWorldModel;
                case Armor_FieldIndex.MaleIcon:
                    return obj.MaleIcon;
                case Armor_FieldIndex.FemaleBipedModel:
                    return obj.FemaleBipedModel;
                case Armor_FieldIndex.FemaleWorldModel:
                    return obj.FemaleWorldModel;
                case Armor_FieldIndex.FemaleIcon:
                    return obj.FemaleIcon;
                case Armor_FieldIndex.ArmorValue:
                    return obj.ArmorValue;
                case Armor_FieldIndex.Value:
                    return obj.Value;
                case Armor_FieldIndex.Health:
                    return obj.Health;
                case Armor_FieldIndex.Weight:
                    return obj.Weight;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IArmor item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Enchantment_Property.Unset(cmds.ToUnsetParams());
            item.Points_Property.Unset(cmds.ToUnsetParams());
            item.BipedFlags_Property.Unset(cmds.ToUnsetParams());
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.MaleBipedModel_Property.Unset(cmds.ToUnsetParams());
            item.MaleWorldModel_Property.Unset(cmds.ToUnsetParams());
            item.MaleIcon_Property.Unset(cmds.ToUnsetParams());
            item.FemaleBipedModel_Property.Unset(cmds.ToUnsetParams());
            item.FemaleWorldModel_Property.Unset(cmds.ToUnsetParams());
            item.FemaleIcon_Property.Unset(cmds.ToUnsetParams());
            item.ArmorValue_Property.Unset(cmds.ToUnsetParams());
            item.Value_Property.Unset(cmds.ToUnsetParams());
            item.Health_Property.Unset(cmds.ToUnsetParams());
            item.Weight_Property.Unset(cmds.ToUnsetParams());
        }

        public static Armor_Mask<bool> GetEqualsMask(
            this IArmorGetter item,
            IArmorGetter rhs)
        {
            var ret = new Armor_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            Armor_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Enchantment = item.Enchantment_Property.Equals(rhs.Enchantment_Property, (l, r) => l == r);
            ret.Points = item.Points_Property.Equals(rhs.Points_Property, (l, r) => l == r);
            ret.BipedFlags = item.BipedFlags_Property.Equals(rhs.BipedFlags_Property, (l, r) => l == r);
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            ret.MaleBipedModel = item.MaleBipedModel_Property.LoquiEqualsHelper(rhs.MaleBipedModel_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.MaleWorldModel = item.MaleWorldModel_Property.LoquiEqualsHelper(rhs.MaleWorldModel_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.MaleIcon = item.MaleIcon_Property.Equals(rhs.MaleIcon_Property, (l, r) => object.Equals(l, r));
            ret.FemaleBipedModel = item.FemaleBipedModel_Property.LoquiEqualsHelper(rhs.FemaleBipedModel_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.FemaleWorldModel = item.FemaleWorldModel_Property.LoquiEqualsHelper(rhs.FemaleWorldModel_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.FemaleIcon = item.FemaleIcon_Property.Equals(rhs.FemaleIcon_Property, (l, r) => object.Equals(l, r));
            ret.ArmorValue = item.ArmorValue_Property.Equals(rhs.ArmorValue_Property, (l, r) => l == r);
            ret.Value = item.Value_Property.Equals(rhs.Value_Property, (l, r) => l == r);
            ret.Health = item.Health_Property.Equals(rhs.Health_Property, (l, r) => l == r);
            ret.Weight = item.Weight_Property.Equals(rhs.Weight_Property, (l, r) => l == r);
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IArmorGetter item,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IArmorGetter item,
            FileGeneration fg,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Armor)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Armor)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {item.Enchantment}");
                }
                if (printMask?.Points ?? true)
                {
                    fg.AppendLine($"Points => {item.Points}");
                }
                if (printMask?.BipedFlags ?? true)
                {
                    fg.AppendLine($"BipedFlags => {item.BipedFlags}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.MaleBipedModel?.Overall ?? true)
                {
                    item.MaleBipedModel?.ToString(fg, "MaleBipedModel");
                }
                if (printMask?.MaleWorldModel?.Overall ?? true)
                {
                    item.MaleWorldModel?.ToString(fg, "MaleWorldModel");
                }
                if (printMask?.MaleIcon ?? true)
                {
                    fg.AppendLine($"MaleIcon => {item.MaleIcon}");
                }
                if (printMask?.FemaleBipedModel?.Overall ?? true)
                {
                    item.FemaleBipedModel?.ToString(fg, "FemaleBipedModel");
                }
                if (printMask?.FemaleWorldModel?.Overall ?? true)
                {
                    item.FemaleWorldModel?.ToString(fg, "FemaleWorldModel");
                }
                if (printMask?.FemaleIcon ?? true)
                {
                    fg.AppendLine($"FemaleIcon => {item.FemaleIcon}");
                }
                if (printMask?.ArmorValue ?? true)
                {
                    fg.AppendLine($"ArmorValue => {item.ArmorValue}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IArmorGetter item,
            Armor_Mask<bool?> checkMask)
        {
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment_Property.HasBeenSet) return false;
            if (checkMask.Points.HasValue && checkMask.Points.Value != item.Points_Property.HasBeenSet) return false;
            if (checkMask.BipedFlags.HasValue && checkMask.BipedFlags.Value != item.BipedFlags_Property.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.MaleBipedModel.Overall.HasValue && checkMask.MaleBipedModel.Overall.Value != item.MaleBipedModel_Property.HasBeenSet) return false;
            if (checkMask.MaleBipedModel.Specific != null && (item.MaleBipedModel_Property.Item == null || !item.MaleBipedModel_Property.Item.HasBeenSet(checkMask.MaleBipedModel.Specific))) return false;
            if (checkMask.MaleWorldModel.Overall.HasValue && checkMask.MaleWorldModel.Overall.Value != item.MaleWorldModel_Property.HasBeenSet) return false;
            if (checkMask.MaleWorldModel.Specific != null && (item.MaleWorldModel_Property.Item == null || !item.MaleWorldModel_Property.Item.HasBeenSet(checkMask.MaleWorldModel.Specific))) return false;
            if (checkMask.MaleIcon.HasValue && checkMask.MaleIcon.Value != item.MaleIcon_Property.HasBeenSet) return false;
            if (checkMask.FemaleBipedModel.Overall.HasValue && checkMask.FemaleBipedModel.Overall.Value != item.FemaleBipedModel_Property.HasBeenSet) return false;
            if (checkMask.FemaleBipedModel.Specific != null && (item.FemaleBipedModel_Property.Item == null || !item.FemaleBipedModel_Property.Item.HasBeenSet(checkMask.FemaleBipedModel.Specific))) return false;
            if (checkMask.FemaleWorldModel.Overall.HasValue && checkMask.FemaleWorldModel.Overall.Value != item.FemaleWorldModel_Property.HasBeenSet) return false;
            if (checkMask.FemaleWorldModel.Specific != null && (item.FemaleWorldModel_Property.Item == null || !item.FemaleWorldModel_Property.Item.HasBeenSet(checkMask.FemaleWorldModel.Specific))) return false;
            if (checkMask.FemaleIcon.HasValue && checkMask.FemaleIcon.Value != item.FemaleIcon_Property.HasBeenSet) return false;
            if (checkMask.ArmorValue.HasValue && checkMask.ArmorValue.Value != item.ArmorValue_Property.HasBeenSet) return false;
            if (checkMask.Value.HasValue && checkMask.Value.Value != item.Value_Property.HasBeenSet) return false;
            if (checkMask.Health.HasValue && checkMask.Health.Value != item.Health_Property.HasBeenSet) return false;
            if (checkMask.Weight.HasValue && checkMask.Weight.Value != item.Weight_Property.HasBeenSet) return false;
            return true;
        }

        public static Armor_Mask<bool> GetHasBeenSetMask(IArmorGetter item)
        {
            var ret = new Armor_Mask<bool>();
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Enchantment = item.Enchantment_Property.HasBeenSet;
            ret.Points = item.Points_Property.HasBeenSet;
            ret.BipedFlags = item.BipedFlags_Property.HasBeenSet;
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.MaleBipedModel = new MaskItem<bool, Model_Mask<bool>>(item.MaleBipedModel_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.MaleBipedModel_Property.Item));
            ret.MaleWorldModel = new MaskItem<bool, Model_Mask<bool>>(item.MaleWorldModel_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.MaleWorldModel_Property.Item));
            ret.MaleIcon = item.MaleIcon_Property.HasBeenSet;
            ret.FemaleBipedModel = new MaskItem<bool, Model_Mask<bool>>(item.FemaleBipedModel_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.FemaleBipedModel_Property.Item));
            ret.FemaleWorldModel = new MaskItem<bool, Model_Mask<bool>>(item.FemaleWorldModel_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.FemaleWorldModel_Property.Item));
            ret.FemaleIcon = item.FemaleIcon_Property.HasBeenSet;
            ret.ArmorValue = item.ArmorValue_Property.HasBeenSet;
            ret.Value = item.Value_Property.HasBeenSet;
            ret.Health = item.Health_Property.HasBeenSet;
            ret.Weight = item.Weight_Property.HasBeenSet;
            return ret;
        }

        public static Armor_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Armor_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Armor_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Armor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IArmorGetter item,
            bool doMasks,
            out Armor_ErrorMask errorMask,
            string name = null)
        {
            Armor_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Armor_ErrorMask()) : default(Func<Armor_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IArmorGetter item,
            Func<Armor_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Armor"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Armor");
                    }
                    if (item.Script_Property.HasBeenSet)
                    {
                        RawFormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Script),
                            item: item.Script?.FormID,
                            fieldIndex: (int)Armor_FieldIndex.Script,
                            errorMask: errorMask);
                    }
                    if (item.Enchantment_Property.HasBeenSet)
                    {
                        RawFormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Enchantment),
                            item: item.Enchantment?.FormID,
                            fieldIndex: (int)Armor_FieldIndex.Enchantment,
                            errorMask: errorMask);
                    }
                    if (item.Points_Property.HasBeenSet)
                    {
                        UInt16XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Points),
                            item: item.Points_Property,
                            fieldIndex: (int)Armor_FieldIndex.Points,
                            errorMask: errorMask);
                    }
                    if (item.BipedFlags_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<BipedFlag>.Instance.Write(
                            writer: writer,
                            name: nameof(item.BipedFlags),
                            item: item.BipedFlags_Property,
                            fieldIndex: (int)Armor_FieldIndex.BipedFlags,
                            errorMask: errorMask);
                    }
                    if (item.Flags_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<Armor.ArmorFlag>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Flags),
                            item: item.Flags_Property,
                            fieldIndex: (int)Armor_FieldIndex.Flags,
                            errorMask: errorMask);
                    }
                    if (item.MaleBipedModel_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.MaleBipedModel_Property,
                            name: nameof(item.MaleBipedModel),
                            fieldIndex: (int)Armor_FieldIndex.MaleBipedModel,
                            errorMask: errorMask);
                    }
                    if (item.MaleWorldModel_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.MaleWorldModel_Property,
                            name: nameof(item.MaleWorldModel),
                            fieldIndex: (int)Armor_FieldIndex.MaleWorldModel,
                            errorMask: errorMask);
                    }
                    if (item.MaleIcon_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.MaleIcon),
                            item: item.MaleIcon_Property,
                            fieldIndex: (int)Armor_FieldIndex.MaleIcon,
                            errorMask: errorMask);
                    }
                    if (item.FemaleBipedModel_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.FemaleBipedModel_Property,
                            name: nameof(item.FemaleBipedModel),
                            fieldIndex: (int)Armor_FieldIndex.FemaleBipedModel,
                            errorMask: errorMask);
                    }
                    if (item.FemaleWorldModel_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.FemaleWorldModel_Property,
                            name: nameof(item.FemaleWorldModel),
                            fieldIndex: (int)Armor_FieldIndex.FemaleWorldModel,
                            errorMask: errorMask);
                    }
                    if (item.FemaleIcon_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.FemaleIcon),
                            item: item.FemaleIcon_Property,
                            fieldIndex: (int)Armor_FieldIndex.FemaleIcon,
                            errorMask: errorMask);
                    }
                    if (item.ArmorValue_Property.HasBeenSet)
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.ArmorValue),
                            item: item.ArmorValue_Property,
                            fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                            errorMask: errorMask);
                    }
                    if (item.Value_Property.HasBeenSet)
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Value),
                            item: item.Value_Property,
                            fieldIndex: (int)Armor_FieldIndex.Value,
                            errorMask: errorMask);
                    }
                    if (item.Health_Property.HasBeenSet)
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Health),
                            item: item.Health_Property,
                            fieldIndex: (int)Armor_FieldIndex.Health,
                            errorMask: errorMask);
                    }
                    if (item.Weight_Property.HasBeenSet)
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Weight),
                            item: item.Weight_Property,
                            fieldIndex: (int)Armor_FieldIndex.Weight,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IArmorGetter item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Armor_ErrorMask errorMask)
        {
            Armor_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Armor_ErrorMask()) : default(Func<Armor_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IArmorGetter item,
            RecordTypeConverter recordTypeConverter,
            Func<Armor_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Armor_Registration.ARMO_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IArmorGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Armor_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)Armor_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Armor_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Enchantment_Property,
                fieldIndex: (int)Armor_FieldIndex.Enchantment,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Armor_Registration.ENAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Points_Property,
                fieldIndex: (int)Armor_FieldIndex.Points,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Armor_Registration.ANAM_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, Armor_Registration.BMDT_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedFlag>.Instance.Write(
                    writer,
                    item.BipedFlags_Property,
                    length: new ContentLength(2),
                    fieldIndex: (int)Armor_FieldIndex.BipedFlags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Armor.ArmorFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: new ContentLength(2),
                    fieldIndex: (int)Armor_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.MaleBipedModel_Property,
                fieldIndex: (int)Armor_FieldIndex.MaleBipedModel,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.MaleWorldModel_Property,
                fieldIndex: (int)Armor_FieldIndex.MaleWorldModel,
                errorMask: errorMask,
                recordTypeConverter: Armor_Registration.MaleWorldModelConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaleIcon_Property,
                fieldIndex: (int)Armor_FieldIndex.MaleIcon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Armor_Registration.ICON_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.FemaleBipedModel_Property,
                fieldIndex: (int)Armor_FieldIndex.FemaleBipedModel,
                errorMask: errorMask,
                recordTypeConverter: Armor_Registration.FemaleBipedModelConverter);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.FemaleWorldModel_Property,
                fieldIndex: (int)Armor_FieldIndex.FemaleWorldModel,
                errorMask: errorMask,
                recordTypeConverter: Armor_Registration.FemaleWorldModelConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FemaleIcon_Property,
                fieldIndex: (int)Armor_FieldIndex.FemaleIcon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Armor_Registration.ICO2_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, Armor_Registration.DATA_HEADER))
            {
                Armor.WriteBinary_ArmorValue(
                    writer: writer,
                    item: item,
                    fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Value_Property,
                    fieldIndex: (int)Armor_FieldIndex.Value,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Health_Property,
                    fieldIndex: (int)Armor_FieldIndex.Health,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight_Property,
                    fieldIndex: (int)Armor_FieldIndex.Weight,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Armor_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Armor_Mask<T>>
    {
        #region Ctors
        public Armor_Mask()
        {
        }

        public Armor_Mask(T initialValue)
        {
            this.Script = initialValue;
            this.Enchantment = initialValue;
            this.Points = initialValue;
            this.BipedFlags = initialValue;
            this.Flags = initialValue;
            this.MaleBipedModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.MaleWorldModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.MaleIcon = initialValue;
            this.FemaleBipedModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.FemaleWorldModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.FemaleIcon = initialValue;
            this.ArmorValue = initialValue;
            this.Value = initialValue;
            this.Health = initialValue;
            this.Weight = initialValue;
        }
        #endregion

        #region Members
        public T Script;
        public T Enchantment;
        public T Points;
        public T BipedFlags;
        public T Flags;
        public MaskItem<T, Model_Mask<T>> MaleBipedModel { get; set; }
        public MaskItem<T, Model_Mask<T>> MaleWorldModel { get; set; }
        public T MaleIcon;
        public MaskItem<T, Model_Mask<T>> FemaleBipedModel { get; set; }
        public MaskItem<T, Model_Mask<T>> FemaleWorldModel { get; set; }
        public T FemaleIcon;
        public T ArmorValue;
        public T Value;
        public T Health;
        public T Weight;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Armor_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
            if (!object.Equals(this.Points, rhs.Points)) return false;
            if (!object.Equals(this.BipedFlags, rhs.BipedFlags)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.MaleBipedModel, rhs.MaleBipedModel)) return false;
            if (!object.Equals(this.MaleWorldModel, rhs.MaleWorldModel)) return false;
            if (!object.Equals(this.MaleIcon, rhs.MaleIcon)) return false;
            if (!object.Equals(this.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            if (!object.Equals(this.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            if (!object.Equals(this.FemaleIcon, rhs.FemaleIcon)) return false;
            if (!object.Equals(this.ArmorValue, rhs.ArmorValue)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
            ret = ret.CombineHashCode(this.Points?.GetHashCode());
            ret = ret.CombineHashCode(this.BipedFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleBipedModel?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleWorldModel?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleIcon?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleBipedModel?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleWorldModel?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleIcon?.GetHashCode());
            ret = ret.CombineHashCode(this.ArmorValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Enchantment)) return false;
            if (!eval(this.Points)) return false;
            if (!eval(this.BipedFlags)) return false;
            if (!eval(this.Flags)) return false;
            if (MaleBipedModel != null)
            {
                if (!eval(this.MaleBipedModel.Overall)) return false;
                if (this.MaleBipedModel.Specific != null && !this.MaleBipedModel.Specific.AllEqual(eval)) return false;
            }
            if (MaleWorldModel != null)
            {
                if (!eval(this.MaleWorldModel.Overall)) return false;
                if (this.MaleWorldModel.Specific != null && !this.MaleWorldModel.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.MaleIcon)) return false;
            if (FemaleBipedModel != null)
            {
                if (!eval(this.FemaleBipedModel.Overall)) return false;
                if (this.FemaleBipedModel.Specific != null && !this.FemaleBipedModel.Specific.AllEqual(eval)) return false;
            }
            if (FemaleWorldModel != null)
            {
                if (!eval(this.FemaleWorldModel.Overall)) return false;
                if (this.FemaleWorldModel.Specific != null && !this.FemaleWorldModel.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.FemaleIcon)) return false;
            if (!eval(this.ArmorValue)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Weight)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Armor_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Armor_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Armor_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Script = eval(this.Script);
            obj.Enchantment = eval(this.Enchantment);
            obj.Points = eval(this.Points);
            obj.BipedFlags = eval(this.BipedFlags);
            obj.Flags = eval(this.Flags);
            if (this.MaleBipedModel != null)
            {
                obj.MaleBipedModel = new MaskItem<R, Model_Mask<R>>();
                obj.MaleBipedModel.Overall = eval(this.MaleBipedModel.Overall);
                if (this.MaleBipedModel.Specific != null)
                {
                    obj.MaleBipedModel.Specific = this.MaleBipedModel.Specific.Translate(eval);
                }
            }
            if (this.MaleWorldModel != null)
            {
                obj.MaleWorldModel = new MaskItem<R, Model_Mask<R>>();
                obj.MaleWorldModel.Overall = eval(this.MaleWorldModel.Overall);
                if (this.MaleWorldModel.Specific != null)
                {
                    obj.MaleWorldModel.Specific = this.MaleWorldModel.Specific.Translate(eval);
                }
            }
            obj.MaleIcon = eval(this.MaleIcon);
            if (this.FemaleBipedModel != null)
            {
                obj.FemaleBipedModel = new MaskItem<R, Model_Mask<R>>();
                obj.FemaleBipedModel.Overall = eval(this.FemaleBipedModel.Overall);
                if (this.FemaleBipedModel.Specific != null)
                {
                    obj.FemaleBipedModel.Specific = this.FemaleBipedModel.Specific.Translate(eval);
                }
            }
            if (this.FemaleWorldModel != null)
            {
                obj.FemaleWorldModel = new MaskItem<R, Model_Mask<R>>();
                obj.FemaleWorldModel.Overall = eval(this.FemaleWorldModel.Overall);
                if (this.FemaleWorldModel.Specific != null)
                {
                    obj.FemaleWorldModel.Specific = this.FemaleWorldModel.Specific.Translate(eval);
                }
            }
            obj.FemaleIcon = eval(this.FemaleIcon);
            obj.ArmorValue = eval(this.ArmorValue);
            obj.Value = eval(this.Value);
            obj.Health = eval(this.Health);
            obj.Weight = eval(this.Weight);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Armor_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Armor_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Armor_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {Enchantment}");
                }
                if (printMask?.Points ?? true)
                {
                    fg.AppendLine($"Points => {Points}");
                }
                if (printMask?.BipedFlags ?? true)
                {
                    fg.AppendLine($"BipedFlags => {BipedFlags}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.MaleBipedModel?.Overall ?? true)
                {
                    MaleBipedModel?.ToString(fg);
                }
                if (printMask?.MaleWorldModel?.Overall ?? true)
                {
                    MaleWorldModel?.ToString(fg);
                }
                if (printMask?.MaleIcon ?? true)
                {
                    fg.AppendLine($"MaleIcon => {MaleIcon}");
                }
                if (printMask?.FemaleBipedModel?.Overall ?? true)
                {
                    FemaleBipedModel?.ToString(fg);
                }
                if (printMask?.FemaleWorldModel?.Overall ?? true)
                {
                    FemaleWorldModel?.ToString(fg);
                }
                if (printMask?.FemaleIcon ?? true)
                {
                    fg.AppendLine($"FemaleIcon => {FemaleIcon}");
                }
                if (printMask?.ArmorValue ?? true)
                {
                    fg.AppendLine($"ArmorValue => {ArmorValue}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Armor_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Armor_ErrorMask>
    {
        #region Members
        public Exception Script;
        public Exception Enchantment;
        public Exception Points;
        public Exception BipedFlags;
        public Exception Flags;
        public MaskItem<Exception, Model_ErrorMask> MaleBipedModel;
        public MaskItem<Exception, Model_ErrorMask> MaleWorldModel;
        public Exception MaleIcon;
        public MaskItem<Exception, Model_ErrorMask> FemaleBipedModel;
        public MaskItem<Exception, Model_ErrorMask> FemaleWorldModel;
        public Exception FemaleIcon;
        public Exception ArmorValue;
        public Exception Value;
        public Exception Health;
        public Exception Weight;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Armor_FieldIndex.Enchantment:
                    this.Enchantment = ex;
                    break;
                case Armor_FieldIndex.Points:
                    this.Points = ex;
                    break;
                case Armor_FieldIndex.BipedFlags:
                    this.BipedFlags = ex;
                    break;
                case Armor_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Armor_FieldIndex.MaleBipedModel:
                    this.MaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Armor_FieldIndex.MaleWorldModel:
                    this.MaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Armor_FieldIndex.MaleIcon:
                    this.MaleIcon = ex;
                    break;
                case Armor_FieldIndex.FemaleBipedModel:
                    this.FemaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Armor_FieldIndex.FemaleWorldModel:
                    this.FemaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Armor_FieldIndex.FemaleIcon:
                    this.FemaleIcon = ex;
                    break;
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = ex;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Armor_FieldIndex.Enchantment:
                    this.Enchantment = (Exception)obj;
                    break;
                case Armor_FieldIndex.Points:
                    this.Points = (Exception)obj;
                    break;
                case Armor_FieldIndex.BipedFlags:
                    this.BipedFlags = (Exception)obj;
                    break;
                case Armor_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Armor_FieldIndex.MaleBipedModel:
                    this.MaleBipedModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Armor_FieldIndex.MaleWorldModel:
                    this.MaleWorldModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Armor_FieldIndex.MaleIcon:
                    this.MaleIcon = (Exception)obj;
                    break;
                case Armor_FieldIndex.FemaleBipedModel:
                    this.FemaleBipedModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Armor_FieldIndex.FemaleWorldModel:
                    this.FemaleWorldModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Armor_FieldIndex.FemaleIcon:
                    this.FemaleIcon = (Exception)obj;
                    break;
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = (Exception)obj;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Script != null) return true;
            if (Enchantment != null) return true;
            if (Points != null) return true;
            if (BipedFlags != null) return true;
            if (Flags != null) return true;
            if (MaleBipedModel != null) return true;
            if (MaleWorldModel != null) return true;
            if (MaleIcon != null) return true;
            if (FemaleBipedModel != null) return true;
            if (FemaleWorldModel != null) return true;
            if (FemaleIcon != null) return true;
            if (ArmorValue != null) return true;
            if (Value != null) return true;
            if (Health != null) return true;
            if (Weight != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Armor_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Enchantment => {Enchantment}");
            fg.AppendLine($"Points => {Points}");
            fg.AppendLine($"BipedFlags => {BipedFlags}");
            fg.AppendLine($"Flags => {Flags}");
            MaleBipedModel?.ToString(fg);
            MaleWorldModel?.ToString(fg);
            fg.AppendLine($"MaleIcon => {MaleIcon}");
            FemaleBipedModel?.ToString(fg);
            FemaleWorldModel?.ToString(fg);
            fg.AppendLine($"FemaleIcon => {FemaleIcon}");
            fg.AppendLine($"ArmorValue => {ArmorValue}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Weight => {Weight}");
        }
        #endregion

        #region Combine
        public Armor_ErrorMask Combine(Armor_ErrorMask rhs)
        {
            var ret = new Armor_ErrorMask();
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
            ret.Points = this.Points.Combine(rhs.Points);
            ret.BipedFlags = this.BipedFlags.Combine(rhs.BipedFlags);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.MaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(this.MaleBipedModel.Overall.Combine(rhs.MaleBipedModel.Overall), ((IErrorMask<Model_ErrorMask>)this.MaleBipedModel.Specific).Combine(rhs.MaleBipedModel.Specific));
            ret.MaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(this.MaleWorldModel.Overall.Combine(rhs.MaleWorldModel.Overall), ((IErrorMask<Model_ErrorMask>)this.MaleWorldModel.Specific).Combine(rhs.MaleWorldModel.Specific));
            ret.MaleIcon = this.MaleIcon.Combine(rhs.MaleIcon);
            ret.FemaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(this.FemaleBipedModel.Overall.Combine(rhs.FemaleBipedModel.Overall), ((IErrorMask<Model_ErrorMask>)this.FemaleBipedModel.Specific).Combine(rhs.FemaleBipedModel.Specific));
            ret.FemaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(this.FemaleWorldModel.Overall.Combine(rhs.FemaleWorldModel.Overall), ((IErrorMask<Model_ErrorMask>)this.FemaleWorldModel.Specific).Combine(rhs.FemaleWorldModel.Specific));
            ret.FemaleIcon = this.FemaleIcon.Combine(rhs.FemaleIcon);
            ret.ArmorValue = this.ArmorValue.Combine(rhs.ArmorValue);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            return ret;
        }
        public static Armor_ErrorMask Combine(Armor_ErrorMask lhs, Armor_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Armor_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Script;
        public bool Enchantment;
        public bool Points;
        public bool BipedFlags;
        public bool Flags;
        public MaskItem<CopyOption, Model_CopyMask> MaleBipedModel;
        public MaskItem<CopyOption, Model_CopyMask> MaleWorldModel;
        public bool MaleIcon;
        public MaskItem<CopyOption, Model_CopyMask> FemaleBipedModel;
        public MaskItem<CopyOption, Model_CopyMask> FemaleWorldModel;
        public bool FemaleIcon;
        public bool ArmorValue;
        public bool Value;
        public bool Health;
        public bool Weight;
        #endregion

    }
    #endregion




    #endregion

}
