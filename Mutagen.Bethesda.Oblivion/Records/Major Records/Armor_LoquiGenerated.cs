/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Armor :
        ClothingAbstract,
        IArmorInternal,
        ILoquiObjectSetter<Armor>,
        IEquatable<Armor>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static Armor_Registration Registration => Armor_Registration.Instance;
        protected override object CommonInstance => ArmorCommon.Instance;

        #region Ctor
        protected Armor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ArmorValue
        private Single _ArmorValue;
        public Single ArmorValue
        {
            get => this._ArmorValue;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._ArmorValue, value, nameof(ArmorValue));
            }
        }
        #endregion
        #region Value
        private UInt32 _Value;
        public UInt32 Value
        {
            get => this._Value;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Value, value, nameof(Value));
            }
        }
        #endregion
        #region Health
        private UInt32 _Health;
        public UInt32 Health
        {
            get => this._Health;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Health, value, nameof(Health));
            }
        }
        #endregion
        #region Weight
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Weight, value, nameof(Weight));
            }
        }
        #endregion
        #region DATADataTypeState
        private Armor.DATADataType _DATADataTypeState;
        public Armor.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        Armor.DATADataType IArmorInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        Armor.DATADataType IArmorInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IArmorInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ArmorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Armor rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!this.ArmorValue.EqualsWithin(rhs.ArmorValue)) return false;
            if (this.Value != rhs.Value) return false;
            if (this.Health != rhs.Health) return false;
            if (!this.Weight.EqualsWithin(rhs.Weight)) return false;
            if (this.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ArmorValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override IXmlWriteTranslator XmlWriteTranslator => ArmorXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Armor Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Armor_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Armor Create_Xml(
            XElement node,
            out Armor_ErrorMask errorMask,
            bool doMasks = true,
            Armor_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Armor Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Armor() : null;
                    break;
                default:
                    break;
            }
            var ret = new Armor();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ArmorXmlCreateTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Armor Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Armor_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Armor Create_Xml(
            string path,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Armor Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Armor_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Armor Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Armor_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Armor Create_Xml(
            Stream stream,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Armor Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Armor_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElement_Xml(
            Armor item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Armor.DATADataType.Has;
                    break;
                default:
                    ClothingAbstract.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Armor_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public Armor(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Armor(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(Armor obj, Armor rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Armor(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override IBinaryWriteTranslator BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Armor Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Armor Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Armor_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Armor Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Armor>(
                record: new Armor(),
                frame: frame,
                errorMask: errorMask,
                recType: Armor_Registration.ARMO_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        protected static void Fill_Binary_Structs(
            Armor item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ClothingAbstract.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Armor item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    ArmorBinaryCreateTranslation.FillBinary_ArmorValue_Custom_Public(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    item.Value = dataFrame.ReadUInt32();
                    item.Health = dataFrame.ReadUInt32();
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WeightParse))
                    {
                        item.Weight = WeightParse;
                    }
                    else
                    {
                        item.Weight = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Armor_FieldIndex.Weight);
                }
                default:
                    return ClothingAbstract.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Armor Copy(
            Armor_CopyMask copyMask = null,
            Armor def = null)
        {
            return Armor.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Armor Copy(
            Armor item,
            Armor_CopyMask copyMask = null,
            Armor def = null)
        {
            Armor ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor();
            }
            else
            {
                ret = (Armor)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Armor Copy_ToLoqui(
            Armor item,
            Armor_CopyMask copyMask = null,
            Armor def = null)
        {
            Armor ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor() as Armor;
            }
            else
            {
                ret = (Armor)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Armor rhs,
            Armor_CopyMask copyMask,
            Armor def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Armor rhs,
            out Armor_ErrorMask errorMask,
            Armor_CopyMask copyMask = null,
            Armor def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ArmorCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Armor rhs,
            ErrorMaskBuilder errorMask,
            Armor_CopyMask copyMask = null,
            Armor def = null)
        {
            ArmorCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = (Single)obj;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = (UInt32)obj;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = (UInt32)obj;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = (Single)obj;
                    break;
                case Armor_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Armor.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            ArmorCommon.Instance.Clear(this);
        }

        public new static Armor Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Armor();
            foreach (var pair in fields)
            {
                CopyInInternal_Armor(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Armor(Armor obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Armor_FieldIndex enu))
            {
                CopyInInternal_ClothingAbstract(obj, pair);
            }
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    obj.ArmorValue = (Single)pair.Value;
                    break;
                case Armor_FieldIndex.Value:
                    obj.Value = (UInt32)pair.Value;
                    break;
                case Armor_FieldIndex.Health:
                    obj.Health = (UInt32)pair.Value;
                    break;
                case Armor_FieldIndex.Weight:
                    obj.Weight = (Single)pair.Value;
                    break;
                case Armor_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (Armor.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IArmor :
        IArmorGetter,
        IClothingAbstract,
        ILoquiObjectSetter<IArmorInternal>
    {
        new Single ArmorValue { get; set; }

        new UInt32 Value { get; set; }

        new UInt32 Health { get; set; }

        new Single Weight { get; set; }

        void CopyFieldsFrom(
            Armor rhs,
            ErrorMaskBuilder errorMask = null,
            Armor_CopyMask copyMask = null,
            Armor def = null);
    }

    public partial interface IArmorInternal :
        IClothingAbstractInternal,
        IArmor,
        IArmorInternalGetter
    {
        new Armor.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IArmorGetter :
        IClothingAbstractGetter,
        ILoquiObject<IArmorInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region ArmorValue
        Single ArmorValue { get; }

        #endregion
        #region Value
        UInt32 Value { get; }

        #endregion
        #region Health
        UInt32 Health { get; }

        #endregion
        #region Weight
        Single Weight { get; }

        #endregion

    }

    public partial interface IArmorInternalGetter :
        IClothingAbstractInternalGetter,
        IArmorGetter
    {
        #region DATADataTypeState
        Armor.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ArmorMixIn
    {
        public static void Clear(this IArmorInternal item)
        {
            ((ArmorCommon)item.CommonInstance).Clear(item: item);
        }

        public static Armor_Mask<bool> GetEqualsMask(
            this IArmorInternalGetter item,
            IArmorInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IArmorInternalGetter item,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            return ((ArmorCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IArmorInternalGetter item,
            FileGeneration fg,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            ((ArmorCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IArmorInternalGetter item,
            Armor_Mask<bool?> checkMask)
        {
            return ((ArmorCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Armor_Mask<bool> GetHasBeenSetMask(this IArmorInternalGetter item)
        {
            var ret = new Armor_Mask<bool>();
            ((ArmorCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Armor_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        BMDTDataTypeState = 17,
        ArmorValue = 18,
        Value = 19,
        Health = 20,
        Weight = 21,
        DATADataTypeState = 22,
    }
    #endregion

    #region Registration
    public class Armor_Registration : ILoquiRegistration
    {
        public static readonly Armor_Registration Instance = new Armor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 67,
            version: 0);

        public const string GUID = "484e38f3-afde-4661-9c39-a8bc1e92eb99";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(Armor_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Armor_ErrorMask);

        public static readonly Type ClassType = typeof(Armor);

        public static readonly Type GetterType = typeof(IArmorGetter);

        public static readonly Type InternalGetterType = typeof(IArmorInternalGetter);

        public static readonly Type SetterType = typeof(IArmor);

        public static readonly Type InternalSetterType = typeof(IArmorInternal);

        public static readonly Type CommonType = typeof(ArmorCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Armor";

        public const string Name = "Armor";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ARMORVALUE":
                    return (ushort)Armor_FieldIndex.ArmorValue;
                case "VALUE":
                    return (ushort)Armor_FieldIndex.Value;
                case "HEALTH":
                    return (ushort)Armor_FieldIndex.Health;
                case "WEIGHT":
                    return (ushort)Armor_FieldIndex.Weight;
                case "DATADATATYPESTATE":
                    return (ushort)Armor_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return "ArmorValue";
                case Armor_FieldIndex.Value:
                    return "Value";
                case Armor_FieldIndex.Health:
                    return "Health";
                case Armor_FieldIndex.Weight:
                    return "Weight";
                case Armor_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return ClothingAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                case Armor_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return typeof(Single);
                case Armor_FieldIndex.Value:
                    return typeof(UInt32);
                case Armor_FieldIndex.Health:
                    return typeof(UInt32);
                case Armor_FieldIndex.Weight:
                    return typeof(Single);
                case Armor_FieldIndex.DATADataTypeState:
                    return typeof(Armor.DATADataType);
                default:
                    return ClothingAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlTranslation = typeof(ArmorXmlWriteTranslation);
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ARMO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryTranslation = typeof(ArmorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ArmorCommon : ClothingAbstractCommon
    {
        public static readonly ArmorCommon Instance = new ArmorCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Armor item,
            Armor rhs,
            Armor def,
            ErrorMaskBuilder errorMask,
            Armor_CopyMask copyMask)
        {
            ClothingAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.ArmorValue ?? true)
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.ArmorValue);
                try
                {
                    item.ArmorValue = rhs.ArmorValue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Value ?? true)
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Value);
                try
                {
                    item.Value = rhs.Value;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Health ?? true)
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Health);
                try
                {
                    item.Health = rhs.Health;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weight ?? true)
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Weight);
                try
                {
                    item.Weight = rhs.Weight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IArmorInternal item)
        {
            ClearPartial();
            item.ArmorValue = default(Single);
            item.Value = default(UInt32);
            item.Health = default(UInt32);
            item.Weight = default(Single);
            base.Clear(item);
        }

        public override void Clear(IClothingAbstractInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }

        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }

        public Armor_Mask<bool> GetEqualsMask(
            IArmorInternalGetter item,
            IArmorInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Armor_Mask<bool>();
            ((ArmorCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IArmorInternalGetter item,
            IArmorInternalGetter rhs,
            Armor_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ArmorValue = item.ArmorValue.EqualsWithin(rhs.ArmorValue);
            ret.Value = item.Value == rhs.Value;
            ret.Health = item.Health == rhs.Health;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IArmorInternalGetter item,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IArmorInternalGetter item,
            FileGeneration fg,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Armor =>");
            }
            else
            {
                fg.AppendLine($"{name} (Armor) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IArmorInternalGetter item,
            FileGeneration fg,
            Armor_Mask<bool> printMask = null)
        {
            ClothingAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ArmorValue ?? true)
            {
                fg.AppendLine($"ArmorValue => {item.ArmorValue}");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendLine($"Value => {item.Value}");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendLine($"Health => {item.Health}");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendLine($"Weight => {item.Weight}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IArmorInternalGetter item,
            Armor_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IArmorInternalGetter item,
            Armor_Mask<bool> mask)
        {
            mask.ArmorValue = true;
            mask.Value = true;
            mask.Health = true;
            mask.Weight = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Armor_FieldIndex ConvertFieldIndex(ClothingAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ClothingAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Name:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Script:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Enchantment:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Flags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Armor_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Armor_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Armor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ArmorXmlWriteTranslation :
        ClothingAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ArmorXmlWriteTranslation Instance = new ArmorXmlWriteTranslation();

        public static void WriteToNode_Xml(
            IArmorInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            ClothingAbstractXmlWriteTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.DATADataTypeState.HasFlag(Armor.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.ArmorValue) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ArmorValue),
                        item: item.ArmorValue,
                        fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Value) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Value),
                        item: item.Value,
                        fieldIndex: (int)Armor_FieldIndex.Value,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Health) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Health),
                        item: item.Health,
                        fieldIndex: (int)Armor_FieldIndex.Health,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Weight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight,
                        fieldIndex: (int)Armor_FieldIndex.Weight,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Armor.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Armor_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IArmorInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Armor");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Armor");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IArmorInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IClothingAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IArmorInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IArmorInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IArmorInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IArmorInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ArmorXmlCreateTranslation : ClothingAbstractXmlCreateTranslation
    {
        public new readonly static ArmorXmlCreateTranslation Instance = new ArmorXmlCreateTranslation();

        public static void FillPublic_Xml(
            IArmorInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ArmorXmlCreateTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            IArmorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ArmorValue":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.ArmorValue);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ArmorValueParse,
                            errorMask: errorMask))
                        {
                            item.ArmorValue = ArmorValueParse;
                        }
                        else
                        {
                            item.ArmorValue = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Armor.DATADataType.Has;
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Value);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 ValueParse,
                            errorMask: errorMask))
                        {
                            item.Value = ValueParse;
                        }
                        else
                        {
                            item.Value = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Health);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 HealthParse,
                            errorMask: errorMask))
                        {
                            item.Health = HealthParse;
                        }
                        else
                        {
                            item.Health = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Weight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WeightParse,
                            errorMask: errorMask))
                        {
                            item.Weight = WeightParse;
                        }
                        else
                        {
                            item.Weight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<Armor.DATADataType>.Instance.Parse(
                            node: node,
                            item: out Armor.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(Armor.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ClothingAbstractXmlCreateTranslation.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class ArmorXmlTranslationMixIn
    {
        public static void Write_Xml(
            this IArmorInternalGetter item,
            XElement node,
            out Armor_ErrorMask errorMask,
            bool doMasks = true,
            Armor_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ArmorXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this IArmorInternalGetter item,
            string path,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IArmorInternalGetter item,
            Stream stream,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Armor_Mask<T> : ClothingAbstract_Mask<T>, IMask<T>, IEquatable<Armor_Mask<T>>
    {
        #region Ctors
        public Armor_Mask()
        {
        }

        public Armor_Mask(T initialValue)
        {
            this.ArmorValue = initialValue;
            this.Value = initialValue;
            this.Health = initialValue;
            this.Weight = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T ArmorValue;
        public T Value;
        public T Health;
        public T Weight;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Armor_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ArmorValue, rhs.ArmorValue)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ArmorValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.ArmorValue)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Armor_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Armor_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Armor_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.ArmorValue = eval(this.ArmorValue);
            obj.Value = eval(this.Value);
            obj.Health = eval(this.Health);
            obj.Weight = eval(this.Weight);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Armor_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Armor_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Armor_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ArmorValue ?? true)
                {
                    fg.AppendLine($"ArmorValue => {ArmorValue}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Armor_ErrorMask : ClothingAbstract_ErrorMask, IErrorMask<Armor_ErrorMask>
    {
        #region Members
        public Exception ArmorValue;
        public Exception Value;
        public Exception Health;
        public Exception Weight;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return ArmorValue;
                case Armor_FieldIndex.Value:
                    return Value;
                case Armor_FieldIndex.Health:
                    return Health;
                case Armor_FieldIndex.Weight:
                    return Weight;
                case Armor_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = ex;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Armor_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = (Exception)obj;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Armor_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ArmorValue != null) return true;
            if (Value != null) return true;
            if (Health != null) return true;
            if (Weight != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Armor_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"ArmorValue => {ArmorValue}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Armor_ErrorMask Combine(Armor_ErrorMask rhs)
        {
            var ret = new Armor_ErrorMask();
            ret.ArmorValue = this.ArmorValue.Combine(rhs.ArmorValue);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Armor_ErrorMask Combine(Armor_ErrorMask lhs, Armor_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Armor_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Armor_ErrorMask();
        }
        #endregion

    }
    public class Armor_CopyMask : ClothingAbstract_CopyMask
    {
        public Armor_CopyMask()
        {
        }

        public Armor_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.ArmorValue = defaultOn;
            this.Value = defaultOn;
            this.Health = defaultOn;
            this.Weight = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool ArmorValue;
        public bool Value;
        public bool Health;
        public bool Weight;
        public bool DATADataTypeState;
        #endregion

    }

    public class Armor_TranslationMask : ClothingAbstract_TranslationMask
    {
        #region Members
        public bool ArmorValue;
        public bool Value;
        public bool Health;
        public bool Weight;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Armor_TranslationMask()
            : base()
        {
        }

        public Armor_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.ArmorValue = defaultOn;
            this.Value = defaultOn;
            this.Health = defaultOn;
            this.Weight = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((ArmorValue, null));
            ret.Add((Value, null));
            ret.Add((Health, null));
            ret.Add((Weight, null));
            ret.Add((DATADataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ArmorBinaryWriteTranslation :
        ClothingAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ArmorBinaryWriteTranslation Instance = new ArmorBinaryWriteTranslation();

        static partial void WriteBinary_ArmorValue_Custom(
            MutagenWriter writer,
            IArmorInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_ArmorValue(
            MutagenWriter writer,
            IArmorInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_ArmorValue_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IArmorInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            ClothingAbstractBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IArmorInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            ClothingAbstractBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.DATADataTypeState.HasFlag(Armor.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Armor_Registration.DATA_HEADER)))
                {
                    ArmorBinaryWriteTranslation.WriteBinary_ArmorValue(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                    writer.Write(item.Value);
                    writer.Write(item.Health);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IArmorInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Armor_Registration.ARMO_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IArmorInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IClothingAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IArmorInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IArmorInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IArmorInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IArmorInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ArmorBinaryCreateTranslation : ClothingAbstractBinaryCreateTranslation
    {
        public new readonly static ArmorBinaryCreateTranslation Instance = new ArmorBinaryCreateTranslation();

        static partial void FillBinary_ArmorValue_Custom(
            MutagenFrame frame,
            Armor item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_ArmorValue_Custom_Public(
            MutagenFrame frame,
            Armor item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_ArmorValue_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class ArmorBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this IArmorInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Armor_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ArmorBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
