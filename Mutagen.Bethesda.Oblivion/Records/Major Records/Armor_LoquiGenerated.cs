/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Armor : ClothingAbstract, IArmor, ILoquiObjectSetter, IEquatable<Armor>
    {
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static Armor_Registration Registration => Armor_Registration.Instance;

        #region Ctor
        public Armor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ArmorValue
        protected readonly INotifyingItem<Single> _ArmorValue = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> ArmorValue_Property => _ArmorValue;
        public Single ArmorValue
        {
            get => this._ArmorValue.Item;
            set => this._ArmorValue.Set(value);
        }
        INotifyingItem<Single> IArmor.ArmorValue_Property => this.ArmorValue_Property;
        INotifyingItemGetter<Single> IArmorGetter.ArmorValue_Property => this.ArmorValue_Property;
        #endregion
        #region Value
        protected readonly INotifyingItem<UInt32> _Value = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Value_Property => _Value;
        public UInt32 Value
        {
            get => this._Value.Item;
            set => this._Value.Set(value);
        }
        INotifyingItem<UInt32> IArmor.Value_Property => this.Value_Property;
        INotifyingItemGetter<UInt32> IArmorGetter.Value_Property => this.Value_Property;
        #endregion
        #region Health
        protected readonly INotifyingItem<UInt32> _Health = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Health_Property => _Health;
        public UInt32 Health
        {
            get => this._Health.Item;
            set => this._Health.Set(value);
        }
        INotifyingItem<UInt32> IArmor.Health_Property => this.Health_Property;
        INotifyingItemGetter<UInt32> IArmorGetter.Health_Property => this.Health_Property;
        #endregion
        #region Weight
        protected readonly INotifyingItem<Single> _Weight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Weight_Property => _Weight;
        public Single Weight
        {
            get => this._Weight.Item;
            set => this._Weight.Set(value);
        }
        INotifyingItem<Single> IArmor.Weight_Property => this.Weight_Property;
        INotifyingItemGetter<Single> IArmorGetter.Weight_Property => this.Weight_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ArmorCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ArmorCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => ArmorCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ArmorCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ArmorCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            return ArmorCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ArmorCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Armor_Mask<bool> GetHasBeenSetMask()
        {
            return ArmorCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Armor rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (ArmorValue != rhs.ArmorValue) return false;
            if (Value != rhs.Value) return false;
            if (Health != rhs.Health) return false;
            if (Weight != rhs.Weight) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ArmorValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Armor Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Armor Create_XML(
            XElement root,
            out Armor_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Armor Create_XML(
            XElement root,
            bool doMasks,
            out Armor_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Armor Object, Armor_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Armor_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Armor_ErrorMask()) : default(Func<Armor_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Armor Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Armor Create_XML(
            string path,
            out Armor_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Armor Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Armor Create_XML(
            Stream stream,
            out Armor_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Armor, Armor_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Armor, Armor_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out ClothingAbstract_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Armor_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Armor_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Armor_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Armor_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ArmorCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Armor Create_XML_Internal(
            XElement root,
            Func<Armor_ErrorMask> errorMask)
        {
            var ret = new Armor();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Armor item,
            XElement root,
            string name,
            Func<Armor_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "ArmorValue":
                    item._ArmorValue.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                        errorMask: errorMask));
                    break;
                case "Value":
                    item._Value.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Value,
                        errorMask: errorMask));
                    break;
                case "Health":
                    item._Health.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Health,
                        errorMask: errorMask));
                    break;
                case "Weight":
                    item._Weight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Armor_FieldIndex.Weight,
                        errorMask: errorMask));
                    break;
                default:
                    ClothingAbstract.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Armor Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Armor Create_Binary(
            MutagenFrame frame,
            out Armor_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Armor Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Armor_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Armor Object, Armor_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Armor_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Armor_ErrorMask()) : default(Func<Armor_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Armor Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Armor Create_Binary(
            string path,
            out Armor_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Armor Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Armor Create_Binary(
            Stream stream,
            out Armor_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Armor, Armor_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Armor, Armor_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Armor_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out ClothingAbstract_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Armor_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Armor_ErrorMask errorMask)
        {
            errorMask = (Armor_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Armor_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Armor_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ArmorCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_ArmorValue_Custom(
            MutagenFrame frame,
            Armor item,
            int fieldIndex,
            Func<Armor_ErrorMask> errorMask);

        static partial void WriteBinary_ArmorValue_Custom(
            MutagenWriter writer,
            Armor item,
            int fieldIndex,
            Func<Armor_ErrorMask> errorMask);

        public static void WriteBinary_ArmorValue(
            MutagenWriter writer,
            Armor item,
            int fieldIndex,
            Func<Armor_ErrorMask> errorMask)
        {
            WriteBinary_ArmorValue_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        private static Armor Create_Binary_Internal(
            MutagenFrame frame,
            Func<Armor_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return MajorRecord.TypicalParsing<Armor, Armor_ErrorMask, Armor_FieldIndex>(
                record: new Armor(),
                frame: frame,
                errorMask: errorMask,
                recType: Armor_Registration.ARMO_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Armor item,
            MutagenFrame frame,
            Func<Armor_ErrorMask> errorMask)
        {
            ClothingAbstract.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Armor_FieldIndex?> Fill_Binary_RecordTypes(
            Armor item,
            MutagenFrame frame,
            Func<Armor_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        FillBinary_ArmorValue_Custom(
                            frame: dataFrame,
                            item: item,
                            fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                            errorMask: errorMask);
                        item._Value.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Armor_FieldIndex.Value,
                            errorMask: errorMask));
                        item._Health.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Armor_FieldIndex.Health,
                            errorMask: errorMask));
                        item._Weight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Armor_FieldIndex.Weight,
                            errorMask: errorMask));
                    }
                    return TryGet<Armor_FieldIndex?>.Succeed(Armor_FieldIndex.Weight);
                default:
                    return ClothingAbstract.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => ArmorCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Armor Copy(
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            return Armor.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Armor Copy(
            IArmor item,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            Armor ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor();
            }
            else
            {
                ret = (Armor)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
            where CopyType : class, IArmor
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Armor Copy_ToLoqui(
            IArmorGetter item,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            Armor ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor() as Armor;
            }
            else
            {
                ret = (Armor)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this._ArmorValue.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Value:
                    this._Value.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Health:
                    this._Health.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Armor_FieldIndex.Weight:
                    this._Weight.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ArmorCommon.Clear(this, cmds);
        }


        public new static Armor Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Armor();
            foreach (var pair in fields)
            {
                CopyInInternal_Armor(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Armor(Armor obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Armor_FieldIndex enu))
            {
                CopyInInternal_ClothingAbstract(obj, pair);
            }
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    obj._ArmorValue.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Value:
                    obj._Value.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Health:
                    obj._Health.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Armor_FieldIndex.Weight:
                    obj._Weight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Armor obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IArmor : IArmorGetter, IClothingAbstract, ILoquiClass<IArmor, IArmorGetter>, ILoquiClass<Armor, IArmorGetter>
    {
        new Single ArmorValue { get; set; }
        new INotifyingItem<Single> ArmorValue_Property { get; }

        new UInt32 Value { get; set; }
        new INotifyingItem<UInt32> Value_Property { get; }

        new UInt32 Health { get; set; }
        new INotifyingItem<UInt32> Health_Property { get; }

        new Single Weight { get; set; }
        new INotifyingItem<Single> Weight_Property { get; }

    }

    public interface IArmorGetter : IClothingAbstractGetter
    {
        #region ArmorValue
        Single ArmorValue { get; }
        INotifyingItemGetter<Single> ArmorValue_Property { get; }

        #endregion
        #region Value
        UInt32 Value { get; }
        INotifyingItemGetter<UInt32> Value_Property { get; }

        #endregion
        #region Health
        UInt32 Health { get; }
        INotifyingItemGetter<UInt32> Health_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        INotifyingItemGetter<Single> Weight_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Armor_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        ArmorValue = 17,
        Value = 18,
        Health = 19,
        Weight = 20,
    }
    #endregion

    #region Registration
    public class Armor_Registration : ILoquiRegistration
    {
        public static readonly Armor_Registration Instance = new Armor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 67,
            version: 0);

        public const string GUID = "484e38f3-afde-4661-9c39-a8bc1e92eb99";

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Armor_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Armor_ErrorMask);

        public static readonly Type ClassType = typeof(Armor);

        public static readonly Type GetterType = typeof(IArmorGetter);

        public static readonly Type SetterType = typeof(IArmor);

        public static readonly Type CommonType = typeof(ArmorCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Armor";

        public const string Name = "Armor";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ARMORVALUE":
                    return (ushort)Armor_FieldIndex.ArmorValue;
                case "VALUE":
                    return (ushort)Armor_FieldIndex.Value;
                case "HEALTH":
                    return (ushort)Armor_FieldIndex.Health;
                case "WEIGHT":
                    return (ushort)Armor_FieldIndex.Weight;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return "ArmorValue";
                case Armor_FieldIndex.Value:
                    return "Value";
                case Armor_FieldIndex.Health:
                    return "Health";
                case Armor_FieldIndex.Weight:
                    return "Weight";
                default:
                    return ClothingAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return typeof(Single);
                case Armor_FieldIndex.Value:
                    return typeof(UInt32);
                case Armor_FieldIndex.Health:
                    return typeof(UInt32);
                case Armor_FieldIndex.Weight:
                    return typeof(Single);
                default:
                    return ClothingAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ARMO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ArmorCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IArmor item,
            IArmorGetter rhs,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ArmorCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IArmor item,
            IArmorGetter rhs,
            out Armor_ErrorMask errorMask,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ArmorCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IArmor item,
            IArmorGetter rhs,
            IArmorGetter def,
            bool doMasks,
            out Armor_ErrorMask errorMask,
            Armor_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Armor_ErrorMask retErrorMask = null;
            Func<Armor_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Armor_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IArmor item,
            IArmorGetter rhs,
            IArmorGetter def,
            bool doMasks,
            Func<Armor_ErrorMask> errorMask,
            Armor_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            ClothingAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.ArmorValue ?? true)
            {
                try
                {
                    item.ArmorValue_Property.Set(
                        value: rhs.ArmorValue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.ArmorValue, ex);
                }
            }
            if (copyMask?.Value ?? true)
            {
                try
                {
                    item.Value_Property.Set(
                        value: rhs.Value,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Value, ex);
                }
            }
            if (copyMask?.Health ?? true)
            {
                try
                {
                    item.Health_Property.Set(
                        value: rhs.Health,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Health, ex);
                }
            }
            if (copyMask?.Weight ?? true)
            {
                try
                {
                    item.Weight_Property.Set(
                        value: rhs.Weight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Armor_FieldIndex.Weight, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IArmor obj,
            NotifyingFireParameters? cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    ClothingAbstractCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IArmor obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    obj.ArmorValue = default(Single);
                    break;
                case Armor_FieldIndex.Value:
                    obj.Value = default(UInt32);
                    break;
                case Armor_FieldIndex.Health:
                    obj.Health = default(UInt32);
                    break;
                case Armor_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                default:
                    ClothingAbstractCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IArmor obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return true;
                default:
                    return ClothingAbstractCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IArmorGetter obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return obj.ArmorValue;
                case Armor_FieldIndex.Value:
                    return obj.Value;
                case Armor_FieldIndex.Health:
                    return obj.Health;
                case Armor_FieldIndex.Weight:
                    return obj.Weight;
                default:
                    return ClothingAbstractCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IArmor item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.ArmorValue = default(Single);
            item.Value = default(UInt32);
            item.Health = default(UInt32);
            item.Weight = default(Single);
        }

        public static Armor_Mask<bool> GetEqualsMask(
            this IArmorGetter item,
            IArmorGetter rhs)
        {
            var ret = new Armor_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            Armor_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.ArmorValue = item.ArmorValue == rhs.ArmorValue;
            ret.Value = item.Value == rhs.Value;
            ret.Health = item.Health == rhs.Health;
            ret.Weight = item.Weight == rhs.Weight;
            ClothingAbstractCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IArmorGetter item,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IArmorGetter item,
            FileGeneration fg,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Armor)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Armor)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ArmorValue ?? true)
                {
                    fg.AppendLine($"ArmorValue => {item.ArmorValue}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IArmorGetter item,
            Armor_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Armor_Mask<bool> GetHasBeenSetMask(IArmorGetter item)
        {
            var ret = new Armor_Mask<bool>();
            ret.ArmorValue = true;
            ret.Value = true;
            ret.Health = true;
            ret.Weight = true;
            return ret;
        }

        public static Armor_FieldIndex? ConvertFieldIndex(ClothingAbstract_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Armor_FieldIndex ConvertFieldIndex(ClothingAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ClothingAbstract_FieldIndex.MajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FormID:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.RecordType:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Name:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Script:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Enchantment:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Flags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Armor_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Armor_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Armor_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Armor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IArmorGetter item,
            bool doMasks,
            out Armor_ErrorMask errorMask,
            string name = null)
        {
            Armor_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Armor_ErrorMask()) : default(Func<Armor_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IArmorGetter item,
            Func<Armor_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Armor"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Armor");
                    }
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.ArmorValue),
                        item: item.ArmorValue_Property,
                        fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                        errorMask: errorMask);
                    UInt32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Value),
                        item: item.Value_Property,
                        fieldIndex: (int)Armor_FieldIndex.Value,
                        errorMask: errorMask);
                    UInt32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Health),
                        item: item.Health_Property,
                        fieldIndex: (int)Armor_FieldIndex.Health,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Weight),
                        item: item.Weight_Property,
                        fieldIndex: (int)Armor_FieldIndex.Weight,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Armor item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Armor_ErrorMask errorMask)
        {
            Armor_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Armor_ErrorMask()) : default(Func<Armor_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Armor item,
            RecordTypeConverter recordTypeConverter,
            Func<Armor_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Armor_Registration.ARMO_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Armor item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Armor_ErrorMask> errorMask)
        {
            ClothingAbstractCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, Armor_Registration.DATA_HEADER))
            {
                Armor.WriteBinary_ArmorValue(
                    writer: writer,
                    item: item,
                    fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Value_Property,
                    fieldIndex: (int)Armor_FieldIndex.Value,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Health_Property,
                    fieldIndex: (int)Armor_FieldIndex.Health,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight_Property,
                    fieldIndex: (int)Armor_FieldIndex.Weight,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Armor_Mask<T> : ClothingAbstract_Mask<T>, IMask<T>, IEquatable<Armor_Mask<T>>
    {
        #region Ctors
        public Armor_Mask()
        {
        }

        public Armor_Mask(T initialValue)
        {
            this.ArmorValue = initialValue;
            this.Value = initialValue;
            this.Health = initialValue;
            this.Weight = initialValue;
        }
        #endregion

        #region Members
        public T ArmorValue;
        public T Value;
        public T Health;
        public T Weight;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Armor_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ArmorValue, rhs.ArmorValue)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ArmorValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.ArmorValue)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Weight)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Armor_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Armor_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Armor_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.ArmorValue = eval(this.ArmorValue);
            obj.Value = eval(this.Value);
            obj.Health = eval(this.Health);
            obj.Weight = eval(this.Weight);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Armor_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Armor_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Armor_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ArmorValue ?? true)
                {
                    fg.AppendLine($"ArmorValue => {ArmorValue}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Armor_ErrorMask : ClothingAbstract_ErrorMask, IErrorMask<Armor_ErrorMask>
    {
        #region Members
        public Exception ArmorValue;
        public Exception Value;
        public Exception Health;
        public Exception Weight;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = ex;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = (Exception)obj;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ArmorValue != null) return true;
            if (Value != null) return true;
            if (Health != null) return true;
            if (Weight != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Armor_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"ArmorValue => {ArmorValue}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Weight => {Weight}");
        }
        #endregion

        #region Combine
        public Armor_ErrorMask Combine(Armor_ErrorMask rhs)
        {
            var ret = new Armor_ErrorMask();
            ret.ArmorValue = this.ArmorValue.Combine(rhs.ArmorValue);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            return ret;
        }
        public static Armor_ErrorMask Combine(Armor_ErrorMask lhs, Armor_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Armor_CopyMask : ClothingAbstract_CopyMask
    {
        #region Members
        public bool ArmorValue;
        public bool Value;
        public bool Health;
        public bool Weight;
        #endregion

    }
    #endregion




    #endregion

}
