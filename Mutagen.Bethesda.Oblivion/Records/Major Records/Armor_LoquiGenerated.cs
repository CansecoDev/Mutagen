/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Armor : 
        ClothingAbstract,
        IArmor,
        ILoquiObject<Armor>,
        ILoquiObjectSetter,
        IPropertySupporter<Single>,
        IPropertySupporter<UInt32>,
        IEquatable<Armor>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static Armor_Registration Registration => Armor_Registration.Instance;

        #region Ctor
        public Armor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ArmorValue
        protected Single _ArmorValue;
        protected PropertyForwarder<Armor, Single> _ArmorValueForwarder;
        public INotifyingSetItem<Single> ArmorValue_Property => _ArmorValueForwarder ?? (_ArmorValueForwarder = new PropertyForwarder<Armor, Single>(this, (int)Armor_FieldIndex.ArmorValue));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single ArmorValue
        {
            get => this._ArmorValue;
            set => this.SetArmorValue(value);
        }
        protected void SetArmorValue(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Armor_FieldIndex.ArmorValue];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ArmorValue == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Armor_FieldIndex.ArmorValue] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = ArmorValue;
                _ArmorValue = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Armor_FieldIndex.ArmorValue,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ArmorValue = item;
            }
        }
        protected void UnsetArmorValue()
        {
            _hasBeenSetTracker[(int)Armor_FieldIndex.ArmorValue] = false;
            ArmorValue = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IArmor.ArmorValue_Property => this.ArmorValue_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IArmorGetter.ArmorValue_Property => this.ArmorValue_Property;
        #endregion
        #region Value
        protected UInt32 _Value;
        protected PropertyForwarder<Armor, UInt32> _ValueForwarder;
        public INotifyingSetItem<UInt32> Value_Property => _ValueForwarder ?? (_ValueForwarder = new PropertyForwarder<Armor, UInt32>(this, (int)Armor_FieldIndex.Value));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Value
        {
            get => this._Value;
            set => this.SetValue(value);
        }
        protected void SetValue(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Armor_FieldIndex.Value];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Value == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Armor_FieldIndex.Value] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = Value;
                _Value = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)Armor_FieldIndex.Value,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Value = item;
            }
        }
        protected void UnsetValue()
        {
            _hasBeenSetTracker[(int)Armor_FieldIndex.Value] = false;
            Value = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IArmor.Value_Property => this.Value_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IArmorGetter.Value_Property => this.Value_Property;
        #endregion
        #region Health
        protected UInt32 _Health;
        protected PropertyForwarder<Armor, UInt32> _HealthForwarder;
        public INotifyingSetItem<UInt32> Health_Property => _HealthForwarder ?? (_HealthForwarder = new PropertyForwarder<Armor, UInt32>(this, (int)Armor_FieldIndex.Health));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Health
        {
            get => this._Health;
            set => this.SetHealth(value);
        }
        protected void SetHealth(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Armor_FieldIndex.Health];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Health == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Armor_FieldIndex.Health] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = Health;
                _Health = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)Armor_FieldIndex.Health,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Health = item;
            }
        }
        protected void UnsetHealth()
        {
            _hasBeenSetTracker[(int)Armor_FieldIndex.Health] = false;
            Health = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IArmor.Health_Property => this.Health_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IArmorGetter.Health_Property => this.Health_Property;
        #endregion
        #region Weight
        protected Single _Weight;
        protected PropertyForwarder<Armor, Single> _WeightForwarder;
        public INotifyingSetItem<Single> Weight_Property => _WeightForwarder ?? (_WeightForwarder = new PropertyForwarder<Armor, Single>(this, (int)Armor_FieldIndex.Weight));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Weight
        {
            get => this._Weight;
            set => this.SetWeight(value);
        }
        protected void SetWeight(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Armor_FieldIndex.Weight];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Weight == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Armor_FieldIndex.Weight] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Weight;
                _Weight = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Armor_FieldIndex.Weight,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Weight = item;
            }
        }
        protected void UnsetWeight()
        {
            _hasBeenSetTracker[(int)Armor_FieldIndex.Weight] = false;
            Weight = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IArmor.Weight_Property => this.Weight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IArmorGetter.Weight_Property => this.Weight_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ArmorCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ArmorCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ArmorCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ArmorCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Armor>.GetEqualsMask(Armor rhs) => ArmorCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IArmorGetter>.GetEqualsMask(IArmorGetter rhs) => ArmorCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ArmorCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            return ArmorCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ArmorCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Armor_Mask<bool> GetHasBeenSetMask()
        {
            return ArmorCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Armor rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!this.ArmorValue.EqualsWithin(rhs.ArmorValue)) return false;
            if (this.Value != rhs.Value) return false;
            if (this.Health != rhs.Health) return false;
            if (!this.Weight.EqualsWithin(rhs.Weight)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ArmorValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Armor Create_Xml(
            XElement root,
            Armor_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Armor Create_Xml(
            XElement root,
            out Armor_ErrorMask errorMask,
            bool doMasks = true,
            Armor_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static Armor Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Armor();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Armor Create_Xml(
            string path,
            Armor_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Armor Create_Xml(
            string path,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Armor Create_Xml(
            Stream stream,
            Armor_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Armor Create_Xml(
            Stream stream,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Armor>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out ClothingAbstract_ErrorMask errorMask,
            ClothingAbstract_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NamedMajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Armor_ErrorMask errorMask,
            bool doMasks = true,
            Armor_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true,
            ClothingAbstract_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out NamedMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            NamedMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ArmorCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Armor item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ArmorValue":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.ArmorValue);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ArmorValueParse,
                            errorMask: errorMask))
                        {
                            item.ArmorValue = ArmorValueParse;
                        }
                        else
                        {
                            item.UnsetArmorValue();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Value);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 ValueParse,
                            errorMask: errorMask))
                        {
                            item.Value = ValueParse;
                        }
                        else
                        {
                            item.UnsetValue();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Health);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 HealthParse,
                            errorMask: errorMask))
                        {
                            item.Health = HealthParse;
                        }
                        else
                        {
                            item.UnsetHealth();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Armor_FieldIndex.Weight);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WeightParse,
                            errorMask: errorMask))
                        {
                            item.Weight = WeightParse;
                        }
                        else
                        {
                            item.UnsetWeight();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ClothingAbstract.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.ArmorValue:
                    return ArmorValue;
                case Armor_FieldIndex.Weight:
                    return Weight;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.ArmorValue:
                    SetArmorValue(item, hasBeenSet, cmds);
                    break;
                case Armor_FieldIndex.Weight:
                    SetWeight(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.ArmorValue:
                    _hasBeenSetTracker[index] = false;
                    ArmorValue = default(Single);
                    break;
                case Armor_FieldIndex.Weight:
                    _hasBeenSetTracker[index] = false;
                    Weight = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Weight:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter UInt32
        protected ObjectCentralizationSubscriptions<UInt32> _UInt32_subscriptions;
        UInt32 IPropertySupporter<UInt32>.Get(int index)
        {
            return GetUInt32(index: index);
        }

        protected UInt32 GetUInt32(int index)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.Value:
                    return Value;
                case Armor_FieldIndex.Health:
                    return Health;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        void IPropertySupporter<UInt32>.Set(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt32(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.Value:
                    SetValue(item, hasBeenSet, cmds);
                    break;
                case Armor_FieldIndex.Health:
                    SetHealth(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        bool IPropertySupporter<UInt32>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<UInt32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.Value:
                    _hasBeenSetTracker[index] = false;
                    Value = default(UInt32);
                    break;
                case Armor_FieldIndex.Health:
                    _hasBeenSetTracker[index] = false;
                    Health = default(UInt32);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt32_subscriptions == null)
            {
                _UInt32_subscriptions = new ObjectCentralizationSubscriptions<UInt32>();
            }
            _UInt32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt32 IPropertySupporter<UInt32>.DefaultValue(int index)
        {
            return DefaultValueUInt32(index: index);
        }

        protected UInt32 DefaultValueUInt32(int index)
        {
            switch ((Armor_FieldIndex)index)
            {
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                    return default(UInt32);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Armor_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Armor Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Armor Create_Binary(
            MutagenFrame frame,
            out Armor_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static Armor Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Armor>(
                record: new Armor(),
                frame: frame,
                errorMask: errorMask,
                recType: Armor_Registration.ARMO_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Armor Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Armor Create_Binary(
            string path,
            out Armor_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Armor Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Armor Create_Binary(
            Stream stream,
            out Armor_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Armor_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Armor_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Armor_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            out NamedMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ArmorCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_ArmorValue_Custom(
            MutagenFrame frame,
            Armor item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_ArmorValue_Custom(
            MutagenWriter writer,
            Armor item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_ArmorValue(
            MutagenWriter writer,
            Armor item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_ArmorValue_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            Armor item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            ClothingAbstract.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Armor item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        FillBinary_ArmorValue_Custom(
                            frame: dataFrame,
                            item: item,
                            errorMask: errorMask);
                        try
                        {
                            errorMask?.PushIndex((int)Armor_FieldIndex.Value);
                            if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt32 ValueParse,
                                errorMask: errorMask))
                            {
                                item.Value = ValueParse;
                            }
                            else
                            {
                                item.UnsetValue();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Armor_FieldIndex.Health);
                            if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt32 HealthParse,
                                errorMask: errorMask))
                            {
                                item.Health = HealthParse;
                            }
                            else
                            {
                                item.UnsetHealth();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Armor_FieldIndex.Weight);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single WeightParse,
                                errorMask: errorMask))
                            {
                                item.Weight = WeightParse;
                            }
                            else
                            {
                                item.UnsetWeight();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Armor_FieldIndex.Weight);
                default:
                    return ClothingAbstract.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Armor Copy(
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            return Armor.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Armor Copy(
            IArmor item,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            Armor ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor();
            }
            else
            {
                ret = (Armor)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Armor Copy_ToLoqui(
            IArmorGetter item,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null)
        {
            Armor ret;
            if (item.GetType().Equals(typeof(Armor)))
            {
                ret = new Armor() as Armor;
            }
            else
            {
                ret = (Armor)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IArmorGetter rhs,
            Armor_CopyMask copyMask,
            IArmorGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IArmorGetter rhs,
            out Armor_ErrorMask errorMask,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ArmorCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IArmorGetter rhs,
            ErrorMaskBuilder errorMask,
            Armor_CopyMask copyMask = null,
            IArmorGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ArmorCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.SetArmorValue(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Armor_FieldIndex.Value:
                    this.SetValue(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case Armor_FieldIndex.Health:
                    this.SetHealth(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case Armor_FieldIndex.Weight:
                    this.SetWeight(
                        (Single)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ArmorCommon.Clear(this, cmds);
        }


        public new static Armor Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Armor();
            foreach (var pair in fields)
            {
                CopyInInternal_Armor(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Armor(Armor obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Armor_FieldIndex enu))
            {
                CopyInInternal_ClothingAbstract(obj, pair);
            }
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    obj.SetArmorValue(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Armor_FieldIndex.Value:
                    obj.SetValue(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case Armor_FieldIndex.Health:
                    obj.SetHealth(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case Armor_FieldIndex.Weight:
                    obj.SetWeight(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Armor obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IArmor : IArmorGetter, IClothingAbstract, ILoquiClass<IArmor, IArmorGetter>, ILoquiClass<Armor, IArmorGetter>
    {
        new Single ArmorValue { get; set; }
        new INotifyingItem<Single> ArmorValue_Property { get; }

        new UInt32 Value { get; set; }
        new INotifyingItem<UInt32> Value_Property { get; }

        new UInt32 Health { get; set; }
        new INotifyingItem<UInt32> Health_Property { get; }

        new Single Weight { get; set; }
        new INotifyingItem<Single> Weight_Property { get; }

    }

    public partial interface IArmorGetter : IClothingAbstractGetter
    {
        #region ArmorValue
        Single ArmorValue { get; }
        INotifyingItemGetter<Single> ArmorValue_Property { get; }

        #endregion
        #region Value
        UInt32 Value { get; }
        INotifyingItemGetter<UInt32> Value_Property { get; }

        #endregion
        #region Health
        UInt32 Health { get; }
        INotifyingItemGetter<UInt32> Health_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        INotifyingItemGetter<Single> Weight_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Armor_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        ArmorValue = 17,
        Value = 18,
        Health = 19,
        Weight = 20,
    }
    #endregion

    #region Registration
    public class Armor_Registration : ILoquiRegistration
    {
        public static readonly Armor_Registration Instance = new Armor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 67,
            version: 0);

        public const string GUID = "484e38f3-afde-4661-9c39-a8bc1e92eb99";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(Armor_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Armor_ErrorMask);

        public static readonly Type ClassType = typeof(Armor);

        public static readonly Type GetterType = typeof(IArmorGetter);

        public static readonly Type SetterType = typeof(IArmor);

        public static readonly Type CommonType = typeof(ArmorCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Armor";

        public const string Name = "Armor";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ARMORVALUE":
                    return (ushort)Armor_FieldIndex.ArmorValue;
                case "VALUE":
                    return (ushort)Armor_FieldIndex.Value;
                case "HEALTH":
                    return (ushort)Armor_FieldIndex.Health;
                case "WEIGHT":
                    return (ushort)Armor_FieldIndex.Weight;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return "ArmorValue";
                case Armor_FieldIndex.Value:
                    return "Value";
                case Armor_FieldIndex.Health:
                    return "Health";
                case Armor_FieldIndex.Weight:
                    return "Weight";
                default:
                    return ClothingAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return typeof(Single);
                case Armor_FieldIndex.Value:
                    return typeof(UInt32);
                case Armor_FieldIndex.Health:
                    return typeof(UInt32);
                case Armor_FieldIndex.Weight:
                    return typeof(Single);
                default:
                    return ClothingAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ARMO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ArmorCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IArmor item,
            IArmorGetter rhs,
            IArmorGetter def,
            ErrorMaskBuilder errorMask,
            Armor_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            ClothingAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.ArmorValue ?? true)
            {
                errorMask.PushIndex((int)Armor_FieldIndex.ArmorValue);
                try
                {
                    item.ArmorValue_Property.Set(
                        value: rhs.ArmorValue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Value ?? true)
            {
                errorMask.PushIndex((int)Armor_FieldIndex.Value);
                try
                {
                    item.Value_Property.Set(
                        value: rhs.Value,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Health ?? true)
            {
                errorMask.PushIndex((int)Armor_FieldIndex.Health);
                try
                {
                    item.Health_Property.Set(
                        value: rhs.Health,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Weight ?? true)
            {
                errorMask.PushIndex((int)Armor_FieldIndex.Weight);
                try
                {
                    item.Weight_Property.Set(
                        value: rhs.Weight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IArmor obj,
            NotifyingFireParameters cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    ClothingAbstractCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IArmor obj,
            NotifyingUnsetParameters cmds = null)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    obj.ArmorValue = default(Single);
                    break;
                case Armor_FieldIndex.Value:
                    obj.Value = default(UInt32);
                    break;
                case Armor_FieldIndex.Health:
                    obj.Health = default(UInt32);
                    break;
                case Armor_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                default:
                    ClothingAbstractCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IArmor obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                case Armor_FieldIndex.Value:
                case Armor_FieldIndex.Health:
                case Armor_FieldIndex.Weight:
                    return true;
                default:
                    return ClothingAbstractCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IArmorGetter obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return obj.ArmorValue;
                case Armor_FieldIndex.Value:
                    return obj.Value;
                case Armor_FieldIndex.Health:
                    return obj.Health;
                case Armor_FieldIndex.Weight:
                    return obj.Weight;
                default:
                    return ClothingAbstractCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IArmor item,
            NotifyingUnsetParameters cmds = null)
        {
            item.ArmorValue = default(Single);
            item.Value = default(UInt32);
            item.Health = default(UInt32);
            item.Weight = default(Single);
        }

        public static Armor_Mask<bool> GetEqualsMask(
            this IArmorGetter item,
            IArmorGetter rhs)
        {
            var ret = new Armor_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            Armor_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.ArmorValue = item.ArmorValue == rhs.ArmorValue;
            ret.Value = item.Value == rhs.Value;
            ret.Health = item.Health == rhs.Health;
            ret.Weight = item.Weight == rhs.Weight;
            ClothingAbstractCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IArmorGetter item,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IArmorGetter item,
            FileGeneration fg,
            string name = null,
            Armor_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Armor)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Armor)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ArmorValue ?? true)
                {
                    fg.AppendLine($"ArmorValue => {item.ArmorValue}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IArmorGetter item,
            Armor_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Armor_Mask<bool> GetHasBeenSetMask(IArmorGetter item)
        {
            var ret = new Armor_Mask<bool>();
            ret.ArmorValue = true;
            ret.Value = true;
            ret.Health = true;
            ret.Weight = true;
            return ret;
        }

        public static Armor_FieldIndex? ConvertFieldIndex(ClothingAbstract_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Armor_FieldIndex ConvertFieldIndex(ClothingAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ClothingAbstract_FieldIndex.MajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FormID:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.RecordType:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Name:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Script:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Enchantment:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Flags:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return (Armor_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Armor_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Armor_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Armor_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Armor_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Armor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IArmorGetter item,
            bool doMasks,
            out Armor_ErrorMask errorMask,
            Armor_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IArmorGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Armor");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Armor");
            }
            if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.ArmorValue) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ArmorValue),
                    item: item.ArmorValue_Property,
                    fieldIndex: (int)Armor_FieldIndex.ArmorValue,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Value) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Value),
                    item: item.Value_Property,
                    fieldIndex: (int)Armor_FieldIndex.Value,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Health) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Health),
                    item: item.Health_Property,
                    fieldIndex: (int)Armor_FieldIndex.Health,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Armor_FieldIndex.Weight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Weight),
                    item: item.Weight_Property,
                    fieldIndex: (int)Armor_FieldIndex.Weight,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Armor item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Armor_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Armor_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Armor item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Armor_Registration.ARMO_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Armor item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ClothingAbstractCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Armor_Registration.DATA_HEADER)))
            {
                Armor.WriteBinary_ArmorValue(
                    writer: writer,
                    item: item,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Value_Property,
                    fieldIndex: (int)Armor_FieldIndex.Value,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Health_Property,
                    fieldIndex: (int)Armor_FieldIndex.Health,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight_Property,
                    fieldIndex: (int)Armor_FieldIndex.Weight,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Armor_Mask<T> : ClothingAbstract_Mask<T>, IMask<T>, IEquatable<Armor_Mask<T>>
    {
        #region Ctors
        public Armor_Mask()
        {
        }

        public Armor_Mask(T initialValue)
        {
            this.ArmorValue = initialValue;
            this.Value = initialValue;
            this.Health = initialValue;
            this.Weight = initialValue;
        }
        #endregion

        #region Members
        public T ArmorValue;
        public T Value;
        public T Health;
        public T Weight;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Armor_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Armor_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ArmorValue, rhs.ArmorValue)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ArmorValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.ArmorValue)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Weight)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Armor_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Armor_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Armor_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.ArmorValue = eval(this.ArmorValue);
            obj.Value = eval(this.Value);
            obj.Health = eval(this.Health);
            obj.Weight = eval(this.Weight);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Armor_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Armor_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Armor_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ArmorValue ?? true)
                {
                    fg.AppendLine($"ArmorValue => {ArmorValue}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Armor_ErrorMask : ClothingAbstract_ErrorMask, IErrorMask<Armor_ErrorMask>
    {
        #region Members
        public Exception ArmorValue;
        public Exception Value;
        public Exception Health;
        public Exception Weight;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    return ArmorValue;
                case Armor_FieldIndex.Value:
                    return Value;
                case Armor_FieldIndex.Health:
                    return Health;
                case Armor_FieldIndex.Weight:
                    return Weight;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = ex;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Armor_FieldIndex enu = (Armor_FieldIndex)index;
            switch (enu)
            {
                case Armor_FieldIndex.ArmorValue:
                    this.ArmorValue = (Exception)obj;
                    break;
                case Armor_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Armor_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Armor_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ArmorValue != null) return true;
            if (Value != null) return true;
            if (Health != null) return true;
            if (Weight != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Armor_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"ArmorValue => {ArmorValue}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Weight => {Weight}");
        }
        #endregion

        #region Combine
        public Armor_ErrorMask Combine(Armor_ErrorMask rhs)
        {
            var ret = new Armor_ErrorMask();
            ret.ArmorValue = this.ArmorValue.Combine(rhs.ArmorValue);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            return ret;
        }
        public static Armor_ErrorMask Combine(Armor_ErrorMask lhs, Armor_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Armor_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Armor_ErrorMask();
        }
        #endregion

    }
    public class Armor_CopyMask : ClothingAbstract_CopyMask
    {
        #region Members
        public bool ArmorValue;
        public bool Value;
        public bool Health;
        public bool Weight;
        #endregion

    }
    public class Armor_TranslationMask : ClothingAbstract_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool ArmorValue;
        public bool Value;
        public bool Health;
        public bool Weight;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((ArmorValue, null));
            ret.Add((Value, null));
            ret.Add((Health, null));
            ret.Add((Weight, null));
        }
    }
    #endregion





    #endregion

}
