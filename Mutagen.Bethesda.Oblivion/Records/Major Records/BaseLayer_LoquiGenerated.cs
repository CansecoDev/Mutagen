/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class BaseLayer :
        LoquiNotifyingObject,
        IBaseLayerInternal,
        ILoquiObjectSetter<BaseLayer>,
        ILinkSubContainer,
        IEquatable<BaseLayer>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BaseLayer_Registration.Instance;
        public static BaseLayer_Registration Registration => BaseLayer_Registration.Instance;
        protected virtual object CommonInstance => BaseLayerCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public BaseLayer()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Texture
        public IFormIDLink<LandTexture> Texture_Property { get; } = new FormIDLink<LandTexture>();
        public LandTexture Texture { get => Texture_Property.Item; set => Texture_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<LandTexture> IBaseLayer.Texture_Property => this.Texture_Property;
        ILandTextureInternalGetter IBaseLayerGetter.Texture => this.Texture_Property.Item;
        IFormIDLinkGetter<ILandTextureInternalGetter> IBaseLayerGetter.Texture_Property => this.Texture_Property;
        #endregion
        #region Quadrant
        private AlphaLayer.QuadrantEnum _Quadrant;
        public AlphaLayer.QuadrantEnum Quadrant
        {
            get => this._Quadrant;
            set
            {
                this.BTXTDataTypeState |= BTXTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Quadrant, value, nameof(Quadrant));
            }
        }
        #endregion
        #region LayerNumber
        private UInt16 _LayerNumber;
        public UInt16 LayerNumber
        {
            get => this._LayerNumber;
            protected set
            {
                this.BTXTDataTypeState |= BTXTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._LayerNumber, value, nameof(LayerNumber));
            }
        }
        #endregion
        #region BTXTDataTypeState
        private BaseLayer.BTXTDataType _BTXTDataTypeState;
        public BaseLayer.BTXTDataType BTXTDataTypeState
        {
            get => this._BTXTDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._BTXTDataTypeState, value, nameof(BTXTDataTypeState));
        }
        BaseLayer.BTXTDataType IBaseLayerInternal.BTXTDataTypeState
        {
            get => this.BTXTDataTypeState;
            set => this.BTXTDataTypeState = value;
        }
        BaseLayer.BTXTDataType IBaseLayerInternalGetter.BTXTDataTypeState
        {
            get => this.BTXTDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBaseLayerInternalGetter)rhs, include);
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            BaseLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IBaseLayerInternalGetter rhs)) return false;
            return ((BaseLayerCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(BaseLayer obj)
        {
            return ((BaseLayerCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((BaseLayerCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected virtual object XmlWriteTranslator => BaseLayerXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static BaseLayer CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            BaseLayer_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static BaseLayer CreateFromXml(
            XElement node,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true,
            BaseLayer_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static BaseLayer CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new BaseLayer() : null;
                    break;
                default:
                    break;
            }
            var ret = new BaseLayer();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    BaseLayerXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static BaseLayer CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            BaseLayer_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static BaseLayer CreateFromXml(
            string path,
            out BaseLayer_ErrorMask errorMask,
            BaseLayer_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BaseLayer CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            BaseLayer_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static BaseLayer CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            BaseLayer_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static BaseLayer CreateFromXml(
            Stream stream,
            out BaseLayer_ErrorMask errorMask,
            BaseLayer_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BaseLayer CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            BaseLayer_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            BaseLayer item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasBTXTDataType":
                    item.BTXTDataTypeState |= BaseLayer.BTXTDataType.Has;
                    break;
                case "LayerNumber":
                    try
                    {
                        errorMask?.PushIndex((int)BaseLayer_FieldIndex.LayerNumber);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 LayerNumberParse,
                            errorMask: errorMask))
                        {
                            item.LayerNumber = LayerNumberParse;
                        }
                        else
                        {
                            item.LayerNumber = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected virtual bool GetHasBeenSet(int index)
        {
            switch ((BaseLayer_FieldIndex)index)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        [Flags]
        public enum BTXTDataType
        {
            Has = 1
        }
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Texture_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            Texture_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        protected virtual object BinaryWriteTranslator => BaseLayerBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static BaseLayer CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static BaseLayer CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static BaseLayer CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new BaseLayer();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            BaseLayer item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            BaseLayer item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54585442: // BTXT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BaseLayer_FieldIndex.LayerNumber) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.BTXTDataTypeState = BTXTDataType.Has;
                    }
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: dataFrame,
                        masterReferences: masterReferences,
                        item: item.Texture_Property);
                    if (EnumBinaryTranslation<AlphaLayer.QuadrantEnum>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(2),
                        item: out AlphaLayer.QuadrantEnum QuadrantParse))
                    {
                        item.Quadrant = QuadrantParse;
                    }
                    else
                    {
                        item.Quadrant = default(AlphaLayer.QuadrantEnum);
                    }
                    item.LayerNumber = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)BaseLayer_FieldIndex.LayerNumber);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public BaseLayer Copy(
            BaseLayer_CopyMask copyMask = null,
            BaseLayer def = null)
        {
            return BaseLayer.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static BaseLayer Copy(
            BaseLayer item,
            BaseLayer_CopyMask copyMask = null,
            BaseLayer def = null)
        {
            BaseLayer ret;
            if (item.GetType().Equals(typeof(BaseLayer)))
            {
                ret = new BaseLayer();
            }
            else
            {
                ret = (BaseLayer)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static BaseLayer Copy_ToLoqui(
            BaseLayer item,
            BaseLayer_CopyMask copyMask = null,
            BaseLayer def = null)
        {
            BaseLayer ret;
            if (item.GetType().Equals(typeof(BaseLayer)))
            {
                ret = new BaseLayer() as BaseLayer;
            }
            else
            {
                ret = (BaseLayer)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public virtual void CopyFieldsFrom(BaseLayer rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            BaseLayer rhs,
            BaseLayer_CopyMask copyMask,
            BaseLayer def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            BaseLayer rhs,
            out BaseLayer_ErrorMask errorMask,
            BaseLayer_CopyMask copyMask = null,
            BaseLayer def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BaseLayerCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            BaseLayer rhs,
            ErrorMaskBuilder errorMask,
            BaseLayer_CopyMask copyMask = null,
            BaseLayer def = null)
        {
            BaseLayerCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected virtual void SetNthObject(ushort index, object obj)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    this.Texture_Property.Set((IFormIDLink<LandTexture>)obj);
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    this.Quadrant = (AlphaLayer.QuadrantEnum)obj;
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    this.LayerNumber = (UInt16)obj;
                    break;
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    this.BTXTDataTypeState = (BaseLayer.BTXTDataType)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void Clear()
        {
            BaseLayerCommon.Instance.Clear(this);
        }

        public static BaseLayer Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new BaseLayer();
            foreach (var pair in fields)
            {
                CopyInInternal_BaseLayer(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_BaseLayer(BaseLayer obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out BaseLayer_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    obj.Texture_Property.Set((IFormIDLink<LandTexture>)pair.Value);
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    obj.Quadrant = (AlphaLayer.QuadrantEnum)pair.Value;
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    obj.LayerNumber = (UInt16)pair.Value;
                    break;
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    obj.BTXTDataTypeState = (BaseLayer.BTXTDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IBaseLayer :
        IBaseLayerInternalGetter,
        ILoquiObjectSetter<IBaseLayerInternal>
    {
        new LandTexture Texture { get; set; }
        new IFormIDLink<LandTexture> Texture_Property { get; }
        new AlphaLayer.QuadrantEnum Quadrant { get; set; }

        void CopyFieldsFrom(
            BaseLayer rhs,
            ErrorMaskBuilder errorMask = null,
            BaseLayer_CopyMask copyMask = null,
            BaseLayer def = null);
    }

    public partial interface IBaseLayerInternal :
        IBaseLayer,
        IBaseLayerInternalGetter
    {
        new LandTexture Texture { get; set; }
        new IFormIDLink<LandTexture> Texture_Property { get; }
        new BaseLayer.BTXTDataType BTXTDataTypeState { get; set; }

    }

    public partial interface IBaseLayerGetter :
        ILoquiObject,
        ILoquiObject<IBaseLayerInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Texture
        ILandTextureInternalGetter Texture { get; }
        IFormIDLinkGetter<ILandTextureInternalGetter> Texture_Property { get; }

        #endregion
        #region Quadrant
        AlphaLayer.QuadrantEnum Quadrant { get; }

        #endregion
        #region LayerNumber
        UInt16 LayerNumber { get; }

        #endregion

    }

    public partial interface IBaseLayerInternalGetter : IBaseLayerGetter
    {
        #region BTXTDataTypeState
        BaseLayer.BTXTDataType BTXTDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class BaseLayerMixIn
    {
        public static void Clear(this IBaseLayerInternal item)
        {
            ((BaseLayerCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static BaseLayer_Mask<bool> GetEqualsMask(
            this IBaseLayerInternalGetter item,
            IBaseLayerInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BaseLayerCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBaseLayerInternalGetter item,
            string name = null,
            BaseLayer_Mask<bool> printMask = null)
        {
            return ((BaseLayerCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBaseLayerInternalGetter item,
            FileGeneration fg,
            string name = null,
            BaseLayer_Mask<bool> printMask = null)
        {
            ((BaseLayerCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IBaseLayerInternalGetter item,
            BaseLayer_Mask<bool?> checkMask)
        {
            return ((BaseLayerCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static BaseLayer_Mask<bool> GetHasBeenSetMask(this IBaseLayerInternalGetter item)
        {
            var ret = new BaseLayer_Mask<bool>();
            ((BaseLayerCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IBaseLayerInternalGetter item,
            IBaseLayerInternalGetter rhs)
        {
            return ((BaseLayerCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum BaseLayer_FieldIndex
    {
        Texture = 0,
        Quadrant = 1,
        LayerNumber = 2,
        BTXTDataTypeState = 3,
    }
    #endregion

    #region Registration
    public class BaseLayer_Registration : ILoquiRegistration
    {
        public static readonly BaseLayer_Registration Instance = new BaseLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 145,
            version: 0);

        public const string GUID = "4b14f70e-5702-4ed0-b691-09996696e4d9";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(BaseLayer_Mask<>);

        public static readonly Type ErrorMaskType = typeof(BaseLayer_ErrorMask);

        public static readonly Type ClassType = typeof(BaseLayer);

        public static readonly Type GetterType = typeof(IBaseLayerGetter);

        public static readonly Type InternalGetterType = typeof(IBaseLayerInternalGetter);

        public static readonly Type SetterType = typeof(IBaseLayer);

        public static readonly Type InternalSetterType = typeof(IBaseLayerInternal);

        public static readonly Type CommonType = typeof(BaseLayerCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.BaseLayer";

        public const string Name = "BaseLayer";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURE":
                    return (ushort)BaseLayer_FieldIndex.Texture;
                case "QUADRANT":
                    return (ushort)BaseLayer_FieldIndex.Quadrant;
                case "LAYERNUMBER":
                    return (ushort)BaseLayer_FieldIndex.LayerNumber;
                case "BTXTDATATYPESTATE":
                    return (ushort)BaseLayer_FieldIndex.BTXTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return "Texture";
                case BaseLayer_FieldIndex.Quadrant:
                    return "Quadrant";
                case BaseLayer_FieldIndex.LayerNumber:
                    return "LayerNumber";
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return "BTXTDataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.LayerNumber:
                    return true;
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return typeof(IFormIDLink<LandTexture>);
                case BaseLayer_FieldIndex.Quadrant:
                    return typeof(AlphaLayer.QuadrantEnum);
                case BaseLayer_FieldIndex.LayerNumber:
                    return typeof(UInt16);
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return typeof(BaseLayer.BTXTDataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(BaseLayerXmlWriteTranslation);
        public static readonly RecordType BTXT_HEADER = new RecordType("BTXT");
        public static readonly RecordType ATXT_HEADER = new RecordType("ATXT");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        BTXT_HEADER,
                        ATXT_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(BaseLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BaseLayerCommon
    {
        public static readonly BaseLayerCommon Instance = new BaseLayerCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            BaseLayer item,
            BaseLayer rhs,
            BaseLayer def,
            ErrorMaskBuilder errorMask,
            BaseLayer_CopyMask copyMask)
        {
            if (copyMask?.Texture ?? true)
            {
                errorMask?.PushIndex((int)BaseLayer_FieldIndex.Texture);
                try
                {
                    item.Texture_Property.SetLink(value: rhs.Texture_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Quadrant ?? true)
            {
                errorMask?.PushIndex((int)BaseLayer_FieldIndex.Quadrant);
                try
                {
                    item.Quadrant = rhs.Quadrant;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IBaseLayerInternal item)
        {
            ClearPartial();
            item.Texture = default(LandTexture);
            item.Quadrant = default(AlphaLayer.QuadrantEnum);
        }

        public BaseLayer_Mask<bool> GetEqualsMask(
            IBaseLayerInternalGetter item,
            IBaseLayerInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BaseLayer_Mask<bool>();
            ((BaseLayerCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IBaseLayerInternalGetter item,
            IBaseLayerInternalGetter rhs,
            BaseLayer_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Texture = item.Texture_Property.FormKey == rhs.Texture_Property.FormKey;
            ret.Quadrant = item.Quadrant == rhs.Quadrant;
            ret.LayerNumber = item.LayerNumber == rhs.LayerNumber;
        }

        public string ToString(
            IBaseLayerInternalGetter item,
            string name = null,
            BaseLayer_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IBaseLayerInternalGetter item,
            FileGeneration fg,
            string name = null,
            BaseLayer_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"BaseLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (BaseLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IBaseLayerInternalGetter item,
            FileGeneration fg,
            BaseLayer_Mask<bool> printMask = null)
        {
            if (printMask?.Texture ?? true)
            {
                fg.AppendLine($"Texture => {item.Texture_Property}");
            }
            if (printMask?.Quadrant ?? true)
            {
                fg.AppendLine($"Quadrant => {item.Quadrant}");
            }
            if (printMask?.LayerNumber ?? true)
            {
                fg.AppendLine($"LayerNumber => {item.LayerNumber}");
            }
            if (printMask?.BTXTDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IBaseLayerInternalGetter item,
            BaseLayer_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IBaseLayerInternalGetter item,
            BaseLayer_Mask<bool> mask)
        {
            mask.Texture = true;
            mask.Quadrant = true;
            mask.LayerNumber = true;
            mask.BTXTDataTypeState = true;
        }

        #region Equals and Hash
        public virtual bool Equals(
            IBaseLayerInternalGetter lhs,
            IBaseLayerInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Texture_Property.Equals(rhs.Texture_Property)) return false;
            if (lhs.Quadrant != rhs.Quadrant) return false;
            if (lhs.LayerNumber != rhs.LayerNumber) return false;
            if (lhs.BTXTDataTypeState != rhs.BTXTDataTypeState) return false;
            return true;
        }

        public virtual int GetHashCode(IBaseLayerInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Texture).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Quadrant).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LayerNumber).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BTXTDataTypeState).CombineHashCode(ret);
            return ret;
        }

        #endregion


    }
    #endregion

}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BaseLayerXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static BaseLayerXmlWriteTranslation Instance = new BaseLayerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IBaseLayerInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.BTXTDataTypeState.HasFlag(BaseLayer.BTXTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.Texture) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Texture),
                        item: item.Texture_Property?.FormKey,
                        fieldIndex: (int)BaseLayer_FieldIndex.Texture,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.Quadrant) ?? true))
                {
                    EnumXmlTranslation<AlphaLayer.QuadrantEnum>.Instance.Write(
                        node: node,
                        name: nameof(item.Quadrant),
                        item: item.Quadrant,
                        fieldIndex: (int)BaseLayer_FieldIndex.Quadrant,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.LayerNumber) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LayerNumber),
                        item: item.LayerNumber,
                        fieldIndex: (int)BaseLayer_FieldIndex.LayerNumber,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.BTXTDataTypeState) ?? true))
            {
                EnumXmlTranslation<BaseLayer.BTXTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.BTXTDataTypeState),
                    item: item.BTXTDataTypeState,
                    fieldIndex: (int)BaseLayer_FieldIndex.BTXTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IBaseLayerInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.BaseLayer");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.BaseLayer");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBaseLayerInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IBaseLayerInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IBaseLayerInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class BaseLayerXmlCreateTranslation
    {
        public readonly static BaseLayerXmlCreateTranslation Instance = new BaseLayerXmlCreateTranslation();

        public static void FillPublicXml(
            IBaseLayerInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BaseLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IBaseLayerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Texture":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Texture_Property,
                        fieldIndex: (int)BaseLayer_FieldIndex.Texture,
                        errorMask: errorMask);
                    item.BTXTDataTypeState |= BaseLayer.BTXTDataType.Has;
                    break;
                case "Quadrant":
                    try
                    {
                        errorMask?.PushIndex((int)BaseLayer_FieldIndex.Quadrant);
                        if (EnumXmlTranslation<AlphaLayer.QuadrantEnum>.Instance.Parse(
                            node: node,
                            item: out AlphaLayer.QuadrantEnum QuadrantParse,
                            errorMask: errorMask))
                        {
                            item.Quadrant = QuadrantParse;
                        }
                        else
                        {
                            item.Quadrant = default(AlphaLayer.QuadrantEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BTXTDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)BaseLayer_FieldIndex.BTXTDataTypeState);
                        if (EnumXmlTranslation<BaseLayer.BTXTDataType>.Instance.Parse(
                            node: node,
                            item: out BaseLayer.BTXTDataType BTXTDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.BTXTDataTypeState = BTXTDataTypeStateParse;
                        }
                        else
                        {
                            item.BTXTDataTypeState = default(BaseLayer.BTXTDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class BaseLayerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            XElement node,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true,
            BaseLayer_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            string path,
            out BaseLayer_ErrorMask errorMask,
            BaseLayer_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            Stream stream,
            out BaseLayer_ErrorMask errorMask,
            BaseLayer_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            XElement node,
            string name = null,
            BaseLayer_TranslationMask translationMask = null)
        {
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBaseLayerInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class BaseLayer_Mask<T> : IMask<T>, IEquatable<BaseLayer_Mask<T>>
    {
        #region Ctors
        public BaseLayer_Mask()
        {
        }

        public BaseLayer_Mask(T initialValue)
        {
            this.Texture = initialValue;
            this.Quadrant = initialValue;
            this.LayerNumber = initialValue;
            this.BTXTDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Texture;
        public T Quadrant;
        public T LayerNumber;
        public T BTXTDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is BaseLayer_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(BaseLayer_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Texture, rhs.Texture)) return false;
            if (!object.Equals(this.Quadrant, rhs.Quadrant)) return false;
            if (!object.Equals(this.LayerNumber, rhs.LayerNumber)) return false;
            if (!object.Equals(this.BTXTDataTypeState, rhs.BTXTDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Texture?.GetHashCode());
            ret = ret.CombineHashCode(this.Quadrant?.GetHashCode());
            ret = ret.CombineHashCode(this.LayerNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.BTXTDataTypeState?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Texture)) return false;
            if (!eval(this.Quadrant)) return false;
            if (!eval(this.LayerNumber)) return false;
            if (!eval(this.BTXTDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public BaseLayer_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new BaseLayer_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(BaseLayer_Mask<R> obj, Func<T, R> eval)
        {
            obj.Texture = eval(this.Texture);
            obj.Quadrant = eval(this.Quadrant);
            obj.LayerNumber = eval(this.LayerNumber);
            obj.BTXTDataTypeState = eval(this.BTXTDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(BaseLayer_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, BaseLayer_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(BaseLayer_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Texture ?? true)
                {
                    fg.AppendLine($"Texture => {Texture}");
                }
                if (printMask?.Quadrant ?? true)
                {
                    fg.AppendLine($"Quadrant => {Quadrant}");
                }
                if (printMask?.LayerNumber ?? true)
                {
                    fg.AppendLine($"LayerNumber => {LayerNumber}");
                }
                if (printMask?.BTXTDataTypeState ?? true)
                {
                    fg.AppendLine($"BTXTDataTypeState => {BTXTDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class BaseLayer_ErrorMask : IErrorMask, IErrorMask<BaseLayer_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Texture;
        public Exception Quadrant;
        public Exception LayerNumber;
        public Exception BTXTDataTypeState;
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return Texture;
                case BaseLayer_FieldIndex.Quadrant:
                    return Quadrant;
                case BaseLayer_FieldIndex.LayerNumber:
                    return LayerNumber;
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return BTXTDataTypeState;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    this.Texture = ex;
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    this.Quadrant = ex;
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    this.LayerNumber = ex;
                    break;
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    this.BTXTDataTypeState = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    this.Texture = (Exception)obj;
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    this.Quadrant = (Exception)obj;
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    this.LayerNumber = (Exception)obj;
                    break;
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    this.BTXTDataTypeState = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (Texture != null) return true;
            if (Quadrant != null) return true;
            if (LayerNumber != null) return true;
            if (BTXTDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("BaseLayer_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Texture => {Texture}");
            fg.AppendLine($"Quadrant => {Quadrant}");
            fg.AppendLine($"LayerNumber => {LayerNumber}");
            fg.AppendLine($"BTXTDataTypeState => {BTXTDataTypeState}");
        }
        #endregion

        #region Combine
        public BaseLayer_ErrorMask Combine(BaseLayer_ErrorMask rhs)
        {
            var ret = new BaseLayer_ErrorMask();
            ret.Texture = this.Texture.Combine(rhs.Texture);
            ret.Quadrant = this.Quadrant.Combine(rhs.Quadrant);
            ret.LayerNumber = this.LayerNumber.Combine(rhs.LayerNumber);
            ret.BTXTDataTypeState = this.BTXTDataTypeState.Combine(rhs.BTXTDataTypeState);
            return ret;
        }
        public static BaseLayer_ErrorMask Combine(BaseLayer_ErrorMask lhs, BaseLayer_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static BaseLayer_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new BaseLayer_ErrorMask();
        }
        #endregion

    }
    public class BaseLayer_CopyMask
    {
        public BaseLayer_CopyMask()
        {
        }

        public BaseLayer_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Texture = defaultOn;
            this.Quadrant = defaultOn;
            this.LayerNumber = defaultOn;
            this.BTXTDataTypeState = defaultOn;
        }

        #region Members
        public bool Texture;
        public bool Quadrant;
        public bool LayerNumber;
        public bool BTXTDataTypeState;
        #endregion

    }

    public class BaseLayer_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Texture;
        public bool Quadrant;
        public bool LayerNumber;
        public bool BTXTDataTypeState;
        #endregion

        #region Ctors
        public BaseLayer_TranslationMask()
        {
        }

        public BaseLayer_TranslationMask(bool defaultOn)
        {
            this.Texture = defaultOn;
            this.Quadrant = defaultOn;
            this.LayerNumber = defaultOn;
            this.BTXTDataTypeState = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected virtual void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Texture, null));
            ret.Add((Quadrant, null));
            ret.Add((LayerNumber, null));
            ret.Add((BTXTDataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BaseLayerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static BaseLayerBinaryWriteTranslation Instance = new BaseLayerBinaryWriteTranslation();

        public static void Write_Embedded(
            IBaseLayerInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
        }

        public static void Write_RecordTypes(
            IBaseLayerInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.BTXTDataTypeState.HasFlag(BaseLayer.BTXTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(BaseLayer_Registration.BTXT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Texture_Property,
                        masterReferences: masterReferences);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<AlphaLayer.QuadrantEnum>.Instance.Write(
                        writer,
                        item.Quadrant,
                        length: 2);
                    writer.Write(item.LayerNumber);
                }
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IBaseLayerInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBaseLayerInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class BaseLayerBinaryCreateTranslation
    {
        public readonly static BaseLayerBinaryCreateTranslation Instance = new BaseLayerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class BaseLayerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBaseLayerInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((BaseLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IBaseLayerInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((BaseLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IBaseLayerInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((BaseLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BaseLayerBinaryWrapper :
        BinaryWrapper,
        IBaseLayerInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BaseLayer_Registration.Instance;
        public static BaseLayer_Registration Registration => BaseLayer_Registration.Instance;
        protected virtual object CommonInstance => BaseLayerCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBaseLayerInternalGetter)rhs, include);

        protected virtual object XmlWriteTranslator => BaseLayerXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        protected virtual object BinaryWriteTranslator => BaseLayerBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;

        private int? _BTXTLocation;
        public BaseLayer.BTXTDataType BTXTDataTypeState { get; private set; }
        #region Texture
        private int _TextureLocation => _BTXTLocation.Value + 0x0;
        private bool _Texture_IsSet => _BTXTLocation.HasValue;
        public IFormIDLinkGetter<ILandTextureInternalGetter> Texture_Property => _Texture_IsSet ? new FormIDLink<ILandTextureInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_TextureLocation, 4)))) : FormIDLink<ILandTextureInternalGetter>.Empty;
        public ILandTextureInternalGetter Texture => default;
        #endregion
        #region Quadrant
        private int _QuadrantLocation => _BTXTLocation.Value + 0x4;
        private bool _Quadrant_IsSet => _BTXTLocation.HasValue;
        public AlphaLayer.QuadrantEnum Quadrant => _Quadrant_IsSet ? (AlphaLayer.QuadrantEnum)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_QuadrantLocation, 2)) : default;
        #endregion
        #region LayerNumber
        private int _LayerNumberLocation => _BTXTLocation.Value + 0x6;
        private bool _LayerNumber_IsSet => _BTXTLocation.HasValue;
        public UInt16 LayerNumber => _LayerNumber_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_LayerNumberLocation, 2)) : default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected BaseLayerBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static BaseLayerBinaryWrapper BaseLayerFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new BaseLayerBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public virtual TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54585442: // BTXT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BaseLayer_FieldIndex.LayerNumber) return TryGet<int?>.Failure;
                    _BTXTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.BTXTDataTypeState = BaseLayer.BTXTDataType.Has;
                    return TryGet<int?>.Succeed((int)BaseLayer_FieldIndex.LayerNumber);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

