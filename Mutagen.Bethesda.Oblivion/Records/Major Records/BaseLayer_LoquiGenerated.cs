/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class BaseLayer : IBaseLayer, ILoquiObject<BaseLayer>, ILoquiObjectSetter, IEquatable<BaseLayer>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BaseLayer_Registration.Instance;
        public static BaseLayer_Registration Registration => BaseLayer_Registration.Instance;

        #region Ctor
        public BaseLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Texture
        public FormIDLink<LandTexture> Texture_Property { get; } = new FormIDLink<LandTexture>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LandTexture Texture { get => Texture_Property.Item; set => Texture_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<LandTexture> IBaseLayerGetter.Texture_Property => this.Texture_Property;
        #endregion
        #region Quadrant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<AlphaLayer.QuadrantEnum> _Quadrant = NotifyingItem.Factory<AlphaLayer.QuadrantEnum>();
        public INotifyingItem<AlphaLayer.QuadrantEnum> Quadrant_Property => _Quadrant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public AlphaLayer.QuadrantEnum Quadrant
        {
            get => this._Quadrant.Item;
            set => this._Quadrant.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<AlphaLayer.QuadrantEnum> IBaseLayer.Quadrant_Property => this.Quadrant_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<AlphaLayer.QuadrantEnum> IBaseLayerGetter.Quadrant_Property => this.Quadrant_Property;
        #endregion
        #region LayerNumber
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt16> _LayerNumber = NotifyingItem.Factory<UInt16>();
        public INotifyingItemGetter<UInt16> LayerNumber_Property => _LayerNumber;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 LayerNumber
        {
            get => this._LayerNumber.Item;
            protected set => this._LayerNumber.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> IBaseLayerGetter.LayerNumber_Property => this.LayerNumber_Property;
        #endregion

        #region Loqui Getter Interface

        protected virtual object GetNthObject(ushort index) => BaseLayerCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected virtual bool GetNthObjectHasBeenSet(ushort index) => BaseLayerCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected virtual void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => BaseLayerCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected virtual void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            BaseLayerCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<BaseLayer>.GetEqualsMask(BaseLayer rhs) => BaseLayerCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IBaseLayerGetter>.GetEqualsMask(IBaseLayerGetter rhs) => BaseLayerCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return BaseLayerCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            BaseLayer_Mask<bool> printMask = null)
        {
            return BaseLayerCommon.ToString(this, name: name, printMask: printMask);
        }

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            BaseLayerCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public BaseLayer_Mask<bool> GetHasBeenSetMask()
        {
            return BaseLayerCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is BaseLayer rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(BaseLayer rhs)
        {
            if (rhs == null) return false;
            if (!this.Texture_Property.Equals(rhs.Texture_Property)) return false;
            if (this.Quadrant != rhs.Quadrant) return false;
            if (this.LayerNumber != rhs.LayerNumber) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Texture).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Quadrant).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LayerNumber).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static BaseLayer Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static BaseLayer Create_XML(
            XElement root,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static BaseLayer Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new BaseLayer();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static BaseLayer Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static BaseLayer Create_XML(
            string path,
            out BaseLayer_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static BaseLayer Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static BaseLayer Create_XML(
            Stream stream,
            out BaseLayer_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public virtual void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<BaseLayer>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out BaseLayer_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<BaseLayer>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out BaseLayer_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out BaseLayer_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as BaseLayer_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public virtual void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public virtual void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected virtual object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            BaseLayerCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            BaseLayer item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Texture":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)BaseLayer_FieldIndex.Texture,
                        item: item.Texture_Property,
                        errorMask: errorMask);
                    break;
                case "Quadrant":
                    EnumXmlTranslation<AlphaLayer.QuadrantEnum>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)BaseLayer_FieldIndex.Quadrant,
                        item: item._Quadrant,
                        errorMask: errorMask);
                    break;
                case "LayerNumber":
                    UInt16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)BaseLayer_FieldIndex.LayerNumber,
                        item: item._LayerNumber,
                        errorMask: errorMask);
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Texture_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static BaseLayer Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static BaseLayer Create_Binary(
            MutagenFrame frame,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static BaseLayer Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new BaseLayer();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    BaseLayer_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static BaseLayer Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static BaseLayer Create_Binary(
            string path,
            out BaseLayer_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static BaseLayer Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static BaseLayer Create_Binary(
            Stream stream,
            out BaseLayer_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as BaseLayer_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out BaseLayer_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public virtual void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public virtual void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected virtual object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            BaseLayerCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_Binary_Structs(
            BaseLayer item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<BaseLayer_FieldIndex?> Fill_Binary_RecordTypes(
            BaseLayer item,
            MutagenFrame frame,
            BaseLayer_FieldIndex? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "BTXT":
                    if (lastParsed.HasValue && lastParsed.Value >= BaseLayer_FieldIndex.LayerNumber) return TryGet<BaseLayer_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item.Texture_Property,
                            fieldIndex: (int)BaseLayer_FieldIndex.Texture,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<AlphaLayer.QuadrantEnum>.Instance.ParseInto(
                            frame: dataFrame.SpawnWithLength(2),
                            item: item._Quadrant,
                            fieldIndex: (int)BaseLayer_FieldIndex.Quadrant,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._LayerNumber,
                            fieldIndex: (int)BaseLayer_FieldIndex.LayerNumber,
                            errorMask: errorMask);
                    }
                    return TryGet<BaseLayer_FieldIndex?>.Succeed(BaseLayer_FieldIndex.LayerNumber);
                default:
                    return TryGet<BaseLayer_FieldIndex?>.Failure;
            }
        }

        #endregion

        public BaseLayer Copy(
            BaseLayer_CopyMask copyMask = null,
            IBaseLayerGetter def = null)
        {
            return BaseLayer.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static BaseLayer Copy(
            IBaseLayer item,
            BaseLayer_CopyMask copyMask = null,
            IBaseLayerGetter def = null)
        {
            BaseLayer ret;
            if (item.GetType().Equals(typeof(BaseLayer)))
            {
                ret = new BaseLayer();
            }
            else
            {
                ret = (BaseLayer)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static BaseLayer Copy_ToLoqui(
            IBaseLayerGetter item,
            BaseLayer_CopyMask copyMask = null,
            IBaseLayerGetter def = null)
        {
            BaseLayer ret;
            if (item.GetType().Equals(typeof(BaseLayer)))
            {
                ret = new BaseLayer() as BaseLayer;
            }
            else
            {
                ret = (BaseLayer)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IBaseLayerGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IBaseLayerGetter rhs,
            BaseLayer_CopyMask copyMask,
            IBaseLayerGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IBaseLayerGetter rhs,
            out BaseLayer_ErrorMask errorMask,
            BaseLayer_CopyMask copyMask = null,
            IBaseLayerGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BaseLayerCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IBaseLayerGetter rhs,
            ErrorMaskBuilder errorMask,
            BaseLayer_CopyMask copyMask = null,
            IBaseLayerGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            BaseLayerCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected virtual void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    this.Texture_Property.Set(
                        (FormIDLink<LandTexture>)obj,
                        cmds);
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    this._Quadrant.Set(
                        (AlphaLayer.QuadrantEnum)obj,
                        cmds);
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    this._LayerNumber.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public virtual void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            BaseLayerCommon.Clear(this, cmds);
        }


        public static BaseLayer Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new BaseLayer();
            foreach (var pair in fields)
            {
                CopyInInternal_BaseLayer(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_BaseLayer(BaseLayer obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out BaseLayer_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    obj.Texture_Property.Set(
                        (FormIDLink<LandTexture>)pair.Value,
                        null);
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    obj._Quadrant.Set(
                        (AlphaLayer.QuadrantEnum)pair.Value,
                        null);
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    obj._LayerNumber.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, BaseLayer obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IBaseLayer : IBaseLayerGetter, ILoquiClass<IBaseLayer, IBaseLayerGetter>, ILoquiClass<BaseLayer, IBaseLayerGetter>
    {
        new LandTexture Texture { get; set; }
        new AlphaLayer.QuadrantEnum Quadrant { get; set; }
        new INotifyingItem<AlphaLayer.QuadrantEnum> Quadrant_Property { get; }

    }

    public partial interface IBaseLayerGetter : ILoquiObject
    {
        #region Texture
        LandTexture Texture { get; }
        FormIDLink<LandTexture> Texture_Property { get; }

        #endregion
        #region Quadrant
        AlphaLayer.QuadrantEnum Quadrant { get; }
        INotifyingItemGetter<AlphaLayer.QuadrantEnum> Quadrant_Property { get; }

        #endregion
        #region LayerNumber
        UInt16 LayerNumber { get; }
        INotifyingItemGetter<UInt16> LayerNumber_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum BaseLayer_FieldIndex
    {
        Texture = 0,
        Quadrant = 1,
        LayerNumber = 2,
    }
    #endregion

    #region Registration
    public class BaseLayer_Registration : ILoquiRegistration
    {
        public static readonly BaseLayer_Registration Instance = new BaseLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 145,
            version: 0);

        public const string GUID = "4b14f70e-5702-4ed0-b691-09996696e4d9";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(BaseLayer_Mask<>);

        public static readonly Type ErrorMaskType = typeof(BaseLayer_ErrorMask);

        public static readonly Type ClassType = typeof(BaseLayer);

        public static readonly Type GetterType = typeof(IBaseLayerGetter);

        public static readonly Type SetterType = typeof(IBaseLayer);

        public static readonly Type CommonType = typeof(BaseLayerCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.BaseLayer";

        public const string Name = "BaseLayer";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURE":
                    return (ushort)BaseLayer_FieldIndex.Texture;
                case "QUADRANT":
                    return (ushort)BaseLayer_FieldIndex.Quadrant;
                case "LAYERNUMBER":
                    return (ushort)BaseLayer_FieldIndex.LayerNumber;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return "Texture";
                case BaseLayer_FieldIndex.Quadrant:
                    return "Quadrant";
                case BaseLayer_FieldIndex.LayerNumber:
                    return "LayerNumber";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.LayerNumber:
                    return true;
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return typeof(FormIDLink<LandTexture>);
                case BaseLayer_FieldIndex.Quadrant:
                    return typeof(AlphaLayer.QuadrantEnum);
                case BaseLayer_FieldIndex.LayerNumber:
                    return typeof(UInt16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType BTXT_HEADER = new RecordType("BTXT");
        public static readonly RecordType ATXT_HEADER = new RecordType("ATXT");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        BTXT_HEADER,
                        ATXT_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class BaseLayerCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IBaseLayer item,
            IBaseLayerGetter rhs,
            IBaseLayerGetter def,
            ErrorMaskBuilder errorMask,
            BaseLayer_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Texture ?? true)
            {
                errorMask.PushIndex((int)BaseLayer_FieldIndex.Texture);
                try
                {
                    item.Texture_Property.Set(
                        value: rhs.Texture,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Quadrant ?? true)
            {
                errorMask.PushIndex((int)BaseLayer_FieldIndex.Quadrant);
                try
                {
                    item.Quadrant_Property.Set(
                        value: rhs.Quadrant,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IBaseLayer obj,
            NotifyingFireParameters cmds = null)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IBaseLayer obj,
            NotifyingUnsetParameters cmds = null)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    obj.Texture = default(FormIDLink<LandTexture>);
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    obj.Quadrant = default(AlphaLayer.QuadrantEnum);
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IBaseLayer obj)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IBaseLayerGetter obj)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return obj.Texture;
                case BaseLayer_FieldIndex.Quadrant:
                    return obj.Quadrant;
                case BaseLayer_FieldIndex.LayerNumber:
                    return obj.LayerNumber;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IBaseLayer item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Texture = default(FormIDLink<LandTexture>);
            item.Quadrant = default(AlphaLayer.QuadrantEnum);
        }

        public static BaseLayer_Mask<bool> GetEqualsMask(
            this IBaseLayerGetter item,
            IBaseLayerGetter rhs)
        {
            var ret = new BaseLayer_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IBaseLayerGetter item,
            IBaseLayerGetter rhs,
            BaseLayer_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Texture = item.Texture == rhs.Texture;
            ret.Quadrant = item.Quadrant == rhs.Quadrant;
            ret.LayerNumber = item.LayerNumber == rhs.LayerNumber;
        }

        public static string ToString(
            this IBaseLayerGetter item,
            string name = null,
            BaseLayer_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IBaseLayerGetter item,
            FileGeneration fg,
            string name = null,
            BaseLayer_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(BaseLayer)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(BaseLayer)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Texture ?? true)
                {
                    fg.AppendLine($"Texture => {item.Texture_Property}");
                }
                if (printMask?.Quadrant ?? true)
                {
                    fg.AppendLine($"Quadrant => {item.Quadrant}");
                }
                if (printMask?.LayerNumber ?? true)
                {
                    fg.AppendLine($"LayerNumber => {item.LayerNumber}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IBaseLayerGetter item,
            BaseLayer_Mask<bool?> checkMask)
        {
            return true;
        }

        public static BaseLayer_Mask<bool> GetHasBeenSetMask(IBaseLayerGetter item)
        {
            var ret = new BaseLayer_Mask<bool>();
            ret.Texture = true;
            ret.Quadrant = true;
            ret.LayerNumber = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IBaseLayerGetter item,
            bool doMasks,
            out BaseLayer_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_XML_Internal(
            XElement node,
            IBaseLayerGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.BaseLayer");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.BaseLayer");
            }
            FormIDXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Texture),
                item: item.Texture?.FormID,
                fieldIndex: (int)BaseLayer_FieldIndex.Texture,
                errorMask: errorMask);
            EnumXmlTranslation<AlphaLayer.QuadrantEnum>.Instance.Write(
                node: elem,
                name: nameof(item.Quadrant),
                item: item.Quadrant_Property,
                fieldIndex: (int)BaseLayer_FieldIndex.Quadrant,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.LayerNumber),
                item: item.LayerNumber_Property,
                fieldIndex: (int)BaseLayer_FieldIndex.LayerNumber,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            BaseLayer item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out BaseLayer_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = BaseLayer_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            BaseLayer item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            BaseLayer item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportSubRecordHeader(writer, BaseLayer_Registration.BTXT_HEADER))
            {
                Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Texture_Property,
                    fieldIndex: (int)BaseLayer_FieldIndex.Texture,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<AlphaLayer.QuadrantEnum>.Instance.Write(
                    writer,
                    item.Quadrant_Property,
                    length: 2,
                    fieldIndex: (int)BaseLayer_FieldIndex.Quadrant,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LayerNumber_Property,
                    fieldIndex: (int)BaseLayer_FieldIndex.LayerNumber,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class BaseLayer_Mask<T> : IMask<T>, IEquatable<BaseLayer_Mask<T>>
    {
        #region Ctors
        public BaseLayer_Mask()
        {
        }

        public BaseLayer_Mask(T initialValue)
        {
            this.Texture = initialValue;
            this.Quadrant = initialValue;
            this.LayerNumber = initialValue;
        }
        #endregion

        #region Members
        public T Texture;
        public T Quadrant;
        public T LayerNumber;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is BaseLayer_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(BaseLayer_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Texture, rhs.Texture)) return false;
            if (!object.Equals(this.Quadrant, rhs.Quadrant)) return false;
            if (!object.Equals(this.LayerNumber, rhs.LayerNumber)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Texture?.GetHashCode());
            ret = ret.CombineHashCode(this.Quadrant?.GetHashCode());
            ret = ret.CombineHashCode(this.LayerNumber?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Texture)) return false;
            if (!eval(this.Quadrant)) return false;
            if (!eval(this.LayerNumber)) return false;
            return true;
        }
        #endregion

        #region Translate
        public BaseLayer_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new BaseLayer_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(BaseLayer_Mask<R> obj, Func<T, R> eval)
        {
            obj.Texture = eval(this.Texture);
            obj.Quadrant = eval(this.Quadrant);
            obj.LayerNumber = eval(this.LayerNumber);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(BaseLayer_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, BaseLayer_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(BaseLayer_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Texture ?? true)
                {
                    fg.AppendLine($"Texture => {Texture}");
                }
                if (printMask?.Quadrant ?? true)
                {
                    fg.AppendLine($"Quadrant => {Quadrant}");
                }
                if (printMask?.LayerNumber ?? true)
                {
                    fg.AppendLine($"LayerNumber => {LayerNumber}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class BaseLayer_ErrorMask : IErrorMask, IErrorMask<BaseLayer_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Texture;
        public Exception Quadrant;
        public Exception LayerNumber;
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return Texture;
                case BaseLayer_FieldIndex.Quadrant:
                    return Quadrant;
                case BaseLayer_FieldIndex.LayerNumber:
                    return LayerNumber;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    this.Texture = ex;
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    this.Quadrant = ex;
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    this.LayerNumber = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    this.Texture = (Exception)obj;
                    break;
                case BaseLayer_FieldIndex.Quadrant:
                    this.Quadrant = (Exception)obj;
                    break;
                case BaseLayer_FieldIndex.LayerNumber:
                    this.LayerNumber = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (Texture != null) return true;
            if (Quadrant != null) return true;
            if (LayerNumber != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("BaseLayer_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Texture => {Texture}");
            fg.AppendLine($"Quadrant => {Quadrant}");
            fg.AppendLine($"LayerNumber => {LayerNumber}");
        }
        #endregion

        #region Combine
        public BaseLayer_ErrorMask Combine(BaseLayer_ErrorMask rhs)
        {
            var ret = new BaseLayer_ErrorMask();
            ret.Texture = this.Texture.Combine(rhs.Texture);
            ret.Quadrant = this.Quadrant.Combine(rhs.Quadrant);
            ret.LayerNumber = this.LayerNumber.Combine(rhs.LayerNumber);
            return ret;
        }
        public static BaseLayer_ErrorMask Combine(BaseLayer_ErrorMask lhs, BaseLayer_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static BaseLayer_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            throw new NotImplementedException();
        }
        #endregion

    }
    public class BaseLayer_CopyMask
    {
        #region Members
        public bool Texture;
        public bool Quadrant;
        public bool LayerNumber;
        #endregion

    }
    #endregion




    #endregion

}
