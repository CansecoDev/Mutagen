/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Birthsign :
        OblivionMajorRecord,
        IBirthsignInternal,
        ILoquiObjectSetter<Birthsign>,
        INamed,
        ILinkSubContainer,
        IEquatable<Birthsign>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Birthsign_Registration.Instance;
        public new static Birthsign_Registration Registration => Birthsign_Registration.Instance;
        protected override object CommonInstance => BirthsignCommon.Instance;

        #region Ctor
        protected Birthsign()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Birthsign_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Birthsign_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IBirthsignGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IBirthsignGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Birthsign_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Birthsign_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Birthsign_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool IBirthsignGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IBirthsignGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Birthsign_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)Birthsign_FieldIndex.Description];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Birthsign_FieldIndex.Description, nameof(Description_IsSet));
        }
        bool IBirthsignGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String IBirthsignGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Description, value, _hasBeenSetTracker, markSet, (int)Birthsign_FieldIndex.Description, nameof(Description), nameof(Description_IsSet));
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDSetLink<Spell>> _Spells = new SourceSetList<IFormIDSetLink<Spell>>();
        public ISourceSetList<IFormIDSetLink<Spell>> Spells => _Spells;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDSetLink<Spell>> IBirthsign.Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDSetLinkGetter<ISpellInternalGetter>> IBirthsignGetter.Spells => _Spells;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBirthsignInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            BirthsignMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IBirthsignInternalGetter rhs)) return false;
            return ((BirthsignCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(Birthsign obj)
        {
            return ((BirthsignCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((BirthsignCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => BirthsignXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Birthsign CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Birthsign_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Birthsign CreateFromXml(
            XElement node,
            out Birthsign_ErrorMask errorMask,
            bool doMasks = true,
            Birthsign_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Birthsign_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Birthsign CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Birthsign() : null;
                    break;
                default:
                    break;
            }
            var ret = new Birthsign();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    BirthsignXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Birthsign CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Birthsign_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Birthsign CreateFromXml(
            string path,
            out Birthsign_ErrorMask errorMask,
            Birthsign_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Birthsign CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Birthsign_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Birthsign CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Birthsign_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Birthsign CreateFromXml(
            Stream stream,
            out Birthsign_ErrorMask errorMask,
            Birthsign_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Birthsign CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Birthsign_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Birthsign item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Birthsign_FieldIndex)index)
            {
                case Birthsign_FieldIndex.Name:
                case Birthsign_FieldIndex.Icon:
                case Birthsign_FieldIndex.Description:
                    return _hasBeenSetTracker[index];
                case Birthsign_FieldIndex.Spells:
                    return Spells.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Birthsign_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Spells)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Spells)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public Birthsign(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Birthsign(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(Birthsign obj, Birthsign rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Birthsign(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => BirthsignBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Birthsign CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Birthsign CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Birthsign_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Birthsign_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Birthsign CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Birthsign>(
                record: new Birthsign(),
                frame: frame,
                errorMask: errorMask,
                recType: Birthsign_Registration.BSGN_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Birthsign item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Birthsign item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Birthsign_FieldIndex.Name);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Birthsign_FieldIndex.Icon);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DescriptionParse))
                    {
                        item.Description = DescriptionParse;
                    }
                    else
                    {
                        item.Description = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Birthsign_FieldIndex.Description);
                }
                case 0x4F4C5053: // SPLO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDSetLink<Spell>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Birthsign_Registration.SPLO_HEADER,
                        masterReferences: masterReferences,
                        item: item.Spells,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Birthsign_FieldIndex.Spells);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Birthsign Copy(
            Birthsign_CopyMask copyMask = null,
            Birthsign def = null)
        {
            return Birthsign.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Birthsign Copy(
            Birthsign item,
            Birthsign_CopyMask copyMask = null,
            Birthsign def = null)
        {
            Birthsign ret;
            if (item.GetType().Equals(typeof(Birthsign)))
            {
                ret = new Birthsign();
            }
            else
            {
                ret = (Birthsign)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Birthsign Copy_ToLoqui(
            Birthsign item,
            Birthsign_CopyMask copyMask = null,
            Birthsign def = null)
        {
            Birthsign ret;
            if (item.GetType().Equals(typeof(Birthsign)))
            {
                ret = new Birthsign() as Birthsign;
            }
            else
            {
                ret = (Birthsign)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Birthsign rhs,
            Birthsign_CopyMask copyMask,
            Birthsign def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Birthsign rhs,
            out Birthsign_ErrorMask errorMask,
            Birthsign_CopyMask copyMask = null,
            Birthsign def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BirthsignCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Birthsign_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Birthsign rhs,
            ErrorMaskBuilder errorMask,
            Birthsign_CopyMask copyMask = null,
            Birthsign def = null)
        {
            BirthsignCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Birthsign_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Birthsign_FieldIndex.Description:
                    this.Description = (String)obj;
                    break;
                case Birthsign_FieldIndex.Spells:
                    this._Spells.SetTo((SourceSetList<IFormIDSetLink<Spell>>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            BirthsignCommon.Instance.Clear(this);
        }

        public new static Birthsign Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Birthsign();
            foreach (var pair in fields)
            {
                CopyInInternal_Birthsign(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Birthsign(Birthsign obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Birthsign_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Birthsign_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Birthsign_FieldIndex.Description:
                    obj.Description = (String)pair.Value;
                    break;
                case Birthsign_FieldIndex.Spells:
                    obj._Spells.SetTo((SourceSetList<IFormIDSetLink<Spell>>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IBirthsign :
        IBirthsignInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IBirthsignInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String value, bool hasBeenSet = true);
        void Description_Unset();

        new ISetList<IFormIDSetLink<Spell>> Spells { get; }
        void CopyFieldsFrom(
            Birthsign rhs,
            ErrorMaskBuilder errorMask = null,
            Birthsign_CopyMask copyMask = null,
            Birthsign def = null);
    }

    public partial interface IBirthsignInternal :
        IOblivionMajorRecordInternal,
        IBirthsign,
        IBirthsignInternalGetter
    {
    }

    public partial interface IBirthsignGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IBirthsignInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Spells
        IReadOnlySetList<IFormIDSetLinkGetter<ISpellInternalGetter>> Spells { get; }
        #endregion

    }

    public partial interface IBirthsignInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IBirthsignGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class BirthsignMixIn
    {
        public static void Clear(this IBirthsignInternal item)
        {
            ((BirthsignCommon)item.CommonInstance).Clear(item: item);
        }

        public static Birthsign_Mask<bool> GetEqualsMask(
            this IBirthsignInternalGetter item,
            IBirthsignInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BirthsignCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBirthsignInternalGetter item,
            string name = null,
            Birthsign_Mask<bool> printMask = null)
        {
            return ((BirthsignCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBirthsignInternalGetter item,
            FileGeneration fg,
            string name = null,
            Birthsign_Mask<bool> printMask = null)
        {
            ((BirthsignCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IBirthsignInternalGetter item,
            Birthsign_Mask<bool?> checkMask)
        {
            return ((BirthsignCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Birthsign_Mask<bool> GetHasBeenSetMask(this IBirthsignInternalGetter item)
        {
            var ret = new Birthsign_Mask<bool>();
            ((BirthsignCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IBirthsignInternalGetter item,
            IBirthsignInternalGetter rhs)
        {
            return ((BirthsignCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Birthsign_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Icon = 6,
        Description = 7,
        Spells = 8,
    }
    #endregion

    #region Registration
    public class Birthsign_Registration : ILoquiRegistration
    {
        public static readonly Birthsign_Registration Instance = new Birthsign_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 62,
            version: 0);

        public const string GUID = "5c709517-acb6-4254-9ad8-59b502466e63";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(Birthsign_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Birthsign_ErrorMask);

        public static readonly Type ClassType = typeof(Birthsign);

        public static readonly Type GetterType = typeof(IBirthsignGetter);

        public static readonly Type InternalGetterType = typeof(IBirthsignInternalGetter);

        public static readonly Type SetterType = typeof(IBirthsign);

        public static readonly Type InternalSetterType = typeof(IBirthsignInternal);

        public static readonly Type CommonType = typeof(BirthsignCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Birthsign";

        public const string Name = "Birthsign";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Birthsign_FieldIndex.Name;
                case "ICON":
                    return (ushort)Birthsign_FieldIndex.Icon;
                case "DESCRIPTION":
                    return (ushort)Birthsign_FieldIndex.Description;
                case "SPELLS":
                    return (ushort)Birthsign_FieldIndex.Spells;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Spells:
                    return true;
                case Birthsign_FieldIndex.Name:
                case Birthsign_FieldIndex.Icon:
                case Birthsign_FieldIndex.Description:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                case Birthsign_FieldIndex.Icon:
                case Birthsign_FieldIndex.Description:
                case Birthsign_FieldIndex.Spells:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                case Birthsign_FieldIndex.Icon:
                case Birthsign_FieldIndex.Description:
                case Birthsign_FieldIndex.Spells:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                    return "Name";
                case Birthsign_FieldIndex.Icon:
                    return "Icon";
                case Birthsign_FieldIndex.Description:
                    return "Description";
                case Birthsign_FieldIndex.Spells:
                    return "Spells";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                case Birthsign_FieldIndex.Icon:
                case Birthsign_FieldIndex.Description:
                case Birthsign_FieldIndex.Spells:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                case Birthsign_FieldIndex.Icon:
                case Birthsign_FieldIndex.Description:
                case Birthsign_FieldIndex.Spells:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                    return typeof(String);
                case Birthsign_FieldIndex.Icon:
                    return typeof(String);
                case Birthsign_FieldIndex.Description:
                    return typeof(String);
                case Birthsign_FieldIndex.Spells:
                    return typeof(SourceSetList<IFormIDSetLink<Spell>>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(BirthsignXmlWriteTranslation);
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = BSGN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(BirthsignBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BirthsignCommon : OblivionMajorRecordCommon
    {
        public static readonly BirthsignCommon Instance = new BirthsignCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Birthsign item,
            Birthsign rhs,
            Birthsign def,
            ErrorMaskBuilder errorMask,
            Birthsign_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Birthsign_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Birthsign_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)Birthsign_FieldIndex.Description);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Description,
                        rhsHasBeenSet: rhs.Description_IsSet,
                        defItem: def?.Description ?? default(String),
                        defHasBeenSet: def?.Description_IsSet ?? false,
                        outRhsItem: out var rhsDescriptionItem,
                        outDefItem: out var defDescriptionItem))
                    {
                        item.Description = rhsDescriptionItem;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Birthsign_FieldIndex.Spells);
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IBirthsignInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Icon_Unset();
            item.Description_Unset();
            item.Spells.Unset();
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IBirthsignInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IBirthsignInternal)item);
        }

        public Birthsign_Mask<bool> GetEqualsMask(
            IBirthsignInternalGetter item,
            IBirthsignInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Birthsign_Mask<bool>();
            ((BirthsignCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IBirthsignInternalGetter item,
            IBirthsignInternalGetter rhs,
            Birthsign_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IBirthsignInternalGetter item,
            string name = null,
            Birthsign_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IBirthsignInternalGetter item,
            FileGeneration fg,
            string name = null,
            Birthsign_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Birthsign =>");
            }
            else
            {
                fg.AppendLine($"{name} (Birthsign) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IBirthsignInternalGetter item,
            FileGeneration fg,
            Birthsign_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Spells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }

        public bool HasBeenSet(
            IBirthsignInternalGetter item,
            Birthsign_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IBirthsignInternalGetter item,
            Birthsign_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Icon = item.Icon_IsSet;
            mask.Description = item.Description_IsSet;
            mask.Spells = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Spells.HasBeenSet, null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Birthsign_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Birthsign_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Birthsign_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Birthsign_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Birthsign_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Birthsign_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Birthsign_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Birthsign_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Birthsign_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Birthsign_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Birthsign_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IBirthsignInternalGetter lhs,
            IBirthsignInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (lhs.Description_IsSet != rhs.Description_IsSet) return false;
            if (lhs.Description_IsSet)
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if (lhs.Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (lhs.Spells.HasBeenSet)
            {
                if (!lhs.Spells.SequenceEqual(rhs.Spells)) return false;
            }
            return true;
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IBirthsignInternalGetter)lhs,
                rhs: rhs as IBirthsignInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IBirthsignInternalGetter)lhs,
                rhs: rhs as IBirthsignInternalGetter);
        }

        public virtual int GetHashCode(IBirthsignInternalGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            if (item.Description_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Description).CombineHashCode(ret);
            }
            if (item.Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Spells).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IBirthsignInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IBirthsignInternalGetter)item);
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class BirthsignXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static BirthsignXmlWriteTranslation Instance = new BirthsignXmlWriteTranslation();

        public static void WriteToNodeXml(
            IBirthsignInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Birthsign_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Birthsign_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Birthsign_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Birthsign_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)Birthsign_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Birthsign_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Spells.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Birthsign_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<IFormIDSetLinkGetter<ISpellInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Birthsign_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Birthsign_FieldIndex.Spells),
                    transl: (XElement subNode, IFormIDSetLinkGetter<ISpellInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IBirthsignInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Birthsign");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Birthsign");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBirthsignInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBirthsignInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBirthsignInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class BirthsignXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static BirthsignXmlCreateTranslation Instance = new BirthsignXmlCreateTranslation();

        public static void FillPublicXml(
            IBirthsignInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BirthsignXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IBirthsignInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Birthsign_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Birthsign_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)Birthsign_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    try
                    {
                        errorMask?.PushIndex((int)Birthsign_FieldIndex.Spells);
                        if (ListXmlTranslation<IFormIDSetLink<Spell>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class BirthsignXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IBirthsignInternalGetter item,
            XElement node,
            out Birthsign_ErrorMask errorMask,
            bool doMasks = true,
            Birthsign_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((BirthsignXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Birthsign_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IBirthsignInternalGetter item,
            string path,
            out Birthsign_ErrorMask errorMask,
            Birthsign_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBirthsignInternalGetter item,
            Stream stream,
            out Birthsign_ErrorMask errorMask,
            Birthsign_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Birthsign_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Birthsign_Mask<T>>
    {
        #region Ctors
        public Birthsign_Mask()
        {
        }

        public Birthsign_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Icon = initialValue;
            this.Description = initialValue;
            this.Spells = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public T Icon;
        public T Description;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Spells;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Birthsign_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Birthsign_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Description)) return false;
            if (this.Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null)
                {
                    foreach (var item in this.Spells.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Birthsign_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Birthsign_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Birthsign_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Icon = eval(this.Icon);
            obj.Description = eval(this.Description);
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Spells.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Birthsign_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Birthsign_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Birthsign_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Birthsign_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Birthsign_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Icon;
        public Exception Description;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Spells;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                    return Name;
                case Birthsign_FieldIndex.Icon:
                    return Icon;
                case Birthsign_FieldIndex.Description:
                    return Description;
                case Birthsign_FieldIndex.Spells:
                    return Spells;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Birthsign_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Birthsign_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Birthsign_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Birthsign_FieldIndex enu = (Birthsign_FieldIndex)index;
            switch (enu)
            {
                case Birthsign_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Birthsign_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Birthsign_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Birthsign_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Icon != null) return true;
            if (Description != null) return true;
            if (Spells != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Birthsign_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine("Spells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Spells.Overall != null)
                {
                    fg.AppendLine(Spells.Overall.ToString());
                }
                if (Spells.Specific != null)
                {
                    foreach (var subItem in Spells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Birthsign_ErrorMask Combine(Birthsign_ErrorMask rhs)
        {
            var ret = new Birthsign_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Spells = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<(int Index, Exception Value)>(this.Spells.Specific.And(rhs.Spells.Specific)));
            return ret;
        }
        public static Birthsign_ErrorMask Combine(Birthsign_ErrorMask lhs, Birthsign_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Birthsign_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Birthsign_ErrorMask();
        }
        #endregion

    }
    public class Birthsign_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Birthsign_CopyMask()
        {
        }

        public Birthsign_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Icon = defaultOn;
            this.Description = defaultOn;
            this.Spells = deepCopyOption;
        }

        #region Members
        public bool Name;
        public bool Icon;
        public bool Description;
        public CopyOption Spells;
        #endregion

    }

    public class Birthsign_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Icon;
        public bool Description;
        public bool Spells;
        #endregion

        #region Ctors
        public Birthsign_TranslationMask()
            : base()
        {
        }

        public Birthsign_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Icon = defaultOn;
            this.Description = defaultOn;
            this.Spells = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Icon, null));
            ret.Add((Description, null));
            ret.Add((Spells, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class BirthsignBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static BirthsignBinaryWriteTranslation Instance = new BirthsignBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IBirthsignInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Birthsign_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Birthsign_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(Birthsign_Registration.DESC_HEADER),
                    nullable: false);
            }
            if (item.Spells.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDSetLinkGetter<ISpellInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Spells,
                    transl: (MutagenWriter subWriter, IFormIDSetLinkGetter<ISpellInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            header: recordTypeConverter.ConvertToCustom(Birthsign_Registration.SPLO_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IBirthsignInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Birthsign_Registration.BSGN_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBirthsignInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBirthsignInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBirthsignInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class BirthsignBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static BirthsignBinaryCreateTranslation Instance = new BirthsignBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class BirthsignBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBirthsignInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Birthsign_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((BirthsignBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Birthsign_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
