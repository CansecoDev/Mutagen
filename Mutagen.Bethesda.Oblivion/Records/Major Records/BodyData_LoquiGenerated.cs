/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Loqui.Internal;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class BodyData : 
        IBodyData,
        ILoquiObject<BodyData>,
        ILoquiObjectSetter,
        IEquatable<BodyData>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyData_Registration.Instance;
        public static BodyData_Registration Registration => BodyData_Registration.Instance;

        #region Ctor
        public BodyData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _Model = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> Model_Property => this._Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IBodyDataGetter.Model => this.Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IBodyData.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IBodyDataGetter.Model_Property => this.Model_Property;
        #endregion
        #region BodyParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<BodyPart> _BodyParts = new NotifyingList<BodyPart>();
        public INotifyingList<BodyPart> BodyParts => _BodyParts;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<BodyPart> BodyPartsEnumerable
        {
            get => _BodyParts;
            set => _BodyParts.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<BodyPart> IBodyData.BodyParts => _BodyParts;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<BodyPart> IBodyDataGetter.BodyParts => _BodyParts;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => BodyDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => BodyDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => BodyDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            BodyDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<BodyData>.GetEqualsMask(BodyData rhs) => BodyDataCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IBodyDataGetter>.GetEqualsMask(IBodyDataGetter rhs) => BodyDataCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return BodyDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            BodyData_Mask<bool> printMask = null)
        {
            return BodyDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            BodyDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public BodyData_Mask<bool> GetHasBeenSetMask()
        {
            return BodyDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is BodyData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(BodyData rhs)
        {
            if (rhs == null) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (BodyParts.HasBeenSet != rhs.BodyParts.HasBeenSet) return false;
            if (BodyParts.HasBeenSet)
            {
                if (!this.BodyParts.SequenceEqual(rhs.BodyParts)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (BodyParts.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BodyParts).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static BodyData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static BodyData Create_XML(
            XElement root,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (BodyData Object, BodyData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            BodyData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new BodyData_ErrorMask()) : default(Func<BodyData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static BodyData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static BodyData Create_XML(
            string path,
            out BodyData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static BodyData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static BodyData Create_XML(
            Stream stream,
            out BodyData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<BodyData, BodyData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out BodyData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<BodyData, BodyData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out BodyData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out BodyData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as BodyData_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            BodyDataCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static BodyData Create_XML_Internal(
            XElement root,
            Func<BodyData_ErrorMask> errorMask)
        {
            var ret = new BodyData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            BodyData item,
            XElement root,
            string name,
            Func<BodyData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Model":
                    item._Model.SetIfSucceededOrDefault(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)BodyData_FieldIndex.Model,
                        errorMask: errorMask));
                    break;
                case "BodyParts":
                    item._BodyParts.SetIfSucceededOrDefault(ListXmlTranslation<BodyPart, MaskItem<Exception, BodyPart_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)BodyData_FieldIndex.BodyParts,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, BodyPart_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<BodyPart, BodyPart_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static BodyData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static BodyData Create_Binary(
            MutagenFrame frame,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (BodyData Object, BodyData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            BodyData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new BodyData_ErrorMask()) : default(Func<BodyData_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static BodyData Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static BodyData Create_Binary(
            string path,
            out BodyData_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static BodyData Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static BodyData Create_Binary(
            Stream stream,
            out BodyData_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as BodyData_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out BodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            BodyDataCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static BodyData Create_Binary_Internal(
            MutagenFrame frame,
            Func<BodyData_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new BodyData();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    BodyData_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            BodyData item,
            MutagenFrame frame,
            Func<BodyData_ErrorMask> errorMask)
        {
        }

        protected static TryGet<BodyData_FieldIndex?> Fill_Binary_RecordTypes(
            BodyData item,
            MutagenFrame frame,
            BodyData_FieldIndex? lastParsed,
            Func<BodyData_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    if (lastParsed.HasValue && lastParsed.Value >= BodyData_FieldIndex.Model) return TryGet<BodyData_FieldIndex?>.Failure;
                    item._Model.SetIfSucceededOrDefault(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)BodyData_FieldIndex.Model,
                        errorMask: errorMask));
                    return TryGet<BodyData_FieldIndex?>.Succeed(BodyData_FieldIndex.Model);
                case "INDX":
                case "ICON":
                    if (lastParsed.HasValue && lastParsed.Value >= BodyData_FieldIndex.BodyParts) return TryGet<BodyData_FieldIndex?>.Failure;
                    item.BodyParts.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.ListBinaryTranslation<BodyPart, MaskItem<Exception, BodyPart_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: BodyPart_Registration.TriggeringRecordTypes,
                        fieldIndex: (int)BodyData_FieldIndex.BodyParts,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, BodyPart_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<BodyPart, BodyPart_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    return TryGet<BodyData_FieldIndex?>.Succeed(BodyData_FieldIndex.BodyParts);
                default:
                    return TryGet<BodyData_FieldIndex?>.Failure;
            }
        }

        #endregion

        public BodyData Copy(
            BodyData_CopyMask copyMask = null,
            IBodyDataGetter def = null)
        {
            return BodyData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static BodyData Copy(
            IBodyData item,
            BodyData_CopyMask copyMask = null,
            IBodyDataGetter def = null)
        {
            BodyData ret;
            if (item.GetType().Equals(typeof(BodyData)))
            {
                ret = new BodyData();
            }
            else
            {
                ret = (BodyData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static BodyData Copy_ToLoqui(
            IBodyDataGetter item,
            BodyData_CopyMask copyMask = null,
            IBodyDataGetter def = null)
        {
            BodyData ret;
            if (item.GetType().Equals(typeof(BodyData)))
            {
                ret = new BodyData() as BodyData;
            }
            else
            {
                ret = (BodyData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IBodyDataGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IBodyDataGetter rhs,
            BodyData_CopyMask copyMask,
            IBodyDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IBodyDataGetter rhs,
            out BodyData_ErrorMask errorMask,
            BodyData_CopyMask copyMask = null,
            IBodyDataGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            BodyData_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new BodyData_ErrorMask();
                }
                return retErrorMask;
            };
            BodyDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case BodyData_FieldIndex.BodyParts:
                    this._BodyParts.SetTo((IEnumerable<BodyPart>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            BodyDataCommon.Clear(this, cmds);
        }


        public static BodyData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new BodyData();
            foreach (var pair in fields)
            {
                CopyInInternal_BodyData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_BodyData(BodyData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out BodyData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case BodyData_FieldIndex.BodyParts:
                    obj._BodyParts.SetTo((IEnumerable<BodyPart>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, BodyData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IBodyData : IBodyDataGetter, ILoquiClass<IBodyData, IBodyDataGetter>, ILoquiClass<BodyData, IBodyDataGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new INotifyingList<BodyPart> BodyParts { get; }
    }

    public partial interface IBodyDataGetter : ILoquiObject
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region BodyParts
        INotifyingListGetter<BodyPart> BodyParts { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum BodyData_FieldIndex
    {
        Model = 0,
        BodyParts = 1,
    }
    #endregion

    #region Registration
    public class BodyData_Registration : ILoquiRegistration
    {
        public static readonly BodyData_Registration Instance = new BodyData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 36,
            version: 0);

        public const string GUID = "c54b8db9-9671-471b-8f85-8ee30c93b2ed";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(BodyData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(BodyData_ErrorMask);

        public static readonly Type ClassType = typeof(BodyData);

        public static readonly Type GetterType = typeof(IBodyDataGetter);

        public static readonly Type SetterType = typeof(IBodyData);

        public static readonly Type CommonType = typeof(BodyDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.BodyData";

        public const string Name = "BodyData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)BodyData_FieldIndex.Model;
                case "BODYPARTS":
                    return (ushort)BodyData_FieldIndex.BodyParts;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.BodyParts:
                    return true;
                case BodyData_FieldIndex.Model:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                case BodyData_FieldIndex.BodyParts:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                case BodyData_FieldIndex.BodyParts:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    return "Model";
                case BodyData_FieldIndex.BodyParts:
                    return "BodyParts";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                case BodyData_FieldIndex.BodyParts:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                case BodyData_FieldIndex.BodyParts:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    return typeof(Model);
                case BodyData_FieldIndex.BodyParts:
                    return typeof(NotifyingList<BodyPart>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        MODL_HEADER,
                        INDX_HEADER,
                        ICON_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class BodyDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IBodyData item,
            IBodyDataGetter rhs,
            IBodyDataGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            BodyData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Model_ErrorMask();
                                            baseMask.SetNthMask((int)BodyData_FieldIndex.Model, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)BodyData_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.BodyParts.Overall != CopyOption.Skip)
            {
                try
                {
                    item.BodyParts.SetToWithDefault(
                        rhs: rhs.BodyParts,
                        def: def?.BodyParts,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.BodyParts.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(BodyPart);
                                    return BodyPart.Copy(
                                        r,
                                        copyMask?.BodyParts?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.BodyParts.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)BodyData_FieldIndex.BodyParts, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IBodyData obj,
            NotifyingFireParameters cmds = null)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case BodyData_FieldIndex.BodyParts:
                    obj.BodyParts.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IBodyData obj,
            NotifyingUnsetParameters cmds = null)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case BodyData_FieldIndex.BodyParts:
                    obj.BodyParts.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IBodyData obj)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case BodyData_FieldIndex.BodyParts:
                    return obj.BodyParts.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IBodyDataGetter obj)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    return obj.Model;
                case BodyData_FieldIndex.BodyParts:
                    return obj.BodyParts;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IBodyData item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.BodyParts.Unset(cmds.ToUnsetParams());
        }

        public static BodyData_Mask<bool> GetEqualsMask(
            this IBodyDataGetter item,
            IBodyDataGetter rhs)
        {
            var ret = new BodyData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IBodyDataGetter item,
            IBodyDataGetter rhs,
            BodyData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.BodyParts.HasBeenSet == rhs.BodyParts.HasBeenSet)
            {
                if (item.BodyParts.HasBeenSet)
                {
                    ret.BodyParts = new MaskItem<bool, IEnumerable<MaskItem<bool, BodyPart_Mask<bool>>>>();
                    ret.BodyParts.Specific = item.BodyParts.SelectAgainst<BodyPart, MaskItem<bool, BodyPart_Mask<bool>>>(rhs.BodyParts, ((l, r) =>
                    {
                        MaskItem<bool, BodyPart_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.BodyParts.Overall);
                    ret.BodyParts.Overall = ret.BodyParts.Overall && ret.BodyParts.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.BodyParts = new MaskItem<bool, IEnumerable<MaskItem<bool, BodyPart_Mask<bool>>>>();
                    ret.BodyParts.Overall = true;
                }
            }
            else
            {
                ret.BodyParts = new MaskItem<bool, IEnumerable<MaskItem<bool, BodyPart_Mask<bool>>>>();
                ret.BodyParts.Overall = false;
            }
        }

        public static string ToString(
            this IBodyDataGetter item,
            string name = null,
            BodyData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IBodyDataGetter item,
            FileGeneration fg,
            string name = null,
            BodyData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(BodyData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(BodyData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.BodyParts?.Overall ?? true)
                {
                    fg.AppendLine("BodyParts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.BodyParts)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IBodyDataGetter item,
            BodyData_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.BodyParts.Overall.HasValue && checkMask.BodyParts.Overall.Value != item.BodyParts.HasBeenSet) return false;
            return true;
        }

        public static BodyData_Mask<bool> GetHasBeenSetMask(IBodyDataGetter item)
        {
            var ret = new BodyData_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.BodyParts = new MaskItem<bool, IEnumerable<MaskItem<bool, BodyPart_Mask<bool>>>>(item.BodyParts.HasBeenSet, item.BodyParts.Select((i) => new MaskItem<bool, BodyPart_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IBodyDataGetter item,
            bool doMasks,
            out BodyData_ErrorMask errorMask,
            string name = null)
        {
            BodyData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new BodyData_ErrorMask()) : default(Func<BodyData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            IBodyDataGetter item,
            Func<BodyData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.BodyData");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.BodyData");
                }
                if (item.Model_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.Model_Property,
                        name: nameof(item.Model),
                        fieldIndex: (int)BodyData_FieldIndex.Model,
                        errorMask: errorMask);
                }
                if (item.BodyParts.HasBeenSet)
                {
                    ListXmlTranslation<BodyPart, MaskItem<Exception, BodyPart_ErrorMask>>.Instance.Write(
                        node: elem,
                        name: nameof(item.BodyParts),
                        item: item.BodyParts,
                        fieldIndex: (int)BodyData_FieldIndex.BodyParts,
                        errorMask: errorMask,
                        transl: (XElement subNode, BodyPart subItem, bool listDoMasks, out MaskItem<Exception, BodyPart_ErrorMask> listSubMask) =>
                        {
                            LoquiXmlTranslation<BodyPart, BodyPart_ErrorMask>.Instance.Write(
                                node: subNode,
                                item: subItem,
                                name: "Item",
                                doMasks: errorMask != null,
                                errorMask: out listSubMask);
                        }
                        );
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            BodyData item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out BodyData_ErrorMask errorMask)
        {
            BodyData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new BodyData_ErrorMask()) : default(Func<BodyData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            BodyData item,
            RecordTypeConverter recordTypeConverter,
            Func<BodyData_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            BodyData item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<BodyData_ErrorMask> errorMask)
        {
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)BodyData_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<BodyPart, MaskItem<Exception, BodyPart_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.BodyParts,
                fieldIndex: (int)BodyData_FieldIndex.BodyParts,
                errorMask: errorMask,
                transl: (MutagenWriter subWriter, BodyPart subItem, bool listDoMasks, out MaskItem<Exception, BodyPart_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<BodyPart, BodyPart_ErrorMask>.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class BodyData_Mask<T> : IMask<T>, IEquatable<BodyData_Mask<T>>
    {
        #region Ctors
        public BodyData_Mask()
        {
        }

        public BodyData_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.BodyParts = new MaskItem<T, IEnumerable<MaskItem<T, BodyPart_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, BodyPart_Mask<T>>>> BodyParts;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is BodyData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(BodyData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.BodyParts, rhs.BodyParts)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.BodyParts?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (this.BodyParts != null)
            {
                if (!eval(this.BodyParts.Overall)) return false;
                if (this.BodyParts.Specific != null)
                {
                    foreach (var item in this.BodyParts.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public BodyData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new BodyData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(BodyData_Mask<R> obj, Func<T, R> eval)
        {
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            if (BodyParts != null)
            {
                obj.BodyParts = new MaskItem<R, IEnumerable<MaskItem<R, BodyPart_Mask<R>>>>();
                obj.BodyParts.Overall = eval(this.BodyParts.Overall);
                if (BodyParts.Specific != null)
                {
                    List<MaskItem<R, BodyPart_Mask<R>>> l = new List<MaskItem<R, BodyPart_Mask<R>>>();
                    obj.BodyParts.Specific = l;
                    foreach (var item in BodyParts.Specific)
                    {
                        MaskItem<R, BodyPart_Mask<R>> mask = default(MaskItem<R, BodyPart_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, BodyPart_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.BodyParts.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(BodyData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, BodyData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(BodyData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.BodyParts?.Overall ?? true)
                {
                    fg.AppendLine("BodyParts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (BodyParts.Overall != null)
                        {
                            fg.AppendLine(BodyParts.Overall.ToString());
                        }
                        if (BodyParts.Specific != null)
                        {
                            foreach (var subItem in BodyParts.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class BodyData_ErrorMask : IErrorMask, IErrorMask<BodyData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, Model_ErrorMask> Model;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, BodyPart_ErrorMask>>> BodyParts;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    return Model;
                case BodyData_FieldIndex.BodyParts:
                    return BodyParts;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case BodyData_FieldIndex.BodyParts:
                    this.BodyParts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, BodyPart_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case BodyData_FieldIndex.BodyParts:
                    this.BodyParts = (MaskItem<Exception, IEnumerable<MaskItem<Exception, BodyPart_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (BodyParts != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("BodyData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            Model?.ToString(fg);
            fg.AppendLine("BodyParts =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (BodyParts.Overall != null)
                {
                    fg.AppendLine(BodyParts.Overall.ToString());
                }
                if (BodyParts.Specific != null)
                {
                    foreach (var subItem in BodyParts.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public BodyData_ErrorMask Combine(BodyData_ErrorMask rhs)
        {
            var ret = new BodyData_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.BodyParts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, BodyPart_ErrorMask>>>(this.BodyParts.Overall.Combine(rhs.BodyParts.Overall), new List<MaskItem<Exception, BodyPart_ErrorMask>>(this.BodyParts.Specific.And(rhs.BodyParts.Specific)));
            return ret;
        }
        public static BodyData_ErrorMask Combine(BodyData_ErrorMask lhs, BodyData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class BodyData_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public MaskItem<CopyOption, BodyPart_CopyMask> BodyParts;
        #endregion

    }
    #endregion





    #endregion

}
