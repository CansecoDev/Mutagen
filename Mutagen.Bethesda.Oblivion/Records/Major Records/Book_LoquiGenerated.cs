/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Book : NamedMajorRecord, IBook, ILoquiObject<Book>, ILoquiObjectSetter, IEquatable<Book>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Book_Registration.Instance;
        public new static Book_Registration Registration => Book_Registration.Instance;

        #region Ctor
        public Book()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _Model = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> Model_Property => this._Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IBookGetter.Model => this.Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IBook.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IBookGetter.Model_Property => this.Model_Property;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _Icon = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> Icon_Property => _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath Icon
        {
            get => this._Icon.Item;
            set => this._Icon.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> IBook.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> IBookGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> IBookGetter.Script_Property => this.Script_Property;
        #endregion
        #region Enchantment
        public FormIDSetLink<Enchantment> Enchantment_Property { get; } = new FormIDSetLink<Enchantment>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Enchantment Enchantment { get => Enchantment_Property.Item; set => Enchantment_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Enchantment> IBookGetter.Enchantment_Property => this.Enchantment_Property;
        #endregion
        #region EnchantmentPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<UInt16> _EnchantmentPoints = NotifyingSetItem.Factory<UInt16>(markAsSet: false);
        public INotifyingSetItem<UInt16> EnchantmentPoints_Property => _EnchantmentPoints;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 EnchantmentPoints
        {
            get => this._EnchantmentPoints.Item;
            set => this._EnchantmentPoints.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<UInt16> IBook.EnchantmentPoints_Property => this.EnchantmentPoints_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<UInt16> IBookGetter.EnchantmentPoints_Property => this.EnchantmentPoints_Property;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<String> _Description = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Description_Property => _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description.Item;
            set => this._Description.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IBook.Description_Property => this.Description_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IBookGetter.Description_Property => this.Description_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Book.BookFlag> _Flags = NotifyingItem.Factory<Book.BookFlag>();
        public INotifyingItem<Book.BookFlag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Book.BookFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Book.BookFlag> IBook.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Book.BookFlag> IBookGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Teaches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Skill> _Teaches = NotifyingItem.Factory<Skill>();
        public INotifyingItem<Skill> Teaches_Property => _Teaches;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Skill Teaches
        {
            get => this._Teaches.Item;
            set => this._Teaches.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Skill> IBook.Teaches_Property => this.Teaches_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Skill> IBookGetter.Teaches_Property => this.Teaches_Property;
        #endregion
        #region Value
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _Value = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Value_Property => _Value;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Value
        {
            get => this._Value.Item;
            set => this._Value.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IBook.Value_Property => this.Value_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IBookGetter.Value_Property => this.Value_Property;
        #endregion
        #region Weight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _Weight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Weight_Property => _Weight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Weight
        {
            get => this._Weight.Item;
            set => this._Weight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IBook.Weight_Property => this.Weight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IBookGetter.Weight_Property => this.Weight_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => BookCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => BookCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => BookCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            BookCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Book>.GetEqualsMask(Book rhs) => BookCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IBookGetter>.GetEqualsMask(IBookGetter rhs) => BookCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return BookCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Book_Mask<bool> printMask = null)
        {
            return BookCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            BookCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Book_Mask<bool> GetHasBeenSetMask()
        {
            return BookCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Book rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Book rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(Model, rhs.Model)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(Icon, rhs.Icon)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (Script != rhs.Script) return false;
            }
            if (Enchantment_Property.HasBeenSet != rhs.Enchantment_Property.HasBeenSet) return false;
            if (Enchantment_Property.HasBeenSet)
            {
                if (Enchantment != rhs.Enchantment) return false;
            }
            if (EnchantmentPoints_Property.HasBeenSet != rhs.EnchantmentPoints_Property.HasBeenSet) return false;
            if (EnchantmentPoints_Property.HasBeenSet)
            {
                if (EnchantmentPoints != rhs.EnchantmentPoints) return false;
            }
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(Description, rhs.Description)) return false;
            }
            if (Flags != rhs.Flags) return false;
            if (Teaches != rhs.Teaches) return false;
            if (Value != rhs.Value) return false;
            if (Weight != rhs.Weight) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Enchantment_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Enchantment).CombineHashCode(ret);
            }
            if (EnchantmentPoints_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnchantmentPoints).CombineHashCode(ret);
            }
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Book Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Book Create_XML(
            XElement root,
            out Book_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Book Object, Book_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Book_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Book_ErrorMask()) : default(Func<Book_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Book Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Book Create_XML(
            string path,
            out Book_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Book Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Book Create_XML(
            Stream stream,
            out Book_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Book, Book_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Book_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Book, Book_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Book_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Book_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Book_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Book_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Book_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as Book_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out Book_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Book_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            BookCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Book Create_XML_Internal(
            XElement root,
            Func<Book_ErrorMask> errorMask)
        {
            var ret = new Book();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Book item,
            XElement root,
            string name,
            Func<Book_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Model":
                    item._Model.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Book_FieldIndex.Model,
                        errorMask: errorMask));
                    break;
                case "Icon":
                    item._Icon.SetIfSucceeded(FilePathXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Book_FieldIndex.Icon,
                        errorMask: errorMask));
                    break;
                case "Script":
                    item.Script_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Book_FieldIndex.Script,
                        errorMask: errorMask));
                    break;
                case "Enchantment":
                    item.Enchantment_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Book_FieldIndex.Enchantment,
                        errorMask: errorMask));
                    break;
                case "EnchantmentPoints":
                    item._EnchantmentPoints.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Book_FieldIndex.EnchantmentPoints,
                        errorMask: errorMask));
                    break;
                case "Description":
                    item._Description.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Book_FieldIndex.Description,
                        errorMask: errorMask));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<Book.BookFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Book_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Teaches":
                    item._Teaches.SetIfSucceeded(EnumXmlTranslation<Skill>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Book_FieldIndex.Teaches,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Value":
                    item._Value.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Book_FieldIndex.Value,
                        errorMask: errorMask));
                    break;
                case "Weight":
                    item._Weight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Book_FieldIndex.Weight,
                        errorMask: errorMask));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Book_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Enchantment_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Book Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Book Create_Binary(
            MutagenFrame frame,
            out Book_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Book Object, Book_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Book_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Book_ErrorMask()) : default(Func<Book_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Book Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Book Create_Binary(
            string path,
            out Book_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Book Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Book Create_Binary(
            Stream stream,
            out Book_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Book_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as Book_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out Book_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Book_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            BookCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Book Create_Binary_Internal(
            MutagenFrame frame,
            Func<Book_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Book, Book_ErrorMask, Book_FieldIndex>(
                record: new Book(),
                frame: frame,
                errorMask: errorMask,
                recType: Book_Registration.BOOK_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Book item,
            MutagenFrame frame,
            Func<Book_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Book_FieldIndex?> Fill_Binary_RecordTypes(
            Book item,
            MutagenFrame frame,
            Func<Book_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    item._Model.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Book_FieldIndex.Model,
                        errorMask: errorMask));
                    return TryGet<Book_FieldIndex?>.Succeed(Book_FieldIndex.Model);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Icon.SetIfSucceeded(Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Book_FieldIndex.Icon,
                        errorMask: errorMask));
                    return TryGet<Book_FieldIndex?>.Succeed(Book_FieldIndex.Icon);
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Script_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Book_FieldIndex.Script,
                        errorMask: errorMask));
                    return TryGet<Book_FieldIndex?>.Succeed(Book_FieldIndex.Script);
                case "ENAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Enchantment_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Book_FieldIndex.Enchantment,
                        errorMask: errorMask));
                    return TryGet<Book_FieldIndex?>.Succeed(Book_FieldIndex.Enchantment);
                case "ANAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._EnchantmentPoints.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Book_FieldIndex.EnchantmentPoints,
                        errorMask: errorMask));
                    return TryGet<Book_FieldIndex?>.Succeed(Book_FieldIndex.EnchantmentPoints);
                case "DESC":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var DescriptiontryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Book_FieldIndex.Description,
                        parseWhole: true,
                        errorMask: errorMask);
                    item._Description.SetIfSucceeded(DescriptiontryGet);
                    return TryGet<Book_FieldIndex?>.Succeed(Book_FieldIndex.Description);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Book.BookFlag>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(1),
                            fieldIndex: (int)Book_FieldIndex.Flags,
                            errorMask: errorMask));
                        item._Teaches.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(1),
                            fieldIndex: (int)Book_FieldIndex.Teaches,
                            errorMask: errorMask));
                        item._Value.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Book_FieldIndex.Value,
                            errorMask: errorMask));
                        item._Weight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Book_FieldIndex.Weight,
                            errorMask: errorMask));
                    }
                    return TryGet<Book_FieldIndex?>.Succeed(Book_FieldIndex.Weight);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => BookCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Book Copy(
            Book_CopyMask copyMask = null,
            IBookGetter def = null)
        {
            return Book.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Book Copy(
            IBook item,
            Book_CopyMask copyMask = null,
            IBookGetter def = null)
        {
            Book ret;
            if (item.GetType().Equals(typeof(Book)))
            {
                ret = new Book();
            }
            else
            {
                ret = (Book)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Book Copy_ToLoqui(
            IBookGetter item,
            Book_CopyMask copyMask = null,
            IBookGetter def = null)
        {
            Book ret;
            if (item.GetType().Equals(typeof(Book)))
            {
                ret = new Book() as Book;
            }
            else
            {
                ret = (Book)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IBookGetter rhs,
            Book_CopyMask copyMask,
            IBookGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IBookGetter rhs,
            out Book_ErrorMask errorMask,
            Book_CopyMask copyMask = null,
            IBookGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Book_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Book_ErrorMask();
                }
                return retErrorMask;
            };
            BookCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Book_FieldIndex.Icon:
                    this._Icon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Book_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case Book_FieldIndex.Enchantment:
                    this.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)obj,
                        cmds);
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    this._EnchantmentPoints.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case Book_FieldIndex.Description:
                    this._Description.Set(
                        (String)obj,
                        cmds);
                    break;
                case Book_FieldIndex.Flags:
                    this._Flags.Set(
                        (Book.BookFlag)obj,
                        cmds);
                    break;
                case Book_FieldIndex.Teaches:
                    this._Teaches.Set(
                        (Skill)obj,
                        cmds);
                    break;
                case Book_FieldIndex.Value:
                    this._Value.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Book_FieldIndex.Weight:
                    this._Weight.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            BookCommon.Clear(this, cmds);
        }


        public new static Book Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Book();
            foreach (var pair in fields)
            {
                CopyInInternal_Book(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Book(Book obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Book_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.Icon:
                    obj._Icon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    obj._EnchantmentPoints.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.Description:
                    obj._Description.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Book.BookFlag)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.Teaches:
                    obj._Teaches.Set(
                        (Skill)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.Value:
                    obj._Value.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Book_FieldIndex.Weight:
                    obj._Weight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Book obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IBook : IBookGetter, INamedMajorRecord, ILoquiClass<IBook, IBookGetter>, ILoquiClass<Book, IBookGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new FilePath Icon { get; set; }
        new INotifyingSetItem<FilePath> Icon_Property { get; }

        new Script Script { get; set; }
        new Enchantment Enchantment { get; set; }
        new UInt16 EnchantmentPoints { get; set; }
        new INotifyingSetItem<UInt16> EnchantmentPoints_Property { get; }

        new String Description { get; set; }
        new INotifyingSetItem<String> Description_Property { get; }

        new Book.BookFlag Flags { get; set; }
        new INotifyingItem<Book.BookFlag> Flags_Property { get; }

        new Skill Teaches { get; set; }
        new INotifyingItem<Skill> Teaches_Property { get; }

        new Single Value { get; set; }
        new INotifyingItem<Single> Value_Property { get; }

        new Single Weight { get; set; }
        new INotifyingItem<Single> Weight_Property { get; }

    }

    public partial interface IBookGetter : INamedMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Icon
        FilePath Icon { get; }
        INotifyingSetItemGetter<FilePath> Icon_Property { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Enchantment
        Enchantment Enchantment { get; }
        FormIDSetLink<Enchantment> Enchantment_Property { get; }

        #endregion
        #region EnchantmentPoints
        UInt16 EnchantmentPoints { get; }
        INotifyingSetItemGetter<UInt16> EnchantmentPoints_Property { get; }

        #endregion
        #region Description
        String Description { get; }
        INotifyingSetItemGetter<String> Description_Property { get; }

        #endregion
        #region Flags
        Book.BookFlag Flags { get; }
        INotifyingItemGetter<Book.BookFlag> Flags_Property { get; }

        #endregion
        #region Teaches
        Skill Teaches { get; }
        INotifyingItemGetter<Skill> Teaches_Property { get; }

        #endregion
        #region Value
        Single Value { get; }
        INotifyingItemGetter<Single> Value_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        INotifyingItemGetter<Single> Weight_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Book_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Enchantment = 9,
        EnchantmentPoints = 10,
        Description = 11,
        Flags = 12,
        Teaches = 13,
        Value = 14,
        Weight = 15,
    }
    #endregion

    #region Registration
    public class Book_Registration : ILoquiRegistration
    {
        public static readonly Book_Registration Instance = new Book_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 68,
            version: 0);

        public const string GUID = "e16c811f-5052-494d-8102-b7450f5b6833";

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(Book_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Book_ErrorMask);

        public static readonly Type ClassType = typeof(Book);

        public static readonly Type GetterType = typeof(IBookGetter);

        public static readonly Type SetterType = typeof(IBook);

        public static readonly Type CommonType = typeof(BookCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Book";

        public const string Name = "Book";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Book_FieldIndex.Model;
                case "ICON":
                    return (ushort)Book_FieldIndex.Icon;
                case "SCRIPT":
                    return (ushort)Book_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)Book_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)Book_FieldIndex.EnchantmentPoints;
                case "DESCRIPTION":
                    return (ushort)Book_FieldIndex.Description;
                case "FLAGS":
                    return (ushort)Book_FieldIndex.Flags;
                case "TEACHES":
                    return (ushort)Book_FieldIndex.Teaches;
                case "VALUE":
                    return (ushort)Book_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)Book_FieldIndex.Weight;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    return true;
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    return "Model";
                case Book_FieldIndex.Icon:
                    return "Icon";
                case Book_FieldIndex.Script:
                    return "Script";
                case Book_FieldIndex.Enchantment:
                    return "Enchantment";
                case Book_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case Book_FieldIndex.Description:
                    return "Description";
                case Book_FieldIndex.Flags:
                    return "Flags";
                case Book_FieldIndex.Teaches:
                    return "Teaches";
                case Book_FieldIndex.Value:
                    return "Value";
                case Book_FieldIndex.Weight:
                    return "Weight";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    return typeof(Model);
                case Book_FieldIndex.Icon:
                    return typeof(FilePath);
                case Book_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Book_FieldIndex.Enchantment:
                    return typeof(FormIDSetLink<Enchantment>);
                case Book_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case Book_FieldIndex.Description:
                    return typeof(String);
                case Book_FieldIndex.Flags:
                    return typeof(Book.BookFlag);
                case Book_FieldIndex.Teaches:
                    return typeof(Skill);
                case Book_FieldIndex.Value:
                    return typeof(Single);
                case Book_FieldIndex.Weight:
                    return typeof(Single);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = BOOK_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class BookCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IBook item,
            IBookGetter rhs,
            IBookGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Book_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Model_ErrorMask();
                                            baseMask.SetNthMask((int)Book_FieldIndex.Model, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.Script ?? true)
            {
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Script, ex);
                }
            }
            if (copyMask?.Enchantment ?? true)
            {
                try
                {
                    item.Enchantment_Property.SetToWithDefault(
                        rhs: rhs.Enchantment_Property,
                        def: def?.Enchantment_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Enchantment, ex);
                }
            }
            if (copyMask?.EnchantmentPoints ?? true)
            {
                try
                {
                    item.EnchantmentPoints_Property.SetToWithDefault(
                        rhs: rhs.EnchantmentPoints_Property,
                        def: def?.EnchantmentPoints_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.EnchantmentPoints, ex);
                }
            }
            if (copyMask?.Description ?? true)
            {
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs: rhs.Description_Property,
                        def: def?.Description_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Description, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.Teaches ?? true)
            {
                try
                {
                    item.Teaches_Property.Set(
                        value: rhs.Teaches,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Teaches, ex);
                }
            }
            if (copyMask?.Value ?? true)
            {
                try
                {
                    item.Value_Property.Set(
                        value: rhs.Value,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Value, ex);
                }
            }
            if (copyMask?.Weight ?? true)
            {
                try
                {
                    item.Weight_Property.Set(
                        value: rhs.Weight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Book_FieldIndex.Weight, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IBook obj,
            NotifyingFireParameters cmds = null)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Book_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Book_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Book_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case Book_FieldIndex.Enchantment:
                    obj.Enchantment_Property.HasBeenSet = on;
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints_Property.HasBeenSet = on;
                    break;
                case Book_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IBook obj,
            NotifyingUnsetParameters cmds = null)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Book_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Book_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case Book_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Unset(cmds);
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints_Property.Unset(cmds);
                    break;
                case Book_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case Book_FieldIndex.Flags:
                    obj.Flags = default(Book.BookFlag);
                    break;
                case Book_FieldIndex.Teaches:
                    obj.Teaches = default(Skill);
                    break;
                case Book_FieldIndex.Value:
                    obj.Value = default(Single);
                    break;
                case Book_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IBook obj)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                    return true;
                case Book_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Book_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Book_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case Book_FieldIndex.Enchantment:
                    return obj.Enchantment_Property.HasBeenSet;
                case Book_FieldIndex.EnchantmentPoints:
                    return obj.EnchantmentPoints_Property.HasBeenSet;
                case Book_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IBookGetter obj)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    return obj.Model;
                case Book_FieldIndex.Icon:
                    return obj.Icon;
                case Book_FieldIndex.Script:
                    return obj.Script;
                case Book_FieldIndex.Enchantment:
                    return obj.Enchantment;
                case Book_FieldIndex.EnchantmentPoints:
                    return obj.EnchantmentPoints;
                case Book_FieldIndex.Description:
                    return obj.Description;
                case Book_FieldIndex.Flags:
                    return obj.Flags;
                case Book_FieldIndex.Teaches:
                    return obj.Teaches;
                case Book_FieldIndex.Value:
                    return obj.Value;
                case Book_FieldIndex.Weight:
                    return obj.Weight;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IBook item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Enchantment_Property.Unset(cmds.ToUnsetParams());
            item.EnchantmentPoints_Property.Unset(cmds.ToUnsetParams());
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.Flags = default(Book.BookFlag);
            item.Teaches = default(Skill);
            item.Value = default(Single);
            item.Weight = default(Single);
        }

        public static Book_Mask<bool> GetEqualsMask(
            this IBookGetter item,
            IBookGetter rhs)
        {
            var ret = new Book_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IBookGetter item,
            IBookGetter rhs,
            Book_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Enchantment = item.Enchantment_Property.Equals(rhs.Enchantment_Property, (l, r) => l == r);
            ret.EnchantmentPoints = item.EnchantmentPoints_Property.Equals(rhs.EnchantmentPoints_Property, (l, r) => l == r);
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            ret.Flags = item.Flags == rhs.Flags;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight == rhs.Weight;
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IBookGetter item,
            string name = null,
            Book_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IBookGetter item,
            FileGeneration fg,
            string name = null,
            Book_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Book)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Book)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {item.Enchantment_Property}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {item.EnchantmentPoints}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {item.Teaches}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IBookGetter item,
            Book_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment_Property.HasBeenSet) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != item.EnchantmentPoints_Property.HasBeenSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            return true;
        }

        public static Book_Mask<bool> GetHasBeenSetMask(IBookGetter item)
        {
            var ret = new Book_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Enchantment = item.Enchantment_Property.HasBeenSet;
            ret.EnchantmentPoints = item.EnchantmentPoints_Property.HasBeenSet;
            ret.Description = item.Description_Property.HasBeenSet;
            ret.Flags = true;
            ret.Teaches = true;
            ret.Value = true;
            ret.Weight = true;
            return ret;
        }

        public static Book_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Book_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Book_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Book_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Book_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Book_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Book_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Book_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Book_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Book_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Book_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IBookGetter item,
            bool doMasks,
            out Book_ErrorMask errorMask,
            string name = null)
        {
            Book_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Book_ErrorMask()) : default(Func<Book_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            IBookGetter item,
            Func<Book_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Book");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Book");
                }
                if (item.Model_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.Model_Property,
                        name: nameof(item.Model),
                        fieldIndex: (int)Book_FieldIndex.Model,
                        errorMask: errorMask);
                }
                if (item.Icon_Property.HasBeenSet)
                {
                    FilePathXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Icon),
                        item: item.Icon_Property,
                        fieldIndex: (int)Book_FieldIndex.Icon,
                        errorMask: errorMask);
                }
                if (item.Script_Property.HasBeenSet)
                {
                    FormIDXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Script),
                        item: item.Script?.FormID,
                        fieldIndex: (int)Book_FieldIndex.Script,
                        errorMask: errorMask);
                }
                if (item.Enchantment_Property.HasBeenSet)
                {
                    FormIDXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Enchantment),
                        item: item.Enchantment?.FormID,
                        fieldIndex: (int)Book_FieldIndex.Enchantment,
                        errorMask: errorMask);
                }
                if (item.EnchantmentPoints_Property.HasBeenSet)
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.EnchantmentPoints),
                        item: item.EnchantmentPoints_Property,
                        fieldIndex: (int)Book_FieldIndex.EnchantmentPoints,
                        errorMask: errorMask);
                }
                if (item.Description_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Description),
                        item: item.Description_Property,
                        fieldIndex: (int)Book_FieldIndex.Description,
                        errorMask: errorMask);
                }
                EnumXmlTranslation<Book.BookFlag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)Book_FieldIndex.Flags,
                    errorMask: errorMask);
                EnumXmlTranslation<Skill>.Instance.Write(
                    node: elem,
                    name: nameof(item.Teaches),
                    item: item.Teaches_Property,
                    fieldIndex: (int)Book_FieldIndex.Teaches,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Value),
                    item: item.Value_Property,
                    fieldIndex: (int)Book_FieldIndex.Value,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Weight),
                    item: item.Weight_Property,
                    fieldIndex: (int)Book_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Book item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Book_ErrorMask errorMask)
        {
            Book_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Book_ErrorMask()) : default(Func<Book_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Book item,
            RecordTypeConverter recordTypeConverter,
            Func<Book_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Book_Registration.BOOK_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Book item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Book_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Book_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Book_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Book_Registration.ICON_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)Book_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Book_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Enchantment_Property,
                fieldIndex: (int)Book_FieldIndex.Enchantment,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Book_Registration.ENAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantmentPoints_Property,
                fieldIndex: (int)Book_FieldIndex.EnchantmentPoints,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Book_Registration.ANAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description_Property,
                fieldIndex: (int)Book_FieldIndex.Description,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Book_Registration.DESC_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, Book_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Book.BookFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: 1,
                    fieldIndex: (int)Book_FieldIndex.Flags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                    writer,
                    item.Teaches_Property,
                    length: 1,
                    fieldIndex: (int)Book_FieldIndex.Teaches,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Value_Property,
                    fieldIndex: (int)Book_FieldIndex.Value,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight_Property,
                    fieldIndex: (int)Book_FieldIndex.Weight,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Book_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Book_Mask<T>>
    {
        #region Ctors
        public Book_Mask()
        {
        }

        public Book_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Script = initialValue;
            this.Enchantment = initialValue;
            this.EnchantmentPoints = initialValue;
            this.Description = initialValue;
            this.Flags = initialValue;
            this.Teaches = initialValue;
            this.Value = initialValue;
            this.Weight = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public T Script;
        public T Enchantment;
        public T EnchantmentPoints;
        public T Description;
        public T Flags;
        public T Teaches;
        public T Value;
        public T Weight;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Book_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Book_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
            if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantmentPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Enchantment)) return false;
            if (!eval(this.EnchantmentPoints)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Teaches)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Weight)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Book_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Book_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Book_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            obj.Script = eval(this.Script);
            obj.Enchantment = eval(this.Enchantment);
            obj.EnchantmentPoints = eval(this.EnchantmentPoints);
            obj.Description = eval(this.Description);
            obj.Flags = eval(this.Flags);
            obj.Teaches = eval(this.Teaches);
            obj.Value = eval(this.Value);
            obj.Weight = eval(this.Weight);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Book_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Book_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Book_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {Enchantment}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {Teaches}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Book_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Book_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public Exception Script;
        public Exception Enchantment;
        public Exception EnchantmentPoints;
        public Exception Description;
        public Exception Flags;
        public Exception Teaches;
        public Exception Value;
        public Exception Weight;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    return Model;
                case Book_FieldIndex.Icon:
                    return Icon;
                case Book_FieldIndex.Script:
                    return Script;
                case Book_FieldIndex.Enchantment:
                    return Enchantment;
                case Book_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case Book_FieldIndex.Description:
                    return Description;
                case Book_FieldIndex.Flags:
                    return Flags;
                case Book_FieldIndex.Teaches:
                    return Teaches;
                case Book_FieldIndex.Value:
                    return Value;
                case Book_FieldIndex.Weight:
                    return Weight;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Book_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Book_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Book_FieldIndex.Enchantment:
                    this.Enchantment = ex;
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = ex;
                    break;
                case Book_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Book_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Book_FieldIndex.Teaches:
                    this.Teaches = ex;
                    break;
                case Book_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Book_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Book_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Book_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Book_FieldIndex.Enchantment:
                    this.Enchantment = (Exception)obj;
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (Exception)obj;
                    break;
                case Book_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Book_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Book_FieldIndex.Teaches:
                    this.Teaches = (Exception)obj;
                    break;
                case Book_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Book_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (Script != null) return true;
            if (Enchantment != null) return true;
            if (EnchantmentPoints != null) return true;
            if (Description != null) return true;
            if (Flags != null) return true;
            if (Teaches != null) return true;
            if (Value != null) return true;
            if (Weight != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Book_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Enchantment => {Enchantment}");
            fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Teaches => {Teaches}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Weight => {Weight}");
        }
        #endregion

        #region Combine
        public Book_ErrorMask Combine(Book_ErrorMask rhs)
        {
            var ret = new Book_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
            ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Teaches = this.Teaches.Combine(rhs.Teaches);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            return ret;
        }
        public static Book_ErrorMask Combine(Book_ErrorMask lhs, Book_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Book_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public bool Script;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool Description;
        public bool Flags;
        public bool Teaches;
        public bool Value;
        public bool Weight;
        #endregion

    }
    #endregion




    #endregion

}
