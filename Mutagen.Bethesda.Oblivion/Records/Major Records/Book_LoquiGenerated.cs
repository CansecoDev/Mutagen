/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Book :
        ItemAbstract,
        IBookInternal,
        ILoquiObjectSetter<Book>,
        INamed,
        ILinkSubContainer,
        IEquatable<Book>,
        IEqualsMask
    {
        #region Ctor
        protected Book()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Book_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Book_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IBookGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IBookGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Book_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Book_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Book_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool IBookGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, hasBeenSet, (int)Book_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelInternalGetter IBookGetter.Model => this.Model;
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Book_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Book_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool IBookGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IBookGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Book_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Script
        public IFormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Script> IBook.Script_Property => this.Script_Property;
        IScriptInternalGetter IBookGetter.Script => this.Script_Property.Item;
        IFormIDSetLinkGetter<IScriptInternalGetter> IBookGetter.Script_Property => this.Script_Property;
        #endregion
        #region Enchantment
        public IFormIDSetLink<Enchantment> Enchantment_Property { get; } = new FormIDSetLink<Enchantment>();
        public Enchantment Enchantment { get => Enchantment_Property.Item; set => Enchantment_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Enchantment> IBook.Enchantment_Property => this.Enchantment_Property;
        IEnchantmentInternalGetter IBookGetter.Enchantment => this.Enchantment_Property.Item;
        IFormIDSetLinkGetter<IEnchantmentInternalGetter> IBookGetter.Enchantment_Property => this.Enchantment_Property;
        #endregion
        #region EnchantmentPoints
        public bool EnchantmentPoints_IsSet
        {
            get => _hasBeenSetTracker[(int)Book_FieldIndex.EnchantmentPoints];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Book_FieldIndex.EnchantmentPoints, nameof(EnchantmentPoints_IsSet));
        }
        bool IBookGetter.EnchantmentPoints_IsSet => EnchantmentPoints_IsSet;
        private UInt16 _EnchantmentPoints;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 EnchantmentPoints
        {
            get => this._EnchantmentPoints;
            set => EnchantmentPoints_Set(value);
        }
        UInt16 IBookGetter.EnchantmentPoints => this.EnchantmentPoints;
        public void EnchantmentPoints_Set(
            UInt16 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _EnchantmentPoints, value, _hasBeenSetTracker, markSet, (int)Book_FieldIndex.EnchantmentPoints, nameof(EnchantmentPoints), nameof(EnchantmentPoints_IsSet));
        }
        public void EnchantmentPoints_Unset()
        {
            this.EnchantmentPoints_Set(default(UInt16), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)Book_FieldIndex.Description];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Book_FieldIndex.Description, nameof(Description_IsSet));
        }
        bool IBookGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String IBookGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Description, value, _hasBeenSetTracker, markSet, (int)Book_FieldIndex.Description, nameof(Description), nameof(Description_IsSet));
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Flags
        private Book.BookFlag _Flags;
        public Book.BookFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Teaches
        private Skill _Teaches;
        public Skill Teaches
        {
            get => this._Teaches;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Teaches, value, nameof(Teaches));
            }
        }
        #endregion
        #region Value
        private Single _Value;
        public Single Value
        {
            get => this._Value;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Value, value, nameof(Value));
            }
        }
        #endregion
        #region Weight
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Weight, value, nameof(Weight));
            }
        }
        #endregion
        #region DATADataTypeState
        private Book.DATADataType _DATADataTypeState;
        public Book.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        Book.DATADataType IBookInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        Book.DATADataType IBookInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBookInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            BookMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IBookInternalGetter rhs)) return false;
            return ((BookCommon)((IBookInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Book obj)
        {
            return ((BookCommon)((IBookInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((BookCommon)((IBookInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => BookXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((BookXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Book CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Book_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Book CreateFromXml(
            XElement node,
            out Book_ErrorMask errorMask,
            bool doMasks = true,
            Book_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Book_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Book CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Book() : null;
                    break;
                default:
                    break;
            }
            var ret = new Book();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    BookXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Book CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Book_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Book CreateFromXml(
            string path,
            out Book_ErrorMask errorMask,
            Book_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Book CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Book_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Book CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Book_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Book CreateFromXml(
            Stream stream,
            out Book_ErrorMask errorMask,
            Book_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Book CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Book_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Book item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Book.DATADataType.Has;
                    break;
                default:
                    ItemAbstract.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Book_FieldIndex)index)
            {
                case Book_FieldIndex.Name:
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                    return _hasBeenSetTracker[index];
                case Book_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Book_FieldIndex.Enchantment:
                    return Enchantment_Property.HasBeenSet;
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                case Book_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Book_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Enchantment_Property;
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            Script_Property.Link(
                modList,
                sourceMod);
            Enchantment_Property.Link(
                modList,
                sourceMod);
        }

        public Book(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Book(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => BookBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((BookBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Book CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Book CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Book_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Book_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Book CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Book>(
                record: new Book(),
                frame: frame,
                errorMask: errorMask,
                recType: Book_Registration.BOOK_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Book item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ItemAbstract.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Book item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Icon);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Enchantment_Property);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EnchantmentPoints = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.EnchantmentPoints);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DescriptionParse))
                    {
                        item.Description = DescriptionParse;
                    }
                    else
                    {
                        item.Description = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Description);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    if (EnumBinaryTranslation<Book.BookFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(1),
                        item: out Book.BookFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Book.BookFlag);
                    }
                    if (EnumBinaryTranslation<Skill>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(1),
                        item: out Skill TeachesParse))
                    {
                        item.Teaches = TeachesParse;
                    }
                    else
                    {
                        item.Teaches = default(Skill);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single ValueParse))
                    {
                        item.Value = ValueParse;
                    }
                    else
                    {
                        item.Value = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WeightParse))
                    {
                        item.Weight = WeightParse;
                    }
                    else
                    {
                        item.Weight = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Weight);
                }
                default:
                    return ItemAbstract.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Book Copy(
            Book_CopyMask copyMask = null,
            Book def = null)
        {
            return Book.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Book Copy(
            Book item,
            Book_CopyMask copyMask = null,
            Book def = null)
        {
            Book ret;
            if (item.GetType().Equals(typeof(Book)))
            {
                ret = new Book();
            }
            else
            {
                ret = (Book)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Book Copy_ToLoqui(
            Book item,
            Book_CopyMask copyMask = null,
            Book def = null)
        {
            Book ret;
            if (item.GetType().Equals(typeof(Book)))
            {
                ret = new Book() as Book;
            }
            else
            {
                ret = (Book)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Book rhs,
            Book_CopyMask copyMask,
            Book def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Book rhs,
            out Book_ErrorMask errorMask,
            Book_CopyMask copyMask = null,
            Book def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BookSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Book_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Book rhs,
            ErrorMaskBuilder errorMask,
            Book_CopyMask copyMask = null,
            Book def = null)
        {
            BookSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Book_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Book_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Book_FieldIndex.Script:
                    this.Script_Property.Set((IFormIDSetLink<Script>)obj);
                    break;
                case Book_FieldIndex.Enchantment:
                    this.Enchantment_Property.Set((IFormIDSetLink<Enchantment>)obj);
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (UInt16)obj;
                    break;
                case Book_FieldIndex.Description:
                    this.Description = (String)obj;
                    break;
                case Book_FieldIndex.Flags:
                    this.Flags = (Book.BookFlag)obj;
                    break;
                case Book_FieldIndex.Teaches:
                    this.Teaches = (Skill)obj;
                    break;
                case Book_FieldIndex.Value:
                    this.Value = (Single)obj;
                    break;
                case Book_FieldIndex.Weight:
                    this.Weight = (Single)obj;
                    break;
                case Book_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Book.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            BookSetterCommon.Instance.Clear(this);
        }

        public new static Book Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Book();
            foreach (var pair in fields)
            {
                CopyInInternal_Book(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Book(Book obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Book_FieldIndex enu))
            {
                CopyInInternal_ItemAbstract(obj, pair);
            }
            switch (enu)
            {
                case Book_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Book_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Book_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Book_FieldIndex.Script:
                    obj.Script_Property.Set((IFormIDSetLink<Script>)pair.Value);
                    break;
                case Book_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Set((IFormIDSetLink<Enchantment>)pair.Value);
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints = (UInt16)pair.Value;
                    break;
                case Book_FieldIndex.Description:
                    obj.Description = (String)pair.Value;
                    break;
                case Book_FieldIndex.Flags:
                    obj.Flags = (Book.BookFlag)pair.Value;
                    break;
                case Book_FieldIndex.Teaches:
                    obj.Teaches = (Skill)pair.Value;
                    break;
                case Book_FieldIndex.Value:
                    obj.Value = (Single)pair.Value;
                    break;
                case Book_FieldIndex.Weight:
                    obj.Weight = (Single)pair.Value;
                    break;
                case Book_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (Book.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IBook :
        IBookInternalGetter,
        IItemAbstract,
        ILoquiObjectSetter<IBookInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Enchantment Enchantment { get; set; }
        new IFormIDSetLink<Enchantment> Enchantment_Property { get; }
        new UInt16 EnchantmentPoints { get; set; }
        new bool EnchantmentPoints_IsSet { get; set; }
        void EnchantmentPoints_Set(UInt16 value, bool hasBeenSet = true);
        void EnchantmentPoints_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String value, bool hasBeenSet = true);
        void Description_Unset();

        new Book.BookFlag Flags { get; set; }

        new Skill Teaches { get; set; }

        new Single Value { get; set; }

        new Single Weight { get; set; }

        void CopyFieldsFrom(
            Book rhs,
            ErrorMaskBuilder errorMask = null,
            Book_CopyMask copyMask = null,
            Book def = null);
    }

    public partial interface IBookInternal :
        IItemAbstractInternal,
        IBook,
        IBookInternalGetter
    {
        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Enchantment Enchantment { get; set; }
        new IFormIDSetLink<Enchantment> Enchantment_Property { get; }
        new Book.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IBookGetter :
        IItemAbstractGetter,
        ILoquiObject<IBookInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        IModelInternalGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Script
        IScriptInternalGetter Script { get; }
        IFormIDSetLinkGetter<IScriptInternalGetter> Script_Property { get; }

        #endregion
        #region Enchantment
        IEnchantmentInternalGetter Enchantment { get; }
        IFormIDSetLinkGetter<IEnchantmentInternalGetter> Enchantment_Property { get; }

        #endregion
        #region EnchantmentPoints
        UInt16 EnchantmentPoints { get; }
        bool EnchantmentPoints_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Flags
        Book.BookFlag Flags { get; }

        #endregion
        #region Teaches
        Skill Teaches { get; }

        #endregion
        #region Value
        Single Value { get; }

        #endregion
        #region Weight
        Single Weight { get; }

        #endregion

    }

    public partial interface IBookInternalGetter :
        IItemAbstractInternalGetter,
        IBookGetter
    {
        #region DATADataTypeState
        Book.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class BookMixIn
    {
        public static void Clear(this IBookInternal item)
        {
            ((BookSetterCommon)((IBookInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Book_Mask<bool> GetEqualsMask(
            this IBookInternalGetter item,
            IBookInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BookCommon)((IBookInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBookInternalGetter item,
            string name = null,
            Book_Mask<bool> printMask = null)
        {
            return ((BookCommon)((IBookInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBookInternalGetter item,
            FileGeneration fg,
            string name = null,
            Book_Mask<bool> printMask = null)
        {
            ((BookCommon)((IBookInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IBookInternalGetter item,
            Book_Mask<bool?> checkMask)
        {
            return ((BookCommon)((IBookInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Book_Mask<bool> GetHasBeenSetMask(this IBookInternalGetter item)
        {
            var ret = new Book_Mask<bool>();
            ((BookCommon)((IBookInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IBookInternalGetter item,
            IBookInternalGetter rhs)
        {
            return ((BookCommon)((IBookInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Book_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Enchantment = 9,
        EnchantmentPoints = 10,
        Description = 11,
        Flags = 12,
        Teaches = 13,
        Value = 14,
        Weight = 15,
        DATADataTypeState = 16,
    }
    #endregion

    #region Registration
    public class Book_Registration : ILoquiRegistration
    {
        public static readonly Book_Registration Instance = new Book_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 68,
            version: 0);

        public const string GUID = "e16c811f-5052-494d-8102-b7450f5b6833";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(Book_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Book_ErrorMask);

        public static readonly Type ClassType = typeof(Book);

        public static readonly Type GetterType = typeof(IBookGetter);

        public static readonly Type InternalGetterType = typeof(IBookInternalGetter);

        public static readonly Type SetterType = typeof(IBook);

        public static readonly Type InternalSetterType = typeof(IBookInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Book";

        public const string Name = "Book";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Book_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Book_FieldIndex.Model;
                case "ICON":
                    return (ushort)Book_FieldIndex.Icon;
                case "SCRIPT":
                    return (ushort)Book_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)Book_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)Book_FieldIndex.EnchantmentPoints;
                case "DESCRIPTION":
                    return (ushort)Book_FieldIndex.Description;
                case "FLAGS":
                    return (ushort)Book_FieldIndex.Flags;
                case "TEACHES":
                    return (ushort)Book_FieldIndex.Teaches;
                case "VALUE":
                    return (ushort)Book_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)Book_FieldIndex.Weight;
                case "DATADATATYPESTATE":
                    return (ushort)Book_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                case Book_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Model:
                    return true;
                case Book_FieldIndex.Name:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                case Book_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                case Book_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                    return "Name";
                case Book_FieldIndex.Model:
                    return "Model";
                case Book_FieldIndex.Icon:
                    return "Icon";
                case Book_FieldIndex.Script:
                    return "Script";
                case Book_FieldIndex.Enchantment:
                    return "Enchantment";
                case Book_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case Book_FieldIndex.Description:
                    return "Description";
                case Book_FieldIndex.Flags:
                    return "Flags";
                case Book_FieldIndex.Teaches:
                    return "Teaches";
                case Book_FieldIndex.Value:
                    return "Value";
                case Book_FieldIndex.Weight:
                    return "Weight";
                case Book_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                case Book_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                case Book_FieldIndex.Model:
                case Book_FieldIndex.Icon:
                case Book_FieldIndex.Script:
                case Book_FieldIndex.Enchantment:
                case Book_FieldIndex.EnchantmentPoints:
                case Book_FieldIndex.Description:
                case Book_FieldIndex.Flags:
                case Book_FieldIndex.Teaches:
                case Book_FieldIndex.Value:
                case Book_FieldIndex.Weight:
                case Book_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                    return typeof(String);
                case Book_FieldIndex.Model:
                    return typeof(Model);
                case Book_FieldIndex.Icon:
                    return typeof(String);
                case Book_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Book_FieldIndex.Enchantment:
                    return typeof(IFormIDSetLink<Enchantment>);
                case Book_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case Book_FieldIndex.Description:
                    return typeof(String);
                case Book_FieldIndex.Flags:
                    return typeof(Book.BookFlag);
                case Book_FieldIndex.Teaches:
                    return typeof(Skill);
                case Book_FieldIndex.Value:
                    return typeof(Single);
                case Book_FieldIndex.Weight:
                    return typeof(Single);
                case Book_FieldIndex.DATADataTypeState:
                    return typeof(Book.DATADataType);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(BookXmlWriteTranslation);
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = BOOK_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryWriteTranslation = typeof(BookBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BookSetterCommon : ItemAbstractSetterCommon
    {
        public new static readonly BookSetterCommon Instance = new BookSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IBookInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Model_Unset();
            item.Icon_Unset();
            item.Script_Property.Unset();
            item.Enchantment_Property.Unset();
            item.EnchantmentPoints_Unset();
            item.Description_Unset();
            item.Flags = default(Book.BookFlag);
            item.Teaches = default(Skill);
            item.Value = default(Single);
            item.Weight = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (IBookInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IBookInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IBookInternal)item);
        }
        
        
    }
    public partial class BookCommon : ItemAbstractCommon
    {
        public new static readonly BookCommon Instance = new BookCommon();

        public Book_Mask<bool> GetEqualsMask(
            IBookInternalGetter item,
            IBookInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Book_Mask<bool>();
            ((BookCommon)((IBookInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBookInternalGetter item,
            IBookInternalGetter rhs,
            Book_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.Enchantment = item.Enchantment_Property.FormKey == rhs.Enchantment_Property.FormKey;
            ret.EnchantmentPoints = item.EnchantmentPoints_IsSet == rhs.EnchantmentPoints_IsSet && item.EnchantmentPoints == rhs.EnchantmentPoints;
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.Value = item.Value.EqualsWithin(rhs.Value);
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IBookInternalGetter item,
            string name = null,
            Book_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBookInternalGetter item,
            FileGeneration fg,
            string name = null,
            Book_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Book =>");
            }
            else
            {
                fg.AppendLine($"{name} (Book) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBookInternalGetter item,
            FileGeneration fg,
            Book_Mask<bool> printMask = null)
        {
            ItemAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script_Property}");
            }
            if (printMask?.Enchantment ?? true)
            {
                fg.AppendLine($"Enchantment => {item.Enchantment_Property}");
            }
            if (printMask?.EnchantmentPoints ?? true)
            {
                fg.AppendLine($"EnchantmentPoints => {item.EnchantmentPoints}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Teaches ?? true)
            {
                fg.AppendLine($"Teaches => {item.Teaches}");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendLine($"Value => {item.Value}");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendLine($"Weight => {item.Weight}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
            }
        }
        
        public bool HasBeenSet(
            IBookInternalGetter item,
            Book_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment_Property.HasBeenSet) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != item.EnchantmentPoints_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IBookInternalGetter item,
            Book_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Icon = item.Icon_IsSet;
            mask.Script = item.Script_Property.HasBeenSet;
            mask.Enchantment = item.Enchantment_Property.HasBeenSet;
            mask.EnchantmentPoints = item.EnchantmentPoints_IsSet;
            mask.Description = item.Description_IsSet;
            mask.Flags = true;
            mask.Teaches = true;
            mask.Value = true;
            mask.Weight = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Book_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Book_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (Book_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (Book_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (Book_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Book_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Book_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Book_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Book_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Book_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Book_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Book_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Book_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Book_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBookInternalGetter lhs,
            IBookInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (lhs.Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (lhs.Script_Property.HasBeenSet)
            {
                if (!lhs.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (lhs.Enchantment_Property.HasBeenSet != rhs.Enchantment_Property.HasBeenSet) return false;
            if (lhs.Enchantment_Property.HasBeenSet)
            {
                if (!lhs.Enchantment_Property.Equals(rhs.Enchantment_Property)) return false;
            }
            if (lhs.EnchantmentPoints_IsSet != rhs.EnchantmentPoints_IsSet) return false;
            if (lhs.EnchantmentPoints_IsSet)
            {
                if (lhs.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            }
            if (lhs.Description_IsSet != rhs.Description_IsSet) return false;
            if (lhs.Description_IsSet)
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (!lhs.Value.EqualsWithin(rhs.Value)) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IItemAbstractInternalGetter lhs,
            IItemAbstractInternalGetter rhs)
        {
            return Equals(
                lhs: (IBookInternalGetter)lhs,
                rhs: rhs as IBookInternalGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IBookInternalGetter)lhs,
                rhs: rhs as IBookInternalGetter);
        }
        
        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IBookInternalGetter)lhs,
                rhs: rhs as IBookInternalGetter);
        }
        
        public virtual int GetHashCode(IBookInternalGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            if (item.Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            if (item.Enchantment_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Enchantment).CombineHashCode(ret);
            }
            if (item.EnchantmentPoints_IsSet)
            {
                ret = HashHelper.GetHashCode(item.EnchantmentPoints).CombineHashCode(ret);
            }
            if (item.Description_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Description).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Weight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IItemAbstractInternalGetter item)
        {
            return GetHashCode(item: (IBookInternalGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IBookInternalGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IBookInternalGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(Book obj, Book rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Book(getNextFormKey());
            ret.CopyFieldsFrom((Book)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Book)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class BookSetterCopyCommon : ItemAbstractSetterCopyCommon
    {
        public new static readonly BookSetterCopyCommon Instance = new BookSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Book item,
            Book rhs,
            Book def,
            ErrorMaskBuilder errorMask,
            Book_CopyMask copyMask)
        {
            ItemAbstractSetterCopyCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetLink(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Enchantment ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Enchantment);
                try
                {
                    item.Enchantment_Property.SetLink(
                        rhs: rhs.Enchantment_Property,
                        def: def?.Enchantment_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EnchantmentPoints ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.EnchantmentPoints);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.EnchantmentPoints,
                        rhsHasBeenSet: rhs.EnchantmentPoints_IsSet,
                        defItem: def?.EnchantmentPoints ?? default(UInt16),
                        defHasBeenSet: def?.EnchantmentPoints_IsSet ?? false,
                        outRhsItem: out var rhsEnchantmentPointsItem,
                        outDefItem: out var defEnchantmentPointsItem))
                    {
                        item.EnchantmentPoints = rhsEnchantmentPointsItem;
                    }
                    else
                    {
                        item.EnchantmentPoints_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Description);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Description,
                        rhsHasBeenSet: rhs.Description_IsSet,
                        defItem: def?.Description ?? default(String),
                        defHasBeenSet: def?.Description_IsSet ?? false,
                        outRhsItem: out var rhsDescriptionItem,
                        outDefItem: out var defDescriptionItem))
                    {
                        item.Description = rhsDescriptionItem;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Teaches ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Teaches);
                try
                {
                    item.Teaches = rhs.Teaches;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Value ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Value);
                try
                {
                    item.Value = rhs.Value;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weight ?? true)
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Weight);
                try
                {
                    item.Weight = rhs.Weight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Book
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Book_Registration.Instance;
        public new static Book_Registration Registration => Book_Registration.Instance;
        protected override object CommonInstance()
        {
            return BookCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return BookSetterCommon.Instance;
        }
        protected override object CommonSetterCopyInstance()
        {
            return BookSetterCopyCommon.Instance;
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BookXmlWriteTranslation :
        ItemAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static BookXmlWriteTranslation Instance = new BookXmlWriteTranslation();

        public static void WriteToNodeXml(
            IBookInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            ItemAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Book_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Book_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Book_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Book_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Book_FieldIndex.Model));
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Book_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Book_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Book_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)Book_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Enchantment_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Book_FieldIndex.Enchantment) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Enchantment),
                    item: item.Enchantment_Property?.FormKey,
                    fieldIndex: (int)Book_FieldIndex.Enchantment,
                    errorMask: errorMask);
            }
            if (item.EnchantmentPoints_IsSet
                && (translationMask?.GetShouldTranslate((int)Book_FieldIndex.EnchantmentPoints) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantmentPoints),
                    item: item.EnchantmentPoints,
                    fieldIndex: (int)Book_FieldIndex.EnchantmentPoints,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)Book_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Book_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Book.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Book_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Book.BookFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Book_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Book_FieldIndex.Teaches) ?? true))
                {
                    EnumXmlTranslation<Skill>.Instance.Write(
                        node: node,
                        name: nameof(item.Teaches),
                        item: item.Teaches,
                        fieldIndex: (int)Book_FieldIndex.Teaches,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Book_FieldIndex.Value) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Value),
                        item: item.Value,
                        fieldIndex: (int)Book_FieldIndex.Value,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Book_FieldIndex.Weight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight,
                        fieldIndex: (int)Book_FieldIndex.Weight,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Book_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Book.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Book_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IBookInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Book");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Book");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBookInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBookInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBookInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IBookInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class BookXmlCreateTranslation : ItemAbstractXmlCreateTranslation
    {
        public new readonly static BookXmlCreateTranslation Instance = new BookXmlCreateTranslation();

        public static void FillPublicXml(
            IBookInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BookXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IBookInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Book_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)Book_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Enchantment":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Enchantment_Property,
                        fieldIndex: (int)Book_FieldIndex.Enchantment,
                        errorMask: errorMask);
                    break;
                case "EnchantmentPoints":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.EnchantmentPoints);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 EnchantmentPointsParse,
                            errorMask: errorMask))
                        {
                            item.EnchantmentPoints = EnchantmentPointsParse;
                        }
                        else
                        {
                            item.EnchantmentPoints = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Flags);
                        if (EnumXmlTranslation<Book.BookFlag>.Instance.Parse(
                            node: node,
                            item: out Book.BookFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Book.BookFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Book.DATADataType.Has;
                    break;
                case "Teaches":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Teaches);
                        if (EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            item: out Skill TeachesParse,
                            errorMask: errorMask))
                        {
                            item.Teaches = TeachesParse;
                        }
                        else
                        {
                            item.Teaches = default(Skill);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Value);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ValueParse,
                            errorMask: errorMask))
                        {
                            item.Value = ValueParse;
                        }
                        else
                        {
                            item.Value = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.Weight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WeightParse,
                            errorMask: errorMask))
                        {
                            item.Weight = WeightParse;
                        }
                        else
                        {
                            item.Weight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Book_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<Book.DATADataType>.Instance.Parse(
                            node: node,
                            item: out Book.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(Book.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class BookXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IBookInternalGetter item,
            XElement node,
            out Book_ErrorMask errorMask,
            bool doMasks = true,
            Book_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((BookXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Book_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IBookInternalGetter item,
            string path,
            out Book_ErrorMask errorMask,
            Book_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBookInternalGetter item,
            Stream stream,
            out Book_ErrorMask errorMask,
            Book_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Book_Mask<T> : ItemAbstract_Mask<T>, IMask<T>, IEquatable<Book_Mask<T>>
    {
        #region Ctors
        public Book_Mask()
        {
        }

        public Book_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Script = initialValue;
            this.Enchantment = initialValue;
            this.EnchantmentPoints = initialValue;
            this.Description = initialValue;
            this.Flags = initialValue;
            this.Teaches = initialValue;
            this.Value = initialValue;
            this.Weight = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public T Script;
        public T Enchantment;
        public T EnchantmentPoints;
        public T Description;
        public T Flags;
        public T Teaches;
        public T Value;
        public T Weight;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Book_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Book_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
            if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantmentPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Enchantment)) return false;
            if (!eval(this.EnchantmentPoints)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Teaches)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Book_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Book_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Book_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            obj.Script = eval(this.Script);
            obj.Enchantment = eval(this.Enchantment);
            obj.EnchantmentPoints = eval(this.EnchantmentPoints);
            obj.Description = eval(this.Description);
            obj.Flags = eval(this.Flags);
            obj.Teaches = eval(this.Teaches);
            obj.Value = eval(this.Value);
            obj.Weight = eval(this.Weight);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Book_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Book_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Book_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {Enchantment}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {Teaches}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Book_ErrorMask : ItemAbstract_ErrorMask, IErrorMask<Book_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public Exception Script;
        public Exception Enchantment;
        public Exception EnchantmentPoints;
        public Exception Description;
        public Exception Flags;
        public Exception Teaches;
        public Exception Value;
        public Exception Weight;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                    return Name;
                case Book_FieldIndex.Model:
                    return Model;
                case Book_FieldIndex.Icon:
                    return Icon;
                case Book_FieldIndex.Script:
                    return Script;
                case Book_FieldIndex.Enchantment:
                    return Enchantment;
                case Book_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case Book_FieldIndex.Description:
                    return Description;
                case Book_FieldIndex.Flags:
                    return Flags;
                case Book_FieldIndex.Teaches:
                    return Teaches;
                case Book_FieldIndex.Value:
                    return Value;
                case Book_FieldIndex.Weight:
                    return Weight;
                case Book_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Book_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Book_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Book_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Book_FieldIndex.Enchantment:
                    this.Enchantment = ex;
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = ex;
                    break;
                case Book_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Book_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Book_FieldIndex.Teaches:
                    this.Teaches = ex;
                    break;
                case Book_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Book_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Book_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Book_FieldIndex enu = (Book_FieldIndex)index;
            switch (enu)
            {
                case Book_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Book_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Book_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Book_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Book_FieldIndex.Enchantment:
                    this.Enchantment = (Exception)obj;
                    break;
                case Book_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (Exception)obj;
                    break;
                case Book_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Book_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Book_FieldIndex.Teaches:
                    this.Teaches = (Exception)obj;
                    break;
                case Book_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Book_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Book_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (Script != null) return true;
            if (Enchantment != null) return true;
            if (EnchantmentPoints != null) return true;
            if (Description != null) return true;
            if (Flags != null) return true;
            if (Teaches != null) return true;
            if (Value != null) return true;
            if (Weight != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Book_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Enchantment => {Enchantment}");
            fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Teaches => {Teaches}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Book_ErrorMask Combine(Book_ErrorMask rhs)
        {
            var ret = new Book_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
            ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Teaches = this.Teaches.Combine(rhs.Teaches);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Book_ErrorMask Combine(Book_ErrorMask lhs, Book_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Book_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Book_ErrorMask();
        }
        #endregion

    }
    public class Book_CopyMask : ItemAbstract_CopyMask
    {
        public Book_CopyMask()
        {
        }

        public Book_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Icon = defaultOn;
            this.Script = defaultOn;
            this.Enchantment = defaultOn;
            this.EnchantmentPoints = defaultOn;
            this.Description = defaultOn;
            this.Flags = defaultOn;
            this.Teaches = defaultOn;
            this.Value = defaultOn;
            this.Weight = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public bool Script;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool Description;
        public bool Flags;
        public bool Teaches;
        public bool Value;
        public bool Weight;
        public bool DATADataTypeState;
        #endregion

    }

    public class Book_TranslationMask : ItemAbstract_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Icon;
        public bool Script;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool Description;
        public bool Flags;
        public bool Teaches;
        public bool Value;
        public bool Weight;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Book_TranslationMask()
            : base()
        {
        }

        public Book_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Icon = defaultOn;
            this.Script = defaultOn;
            this.Enchantment = defaultOn;
            this.EnchantmentPoints = defaultOn;
            this.Description = defaultOn;
            this.Flags = defaultOn;
            this.Teaches = defaultOn;
            this.Value = defaultOn;
            this.Weight = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
            ret.Add((Script, null));
            ret.Add((Enchantment, null));
            ret.Add((EnchantmentPoints, null));
            ret.Add((Description, null));
            ret.Add((Flags, null));
            ret.Add((Teaches, null));
            ret.Add((Value, null));
            ret.Add((Weight, null));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BookBinaryWriteTranslation :
        ItemAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static BookBinaryWriteTranslation Instance = new BookBinaryWriteTranslation();

        public static void Write_Embedded(
            IBookInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IBookInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Book_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Book_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    header: recordTypeConverter.ConvertToCustom(Book_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Enchantment_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Enchantment_Property,
                    header: recordTypeConverter.ConvertToCustom(Book_Registration.ENAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.EnchantmentPoints_IsSet)
            {
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnchantmentPoints,
                    header: recordTypeConverter.ConvertToCustom(Book_Registration.ANAM_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(Book_Registration.DESC_HEADER),
                    nullable: false);
            }
            if (item.DATADataTypeState.HasFlag(Book.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Book_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Book.BookFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                        writer,
                        item.Teaches,
                        length: 1);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Value);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IBookInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Book_Registration.BOOK_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBookInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBookInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBookInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IBookInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class BookBinaryCreateTranslation : ItemAbstractBinaryCreateTranslation
    {
        public new readonly static BookBinaryCreateTranslation Instance = new BookBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class BookBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBookInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Book_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((BookBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Book_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BookBinaryWrapper :
        ItemAbstractBinaryWrapper,
        IBookInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Book_Registration.Instance;
        public new static Book_Registration Registration => Book_Registration.Instance;
        protected override object CommonInstance()
        {
            return BookCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBookInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => BookXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((BookXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => BookBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((BookBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Model
        public IModelInternalGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Icon
        private int? _IconLocation;
        public bool Icon_IsSet => _IconLocation.HasValue;
        public String Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptInternalGetter> Script_Property => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptInternalGetter>.Empty;
        public IScriptInternalGetter Script => default;
        #endregion
        #region Enchantment
        private int? _EnchantmentLocation;
        public bool Enchantment_IsSet => _EnchantmentLocation.HasValue;
        public IFormIDSetLinkGetter<IEnchantmentInternalGetter> Enchantment_Property => _EnchantmentLocation.HasValue ? new FormIDSetLink<IEnchantmentInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentLocation.Value, _package.Meta)))) : FormIDSetLink<IEnchantmentInternalGetter>.Empty;
        public IEnchantmentInternalGetter Enchantment => default;
        #endregion
        #region EnchantmentPoints
        private int? _EnchantmentPointsLocation;
        public bool EnchantmentPoints_IsSet => _EnchantmentPointsLocation.HasValue;
        public UInt16 EnchantmentPoints => _EnchantmentPointsLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentPointsLocation.Value, _package.Meta)) : default;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public bool Description_IsSet => _DescriptionLocation.HasValue;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DescriptionLocation.Value, _package.Meta)) : default;
        #endregion
        private int? _DATALocation;
        public Book.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation.Value + 0x0;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Book.BookFlag Flags => _Flags_IsSet ? (Book.BookFlag)_data.Span.Slice(_FlagsLocation, 1)[0] : default;
        #endregion
        #region Teaches
        private int _TeachesLocation => _DATALocation.Value + 0x1;
        private bool _Teaches_IsSet => _DATALocation.HasValue;
        public Skill Teaches => _Teaches_IsSet ? (Skill)_data.Span.Slice(_TeachesLocation, 1)[0] : default;
        #endregion
        #region Value
        private int _ValueLocation => _DATALocation.Value + 0x2;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public Single Value => _Value_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation.Value + 0x6;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WeightLocation, 4)) : default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected BookBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static BookBinaryWrapper BookFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new BookBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Icon);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    _EnchantmentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    _EnchantmentPointsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.EnchantmentPoints);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Description);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Book.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Book_FieldIndex.Weight);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

