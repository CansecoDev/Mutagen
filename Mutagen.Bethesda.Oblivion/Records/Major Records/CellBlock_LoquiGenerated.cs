/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CellBlock : 
        LoquiNotifyingObject,
        ICellBlock,
        ILoquiObject<CellBlock>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<CellBlock>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellBlock_Registration.Instance;
        public static CellBlock_Registration Registration => CellBlock_Registration.Instance;

        #region Ctor
        public CellBlock()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BlockNumber
        private Int32 _BlockNumber;
        public Int32 BlockNumber
        {
            get => this._BlockNumber;
            set => this.RaiseAndSetIfChanged(ref this._BlockNumber, value, nameof(BlockNumber));
        }
        #endregion
        #region GroupType
        private GroupTypeEnum _GroupType;
        public GroupTypeEnum GroupType
        {
            get => this._GroupType;
            set => this.RaiseAndSetIfChanged(ref this._GroupType, value, nameof(GroupType));
        }
        #endregion
        #region LastModified
        private Byte[] _LastModified = new byte[4];
        public Byte[] LastModified
        {
            get => _LastModified;
            set
            {
                this._LastModified = value;
                if (value == null)
                {
                    this._LastModified = new byte[4];
                }
            }
        }
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<CellSubBlock> _Items = new SourceSetList<CellSubBlock>();
        public ISourceSetList<CellSubBlock> Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<CellSubBlock> ItemsEnumerable
        {
            get => _Items.Items;
            set => _Items.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<CellSubBlock> ICellBlock.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<CellSubBlock> ICellBlockGetter.Items => _Items;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<CellBlock>.GetEqualsMask(CellBlock rhs, EqualsMaskHelper.Include include) => CellBlockCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ICellBlockGetter>.GetEqualsMask(ICellBlockGetter rhs, EqualsMaskHelper.Include include) => CellBlockCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            CellBlock_Mask<bool> printMask = null)
        {
            return CellBlockCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellBlockCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public CellBlock_Mask<bool> GetHasBeenSetMask()
        {
            return CellBlockCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CellBlock rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellBlock rhs)
        {
            if (rhs == null) return false;
            if (this.BlockNumber != rhs.BlockNumber) return false;
            if (this.GroupType != rhs.GroupType) return false;
            if (!ByteExt.EqualsFast(this.LastModified, rhs.LastModified)) return false;
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!this.Items.SequenceEqual(rhs.Items)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(BlockNumber).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(GroupType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LastModified).CombineHashCode(ret);
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static CellBlock Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            CellBlock_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CellBlock Create_Xml(
            XElement node,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true,
            CellBlock_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CellBlock Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new CellBlock() : null;
                    break;
                default:
                    break;
            }
            var ret = new CellBlock();
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellBlockCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static CellBlock Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            CellBlock_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CellBlock Create_Xml(
            string path,
            out CellBlock_ErrorMask errorMask,
            CellBlock_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CellBlock Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            CellBlock_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CellBlock Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            CellBlock_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CellBlock Create_Xml(
            Stream stream,
            out CellBlock_ErrorMask errorMask,
            CellBlock_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CellBlock Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            CellBlock_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true,
            CellBlock_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out CellBlock_ErrorMask errorMask,
            CellBlock_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out CellBlock_ErrorMask errorMask,
            CellBlock_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            CellBlock_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            CellBlockCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.Items:
                    return Items.HasBeenSet;
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public static readonly RecordType GRUP_RECORD_TYPE = (RecordType)CellSubBlock.GRUP_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Items.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod<M>
        {
            foreach (var item in Items.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static async Task<CellBlock> Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return await Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static async Task<(CellBlock Object, CellBlock_ErrorMask ErrorMask)> Create_Binary_Error(
            MutagenFrame frame,
            MasterReferences masterReferences,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = await Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            return (ret, CellBlock_ErrorMask.Factory(errorMaskBuilder));
        }

        public static async Task<CellBlock> Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new CellBlock();
            await UtilityAsyncTranslation.GroupParse(
                record: ret,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes).ConfigureAwait(false);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            CellBlockCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            CellBlock item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Int32 BlockNumberParse))
            {
                item.BlockNumber = BlockNumberParse;
            }
            else
            {
                item.BlockNumber = default(Int32);
            }
            if (EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out GroupTypeEnum GroupTypeParse))
            {
                item.GroupType = GroupTypeParse;
            }
            else
            {
                item.GroupType = default(GroupTypeEnum);
            }
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out Byte[] LastModifiedParse))
            {
                item.LastModified = LastModifiedParse;
            }
            else
            {
                item.LastModified = default(Byte[]);
            }
        }

        protected static async Task<TryGet<int?>> Fill_Binary_RecordTypes(
            CellBlock item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x50555247: // GRUP
                {
                    await Mutagen.Bethesda.Binary.ListAsyncBinaryTranslation<CellSubBlock>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: CellBlock_Registration.GRUP_HEADER,
                        thread: true,
                        item: item.Items,
                        fieldIndex: (int)CellBlock_FieldIndex.Items,
                        lengthLength: Mutagen.Bethesda.Constants.RECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: async (MutagenFrame r, ErrorMaskBuilder listErrMask) =>
                        {
                            return await LoquiBinaryAsyncTranslation<CellSubBlock>.Instance.Parse(
                                frame: r,
                                errorMask: listErrMask,
                                masterReferences: masterReferences).ConfigureAwait(false);
                        }
                        ).ConfigureAwait(false);
                    return TryGet<int?>.Succeed((int)CellBlock_FieldIndex.Items);
                }
                default:
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + Mutagen.Bethesda.Constants.RECORD_LENGTH;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public CellBlock Copy(
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null)
        {
            return CellBlock.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CellBlock Copy(
            ICellBlock item,
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null)
        {
            CellBlock ret;
            if (item.GetType().Equals(typeof(CellBlock)))
            {
                ret = new CellBlock();
            }
            else
            {
                ret = (CellBlock)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CellBlock Copy_ToLoqui(
            ICellBlockGetter item,
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null)
        {
            CellBlock ret;
            if (item.GetType().Equals(typeof(CellBlock)))
            {
                ret = new CellBlock() as CellBlock;
            }
            else
            {
                ret = (CellBlock)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ICellBlockGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ICellBlockGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ICellBlockGetter rhs,
            CellBlock_CopyMask copyMask,
            ICellBlockGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ICellBlockGetter rhs,
            out CellBlock_ErrorMask errorMask,
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellBlockCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICellBlockGetter rhs,
            ErrorMaskBuilder errorMask,
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null,
            bool doMasks = true)
        {
            CellBlockCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    this.BlockNumber = (Int32)obj;
                    break;
                case CellBlock_FieldIndex.GroupType:
                    this.GroupType = (GroupTypeEnum)obj;
                    break;
                case CellBlock_FieldIndex.LastModified:
                    this.LastModified = (Byte[])obj;
                    break;
                case CellBlock_FieldIndex.Items:
                    this._Items.SetTo((IEnumerable<CellSubBlock>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            CellBlockCommon.Clear(this);
        }


        public static CellBlock Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CellBlock();
            foreach (var pair in fields)
            {
                CopyInInternal_CellBlock(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CellBlock(CellBlock obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CellBlock_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    obj.BlockNumber = (Int32)pair.Value;
                    break;
                case CellBlock_FieldIndex.GroupType:
                    obj.GroupType = (GroupTypeEnum)pair.Value;
                    break;
                case CellBlock_FieldIndex.LastModified:
                    obj.LastModified = (Byte[])pair.Value;
                    break;
                case CellBlock_FieldIndex.Items:
                    obj._Items.SetTo((IEnumerable<CellSubBlock>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ICellBlock : ICellBlockGetter, ILoquiClass<ICellBlock, ICellBlockGetter>, ILoquiClass<CellBlock, ICellBlockGetter>
    {
        new Int32 BlockNumber { get; set; }

        new GroupTypeEnum GroupType { get; set; }

        new Byte[] LastModified { get; set; }

        new ISourceSetList<CellSubBlock> Items { get; }
    }

    public partial interface ICellBlockGetter : ILoquiObject
    {
        #region BlockNumber
        Int32 BlockNumber { get; }

        #endregion
        #region GroupType
        GroupTypeEnum GroupType { get; }

        #endregion
        #region LastModified
        Byte[] LastModified { get; }

        #endregion
        #region Items
        IObservableSetList<CellSubBlock> Items { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CellBlock_FieldIndex
    {
        BlockNumber = 0,
        GroupType = 1,
        LastModified = 2,
        Items = 3,
    }
    #endregion

    #region Registration
    public class CellBlock_Registration : ILoquiRegistration
    {
        public static readonly CellBlock_Registration Instance = new CellBlock_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 131,
            version: 0);

        public const string GUID = "da71d7e7-5ba9-4dce-afbe-7dc5aa63ef11";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(CellBlock_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellBlock_ErrorMask);

        public static readonly Type ClassType = typeof(CellBlock);

        public static readonly Type GetterType = typeof(ICellBlockGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICellBlock);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(CellBlockCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CellBlock";

        public const string Name = "CellBlock";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BLOCKNUMBER":
                    return (ushort)CellBlock_FieldIndex.BlockNumber;
                case "GROUPTYPE":
                    return (ushort)CellBlock_FieldIndex.GroupType;
                case "LASTMODIFIED":
                    return (ushort)CellBlock_FieldIndex.LastModified;
                case "ITEMS":
                    return (ushort)CellBlock_FieldIndex.Items;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.Items:
                    return true;
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.Items:
                    return true;
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                case CellBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    return "BlockNumber";
                case CellBlock_FieldIndex.GroupType:
                    return "GroupType";
                case CellBlock_FieldIndex.LastModified:
                    return "LastModified";
                case CellBlock_FieldIndex.Items:
                    return "Items";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                case CellBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                case CellBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    return typeof(Int32);
                case CellBlock_FieldIndex.GroupType:
                    return typeof(GroupTypeEnum);
                case CellBlock_FieldIndex.LastModified:
                    return typeof(Byte[]);
                case CellBlock_FieldIndex.Items:
                    return typeof(SourceSetList<CellSubBlock>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRUP_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CellBlockCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICellBlock item,
            ICellBlockGetter rhs,
            ICellBlockGetter def,
            ErrorMaskBuilder errorMask,
            CellBlock_CopyMask copyMask)
        {
            if (copyMask?.BlockNumber ?? true)
            {
                errorMask?.PushIndex((int)CellBlock_FieldIndex.BlockNumber);
                try
                {
                    item.BlockNumber = rhs.BlockNumber;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GroupType ?? true)
            {
                errorMask?.PushIndex((int)CellBlock_FieldIndex.GroupType);
                try
                {
                    item.GroupType = rhs.GroupType;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LastModified ?? true)
            {
                errorMask?.PushIndex((int)CellBlock_FieldIndex.LastModified);
                try
                {
                    item.LastModified = rhs.LastModified;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)CellBlock_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault(
                        rhs: rhs.Items,
                        def: def?.Items,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return CellSubBlock.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ICellBlock item)
        {
            item.BlockNumber = default(Int32);
            item.GroupType = default(GroupTypeEnum);
            item.LastModified = default(Byte[]);
            item.Items.Unset();
        }

        public static CellBlock_Mask<bool> GetEqualsMask(
            this ICellBlockGetter item,
            ICellBlockGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CellBlock_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ICellBlockGetter item,
            ICellBlockGetter rhs,
            CellBlock_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.BlockNumber = item.BlockNumber == rhs.BlockNumber;
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = ByteExt.EqualsFast(item.LastModified, rhs.LastModified);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }

        public static string ToString(
            this ICellBlockGetter item,
            string name = null,
            CellBlock_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICellBlockGetter item,
            FileGeneration fg,
            string name = null,
            CellBlock_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CellBlock)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CellBlock)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.BlockNumber ?? true)
                {
                    fg.AppendLine($"BlockNumber => {item.BlockNumber}");
                }
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {item.GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {item.LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICellBlockGetter item,
            CellBlock_Mask<bool?> checkMask)
        {
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            return true;
        }

        public static CellBlock_Mask<bool> GetHasBeenSetMask(ICellBlockGetter item)
        {
            var ret = new CellBlock_Mask<bool>();
            ret.BlockNumber = true;
            ret.GroupType = true;
            ret.LastModified = true;
            ret.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, CellSubBlock_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.WithIndex().Select((i) => new MaskItemIndexed<bool, CellSubBlock_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            CellBlock item,
            bool doMasks,
            out CellBlock_ErrorMask errorMask,
            CellBlock_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            CellBlock item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CellBlock");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CellBlock");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this CellBlock item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)CellBlock_FieldIndex.BlockNumber) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlockNumber),
                    item: item.BlockNumber,
                    fieldIndex: (int)CellBlock_FieldIndex.BlockNumber,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellBlock_FieldIndex.GroupType) ?? true))
            {
                EnumXmlTranslation<GroupTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.GroupType),
                    item: item.GroupType,
                    fieldIndex: (int)CellBlock_FieldIndex.GroupType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellBlock_FieldIndex.LastModified) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LastModified),
                    item: item.LastModified,
                    fieldIndex: (int)CellBlock_FieldIndex.LastModified,
                    errorMask: errorMask);
            }
            if (item.Items.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)CellBlock_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<CellSubBlock>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)CellBlock_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)CellBlock_FieldIndex.Items),
                    transl: (XElement subNode, CellSubBlock subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<CellSubBlock>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this CellBlock item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellBlockCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this CellBlock item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "BlockNumber":
                    try
                    {
                        errorMask?.PushIndex((int)CellBlock_FieldIndex.BlockNumber);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 BlockNumberParse,
                            errorMask: errorMask))
                        {
                            item.BlockNumber = BlockNumberParse;
                        }
                        else
                        {
                            item.BlockNumber = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GroupType":
                    try
                    {
                        errorMask?.PushIndex((int)CellBlock_FieldIndex.GroupType);
                        if (EnumXmlTranslation<GroupTypeEnum>.Instance.Parse(
                            node: node,
                            item: out GroupTypeEnum GroupTypeParse,
                            errorMask: errorMask))
                        {
                            item.GroupType = GroupTypeParse;
                        }
                        else
                        {
                            item.GroupType = default(GroupTypeEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LastModified":
                    try
                    {
                        errorMask?.PushIndex((int)CellBlock_FieldIndex.LastModified);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] LastModifiedParse,
                            errorMask: errorMask))
                        {
                            item.LastModified = LastModifiedParse;
                        }
                        else
                        {
                            item.LastModified = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    try
                    {
                        errorMask?.PushIndex((int)CellBlock_FieldIndex.Items);
                        if (ListXmlTranslation<CellSubBlock>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<CellSubBlock>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            CellBlock item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out CellBlock_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            CellBlock item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: CellBlock_Registration.GRUP_HEADER,
                type: ObjectType.Group))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            CellBlock item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BlockNumber);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType,
                length: 4);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LastModified);
        }

        public static void Write_Binary_RecordTypes(
            CellBlock item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Items.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<CellSubBlock>.Instance.Write(
                    writer: writer,
                    items: item.Items,
                    fieldIndex: (int)CellBlock_FieldIndex.Items,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, CellSubBlock subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<CellSubBlock>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class CellBlock_Mask<T> : IMask<T>, IEquatable<CellBlock_Mask<T>>
    {
        #region Ctors
        public CellBlock_Mask()
        {
        }

        public CellBlock_Mask(T initialValue)
        {
            this.BlockNumber = initialValue;
            this.GroupType = initialValue;
            this.LastModified = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, CellSubBlock_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T BlockNumber;
        public T GroupType;
        public T LastModified;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, CellSubBlock_Mask<T>>>> Items;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CellBlock_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellBlock_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.BlockNumber, rhs.BlockNumber)) return false;
            if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
            if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.BlockNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.GroupType?.GetHashCode());
            ret = ret.CombineHashCode(this.LastModified?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.BlockNumber)) return false;
            if (!eval(this.GroupType)) return false;
            if (!eval(this.LastModified)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public CellBlock_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CellBlock_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CellBlock_Mask<R> obj, Func<T, R> eval)
        {
            obj.BlockNumber = eval(this.BlockNumber);
            obj.GroupType = eval(this.GroupType);
            obj.LastModified = eval(this.LastModified);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CellSubBlock_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItemIndexed<R, CellSubBlock_Mask<R>>> l = new List<MaskItemIndexed<R, CellSubBlock_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, CellSubBlock_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, CellSubBlock_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Items.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CellBlock_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CellBlock_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CellBlock_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.BlockNumber ?? true)
                {
                    fg.AppendLine($"BlockNumber => {BlockNumber}");
                }
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CellBlock_ErrorMask : IErrorMask, IErrorMask<CellBlock_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception BlockNumber;
        public Exception GroupType;
        public Exception LastModified;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, CellSubBlock_ErrorMask>>> Items;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    return BlockNumber;
                case CellBlock_FieldIndex.GroupType:
                    return GroupType;
                case CellBlock_FieldIndex.LastModified:
                    return LastModified;
                case CellBlock_FieldIndex.Items:
                    return Items;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    this.BlockNumber = ex;
                    break;
                case CellBlock_FieldIndex.GroupType:
                    this.GroupType = ex;
                    break;
                case CellBlock_FieldIndex.LastModified:
                    this.LastModified = ex;
                    break;
                case CellBlock_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, CellSubBlock_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    this.BlockNumber = (Exception)obj;
                    break;
                case CellBlock_FieldIndex.GroupType:
                    this.GroupType = (Exception)obj;
                    break;
                case CellBlock_FieldIndex.LastModified:
                    this.LastModified = (Exception)obj;
                    break;
                case CellBlock_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, CellSubBlock_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (BlockNumber != null) return true;
            if (GroupType != null) return true;
            if (LastModified != null) return true;
            if (Items != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CellBlock_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"BlockNumber => {BlockNumber}");
            fg.AppendLine($"GroupType => {GroupType}");
            fg.AppendLine($"LastModified => {LastModified}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public CellBlock_ErrorMask Combine(CellBlock_ErrorMask rhs)
        {
            var ret = new CellBlock_ErrorMask();
            ret.BlockNumber = this.BlockNumber.Combine(rhs.BlockNumber);
            ret.GroupType = this.GroupType.Combine(rhs.GroupType);
            ret.LastModified = this.LastModified.Combine(rhs.LastModified);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, CellSubBlock_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, CellSubBlock_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            return ret;
        }
        public static CellBlock_ErrorMask Combine(CellBlock_ErrorMask lhs, CellBlock_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static CellBlock_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new CellBlock_ErrorMask();
        }
        #endregion

    }
    public class CellBlock_CopyMask
    {
        public CellBlock_CopyMask()
        {
        }

        public CellBlock_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.BlockNumber = defaultOn;
            this.GroupType = defaultOn;
            this.LastModified = defaultOn;
            this.Items = new MaskItem<CopyOption, CellSubBlock_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool BlockNumber;
        public bool GroupType;
        public bool LastModified;
        public MaskItem<CopyOption, CellSubBlock_CopyMask> Items;
        #endregion

    }

    public class CellBlock_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool BlockNumber;
        public bool GroupType;
        public bool LastModified;
        public MaskItem<bool, CellSubBlock_TranslationMask> Items;
        #endregion

        #region Ctors
        public CellBlock_TranslationMask()
        {
        }

        public CellBlock_TranslationMask(bool defaultOn)
        {
            this.BlockNumber = defaultOn;
            this.GroupType = defaultOn;
            this.LastModified = defaultOn;
            this.Items = new MaskItem<bool, CellSubBlock_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((BlockNumber, null));
            ret.Add((GroupType, null));
            ret.Add((LastModified, null));
            ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
