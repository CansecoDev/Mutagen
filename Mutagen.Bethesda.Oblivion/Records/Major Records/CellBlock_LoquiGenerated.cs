/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CellBlock : 
        ICellBlock,
        ILoquiObject<CellBlock>,
        ILoquiObjectSetter,
        IPropertySupporter<Byte[]>,
        IPropertySupporter<GroupTypeEnum>,
        IEquatable<CellBlock>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellBlock_Registration.Instance;
        public static CellBlock_Registration Registration => CellBlock_Registration.Instance;

        #region Ctor
        public CellBlock()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BlockNumber
        protected Byte[] _BlockNumber;
        protected PropertyForwarder<CellBlock, Byte[]> _BlockNumberForwarder;
        public INotifyingSetItem<Byte[]> BlockNumber_Property => _BlockNumberForwarder ?? (_BlockNumberForwarder = new PropertyForwarder<CellBlock, Byte[]>(this, (int)CellBlock_FieldIndex.BlockNumber));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] BlockNumber
        {
            get => this._BlockNumber;
            set => this.SetBlockNumber(value);
        }
        protected void SetBlockNumber(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)CellBlock_FieldIndex.BlockNumber];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(BlockNumber, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)CellBlock_FieldIndex.BlockNumber] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = BlockNumber;
                _BlockNumber = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)CellBlock_FieldIndex.BlockNumber,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _BlockNumber = item;
            }
        }
        protected void UnsetBlockNumber()
        {
            _hasBeenSetTracker[(int)CellBlock_FieldIndex.BlockNumber] = false;
            BlockNumber = default(Byte[]);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> ICellBlock.BlockNumber_Property => this.BlockNumber_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> ICellBlockGetter.BlockNumber_Property => this.BlockNumber_Property;
        #endregion
        #region GroupType
        protected GroupTypeEnum _GroupType;
        protected PropertyForwarder<CellBlock, GroupTypeEnum> _GroupTypeForwarder;
        public INotifyingSetItem<GroupTypeEnum> GroupType_Property => _GroupTypeForwarder ?? (_GroupTypeForwarder = new PropertyForwarder<CellBlock, GroupTypeEnum>(this, (int)CellBlock_FieldIndex.GroupType));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public GroupTypeEnum GroupType
        {
            get => this._GroupType;
            set => this.SetGroupType(value);
        }
        protected void SetGroupType(
            GroupTypeEnum item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)CellBlock_FieldIndex.GroupType];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && GroupType == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)CellBlock_FieldIndex.GroupType] = hasBeenSet;
            }
            if (_GroupTypeEnum_subscriptions != null)
            {
                var tmp = GroupType;
                _GroupType = item;
                _GroupTypeEnum_subscriptions.FireSubscriptions(
                    index: (int)CellBlock_FieldIndex.GroupType,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _GroupType = item;
            }
        }
        protected void UnsetGroupType()
        {
            _hasBeenSetTracker[(int)CellBlock_FieldIndex.GroupType] = false;
            GroupType = default(GroupTypeEnum);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<GroupTypeEnum> ICellBlock.GroupType_Property => this.GroupType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<GroupTypeEnum> ICellBlockGetter.GroupType_Property => this.GroupType_Property;
        #endregion
        #region LastModified
        protected Byte[] _LastModified;
        protected PropertyForwarder<CellBlock, Byte[]> _LastModifiedForwarder;
        public INotifyingSetItem<Byte[]> LastModified_Property => _LastModifiedForwarder ?? (_LastModifiedForwarder = new PropertyForwarder<CellBlock, Byte[]>(this, (int)CellBlock_FieldIndex.LastModified));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] LastModified
        {
            get => this._LastModified;
            set => this.SetLastModified(value);
        }
        protected void SetLastModified(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)CellBlock_FieldIndex.LastModified];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(LastModified, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)CellBlock_FieldIndex.LastModified] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = LastModified;
                _LastModified = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)CellBlock_FieldIndex.LastModified,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _LastModified = item;
            }
        }
        protected void UnsetLastModified()
        {
            _hasBeenSetTracker[(int)CellBlock_FieldIndex.LastModified] = false;
            LastModified = default(Byte[]);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> ICellBlock.LastModified_Property => this.LastModified_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> ICellBlockGetter.LastModified_Property => this.LastModified_Property;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<CellSubBlock> _Items = new NotifyingList<CellSubBlock>();
        public INotifyingList<CellSubBlock> Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<CellSubBlock> ItemsEnumerable
        {
            get => _Items;
            set => _Items.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<CellSubBlock> ICellBlock.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<CellSubBlock> ICellBlockGetter.Items => _Items;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => CellBlockCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => CellBlockCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CellBlockCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CellBlockCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<CellBlock>.GetEqualsMask(CellBlock rhs) => CellBlockCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICellBlockGetter>.GetEqualsMask(ICellBlockGetter rhs) => CellBlockCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return CellBlockCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            CellBlock_Mask<bool> printMask = null)
        {
            return CellBlockCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellBlockCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public CellBlock_Mask<bool> GetHasBeenSetMask()
        {
            return CellBlockCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CellBlock rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellBlock rhs)
        {
            if (rhs == null) return false;
            if (!this.BlockNumber.EqualsFast(rhs.BlockNumber)) return false;
            if (this.GroupType != rhs.GroupType) return false;
            if (!this.LastModified.EqualsFast(rhs.LastModified)) return false;
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!this.Items.SequenceEqual(rhs.Items)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(BlockNumber).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(GroupType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LastModified).CombineHashCode(ret);
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static CellBlock Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static CellBlock Create_XML(
            XElement root,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static CellBlock Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new CellBlock();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static CellBlock Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static CellBlock Create_XML(
            string path,
            out CellBlock_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static CellBlock Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static CellBlock Create_XML(
            Stream stream,
            out CellBlock_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<CellBlock>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out CellBlock_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<CellBlock>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out CellBlock_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out CellBlock_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            CellBlockCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            CellBlock item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "BlockNumber":
                    try
                    {
                        errorMask?.PushIndex((int)CellBlock_FieldIndex.BlockNumber);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] BlockNumberParse,
                            errorMask: errorMask))
                        {
                            item.BlockNumber = BlockNumberParse;
                        }
                        else
                        {
                            item.UnsetBlockNumber();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GroupType":
                    try
                    {
                        errorMask?.PushIndex((int)CellBlock_FieldIndex.GroupType);
                        if (EnumXmlTranslation<GroupTypeEnum>.Instance.Parse(
                            root: root,
                            item: out GroupTypeEnum GroupTypeParse,
                            errorMask: errorMask))
                        {
                            item.GroupType = GroupTypeParse;
                        }
                        else
                        {
                            item.UnsetGroupType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LastModified":
                    try
                    {
                        errorMask?.PushIndex((int)CellBlock_FieldIndex.LastModified);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] LastModifiedParse,
                            errorMask: errorMask))
                        {
                            item.LastModified = LastModifiedParse;
                        }
                        else
                        {
                            item.UnsetLastModified();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    ListXmlTranslation<CellSubBlock>.Instance.ParseInto(
                        root: root,
                        item: item.Items,
                        fieldIndex: (int)CellBlock_FieldIndex.Items,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<CellSubBlock>.Instance.Parse);
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        #region IPropertySupporter Byte[]
        protected ObjectCentralizationSubscriptions<Byte[]> _ByteArr_subscriptions;
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected Byte[] GetByteArr(int index)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    return BlockNumber;
                case CellBlock_FieldIndex.LastModified:
                    return LastModified;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    SetBlockNumber(item, hasBeenSet, cmds);
                    break;
                case CellBlock_FieldIndex.LastModified:
                    SetLastModified(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    _hasBeenSetTracker[index] = false;
                    BlockNumber = default(Byte[]);
                    break;
                case CellBlock_FieldIndex.LastModified:
                    _hasBeenSetTracker[index] = false;
                    LastModified = default(Byte[]);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected Byte[] DefaultValueByteArr(int index)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.LastModified:
                    return default(Byte[]);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        #endregion

        #region IPropertySupporter GroupTypeEnum
        protected ObjectCentralizationSubscriptions<GroupTypeEnum> _GroupTypeEnum_subscriptions;
        GroupTypeEnum IPropertySupporter<GroupTypeEnum>.Get(int index)
        {
            return GetGroupTypeEnum(index: index);
        }

        protected GroupTypeEnum GetGroupTypeEnum(int index)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.GroupType:
                    return GroupType;
                default:
                    throw new ArgumentException($"Unknown index for field type GroupTypeEnum: {index}");
            }
        }

        void IPropertySupporter<GroupTypeEnum>.Set(
            int index,
            GroupTypeEnum item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetGroupTypeEnum(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetGroupTypeEnum(
            int index,
            GroupTypeEnum item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.GroupType:
                    SetGroupType(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type GroupTypeEnum: {index}");
            }
        }

        bool IPropertySupporter<GroupTypeEnum>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<GroupTypeEnum>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<GroupTypeEnum>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetGroupTypeEnum(
                index: index,
                cmds: cmds);
        }

        protected void UnsetGroupTypeEnum(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.GroupType:
                    _hasBeenSetTracker[index] = false;
                    GroupType = default(GroupTypeEnum);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type GroupTypeEnum: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<GroupTypeEnum>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<GroupTypeEnum> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_GroupTypeEnum_subscriptions == null)
            {
                _GroupTypeEnum_subscriptions = new ObjectCentralizationSubscriptions<GroupTypeEnum>();
            }
            _GroupTypeEnum_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<GroupTypeEnum>.Unsubscribe(
            int index,
            object owner)
        {
            _GroupTypeEnum_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<GroupTypeEnum>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        GroupTypeEnum IPropertySupporter<GroupTypeEnum>.DefaultValue(int index)
        {
            return DefaultValueGroupTypeEnum(index: index);
        }

        protected GroupTypeEnum DefaultValueGroupTypeEnum(int index)
        {
            switch ((CellBlock_FieldIndex)index)
            {
                case CellBlock_FieldIndex.GroupType:
                    return default(GroupTypeEnum);
                default:
                    throw new ArgumentException($"Unknown index for field type GroupTypeEnum: {index}");
            }
        }

        #endregion

        #region Mutagen
        public static readonly RecordType GRUP_RECORD_TYPE = (RecordType)CellSubBlock.GRUP_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static CellBlock Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static CellBlock Create_Binary(
            MutagenFrame frame,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static CellBlock Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new CellBlock();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseGroup(frame.Reader));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static CellBlock Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static CellBlock Create_Binary(
            string path,
            out CellBlock_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static CellBlock Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static CellBlock Create_Binary(
            Stream stream,
            out CellBlock_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out CellBlock_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            CellBlockCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            CellBlock item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)CellBlock_FieldIndex.BlockNumber);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out Byte[] BlockNumberParse,
                    errorMask: errorMask))
                {
                    item.BlockNumber = BlockNumberParse;
                }
                else
                {
                    item.UnsetBlockNumber();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)CellBlock_FieldIndex.GroupType);
                if (EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out GroupTypeEnum GroupTypeParse,
                    errorMask: errorMask))
                {
                    item.GroupType = GroupTypeParse;
                }
                else
                {
                    item.UnsetGroupType();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)CellBlock_FieldIndex.LastModified);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out Byte[] LastModifiedParse,
                    errorMask: errorMask))
                {
                    item.LastModified = LastModifiedParse;
                }
                else
                {
                    item.UnsetLastModified();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            CellBlock item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x50555247: // GRUP
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<CellSubBlock>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: CellBlock_Registration.GRUP_HEADER,
                        item: item.Items,
                        fieldIndex: (int)CellBlock_FieldIndex.Items,
                        lengthLength: Mutagen.Bethesda.Constants.RECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<CellSubBlock>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)CellBlock_FieldIndex.Items);
                default:
                    errorMask.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + Constants.RECORD_LENGTH;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public CellBlock Copy(
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null)
        {
            return CellBlock.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CellBlock Copy(
            ICellBlock item,
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null)
        {
            CellBlock ret;
            if (item.GetType().Equals(typeof(CellBlock)))
            {
                ret = new CellBlock();
            }
            else
            {
                ret = (CellBlock)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CellBlock Copy_ToLoqui(
            ICellBlockGetter item,
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null)
        {
            CellBlock ret;
            if (item.GetType().Equals(typeof(CellBlock)))
            {
                ret = new CellBlock() as CellBlock;
            }
            else
            {
                ret = (CellBlock)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ICellBlockGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICellBlockGetter rhs,
            CellBlock_CopyMask copyMask,
            ICellBlockGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICellBlockGetter rhs,
            out CellBlock_ErrorMask errorMask,
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellBlockCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICellBlockGetter rhs,
            ErrorMaskBuilder errorMask,
            CellBlock_CopyMask copyMask = null,
            ICellBlockGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            CellBlockCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    this.SetBlockNumber(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case CellBlock_FieldIndex.GroupType:
                    this.SetGroupType(
                        (GroupTypeEnum)obj,
                        cmds: cmds);
                    break;
                case CellBlock_FieldIndex.LastModified:
                    this.SetLastModified(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case CellBlock_FieldIndex.Items:
                    this._Items.SetTo((IEnumerable<CellSubBlock>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CellBlockCommon.Clear(this, cmds);
        }


        public static CellBlock Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CellBlock();
            foreach (var pair in fields)
            {
                CopyInInternal_CellBlock(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CellBlock(CellBlock obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CellBlock_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    obj.SetBlockNumber(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case CellBlock_FieldIndex.GroupType:
                    obj.SetGroupType(
                        (GroupTypeEnum)pair.Value,
                        cmds: null);
                    break;
                case CellBlock_FieldIndex.LastModified:
                    obj.SetLastModified(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case CellBlock_FieldIndex.Items:
                    obj._Items.SetTo((IEnumerable<CellSubBlock>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, CellBlock obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICellBlock : ICellBlockGetter, ILoquiClass<ICellBlock, ICellBlockGetter>, ILoquiClass<CellBlock, ICellBlockGetter>
    {
        new Byte[] BlockNumber { get; set; }
        new INotifyingItem<Byte[]> BlockNumber_Property { get; }

        new GroupTypeEnum GroupType { get; set; }
        new INotifyingItem<GroupTypeEnum> GroupType_Property { get; }

        new Byte[] LastModified { get; set; }
        new INotifyingItem<Byte[]> LastModified_Property { get; }

        new INotifyingList<CellSubBlock> Items { get; }
    }

    public partial interface ICellBlockGetter : ILoquiObject
    {
        #region BlockNumber
        Byte[] BlockNumber { get; }
        INotifyingItemGetter<Byte[]> BlockNumber_Property { get; }

        #endregion
        #region GroupType
        GroupTypeEnum GroupType { get; }
        INotifyingItemGetter<GroupTypeEnum> GroupType_Property { get; }

        #endregion
        #region LastModified
        Byte[] LastModified { get; }
        INotifyingItemGetter<Byte[]> LastModified_Property { get; }

        #endregion
        #region Items
        INotifyingListGetter<CellSubBlock> Items { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CellBlock_FieldIndex
    {
        BlockNumber = 0,
        GroupType = 1,
        LastModified = 2,
        Items = 3,
    }
    #endregion

    #region Registration
    public class CellBlock_Registration : ILoquiRegistration
    {
        public static readonly CellBlock_Registration Instance = new CellBlock_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 131,
            version: 0);

        public const string GUID = "da71d7e7-5ba9-4dce-afbe-7dc5aa63ef11";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(CellBlock_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellBlock_ErrorMask);

        public static readonly Type ClassType = typeof(CellBlock);

        public static readonly Type GetterType = typeof(ICellBlockGetter);

        public static readonly Type SetterType = typeof(ICellBlock);

        public static readonly Type CommonType = typeof(CellBlockCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CellBlock";

        public const string Name = "CellBlock";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BLOCKNUMBER":
                    return (ushort)CellBlock_FieldIndex.BlockNumber;
                case "GROUPTYPE":
                    return (ushort)CellBlock_FieldIndex.GroupType;
                case "LASTMODIFIED":
                    return (ushort)CellBlock_FieldIndex.LastModified;
                case "ITEMS":
                    return (ushort)CellBlock_FieldIndex.Items;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.Items:
                    return true;
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.Items:
                    return true;
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                case CellBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    return "BlockNumber";
                case CellBlock_FieldIndex.GroupType:
                    return "GroupType";
                case CellBlock_FieldIndex.LastModified:
                    return "LastModified";
                case CellBlock_FieldIndex.Items:
                    return "Items";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                case CellBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                case CellBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    return typeof(Byte[]);
                case CellBlock_FieldIndex.GroupType:
                    return typeof(GroupTypeEnum);
                case CellBlock_FieldIndex.LastModified:
                    return typeof(Byte[]);
                case CellBlock_FieldIndex.Items:
                    return typeof(NotifyingList<CellSubBlock>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRUP_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CellBlockCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICellBlock item,
            ICellBlockGetter rhs,
            ICellBlockGetter def,
            ErrorMaskBuilder errorMask,
            CellBlock_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.BlockNumber ?? true)
            {
                errorMask.PushIndex((int)CellBlock_FieldIndex.BlockNumber);
                try
                {
                    item.BlockNumber_Property.Set(
                        value: rhs.BlockNumber,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.GroupType ?? true)
            {
                errorMask.PushIndex((int)CellBlock_FieldIndex.GroupType);
                try
                {
                    item.GroupType_Property.Set(
                        value: rhs.GroupType,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.LastModified ?? true)
            {
                errorMask.PushIndex((int)CellBlock_FieldIndex.LastModified);
                try
                {
                    item.LastModified_Property.Set(
                        value: rhs.LastModified,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)CellBlock_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault(
                        rhs: rhs.Items,
                        def: def?.Items,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(CellSubBlock);
                                    return CellSubBlock.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICellBlock obj,
            NotifyingFireParameters cmds = null)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case CellBlock_FieldIndex.Items:
                    obj.Items.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICellBlock obj,
            NotifyingUnsetParameters cmds = null)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    obj.BlockNumber = default(Byte[]);
                    break;
                case CellBlock_FieldIndex.GroupType:
                    obj.GroupType = default(GroupTypeEnum);
                    break;
                case CellBlock_FieldIndex.LastModified:
                    obj.LastModified = default(Byte[]);
                    break;
                case CellBlock_FieldIndex.Items:
                    obj.Items.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICellBlock obj)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                case CellBlock_FieldIndex.GroupType:
                case CellBlock_FieldIndex.LastModified:
                    return true;
                case CellBlock_FieldIndex.Items:
                    return obj.Items.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ICellBlockGetter obj)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    return obj.BlockNumber;
                case CellBlock_FieldIndex.GroupType:
                    return obj.GroupType;
                case CellBlock_FieldIndex.LastModified:
                    return obj.LastModified;
                case CellBlock_FieldIndex.Items:
                    return obj.Items;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ICellBlock item,
            NotifyingUnsetParameters cmds = null)
        {
            item.BlockNumber = default(Byte[]);
            item.GroupType = default(GroupTypeEnum);
            item.LastModified = default(Byte[]);
            item.Items.Unset(cmds.ToUnsetParams());
        }

        public static CellBlock_Mask<bool> GetEqualsMask(
            this ICellBlockGetter item,
            ICellBlockGetter rhs)
        {
            var ret = new CellBlock_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICellBlockGetter item,
            ICellBlockGetter rhs,
            CellBlock_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.BlockNumber = item.BlockNumber.EqualsFast(rhs.BlockNumber);
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = item.LastModified.EqualsFast(rhs.LastModified);
            if (item.Items.HasBeenSet == rhs.Items.HasBeenSet)
            {
                if (item.Items.HasBeenSet)
                {
                    ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, CellSubBlock_Mask<bool>>>>();
                    ret.Items.Specific = item.Items.SelectAgainst<CellSubBlock, MaskItem<bool, CellSubBlock_Mask<bool>>>(rhs.Items, ((l, r) =>
                    {
                        MaskItem<bool, CellSubBlock_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Items.Overall);
                    ret.Items.Overall = ret.Items.Overall && ret.Items.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, CellSubBlock_Mask<bool>>>>();
                    ret.Items.Overall = true;
                }
            }
            else
            {
                ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, CellSubBlock_Mask<bool>>>>();
                ret.Items.Overall = false;
            }
        }

        public static string ToString(
            this ICellBlockGetter item,
            string name = null,
            CellBlock_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICellBlockGetter item,
            FileGeneration fg,
            string name = null,
            CellBlock_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CellBlock)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CellBlock)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.BlockNumber ?? true)
                {
                    fg.AppendLine($"BlockNumber => {item.BlockNumber}");
                }
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {item.GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {item.LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICellBlockGetter item,
            CellBlock_Mask<bool?> checkMask)
        {
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            return true;
        }

        public static CellBlock_Mask<bool> GetHasBeenSetMask(ICellBlockGetter item)
        {
            var ret = new CellBlock_Mask<bool>();
            ret.BlockNumber = true;
            ret.GroupType = true;
            ret.LastModified = true;
            ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, CellSubBlock_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.Select((i) => new MaskItem<bool, CellSubBlock_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ICellBlockGetter item,
            bool doMasks,
            out CellBlock_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            ICellBlockGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CellBlock");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CellBlock");
            }
            ByteArrayXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.BlockNumber),
                item: item.BlockNumber_Property,
                fieldIndex: (int)CellBlock_FieldIndex.BlockNumber,
                errorMask: errorMask);
            EnumXmlTranslation<GroupTypeEnum>.Instance.Write(
                node: elem,
                name: nameof(item.GroupType),
                item: item.GroupType_Property,
                fieldIndex: (int)CellBlock_FieldIndex.GroupType,
                errorMask: errorMask);
            ByteArrayXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.LastModified),
                item: item.LastModified_Property,
                fieldIndex: (int)CellBlock_FieldIndex.LastModified,
                errorMask: errorMask);
            if (item.Items.HasBeenSet)
            {
                ListXmlTranslation<CellSubBlock>.Instance.Write(
                    node: elem,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)CellBlock_FieldIndex.Items,
                    errorMask: errorMask,
                    transl: (XElement subNode, CellSubBlock subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<CellSubBlock>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            CellBlock item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out CellBlock_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = CellBlock_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            CellBlock item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: CellBlock_Registration.GRUP_HEADER,
                type: ObjectType.Group))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            CellBlock item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BlockNumber_Property,
                fieldIndex: (int)CellBlock_FieldIndex.BlockNumber,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType_Property,
                length: 4,
                fieldIndex: (int)CellBlock_FieldIndex.GroupType,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LastModified_Property,
                fieldIndex: (int)CellBlock_FieldIndex.LastModified,
                errorMask: errorMask);
        }

        public static void Write_Binary_RecordTypes(
            CellBlock item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<CellSubBlock>.Instance.Write(
                writer: writer,
                items: item.Items,
                fieldIndex: (int)CellBlock_FieldIndex.Items,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<CellSubBlock>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class CellBlock_Mask<T> : IMask<T>, IEquatable<CellBlock_Mask<T>>
    {
        #region Ctors
        public CellBlock_Mask()
        {
        }

        public CellBlock_Mask(T initialValue)
        {
            this.BlockNumber = initialValue;
            this.GroupType = initialValue;
            this.LastModified = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItem<T, CellSubBlock_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T BlockNumber;
        public T GroupType;
        public T LastModified;
        public MaskItem<T, IEnumerable<MaskItem<T, CellSubBlock_Mask<T>>>> Items;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CellBlock_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellBlock_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.BlockNumber, rhs.BlockNumber)) return false;
            if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
            if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.BlockNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.GroupType?.GetHashCode());
            ret = ret.CombineHashCode(this.LastModified?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.BlockNumber)) return false;
            if (!eval(this.GroupType)) return false;
            if (!eval(this.LastModified)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public CellBlock_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CellBlock_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CellBlock_Mask<R> obj, Func<T, R> eval)
        {
            obj.BlockNumber = eval(this.BlockNumber);
            obj.GroupType = eval(this.GroupType);
            obj.LastModified = eval(this.LastModified);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItem<R, CellSubBlock_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItem<R, CellSubBlock_Mask<R>>> l = new List<MaskItem<R, CellSubBlock_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific)
                    {
                        MaskItem<R, CellSubBlock_Mask<R>> mask = default(MaskItem<R, CellSubBlock_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, CellSubBlock_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Items.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CellBlock_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CellBlock_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CellBlock_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.BlockNumber ?? true)
                {
                    fg.AppendLine($"BlockNumber => {BlockNumber}");
                }
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CellBlock_ErrorMask : IErrorMask, IErrorMask<CellBlock_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception BlockNumber;
        public Exception GroupType;
        public Exception LastModified;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, CellSubBlock_ErrorMask>>> Items;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    return BlockNumber;
                case CellBlock_FieldIndex.GroupType:
                    return GroupType;
                case CellBlock_FieldIndex.LastModified:
                    return LastModified;
                case CellBlock_FieldIndex.Items:
                    return Items;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    this.BlockNumber = ex;
                    break;
                case CellBlock_FieldIndex.GroupType:
                    this.GroupType = ex;
                    break;
                case CellBlock_FieldIndex.LastModified:
                    this.LastModified = ex;
                    break;
                case CellBlock_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, CellSubBlock_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
            switch (enu)
            {
                case CellBlock_FieldIndex.BlockNumber:
                    this.BlockNumber = (Exception)obj;
                    break;
                case CellBlock_FieldIndex.GroupType:
                    this.GroupType = (Exception)obj;
                    break;
                case CellBlock_FieldIndex.LastModified:
                    this.LastModified = (Exception)obj;
                    break;
                case CellBlock_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, CellSubBlock_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (BlockNumber != null) return true;
            if (GroupType != null) return true;
            if (LastModified != null) return true;
            if (Items != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CellBlock_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"BlockNumber => {BlockNumber}");
            fg.AppendLine($"GroupType => {GroupType}");
            fg.AppendLine($"LastModified => {LastModified}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public CellBlock_ErrorMask Combine(CellBlock_ErrorMask rhs)
        {
            var ret = new CellBlock_ErrorMask();
            ret.BlockNumber = this.BlockNumber.Combine(rhs.BlockNumber);
            ret.GroupType = this.GroupType.Combine(rhs.GroupType);
            ret.LastModified = this.LastModified.Combine(rhs.LastModified);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, CellSubBlock_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, CellSubBlock_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            return ret;
        }
        public static CellBlock_ErrorMask Combine(CellBlock_ErrorMask lhs, CellBlock_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static CellBlock_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new CellBlock_ErrorMask();
        }
        #endregion

    }
    public class CellBlock_CopyMask
    {
        #region Members
        public bool BlockNumber;
        public bool GroupType;
        public bool LastModified;
        public MaskItem<CopyOption, CellSubBlock_CopyMask> Items;
        #endregion

    }
    #endregion





    #endregion

}
