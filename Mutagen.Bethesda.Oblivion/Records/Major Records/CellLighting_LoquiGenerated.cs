/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Loqui.Presentation;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CellLighting :
        LoquiNotifyingObject,
        ICellLighting,
        ILoquiObject<CellLighting>,
        ILoquiObjectSetter,
        IEquatable<CellLighting>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellLighting_Registration.Instance;
        public static CellLighting_Registration Registration => CellLighting_Registration.Instance;

        #region Ctor
        public CellLighting()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AmbientColor
        private Color _AmbientColor;
        public Color AmbientColor
        {
            get => this._AmbientColor;
            set => this.RaiseAndSetIfChanged(ref this._AmbientColor, value, nameof(AmbientColor));
        }
        #endregion
        #region DirectionalColor
        private Color _DirectionalColor;
        public Color DirectionalColor
        {
            get => this._DirectionalColor;
            set => this.RaiseAndSetIfChanged(ref this._DirectionalColor, value, nameof(DirectionalColor));
        }
        #endregion
        #region FogColor
        private Color _FogColor;
        public Color FogColor
        {
            get => this._FogColor;
            set => this.RaiseAndSetIfChanged(ref this._FogColor, value, nameof(FogColor));
        }
        #endregion
        #region FogNear
        private Single _FogNear;
        public Single FogNear
        {
            get => this._FogNear;
            set => this.RaiseAndSetIfChanged(ref this._FogNear, value, nameof(FogNear));
        }
        #endregion
        #region FogFar
        private Single _FogFar;
        public Single FogFar
        {
            get => this._FogFar;
            set => this.RaiseAndSetIfChanged(ref this._FogFar, value, nameof(FogFar));
        }
        #endregion
        #region DirectionalRotationXY
        private Int32 _DirectionalRotationXY;
        public Int32 DirectionalRotationXY
        {
            get => this._DirectionalRotationXY;
            set => this.RaiseAndSetIfChanged(ref this._DirectionalRotationXY, value, nameof(DirectionalRotationXY));
        }
        #endregion
        #region DirectionalRotationZ
        private Int32 _DirectionalRotationZ;
        public Int32 DirectionalRotationZ
        {
            get => this._DirectionalRotationZ;
            set => this.RaiseAndSetIfChanged(ref this._DirectionalRotationZ, value, nameof(DirectionalRotationZ));
        }
        #endregion
        #region DirectionalFade
        private Single _DirectionalFade;
        public Single DirectionalFade
        {
            get => this._DirectionalFade;
            set => this.RaiseAndSetIfChanged(ref this._DirectionalFade, value, nameof(DirectionalFade));
        }
        #endregion
        #region FogClipDistance
        private Single _FogClipDistance;
        public Single FogClipDistance
        {
            get => this._FogClipDistance;
            set => this.RaiseAndSetIfChanged(ref this._FogClipDistance, value, nameof(FogClipDistance));
        }
        #endregion

        IMask<bool> IEqualsMask<CellLighting>.GetEqualsMask(CellLighting rhs, EqualsMaskHelper.Include include) => CellLightingCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ICellLightingGetter>.GetEqualsMask(ICellLightingGetter rhs, EqualsMaskHelper.Include include) => CellLightingCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            return CellLightingCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellLightingCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public CellLighting_Mask<bool> GetHasBeenSetMask()
        {
            return CellLightingCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CellLighting rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellLighting rhs)
        {
            if (rhs == null) return false;
            if (!this.AmbientColor.ColorOnlyEquals(rhs.AmbientColor)) return false;
            if (!this.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor)) return false;
            if (!this.FogColor.ColorOnlyEquals(rhs.FogColor)) return false;
            if (!this.FogNear.EqualsWithin(rhs.FogNear)) return false;
            if (!this.FogFar.EqualsWithin(rhs.FogFar)) return false;
            if (this.DirectionalRotationXY != rhs.DirectionalRotationXY) return false;
            if (this.DirectionalRotationZ != rhs.DirectionalRotationZ) return false;
            if (!this.DirectionalFade.EqualsWithin(rhs.DirectionalFade)) return false;
            if (!this.FogClipDistance.EqualsWithin(rhs.FogClipDistance)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(AmbientColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogNear).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogFar).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalRotationXY).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalRotationZ).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalFade).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogClipDistance).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlTranslator XmlTranslator => CellLightingXmlTranslation.Instance;
        IXmlTranslator IXmlItem.XmlTranslator => this.XmlTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static CellLighting Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CellLighting Create_Xml(
            XElement node,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CellLighting Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new CellLighting() : null;
                    break;
                default:
                    break;
            }
            var ret = new CellLighting();
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellLightingXmlTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static CellLighting Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CellLighting Create_Xml(
            string path,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CellLighting Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CellLighting Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            CellLighting_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CellLighting Create_Xml(
            Stream stream,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CellLighting Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            CellLighting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((CellLighting_FieldIndex)index)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = CellLighting_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected IBinaryTranslator BinaryTranslator => CellLightingBinaryTranslation.Instance;
        IBinaryTranslator IBinaryItem.BinaryTranslator => this.BinaryTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static CellLighting Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static CellLighting Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CellLighting Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new CellLighting();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(CellLighting_Registration.XCLL_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs);
            return ret;
        }

        #endregion

        protected static void Fill_Binary_Structs(
            CellLighting item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true,
                item: out Color AmbientColorParse))
            {
                item.AmbientColor = AmbientColorParse;
            }
            else
            {
                item.AmbientColor = default(Color);
            }
            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true,
                item: out Color DirectionalColorParse))
            {
                item.DirectionalColor = DirectionalColorParse;
            }
            else
            {
                item.DirectionalColor = default(Color);
            }
            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true,
                item: out Color FogColorParse))
            {
                item.FogColor = FogColorParse;
            }
            else
            {
                item.FogColor = default(Color);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single FogNearParse))
            {
                item.FogNear = FogNearParse;
            }
            else
            {
                item.FogNear = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single FogFarParse))
            {
                item.FogFar = FogFarParse;
            }
            else
            {
                item.FogFar = default(Single);
            }
            item.DirectionalRotationXY = frame.ReadInt32();
            item.DirectionalRotationZ = frame.ReadInt32();
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DirectionalFadeParse))
            {
                item.DirectionalFade = DirectionalFadeParse;
            }
            else
            {
                item.DirectionalFade = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single FogClipDistanceParse))
            {
                item.FogClipDistance = FogClipDistanceParse;
            }
            else
            {
                item.FogClipDistance = default(Single);
            }
        }

        #endregion

        public CellLighting Copy(
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null)
        {
            return CellLighting.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CellLighting Copy(
            ICellLightingGetter item,
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null)
        {
            CellLighting ret;
            if (item.GetType().Equals(typeof(CellLighting)))
            {
                ret = new CellLighting();
            }
            else
            {
                ret = (CellLighting)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CellLighting Copy_ToLoqui(
            ICellLightingGetter item,
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null)
        {
            CellLighting ret;
            if (item.GetType().Equals(typeof(CellLighting)))
            {
                ret = new CellLighting() as CellLighting;
            }
            else
            {
                ret = (CellLighting)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ICellLightingGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ICellLightingGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ICellLightingGetter rhs,
            CellLighting_CopyMask copyMask,
            ICellLightingGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ICellLightingGetter rhs,
            out CellLighting_ErrorMask errorMask,
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellLightingCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICellLightingGetter rhs,
            ErrorMaskBuilder errorMask,
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null)
        {
            CellLightingCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    this.AmbientColor = (Color)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    this.DirectionalColor = (Color)obj;
                    break;
                case CellLighting_FieldIndex.FogColor:
                    this.FogColor = (Color)obj;
                    break;
                case CellLighting_FieldIndex.FogNear:
                    this.FogNear = (Single)obj;
                    break;
                case CellLighting_FieldIndex.FogFar:
                    this.FogFar = (Single)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = (Int32)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = (Int32)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    this.DirectionalFade = (Single)obj;
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    this.FogClipDistance = (Single)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            CellLightingCommon.Clear(this);
        }


        public static CellLighting Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CellLighting();
            foreach (var pair in fields)
            {
                CopyInInternal_CellLighting(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CellLighting(CellLighting obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CellLighting_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    obj.AmbientColor = (Color)pair.Value;
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    obj.DirectionalColor = (Color)pair.Value;
                    break;
                case CellLighting_FieldIndex.FogColor:
                    obj.FogColor = (Color)pair.Value;
                    break;
                case CellLighting_FieldIndex.FogNear:
                    obj.FogNear = (Single)pair.Value;
                    break;
                case CellLighting_FieldIndex.FogFar:
                    obj.FogFar = (Single)pair.Value;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    obj.DirectionalRotationXY = (Int32)pair.Value;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    obj.DirectionalRotationZ = (Int32)pair.Value;
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    obj.DirectionalFade = (Single)pair.Value;
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    obj.FogClipDistance = (Single)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ICellLighting :
        ICellLightingGetter,
        ILoquiClass<ICellLighting, ICellLightingGetter>,
        ILoquiClass<CellLighting, ICellLightingGetter>
    {
        new Color AmbientColor { get; set; }

        new Color DirectionalColor { get; set; }

        new Color FogColor { get; set; }

        new Single FogNear { get; set; }

        new Single FogFar { get; set; }

        new Int32 DirectionalRotationXY { get; set; }

        new Int32 DirectionalRotationZ { get; set; }

        new Single DirectionalFade { get; set; }

        new Single FogClipDistance { get; set; }

        void CopyFieldsFrom(
            ICellLightingGetter rhs,
            ErrorMaskBuilder errorMask = null,
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null);
    }

    public partial interface ICellLightingGetter :
        ILoquiObject,
        IXmlItem,
        IBinaryItem
    {
        #region AmbientColor
        Color AmbientColor { get; }

        #endregion
        #region DirectionalColor
        Color DirectionalColor { get; }

        #endregion
        #region FogColor
        Color FogColor { get; }

        #endregion
        #region FogNear
        Single FogNear { get; }

        #endregion
        #region FogFar
        Single FogFar { get; }

        #endregion
        #region DirectionalRotationXY
        Int32 DirectionalRotationXY { get; }

        #endregion
        #region DirectionalRotationZ
        Int32 DirectionalRotationZ { get; }

        #endregion
        #region DirectionalFade
        Single DirectionalFade { get; }

        #endregion
        #region FogClipDistance
        Single FogClipDistance { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CellLighting_FieldIndex
    {
        AmbientColor = 0,
        DirectionalColor = 1,
        FogColor = 2,
        FogNear = 3,
        FogFar = 4,
        DirectionalRotationXY = 5,
        DirectionalRotationZ = 6,
        DirectionalFade = 7,
        FogClipDistance = 8,
    }
    #endregion

    #region Registration
    public class CellLighting_Registration : ILoquiRegistration
    {
        public static readonly CellLighting_Registration Instance = new CellLighting_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 138,
            version: 0);

        public const string GUID = "31acbf65-e6be-4373-9fb4-d0f1ab97c089";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(CellLighting_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellLighting_ErrorMask);

        public static readonly Type ClassType = typeof(CellLighting);

        public static readonly Type GetterType = typeof(ICellLightingGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICellLighting);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(CellLightingCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CellLighting";

        public const string Name = "CellLighting";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "AMBIENTCOLOR":
                    return (ushort)CellLighting_FieldIndex.AmbientColor;
                case "DIRECTIONALCOLOR":
                    return (ushort)CellLighting_FieldIndex.DirectionalColor;
                case "FOGCOLOR":
                    return (ushort)CellLighting_FieldIndex.FogColor;
                case "FOGNEAR":
                    return (ushort)CellLighting_FieldIndex.FogNear;
                case "FOGFAR":
                    return (ushort)CellLighting_FieldIndex.FogFar;
                case "DIRECTIONALROTATIONXY":
                    return (ushort)CellLighting_FieldIndex.DirectionalRotationXY;
                case "DIRECTIONALROTATIONZ":
                    return (ushort)CellLighting_FieldIndex.DirectionalRotationZ;
                case "DIRECTIONALFADE":
                    return (ushort)CellLighting_FieldIndex.DirectionalFade;
                case "FOGCLIPDISTANCE":
                    return (ushort)CellLighting_FieldIndex.FogClipDistance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return "AmbientColor";
                case CellLighting_FieldIndex.DirectionalColor:
                    return "DirectionalColor";
                case CellLighting_FieldIndex.FogColor:
                    return "FogColor";
                case CellLighting_FieldIndex.FogNear:
                    return "FogNear";
                case CellLighting_FieldIndex.FogFar:
                    return "FogFar";
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return "DirectionalRotationXY";
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return "DirectionalRotationZ";
                case CellLighting_FieldIndex.DirectionalFade:
                    return "DirectionalFade";
                case CellLighting_FieldIndex.FogClipDistance:
                    return "FogClipDistance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.DirectionalColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogNear:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogFar:
                    return typeof(Single);
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return typeof(Int32);
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return typeof(Int32);
                case CellLighting_FieldIndex.DirectionalFade:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogClipDistance:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(CellLightingXmlTranslation);
        public static readonly RecordType XCLL_HEADER = new RecordType("XCLL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = XCLL_HEADER;
        public const int NumStructFields = 9;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryTranslation = typeof(CellLightingBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CellLightingCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICellLighting item,
            ICellLightingGetter rhs,
            ICellLightingGetter def,
            ErrorMaskBuilder errorMask,
            CellLighting_CopyMask copyMask)
        {
            if (copyMask?.AmbientColor ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientColor);
                try
                {
                    item.AmbientColor = rhs.AmbientColor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DirectionalColor ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalColor);
                try
                {
                    item.DirectionalColor = rhs.DirectionalColor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FogColor ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.FogColor);
                try
                {
                    item.FogColor = rhs.FogColor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FogNear ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.FogNear);
                try
                {
                    item.FogNear = rhs.FogNear;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FogFar ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.FogFar);
                try
                {
                    item.FogFar = rhs.FogFar;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DirectionalRotationXY ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalRotationXY);
                try
                {
                    item.DirectionalRotationXY = rhs.DirectionalRotationXY;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DirectionalRotationZ ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalRotationZ);
                try
                {
                    item.DirectionalRotationZ = rhs.DirectionalRotationZ;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DirectionalFade ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalFade);
                try
                {
                    item.DirectionalFade = rhs.DirectionalFade;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FogClipDistance ?? true)
            {
                errorMask?.PushIndex((int)CellLighting_FieldIndex.FogClipDistance);
                try
                {
                    item.FogClipDistance = rhs.FogClipDistance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ICellLighting item)
        {
            item.AmbientColor = default(Color);
            item.DirectionalColor = default(Color);
            item.FogColor = default(Color);
            item.FogNear = default(Single);
            item.FogFar = default(Single);
            item.DirectionalRotationXY = default(Int32);
            item.DirectionalRotationZ = default(Int32);
            item.DirectionalFade = default(Single);
            item.FogClipDistance = default(Single);
        }

        public static CellLighting_Mask<bool> GetEqualsMask(
            this ICellLightingGetter item,
            ICellLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CellLighting_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ICellLightingGetter item,
            ICellLightingGetter rhs,
            CellLighting_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.AmbientColor = item.AmbientColor.ColorOnlyEquals(rhs.AmbientColor);
            ret.DirectionalColor = item.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor);
            ret.FogColor = item.FogColor.ColorOnlyEquals(rhs.FogColor);
            ret.FogNear = item.FogNear.EqualsWithin(rhs.FogNear);
            ret.FogFar = item.FogFar.EqualsWithin(rhs.FogFar);
            ret.DirectionalRotationXY = item.DirectionalRotationXY == rhs.DirectionalRotationXY;
            ret.DirectionalRotationZ = item.DirectionalRotationZ == rhs.DirectionalRotationZ;
            ret.DirectionalFade = item.DirectionalFade.EqualsWithin(rhs.DirectionalFade);
            ret.FogClipDistance = item.FogClipDistance.EqualsWithin(rhs.FogClipDistance);
        }

        public static string ToString(
            this ICellLightingGetter item,
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICellLightingGetter item,
            FileGeneration fg,
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CellLighting)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CellLighting)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.AmbientColor ?? true)
                {
                    fg.AppendLine($"AmbientColor => {item.AmbientColor}");
                }
                if (printMask?.DirectionalColor ?? true)
                {
                    fg.AppendLine($"DirectionalColor => {item.DirectionalColor}");
                }
                if (printMask?.FogColor ?? true)
                {
                    fg.AppendLine($"FogColor => {item.FogColor}");
                }
                if (printMask?.FogNear ?? true)
                {
                    fg.AppendLine($"FogNear => {item.FogNear}");
                }
                if (printMask?.FogFar ?? true)
                {
                    fg.AppendLine($"FogFar => {item.FogFar}");
                }
                if (printMask?.DirectionalRotationXY ?? true)
                {
                    fg.AppendLine($"DirectionalRotationXY => {item.DirectionalRotationXY}");
                }
                if (printMask?.DirectionalRotationZ ?? true)
                {
                    fg.AppendLine($"DirectionalRotationZ => {item.DirectionalRotationZ}");
                }
                if (printMask?.DirectionalFade ?? true)
                {
                    fg.AppendLine($"DirectionalFade => {item.DirectionalFade}");
                }
                if (printMask?.FogClipDistance ?? true)
                {
                    fg.AppendLine($"FogClipDistance => {item.FogClipDistance}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICellLightingGetter item,
            CellLighting_Mask<bool?> checkMask)
        {
            return true;
        }

        public static CellLighting_Mask<bool> GetHasBeenSetMask(ICellLightingGetter item)
        {
            var ret = new CellLighting_Mask<bool>();
            ret.AmbientColor = true;
            ret.DirectionalColor = true;
            ret.FogColor = true;
            ret.FogNear = true;
            ret.FogFar = true;
            ret.DirectionalRotationXY = true;
            ret.DirectionalRotationZ = true;
            ret.DirectionalFade = true;
            ret.FogClipDistance = true;
            return ret;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class CellLightingXmlTranslation : IXmlTranslator
    {
        public readonly static CellLightingXmlTranslation Instance = new CellLightingXmlTranslation();

        public static void WriteToNode_Xml(
            ICellLightingGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientColor),
                    item: item.AmbientColor,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalColor),
                    item: item.DirectionalColor,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogColor),
                    item: item.FogColor,
                    fieldIndex: (int)CellLighting_FieldIndex.FogColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNear) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogNear),
                    item: item.FogNear,
                    fieldIndex: (int)CellLighting_FieldIndex.FogNear,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFar) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogFar),
                    item: item.FogFar,
                    fieldIndex: (int)CellLighting_FieldIndex.FogFar,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationXY) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalRotationXY),
                    item: item.DirectionalRotationXY,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationXY,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationZ) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalRotationZ),
                    item: item.DirectionalRotationZ,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationZ,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalFade) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalFade),
                    item: item.DirectionalFade,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalFade,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogClipDistance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogClipDistance),
                    item: item.FogClipDistance,
                    fieldIndex: (int)CellLighting_FieldIndex.FogClipDistance,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            ICellLighting item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellLightingXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            ICellLighting item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "AmbientColor":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color AmbientColorParse,
                            errorMask: errorMask))
                        {
                            item.AmbientColor = AmbientColorParse;
                        }
                        else
                        {
                            item.AmbientColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalColor":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color DirectionalColorParse,
                            errorMask: errorMask))
                        {
                            item.DirectionalColor = DirectionalColorParse;
                        }
                        else
                        {
                            item.DirectionalColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogColor":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.FogColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color FogColorParse,
                            errorMask: errorMask))
                        {
                            item.FogColor = FogColorParse;
                        }
                        else
                        {
                            item.FogColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNear":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.FogNear);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FogNearParse,
                            errorMask: errorMask))
                        {
                            item.FogNear = FogNearParse;
                        }
                        else
                        {
                            item.FogNear = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogFar":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.FogFar);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FogFarParse,
                            errorMask: errorMask))
                        {
                            item.FogFar = FogFarParse;
                        }
                        else
                        {
                            item.FogFar = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalRotationXY":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalRotationXY);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 DirectionalRotationXYParse,
                            errorMask: errorMask))
                        {
                            item.DirectionalRotationXY = DirectionalRotationXYParse;
                        }
                        else
                        {
                            item.DirectionalRotationXY = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalRotationZ":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalRotationZ);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 DirectionalRotationZParse,
                            errorMask: errorMask))
                        {
                            item.DirectionalRotationZ = DirectionalRotationZParse;
                        }
                        else
                        {
                            item.DirectionalRotationZ = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalFade":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalFade);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DirectionalFadeParse,
                            errorMask: errorMask))
                        {
                            item.DirectionalFade = DirectionalFadeParse;
                        }
                        else
                        {
                            item.DirectionalFade = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogClipDistance":
                    try
                    {
                        errorMask?.PushIndex((int)CellLighting_FieldIndex.FogClipDistance);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FogClipDistanceParse,
                            errorMask: errorMask))
                        {
                            item.FogClipDistance = FogClipDistanceParse;
                        }
                        else
                        {
                            item.FogClipDistance = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        public void Write(
            XElement node,
            ICellLightingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CellLighting");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CellLighting");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICellLightingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICellLightingGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ICellLightingGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    #region Xml Write Mixins
    public static class CellLightingXmlTranslationMixIn
    {
        public static void Write_Xml(
            this ICellLightingGetter item,
            XElement node,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true,
            CellLighting_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CellLightingXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this ICellLightingGetter item,
            string path,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ICellLightingGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ICellLightingGetter item,
            Stream stream,
            out CellLighting_ErrorMask errorMask,
            CellLighting_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this ICellLightingGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this ICellLightingGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((CellLightingXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void Write_Xml(
            this ICellLightingGetter item,
            XElement node,
            string name = null,
            CellLighting_TranslationMask translationMask = null)
        {
            ((CellLightingXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void Write_Xml(
            this ICellLightingGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CellLightingXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ICellLightingGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CellLightingXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class CellLighting_Mask<T> : IMask<T>, IEquatable<CellLighting_Mask<T>>
    {
        #region Ctors
        public CellLighting_Mask()
        {
        }

        public CellLighting_Mask(T initialValue)
        {
            this.AmbientColor = initialValue;
            this.DirectionalColor = initialValue;
            this.FogColor = initialValue;
            this.FogNear = initialValue;
            this.FogFar = initialValue;
            this.DirectionalRotationXY = initialValue;
            this.DirectionalRotationZ = initialValue;
            this.DirectionalFade = initialValue;
            this.FogClipDistance = initialValue;
        }
        #endregion

        #region Members
        public T AmbientColor;
        public T DirectionalColor;
        public T FogColor;
        public T FogNear;
        public T FogFar;
        public T DirectionalRotationXY;
        public T DirectionalRotationZ;
        public T DirectionalFade;
        public T FogClipDistance;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CellLighting_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellLighting_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
            if (!object.Equals(this.DirectionalColor, rhs.DirectionalColor)) return false;
            if (!object.Equals(this.FogColor, rhs.FogColor)) return false;
            if (!object.Equals(this.FogNear, rhs.FogNear)) return false;
            if (!object.Equals(this.FogFar, rhs.FogFar)) return false;
            if (!object.Equals(this.DirectionalRotationXY, rhs.DirectionalRotationXY)) return false;
            if (!object.Equals(this.DirectionalRotationZ, rhs.DirectionalRotationZ)) return false;
            if (!object.Equals(this.DirectionalFade, rhs.DirectionalFade)) return false;
            if (!object.Equals(this.FogClipDistance, rhs.FogClipDistance)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.AmbientColor?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FogColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FogNear?.GetHashCode());
            ret = ret.CombineHashCode(this.FogFar?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalRotationXY?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalRotationZ?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalFade?.GetHashCode());
            ret = ret.CombineHashCode(this.FogClipDistance?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.AmbientColor)) return false;
            if (!eval(this.DirectionalColor)) return false;
            if (!eval(this.FogColor)) return false;
            if (!eval(this.FogNear)) return false;
            if (!eval(this.FogFar)) return false;
            if (!eval(this.DirectionalRotationXY)) return false;
            if (!eval(this.DirectionalRotationZ)) return false;
            if (!eval(this.DirectionalFade)) return false;
            if (!eval(this.FogClipDistance)) return false;
            return true;
        }
        #endregion

        #region Translate
        public CellLighting_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CellLighting_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CellLighting_Mask<R> obj, Func<T, R> eval)
        {
            obj.AmbientColor = eval(this.AmbientColor);
            obj.DirectionalColor = eval(this.DirectionalColor);
            obj.FogColor = eval(this.FogColor);
            obj.FogNear = eval(this.FogNear);
            obj.FogFar = eval(this.FogFar);
            obj.DirectionalRotationXY = eval(this.DirectionalRotationXY);
            obj.DirectionalRotationZ = eval(this.DirectionalRotationZ);
            obj.DirectionalFade = eval(this.DirectionalFade);
            obj.FogClipDistance = eval(this.FogClipDistance);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CellLighting_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CellLighting_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CellLighting_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.AmbientColor ?? true)
                {
                    fg.AppendLine($"AmbientColor => {AmbientColor}");
                }
                if (printMask?.DirectionalColor ?? true)
                {
                    fg.AppendLine($"DirectionalColor => {DirectionalColor}");
                }
                if (printMask?.FogColor ?? true)
                {
                    fg.AppendLine($"FogColor => {FogColor}");
                }
                if (printMask?.FogNear ?? true)
                {
                    fg.AppendLine($"FogNear => {FogNear}");
                }
                if (printMask?.FogFar ?? true)
                {
                    fg.AppendLine($"FogFar => {FogFar}");
                }
                if (printMask?.DirectionalRotationXY ?? true)
                {
                    fg.AppendLine($"DirectionalRotationXY => {DirectionalRotationXY}");
                }
                if (printMask?.DirectionalRotationZ ?? true)
                {
                    fg.AppendLine($"DirectionalRotationZ => {DirectionalRotationZ}");
                }
                if (printMask?.DirectionalFade ?? true)
                {
                    fg.AppendLine($"DirectionalFade => {DirectionalFade}");
                }
                if (printMask?.FogClipDistance ?? true)
                {
                    fg.AppendLine($"FogClipDistance => {FogClipDistance}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CellLighting_ErrorMask : IErrorMask, IErrorMask<CellLighting_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception AmbientColor;
        public Exception DirectionalColor;
        public Exception FogColor;
        public Exception FogNear;
        public Exception FogFar;
        public Exception DirectionalRotationXY;
        public Exception DirectionalRotationZ;
        public Exception DirectionalFade;
        public Exception FogClipDistance;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return AmbientColor;
                case CellLighting_FieldIndex.DirectionalColor:
                    return DirectionalColor;
                case CellLighting_FieldIndex.FogColor:
                    return FogColor;
                case CellLighting_FieldIndex.FogNear:
                    return FogNear;
                case CellLighting_FieldIndex.FogFar:
                    return FogFar;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return DirectionalRotationXY;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return DirectionalRotationZ;
                case CellLighting_FieldIndex.DirectionalFade:
                    return DirectionalFade;
                case CellLighting_FieldIndex.FogClipDistance:
                    return FogClipDistance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    this.AmbientColor = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    this.DirectionalColor = ex;
                    break;
                case CellLighting_FieldIndex.FogColor:
                    this.FogColor = ex;
                    break;
                case CellLighting_FieldIndex.FogNear:
                    this.FogNear = ex;
                    break;
                case CellLighting_FieldIndex.FogFar:
                    this.FogFar = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    this.DirectionalFade = ex;
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    this.FogClipDistance = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    this.AmbientColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    this.DirectionalColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogColor:
                    this.FogColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogNear:
                    this.FogNear = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogFar:
                    this.FogFar = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    this.DirectionalFade = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    this.FogClipDistance = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (AmbientColor != null) return true;
            if (DirectionalColor != null) return true;
            if (FogColor != null) return true;
            if (FogNear != null) return true;
            if (FogFar != null) return true;
            if (DirectionalRotationXY != null) return true;
            if (DirectionalRotationZ != null) return true;
            if (DirectionalFade != null) return true;
            if (FogClipDistance != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CellLighting_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"AmbientColor => {AmbientColor}");
            fg.AppendLine($"DirectionalColor => {DirectionalColor}");
            fg.AppendLine($"FogColor => {FogColor}");
            fg.AppendLine($"FogNear => {FogNear}");
            fg.AppendLine($"FogFar => {FogFar}");
            fg.AppendLine($"DirectionalRotationXY => {DirectionalRotationXY}");
            fg.AppendLine($"DirectionalRotationZ => {DirectionalRotationZ}");
            fg.AppendLine($"DirectionalFade => {DirectionalFade}");
            fg.AppendLine($"FogClipDistance => {FogClipDistance}");
        }
        #endregion

        #region Combine
        public CellLighting_ErrorMask Combine(CellLighting_ErrorMask rhs)
        {
            var ret = new CellLighting_ErrorMask();
            ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor);
            ret.DirectionalColor = this.DirectionalColor.Combine(rhs.DirectionalColor);
            ret.FogColor = this.FogColor.Combine(rhs.FogColor);
            ret.FogNear = this.FogNear.Combine(rhs.FogNear);
            ret.FogFar = this.FogFar.Combine(rhs.FogFar);
            ret.DirectionalRotationXY = this.DirectionalRotationXY.Combine(rhs.DirectionalRotationXY);
            ret.DirectionalRotationZ = this.DirectionalRotationZ.Combine(rhs.DirectionalRotationZ);
            ret.DirectionalFade = this.DirectionalFade.Combine(rhs.DirectionalFade);
            ret.FogClipDistance = this.FogClipDistance.Combine(rhs.FogClipDistance);
            return ret;
        }
        public static CellLighting_ErrorMask Combine(CellLighting_ErrorMask lhs, CellLighting_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static CellLighting_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new CellLighting_ErrorMask();
        }
        #endregion

    }
    public class CellLighting_CopyMask
    {
        public CellLighting_CopyMask()
        {
        }

        public CellLighting_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.AmbientColor = defaultOn;
            this.DirectionalColor = defaultOn;
            this.FogColor = defaultOn;
            this.FogNear = defaultOn;
            this.FogFar = defaultOn;
            this.DirectionalRotationXY = defaultOn;
            this.DirectionalRotationZ = defaultOn;
            this.DirectionalFade = defaultOn;
            this.FogClipDistance = defaultOn;
        }

        #region Members
        public bool AmbientColor;
        public bool DirectionalColor;
        public bool FogColor;
        public bool FogNear;
        public bool FogFar;
        public bool DirectionalRotationXY;
        public bool DirectionalRotationZ;
        public bool DirectionalFade;
        public bool FogClipDistance;
        #endregion

    }

    public class CellLighting_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool AmbientColor;
        public bool DirectionalColor;
        public bool FogColor;
        public bool FogNear;
        public bool FogFar;
        public bool DirectionalRotationXY;
        public bool DirectionalRotationZ;
        public bool DirectionalFade;
        public bool FogClipDistance;
        #endregion

        #region Ctors
        public CellLighting_TranslationMask()
        {
        }

        public CellLighting_TranslationMask(bool defaultOn)
        {
            this.AmbientColor = defaultOn;
            this.DirectionalColor = defaultOn;
            this.FogColor = defaultOn;
            this.FogNear = defaultOn;
            this.FogFar = defaultOn;
            this.DirectionalRotationXY = defaultOn;
            this.DirectionalRotationZ = defaultOn;
            this.DirectionalFade = defaultOn;
            this.FogClipDistance = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((AmbientColor, null));
            ret.Add((DirectionalColor, null));
            ret.Add((FogColor, null));
            ret.Add((FogNear, null));
            ret.Add((FogFar, null));
            ret.Add((DirectionalRotationXY, null));
            ret.Add((DirectionalRotationZ, null));
            ret.Add((DirectionalFade, null));
            ret.Add((FogClipDistance, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class CellLightingBinaryTranslation : IBinaryTranslator
    {
        public readonly static CellLightingBinaryTranslation Instance = new CellLightingBinaryTranslation();

        public static void Write_Embedded(
            ICellLightingGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientColor,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalColor,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogColor,
                extraByte: true);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogNear);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogFar);
            writer.Write(item.DirectionalRotationXY);
            writer.Write(item.DirectionalRotationZ);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalFade);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogClipDistance);
        }

        public void Write(
            MutagenWriter writer,
            ICellLightingGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: CellLighting_Registration.XCLL_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ICellLightingGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class CellLightingBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this ICellLightingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CellLightingBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CellLighting_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            this ICellLightingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((CellLightingBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void Write_Binary(
            this ICellLightingGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((CellLightingBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
