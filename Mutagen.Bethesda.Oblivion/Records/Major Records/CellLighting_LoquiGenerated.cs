/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Windows.Media;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Loqui.Internal;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CellLighting : 
        ICellLighting,
        ILoquiObject<CellLighting>,
        ILoquiObjectSetter,
        IEquatable<CellLighting>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellLighting_Registration.Instance;
        public static CellLighting_Registration Registration => CellLighting_Registration.Instance;

        #region Ctor
        public CellLighting()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AmbientColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Color> _AmbientColor = NotifyingItem.Factory<Color>();
        public INotifyingItem<Color> AmbientColor_Property => _AmbientColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color AmbientColor
        {
            get => this._AmbientColor.Item;
            set => this._AmbientColor.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Color> ICellLighting.AmbientColor_Property => this.AmbientColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Color> ICellLightingGetter.AmbientColor_Property => this.AmbientColor_Property;
        #endregion
        #region DirectionalColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Color> _DirectionalColor = NotifyingItem.Factory<Color>();
        public INotifyingItem<Color> DirectionalColor_Property => _DirectionalColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color DirectionalColor
        {
            get => this._DirectionalColor.Item;
            set => this._DirectionalColor.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Color> ICellLighting.DirectionalColor_Property => this.DirectionalColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Color> ICellLightingGetter.DirectionalColor_Property => this.DirectionalColor_Property;
        #endregion
        #region FogColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Color> _FogColor = NotifyingItem.Factory<Color>();
        public INotifyingItem<Color> FogColor_Property => _FogColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color FogColor
        {
            get => this._FogColor.Item;
            set => this._FogColor.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Color> ICellLighting.FogColor_Property => this.FogColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Color> ICellLightingGetter.FogColor_Property => this.FogColor_Property;
        #endregion
        #region FogNear
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _FogNear = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> FogNear_Property => _FogNear;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogNear
        {
            get => this._FogNear.Item;
            set => this._FogNear.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ICellLighting.FogNear_Property => this.FogNear_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ICellLightingGetter.FogNear_Property => this.FogNear_Property;
        #endregion
        #region FogFar
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _FogFar = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> FogFar_Property => _FogFar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogFar
        {
            get => this._FogFar.Item;
            set => this._FogFar.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ICellLighting.FogFar_Property => this.FogFar_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ICellLightingGetter.FogFar_Property => this.FogFar_Property;
        #endregion
        #region DirectionalRotationXY
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Int32> _DirectionalRotationXY = NotifyingItem.Factory<Int32>();
        public INotifyingItem<Int32> DirectionalRotationXY_Property => _DirectionalRotationXY;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 DirectionalRotationXY
        {
            get => this._DirectionalRotationXY.Item;
            set => this._DirectionalRotationXY.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> ICellLighting.DirectionalRotationXY_Property => this.DirectionalRotationXY_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> ICellLightingGetter.DirectionalRotationXY_Property => this.DirectionalRotationXY_Property;
        #endregion
        #region DirectionalRotationZ
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Int32> _DirectionalRotationZ = NotifyingItem.Factory<Int32>();
        public INotifyingItem<Int32> DirectionalRotationZ_Property => _DirectionalRotationZ;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 DirectionalRotationZ
        {
            get => this._DirectionalRotationZ.Item;
            set => this._DirectionalRotationZ.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> ICellLighting.DirectionalRotationZ_Property => this.DirectionalRotationZ_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> ICellLightingGetter.DirectionalRotationZ_Property => this.DirectionalRotationZ_Property;
        #endregion
        #region DirectionalFade
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _DirectionalFade = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> DirectionalFade_Property => _DirectionalFade;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single DirectionalFade
        {
            get => this._DirectionalFade.Item;
            set => this._DirectionalFade.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ICellLighting.DirectionalFade_Property => this.DirectionalFade_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ICellLightingGetter.DirectionalFade_Property => this.DirectionalFade_Property;
        #endregion
        #region FogClipDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _FogClipDistance = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> FogClipDistance_Property => _FogClipDistance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogClipDistance
        {
            get => this._FogClipDistance.Item;
            set => this._FogClipDistance.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ICellLighting.FogClipDistance_Property => this.FogClipDistance_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ICellLightingGetter.FogClipDistance_Property => this.FogClipDistance_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => CellLightingCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => CellLightingCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CellLightingCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CellLightingCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<CellLighting>.GetEqualsMask(CellLighting rhs) => CellLightingCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICellLightingGetter>.GetEqualsMask(ICellLightingGetter rhs) => CellLightingCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return CellLightingCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            return CellLightingCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellLightingCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public CellLighting_Mask<bool> GetHasBeenSetMask()
        {
            return CellLightingCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CellLighting rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellLighting rhs)
        {
            if (rhs == null) return false;
            if (this.AmbientColor != rhs.AmbientColor) return false;
            if (this.DirectionalColor != rhs.DirectionalColor) return false;
            if (this.FogColor != rhs.FogColor) return false;
            if (!this.FogNear.EqualsWithin(rhs.FogNear)) return false;
            if (!this.FogFar.EqualsWithin(rhs.FogFar)) return false;
            if (this.DirectionalRotationXY != rhs.DirectionalRotationXY) return false;
            if (this.DirectionalRotationZ != rhs.DirectionalRotationZ) return false;
            if (!this.DirectionalFade.EqualsWithin(rhs.DirectionalFade)) return false;
            if (!this.FogClipDistance.EqualsWithin(rhs.FogClipDistance)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(AmbientColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogNear).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogFar).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalRotationXY).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalRotationZ).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalFade).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogClipDistance).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static CellLighting Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static CellLighting Create_XML(
            XElement root,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (CellLighting Object, CellLighting_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            CellLighting_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CellLighting_ErrorMask()) : default(Func<CellLighting_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static CellLighting Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static CellLighting Create_XML(
            string path,
            out CellLighting_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static CellLighting Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static CellLighting Create_XML(
            Stream stream,
            out CellLighting_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<CellLighting, CellLighting_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out CellLighting_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<CellLighting, CellLighting_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out CellLighting_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out CellLighting_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as CellLighting_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            CellLightingCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static CellLighting Create_XML_Internal(
            XElement root,
            Func<CellLighting_ErrorMask> errorMask)
        {
            var ret = new CellLighting();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            CellLighting item,
            XElement root,
            string name,
            Func<CellLighting_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "AmbientColor":
                    item._AmbientColor.SetIfSucceededOrDefault(ColorXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.AmbientColor,
                        errorMask: errorMask));
                    break;
                case "DirectionalColor":
                    item._DirectionalColor.SetIfSucceededOrDefault(ColorXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.DirectionalColor,
                        errorMask: errorMask));
                    break;
                case "FogColor":
                    item._FogColor.SetIfSucceededOrDefault(ColorXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.FogColor,
                        errorMask: errorMask));
                    break;
                case "FogNear":
                    item._FogNear.SetIfSucceededOrDefault(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.FogNear,
                        errorMask: errorMask));
                    break;
                case "FogFar":
                    item._FogFar.SetIfSucceededOrDefault(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.FogFar,
                        errorMask: errorMask));
                    break;
                case "DirectionalRotationXY":
                    item._DirectionalRotationXY.SetIfSucceededOrDefault(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationXY,
                        errorMask: errorMask));
                    break;
                case "DirectionalRotationZ":
                    item._DirectionalRotationZ.SetIfSucceededOrDefault(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationZ,
                        errorMask: errorMask));
                    break;
                case "DirectionalFade":
                    item._DirectionalFade.SetIfSucceededOrDefault(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.DirectionalFade,
                        errorMask: errorMask));
                    break;
                case "FogClipDistance":
                    item._FogClipDistance.SetIfSucceededOrDefault(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)CellLighting_FieldIndex.FogClipDistance,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = CellLighting_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static CellLighting Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static CellLighting Create_Binary(
            MutagenFrame frame,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (CellLighting Object, CellLighting_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            CellLighting_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CellLighting_ErrorMask()) : default(Func<CellLighting_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static CellLighting Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static CellLighting Create_Binary(
            string path,
            out CellLighting_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static CellLighting Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static CellLighting Create_Binary(
            Stream stream,
            out CellLighting_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as CellLighting_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out CellLighting_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            CellLightingCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static CellLighting Create_Binary_Internal(
            MutagenFrame frame,
            Func<CellLighting_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new CellLighting();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    CellLighting_Registration.XCLL_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            CellLighting item,
            MutagenFrame frame,
            Func<CellLighting_ErrorMask> errorMask)
        {
            item._AmbientColor.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.AmbientColor,
                errorMask: errorMask,
                extraByte: true));
            item._DirectionalColor.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.DirectionalColor,
                errorMask: errorMask,
                extraByte: true));
            item._FogColor.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.FogColor,
                errorMask: errorMask,
                extraByte: true));
            item._FogNear.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.FogNear,
                errorMask: errorMask));
            item._FogFar.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.FogFar,
                errorMask: errorMask));
            item._DirectionalRotationXY.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationXY,
                errorMask: errorMask));
            item._DirectionalRotationZ.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationZ,
                errorMask: errorMask));
            item._DirectionalFade.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.DirectionalFade,
                errorMask: errorMask));
            item._FogClipDistance.SetIfSucceededOrDefault(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)CellLighting_FieldIndex.FogClipDistance,
                errorMask: errorMask));
        }

        #endregion

        public CellLighting Copy(
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null)
        {
            return CellLighting.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CellLighting Copy(
            ICellLighting item,
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null)
        {
            CellLighting ret;
            if (item.GetType().Equals(typeof(CellLighting)))
            {
                ret = new CellLighting();
            }
            else
            {
                ret = (CellLighting)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CellLighting Copy_ToLoqui(
            ICellLightingGetter item,
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null)
        {
            CellLighting ret;
            if (item.GetType().Equals(typeof(CellLighting)))
            {
                ret = new CellLighting() as CellLighting;
            }
            else
            {
                ret = (CellLighting)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ICellLightingGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICellLightingGetter rhs,
            CellLighting_CopyMask copyMask,
            ICellLightingGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICellLightingGetter rhs,
            out CellLighting_ErrorMask errorMask,
            CellLighting_CopyMask copyMask = null,
            ICellLightingGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            CellLighting_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new CellLighting_ErrorMask();
                }
                return retErrorMask;
            };
            CellLightingCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    this._AmbientColor.Set(
                        (Color)obj,
                        cmds);
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    this._DirectionalColor.Set(
                        (Color)obj,
                        cmds);
                    break;
                case CellLighting_FieldIndex.FogColor:
                    this._FogColor.Set(
                        (Color)obj,
                        cmds);
                    break;
                case CellLighting_FieldIndex.FogNear:
                    this._FogNear.Set(
                        (Single)obj,
                        cmds);
                    break;
                case CellLighting_FieldIndex.FogFar:
                    this._FogFar.Set(
                        (Single)obj,
                        cmds);
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    this._DirectionalRotationXY.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    this._DirectionalRotationZ.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    this._DirectionalFade.Set(
                        (Single)obj,
                        cmds);
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    this._FogClipDistance.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CellLightingCommon.Clear(this, cmds);
        }


        public static CellLighting Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CellLighting();
            foreach (var pair in fields)
            {
                CopyInInternal_CellLighting(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CellLighting(CellLighting obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CellLighting_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    obj._AmbientColor.Set(
                        (Color)pair.Value,
                        null);
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    obj._DirectionalColor.Set(
                        (Color)pair.Value,
                        null);
                    break;
                case CellLighting_FieldIndex.FogColor:
                    obj._FogColor.Set(
                        (Color)pair.Value,
                        null);
                    break;
                case CellLighting_FieldIndex.FogNear:
                    obj._FogNear.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case CellLighting_FieldIndex.FogFar:
                    obj._FogFar.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    obj._DirectionalRotationXY.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    obj._DirectionalRotationZ.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    obj._DirectionalFade.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    obj._FogClipDistance.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, CellLighting obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICellLighting : ICellLightingGetter, ILoquiClass<ICellLighting, ICellLightingGetter>, ILoquiClass<CellLighting, ICellLightingGetter>
    {
        new Color AmbientColor { get; set; }
        new INotifyingItem<Color> AmbientColor_Property { get; }

        new Color DirectionalColor { get; set; }
        new INotifyingItem<Color> DirectionalColor_Property { get; }

        new Color FogColor { get; set; }
        new INotifyingItem<Color> FogColor_Property { get; }

        new Single FogNear { get; set; }
        new INotifyingItem<Single> FogNear_Property { get; }

        new Single FogFar { get; set; }
        new INotifyingItem<Single> FogFar_Property { get; }

        new Int32 DirectionalRotationXY { get; set; }
        new INotifyingItem<Int32> DirectionalRotationXY_Property { get; }

        new Int32 DirectionalRotationZ { get; set; }
        new INotifyingItem<Int32> DirectionalRotationZ_Property { get; }

        new Single DirectionalFade { get; set; }
        new INotifyingItem<Single> DirectionalFade_Property { get; }

        new Single FogClipDistance { get; set; }
        new INotifyingItem<Single> FogClipDistance_Property { get; }

    }

    public partial interface ICellLightingGetter : ILoquiObject
    {
        #region AmbientColor
        Color AmbientColor { get; }
        INotifyingItemGetter<Color> AmbientColor_Property { get; }

        #endregion
        #region DirectionalColor
        Color DirectionalColor { get; }
        INotifyingItemGetter<Color> DirectionalColor_Property { get; }

        #endregion
        #region FogColor
        Color FogColor { get; }
        INotifyingItemGetter<Color> FogColor_Property { get; }

        #endregion
        #region FogNear
        Single FogNear { get; }
        INotifyingItemGetter<Single> FogNear_Property { get; }

        #endregion
        #region FogFar
        Single FogFar { get; }
        INotifyingItemGetter<Single> FogFar_Property { get; }

        #endregion
        #region DirectionalRotationXY
        Int32 DirectionalRotationXY { get; }
        INotifyingItemGetter<Int32> DirectionalRotationXY_Property { get; }

        #endregion
        #region DirectionalRotationZ
        Int32 DirectionalRotationZ { get; }
        INotifyingItemGetter<Int32> DirectionalRotationZ_Property { get; }

        #endregion
        #region DirectionalFade
        Single DirectionalFade { get; }
        INotifyingItemGetter<Single> DirectionalFade_Property { get; }

        #endregion
        #region FogClipDistance
        Single FogClipDistance { get; }
        INotifyingItemGetter<Single> FogClipDistance_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CellLighting_FieldIndex
    {
        AmbientColor = 0,
        DirectionalColor = 1,
        FogColor = 2,
        FogNear = 3,
        FogFar = 4,
        DirectionalRotationXY = 5,
        DirectionalRotationZ = 6,
        DirectionalFade = 7,
        FogClipDistance = 8,
    }
    #endregion

    #region Registration
    public class CellLighting_Registration : ILoquiRegistration
    {
        public static readonly CellLighting_Registration Instance = new CellLighting_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 138,
            version: 0);

        public const string GUID = "31acbf65-e6be-4373-9fb4-d0f1ab97c089";

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(CellLighting_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellLighting_ErrorMask);

        public static readonly Type ClassType = typeof(CellLighting);

        public static readonly Type GetterType = typeof(ICellLightingGetter);

        public static readonly Type SetterType = typeof(ICellLighting);

        public static readonly Type CommonType = typeof(CellLightingCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CellLighting";

        public const string Name = "CellLighting";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "AMBIENTCOLOR":
                    return (ushort)CellLighting_FieldIndex.AmbientColor;
                case "DIRECTIONALCOLOR":
                    return (ushort)CellLighting_FieldIndex.DirectionalColor;
                case "FOGCOLOR":
                    return (ushort)CellLighting_FieldIndex.FogColor;
                case "FOGNEAR":
                    return (ushort)CellLighting_FieldIndex.FogNear;
                case "FOGFAR":
                    return (ushort)CellLighting_FieldIndex.FogFar;
                case "DIRECTIONALROTATIONXY":
                    return (ushort)CellLighting_FieldIndex.DirectionalRotationXY;
                case "DIRECTIONALROTATIONZ":
                    return (ushort)CellLighting_FieldIndex.DirectionalRotationZ;
                case "DIRECTIONALFADE":
                    return (ushort)CellLighting_FieldIndex.DirectionalFade;
                case "FOGCLIPDISTANCE":
                    return (ushort)CellLighting_FieldIndex.FogClipDistance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return "AmbientColor";
                case CellLighting_FieldIndex.DirectionalColor:
                    return "DirectionalColor";
                case CellLighting_FieldIndex.FogColor:
                    return "FogColor";
                case CellLighting_FieldIndex.FogNear:
                    return "FogNear";
                case CellLighting_FieldIndex.FogFar:
                    return "FogFar";
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return "DirectionalRotationXY";
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return "DirectionalRotationZ";
                case CellLighting_FieldIndex.DirectionalFade:
                    return "DirectionalFade";
                case CellLighting_FieldIndex.FogClipDistance:
                    return "FogClipDistance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.DirectionalColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogNear:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogFar:
                    return typeof(Single);
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return typeof(Int32);
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return typeof(Int32);
                case CellLighting_FieldIndex.DirectionalFade:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogClipDistance:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType XCLL_HEADER = new RecordType("XCLL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = XCLL_HEADER;
        public const int NumStructFields = 9;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CellLightingCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICellLighting item,
            ICellLightingGetter rhs,
            ICellLightingGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            CellLighting_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.AmbientColor ?? true)
            {
                try
                {
                    item.AmbientColor_Property.Set(
                        value: rhs.AmbientColor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.AmbientColor, ex);
                }
            }
            if (copyMask?.DirectionalColor ?? true)
            {
                try
                {
                    item.DirectionalColor_Property.Set(
                        value: rhs.DirectionalColor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.DirectionalColor, ex);
                }
            }
            if (copyMask?.FogColor ?? true)
            {
                try
                {
                    item.FogColor_Property.Set(
                        value: rhs.FogColor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.FogColor, ex);
                }
            }
            if (copyMask?.FogNear ?? true)
            {
                try
                {
                    item.FogNear_Property.Set(
                        value: rhs.FogNear,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.FogNear, ex);
                }
            }
            if (copyMask?.FogFar ?? true)
            {
                try
                {
                    item.FogFar_Property.Set(
                        value: rhs.FogFar,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.FogFar, ex);
                }
            }
            if (copyMask?.DirectionalRotationXY ?? true)
            {
                try
                {
                    item.DirectionalRotationXY_Property.Set(
                        value: rhs.DirectionalRotationXY,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.DirectionalRotationXY, ex);
                }
            }
            if (copyMask?.DirectionalRotationZ ?? true)
            {
                try
                {
                    item.DirectionalRotationZ_Property.Set(
                        value: rhs.DirectionalRotationZ,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.DirectionalRotationZ, ex);
                }
            }
            if (copyMask?.DirectionalFade ?? true)
            {
                try
                {
                    item.DirectionalFade_Property.Set(
                        value: rhs.DirectionalFade,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.DirectionalFade, ex);
                }
            }
            if (copyMask?.FogClipDistance ?? true)
            {
                try
                {
                    item.FogClipDistance_Property.Set(
                        value: rhs.FogClipDistance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CellLighting_FieldIndex.FogClipDistance, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICellLighting obj,
            NotifyingFireParameters cmds = null)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICellLighting obj,
            NotifyingUnsetParameters cmds = null)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    obj.AmbientColor = default(Color);
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    obj.DirectionalColor = default(Color);
                    break;
                case CellLighting_FieldIndex.FogColor:
                    obj.FogColor = default(Color);
                    break;
                case CellLighting_FieldIndex.FogNear:
                    obj.FogNear = default(Single);
                    break;
                case CellLighting_FieldIndex.FogFar:
                    obj.FogFar = default(Single);
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    obj.DirectionalRotationXY = default(Int32);
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    obj.DirectionalRotationZ = default(Int32);
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    obj.DirectionalFade = default(Single);
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    obj.FogClipDistance = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICellLighting obj)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ICellLightingGetter obj)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return obj.AmbientColor;
                case CellLighting_FieldIndex.DirectionalColor:
                    return obj.DirectionalColor;
                case CellLighting_FieldIndex.FogColor:
                    return obj.FogColor;
                case CellLighting_FieldIndex.FogNear:
                    return obj.FogNear;
                case CellLighting_FieldIndex.FogFar:
                    return obj.FogFar;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return obj.DirectionalRotationXY;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return obj.DirectionalRotationZ;
                case CellLighting_FieldIndex.DirectionalFade:
                    return obj.DirectionalFade;
                case CellLighting_FieldIndex.FogClipDistance:
                    return obj.FogClipDistance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ICellLighting item,
            NotifyingUnsetParameters cmds = null)
        {
            item.AmbientColor = default(Color);
            item.DirectionalColor = default(Color);
            item.FogColor = default(Color);
            item.FogNear = default(Single);
            item.FogFar = default(Single);
            item.DirectionalRotationXY = default(Int32);
            item.DirectionalRotationZ = default(Int32);
            item.DirectionalFade = default(Single);
            item.FogClipDistance = default(Single);
        }

        public static CellLighting_Mask<bool> GetEqualsMask(
            this ICellLightingGetter item,
            ICellLightingGetter rhs)
        {
            var ret = new CellLighting_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICellLightingGetter item,
            ICellLightingGetter rhs,
            CellLighting_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.AmbientColor = item.AmbientColor == rhs.AmbientColor;
            ret.DirectionalColor = item.DirectionalColor == rhs.DirectionalColor;
            ret.FogColor = item.FogColor == rhs.FogColor;
            ret.FogNear = item.FogNear == rhs.FogNear;
            ret.FogFar = item.FogFar == rhs.FogFar;
            ret.DirectionalRotationXY = item.DirectionalRotationXY == rhs.DirectionalRotationXY;
            ret.DirectionalRotationZ = item.DirectionalRotationZ == rhs.DirectionalRotationZ;
            ret.DirectionalFade = item.DirectionalFade == rhs.DirectionalFade;
            ret.FogClipDistance = item.FogClipDistance == rhs.FogClipDistance;
        }

        public static string ToString(
            this ICellLightingGetter item,
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICellLightingGetter item,
            FileGeneration fg,
            string name = null,
            CellLighting_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CellLighting)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CellLighting)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.AmbientColor ?? true)
                {
                    fg.AppendLine($"AmbientColor => {item.AmbientColor}");
                }
                if (printMask?.DirectionalColor ?? true)
                {
                    fg.AppendLine($"DirectionalColor => {item.DirectionalColor}");
                }
                if (printMask?.FogColor ?? true)
                {
                    fg.AppendLine($"FogColor => {item.FogColor}");
                }
                if (printMask?.FogNear ?? true)
                {
                    fg.AppendLine($"FogNear => {item.FogNear}");
                }
                if (printMask?.FogFar ?? true)
                {
                    fg.AppendLine($"FogFar => {item.FogFar}");
                }
                if (printMask?.DirectionalRotationXY ?? true)
                {
                    fg.AppendLine($"DirectionalRotationXY => {item.DirectionalRotationXY}");
                }
                if (printMask?.DirectionalRotationZ ?? true)
                {
                    fg.AppendLine($"DirectionalRotationZ => {item.DirectionalRotationZ}");
                }
                if (printMask?.DirectionalFade ?? true)
                {
                    fg.AppendLine($"DirectionalFade => {item.DirectionalFade}");
                }
                if (printMask?.FogClipDistance ?? true)
                {
                    fg.AppendLine($"FogClipDistance => {item.FogClipDistance}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICellLightingGetter item,
            CellLighting_Mask<bool?> checkMask)
        {
            return true;
        }

        public static CellLighting_Mask<bool> GetHasBeenSetMask(ICellLightingGetter item)
        {
            var ret = new CellLighting_Mask<bool>();
            ret.AmbientColor = true;
            ret.DirectionalColor = true;
            ret.FogColor = true;
            ret.FogNear = true;
            ret.FogFar = true;
            ret.DirectionalRotationXY = true;
            ret.DirectionalRotationZ = true;
            ret.DirectionalFade = true;
            ret.FogClipDistance = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ICellLightingGetter item,
            bool doMasks,
            out CellLighting_ErrorMask errorMask,
            string name = null)
        {
            CellLighting_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CellLighting_ErrorMask()) : default(Func<CellLighting_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            ICellLightingGetter item,
            Func<CellLighting_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CellLighting");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CellLighting");
                }
                ColorXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.AmbientColor),
                    item: item.AmbientColor_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientColor,
                    errorMask: errorMask);
                ColorXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DirectionalColor),
                    item: item.DirectionalColor_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalColor,
                    errorMask: errorMask);
                ColorXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogColor),
                    item: item.FogColor_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.FogColor,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogNear),
                    item: item.FogNear_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.FogNear,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogFar),
                    item: item.FogFar_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.FogFar,
                    errorMask: errorMask);
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DirectionalRotationXY),
                    item: item.DirectionalRotationXY_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationXY,
                    errorMask: errorMask);
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DirectionalRotationZ),
                    item: item.DirectionalRotationZ_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationZ,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DirectionalFade),
                    item: item.DirectionalFade_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalFade,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FogClipDistance),
                    item: item.FogClipDistance_Property,
                    fieldIndex: (int)CellLighting_FieldIndex.FogClipDistance,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            CellLighting item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out CellLighting_ErrorMask errorMask)
        {
            CellLighting_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CellLighting_ErrorMask()) : default(Func<CellLighting_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            CellLighting item,
            RecordTypeConverter recordTypeConverter,
            Func<CellLighting_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: CellLighting_Registration.XCLL_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            CellLighting item,
            MutagenWriter writer,
            Func<CellLighting_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientColor_Property,
                fieldIndex: (int)CellLighting_FieldIndex.AmbientColor,
                errorMask: errorMask,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalColor_Property,
                fieldIndex: (int)CellLighting_FieldIndex.DirectionalColor,
                errorMask: errorMask,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogColor_Property,
                fieldIndex: (int)CellLighting_FieldIndex.FogColor,
                errorMask: errorMask,
                extraByte: true);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogNear_Property,
                fieldIndex: (int)CellLighting_FieldIndex.FogNear,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogFar_Property,
                fieldIndex: (int)CellLighting_FieldIndex.FogFar,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalRotationXY_Property,
                fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationXY,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalRotationZ_Property,
                fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationZ,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalFade_Property,
                fieldIndex: (int)CellLighting_FieldIndex.DirectionalFade,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogClipDistance_Property,
                fieldIndex: (int)CellLighting_FieldIndex.FogClipDistance,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class CellLighting_Mask<T> : IMask<T>, IEquatable<CellLighting_Mask<T>>
    {
        #region Ctors
        public CellLighting_Mask()
        {
        }

        public CellLighting_Mask(T initialValue)
        {
            this.AmbientColor = initialValue;
            this.DirectionalColor = initialValue;
            this.FogColor = initialValue;
            this.FogNear = initialValue;
            this.FogFar = initialValue;
            this.DirectionalRotationXY = initialValue;
            this.DirectionalRotationZ = initialValue;
            this.DirectionalFade = initialValue;
            this.FogClipDistance = initialValue;
        }
        #endregion

        #region Members
        public T AmbientColor;
        public T DirectionalColor;
        public T FogColor;
        public T FogNear;
        public T FogFar;
        public T DirectionalRotationXY;
        public T DirectionalRotationZ;
        public T DirectionalFade;
        public T FogClipDistance;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CellLighting_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CellLighting_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
            if (!object.Equals(this.DirectionalColor, rhs.DirectionalColor)) return false;
            if (!object.Equals(this.FogColor, rhs.FogColor)) return false;
            if (!object.Equals(this.FogNear, rhs.FogNear)) return false;
            if (!object.Equals(this.FogFar, rhs.FogFar)) return false;
            if (!object.Equals(this.DirectionalRotationXY, rhs.DirectionalRotationXY)) return false;
            if (!object.Equals(this.DirectionalRotationZ, rhs.DirectionalRotationZ)) return false;
            if (!object.Equals(this.DirectionalFade, rhs.DirectionalFade)) return false;
            if (!object.Equals(this.FogClipDistance, rhs.FogClipDistance)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.AmbientColor?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FogColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FogNear?.GetHashCode());
            ret = ret.CombineHashCode(this.FogFar?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalRotationXY?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalRotationZ?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalFade?.GetHashCode());
            ret = ret.CombineHashCode(this.FogClipDistance?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.AmbientColor)) return false;
            if (!eval(this.DirectionalColor)) return false;
            if (!eval(this.FogColor)) return false;
            if (!eval(this.FogNear)) return false;
            if (!eval(this.FogFar)) return false;
            if (!eval(this.DirectionalRotationXY)) return false;
            if (!eval(this.DirectionalRotationZ)) return false;
            if (!eval(this.DirectionalFade)) return false;
            if (!eval(this.FogClipDistance)) return false;
            return true;
        }
        #endregion

        #region Translate
        public CellLighting_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CellLighting_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CellLighting_Mask<R> obj, Func<T, R> eval)
        {
            obj.AmbientColor = eval(this.AmbientColor);
            obj.DirectionalColor = eval(this.DirectionalColor);
            obj.FogColor = eval(this.FogColor);
            obj.FogNear = eval(this.FogNear);
            obj.FogFar = eval(this.FogFar);
            obj.DirectionalRotationXY = eval(this.DirectionalRotationXY);
            obj.DirectionalRotationZ = eval(this.DirectionalRotationZ);
            obj.DirectionalFade = eval(this.DirectionalFade);
            obj.FogClipDistance = eval(this.FogClipDistance);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CellLighting_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CellLighting_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CellLighting_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.AmbientColor ?? true)
                {
                    fg.AppendLine($"AmbientColor => {AmbientColor}");
                }
                if (printMask?.DirectionalColor ?? true)
                {
                    fg.AppendLine($"DirectionalColor => {DirectionalColor}");
                }
                if (printMask?.FogColor ?? true)
                {
                    fg.AppendLine($"FogColor => {FogColor}");
                }
                if (printMask?.FogNear ?? true)
                {
                    fg.AppendLine($"FogNear => {FogNear}");
                }
                if (printMask?.FogFar ?? true)
                {
                    fg.AppendLine($"FogFar => {FogFar}");
                }
                if (printMask?.DirectionalRotationXY ?? true)
                {
                    fg.AppendLine($"DirectionalRotationXY => {DirectionalRotationXY}");
                }
                if (printMask?.DirectionalRotationZ ?? true)
                {
                    fg.AppendLine($"DirectionalRotationZ => {DirectionalRotationZ}");
                }
                if (printMask?.DirectionalFade ?? true)
                {
                    fg.AppendLine($"DirectionalFade => {DirectionalFade}");
                }
                if (printMask?.FogClipDistance ?? true)
                {
                    fg.AppendLine($"FogClipDistance => {FogClipDistance}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CellLighting_ErrorMask : IErrorMask, IErrorMask<CellLighting_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception AmbientColor;
        public Exception DirectionalColor;
        public Exception FogColor;
        public Exception FogNear;
        public Exception FogFar;
        public Exception DirectionalRotationXY;
        public Exception DirectionalRotationZ;
        public Exception DirectionalFade;
        public Exception FogClipDistance;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    return AmbientColor;
                case CellLighting_FieldIndex.DirectionalColor:
                    return DirectionalColor;
                case CellLighting_FieldIndex.FogColor:
                    return FogColor;
                case CellLighting_FieldIndex.FogNear:
                    return FogNear;
                case CellLighting_FieldIndex.FogFar:
                    return FogFar;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return DirectionalRotationXY;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return DirectionalRotationZ;
                case CellLighting_FieldIndex.DirectionalFade:
                    return DirectionalFade;
                case CellLighting_FieldIndex.FogClipDistance:
                    return FogClipDistance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    this.AmbientColor = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    this.DirectionalColor = ex;
                    break;
                case CellLighting_FieldIndex.FogColor:
                    this.FogColor = ex;
                    break;
                case CellLighting_FieldIndex.FogNear:
                    this.FogNear = ex;
                    break;
                case CellLighting_FieldIndex.FogFar:
                    this.FogFar = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = ex;
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    this.DirectionalFade = ex;
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    this.FogClipDistance = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.AmbientColor:
                    this.AmbientColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalColor:
                    this.DirectionalColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogColor:
                    this.FogColor = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogNear:
                    this.FogNear = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogFar:
                    this.FogFar = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.DirectionalFade:
                    this.DirectionalFade = (Exception)obj;
                    break;
                case CellLighting_FieldIndex.FogClipDistance:
                    this.FogClipDistance = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (AmbientColor != null) return true;
            if (DirectionalColor != null) return true;
            if (FogColor != null) return true;
            if (FogNear != null) return true;
            if (FogFar != null) return true;
            if (DirectionalRotationXY != null) return true;
            if (DirectionalRotationZ != null) return true;
            if (DirectionalFade != null) return true;
            if (FogClipDistance != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CellLighting_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"AmbientColor => {AmbientColor}");
            fg.AppendLine($"DirectionalColor => {DirectionalColor}");
            fg.AppendLine($"FogColor => {FogColor}");
            fg.AppendLine($"FogNear => {FogNear}");
            fg.AppendLine($"FogFar => {FogFar}");
            fg.AppendLine($"DirectionalRotationXY => {DirectionalRotationXY}");
            fg.AppendLine($"DirectionalRotationZ => {DirectionalRotationZ}");
            fg.AppendLine($"DirectionalFade => {DirectionalFade}");
            fg.AppendLine($"FogClipDistance => {FogClipDistance}");
        }
        #endregion

        #region Combine
        public CellLighting_ErrorMask Combine(CellLighting_ErrorMask rhs)
        {
            var ret = new CellLighting_ErrorMask();
            ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor);
            ret.DirectionalColor = this.DirectionalColor.Combine(rhs.DirectionalColor);
            ret.FogColor = this.FogColor.Combine(rhs.FogColor);
            ret.FogNear = this.FogNear.Combine(rhs.FogNear);
            ret.FogFar = this.FogFar.Combine(rhs.FogFar);
            ret.DirectionalRotationXY = this.DirectionalRotationXY.Combine(rhs.DirectionalRotationXY);
            ret.DirectionalRotationZ = this.DirectionalRotationZ.Combine(rhs.DirectionalRotationZ);
            ret.DirectionalFade = this.DirectionalFade.Combine(rhs.DirectionalFade);
            ret.FogClipDistance = this.FogClipDistance.Combine(rhs.FogClipDistance);
            return ret;
        }
        public static CellLighting_ErrorMask Combine(CellLighting_ErrorMask lhs, CellLighting_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class CellLighting_CopyMask
    {
        #region Members
        public bool AmbientColor;
        public bool DirectionalColor;
        public bool FogColor;
        public bool FogNear;
        public bool FogFar;
        public bool DirectionalRotationXY;
        public bool DirectionalRotationZ;
        public bool DirectionalFade;
        public bool FogClipDistance;
        #endregion

    }
    #endregion





    #endregion

}
