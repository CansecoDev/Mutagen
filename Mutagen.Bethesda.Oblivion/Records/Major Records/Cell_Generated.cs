/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Cell :
        Place,
        ICellInternal,
        ILoquiObjectSetter<Cell>,
        IEquatable<Cell>,
        IEqualsMask
    {
        #region Ctor
        protected Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.Name => this.Name;
        #endregion
        #region Flags
        public Cell.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Cell.Flag? ICellGetter.Flags => this.Flags;
        #endregion
        #region Grid
        public P2Int? Grid { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P2Int? ICellGetter.Grid => this.Grid;
        #endregion
        #region Lighting
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellLighting? _Lighting;
        public CellLighting? Lighting
        {
            get => _Lighting;
            set => _Lighting = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellLightingGetter? ICellGetter.Lighting => this.Lighting;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IFormLink<Region>>? _Regions;
        public IExtendedList<IFormLink<Region>>? Regions
        {
            get => this._Regions;
            set => this._Regions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IRegionGetter>>? ICellGetter.Regions => _Regions;
        #endregion

        #endregion
        #region MusicType
        public MusicType? MusicType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MusicType? ICellGetter.MusicType => this.MusicType;
        #endregion
        #region WaterHeight
        public Single? WaterHeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICellGetter.WaterHeight => this.WaterHeight;
        #endregion
        #region Climate
        public FormLinkNullable<Climate> Climate { get; set; } = new FormLinkNullable<Climate>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IClimateGetter> ICellGetter.Climate => this.Climate;
        #endregion
        #region Water
        public FormLinkNullable<Water> Water { get; set; } = new FormLinkNullable<Water>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IWaterGetter> ICellGetter.Water => this.Water;
        #endregion
        #region Owner
        public FormLinkNullable<Faction> Owner { get; set; } = new FormLinkNullable<Faction>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IFactionGetter> ICellGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        public Int32? FactionRank { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ICellGetter.FactionRank => this.FactionRank;
        #endregion
        #region GlobalVariable
        public FormLinkNullable<Global> GlobalVariable { get; set; } = new FormLinkNullable<Global>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IGlobalGetter> ICellGetter.GlobalVariable => this.GlobalVariable;
        #endregion
        #region PathGrid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PathGrid? _PathGrid;
        public PathGrid? PathGrid
        {
            get => _PathGrid;
            set => _PathGrid = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPathGridGetter? ICellGetter.PathGrid => this.PathGrid;
        #endregion
        #region Landscape
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Landscape? _Landscape;
        public Landscape? Landscape
        {
            get => _Landscape;
            set => _Landscape = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILandscapeGetter? ICellGetter.Landscape => this.Landscape;
        #endregion
        #region Timestamp
        public Int32 Timestamp { get; set; } = default;
        #endregion
        #region PersistentTimestamp
        public Int32 PersistentTimestamp { get; set; } = default;
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IPlaced> _Persistent = new ExtendedList<IPlaced>();
        public IExtendedList<IPlaced> Persistent
        {
            get => this._Persistent;
            protected set => this._Persistent = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region TemporaryTimestamp
        public Int32 TemporaryTimestamp { get; set; } = default;
        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IPlaced> _Temporary = new ExtendedList<IPlaced>();
        public IExtendedList<IPlaced> Temporary
        {
            get => this._Temporary;
            protected set => this._Temporary = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion
        #region VisibleWhenDistantTimestamp
        public Int32 VisibleWhenDistantTimestamp { get; set; } = default;
        #endregion
        #region VisibleWhenDistant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IPlaced> _VisibleWhenDistant = new ExtendedList<IPlaced>();
        public IExtendedList<IPlaced> VisibleWhenDistant
        {
            get => this._VisibleWhenDistant;
            protected set => this._VisibleWhenDistant = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.VisibleWhenDistant => _VisibleWhenDistant;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICellGetter rhs)) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Cell? obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CellXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CellXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Cell CreateFromXml(
            XElement node,
            Cell.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Cell CreateFromXml(
            XElement node,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Cell CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Cell();
            ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Cell CreateFromXml(
            string path,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            string path,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Cell CreateFromXml(
            Stream stream,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            Stream stream,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Cell CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Place.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Grid = initialValue;
                this.Lighting = new MaskItem<TItem, CellLighting.Mask<TItem>?>(initialValue, new CellLighting.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MusicType = initialValue;
                this.WaterHeight = initialValue;
                this.Climate = initialValue;
                this.Water = initialValue;
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.GlobalVariable = initialValue;
                this.PathGrid = new MaskItem<TItem, PathGrid.Mask<TItem>?>(initialValue, new PathGrid.Mask<TItem>(initialValue));
                this.Landscape = new MaskItem<TItem, Landscape.Mask<TItem>?>(initialValue, new Landscape.Mask<TItem>(initialValue));
                this.Timestamp = initialValue;
                this.PersistentTimestamp = initialValue;
                this.Persistent = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.TemporaryTimestamp = initialValue;
                this.Temporary = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.VisibleWhenDistantTimestamp = initialValue;
                this.VisibleWhenDistant = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Flags,
                TItem Grid,
                TItem Lighting,
                TItem Regions,
                TItem MusicType,
                TItem WaterHeight,
                TItem Climate,
                TItem Water,
                TItem Owner,
                TItem FactionRank,
                TItem GlobalVariable,
                TItem PathGrid,
                TItem Landscape,
                TItem Timestamp,
                TItem PersistentTimestamp,
                TItem Persistent,
                TItem TemporaryTimestamp,
                TItem Temporary,
                TItem VisibleWhenDistantTimestamp,
                TItem VisibleWhenDistant)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Flags = Flags;
                this.Grid = Grid;
                this.Lighting = new MaskItem<TItem, CellLighting.Mask<TItem>?>(Lighting, new CellLighting.Mask<TItem>(Lighting));
                this.Regions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Regions, Enumerable.Empty<(int Index, TItem Value)>());
                this.MusicType = MusicType;
                this.WaterHeight = WaterHeight;
                this.Climate = Climate;
                this.Water = Water;
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.GlobalVariable = GlobalVariable;
                this.PathGrid = new MaskItem<TItem, PathGrid.Mask<TItem>?>(PathGrid, new PathGrid.Mask<TItem>(PathGrid));
                this.Landscape = new MaskItem<TItem, Landscape.Mask<TItem>?>(Landscape, new Landscape.Mask<TItem>(Landscape));
                this.Timestamp = Timestamp;
                this.PersistentTimestamp = PersistentTimestamp;
                this.Persistent = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(Persistent, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.TemporaryTimestamp = TemporaryTimestamp;
                this.Temporary = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(Temporary, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.VisibleWhenDistantTimestamp = VisibleWhenDistantTimestamp;
                this.VisibleWhenDistant = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(VisibleWhenDistant, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Flags;
            public TItem Grid;
            public MaskItem<TItem, CellLighting.Mask<TItem>?>? Lighting { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Regions;
            public TItem MusicType;
            public TItem WaterHeight;
            public TItem Climate;
            public TItem Water;
            public TItem Owner;
            public TItem FactionRank;
            public TItem GlobalVariable;
            public MaskItem<TItem, PathGrid.Mask<TItem>?>? PathGrid { get; set; }
            public MaskItem<TItem, Landscape.Mask<TItem>?>? Landscape { get; set; }
            public TItem Timestamp;
            public TItem PersistentTimestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? Persistent;
            public TItem TemporaryTimestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? Temporary;
            public TItem VisibleWhenDistantTimestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? VisibleWhenDistant;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Grid, rhs.Grid)) return false;
                if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
                if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
                if (!object.Equals(this.Climate, rhs.Climate)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
                if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
                if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.PersistentTimestamp, rhs.PersistentTimestamp)) return false;
                if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
                if (!object.Equals(this.TemporaryTimestamp, rhs.TemporaryTimestamp)) return false;
                if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
                if (!object.Equals(this.VisibleWhenDistantTimestamp, rhs.VisibleWhenDistantTimestamp)) return false;
                if (!object.Equals(this.VisibleWhenDistant, rhs.VisibleWhenDistant)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Grid);
                hash.Add(this.Lighting);
                hash.Add(this.Regions);
                hash.Add(this.MusicType);
                hash.Add(this.WaterHeight);
                hash.Add(this.Climate);
                hash.Add(this.Water);
                hash.Add(this.Owner);
                hash.Add(this.FactionRank);
                hash.Add(this.GlobalVariable);
                hash.Add(this.PathGrid);
                hash.Add(this.Landscape);
                hash.Add(this.Timestamp);
                hash.Add(this.PersistentTimestamp);
                hash.Add(this.Persistent);
                hash.Add(this.TemporaryTimestamp);
                hash.Add(this.Temporary);
                hash.Add(this.VisibleWhenDistantTimestamp);
                hash.Add(this.VisibleWhenDistant);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Grid)) return false;
                if (Lighting != null)
                {
                    if (!eval(this.Lighting.Overall)) return false;
                    if (this.Lighting.Specific != null && !this.Lighting.Specific.All(eval)) return false;
                }
                if (this.Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null)
                    {
                        foreach (var item in this.Regions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MusicType)) return false;
                if (!eval(this.WaterHeight)) return false;
                if (!eval(this.Climate)) return false;
                if (!eval(this.Water)) return false;
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.GlobalVariable)) return false;
                if (PathGrid != null)
                {
                    if (!eval(this.PathGrid.Overall)) return false;
                    if (this.PathGrid.Specific != null && !this.PathGrid.Specific.All(eval)) return false;
                }
                if (Landscape != null)
                {
                    if (!eval(this.Landscape.Overall)) return false;
                    if (this.Landscape.Specific != null && !this.Landscape.Specific.All(eval)) return false;
                }
                if (!eval(this.Timestamp)) return false;
                if (!eval(this.PersistentTimestamp)) return false;
                if (this.Persistent != null)
                {
                    if (!eval(this.Persistent.Overall)) return false;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (!eval(this.TemporaryTimestamp)) return false;
                if (this.Temporary != null)
                {
                    if (!eval(this.Temporary.Overall)) return false;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (!eval(this.VisibleWhenDistantTimestamp)) return false;
                if (this.VisibleWhenDistant != null)
                {
                    if (!eval(this.VisibleWhenDistant.Overall)) return false;
                    if (this.VisibleWhenDistant.Specific != null)
                    {
                        foreach (var item in this.VisibleWhenDistant.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Grid)) return true;
                if (Lighting != null)
                {
                    if (eval(this.Lighting.Overall)) return true;
                    if (this.Lighting.Specific != null && this.Lighting.Specific.Any(eval)) return true;
                }
                if (this.Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null)
                    {
                        foreach (var item in this.Regions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.MusicType)) return true;
                if (eval(this.WaterHeight)) return true;
                if (eval(this.Climate)) return true;
                if (eval(this.Water)) return true;
                if (eval(this.Owner)) return true;
                if (eval(this.FactionRank)) return true;
                if (eval(this.GlobalVariable)) return true;
                if (PathGrid != null)
                {
                    if (eval(this.PathGrid.Overall)) return true;
                    if (this.PathGrid.Specific != null && this.PathGrid.Specific.Any(eval)) return true;
                }
                if (Landscape != null)
                {
                    if (eval(this.Landscape.Overall)) return true;
                    if (this.Landscape.Specific != null && this.Landscape.Specific.Any(eval)) return true;
                }
                if (eval(this.Timestamp)) return true;
                if (eval(this.PersistentTimestamp)) return true;
                if (this.Persistent != null)
                {
                    if (eval(this.Persistent.Overall)) return true;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (eval(this.TemporaryTimestamp)) return true;
                if (this.Temporary != null)
                {
                    if (eval(this.Temporary.Overall)) return true;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (eval(this.VisibleWhenDistantTimestamp)) return true;
                if (this.VisibleWhenDistant != null)
                {
                    if (eval(this.VisibleWhenDistant.Overall)) return true;
                    if (this.VisibleWhenDistant.Specific != null)
                    {
                        foreach (var item in this.VisibleWhenDistant.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Cell.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Grid = eval(this.Grid);
                obj.Lighting = this.Lighting == null ? null : new MaskItem<R, CellLighting.Mask<R>?>(eval(this.Lighting.Overall), this.Lighting.Specific?.Translate(eval));
                if (Regions != null)
                {
                    obj.Regions = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Regions.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Regions.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Regions.Specific = l;
                        foreach (var item in Regions.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MusicType = eval(this.MusicType);
                obj.WaterHeight = eval(this.WaterHeight);
                obj.Climate = eval(this.Climate);
                obj.Water = eval(this.Water);
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.GlobalVariable = eval(this.GlobalVariable);
                obj.PathGrid = this.PathGrid == null ? null : new MaskItem<R, PathGrid.Mask<R>?>(eval(this.PathGrid.Overall), this.PathGrid.Specific?.Translate(eval));
                obj.Landscape = this.Landscape == null ? null : new MaskItem<R, Landscape.Mask<R>?>(eval(this.Landscape.Overall), this.Landscape.Specific?.Translate(eval));
                obj.Timestamp = eval(this.Timestamp);
                obj.PersistentTimestamp = eval(this.PersistentTimestamp);
                if (Persistent != null)
                {
                    obj.Persistent = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.Persistent.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Persistent.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Persistent.Specific = l;
                        foreach (var item in Persistent.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TemporaryTimestamp = eval(this.TemporaryTimestamp);
                if (Temporary != null)
                {
                    obj.Temporary = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.Temporary.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Temporary.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Temporary.Specific = l;
                        foreach (var item in Temporary.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.VisibleWhenDistantTimestamp = eval(this.VisibleWhenDistantTimestamp);
                if (VisibleWhenDistant != null)
                {
                    obj.VisibleWhenDistant = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.VisibleWhenDistant.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (VisibleWhenDistant.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.VisibleWhenDistant.Specific = l;
                        foreach (var item in VisibleWhenDistant.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Cell.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Cell.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Cell.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Grid ?? true)
                    {
                        fg.AppendItem(Grid, "Grid");
                    }
                    if (printMask?.Lighting?.Overall ?? true)
                    {
                        Lighting?.ToString(fg);
                    }
                    if ((printMask?.Regions?.Overall ?? true)
                        && Regions.TryGet(out var RegionsItem))
                    {
                        fg.AppendLine("Regions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RegionsItem.Overall);
                            if (RegionsItem.Specific != null)
                            {
                                foreach (var subItem in RegionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MusicType ?? true)
                    {
                        fg.AppendItem(MusicType, "MusicType");
                    }
                    if (printMask?.WaterHeight ?? true)
                    {
                        fg.AppendItem(WaterHeight, "WaterHeight");
                    }
                    if (printMask?.Climate ?? true)
                    {
                        fg.AppendItem(Climate, "Climate");
                    }
                    if (printMask?.Water ?? true)
                    {
                        fg.AppendItem(Water, "Water");
                    }
                    if (printMask?.Owner ?? true)
                    {
                        fg.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        fg.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.GlobalVariable ?? true)
                    {
                        fg.AppendItem(GlobalVariable, "GlobalVariable");
                    }
                    if (printMask?.PathGrid?.Overall ?? true)
                    {
                        PathGrid?.ToString(fg);
                    }
                    if (printMask?.Landscape?.Overall ?? true)
                    {
                        Landscape?.ToString(fg);
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        fg.AppendItem(Timestamp, "Timestamp");
                    }
                    if (printMask?.PersistentTimestamp ?? true)
                    {
                        fg.AppendItem(PersistentTimestamp, "PersistentTimestamp");
                    }
                    if ((printMask?.Persistent?.Overall ?? true)
                        && Persistent.TryGet(out var PersistentItem))
                    {
                        fg.AppendLine("Persistent =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PersistentItem.Overall);
                            if (PersistentItem.Specific != null)
                            {
                                foreach (var subItem in PersistentItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.TemporaryTimestamp ?? true)
                    {
                        fg.AppendItem(TemporaryTimestamp, "TemporaryTimestamp");
                    }
                    if ((printMask?.Temporary?.Overall ?? true)
                        && Temporary.TryGet(out var TemporaryItem))
                    {
                        fg.AppendLine("Temporary =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TemporaryItem.Overall);
                            if (TemporaryItem.Specific != null)
                            {
                                foreach (var subItem in TemporaryItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.VisibleWhenDistantTimestamp ?? true)
                    {
                        fg.AppendItem(VisibleWhenDistantTimestamp, "VisibleWhenDistantTimestamp");
                    }
                    if ((printMask?.VisibleWhenDistant?.Overall ?? true)
                        && VisibleWhenDistant.TryGet(out var VisibleWhenDistantItem))
                    {
                        fg.AppendLine("VisibleWhenDistant =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(VisibleWhenDistantItem.Overall);
                            if (VisibleWhenDistantItem.Specific != null)
                            {
                                foreach (var subItem in VisibleWhenDistantItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Place.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Flags;
            public Exception? Grid;
            public MaskItem<Exception?, CellLighting.ErrorMask?>? Lighting;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Regions;
            public Exception? MusicType;
            public Exception? WaterHeight;
            public Exception? Climate;
            public Exception? Water;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? GlobalVariable;
            public MaskItem<Exception?, PathGrid.ErrorMask?>? PathGrid;
            public MaskItem<Exception?, Landscape.ErrorMask?>? Landscape;
            public Exception? Timestamp;
            public Exception? PersistentTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Persistent;
            public Exception? TemporaryTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Temporary;
            public Exception? VisibleWhenDistantTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? VisibleWhenDistant;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        return Name;
                    case Cell_FieldIndex.Flags:
                        return Flags;
                    case Cell_FieldIndex.Grid:
                        return Grid;
                    case Cell_FieldIndex.Lighting:
                        return Lighting;
                    case Cell_FieldIndex.Regions:
                        return Regions;
                    case Cell_FieldIndex.MusicType:
                        return MusicType;
                    case Cell_FieldIndex.WaterHeight:
                        return WaterHeight;
                    case Cell_FieldIndex.Climate:
                        return Climate;
                    case Cell_FieldIndex.Water:
                        return Water;
                    case Cell_FieldIndex.Owner:
                        return Owner;
                    case Cell_FieldIndex.FactionRank:
                        return FactionRank;
                    case Cell_FieldIndex.GlobalVariable:
                        return GlobalVariable;
                    case Cell_FieldIndex.PathGrid:
                        return PathGrid;
                    case Cell_FieldIndex.Landscape:
                        return Landscape;
                    case Cell_FieldIndex.Timestamp:
                        return Timestamp;
                    case Cell_FieldIndex.PersistentTimestamp:
                        return PersistentTimestamp;
                    case Cell_FieldIndex.Persistent:
                        return Persistent;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        return TemporaryTimestamp;
                    case Cell_FieldIndex.Temporary:
                        return Temporary;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        return VisibleWhenDistantTimestamp;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        return VisibleWhenDistant;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = ex;
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = new MaskItem<Exception?, CellLighting.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Cell_FieldIndex.MusicType:
                        this.MusicType = ex;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = ex;
                        break;
                    case Cell_FieldIndex.Climate:
                        this.Climate = ex;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case Cell_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case Cell_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case Cell_FieldIndex.GlobalVariable:
                        this.GlobalVariable = ex;
                        break;
                    case Cell_FieldIndex.PathGrid:
                        this.PathGrid = new MaskItem<Exception?, PathGrid.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Landscape:
                        this.Landscape = new MaskItem<Exception?, Landscape.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = ex;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = ex;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        this.VisibleWhenDistantTimestamp = ex;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        this.VisibleWhenDistant = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = (MaskItem<Exception?, CellLighting.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Cell_FieldIndex.MusicType:
                        this.MusicType = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Climate:
                        this.Climate = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.GlobalVariable:
                        this.GlobalVariable = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.PathGrid:
                        this.PathGrid = (MaskItem<Exception?, PathGrid.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Landscape:
                        this.Landscape = (MaskItem<Exception?, Landscape.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        this.VisibleWhenDistantTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        this.VisibleWhenDistant = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Grid != null) return true;
                if (Lighting != null) return true;
                if (Regions != null) return true;
                if (MusicType != null) return true;
                if (WaterHeight != null) return true;
                if (Climate != null) return true;
                if (Water != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (GlobalVariable != null) return true;
                if (PathGrid != null) return true;
                if (Landscape != null) return true;
                if (Timestamp != null) return true;
                if (PersistentTimestamp != null) return true;
                if (Persistent != null) return true;
                if (TemporaryTimestamp != null) return true;
                if (Temporary != null) return true;
                if (VisibleWhenDistantTimestamp != null) return true;
                if (VisibleWhenDistant != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Grid, "Grid");
                Lighting?.ToString(fg);
                if (Regions.TryGet(out var RegionsItem))
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RegionsItem.Overall);
                        if (RegionsItem.Specific != null)
                        {
                            foreach (var subItem in RegionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(MusicType, "MusicType");
                fg.AppendItem(WaterHeight, "WaterHeight");
                fg.AppendItem(Climate, "Climate");
                fg.AppendItem(Water, "Water");
                fg.AppendItem(Owner, "Owner");
                fg.AppendItem(FactionRank, "FactionRank");
                fg.AppendItem(GlobalVariable, "GlobalVariable");
                PathGrid?.ToString(fg);
                Landscape?.ToString(fg);
                fg.AppendItem(Timestamp, "Timestamp");
                fg.AppendItem(PersistentTimestamp, "PersistentTimestamp");
                if (Persistent.TryGet(out var PersistentItem))
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PersistentItem.Overall);
                        if (PersistentItem.Specific != null)
                        {
                            foreach (var subItem in PersistentItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(TemporaryTimestamp, "TemporaryTimestamp");
                if (Temporary.TryGet(out var TemporaryItem))
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TemporaryItem.Overall);
                        if (TemporaryItem.Specific != null)
                        {
                            foreach (var subItem in TemporaryItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(VisibleWhenDistantTimestamp, "VisibleWhenDistantTimestamp");
                if (VisibleWhenDistant.TryGet(out var VisibleWhenDistantItem))
                {
                    fg.AppendLine("VisibleWhenDistant =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(VisibleWhenDistantItem.Overall);
                        if (VisibleWhenDistantItem.Specific != null)
                        {
                            foreach (var subItem in VisibleWhenDistantItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Grid = this.Grid.Combine(rhs.Grid);
                ret.Lighting = this.Lighting.Combine(rhs.Lighting, (l, r) => l.Combine(r));
                ret.Regions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Regions?.Overall, rhs.Regions?.Overall), ExceptionExt.Combine(this.Regions?.Specific, rhs.Regions?.Specific));
                ret.MusicType = this.MusicType.Combine(rhs.MusicType);
                ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
                ret.Climate = this.Climate.Combine(rhs.Climate);
                ret.Water = this.Water.Combine(rhs.Water);
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
                ret.PathGrid = this.PathGrid.Combine(rhs.PathGrid, (l, r) => l.Combine(r));
                ret.Landscape = this.Landscape.Combine(rhs.Landscape, (l, r) => l.Combine(r));
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.PersistentTimestamp = this.PersistentTimestamp.Combine(rhs.PersistentTimestamp);
                ret.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ExceptionExt.Combine(this.Persistent?.Overall, rhs.Persistent?.Overall), ExceptionExt.Combine(this.Persistent?.Specific, rhs.Persistent?.Specific));
                ret.TemporaryTimestamp = this.TemporaryTimestamp.Combine(rhs.TemporaryTimestamp);
                ret.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ExceptionExt.Combine(this.Temporary?.Overall, rhs.Temporary?.Overall), ExceptionExt.Combine(this.Temporary?.Specific, rhs.Temporary?.Specific));
                ret.VisibleWhenDistantTimestamp = this.VisibleWhenDistantTimestamp.Combine(rhs.VisibleWhenDistantTimestamp);
                ret.VisibleWhenDistant = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ExceptionExt.Combine(this.VisibleWhenDistant?.Overall, rhs.VisibleWhenDistant?.Overall), ExceptionExt.Combine(this.VisibleWhenDistant?.Specific, rhs.VisibleWhenDistant?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Place.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Flags;
            public bool Grid;
            public MaskItem<bool, CellLighting.TranslationMask?> Lighting;
            public bool Regions;
            public bool MusicType;
            public bool WaterHeight;
            public bool Climate;
            public bool Water;
            public bool Owner;
            public bool FactionRank;
            public bool GlobalVariable;
            public MaskItem<bool, PathGrid.TranslationMask?> PathGrid;
            public MaskItem<bool, Landscape.TranslationMask?> Landscape;
            public bool Timestamp;
            public bool PersistentTimestamp;
            public bool Persistent;
            public bool TemporaryTimestamp;
            public bool Temporary;
            public bool VisibleWhenDistantTimestamp;
            public bool VisibleWhenDistant;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Grid = defaultOn;
                this.Lighting = new MaskItem<bool, CellLighting.TranslationMask?>(defaultOn, null);
                this.Regions = defaultOn;
                this.MusicType = defaultOn;
                this.WaterHeight = defaultOn;
                this.Climate = defaultOn;
                this.Water = defaultOn;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.GlobalVariable = defaultOn;
                this.PathGrid = new MaskItem<bool, PathGrid.TranslationMask?>(defaultOn, null);
                this.Landscape = new MaskItem<bool, Landscape.TranslationMask?>(defaultOn, null);
                this.Timestamp = defaultOn;
                this.PersistentTimestamp = defaultOn;
                this.Persistent = defaultOn;
                this.TemporaryTimestamp = defaultOn;
                this.Temporary = defaultOn;
                this.VisibleWhenDistantTimestamp = defaultOn;
                this.VisibleWhenDistant = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Grid, null));
                ret.Add((Lighting?.Overall ?? true, Lighting?.Specific?.GetCrystal()));
                ret.Add((Regions, null));
                ret.Add((MusicType, null));
                ret.Add((WaterHeight, null));
                ret.Add((Climate, null));
                ret.Add((Water, null));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((GlobalVariable, null));
                ret.Add((PathGrid?.Overall ?? true, PathGrid?.Specific?.GetCrystal()));
                ret.Add((Landscape?.Overall ?? true, Landscape?.Specific?.GetCrystal()));
                ret.Add((Timestamp, null));
                ret.Add((PersistentTimestamp, null));
                ret.Add((Persistent, null));
                ret.Add((TemporaryTimestamp, null));
                ret.Add((Temporary, null));
                ret.Add((VisibleWhenDistantTimestamp, null));
                ret.Add((VisibleWhenDistant, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Cell_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => CellCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => CellCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellCommon.Instance.RemapLinks(this, mapping);
        public Cell(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Cell(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Cell(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type, throwIfUnknown);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Cell CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Cell CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Cell();
            ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Cell item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CellSetterCommon)((ICellGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Cell GetNew()
        {
            return new Cell();
        }

    }
    #endregion

    #region Interface
    public partial interface ICell :
        ICellGetter,
        IPlace,
        INamed,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<ICellInternal>
    {
        new String? Name { get; set; }
        new Cell.Flag? Flags { get; set; }
        new P2Int? Grid { get; set; }
        new CellLighting? Lighting { get; set; }
        new IExtendedList<IFormLink<Region>>? Regions { get; set; }
        new MusicType? MusicType { get; set; }
        new Single? WaterHeight { get; set; }
        new FormLinkNullable<Climate> Climate { get; set; }
        new FormLinkNullable<Water> Water { get; set; }
        new FormLinkNullable<Faction> Owner { get; set; }
        new Int32? FactionRank { get; set; }
        new FormLinkNullable<Global> GlobalVariable { get; set; }
        new PathGrid? PathGrid { get; set; }
        new Landscape? Landscape { get; set; }
        new Int32 Timestamp { get; set; }
        new Int32 PersistentTimestamp { get; set; }
        new IExtendedList<IPlaced> Persistent { get; }
        new Int32 TemporaryTimestamp { get; set; }
        new IExtendedList<IPlaced> Temporary { get; }
        new Int32 VisibleWhenDistantTimestamp { get; set; }
        new IExtendedList<IPlaced> VisibleWhenDistant { get; }
    }

    public partial interface ICellInternal :
        IPlaceInternal,
        ICell,
        ICellGetter
    {
    }

    public partial interface ICellGetter :
        IPlaceGetter,
        INamedGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<ICellGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Cell_Registration.Instance;
        String? Name { get; }
        Cell.Flag? Flags { get; }
        P2Int? Grid { get; }
        ICellLightingGetter? Lighting { get; }
        IReadOnlyList<IFormLink<IRegionGetter>>? Regions { get; }
        MusicType? MusicType { get; }
        Single? WaterHeight { get; }
        IFormLinkNullable<IClimateGetter> Climate { get; }
        IFormLinkNullable<IWaterGetter> Water { get; }
        IFormLinkNullable<IFactionGetter> Owner { get; }
        Int32? FactionRank { get; }
        IFormLinkNullable<IGlobalGetter> GlobalVariable { get; }
        IPathGridGetter? PathGrid { get; }
        ILandscapeGetter? Landscape { get; }
        Int32 Timestamp { get; }
        Int32 PersistentTimestamp { get; }
        IReadOnlyList<IPlacedGetter> Persistent { get; }
        Int32 TemporaryTimestamp { get; }
        IReadOnlyList<IPlacedGetter> Temporary { get; }
        Int32 VisibleWhenDistantTimestamp { get; }
        IReadOnlyList<IPlacedGetter> VisibleWhenDistant { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CellMixIn
    {
        public static void Clear(this ICellInternal item)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Cell.Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellGetter item,
            FileGeneration fg,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            ((CellCommon)((ICellGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICellGetter item,
            Cell.Mask<bool?> checkMask)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Cell.Mask<bool> GetHasBeenSetMask(this ICellGetter item)
        {
            var ret = new Cell.Mask<bool>(false);
            ((CellCommon)((ICellGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICellGetter item,
            ICellGetter rhs)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            Cell.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Cell.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this ICellGetter obj)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ICellGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            this ICellGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommonGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this ICellInternal obj)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ICellInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(
            this ICellInternal obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommon)m);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Cell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Flags = 6,
        Grid = 7,
        Lighting = 8,
        Regions = 9,
        MusicType = 10,
        WaterHeight = 11,
        Climate = 12,
        Water = 13,
        Owner = 14,
        FactionRank = 15,
        GlobalVariable = 16,
        PathGrid = 17,
        Landscape = 18,
        Timestamp = 19,
        PersistentTimestamp = 20,
        Persistent = 21,
        TemporaryTimestamp = 22,
        Temporary = 23,
        VisibleWhenDistantTimestamp = 24,
        VisibleWhenDistant = 25,
    }
    #endregion

    #region Registration
    public partial class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 120,
            version: 0);

        public const string GUID = "d54abb07-d896-4ddb-b857-9b9df945dd1e";

        public const ushort AdditionalFieldCount = 21;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(Cell.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell.ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type? InternalSetterType = typeof(ICellInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Cell_FieldIndex.Name;
                case "FLAGS":
                    return (ushort)Cell_FieldIndex.Flags;
                case "GRID":
                    return (ushort)Cell_FieldIndex.Grid;
                case "LIGHTING":
                    return (ushort)Cell_FieldIndex.Lighting;
                case "REGIONS":
                    return (ushort)Cell_FieldIndex.Regions;
                case "MUSICTYPE":
                    return (ushort)Cell_FieldIndex.MusicType;
                case "WATERHEIGHT":
                    return (ushort)Cell_FieldIndex.WaterHeight;
                case "CLIMATE":
                    return (ushort)Cell_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Cell_FieldIndex.Water;
                case "OWNER":
                    return (ushort)Cell_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)Cell_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)Cell_FieldIndex.GlobalVariable;
                case "PATHGRID":
                    return (ushort)Cell_FieldIndex.PathGrid;
                case "LANDSCAPE":
                    return (ushort)Cell_FieldIndex.Landscape;
                case "TIMESTAMP":
                    return (ushort)Cell_FieldIndex.Timestamp;
                case "PERSISTENTTIMESTAMP":
                    return (ushort)Cell_FieldIndex.PersistentTimestamp;
                case "PERSISTENT":
                    return (ushort)Cell_FieldIndex.Persistent;
                case "TEMPORARYTIMESTAMP":
                    return (ushort)Cell_FieldIndex.TemporaryTimestamp;
                case "TEMPORARY":
                    return (ushort)Cell_FieldIndex.Temporary;
                case "VISIBLEWHENDISTANTTIMESTAMP":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistantTimestamp;
                case "VISIBLEWHENDISTANT":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistant;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return false;
                default:
                    return Place_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return false;
                default:
                    return Place_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return "Name";
                case Cell_FieldIndex.Flags:
                    return "Flags";
                case Cell_FieldIndex.Grid:
                    return "Grid";
                case Cell_FieldIndex.Lighting:
                    return "Lighting";
                case Cell_FieldIndex.Regions:
                    return "Regions";
                case Cell_FieldIndex.MusicType:
                    return "MusicType";
                case Cell_FieldIndex.WaterHeight:
                    return "WaterHeight";
                case Cell_FieldIndex.Climate:
                    return "Climate";
                case Cell_FieldIndex.Water:
                    return "Water";
                case Cell_FieldIndex.Owner:
                    return "Owner";
                case Cell_FieldIndex.FactionRank:
                    return "FactionRank";
                case Cell_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case Cell_FieldIndex.PathGrid:
                    return "PathGrid";
                case Cell_FieldIndex.Landscape:
                    return "Landscape";
                case Cell_FieldIndex.Timestamp:
                    return "Timestamp";
                case Cell_FieldIndex.PersistentTimestamp:
                    return "PersistentTimestamp";
                case Cell_FieldIndex.Persistent:
                    return "Persistent";
                case Cell_FieldIndex.TemporaryTimestamp:
                    return "TemporaryTimestamp";
                case Cell_FieldIndex.Temporary:
                    return "Temporary";
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return "VisibleWhenDistantTimestamp";
                case Cell_FieldIndex.VisibleWhenDistant:
                    return "VisibleWhenDistant";
                default:
                    return Place_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Timestamp:
                case Cell_FieldIndex.PersistentTimestamp:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.TemporaryTimestamp:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return typeof(String);
                case Cell_FieldIndex.Flags:
                    return typeof(Cell.Flag);
                case Cell_FieldIndex.Grid:
                    return typeof(P2Int);
                case Cell_FieldIndex.Lighting:
                    return typeof(CellLighting);
                case Cell_FieldIndex.Regions:
                    return typeof(IExtendedList<IFormLink<Region>>);
                case Cell_FieldIndex.MusicType:
                    return typeof(MusicType);
                case Cell_FieldIndex.WaterHeight:
                    return typeof(Single);
                case Cell_FieldIndex.Climate:
                    return typeof(FormLinkNullable<Climate>);
                case Cell_FieldIndex.Water:
                    return typeof(FormLinkNullable<Water>);
                case Cell_FieldIndex.Owner:
                    return typeof(FormLinkNullable<Faction>);
                case Cell_FieldIndex.FactionRank:
                    return typeof(Int32);
                case Cell_FieldIndex.GlobalVariable:
                    return typeof(FormLinkNullable<Global>);
                case Cell_FieldIndex.PathGrid:
                    return typeof(PathGrid);
                case Cell_FieldIndex.Landscape:
                    return typeof(Landscape);
                case Cell_FieldIndex.Timestamp:
                    return typeof(Int32);
                case Cell_FieldIndex.PersistentTimestamp:
                    return typeof(Int32);
                case Cell_FieldIndex.Persistent:
                    return typeof(IExtendedList<IPlaced>);
                case Cell_FieldIndex.TemporaryTimestamp:
                    return typeof(Int32);
                case Cell_FieldIndex.Temporary:
                    return typeof(IExtendedList<IPlaced>);
                case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                    return typeof(Int32);
                case Cell_FieldIndex.VisibleWhenDistant:
                    return typeof(IExtendedList<IPlaced>);
                default:
                    return Place_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CellXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.CELL;
        public static readonly Type BinaryWriteTranslation = typeof(CellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CellSetterCommon : PlaceSetterCommon
    {
        public new static readonly CellSetterCommon Instance = new CellSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Flags = default;
            item.Grid = default;
            item.Lighting = null;
            item.Regions = null;
            item.MusicType = default;
            item.WaterHeight = default;
            item.Climate = FormLinkNullable<Climate>.Null;
            item.Water = FormLinkNullable<Water>.Null;
            item.Owner = FormLinkNullable<Faction>.Null;
            item.FactionRank = default;
            item.GlobalVariable = FormLinkNullable<Global>.Null;
            item.PathGrid = null;
            item.Landscape = null;
            item.Timestamp = default;
            item.PersistentTimestamp = default;
            item.Persistent.Clear();
            item.TemporaryTimestamp = default;
            item.Temporary.Clear();
            item.VisibleWhenDistantTimestamp = default;
            item.VisibleWhenDistant.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IPlaceInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ICellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    PlaceSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ICellInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    CellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IPlaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Cell)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Cell)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Cell)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(ICellInternal obj)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            ICellInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICellInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CellBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CellBinaryCreateTranslation.FillBinaryRecordTypes);
            CellBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IPlaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class CellCommon : PlaceCommon
    {
        public new static readonly CellCommon Instance = new CellCommon();

        public Cell.Mask<bool> GetEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Cell.Mask<bool>(false);
            ((CellCommon)((ICellGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Grid = item.Grid.Equals(rhs.Grid);
            ret.Lighting = EqualsMaskHelper.EqualsHelper(
                item.Lighting,
                rhs.Lighting,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Regions = item.Regions.CollectionEqualsHelper(
                rhs.Regions,
                (l, r) => object.Equals(l, r),
                include);
            ret.MusicType = item.MusicType == rhs.MusicType;
            ret.WaterHeight = item.WaterHeight.EqualsWithin(rhs.WaterHeight);
            ret.Climate = object.Equals(item.Climate, rhs.Climate);
            ret.Water = object.Equals(item.Water, rhs.Water);
            ret.Owner = object.Equals(item.Owner, rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = object.Equals(item.GlobalVariable, rhs.GlobalVariable);
            ret.PathGrid = EqualsMaskHelper.EqualsHelper(
                item.PathGrid,
                rhs.PathGrid,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Landscape = EqualsMaskHelper.EqualsHelper(
                item.Landscape,
                rhs.Landscape,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Timestamp = item.Timestamp == rhs.Timestamp;
            ret.PersistentTimestamp = item.PersistentTimestamp == rhs.PersistentTimestamp;
            ret.Persistent = item.Persistent.CollectionEqualsHelper(
                rhs.Persistent,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            ret.TemporaryTimestamp = item.TemporaryTimestamp == rhs.TemporaryTimestamp;
            ret.Temporary = item.Temporary.CollectionEqualsHelper(
                rhs.Temporary,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            ret.VisibleWhenDistantTimestamp = item.VisibleWhenDistantTimestamp == rhs.VisibleWhenDistantTimestamp;
            ret.VisibleWhenDistant = item.VisibleWhenDistant.CollectionEqualsHelper(
                rhs.VisibleWhenDistant,
                (loqLhs, loqRhs) => loqLhs.GetEqualsIMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellGetter item,
            FileGeneration fg,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Cell =>");
            }
            else
            {
                fg.AppendLine($"{name} (Cell) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellGetter item,
            FileGeneration fg,
            Cell.Mask<bool>? printMask = null)
        {
            PlaceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Grid ?? true)
                && item.Grid.TryGet(out var GridItem))
            {
                fg.AppendItem(GridItem, "Grid");
            }
            if ((printMask?.Lighting?.Overall ?? true)
                && item.Lighting.TryGet(out var LightingItem))
            {
                LightingItem?.ToString(fg, "Lighting");
            }
            if ((printMask?.Regions?.Overall ?? true)
                && item.Regions.TryGet(out var RegionsItem))
            {
                fg.AppendLine("Regions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in RegionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.MusicType ?? true)
                && item.MusicType.TryGet(out var MusicTypeItem))
            {
                fg.AppendItem(MusicTypeItem, "MusicType");
            }
            if ((printMask?.WaterHeight ?? true)
                && item.WaterHeight.TryGet(out var WaterHeightItem))
            {
                fg.AppendItem(WaterHeightItem, "WaterHeight");
            }
            if ((printMask?.Climate ?? true)
                && item.Climate.TryGet(out var ClimateItem))
            {
                fg.AppendItem(ClimateItem, "Climate");
            }
            if ((printMask?.Water ?? true)
                && item.Water.TryGet(out var WaterItem))
            {
                fg.AppendItem(WaterItem, "Water");
            }
            if ((printMask?.Owner ?? true)
                && item.Owner.TryGet(out var OwnerItem))
            {
                fg.AppendItem(OwnerItem, "Owner");
            }
            if ((printMask?.FactionRank ?? true)
                && item.FactionRank.TryGet(out var FactionRankItem))
            {
                fg.AppendItem(FactionRankItem, "FactionRank");
            }
            if ((printMask?.GlobalVariable ?? true)
                && item.GlobalVariable.TryGet(out var GlobalVariableItem))
            {
                fg.AppendItem(GlobalVariableItem, "GlobalVariable");
            }
            if ((printMask?.PathGrid?.Overall ?? true)
                && item.PathGrid.TryGet(out var PathGridItem))
            {
                PathGridItem?.ToString(fg, "PathGrid");
            }
            if ((printMask?.Landscape?.Overall ?? true)
                && item.Landscape.TryGet(out var LandscapeItem))
            {
                LandscapeItem?.ToString(fg, "Landscape");
            }
            if (printMask?.Timestamp ?? true)
            {
                fg.AppendItem(item.Timestamp, "Timestamp");
            }
            if (printMask?.PersistentTimestamp ?? true)
            {
                fg.AppendItem(item.PersistentTimestamp, "PersistentTimestamp");
            }
            if (printMask?.Persistent?.Overall ?? true)
            {
                fg.AppendLine("Persistent =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Persistent)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.TemporaryTimestamp ?? true)
            {
                fg.AppendItem(item.TemporaryTimestamp, "TemporaryTimestamp");
            }
            if (printMask?.Temporary?.Overall ?? true)
            {
                fg.AppendLine("Temporary =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Temporary)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.VisibleWhenDistantTimestamp ?? true)
            {
                fg.AppendItem(item.VisibleWhenDistantTimestamp, "VisibleWhenDistantTimestamp");
            }
            if (printMask?.VisibleWhenDistant?.Overall ?? true)
            {
                fg.AppendLine("VisibleWhenDistant =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.VisibleWhenDistant)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ICellGetter item,
            Cell.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.Grid.HasValue && checkMask.Grid.Value != (item.Grid != null)) return false;
            if (checkMask.Lighting?.Overall.HasValue ?? false && checkMask.Lighting.Overall.Value != (item.Lighting != null)) return false;
            if (checkMask.Lighting?.Specific != null && (item.Lighting == null || !item.Lighting.HasBeenSet(checkMask.Lighting.Specific))) return false;
            if (checkMask.Regions?.Overall.HasValue ?? false && checkMask.Regions!.Overall.Value != (item.Regions != null)) return false;
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != (item.MusicType != null)) return false;
            if (checkMask.WaterHeight.HasValue && checkMask.WaterHeight.Value != (item.WaterHeight != null)) return false;
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != (item.Climate.FormKey != null)) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != (item.Water.FormKey != null)) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != (item.Owner.FormKey != null)) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != (item.FactionRank != null)) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != (item.GlobalVariable.FormKey != null)) return false;
            if (checkMask.PathGrid?.Overall.HasValue ?? false && checkMask.PathGrid.Overall.Value != (item.PathGrid != null)) return false;
            if (checkMask.PathGrid?.Specific != null && (item.PathGrid == null || !item.PathGrid.HasBeenSet(checkMask.PathGrid.Specific))) return false;
            if (checkMask.Landscape?.Overall.HasValue ?? false && checkMask.Landscape.Overall.Value != (item.Landscape != null)) return false;
            if (checkMask.Landscape?.Specific != null && (item.Landscape == null || !item.Landscape.HasBeenSet(checkMask.Landscape.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ICellGetter item,
            Cell.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Flags = (item.Flags != null);
            mask.Grid = (item.Grid != null);
            var itemLighting = item.Lighting;
            mask.Lighting = new MaskItem<bool, CellLighting.Mask<bool>?>(itemLighting != null, itemLighting?.GetHasBeenSetMask());
            mask.Regions = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Regions != null), default);
            mask.MusicType = (item.MusicType != null);
            mask.WaterHeight = (item.WaterHeight != null);
            mask.Climate = (item.Climate.FormKey != null);
            mask.Water = (item.Water.FormKey != null);
            mask.Owner = (item.Owner.FormKey != null);
            mask.FactionRank = (item.FactionRank != null);
            mask.GlobalVariable = (item.GlobalVariable.FormKey != null);
            var itemPathGrid = item.PathGrid;
            mask.PathGrid = new MaskItem<bool, PathGrid.Mask<bool>?>(itemPathGrid != null, itemPathGrid?.GetHasBeenSetMask());
            var itemLandscape = item.Landscape;
            mask.Landscape = new MaskItem<bool, Landscape.Mask<bool>?>(itemLandscape != null, itemLandscape?.GetHasBeenSetMask());
            mask.Timestamp = true;
            mask.PersistentTimestamp = true;
            var PersistentItem = item.Persistent;
            mask.Persistent = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>?>>?>(true, PersistentItem.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>?>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            mask.TemporaryTimestamp = true;
            var TemporaryItem = item.Temporary;
            mask.Temporary = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>?>>?>(true, TemporaryItem.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>?>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            mask.VisibleWhenDistantTimestamp = true;
            var VisibleWhenDistantItem = item.VisibleWhenDistant;
            mask.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, IMask<bool>?>>?>(true, VisibleWhenDistantItem.WithIndex().Select((i) => new MaskItemIndexed<bool, IMask<bool>?>(i.Index, true, i.Item.GetHasBeenSetIMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Cell_FieldIndex ConvertFieldIndex(Place_FieldIndex index)
        {
            switch (index)
            {
                case Place_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.OblivionMajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Cell_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellGetter? lhs,
            ICellGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Grid.Equals(rhs.Grid)) return false;
            if (!object.Equals(lhs.Lighting, rhs.Lighting)) return false;
            if (!lhs.Regions.SequenceEqual(rhs.Regions)) return false;
            if (lhs.MusicType != rhs.MusicType) return false;
            if (!lhs.WaterHeight.EqualsWithin(rhs.WaterHeight)) return false;
            if (!lhs.Climate.Equals(rhs.Climate)) return false;
            if (!lhs.Water.Equals(rhs.Water)) return false;
            if (!lhs.Owner.Equals(rhs.Owner)) return false;
            if (lhs.FactionRank != rhs.FactionRank) return false;
            if (!lhs.GlobalVariable.Equals(rhs.GlobalVariable)) return false;
            if (!object.Equals(lhs.PathGrid, rhs.PathGrid)) return false;
            if (!object.Equals(lhs.Landscape, rhs.Landscape)) return false;
            if (lhs.Timestamp != rhs.Timestamp) return false;
            if (lhs.PersistentTimestamp != rhs.PersistentTimestamp) return false;
            if (!lhs.Persistent.SequenceEqual(rhs.Persistent)) return false;
            if (lhs.TemporaryTimestamp != rhs.TemporaryTimestamp) return false;
            if (!lhs.Temporary.SequenceEqual(rhs.Temporary)) return false;
            if (lhs.VisibleWhenDistantTimestamp != rhs.VisibleWhenDistantTimestamp) return false;
            if (!lhs.VisibleWhenDistant.SequenceEqual(rhs.VisibleWhenDistant)) return false;
            return true;
        }
        
        public override bool Equals(
            IPlaceGetter? lhs,
            IPlaceGetter? rhs)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public virtual int GetHashCode(ICellGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            if (item.Grid.TryGet(out var Griditem))
            {
                hash.Add(Griditem);
            }
            if (item.Lighting.TryGet(out var Lightingitem))
            {
                hash.Add(Lightingitem);
            }
            hash.Add(item.Regions);
            if (item.MusicType.TryGet(out var MusicTypeitem))
            {
                hash.Add(MusicTypeitem);
            }
            if (item.WaterHeight.TryGet(out var WaterHeightitem))
            {
                hash.Add(WaterHeightitem);
            }
            if (item.Climate.TryGet(out var Climateitem))
            {
                hash.Add(Climateitem);
            }
            if (item.Water.TryGet(out var Wateritem))
            {
                hash.Add(Wateritem);
            }
            if (item.Owner.TryGet(out var Owneritem))
            {
                hash.Add(Owneritem);
            }
            if (item.FactionRank.TryGet(out var FactionRankitem))
            {
                hash.Add(FactionRankitem);
            }
            if (item.GlobalVariable.TryGet(out var GlobalVariableitem))
            {
                hash.Add(GlobalVariableitem);
            }
            if (item.PathGrid.TryGet(out var PathGriditem))
            {
                hash.Add(PathGriditem);
            }
            if (item.Landscape.TryGet(out var Landscapeitem))
            {
                hash.Add(Landscapeitem);
            }
            hash.Add(item.Timestamp);
            hash.Add(item.PersistentTimestamp);
            hash.Add(item.Persistent);
            hash.Add(item.TemporaryTimestamp);
            hash.Add(item.Temporary);
            hash.Add(item.VisibleWhenDistantTimestamp);
            hash.Add(item.VisibleWhenDistant);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IPlaceGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Cell.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ICellGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Regions.TryGet(out var RegionsItem))
            {
                foreach (var item in RegionsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.Climate.FormKey.TryGet(out var ClimateKey))
            {
                yield return ClimateKey;
            }
            if (obj.Water.FormKey.TryGet(out var WaterKey))
            {
                yield return WaterKey;
            }
            if (obj.Owner.FormKey.TryGet(out var OwnerKey))
            {
                yield return OwnerKey;
            }
            if (obj.GlobalVariable.FormKey.TryGet(out var GlobalVariableKey))
            {
                yield return GlobalVariableKey;
            }
            if (obj.PathGrid.TryGet(out var PathGridItems))
            {
                foreach (var item in PathGridItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Landscape.TryGet(out var LandscapeItems))
            {
                foreach (var item in LandscapeItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.VisibleWhenDistant.WhereCastable<IPlacedGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(ICellGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Cell obj, Cell rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Cell(getNextFormKey());
            ret.DeepCopyIn((Cell)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Cell)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(ICellGetter obj)
        {
            if ((obj.PathGrid != null))
            {
                if (obj.PathGrid.TryGet(out var PathGriditem))
                {
                    yield return PathGriditem;
                    foreach (var item in PathGriditem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            if ((obj.Landscape != null))
            {
                if (obj.Landscape.TryGet(out var Landscapeitem))
                {
                    yield return Landscapeitem;
                    foreach (var item in Landscapeitem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.VisibleWhenDistant)
            {
                yield return subItem;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            ICellGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "IOblivionMajorRecordGetter":
                case "OblivionMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    if (obj.PathGrid.TryGet(out var PathGriditem))
                    {
                        yield return PathGriditem;
                        foreach (var item in PathGriditem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    if (obj.Landscape.TryGet(out var Landscapeitem))
                    {
                        yield return Landscapeitem;
                        foreach (var item in Landscapeitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "IPlacedGetter":
                case "IPlaced":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #endregion
        
    }
    public partial class CellSetterTranslationCommon : PlaceSetterTranslationCommon
    {
        public new static readonly CellSetterTranslationCommon Instance = new CellSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICellInternal item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ICell item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IPlace)item,
                (IPlaceGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                item.Grid = rhs.Grid;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                try
                {
                    if(rhs.Lighting.TryGet(out var rhsLighting))
                    {
                        item.Lighting = rhsLighting.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                    }
                    else
                    {
                        item.Lighting = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                try
                {
                    if ((rhs.Regions != null))
                    {
                        item.Regions = 
                            rhs.Regions
                            .Select(r => (IFormLink<Region>)new FormLink<Region>(r.FormKey))
                            .ToExtendedList<IFormLink<Region>>();
                    }
                    else
                    {
                        item.Regions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                item.MusicType = rhs.MusicType;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                item.WaterHeight = rhs.WaterHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                item.Climate = rhs.Climate.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                item.Water = rhs.Water.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                item.Owner = rhs.Owner.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                item.GlobalVariable = rhs.GlobalVariable.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                try
                {
                    if(rhs.PathGrid.TryGet(out var rhsPathGrid))
                    {
                        item.PathGrid = (PathGrid)rhsPathGrid.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid),
                            errorMask: errorMask);
                    }
                    else
                    {
                        item.PathGrid = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                try
                {
                    if(rhs.Landscape.TryGet(out var rhsLandscape))
                    {
                        item.Landscape = (Landscape)rhsLandscape.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape),
                            errorMask: errorMask);
                    }
                    else
                    {
                        item.Landscape = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                item.PersistentTimestamp = rhs.PersistentTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                try
                {
                    item.Persistent.SetTo(
                        rhs.Persistent
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                item.TemporaryTimestamp = rhs.TemporaryTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                try
                {
                    item.Temporary.SetTo(
                        rhs.Temporary
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistantTimestamp) ?? true))
            {
                item.VisibleWhenDistantTimestamp = rhs.VisibleWhenDistantTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                try
                {
                    item.VisibleWhenDistant.SetTo(
                        rhs.VisibleWhenDistant
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IPlaceInternal item,
            IPlaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IPlace item,
            IPlaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Cell DeepCopy(
            ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Cell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CellSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellXmlWriteTranslation :
        PlaceXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static CellXmlWriteTranslation Instance = new CellXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICellGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            PlaceXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Cell_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Cell.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Cell_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.Grid != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                P2IntXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Grid),
                    item: item.Grid.Value,
                    fieldIndex: (int)Cell_FieldIndex.Grid,
                    errorMask: errorMask);
            }
            if ((item.Lighting != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                if (item.Lighting.TryGet(out var LightingItem))
                {
                    ((CellLightingXmlWriteTranslation)((IXmlItem)LightingItem).XmlWriteTranslator).Write(
                        item: LightingItem,
                        node: node,
                        name: nameof(item.Lighting),
                        fieldIndex: (int)Cell_FieldIndex.Lighting,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                }
            }
            if ((item.Regions != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                ListXmlTranslation<IFormLink<IRegionGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Regions),
                    item: item.Regions,
                    fieldIndex: (int)Cell_FieldIndex.Regions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Regions),
                    transl: (XElement subNode, IFormLink<IRegionGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.MusicType != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: node,
                    name: nameof(item.MusicType),
                    item: item.MusicType,
                    fieldIndex: (int)Cell_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if ((item.WaterHeight != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WaterHeight),
                    item: item.WaterHeight.Value,
                    fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                    errorMask: errorMask);
            }
            if ((item.Climate.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Climate),
                    item: item.Climate.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Climate,
                    errorMask: errorMask);
            }
            if ((item.Water.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Water),
                    item: item.Water.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Water,
                    errorMask: errorMask);
            }
            if ((item.Owner.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Owner),
                    item: item.Owner.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if ((item.FactionRank != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank.Value,
                    fieldIndex: (int)Cell_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if ((item.GlobalVariable.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if ((item.PathGrid != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                if (item.PathGrid.TryGet(out var PathGridItem))
                {
                    ((PathGridXmlWriteTranslation)((IXmlItem)PathGridItem).XmlWriteTranslator).Write(
                        item: PathGridItem,
                        node: node,
                        name: nameof(item.PathGrid),
                        fieldIndex: (int)Cell_FieldIndex.PathGrid,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid));
                }
            }
            if ((item.Landscape != null)
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                if (item.Landscape.TryGet(out var LandscapeItem))
                {
                    ((LandscapeXmlWriteTranslation)((IXmlItem)LandscapeItem).XmlWriteTranslator).Write(
                        item: LandscapeItem,
                        node: node,
                        name: nameof(item.Landscape),
                        fieldIndex: (int)Cell_FieldIndex.Landscape,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Timestamp),
                    item: item.Timestamp,
                    fieldIndex: (int)Cell_FieldIndex.Timestamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PersistentTimestamp),
                    item: item.PersistentTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.PersistentTimestamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Persistent),
                    item: item.Persistent,
                    fieldIndex: (int)Cell_FieldIndex.Persistent,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Persistent),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TemporaryTimestamp),
                    item: item.TemporaryTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.TemporaryTimestamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Temporary),
                    item: item.Temporary,
                    fieldIndex: (int)Cell_FieldIndex.Temporary,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Temporary),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistantTimestamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VisibleWhenDistantTimestamp),
                    item: item.VisibleWhenDistantTimestamp,
                    fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistantTimestamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                ListXmlTranslation<IPlacedGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.VisibleWhenDistant),
                    item: item.VisibleWhenDistant,
                    fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistant,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.VisibleWhenDistant),
                    transl: (XElement subNode, IPlacedGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((IXmlWriteTranslator)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Cell");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Cell");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IPlaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class CellXmlCreateTranslation : PlaceXmlCreateTranslation
    {
        public new readonly static CellXmlCreateTranslation Instance = new CellXmlCreateTranslation();

        public static void FillPublicXml(
            ICellInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Cell.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grid":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                    try
                    {
                        item.Grid = P2IntXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lighting":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                    try
                    {
                        item.Lighting = LoquiXmlTranslation<CellLighting>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Regions":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Region>>.Instance.Parse(
                            node: node,
                            enumer: out var RegionsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Regions = RegionsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Regions = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MusicType":
                    errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                    try
                    {
                        item.MusicType = EnumXmlTranslation<MusicType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaterHeight":
                    errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                    try
                    {
                        item.WaterHeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climate":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Climate);
                    try
                    {
                        item.Climate = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Water":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Water);
                    try
                    {
                        item.Water = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Owner":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Owner);
                    try
                    {
                        item.Owner = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FactionRank":
                    errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                    try
                    {
                        item.FactionRank = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    errorMask?.PushIndex((int)Cell_FieldIndex.GlobalVariable);
                    try
                    {
                        item.GlobalVariable = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PathGrid":
                    errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                    try
                    {
                        item.PathGrid = LoquiXmlTranslation<PathGrid>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Landscape":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                    try
                    {
                        item.Landscape = LoquiXmlTranslation<Landscape>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Timestamp":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Timestamp);
                    try
                    {
                        item.Timestamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PersistentTimestamp":
                    errorMask?.PushIndex((int)Cell_FieldIndex.PersistentTimestamp);
                    try
                    {
                        item.PersistentTimestamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Persistent":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                    try
                    {
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var PersistentItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Persistent.SetTo(PersistentItem);
                        }
                        else
                        {
                            item.Persistent.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TemporaryTimestamp":
                    errorMask?.PushIndex((int)Cell_FieldIndex.TemporaryTimestamp);
                    try
                    {
                        item.TemporaryTimestamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Temporary":
                    errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                    try
                    {
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var TemporaryItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Temporary.SetTo(TemporaryItem);
                        }
                        else
                        {
                            item.Temporary.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisibleWhenDistantTimestamp":
                    errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistantTimestamp);
                    try
                    {
                        item.VisibleWhenDistantTimestamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisibleWhenDistant":
                    errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                    try
                    {
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            node: node,
                            enumer: out var VisibleWhenDistantItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.VisibleWhenDistant.SetTo(VisibleWhenDistantItem);
                        }
                        else
                        {
                            item.VisibleWhenDistant.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    PlaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class CellXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICellGetter item,
            XElement node,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CellXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICellGetter item,
            string path,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellGetter item,
            Stream stream,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellBinaryWriteTranslation :
        PlaceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CellBinaryWriteTranslation Instance = new CellBinaryWriteTranslation();

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            ICellGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            ICellGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public static void WriteEmbedded(
            ICellGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ICellGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Cell.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
            Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Grid,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCLC));
            if (item.Lighting.TryGet(out var LightingItem))
            {
                ((CellLightingBinaryWriteTranslation)((IBinaryItem)LightingItem).BinaryWriteTranslator).Write(
                    item: LightingItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IRegionGetter>>.Instance.Write(
                writer: writer,
                items: item.Regions,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XCLR),
                transl: (MutagenWriter subWriter, IFormLink<IRegionGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.WriteNullable(
                writer,
                item.MusicType,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCMT));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterHeight,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCLW));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Climate,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCCM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCWT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XOWN));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XRNK));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalVariable,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XGLB));
        }

        public void Write(
            MutagenWriter writer,
            ICellGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CELL),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IPlaceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CellBinaryCreateTranslation : PlaceBinaryCreateTranslation
    {
        public new readonly static CellBinaryCreateTranslation Instance = new CellBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CELL;
        public static void FillBinaryStructs(
            ICellInternal item,
            MutagenFrame frame)
        {
            PlaceBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICellInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Cell_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Cell.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.Flags;
                }
                case RecordTypeInts.XCLC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Grid = Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.Grid;
                }
                case RecordTypeInts.XCLL:
                {
                    item.Lighting = Mutagen.Bethesda.Oblivion.CellLighting.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.Lighting;
                }
                case RecordTypeInts.XCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Regions = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Region>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Region>>();
                    return (int)Cell_FieldIndex.Regions;
                }
                case RecordTypeInts.XCMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MusicType = EnumBinaryTranslation<MusicType>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.MusicType;
                }
                case RecordTypeInts.XCLW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterHeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.WaterHeight;
                }
                case RecordTypeInts.XCCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Climate = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.Climate;
                }
                case RecordTypeInts.XCWT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Water = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.Water;
                }
                case RecordTypeInts.XOWN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Owner = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return (int)Cell_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XGLB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlobalVariable = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.GlobalVariable;
                }
                default:
                    return PlaceBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            ICellInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            ICellInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CellBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CellBinaryOverlay :
        PlaceBinaryOverlay,
        ICellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => CellCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => CellCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type, throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CellXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CellXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Cell.Flag? Flags => _FlagsLocation.HasValue ? (Cell.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(Cell.Flag?);
        #endregion
        #region Grid
        private int? _GridLocation;
        public P2Int? Grid => _GridLocation.HasValue ? P2IntBinaryTranslation.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _GridLocation.Value, _package.MetaData.Constants)) : default(P2Int?);
        #endregion
        #region Lighting
        private RangeInt32? _LightingLocation;
        public ICellLightingGetter? Lighting => _LightingLocation.HasValue ? CellLightingBinaryOverlay.CellLightingFactory(new OverlayStream(_data.Slice(_LightingLocation!.Value.Min), _package), _package) : default;
        public bool Lighting_IsSet => _LightingLocation.HasValue;
        #endregion
        public IReadOnlyList<IFormLink<IRegionGetter>>? Regions { get; private set; }
        #region MusicType
        private int? _MusicTypeLocation;
        public MusicType? MusicType => _MusicTypeLocation.HasValue ? (MusicType)HeaderTranslation.ExtractSubrecordSpan(_data, _MusicTypeLocation!.Value, _package.MetaData.Constants)[0] : default(MusicType?);
        #endregion
        #region WaterHeight
        private int? _WaterHeightLocation;
        public Single? WaterHeight => _WaterHeightLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterHeightLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        #region Climate
        private int? _ClimateLocation;
        public bool Climate_IsSet => _ClimateLocation.HasValue;
        public IFormLinkNullable<IClimateGetter> Climate => _ClimateLocation.HasValue ? new FormLinkNullable<IClimateGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ClimateLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IClimateGetter>.Null;
        #endregion
        #region Water
        private int? _WaterLocation;
        public bool Water_IsSet => _WaterLocation.HasValue;
        public IFormLinkNullable<IWaterGetter> Water => _WaterLocation.HasValue ? new FormLinkNullable<IWaterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _WaterLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWaterGetter>.Null;
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public bool Owner_IsSet => _OwnerLocation.HasValue;
        public IFormLinkNullable<IFactionGetter> Owner => _OwnerLocation.HasValue ? new FormLinkNullable<IFactionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OwnerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFactionGetter>.Null;
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FactionRankLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region GlobalVariable
        private int? _GlobalVariableLocation;
        public bool GlobalVariable_IsSet => _GlobalVariableLocation.HasValue;
        public IFormLinkNullable<IGlobalGetter> GlobalVariable => _GlobalVariableLocation.HasValue ? new FormLinkNullable<IGlobalGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _GlobalVariableLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IGlobalGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CellBinaryOverlay CellFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var origStream = stream;
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new CellBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CellBinaryOverlay CellFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CellFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Flags;
                }
                case RecordTypeInts.XCLC:
                {
                    _GridLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Grid;
                }
                case RecordTypeInts.XCLL:
                {
                    _LightingLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Cell_FieldIndex.Lighting;
                }
                case RecordTypeInts.XCLR:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.Regions = BinaryOverlayList<IFormLink<IRegionGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IRegionGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)Cell_FieldIndex.Regions;
                }
                case RecordTypeInts.XCMT:
                {
                    _MusicTypeLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.MusicType;
                }
                case RecordTypeInts.XCLW:
                {
                    _WaterHeightLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterHeight;
                }
                case RecordTypeInts.XCCM:
                {
                    _ClimateLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Climate;
                }
                case RecordTypeInts.XCWT:
                {
                    _WaterLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Water;
                }
                case RecordTypeInts.XOWN:
                {
                    _OwnerLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    _FactionRankLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XGLB:
                {
                    _GlobalVariableLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.GlobalVariable;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

