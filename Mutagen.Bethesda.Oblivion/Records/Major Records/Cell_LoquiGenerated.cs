/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Cell : 
        NamedMajorRecord,
        ICell,
        ILoquiObject<Cell>,
        ILoquiObjectSetter,
        IPropertySupporter<Cell.Flag>,
        IPropertySupporter<P2Int>,
        IPropertySupporter<CellLighting>,
        IPropertySupporter<MusicType>,
        IPropertySupporter<Single>,
        IPropertySupporter<Int32>,
        IPropertySupporter<PathGrid>,
        IPropertySupporter<Landscape>,
        IEquatable<Cell>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;

        #region Ctor
        public Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        protected Cell.Flag _Flags;
        protected PropertyForwarder<Cell, Cell.Flag> _FlagsForwarder;
        public INotifyingSetItem<Cell.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<Cell, Cell.Flag>(this, (int)Cell_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Cell.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            Cell.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Cell_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Cell_FieldIndex.Flags] = hasBeenSet;
            }
            if (_CellFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _CellFlag_subscriptions.FireSubscriptions(
                    index: (int)Cell_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)Cell_FieldIndex.Flags] = false;
            Flags = default(Cell.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Cell.Flag> ICell.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Cell.Flag> ICellGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Grid
        protected P2Int _Grid;
        protected PropertyForwarder<Cell, P2Int> _GridForwarder;
        public INotifyingSetItem<P2Int> Grid_Property => _GridForwarder ?? (_GridForwarder = new PropertyForwarder<Cell, P2Int>(this, (int)Cell_FieldIndex.Grid));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Int Grid
        {
            get => this._Grid;
            set => this.SetGrid(value);
        }
        protected void SetGrid(
            P2Int item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Cell_FieldIndex.Grid];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Grid == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Cell_FieldIndex.Grid] = hasBeenSet;
            }
            if (_P2Int_subscriptions != null)
            {
                var tmp = Grid;
                _Grid = item;
                _P2Int_subscriptions.FireSubscriptions(
                    index: (int)Cell_FieldIndex.Grid,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Grid = item;
            }
        }
        protected void UnsetGrid()
        {
            _hasBeenSetTracker[(int)Cell_FieldIndex.Grid] = false;
            Grid = default(P2Int);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<P2Int> ICell.Grid_Property => this.Grid_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<P2Int> ICellGetter.Grid_Property => this.Grid_Property;
        #endregion
        #region Lighting
        protected CellLighting _Lighting;
        protected PropertyForwarder<Cell, CellLighting> _LightingForwarder;
        public INotifyingSetItem<CellLighting> Lighting_Property => _LightingForwarder ?? (_LightingForwarder = new PropertyForwarder<Cell, CellLighting>(this, (int)Cell_FieldIndex.Lighting));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CellLighting Lighting
        {
            get => this._Lighting;
            set => this.SetLighting(value);
        }
        protected void SetLighting(
            CellLighting item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Cell_FieldIndex.Lighting];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Lighting, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Cell_FieldIndex.Lighting] = hasBeenSet;
            }
            if (_CellLighting_subscriptions != null)
            {
                var tmp = Lighting;
                _Lighting = item;
                _CellLighting_subscriptions.FireSubscriptions(
                    index: (int)Cell_FieldIndex.Lighting,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Lighting = item;
            }
        }
        protected void UnsetLighting()
        {
            _hasBeenSetTracker[(int)Cell_FieldIndex.Lighting] = false;
            Lighting = default(CellLighting);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<CellLighting> ICell.Lighting_Property => this.Lighting_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<CellLighting> ICellGetter.Lighting_Property => this.Lighting_Property;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDLink<Region>> _Regions = new NotifyingList<FormIDLink<Region>>();
        public INotifyingList<FormIDLink<Region>> Regions => _Regions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDLink<Region>> RegionsEnumerable
        {
            get => _Regions;
            set => _Regions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDLink<Region>> ICell.Regions => _Regions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDLink<Region>> ICellGetter.Regions => _Regions;
        #endregion

        #endregion
        #region MusicType
        protected MusicType _MusicType;
        protected PropertyForwarder<Cell, MusicType> _MusicTypeForwarder;
        public INotifyingSetItem<MusicType> MusicType_Property => _MusicTypeForwarder ?? (_MusicTypeForwarder = new PropertyForwarder<Cell, MusicType>(this, (int)Cell_FieldIndex.MusicType));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType MusicType
        {
            get => this._MusicType;
            set => this.SetMusicType(value);
        }
        protected void SetMusicType(
            MusicType item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Cell_FieldIndex.MusicType];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MusicType == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Cell_FieldIndex.MusicType] = hasBeenSet;
            }
            if (_MusicType_subscriptions != null)
            {
                var tmp = MusicType;
                _MusicType = item;
                _MusicType_subscriptions.FireSubscriptions(
                    index: (int)Cell_FieldIndex.MusicType,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MusicType = item;
            }
        }
        protected void UnsetMusicType()
        {
            _hasBeenSetTracker[(int)Cell_FieldIndex.MusicType] = false;
            MusicType = default(MusicType);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<MusicType> ICell.MusicType_Property => this.MusicType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<MusicType> ICellGetter.MusicType_Property => this.MusicType_Property;
        #endregion
        #region WaterHeight
        protected Single _WaterHeight;
        protected PropertyForwarder<Cell, Single> _WaterHeightForwarder;
        public INotifyingSetItem<Single> WaterHeight_Property => _WaterHeightForwarder ?? (_WaterHeightForwarder = new PropertyForwarder<Cell, Single>(this, (int)Cell_FieldIndex.WaterHeight));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single WaterHeight
        {
            get => this._WaterHeight;
            set => this.SetWaterHeight(value);
        }
        protected void SetWaterHeight(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Cell_FieldIndex.WaterHeight];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && WaterHeight == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Cell_FieldIndex.WaterHeight] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = WaterHeight;
                _WaterHeight = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Cell_FieldIndex.WaterHeight,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _WaterHeight = item;
            }
        }
        protected void UnsetWaterHeight()
        {
            _hasBeenSetTracker[(int)Cell_FieldIndex.WaterHeight] = false;
            WaterHeight = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> ICell.WaterHeight_Property => this.WaterHeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> ICellGetter.WaterHeight_Property => this.WaterHeight_Property;
        #endregion
        #region Climate
        public FormIDSetLink<Climate> Climate_Property { get; } = new FormIDSetLink<Climate>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Climate Climate { get => Climate_Property.Item; set => Climate_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Climate> ICellGetter.Climate_Property => this.Climate_Property;
        #endregion
        #region Water
        public FormIDSetLink<Water> Water_Property { get; } = new FormIDSetLink<Water>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Water Water { get => Water_Property.Item; set => Water_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Water> ICellGetter.Water_Property => this.Water_Property;
        #endregion
        #region Owner
        public FormIDSetLink<Faction> Owner_Property { get; } = new FormIDSetLink<Faction>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Faction Owner { get => Owner_Property.Item; set => Owner_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Faction> ICellGetter.Owner_Property => this.Owner_Property;
        #endregion
        #region FactionRank
        protected Int32 _FactionRank;
        protected PropertyForwarder<Cell, Int32> _FactionRankForwarder;
        public INotifyingSetItem<Int32> FactionRank_Property => _FactionRankForwarder ?? (_FactionRankForwarder = new PropertyForwarder<Cell, Int32>(this, (int)Cell_FieldIndex.FactionRank));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FactionRank
        {
            get => this._FactionRank;
            set => this.SetFactionRank(value);
        }
        protected void SetFactionRank(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Cell_FieldIndex.FactionRank];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && FactionRank == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Cell_FieldIndex.FactionRank] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = FactionRank;
                _FactionRank = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)Cell_FieldIndex.FactionRank,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FactionRank = item;
            }
        }
        protected void UnsetFactionRank()
        {
            _hasBeenSetTracker[(int)Cell_FieldIndex.FactionRank] = false;
            FactionRank = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> ICell.FactionRank_Property => this.FactionRank_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> ICellGetter.FactionRank_Property => this.FactionRank_Property;
        #endregion
        #region GlobalVariable
        public FormIDSetLink<Global> GlobalVariable_Property { get; } = new FormIDSetLink<Global>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Global GlobalVariable { get => GlobalVariable_Property.Item; set => GlobalVariable_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Global> ICellGetter.GlobalVariable_Property => this.GlobalVariable_Property;
        #endregion
        #region PathGrid
        protected PathGrid _PathGrid;
        protected PropertyForwarder<Cell, PathGrid> _PathGridForwarder;
        public INotifyingSetItem<PathGrid> PathGrid_Property => _PathGridForwarder ?? (_PathGridForwarder = new PropertyForwarder<Cell, PathGrid>(this, (int)Cell_FieldIndex.PathGrid));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PathGrid PathGrid
        {
            get => this._PathGrid;
            set => this.SetPathGrid(value);
        }
        protected void SetPathGrid(
            PathGrid item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Cell_FieldIndex.PathGrid];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(PathGrid, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Cell_FieldIndex.PathGrid] = hasBeenSet;
            }
            if (_PathGrid_subscriptions != null)
            {
                var tmp = PathGrid;
                _PathGrid = item;
                _PathGrid_subscriptions.FireSubscriptions(
                    index: (int)Cell_FieldIndex.PathGrid,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _PathGrid = item;
            }
        }
        protected void UnsetPathGrid()
        {
            _hasBeenSetTracker[(int)Cell_FieldIndex.PathGrid] = false;
            PathGrid = default(PathGrid);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<PathGrid> ICell.PathGrid_Property => this.PathGrid_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<PathGrid> ICellGetter.PathGrid_Property => this.PathGrid_Property;
        #endregion
        #region Landscape
        protected Landscape _Landscape;
        protected PropertyForwarder<Cell, Landscape> _LandscapeForwarder;
        public INotifyingSetItem<Landscape> Landscape_Property => _LandscapeForwarder ?? (_LandscapeForwarder = new PropertyForwarder<Cell, Landscape>(this, (int)Cell_FieldIndex.Landscape));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Landscape Landscape
        {
            get => this._Landscape;
            set => this.SetLandscape(value);
        }
        protected void SetLandscape(
            Landscape item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Cell_FieldIndex.Landscape];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Landscape, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Cell_FieldIndex.Landscape] = hasBeenSet;
            }
            if (_Landscape_subscriptions != null)
            {
                var tmp = Landscape;
                _Landscape = item;
                _Landscape_subscriptions.FireSubscriptions(
                    index: (int)Cell_FieldIndex.Landscape,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Landscape = item;
            }
        }
        protected void UnsetLandscape()
        {
            _hasBeenSetTracker[(int)Cell_FieldIndex.Landscape] = false;
            Landscape = default(Landscape);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Landscape> ICell.Landscape_Property => this.Landscape_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Landscape> ICellGetter.Landscape_Property => this.Landscape_Property;
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Placed> _Persistent = new NotifyingList<Placed>();
        public INotifyingList<Placed> Persistent => _Persistent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Placed> PersistentEnumerable
        {
            get => _Persistent;
            set => _Persistent.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Placed> ICell.Persistent => _Persistent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Placed> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Placed> _Temporary = new NotifyingList<Placed>();
        public INotifyingList<Placed> Temporary => _Temporary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Placed> TemporaryEnumerable
        {
            get => _Temporary;
            set => _Temporary.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Placed> ICell.Temporary => _Temporary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Placed> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion
        #region VisibleWhenDistant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Placed> _VisibleWhenDistant = new NotifyingList<Placed>();
        public INotifyingList<Placed> VisibleWhenDistant => _VisibleWhenDistant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Placed> VisibleWhenDistantEnumerable
        {
            get => _VisibleWhenDistant;
            set => _VisibleWhenDistant.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Placed> ICell.VisibleWhenDistant => _VisibleWhenDistant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Placed> ICellGetter.VisibleWhenDistant => _VisibleWhenDistant;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => CellCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => CellCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CellCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CellCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Cell>.GetEqualsMask(Cell rhs) => CellCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICellGetter>.GetEqualsMask(ICellGetter rhs) => CellCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return CellCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            return CellCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Cell_Mask<bool> GetHasBeenSetMask()
        {
            return CellCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Cell rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cell rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (Grid_Property.HasBeenSet != rhs.Grid_Property.HasBeenSet) return false;
            if (Grid_Property.HasBeenSet)
            {
                if (this.Grid != rhs.Grid) return false;
            }
            if (Lighting_Property.HasBeenSet != rhs.Lighting_Property.HasBeenSet) return false;
            if (Lighting_Property.HasBeenSet)
            {
                if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
            }
            if (Regions.HasBeenSet != rhs.Regions.HasBeenSet) return false;
            if (Regions.HasBeenSet)
            {
                if (!this.Regions.SequenceEqual(rhs.Regions)) return false;
            }
            if (MusicType_Property.HasBeenSet != rhs.MusicType_Property.HasBeenSet) return false;
            if (MusicType_Property.HasBeenSet)
            {
                if (this.MusicType != rhs.MusicType) return false;
            }
            if (WaterHeight_Property.HasBeenSet != rhs.WaterHeight_Property.HasBeenSet) return false;
            if (WaterHeight_Property.HasBeenSet)
            {
                if (!this.WaterHeight.EqualsWithin(rhs.WaterHeight)) return false;
            }
            if (Climate_Property.HasBeenSet != rhs.Climate_Property.HasBeenSet) return false;
            if (Climate_Property.HasBeenSet)
            {
                if (!this.Climate_Property.Equals(rhs.Climate_Property)) return false;
            }
            if (Water_Property.HasBeenSet != rhs.Water_Property.HasBeenSet) return false;
            if (Water_Property.HasBeenSet)
            {
                if (!this.Water_Property.Equals(rhs.Water_Property)) return false;
            }
            if (Owner_Property.HasBeenSet != rhs.Owner_Property.HasBeenSet) return false;
            if (Owner_Property.HasBeenSet)
            {
                if (!this.Owner_Property.Equals(rhs.Owner_Property)) return false;
            }
            if (FactionRank_Property.HasBeenSet != rhs.FactionRank_Property.HasBeenSet) return false;
            if (FactionRank_Property.HasBeenSet)
            {
                if (this.FactionRank != rhs.FactionRank) return false;
            }
            if (GlobalVariable_Property.HasBeenSet != rhs.GlobalVariable_Property.HasBeenSet) return false;
            if (GlobalVariable_Property.HasBeenSet)
            {
                if (!this.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property)) return false;
            }
            if (PathGrid_Property.HasBeenSet != rhs.PathGrid_Property.HasBeenSet) return false;
            if (PathGrid_Property.HasBeenSet)
            {
                if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
            }
            if (Landscape_Property.HasBeenSet != rhs.Landscape_Property.HasBeenSet) return false;
            if (Landscape_Property.HasBeenSet)
            {
                if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
            }
            if (Persistent.HasBeenSet != rhs.Persistent.HasBeenSet) return false;
            if (Persistent.HasBeenSet)
            {
                if (!this.Persistent.SequenceEqual(rhs.Persistent)) return false;
            }
            if (Temporary.HasBeenSet != rhs.Temporary.HasBeenSet) return false;
            if (Temporary.HasBeenSet)
            {
                if (!this.Temporary.SequenceEqual(rhs.Temporary)) return false;
            }
            if (VisibleWhenDistant.HasBeenSet != rhs.VisibleWhenDistant.HasBeenSet) return false;
            if (VisibleWhenDistant.HasBeenSet)
            {
                if (!this.VisibleWhenDistant.SequenceEqual(rhs.VisibleWhenDistant)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (Grid_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Grid).CombineHashCode(ret);
            }
            if (Lighting_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Lighting).CombineHashCode(ret);
            }
            if (Regions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Regions).CombineHashCode(ret);
            }
            if (MusicType_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MusicType).CombineHashCode(ret);
            }
            if (WaterHeight_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(WaterHeight).CombineHashCode(ret);
            }
            if (Climate_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Climate).CombineHashCode(ret);
            }
            if (Water_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Water).CombineHashCode(ret);
            }
            if (Owner_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Owner).CombineHashCode(ret);
            }
            if (FactionRank_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FactionRank).CombineHashCode(ret);
            }
            if (GlobalVariable_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(GlobalVariable).CombineHashCode(ret);
            }
            if (PathGrid_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(PathGrid).CombineHashCode(ret);
            }
            if (Landscape_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Landscape).CombineHashCode(ret);
            }
            if (Persistent.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Persistent).CombineHashCode(ret);
            }
            if (Temporary.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Temporary).CombineHashCode(ret);
            }
            if (VisibleWhenDistant.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(VisibleWhenDistant).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Cell Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Cell Create_XML(
            XElement root,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static Cell Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Cell();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Cell Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Cell Create_XML(
            string path,
            out Cell_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Cell Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Cell Create_XML(
            Stream stream,
            out Cell_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Cell>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Cell_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Cell>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Cell_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Cell_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Cell_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Cell_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Cell_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Cell_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Cell_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            CellCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Cell item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                        if (EnumXmlTranslation<Cell.Flag>.Instance.Parse(
                            root: root,
                            item: out Cell.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grid":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                        if (P2IntXmlTranslation.Instance.Parse(
                            root: root,
                            item: out P2Int GridParse,
                            errorMask: errorMask))
                        {
                            item.Grid = GridParse;
                        }
                        else
                        {
                            item.UnsetGrid();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lighting":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                        if (LoquiXmlTranslation<CellLighting>.Instance.Parse(
                            root: root,
                            item: out CellLighting LightingParse,
                            errorMask: errorMask))
                        {
                            item.Lighting = LightingParse;
                        }
                        else
                        {
                            item.UnsetLighting();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Regions":
                    ListXmlTranslation<FormIDLink<Region>>.Instance.ParseInto(
                        root: root,
                        item: item.Regions,
                        fieldIndex: (int)Cell_FieldIndex.Regions,
                        errorMask: errorMask,
                        transl: FormIDXmlTranslation.Instance.Parse);
                    break;
                case "MusicType":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                        if (EnumXmlTranslation<MusicType>.Instance.Parse(
                            root: root,
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.UnsetMusicType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaterHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WaterHeightParse,
                            errorMask: errorMask))
                        {
                            item.WaterHeight = WaterHeightParse;
                        }
                        else
                        {
                            item.UnsetWaterHeight();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climate":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.Climate,
                        item: item.Climate_Property,
                        errorMask: errorMask);
                    break;
                case "Water":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.Water,
                        item: item.Water_Property,
                        errorMask: errorMask);
                    break;
                case "Owner":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.Owner,
                        item: item.Owner_Property,
                        errorMask: errorMask);
                    break;
                case "FactionRank":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 FactionRankParse,
                            errorMask: errorMask))
                        {
                            item.FactionRank = FactionRankParse;
                        }
                        else
                        {
                            item.UnsetFactionRank();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                        item: item.GlobalVariable_Property,
                        errorMask: errorMask);
                    break;
                case "PathGrid":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                        if (LoquiXmlTranslation<PathGrid>.Instance.Parse(
                            root: root,
                            item: out PathGrid PathGridParse,
                            errorMask: errorMask))
                        {
                            item.PathGrid = PathGridParse;
                        }
                        else
                        {
                            item.UnsetPathGrid();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Landscape":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                        if (LoquiXmlTranslation<Landscape>.Instance.Parse(
                            root: root,
                            item: out Landscape LandscapeParse,
                            errorMask: errorMask))
                        {
                            item.Landscape = LandscapeParse;
                        }
                        else
                        {
                            item.UnsetLandscape();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Persistent":
                    ListXmlTranslation<Placed>.Instance.ParseInto(
                        root: root,
                        item: item.Persistent,
                        fieldIndex: (int)Cell_FieldIndex.Persistent,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<Placed>.Instance.Parse);
                    break;
                case "Temporary":
                    ListXmlTranslation<Placed>.Instance.ParseInto(
                        root: root,
                        item: item.Temporary,
                        fieldIndex: (int)Cell_FieldIndex.Temporary,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<Placed>.Instance.Parse);
                    break;
                case "VisibleWhenDistant":
                    ListXmlTranslation<Placed>.Instance.ParseInto(
                        root: root,
                        item: item.VisibleWhenDistant,
                        fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistant,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<Placed>.Instance.Parse);
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter Cell.Flag
        protected ObjectCentralizationSubscriptions<Cell.Flag> _CellFlag_subscriptions;
        Cell.Flag IPropertySupporter<Cell.Flag>.Get(int index)
        {
            return GetCellFlag(index: index);
        }

        protected Cell.Flag GetCellFlag(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type Cell.Flag: {index}");
            }
        }

        void IPropertySupporter<Cell.Flag>.Set(
            int index,
            Cell.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetCellFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetCellFlag(
            int index,
            Cell.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Cell.Flag: {index}");
            }
        }

        bool IPropertySupporter<Cell.Flag>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Cell.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Cell.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetCellFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetCellFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Flags:
                    _hasBeenSetTracker[index] = false;
                    Flags = default(Cell.Flag);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Cell.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Cell.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Cell.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_CellFlag_subscriptions == null)
            {
                _CellFlag_subscriptions = new ObjectCentralizationSubscriptions<Cell.Flag>();
            }
            _CellFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Cell.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _CellFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Cell.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Cell.Flag IPropertySupporter<Cell.Flag>.DefaultValue(int index)
        {
            return DefaultValueCellFlag(index: index);
        }

        protected Cell.Flag DefaultValueCellFlag(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Flags:
                    return default(Cell.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type Cell.Flag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter P2Int
        protected ObjectCentralizationSubscriptions<P2Int> _P2Int_subscriptions;
        P2Int IPropertySupporter<P2Int>.Get(int index)
        {
            return GetP2Int(index: index);
        }

        protected P2Int GetP2Int(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Grid:
                    return Grid;
                default:
                    throw new ArgumentException($"Unknown index for field type P2Int: {index}");
            }
        }

        void IPropertySupporter<P2Int>.Set(
            int index,
            P2Int item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetP2Int(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetP2Int(
            int index,
            P2Int item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Grid:
                    SetGrid(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type P2Int: {index}");
            }
        }

        bool IPropertySupporter<P2Int>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<P2Int>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<P2Int>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetP2Int(
                index: index,
                cmds: cmds);
        }

        protected void UnsetP2Int(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Grid:
                    _hasBeenSetTracker[index] = false;
                    Grid = default(P2Int);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type P2Int: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<P2Int>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<P2Int> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_P2Int_subscriptions == null)
            {
                _P2Int_subscriptions = new ObjectCentralizationSubscriptions<P2Int>();
            }
            _P2Int_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<P2Int>.Unsubscribe(
            int index,
            object owner)
        {
            _P2Int_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<P2Int>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        P2Int IPropertySupporter<P2Int>.DefaultValue(int index)
        {
            return DefaultValueP2Int(index: index);
        }

        protected P2Int DefaultValueP2Int(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Grid:
                    return default(P2Int);
                default:
                    throw new ArgumentException($"Unknown index for field type P2Int: {index}");
            }
        }

        #endregion

        #region IPropertySupporter CellLighting
        protected ObjectCentralizationSubscriptions<CellLighting> _CellLighting_subscriptions;
        CellLighting IPropertySupporter<CellLighting>.Get(int index)
        {
            return GetCellLighting(index: index);
        }

        protected CellLighting GetCellLighting(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Lighting:
                    return Lighting;
                default:
                    throw new ArgumentException($"Unknown index for field type CellLighting: {index}");
            }
        }

        void IPropertySupporter<CellLighting>.Set(
            int index,
            CellLighting item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetCellLighting(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetCellLighting(
            int index,
            CellLighting item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Lighting:
                    SetLighting(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type CellLighting: {index}");
            }
        }

        bool IPropertySupporter<CellLighting>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<CellLighting>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<CellLighting>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetCellLighting(
                index: index,
                cmds: cmds);
        }

        protected void UnsetCellLighting(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Lighting:
                    _hasBeenSetTracker[index] = false;
                    Lighting = default(CellLighting);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type CellLighting: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<CellLighting>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<CellLighting> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_CellLighting_subscriptions == null)
            {
                _CellLighting_subscriptions = new ObjectCentralizationSubscriptions<CellLighting>();
            }
            _CellLighting_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<CellLighting>.Unsubscribe(
            int index,
            object owner)
        {
            _CellLighting_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<CellLighting>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        CellLighting IPropertySupporter<CellLighting>.DefaultValue(int index)
        {
            return DefaultValueCellLighting(index: index);
        }

        protected CellLighting DefaultValueCellLighting(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Lighting:
                    return default(CellLighting);
                default:
                    throw new ArgumentException($"Unknown index for field type CellLighting: {index}");
            }
        }

        #endregion

        #region IPropertySupporter MusicType
        protected ObjectCentralizationSubscriptions<MusicType> _MusicType_subscriptions;
        MusicType IPropertySupporter<MusicType>.Get(int index)
        {
            return GetMusicType(index: index);
        }

        protected MusicType GetMusicType(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.MusicType:
                    return MusicType;
                default:
                    throw new ArgumentException($"Unknown index for field type MusicType: {index}");
            }
        }

        void IPropertySupporter<MusicType>.Set(
            int index,
            MusicType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetMusicType(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetMusicType(
            int index,
            MusicType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.MusicType:
                    SetMusicType(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MusicType: {index}");
            }
        }

        bool IPropertySupporter<MusicType>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<MusicType>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<MusicType>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetMusicType(
                index: index,
                cmds: cmds);
        }

        protected void UnsetMusicType(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.MusicType:
                    _hasBeenSetTracker[index] = false;
                    MusicType = default(MusicType);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MusicType: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MusicType>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<MusicType> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_MusicType_subscriptions == null)
            {
                _MusicType_subscriptions = new ObjectCentralizationSubscriptions<MusicType>();
            }
            _MusicType_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MusicType>.Unsubscribe(
            int index,
            object owner)
        {
            _MusicType_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<MusicType>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        MusicType IPropertySupporter<MusicType>.DefaultValue(int index)
        {
            return DefaultValueMusicType(index: index);
        }

        protected MusicType DefaultValueMusicType(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.MusicType:
                    return default(MusicType);
                default:
                    throw new ArgumentException($"Unknown index for field type MusicType: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.WaterHeight:
                    return WaterHeight;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.WaterHeight:
                    SetWaterHeight(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.WaterHeight:
                    _hasBeenSetTracker[index] = false;
                    WaterHeight = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.WaterHeight:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Int32
        protected ObjectCentralizationSubscriptions<Int32> _Int32_subscriptions;
        Int32 IPropertySupporter<Int32>.Get(int index)
        {
            return GetInt32(index: index);
        }

        protected Int32 GetInt32(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.FactionRank:
                    return FactionRank;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        void IPropertySupporter<Int32>.Set(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetInt32(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.FactionRank:
                    SetFactionRank(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        bool IPropertySupporter<Int32>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Int32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Int32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.FactionRank:
                    _hasBeenSetTracker[index] = false;
                    FactionRank = default(Int32);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Int32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Int32_subscriptions == null)
            {
                _Int32_subscriptions = new ObjectCentralizationSubscriptions<Int32>();
            }
            _Int32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Unsubscribe(
            int index,
            object owner)
        {
            _Int32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Int32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Int32 IPropertySupporter<Int32>.DefaultValue(int index)
        {
            return DefaultValueInt32(index: index);
        }

        protected Int32 DefaultValueInt32(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.FactionRank:
                    return default(Int32);
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        #endregion

        #region IPropertySupporter PathGrid
        protected ObjectCentralizationSubscriptions<PathGrid> _PathGrid_subscriptions;
        PathGrid IPropertySupporter<PathGrid>.Get(int index)
        {
            return GetPathGrid(index: index);
        }

        protected PathGrid GetPathGrid(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.PathGrid:
                    return PathGrid;
                default:
                    throw new ArgumentException($"Unknown index for field type PathGrid: {index}");
            }
        }

        void IPropertySupporter<PathGrid>.Set(
            int index,
            PathGrid item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetPathGrid(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetPathGrid(
            int index,
            PathGrid item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.PathGrid:
                    SetPathGrid(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type PathGrid: {index}");
            }
        }

        bool IPropertySupporter<PathGrid>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<PathGrid>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<PathGrid>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetPathGrid(
                index: index,
                cmds: cmds);
        }

        protected void UnsetPathGrid(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.PathGrid:
                    _hasBeenSetTracker[index] = false;
                    PathGrid = default(PathGrid);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type PathGrid: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<PathGrid>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<PathGrid> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_PathGrid_subscriptions == null)
            {
                _PathGrid_subscriptions = new ObjectCentralizationSubscriptions<PathGrid>();
            }
            _PathGrid_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<PathGrid>.Unsubscribe(
            int index,
            object owner)
        {
            _PathGrid_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<PathGrid>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        PathGrid IPropertySupporter<PathGrid>.DefaultValue(int index)
        {
            return DefaultValuePathGrid(index: index);
        }

        protected PathGrid DefaultValuePathGrid(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.PathGrid:
                    return default(PathGrid);
                default:
                    throw new ArgumentException($"Unknown index for field type PathGrid: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Landscape
        protected ObjectCentralizationSubscriptions<Landscape> _Landscape_subscriptions;
        Landscape IPropertySupporter<Landscape>.Get(int index)
        {
            return GetLandscape(index: index);
        }

        protected Landscape GetLandscape(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Landscape:
                    return Landscape;
                default:
                    throw new ArgumentException($"Unknown index for field type Landscape: {index}");
            }
        }

        void IPropertySupporter<Landscape>.Set(
            int index,
            Landscape item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetLandscape(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetLandscape(
            int index,
            Landscape item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Landscape:
                    SetLandscape(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Landscape: {index}");
            }
        }

        bool IPropertySupporter<Landscape>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Landscape>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Landscape>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetLandscape(
                index: index,
                cmds: cmds);
        }

        protected void UnsetLandscape(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Landscape:
                    _hasBeenSetTracker[index] = false;
                    Landscape = default(Landscape);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Landscape: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Landscape>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Landscape> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Landscape_subscriptions == null)
            {
                _Landscape_subscriptions = new ObjectCentralizationSubscriptions<Landscape>();
            }
            _Landscape_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Landscape>.Unsubscribe(
            int index,
            object owner)
        {
            _Landscape_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Landscape>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Landscape IPropertySupporter<Landscape>.DefaultValue(int index)
        {
            return DefaultValueLandscape(index: index);
        }

        protected Landscape DefaultValueLandscape(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Landscape:
                    return default(Landscape);
                default:
                    throw new ArgumentException($"Unknown index for field type Landscape: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Cell_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Climate_Property;
            yield return Water_Property;
            yield return Owner_Property;
            yield return GlobalVariable_Property;
            if (PathGrid != null)
            {
                foreach (var item in PathGrid.Links)
                {
                    yield return item;
                }
            }
            if (Landscape != null)
            {
                foreach (var item in Landscape.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Cell Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Cell Create_Binary(
            MutagenFrame frame,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static Cell Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = UtilityTranslation.MajorRecordParse<Cell>(
                record: new Cell(),
                frame: frame,
                errorMask: errorMask,
                recType: Cell_Registration.CELL_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            try
            {
                CustomBinaryEnd_Import(
                    frame: frame,
                    obj: ret,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Cell Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Cell Create_Binary(
            string path,
            out Cell_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Cell Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Cell Create_Binary(
            Stream stream,
            out Cell_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            CellCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Cell item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Cell item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                        if (EnumBinaryTranslation<Cell.Flag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Cell.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Flags);
                case "XCLC":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                        if (Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out P2Int GridParse,
                            errorMask: errorMask))
                        {
                            item.Grid = GridParse;
                        }
                        else
                        {
                            item.UnsetGrid();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Grid);
                case "XCLL":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                        if (LoquiBinaryTranslation<CellLighting>.Instance.Parse(
                            frame: frame,
                            item: out CellLighting LightingParse,
                            errorMask: errorMask))
                        {
                            item.Lighting = LightingParse;
                        }
                        else
                        {
                            item.UnsetLighting();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Lighting);
                case "XCLR":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Region>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Regions,
                        fieldIndex: (int)Cell_FieldIndex.Regions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Regions);
                case "XCMT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                        if (EnumBinaryTranslation<MusicType>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.UnsetMusicType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.MusicType);
                case "XCLW":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single WaterHeightParse,
                            errorMask: errorMask))
                        {
                            item.WaterHeight = WaterHeightParse;
                        }
                        else
                        {
                            item.UnsetWaterHeight();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.WaterHeight);
                case "XCCM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Cell_FieldIndex.Climate,
                        item: item.Climate_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Climate);
                case "XCWT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Cell_FieldIndex.Water,
                        item: item.Water_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Water);
                case "XOWN":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Cell_FieldIndex.Owner,
                        item: item.Owner_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Owner);
                case "XRNK":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 FactionRankParse,
                            errorMask: errorMask))
                        {
                            item.FactionRank = FactionRankParse;
                        }
                        else
                        {
                            item.UnsetFactionRank();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.FactionRank);
                case "XGLB":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                        item: item.GlobalVariable_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.GlobalVariable);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        static partial void CustomBinaryEnd_Import(
            MutagenFrame frame,
            Cell obj,
            ErrorMaskBuilder errorMask);
        static partial void CustomBinaryEnd_Export(
            MutagenWriter writer,
            Cell obj,
            ErrorMaskBuilder errorMask);
        public static void CustomBinaryEnd_ExportInternal(
            MutagenWriter writer,
            Cell obj,
            ErrorMaskBuilder errorMask)
        {
            CustomBinaryEnd_Export(
                writer: writer,
                obj: obj,
                errorMask: errorMask);
        }
        #endregion

        public Cell Copy(
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            return Cell.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Cell Copy(
            ICell item,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            Cell ret;
            if (item.GetType().Equals(typeof(Cell)))
            {
                ret = new Cell();
            }
            else
            {
                ret = (Cell)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Cell Copy_ToLoqui(
            ICellGetter item,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            Cell ret;
            if (item.GetType().Equals(typeof(Cell)))
            {
                ret = new Cell() as Cell;
            }
            else
            {
                ret = (Cell)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ICellGetter rhs,
            Cell_CopyMask copyMask,
            ICellGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICellGetter rhs,
            out Cell_ErrorMask errorMask,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICellGetter rhs,
            ErrorMaskBuilder errorMask,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            CellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    this.SetFlags(
                        (Cell.Flag)obj,
                        cmds: cmds);
                    break;
                case Cell_FieldIndex.Grid:
                    this.SetGrid(
                        (P2Int)obj,
                        cmds: cmds);
                    break;
                case Cell_FieldIndex.Lighting:
                    this.SetLighting(
                        (CellLighting)obj,
                        cmds: cmds);
                    break;
                case Cell_FieldIndex.Regions:
                    this._Regions.SetTo((IEnumerable<FormIDLink<Region>>)obj, cmds);
                    break;
                case Cell_FieldIndex.MusicType:
                    this.SetMusicType(
                        (MusicType)obj,
                        cmds: cmds);
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.SetWaterHeight(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate_Property.Set(
                        (FormIDSetLink<Climate>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Water:
                    this.Water_Property.Set(
                        (FormIDSetLink<Water>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Owner:
                    this.Owner_Property.Set(
                        (FormIDSetLink<Faction>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.FactionRank:
                    this.SetFactionRank(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    this.GlobalVariable_Property.Set(
                        (FormIDSetLink<Global>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.SetPathGrid(
                        (PathGrid)obj,
                        cmds: cmds);
                    break;
                case Cell_FieldIndex.Landscape:
                    this.SetLandscape(
                        (Landscape)obj,
                        cmds: cmds);
                    break;
                case Cell_FieldIndex.Persistent:
                    this._Persistent.SetTo((IEnumerable<Placed>)obj, cmds);
                    break;
                case Cell_FieldIndex.Temporary:
                    this._Temporary.SetTo((IEnumerable<Placed>)obj, cmds);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this._VisibleWhenDistant.SetTo((IEnumerable<Placed>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CellCommon.Clear(this, cmds);
        }


        public new static Cell Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Cell();
            foreach (var pair in fields)
            {
                CopyInInternal_Cell(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Cell(Cell obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Cell_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    obj.SetFlags(
                        (Cell.Flag)pair.Value,
                        cmds: null);
                    break;
                case Cell_FieldIndex.Grid:
                    obj.SetGrid(
                        (P2Int)pair.Value,
                        cmds: null);
                    break;
                case Cell_FieldIndex.Lighting:
                    obj.SetLighting(
                        (CellLighting)pair.Value,
                        cmds: null);
                    break;
                case Cell_FieldIndex.Regions:
                    obj._Regions.SetTo((IEnumerable<FormIDLink<Region>>)pair.Value, null);
                    break;
                case Cell_FieldIndex.MusicType:
                    obj.SetMusicType(
                        (MusicType)pair.Value,
                        cmds: null);
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj.SetWaterHeight(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.Set(
                        (FormIDSetLink<Climate>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.Set(
                        (FormIDSetLink<Water>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Owner:
                    obj.Owner_Property.Set(
                        (FormIDSetLink<Faction>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.FactionRank:
                    obj.SetFactionRank(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Set(
                        (FormIDSetLink<Global>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj.SetPathGrid(
                        (PathGrid)pair.Value,
                        cmds: null);
                    break;
                case Cell_FieldIndex.Landscape:
                    obj.SetLandscape(
                        (Landscape)pair.Value,
                        cmds: null);
                    break;
                case Cell_FieldIndex.Persistent:
                    obj._Persistent.SetTo((IEnumerable<Placed>)pair.Value, null);
                    break;
                case Cell_FieldIndex.Temporary:
                    obj._Temporary.SetTo((IEnumerable<Placed>)pair.Value, null);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj._VisibleWhenDistant.SetTo((IEnumerable<Placed>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Cell obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICell : ICellGetter, INamedMajorRecord, ILoquiClass<ICell, ICellGetter>, ILoquiClass<Cell, ICellGetter>
    {
        new Cell.Flag Flags { get; set; }
        new INotifyingSetItem<Cell.Flag> Flags_Property { get; }

        new P2Int Grid { get; set; }
        new INotifyingSetItem<P2Int> Grid_Property { get; }

        new CellLighting Lighting { get; set; }
        new INotifyingSetItem<CellLighting> Lighting_Property { get; }

        new INotifyingList<FormIDLink<Region>> Regions { get; }
        new MusicType MusicType { get; set; }
        new INotifyingSetItem<MusicType> MusicType_Property { get; }

        new Single WaterHeight { get; set; }
        new INotifyingSetItem<Single> WaterHeight_Property { get; }

        new Climate Climate { get; set; }
        new Water Water { get; set; }
        new Faction Owner { get; set; }
        new Int32 FactionRank { get; set; }
        new INotifyingSetItem<Int32> FactionRank_Property { get; }

        new Global GlobalVariable { get; set; }
        new PathGrid PathGrid { get; set; }
        new INotifyingSetItem<PathGrid> PathGrid_Property { get; }

        new Landscape Landscape { get; set; }
        new INotifyingSetItem<Landscape> Landscape_Property { get; }

        new INotifyingList<Placed> Persistent { get; }
        new INotifyingList<Placed> Temporary { get; }
        new INotifyingList<Placed> VisibleWhenDistant { get; }
    }

    public partial interface ICellGetter : INamedMajorRecordGetter
    {
        #region Flags
        Cell.Flag Flags { get; }
        INotifyingSetItemGetter<Cell.Flag> Flags_Property { get; }

        #endregion
        #region Grid
        P2Int Grid { get; }
        INotifyingSetItemGetter<P2Int> Grid_Property { get; }

        #endregion
        #region Lighting
        CellLighting Lighting { get; }
        INotifyingSetItemGetter<CellLighting> Lighting_Property { get; }

        #endregion
        #region Regions
        INotifyingListGetter<FormIDLink<Region>> Regions { get; }
        #endregion
        #region MusicType
        MusicType MusicType { get; }
        INotifyingSetItemGetter<MusicType> MusicType_Property { get; }

        #endregion
        #region WaterHeight
        Single WaterHeight { get; }
        INotifyingSetItemGetter<Single> WaterHeight_Property { get; }

        #endregion
        #region Climate
        Climate Climate { get; }
        FormIDSetLink<Climate> Climate_Property { get; }

        #endregion
        #region Water
        Water Water { get; }
        FormIDSetLink<Water> Water_Property { get; }

        #endregion
        #region Owner
        Faction Owner { get; }
        FormIDSetLink<Faction> Owner_Property { get; }

        #endregion
        #region FactionRank
        Int32 FactionRank { get; }
        INotifyingSetItemGetter<Int32> FactionRank_Property { get; }

        #endregion
        #region GlobalVariable
        Global GlobalVariable { get; }
        FormIDSetLink<Global> GlobalVariable_Property { get; }

        #endregion
        #region PathGrid
        PathGrid PathGrid { get; }
        INotifyingSetItemGetter<PathGrid> PathGrid_Property { get; }

        #endregion
        #region Landscape
        Landscape Landscape { get; }
        INotifyingSetItemGetter<Landscape> Landscape_Property { get; }

        #endregion
        #region Persistent
        INotifyingListGetter<Placed> Persistent { get; }
        #endregion
        #region Temporary
        INotifyingListGetter<Placed> Temporary { get; }
        #endregion
        #region VisibleWhenDistant
        INotifyingListGetter<Placed> VisibleWhenDistant { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Cell_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Flags = 6,
        Grid = 7,
        Lighting = 8,
        Regions = 9,
        MusicType = 10,
        WaterHeight = 11,
        Climate = 12,
        Water = 13,
        Owner = 14,
        FactionRank = 15,
        GlobalVariable = 16,
        PathGrid = 17,
        Landscape = 18,
        Persistent = 19,
        Temporary = 20,
        VisibleWhenDistant = 21,
    }
    #endregion

    #region Registration
    public class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 120,
            version: 0);

        public const string GUID = "d54abb07-d896-4ddb-b857-9b9df945dd1e";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Cell_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell_ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type CommonType = typeof(CellCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)Cell_FieldIndex.Flags;
                case "GRID":
                    return (ushort)Cell_FieldIndex.Grid;
                case "LIGHTING":
                    return (ushort)Cell_FieldIndex.Lighting;
                case "REGIONS":
                    return (ushort)Cell_FieldIndex.Regions;
                case "MUSICTYPE":
                    return (ushort)Cell_FieldIndex.MusicType;
                case "WATERHEIGHT":
                    return (ushort)Cell_FieldIndex.WaterHeight;
                case "CLIMATE":
                    return (ushort)Cell_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Cell_FieldIndex.Water;
                case "OWNER":
                    return (ushort)Cell_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)Cell_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)Cell_FieldIndex.GlobalVariable;
                case "PATHGRID":
                    return (ushort)Cell_FieldIndex.PathGrid;
                case "LANDSCAPE":
                    return (ushort)Cell_FieldIndex.Landscape;
                case "PERSISTENT":
                    return (ushort)Cell_FieldIndex.Persistent;
                case "TEMPORARY":
                    return (ushort)Cell_FieldIndex.Temporary;
                case "VISIBLEWHENDISTANT":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistant;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    return "Flags";
                case Cell_FieldIndex.Grid:
                    return "Grid";
                case Cell_FieldIndex.Lighting:
                    return "Lighting";
                case Cell_FieldIndex.Regions:
                    return "Regions";
                case Cell_FieldIndex.MusicType:
                    return "MusicType";
                case Cell_FieldIndex.WaterHeight:
                    return "WaterHeight";
                case Cell_FieldIndex.Climate:
                    return "Climate";
                case Cell_FieldIndex.Water:
                    return "Water";
                case Cell_FieldIndex.Owner:
                    return "Owner";
                case Cell_FieldIndex.FactionRank:
                    return "FactionRank";
                case Cell_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case Cell_FieldIndex.PathGrid:
                    return "PathGrid";
                case Cell_FieldIndex.Landscape:
                    return "Landscape";
                case Cell_FieldIndex.Persistent:
                    return "Persistent";
                case Cell_FieldIndex.Temporary:
                    return "Temporary";
                case Cell_FieldIndex.VisibleWhenDistant:
                    return "VisibleWhenDistant";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    return typeof(Cell.Flag);
                case Cell_FieldIndex.Grid:
                    return typeof(P2Int);
                case Cell_FieldIndex.Lighting:
                    return typeof(CellLighting);
                case Cell_FieldIndex.Regions:
                    return typeof(NotifyingList<FormIDLink<Region>>);
                case Cell_FieldIndex.MusicType:
                    return typeof(MusicType);
                case Cell_FieldIndex.WaterHeight:
                    return typeof(Single);
                case Cell_FieldIndex.Climate:
                    return typeof(FormIDSetLink<Climate>);
                case Cell_FieldIndex.Water:
                    return typeof(FormIDSetLink<Water>);
                case Cell_FieldIndex.Owner:
                    return typeof(FormIDSetLink<Faction>);
                case Cell_FieldIndex.FactionRank:
                    return typeof(Int32);
                case Cell_FieldIndex.GlobalVariable:
                    return typeof(FormIDSetLink<Global>);
                case Cell_FieldIndex.PathGrid:
                    return typeof(PathGrid);
                case Cell_FieldIndex.Landscape:
                    return typeof(Landscape);
                case Cell_FieldIndex.Persistent:
                    return typeof(NotifyingList<Placed>);
                case Cell_FieldIndex.Temporary:
                    return typeof(NotifyingList<Placed>);
                case Cell_FieldIndex.VisibleWhenDistant:
                    return typeof(NotifyingList<Placed>);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType XCLC_HEADER = new RecordType("XCLC");
        public static readonly RecordType XCLL_HEADER = new RecordType("XCLL");
        public static readonly RecordType XCLR_HEADER = new RecordType("XCLR");
        public static readonly RecordType XCMT_HEADER = new RecordType("XCMT");
        public static readonly RecordType XCLW_HEADER = new RecordType("XCLW");
        public static readonly RecordType XCCM_HEADER = new RecordType("XCCM");
        public static readonly RecordType XCWT_HEADER = new RecordType("XCWT");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CELL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 16;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CellCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICell item,
            ICellGetter rhs,
            ICellGetter def,
            ErrorMaskBuilder errorMask,
            Cell_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs: rhs.Flags_Property,
                        def: def?.Flags_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Grid ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Grid);
                try
                {
                    item.Grid_Property.SetToWithDefault(
                        rhs: rhs.Grid_Property,
                        def: def?.Grid_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Lighting.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Lighting);
                try
                {
                    item.Lighting_Property.SetToWithDefault(
                        rhs.Lighting_Property,
                        def?.Lighting_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Lighting.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    CellLightingCommon.CopyFieldsFrom(
                                        item: item.Lighting,
                                        rhs: rhs.Lighting,
                                        def: def?.Lighting,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Lighting.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(CellLighting);
                                    return CellLighting.Copy(
                                        r,
                                        copyMask?.Lighting?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Lighting?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Regions != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Regions);
                try
                {
                    item.Regions.SetToWithDefault(
                        rhs.Regions,
                        def?.Regions,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MusicType ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.MusicType);
                try
                {
                    item.MusicType_Property.SetToWithDefault(
                        rhs: rhs.MusicType_Property,
                        def: def?.MusicType_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.WaterHeight ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.WaterHeight);
                try
                {
                    item.WaterHeight_Property.SetToWithDefault(
                        rhs: rhs.WaterHeight_Property,
                        def: def?.WaterHeight_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Climate ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Climate);
                try
                {
                    item.Climate_Property.SetToWithDefault(
                        rhs: rhs.Climate_Property,
                        def: def?.Climate_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Water ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Water);
                try
                {
                    item.Water_Property.SetToWithDefault(
                        rhs: rhs.Water_Property,
                        def: def?.Water_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Owner ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Owner);
                try
                {
                    item.Owner_Property.SetToWithDefault(
                        rhs: rhs.Owner_Property,
                        def: def?.Owner_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FactionRank ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.FactionRank);
                try
                {
                    item.FactionRank_Property.SetToWithDefault(
                        rhs: rhs.FactionRank_Property,
                        def: def?.FactionRank_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.GlobalVariable ?? true)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.GlobalVariable);
                try
                {
                    item.GlobalVariable_Property.SetToWithDefault(
                        rhs: rhs.GlobalVariable_Property,
                        def: def?.GlobalVariable_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.PathGrid.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.PathGrid);
                try
                {
                    item.PathGrid_Property.SetToWithDefault(
                        rhs.PathGrid_Property,
                        def?.PathGrid_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.PathGrid.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    PathGridCommon.CopyFieldsFrom(
                                        item: item.PathGrid,
                                        rhs: rhs.PathGrid,
                                        def: def?.PathGrid,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.PathGrid.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(PathGrid);
                                    return PathGrid.Copy(
                                        r,
                                        copyMask?.PathGrid?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.PathGrid?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Landscape.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Landscape);
                try
                {
                    item.Landscape_Property.SetToWithDefault(
                        rhs.Landscape_Property,
                        def?.Landscape_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Landscape.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    LandscapeCommon.CopyFieldsFrom(
                                        item: item.Landscape,
                                        rhs: rhs.Landscape,
                                        def: def?.Landscape,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Landscape.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Landscape);
                                    return Landscape.Copy(
                                        r,
                                        copyMask?.Landscape?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Landscape?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Persistent.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Persistent);
                try
                {
                    item.Persistent.SetToWithDefault(
                        rhs: rhs.Persistent,
                        def: def?.Persistent,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Persistent.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Placed);
                                    return Placed.Copy(
                                        r,
                                        copyMask?.Persistent?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Persistent.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Temporary.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.Temporary);
                try
                {
                    item.Temporary.SetToWithDefault(
                        rhs: rhs.Temporary,
                        def: def?.Temporary,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Temporary.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Placed);
                                    return Placed.Copy(
                                        r,
                                        copyMask?.Temporary?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Temporary.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.VisibleWhenDistant.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                try
                {
                    item.VisibleWhenDistant.SetToWithDefault(
                        rhs: rhs.VisibleWhenDistant,
                        def: def?.VisibleWhenDistant,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.VisibleWhenDistant.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Placed);
                                    return Placed.Copy(
                                        r,
                                        copyMask?.VisibleWhenDistant?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.VisibleWhenDistant.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICell obj,
            NotifyingFireParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Grid:
                    obj.Grid_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Lighting:
                    obj.Lighting_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Regions:
                    obj.Regions.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.MusicType:
                    obj.MusicType_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj.WaterHeight_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Owner:
                    obj.Owner_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.FactionRank:
                    obj.FactionRank_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj.PathGrid_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Landscape:
                    obj.Landscape_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Persistent:
                    obj.Persistent.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Temporary:
                    obj.Temporary.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj.VisibleWhenDistant.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICell obj,
            NotifyingUnsetParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Grid:
                    obj.Grid_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Lighting:
                    obj.Lighting_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Regions:
                    obj.Regions.Unset(cmds);
                    break;
                case Cell_FieldIndex.MusicType:
                    obj.MusicType_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj.WaterHeight_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Owner:
                    obj.Owner_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.FactionRank:
                    obj.FactionRank_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj.PathGrid_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Landscape:
                    obj.Landscape_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Persistent:
                    obj.Persistent.Unset(cmds);
                    break;
                case Cell_FieldIndex.Temporary:
                    obj.Temporary.Unset(cmds);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj.VisibleWhenDistant.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICell obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case Cell_FieldIndex.Grid:
                    return obj.Grid_Property.HasBeenSet;
                case Cell_FieldIndex.Lighting:
                    return obj.Lighting_Property.HasBeenSet;
                case Cell_FieldIndex.Regions:
                    return obj.Regions.HasBeenSet;
                case Cell_FieldIndex.MusicType:
                    return obj.MusicType_Property.HasBeenSet;
                case Cell_FieldIndex.WaterHeight:
                    return obj.WaterHeight_Property.HasBeenSet;
                case Cell_FieldIndex.Climate:
                    return obj.Climate_Property.HasBeenSet;
                case Cell_FieldIndex.Water:
                    return obj.Water_Property.HasBeenSet;
                case Cell_FieldIndex.Owner:
                    return obj.Owner_Property.HasBeenSet;
                case Cell_FieldIndex.FactionRank:
                    return obj.FactionRank_Property.HasBeenSet;
                case Cell_FieldIndex.GlobalVariable:
                    return obj.GlobalVariable_Property.HasBeenSet;
                case Cell_FieldIndex.PathGrid:
                    return obj.PathGrid_Property.HasBeenSet;
                case Cell_FieldIndex.Landscape:
                    return obj.Landscape_Property.HasBeenSet;
                case Cell_FieldIndex.Persistent:
                    return obj.Persistent.HasBeenSet;
                case Cell_FieldIndex.Temporary:
                    return obj.Temporary.HasBeenSet;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return obj.VisibleWhenDistant.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ICellGetter obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    return obj.Flags;
                case Cell_FieldIndex.Grid:
                    return obj.Grid;
                case Cell_FieldIndex.Lighting:
                    return obj.Lighting;
                case Cell_FieldIndex.Regions:
                    return obj.Regions;
                case Cell_FieldIndex.MusicType:
                    return obj.MusicType;
                case Cell_FieldIndex.WaterHeight:
                    return obj.WaterHeight;
                case Cell_FieldIndex.Climate:
                    return obj.Climate;
                case Cell_FieldIndex.Water:
                    return obj.Water;
                case Cell_FieldIndex.Owner:
                    return obj.Owner;
                case Cell_FieldIndex.FactionRank:
                    return obj.FactionRank;
                case Cell_FieldIndex.GlobalVariable:
                    return obj.GlobalVariable;
                case Cell_FieldIndex.PathGrid:
                    return obj.PathGrid;
                case Cell_FieldIndex.Landscape:
                    return obj.Landscape;
                case Cell_FieldIndex.Persistent:
                    return obj.Persistent;
                case Cell_FieldIndex.Temporary:
                    return obj.Temporary;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return obj.VisibleWhenDistant;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ICell item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.Grid_Property.Unset(cmds.ToUnsetParams());
            item.Lighting_Property.Unset(cmds.ToUnsetParams());
            item.Regions.Unset(cmds.ToUnsetParams());
            item.MusicType_Property.Unset(cmds.ToUnsetParams());
            item.WaterHeight_Property.Unset(cmds.ToUnsetParams());
            item.Climate_Property.Unset(cmds.ToUnsetParams());
            item.Water_Property.Unset(cmds.ToUnsetParams());
            item.Owner_Property.Unset(cmds.ToUnsetParams());
            item.FactionRank_Property.Unset(cmds.ToUnsetParams());
            item.GlobalVariable_Property.Unset(cmds.ToUnsetParams());
            item.PathGrid_Property.Unset(cmds.ToUnsetParams());
            item.Landscape_Property.Unset(cmds.ToUnsetParams());
            item.Persistent.Unset(cmds.ToUnsetParams());
            item.Temporary.Unset(cmds.ToUnsetParams());
            item.VisibleWhenDistant.Unset(cmds.ToUnsetParams());
        }

        public static Cell_Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs)
        {
            var ret = new Cell_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            ret.Grid = item.Grid_Property.Equals(rhs.Grid_Property, (l, r) => l == r);
            ret.Lighting = item.Lighting_Property.LoquiEqualsHelper(rhs.Lighting_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.Regions.HasBeenSet == rhs.Regions.HasBeenSet)
            {
                if (item.Regions.HasBeenSet)
                {
                    ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Regions.Specific = item.Regions.SelectAgainst<FormIDLink<Region>, bool>(rhs.Regions, ((l, r) => object.Equals(l, r)), out ret.Regions.Overall);
                    ret.Regions.Overall = ret.Regions.Overall && ret.Regions.Specific.All((b) => b);
                }
                else
                {
                    ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Regions.Overall = true;
                }
            }
            else
            {
                ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                ret.Regions.Overall = false;
            }
            ret.MusicType = item.MusicType_Property.Equals(rhs.MusicType_Property, (l, r) => l == r);
            ret.WaterHeight = item.WaterHeight_Property.Equals(rhs.WaterHeight_Property, (l, r) => l == r);
            ret.Climate = item.Climate_Property.Equals(rhs.Climate_Property, (l, r) => l == r);
            ret.Water = item.Water_Property.Equals(rhs.Water_Property, (l, r) => l == r);
            ret.Owner = item.Owner_Property.Equals(rhs.Owner_Property, (l, r) => l == r);
            ret.FactionRank = item.FactionRank_Property.Equals(rhs.FactionRank_Property, (l, r) => l == r);
            ret.GlobalVariable = item.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property, (l, r) => l == r);
            ret.PathGrid = item.PathGrid_Property.LoquiEqualsHelper(rhs.PathGrid_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Landscape = item.Landscape_Property.LoquiEqualsHelper(rhs.Landscape_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.Persistent.HasBeenSet == rhs.Persistent.HasBeenSet)
            {
                if (item.Persistent.HasBeenSet)
                {
                    ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.Persistent.Specific = item.Persistent.SelectAgainst<Placed, MaskItem<bool, Placed_Mask<bool>>>(rhs.Persistent, ((l, r) =>
                    {
                        MaskItem<bool, Placed_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Persistent.Overall);
                    ret.Persistent.Overall = ret.Persistent.Overall && ret.Persistent.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.Persistent.Overall = true;
                }
            }
            else
            {
                ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                ret.Persistent.Overall = false;
            }
            if (item.Temporary.HasBeenSet == rhs.Temporary.HasBeenSet)
            {
                if (item.Temporary.HasBeenSet)
                {
                    ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.Temporary.Specific = item.Temporary.SelectAgainst<Placed, MaskItem<bool, Placed_Mask<bool>>>(rhs.Temporary, ((l, r) =>
                    {
                        MaskItem<bool, Placed_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Temporary.Overall);
                    ret.Temporary.Overall = ret.Temporary.Overall && ret.Temporary.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.Temporary.Overall = true;
                }
            }
            else
            {
                ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                ret.Temporary.Overall = false;
            }
            if (item.VisibleWhenDistant.HasBeenSet == rhs.VisibleWhenDistant.HasBeenSet)
            {
                if (item.VisibleWhenDistant.HasBeenSet)
                {
                    ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.VisibleWhenDistant.Specific = item.VisibleWhenDistant.SelectAgainst<Placed, MaskItem<bool, Placed_Mask<bool>>>(rhs.VisibleWhenDistant, ((l, r) =>
                    {
                        MaskItem<bool, Placed_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.VisibleWhenDistant.Overall);
                    ret.VisibleWhenDistant.Overall = ret.VisibleWhenDistant.Overall && ret.VisibleWhenDistant.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.VisibleWhenDistant.Overall = true;
                }
            }
            else
            {
                ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                ret.VisibleWhenDistant.Overall = false;
            }
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ICellGetter item,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICellGetter item,
            FileGeneration fg,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Cell)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Cell)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Grid ?? true)
                {
                    fg.AppendLine($"Grid => {item.Grid}");
                }
                if (printMask?.Lighting?.Overall ?? true)
                {
                    item.Lighting?.ToString(fg, "Lighting");
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Regions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {item.MusicType}");
                }
                if (printMask?.WaterHeight ?? true)
                {
                    fg.AppendLine($"WaterHeight => {item.WaterHeight}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {item.Climate_Property}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {item.Water_Property}");
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {item.Owner_Property}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {item.FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {item.GlobalVariable_Property}");
                }
                if (printMask?.PathGrid?.Overall ?? true)
                {
                    item.PathGrid?.ToString(fg, "PathGrid");
                }
                if (printMask?.Landscape?.Overall ?? true)
                {
                    item.Landscape?.ToString(fg, "Landscape");
                }
                if (printMask?.Persistent?.Overall ?? true)
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Persistent)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Temporary?.Overall ?? true)
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Temporary)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VisibleWhenDistant?.Overall ?? true)
                {
                    fg.AppendLine("VisibleWhenDistant =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.VisibleWhenDistant)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICellGetter item,
            Cell_Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.Grid.HasValue && checkMask.Grid.Value != item.Grid_Property.HasBeenSet) return false;
            if (checkMask.Lighting.Overall.HasValue && checkMask.Lighting.Overall.Value != item.Lighting_Property.HasBeenSet) return false;
            if (checkMask.Lighting.Specific != null && (item.Lighting == null || !item.Lighting.HasBeenSet(checkMask.Lighting.Specific))) return false;
            if (checkMask.Regions.Overall.HasValue && checkMask.Regions.Overall.Value != item.Regions.HasBeenSet) return false;
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != item.MusicType_Property.HasBeenSet) return false;
            if (checkMask.WaterHeight.HasValue && checkMask.WaterHeight.Value != item.WaterHeight_Property.HasBeenSet) return false;
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != item.Climate_Property.HasBeenSet) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != item.Water_Property.HasBeenSet) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != item.Owner_Property.HasBeenSet) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != item.FactionRank_Property.HasBeenSet) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != item.GlobalVariable_Property.HasBeenSet) return false;
            if (checkMask.PathGrid.Overall.HasValue && checkMask.PathGrid.Overall.Value != item.PathGrid_Property.HasBeenSet) return false;
            if (checkMask.PathGrid.Specific != null && (item.PathGrid == null || !item.PathGrid.HasBeenSet(checkMask.PathGrid.Specific))) return false;
            if (checkMask.Landscape.Overall.HasValue && checkMask.Landscape.Overall.Value != item.Landscape_Property.HasBeenSet) return false;
            if (checkMask.Landscape.Specific != null && (item.Landscape == null || !item.Landscape.HasBeenSet(checkMask.Landscape.Specific))) return false;
            if (checkMask.Persistent.Overall.HasValue && checkMask.Persistent.Overall.Value != item.Persistent.HasBeenSet) return false;
            if (checkMask.Temporary.Overall.HasValue && checkMask.Temporary.Overall.Value != item.Temporary.HasBeenSet) return false;
            if (checkMask.VisibleWhenDistant.Overall.HasValue && checkMask.VisibleWhenDistant.Overall.Value != item.VisibleWhenDistant.HasBeenSet) return false;
            return true;
        }

        public static Cell_Mask<bool> GetHasBeenSetMask(ICellGetter item)
        {
            var ret = new Cell_Mask<bool>();
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.Grid = item.Grid_Property.HasBeenSet;
            ret.Lighting = new MaskItem<bool, CellLighting_Mask<bool>>(item.Lighting_Property.HasBeenSet, CellLightingCommon.GetHasBeenSetMask(item.Lighting));
            ret.Regions = new MaskItem<bool, IEnumerable<bool>>(item.Regions.HasBeenSet, null);
            ret.MusicType = item.MusicType_Property.HasBeenSet;
            ret.WaterHeight = item.WaterHeight_Property.HasBeenSet;
            ret.Climate = item.Climate_Property.HasBeenSet;
            ret.Water = item.Water_Property.HasBeenSet;
            ret.Owner = item.Owner_Property.HasBeenSet;
            ret.FactionRank = item.FactionRank_Property.HasBeenSet;
            ret.GlobalVariable = item.GlobalVariable_Property.HasBeenSet;
            ret.PathGrid = new MaskItem<bool, PathGrid_Mask<bool>>(item.PathGrid_Property.HasBeenSet, PathGridCommon.GetHasBeenSetMask(item.PathGrid));
            ret.Landscape = new MaskItem<bool, Landscape_Mask<bool>>(item.Landscape_Property.HasBeenSet, LandscapeCommon.GetHasBeenSetMask(item.Landscape));
            ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>(item.Persistent.HasBeenSet, item.Persistent.Select((i) => new MaskItem<bool, Placed_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>(item.Temporary.HasBeenSet, item.Temporary.Select((i) => new MaskItem<bool, Placed_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>(item.VisibleWhenDistant.HasBeenSet, item.VisibleWhenDistant.Select((i) => new MaskItem<bool, Placed_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Cell_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Cell_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Cell_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ICellGetter item,
            bool doMasks,
            out Cell_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            ICellGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Cell");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Cell");
            }
            if (item.Flags_Property.HasBeenSet)
            {
                EnumXmlTranslation<Cell.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)Cell_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Grid_Property.HasBeenSet)
            {
                P2IntXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Grid),
                    item: item.Grid_Property,
                    fieldIndex: (int)Cell_FieldIndex.Grid,
                    errorMask: errorMask);
            }
            if (item.Lighting_Property.HasBeenSet)
            {
                LoquiXmlTranslation<CellLighting>.Instance.Write(
                    node: elem,
                    item: item.Lighting_Property,
                    name: nameof(item.Lighting),
                    fieldIndex: (int)Cell_FieldIndex.Lighting,
                    errorMask: errorMask);
            }
            if (item.Regions.HasBeenSet)
            {
                ListXmlTranslation<FormIDLink<Region>>.Instance.Write(
                    node: elem,
                    name: nameof(item.Regions),
                    item: item.Regions,
                    fieldIndex: (int)Cell_FieldIndex.Regions,
                    errorMask: errorMask,
                    transl: (XElement subNode, FormIDLink<Region> subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.MusicType_Property.HasBeenSet)
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: elem,
                    name: nameof(item.MusicType),
                    item: item.MusicType_Property,
                    fieldIndex: (int)Cell_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if (item.WaterHeight_Property.HasBeenSet)
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.WaterHeight),
                    item: item.WaterHeight_Property,
                    fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                    errorMask: errorMask);
            }
            if (item.Climate_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Climate),
                    item: item.Climate?.FormID,
                    fieldIndex: (int)Cell_FieldIndex.Climate,
                    errorMask: errorMask);
            }
            if (item.Water_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Water),
                    item: item.Water?.FormID,
                    fieldIndex: (int)Cell_FieldIndex.Water,
                    errorMask: errorMask);
            }
            if (item.Owner_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Owner),
                    item: item.Owner?.FormID,
                    fieldIndex: (int)Cell_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if (item.FactionRank_Property.HasBeenSet)
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank_Property,
                    fieldIndex: (int)Cell_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if (item.GlobalVariable_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable?.FormID,
                    fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if (item.PathGrid_Property.HasBeenSet)
            {
                LoquiXmlTranslation<PathGrid>.Instance.Write(
                    node: elem,
                    item: item.PathGrid_Property,
                    name: nameof(item.PathGrid),
                    fieldIndex: (int)Cell_FieldIndex.PathGrid,
                    errorMask: errorMask);
            }
            if (item.Landscape_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Landscape>.Instance.Write(
                    node: elem,
                    item: item.Landscape_Property,
                    name: nameof(item.Landscape),
                    fieldIndex: (int)Cell_FieldIndex.Landscape,
                    errorMask: errorMask);
            }
            if (item.Persistent.HasBeenSet)
            {
                ListXmlTranslation<Placed>.Instance.Write(
                    node: elem,
                    name: nameof(item.Persistent),
                    item: item.Persistent,
                    fieldIndex: (int)Cell_FieldIndex.Persistent,
                    errorMask: errorMask,
                    transl: (XElement subNode, Placed subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<Placed>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Temporary.HasBeenSet)
            {
                ListXmlTranslation<Placed>.Instance.Write(
                    node: elem,
                    name: nameof(item.Temporary),
                    item: item.Temporary,
                    fieldIndex: (int)Cell_FieldIndex.Temporary,
                    errorMask: errorMask,
                    transl: (XElement subNode, Placed subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<Placed>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.VisibleWhenDistant.HasBeenSet)
            {
                ListXmlTranslation<Placed>.Instance.Write(
                    node: elem,
                    name: nameof(item.VisibleWhenDistant),
                    item: item.VisibleWhenDistant,
                    fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistant,
                    errorMask: errorMask,
                    transl: (XElement subNode, Placed subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<Placed>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Cell item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Cell_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Cell item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Cell_Registration.CELL_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            Cell.CustomBinaryEnd_ExportInternal(
                writer: writer,
                obj: item,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Cell item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Cell.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: 1,
                fieldIndex: (int)Cell_FieldIndex.Flags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.DATA_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Grid_Property,
                fieldIndex: (int)Cell_FieldIndex.Grid,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLC_HEADER),
                nullable: false);
            LoquiBinaryTranslation<CellLighting>.Instance.Write(
                writer: writer,
                item: item.Lighting_Property,
                fieldIndex: (int)Cell_FieldIndex.Lighting,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Region>>.Instance.Write(
                writer: writer,
                items: item.Regions,
                fieldIndex: (int)Cell_FieldIndex.Regions,
                recordType: Cell_Registration.XCLR_HEADER,
                errorMask: errorMask,
                transl: FormIDBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                writer,
                item.MusicType_Property,
                length: 1,
                fieldIndex: (int)Cell_FieldIndex.MusicType,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCMT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.WaterHeight_Property,
                fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLW_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Climate_Property,
                fieldIndex: (int)Cell_FieldIndex.Climate,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCCM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Water_Property,
                fieldIndex: (int)Cell_FieldIndex.Water,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCWT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Owner_Property,
                fieldIndex: (int)Cell_FieldIndex.Owner,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XOWN_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FactionRank_Property,
                fieldIndex: (int)Cell_FieldIndex.FactionRank,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XRNK_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GlobalVariable_Property,
                fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XGLB_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Cell_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Cell_Mask<T>>
    {
        #region Ctors
        public Cell_Mask()
        {
        }

        public Cell_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.Grid = initialValue;
            this.Lighting = new MaskItem<T, CellLighting_Mask<T>>(initialValue, new CellLighting_Mask<T>(initialValue));
            this.Regions = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.MusicType = initialValue;
            this.WaterHeight = initialValue;
            this.Climate = initialValue;
            this.Water = initialValue;
            this.Owner = initialValue;
            this.FactionRank = initialValue;
            this.GlobalVariable = initialValue;
            this.PathGrid = new MaskItem<T, PathGrid_Mask<T>>(initialValue, new PathGrid_Mask<T>(initialValue));
            this.Landscape = new MaskItem<T, Landscape_Mask<T>>(initialValue, new Landscape_Mask<T>(initialValue));
            this.Persistent = new MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>>(initialValue, null);
            this.Temporary = new MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>>(initialValue, null);
            this.VisibleWhenDistant = new MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Flags;
        public T Grid;
        public MaskItem<T, CellLighting_Mask<T>> Lighting { get; set; }
        public MaskItem<T, IEnumerable<T>> Regions;
        public T MusicType;
        public T WaterHeight;
        public T Climate;
        public T Water;
        public T Owner;
        public T FactionRank;
        public T GlobalVariable;
        public MaskItem<T, PathGrid_Mask<T>> PathGrid { get; set; }
        public MaskItem<T, Landscape_Mask<T>> Landscape { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>> Persistent;
        public MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>> Temporary;
        public MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>> VisibleWhenDistant;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Cell_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cell_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Grid, rhs.Grid)) return false;
            if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
            if (!object.Equals(this.Regions, rhs.Regions)) return false;
            if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
            if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
            if (!object.Equals(this.Climate, rhs.Climate)) return false;
            if (!object.Equals(this.Water, rhs.Water)) return false;
            if (!object.Equals(this.Owner, rhs.Owner)) return false;
            if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
            if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
            if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
            if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
            if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
            if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
            if (!object.Equals(this.VisibleWhenDistant, rhs.VisibleWhenDistant)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Grid?.GetHashCode());
            ret = ret.CombineHashCode(this.Lighting?.GetHashCode());
            ret = ret.CombineHashCode(this.Regions?.GetHashCode());
            ret = ret.CombineHashCode(this.MusicType?.GetHashCode());
            ret = ret.CombineHashCode(this.WaterHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Climate?.GetHashCode());
            ret = ret.CombineHashCode(this.Water?.GetHashCode());
            ret = ret.CombineHashCode(this.Owner?.GetHashCode());
            ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
            ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
            ret = ret.CombineHashCode(this.PathGrid?.GetHashCode());
            ret = ret.CombineHashCode(this.Landscape?.GetHashCode());
            ret = ret.CombineHashCode(this.Persistent?.GetHashCode());
            ret = ret.CombineHashCode(this.Temporary?.GetHashCode());
            ret = ret.CombineHashCode(this.VisibleWhenDistant?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Grid)) return false;
            if (Lighting != null)
            {
                if (!eval(this.Lighting.Overall)) return false;
                if (this.Lighting.Specific != null && !this.Lighting.Specific.AllEqual(eval)) return false;
            }
            if (this.Regions != null)
            {
                if (!eval(this.Regions.Overall)) return false;
                if (this.Regions.Specific != null)
                {
                    foreach (var item in this.Regions.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.MusicType)) return false;
            if (!eval(this.WaterHeight)) return false;
            if (!eval(this.Climate)) return false;
            if (!eval(this.Water)) return false;
            if (!eval(this.Owner)) return false;
            if (!eval(this.FactionRank)) return false;
            if (!eval(this.GlobalVariable)) return false;
            if (PathGrid != null)
            {
                if (!eval(this.PathGrid.Overall)) return false;
                if (this.PathGrid.Specific != null && !this.PathGrid.Specific.AllEqual(eval)) return false;
            }
            if (Landscape != null)
            {
                if (!eval(this.Landscape.Overall)) return false;
                if (this.Landscape.Specific != null && !this.Landscape.Specific.AllEqual(eval)) return false;
            }
            if (this.Persistent != null)
            {
                if (!eval(this.Persistent.Overall)) return false;
                if (this.Persistent.Specific != null)
                {
                    foreach (var item in this.Persistent.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Temporary != null)
            {
                if (!eval(this.Temporary.Overall)) return false;
                if (this.Temporary.Specific != null)
                {
                    foreach (var item in this.Temporary.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.VisibleWhenDistant != null)
            {
                if (!eval(this.VisibleWhenDistant.Overall)) return false;
                if (this.VisibleWhenDistant.Specific != null)
                {
                    foreach (var item in this.VisibleWhenDistant.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Cell_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Cell_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Cell_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Flags = eval(this.Flags);
            obj.Grid = eval(this.Grid);
            if (this.Lighting != null)
            {
                obj.Lighting = new MaskItem<R, CellLighting_Mask<R>>();
                obj.Lighting.Overall = eval(this.Lighting.Overall);
                if (this.Lighting.Specific != null)
                {
                    obj.Lighting.Specific = this.Lighting.Specific.Translate(eval);
                }
            }
            if (Regions != null)
            {
                obj.Regions = new MaskItem<R, IEnumerable<R>>();
                obj.Regions.Overall = eval(this.Regions.Overall);
                if (Regions.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Regions.Specific = l;
                    foreach (var item in Regions.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.MusicType = eval(this.MusicType);
            obj.WaterHeight = eval(this.WaterHeight);
            obj.Climate = eval(this.Climate);
            obj.Water = eval(this.Water);
            obj.Owner = eval(this.Owner);
            obj.FactionRank = eval(this.FactionRank);
            obj.GlobalVariable = eval(this.GlobalVariable);
            if (this.PathGrid != null)
            {
                obj.PathGrid = new MaskItem<R, PathGrid_Mask<R>>();
                obj.PathGrid.Overall = eval(this.PathGrid.Overall);
                if (this.PathGrid.Specific != null)
                {
                    obj.PathGrid.Specific = this.PathGrid.Specific.Translate(eval);
                }
            }
            if (this.Landscape != null)
            {
                obj.Landscape = new MaskItem<R, Landscape_Mask<R>>();
                obj.Landscape.Overall = eval(this.Landscape.Overall);
                if (this.Landscape.Specific != null)
                {
                    obj.Landscape.Specific = this.Landscape.Specific.Translate(eval);
                }
            }
            if (Persistent != null)
            {
                obj.Persistent = new MaskItem<R, IEnumerable<MaskItem<R, Placed_Mask<R>>>>();
                obj.Persistent.Overall = eval(this.Persistent.Overall);
                if (Persistent.Specific != null)
                {
                    List<MaskItem<R, Placed_Mask<R>>> l = new List<MaskItem<R, Placed_Mask<R>>>();
                    obj.Persistent.Specific = l;
                    foreach (var item in Persistent.Specific)
                    {
                        MaskItem<R, Placed_Mask<R>> mask = default(MaskItem<R, Placed_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Placed_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Temporary != null)
            {
                obj.Temporary = new MaskItem<R, IEnumerable<MaskItem<R, Placed_Mask<R>>>>();
                obj.Temporary.Overall = eval(this.Temporary.Overall);
                if (Temporary.Specific != null)
                {
                    List<MaskItem<R, Placed_Mask<R>>> l = new List<MaskItem<R, Placed_Mask<R>>>();
                    obj.Temporary.Specific = l;
                    foreach (var item in Temporary.Specific)
                    {
                        MaskItem<R, Placed_Mask<R>> mask = default(MaskItem<R, Placed_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Placed_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (VisibleWhenDistant != null)
            {
                obj.VisibleWhenDistant = new MaskItem<R, IEnumerable<MaskItem<R, Placed_Mask<R>>>>();
                obj.VisibleWhenDistant.Overall = eval(this.VisibleWhenDistant.Overall);
                if (VisibleWhenDistant.Specific != null)
                {
                    List<MaskItem<R, Placed_Mask<R>>> l = new List<MaskItem<R, Placed_Mask<R>>>();
                    obj.VisibleWhenDistant.Specific = l;
                    foreach (var item in VisibleWhenDistant.Specific)
                    {
                        MaskItem<R, Placed_Mask<R>> mask = default(MaskItem<R, Placed_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Placed_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Regions.Specific = null;
            this.Persistent.Specific = null;
            this.Temporary.Specific = null;
            this.VisibleWhenDistant.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Cell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Cell_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Cell_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Grid ?? true)
                {
                    fg.AppendLine($"Grid => {Grid}");
                }
                if (printMask?.Lighting?.Overall ?? true)
                {
                    Lighting?.ToString(fg);
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Regions.Overall != null)
                        {
                            fg.AppendLine(Regions.Overall.ToString());
                        }
                        if (Regions.Specific != null)
                        {
                            foreach (var subItem in Regions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {MusicType}");
                }
                if (printMask?.WaterHeight ?? true)
                {
                    fg.AppendLine($"WaterHeight => {WaterHeight}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {Climate}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {Water}");
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {Owner}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                }
                if (printMask?.PathGrid?.Overall ?? true)
                {
                    PathGrid?.ToString(fg);
                }
                if (printMask?.Landscape?.Overall ?? true)
                {
                    Landscape?.ToString(fg);
                }
                if (printMask?.Persistent?.Overall ?? true)
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Persistent.Overall != null)
                        {
                            fg.AppendLine(Persistent.Overall.ToString());
                        }
                        if (Persistent.Specific != null)
                        {
                            foreach (var subItem in Persistent.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Temporary?.Overall ?? true)
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Temporary.Overall != null)
                        {
                            fg.AppendLine(Temporary.Overall.ToString());
                        }
                        if (Temporary.Specific != null)
                        {
                            foreach (var subItem in Temporary.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VisibleWhenDistant?.Overall ?? true)
                {
                    fg.AppendLine("VisibleWhenDistant =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (VisibleWhenDistant.Overall != null)
                        {
                            fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                        }
                        if (VisibleWhenDistant.Specific != null)
                        {
                            foreach (var subItem in VisibleWhenDistant.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Cell_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Cell_ErrorMask>
    {
        #region Members
        public Exception Flags;
        public Exception Grid;
        public MaskItem<Exception, CellLighting_ErrorMask> Lighting;
        public MaskItem<Exception, IEnumerable<Exception>> Regions;
        public Exception MusicType;
        public Exception WaterHeight;
        public Exception Climate;
        public Exception Water;
        public Exception Owner;
        public Exception FactionRank;
        public Exception GlobalVariable;
        public MaskItem<Exception, PathGrid_ErrorMask> PathGrid;
        public MaskItem<Exception, Landscape_ErrorMask> Landscape;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>> Persistent;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>> Temporary;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>> VisibleWhenDistant;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    return Flags;
                case Cell_FieldIndex.Grid:
                    return Grid;
                case Cell_FieldIndex.Lighting:
                    return Lighting;
                case Cell_FieldIndex.Regions:
                    return Regions;
                case Cell_FieldIndex.MusicType:
                    return MusicType;
                case Cell_FieldIndex.WaterHeight:
                    return WaterHeight;
                case Cell_FieldIndex.Climate:
                    return Climate;
                case Cell_FieldIndex.Water:
                    return Water;
                case Cell_FieldIndex.Owner:
                    return Owner;
                case Cell_FieldIndex.FactionRank:
                    return FactionRank;
                case Cell_FieldIndex.GlobalVariable:
                    return GlobalVariable;
                case Cell_FieldIndex.PathGrid:
                    return PathGrid;
                case Cell_FieldIndex.Landscape:
                    return Landscape;
                case Cell_FieldIndex.Persistent:
                    return Persistent;
                case Cell_FieldIndex.Temporary:
                    return Temporary;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return VisibleWhenDistant;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = ex;
                    break;
                case Cell_FieldIndex.Lighting:
                    this.Lighting = new MaskItem<Exception, CellLighting_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Regions:
                    this.Regions = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = ex;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = ex;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate = ex;
                    break;
                case Cell_FieldIndex.Water:
                    this.Water = ex;
                    break;
                case Cell_FieldIndex.Owner:
                    this.Owner = ex;
                    break;
                case Cell_FieldIndex.FactionRank:
                    this.FactionRank = ex;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    this.GlobalVariable = ex;
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = new MaskItem<Exception, PathGrid_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Landscape:
                    this.Landscape = new MaskItem<Exception, Landscape_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Persistent:
                    this.Persistent = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(ex, null);
                    break;
                case Cell_FieldIndex.Temporary:
                    this.Temporary = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(ex, null);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this.VisibleWhenDistant = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = (Exception)obj;
                    break;
                case Cell_FieldIndex.Lighting:
                    this.Lighting = (MaskItem<Exception, CellLighting_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Regions:
                    this.Regions = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = (Exception)obj;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = (Exception)obj;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate = (Exception)obj;
                    break;
                case Cell_FieldIndex.Water:
                    this.Water = (Exception)obj;
                    break;
                case Cell_FieldIndex.Owner:
                    this.Owner = (Exception)obj;
                    break;
                case Cell_FieldIndex.FactionRank:
                    this.FactionRank = (Exception)obj;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    this.GlobalVariable = (Exception)obj;
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = (MaskItem<Exception, PathGrid_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Landscape:
                    this.Landscape = (MaskItem<Exception, Landscape_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Persistent:
                    this.Persistent = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>)obj;
                    break;
                case Cell_FieldIndex.Temporary:
                    this.Temporary = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>)obj;
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this.VisibleWhenDistant = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (Grid != null) return true;
            if (Lighting != null) return true;
            if (Regions != null) return true;
            if (MusicType != null) return true;
            if (WaterHeight != null) return true;
            if (Climate != null) return true;
            if (Water != null) return true;
            if (Owner != null) return true;
            if (FactionRank != null) return true;
            if (GlobalVariable != null) return true;
            if (PathGrid != null) return true;
            if (Landscape != null) return true;
            if (Persistent != null) return true;
            if (Temporary != null) return true;
            if (VisibleWhenDistant != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Cell_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Grid => {Grid}");
            Lighting?.ToString(fg);
            fg.AppendLine("Regions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Regions.Overall != null)
                {
                    fg.AppendLine(Regions.Overall.ToString());
                }
                if (Regions.Specific != null)
                {
                    foreach (var subItem in Regions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"MusicType => {MusicType}");
            fg.AppendLine($"WaterHeight => {WaterHeight}");
            fg.AppendLine($"Climate => {Climate}");
            fg.AppendLine($"Water => {Water}");
            fg.AppendLine($"Owner => {Owner}");
            fg.AppendLine($"FactionRank => {FactionRank}");
            fg.AppendLine($"GlobalVariable => {GlobalVariable}");
            PathGrid?.ToString(fg);
            Landscape?.ToString(fg);
            fg.AppendLine("Persistent =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Persistent.Overall != null)
                {
                    fg.AppendLine(Persistent.Overall.ToString());
                }
                if (Persistent.Specific != null)
                {
                    foreach (var subItem in Persistent.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Temporary =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Temporary.Overall != null)
                {
                    fg.AppendLine(Temporary.Overall.ToString());
                }
                if (Temporary.Specific != null)
                {
                    foreach (var subItem in Temporary.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("VisibleWhenDistant =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (VisibleWhenDistant.Overall != null)
                {
                    fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                }
                if (VisibleWhenDistant.Specific != null)
                {
                    foreach (var subItem in VisibleWhenDistant.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Cell_ErrorMask Combine(Cell_ErrorMask rhs)
        {
            var ret = new Cell_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Grid = this.Grid.Combine(rhs.Grid);
            ret.Lighting = new MaskItem<Exception, CellLighting_ErrorMask>(this.Lighting.Overall.Combine(rhs.Lighting.Overall), ((IErrorMask<CellLighting_ErrorMask>)this.Lighting.Specific).Combine(rhs.Lighting.Specific));
            ret.Regions = new MaskItem<Exception, IEnumerable<Exception>>(this.Regions.Overall.Combine(rhs.Regions.Overall), new List<Exception>(this.Regions.Specific.And(rhs.Regions.Specific)));
            ret.MusicType = this.MusicType.Combine(rhs.MusicType);
            ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
            ret.Climate = this.Climate.Combine(rhs.Climate);
            ret.Water = this.Water.Combine(rhs.Water);
            ret.Owner = this.Owner.Combine(rhs.Owner);
            ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
            ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
            ret.PathGrid = new MaskItem<Exception, PathGrid_ErrorMask>(this.PathGrid.Overall.Combine(rhs.PathGrid.Overall), ((IErrorMask<PathGrid_ErrorMask>)this.PathGrid.Specific).Combine(rhs.PathGrid.Specific));
            ret.Landscape = new MaskItem<Exception, Landscape_ErrorMask>(this.Landscape.Overall.Combine(rhs.Landscape.Overall), ((IErrorMask<Landscape_ErrorMask>)this.Landscape.Specific).Combine(rhs.Landscape.Specific));
            ret.Persistent = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(this.Persistent.Overall.Combine(rhs.Persistent.Overall), new List<MaskItem<Exception, Placed_ErrorMask>>(this.Persistent.Specific.And(rhs.Persistent.Specific)));
            ret.Temporary = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(this.Temporary.Overall.Combine(rhs.Temporary.Overall), new List<MaskItem<Exception, Placed_ErrorMask>>(this.Temporary.Specific.And(rhs.Temporary.Specific)));
            ret.VisibleWhenDistant = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(this.VisibleWhenDistant.Overall.Combine(rhs.VisibleWhenDistant.Overall), new List<MaskItem<Exception, Placed_ErrorMask>>(this.VisibleWhenDistant.Specific.And(rhs.VisibleWhenDistant.Specific)));
            return ret;
        }
        public static Cell_ErrorMask Combine(Cell_ErrorMask lhs, Cell_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Cell_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Cell_ErrorMask();
        }
        #endregion

    }
    public class Cell_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Flags;
        public bool Grid;
        public MaskItem<CopyOption, CellLighting_CopyMask> Lighting;
        public CopyOption Regions;
        public bool MusicType;
        public bool WaterHeight;
        public bool Climate;
        public bool Water;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<CopyOption, PathGrid_CopyMask> PathGrid;
        public MaskItem<CopyOption, Landscape_CopyMask> Landscape;
        public MaskItem<CopyOption, Placed_CopyMask> Persistent;
        public MaskItem<CopyOption, Placed_CopyMask> Temporary;
        public MaskItem<CopyOption, Placed_CopyMask> VisibleWhenDistant;
        #endregion

    }
    #endregion





    #endregion

}
