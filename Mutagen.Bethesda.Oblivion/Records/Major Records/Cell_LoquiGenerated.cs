/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Windows.Media;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Cell : NamedMajorRecord, ICell, ILoquiObject<Cell>, ILoquiObjectSetter, IEquatable<Cell>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;

        #region Ctor
        public Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Cell.Flag> _Flags = NotifyingSetItem.Factory<Cell.Flag>(markAsSet: false);
        public INotifyingSetItem<Cell.Flag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Cell.Flag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Cell.Flag> ICell.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Cell.Flag> ICellGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Grid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<P2Int> _Grid = NotifyingSetItem.Factory<P2Int>(markAsSet: false);
        public INotifyingSetItem<P2Int> Grid_Property => _Grid;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Int Grid
        {
            get => this._Grid.Item;
            set => this._Grid.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<P2Int> ICell.Grid_Property => this.Grid_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<P2Int> ICellGetter.Grid_Property => this.Grid_Property;
        #endregion
        #region AmbientColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Color> _AmbientColor = NotifyingItem.Factory<Color>();
        public INotifyingItem<Color> AmbientColor_Property => _AmbientColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color AmbientColor
        {
            get => this._AmbientColor.Item;
            set => this._AmbientColor.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Color> ICell.AmbientColor_Property => this.AmbientColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Color> ICellGetter.AmbientColor_Property => this.AmbientColor_Property;
        #endregion
        #region DirectionalColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Color> _DirectionalColor = NotifyingItem.Factory<Color>();
        public INotifyingItem<Color> DirectionalColor_Property => _DirectionalColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color DirectionalColor
        {
            get => this._DirectionalColor.Item;
            set => this._DirectionalColor.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Color> ICell.DirectionalColor_Property => this.DirectionalColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Color> ICellGetter.DirectionalColor_Property => this.DirectionalColor_Property;
        #endregion
        #region FogColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Color> _FogColor = NotifyingItem.Factory<Color>();
        public INotifyingItem<Color> FogColor_Property => _FogColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color FogColor
        {
            get => this._FogColor.Item;
            set => this._FogColor.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Color> ICell.FogColor_Property => this.FogColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Color> ICellGetter.FogColor_Property => this.FogColor_Property;
        #endregion
        #region FogNear
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _FogNear = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> FogNear_Property => _FogNear;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogNear
        {
            get => this._FogNear.Item;
            set => this._FogNear.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ICell.FogNear_Property => this.FogNear_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ICellGetter.FogNear_Property => this.FogNear_Property;
        #endregion
        #region FogFar
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _FogFar = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> FogFar_Property => _FogFar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogFar
        {
            get => this._FogFar.Item;
            set => this._FogFar.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ICell.FogFar_Property => this.FogFar_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ICellGetter.FogFar_Property => this.FogFar_Property;
        #endregion
        #region DirectionalRotationXY
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Int32> _DirectionalRotationXY = NotifyingItem.Factory<Int32>();
        public INotifyingItem<Int32> DirectionalRotationXY_Property => _DirectionalRotationXY;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 DirectionalRotationXY
        {
            get => this._DirectionalRotationXY.Item;
            set => this._DirectionalRotationXY.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> ICell.DirectionalRotationXY_Property => this.DirectionalRotationXY_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> ICellGetter.DirectionalRotationXY_Property => this.DirectionalRotationXY_Property;
        #endregion
        #region DirectionalRotationZ
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Int32> _DirectionalRotationZ = NotifyingItem.Factory<Int32>();
        public INotifyingItem<Int32> DirectionalRotationZ_Property => _DirectionalRotationZ;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 DirectionalRotationZ
        {
            get => this._DirectionalRotationZ.Item;
            set => this._DirectionalRotationZ.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> ICell.DirectionalRotationZ_Property => this.DirectionalRotationZ_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> ICellGetter.DirectionalRotationZ_Property => this.DirectionalRotationZ_Property;
        #endregion
        #region DirectionalFade
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _DirectionalFade = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> DirectionalFade_Property => _DirectionalFade;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single DirectionalFade
        {
            get => this._DirectionalFade.Item;
            set => this._DirectionalFade.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ICell.DirectionalFade_Property => this.DirectionalFade_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ICellGetter.DirectionalFade_Property => this.DirectionalFade_Property;
        #endregion
        #region FogClipDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _FogClipDistance = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> FogClipDistance_Property => _FogClipDistance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FogClipDistance
        {
            get => this._FogClipDistance.Item;
            set => this._FogClipDistance.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> ICell.FogClipDistance_Property => this.FogClipDistance_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> ICellGetter.FogClipDistance_Property => this.FogClipDistance_Property;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDLink<Region>> _Regions = new NotifyingList<FormIDLink<Region>>();
        public INotifyingList<FormIDLink<Region>> Regions => _Regions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDLink<Region>> RegionsEnumerable
        {
            get => _Regions;
            set => _Regions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDLink<Region>> ICell.Regions => _Regions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDLink<Region>> ICellGetter.Regions => _Regions;
        #endregion

        #endregion
        #region MusicType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<MusicType> _MusicType = NotifyingSetItem.Factory<MusicType>(markAsSet: false);
        public INotifyingSetItem<MusicType> MusicType_Property => _MusicType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType MusicType
        {
            get => this._MusicType.Item;
            set => this._MusicType.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<MusicType> ICell.MusicType_Property => this.MusicType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<MusicType> ICellGetter.MusicType_Property => this.MusicType_Property;
        #endregion
        #region WaterHeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Single> _WaterHeight = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> WaterHeight_Property => _WaterHeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single WaterHeight
        {
            get => this._WaterHeight.Item;
            set => this._WaterHeight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> ICell.WaterHeight_Property => this.WaterHeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> ICellGetter.WaterHeight_Property => this.WaterHeight_Property;
        #endregion
        #region Climate
        public FormIDSetLink<Climate> Climate_Property { get; } = new FormIDSetLink<Climate>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Climate Climate { get => Climate_Property.Item; set => Climate_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Climate> ICellGetter.Climate_Property => this.Climate_Property;
        #endregion
        #region Water
        public FormIDSetLink<Water> Water_Property { get; } = new FormIDSetLink<Water>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Water Water { get => Water_Property.Item; set => Water_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Water> ICellGetter.Water_Property => this.Water_Property;
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Ownership> _Ownership = new NotifyingSetItem<Ownership>();
        public INotifyingSetItem<Ownership> Ownership_Property => this._Ownership;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Ownership ICellGetter.Ownership => this.Ownership;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Ownership Ownership { get => _Ownership.Item; set => _Ownership.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Ownership> ICell.Ownership_Property => this.Ownership_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Ownership> ICellGetter.Ownership_Property => this.Ownership_Property;
        #endregion
        #region PathGrid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<PathGrid> _PathGrid = new NotifyingSetItem<PathGrid>();
        public INotifyingSetItem<PathGrid> PathGrid_Property => this._PathGrid;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        PathGrid ICellGetter.PathGrid => this.PathGrid;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PathGrid PathGrid { get => _PathGrid.Item; set => _PathGrid.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<PathGrid> ICell.PathGrid_Property => this.PathGrid_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<PathGrid> ICellGetter.PathGrid_Property => this.PathGrid_Property;
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Placed> _Persistent = new NotifyingList<Placed>();
        public INotifyingList<Placed> Persistent => _Persistent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Placed> PersistentEnumerable
        {
            get => _Persistent;
            set => _Persistent.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Placed> ICell.Persistent => _Persistent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Placed> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Placed> _Temporary = new NotifyingList<Placed>();
        public INotifyingList<Placed> Temporary => _Temporary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Placed> TemporaryEnumerable
        {
            get => _Temporary;
            set => _Temporary.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Placed> ICell.Temporary => _Temporary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Placed> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion
        #region VisibleWhenDistant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Placed> _VisibleWhenDistant = new NotifyingList<Placed>();
        public INotifyingList<Placed> VisibleWhenDistant => _VisibleWhenDistant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Placed> VisibleWhenDistantEnumerable
        {
            get => _VisibleWhenDistant;
            set => _VisibleWhenDistant.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Placed> ICell.VisibleWhenDistant => _VisibleWhenDistant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Placed> ICellGetter.VisibleWhenDistant => _VisibleWhenDistant;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => CellCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => CellCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CellCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CellCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Cell>.GetEqualsMask(Cell rhs) => CellCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICellGetter>.GetEqualsMask(ICellGetter rhs) => CellCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return CellCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            return CellCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Cell_Mask<bool> GetHasBeenSetMask()
        {
            return CellCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Cell rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cell rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (Flags != rhs.Flags) return false;
            }
            if (Grid_Property.HasBeenSet != rhs.Grid_Property.HasBeenSet) return false;
            if (Grid_Property.HasBeenSet)
            {
                if (Grid != rhs.Grid) return false;
            }
            if (AmbientColor != rhs.AmbientColor) return false;
            if (DirectionalColor != rhs.DirectionalColor) return false;
            if (FogColor != rhs.FogColor) return false;
            if (FogNear != rhs.FogNear) return false;
            if (FogFar != rhs.FogFar) return false;
            if (DirectionalRotationXY != rhs.DirectionalRotationXY) return false;
            if (DirectionalRotationZ != rhs.DirectionalRotationZ) return false;
            if (DirectionalFade != rhs.DirectionalFade) return false;
            if (FogClipDistance != rhs.FogClipDistance) return false;
            if (Regions.HasBeenSet != rhs.Regions.HasBeenSet) return false;
            if (Regions.HasBeenSet)
            {
                if (!Regions.SequenceEqual(rhs.Regions)) return false;
            }
            if (MusicType_Property.HasBeenSet != rhs.MusicType_Property.HasBeenSet) return false;
            if (MusicType_Property.HasBeenSet)
            {
                if (MusicType != rhs.MusicType) return false;
            }
            if (WaterHeight_Property.HasBeenSet != rhs.WaterHeight_Property.HasBeenSet) return false;
            if (WaterHeight_Property.HasBeenSet)
            {
                if (WaterHeight != rhs.WaterHeight) return false;
            }
            if (Climate_Property.HasBeenSet != rhs.Climate_Property.HasBeenSet) return false;
            if (Climate_Property.HasBeenSet)
            {
                if (Climate != rhs.Climate) return false;
            }
            if (Water_Property.HasBeenSet != rhs.Water_Property.HasBeenSet) return false;
            if (Water_Property.HasBeenSet)
            {
                if (Water != rhs.Water) return false;
            }
            if (Ownership_Property.HasBeenSet != rhs.Ownership_Property.HasBeenSet) return false;
            if (Ownership_Property.HasBeenSet)
            {
                if (!object.Equals(Ownership, rhs.Ownership)) return false;
            }
            if (PathGrid_Property.HasBeenSet != rhs.PathGrid_Property.HasBeenSet) return false;
            if (PathGrid_Property.HasBeenSet)
            {
                if (!object.Equals(PathGrid, rhs.PathGrid)) return false;
            }
            if (Persistent.HasBeenSet != rhs.Persistent.HasBeenSet) return false;
            if (Persistent.HasBeenSet)
            {
                if (!Persistent.SequenceEqual(rhs.Persistent)) return false;
            }
            if (Temporary.HasBeenSet != rhs.Temporary.HasBeenSet) return false;
            if (Temporary.HasBeenSet)
            {
                if (!Temporary.SequenceEqual(rhs.Temporary)) return false;
            }
            if (VisibleWhenDistant.HasBeenSet != rhs.VisibleWhenDistant.HasBeenSet) return false;
            if (VisibleWhenDistant.HasBeenSet)
            {
                if (!VisibleWhenDistant.SequenceEqual(rhs.VisibleWhenDistant)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (Grid_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Grid).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(AmbientColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogNear).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogFar).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalRotationXY).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalRotationZ).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectionalFade).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FogClipDistance).CombineHashCode(ret);
            if (Regions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Regions).CombineHashCode(ret);
            }
            if (MusicType_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MusicType).CombineHashCode(ret);
            }
            if (WaterHeight_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(WaterHeight).CombineHashCode(ret);
            }
            if (Climate_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Climate).CombineHashCode(ret);
            }
            if (Water_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Water).CombineHashCode(ret);
            }
            if (Ownership_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ownership).CombineHashCode(ret);
            }
            if (PathGrid_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(PathGrid).CombineHashCode(ret);
            }
            if (Persistent.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Persistent).CombineHashCode(ret);
            }
            if (Temporary.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Temporary).CombineHashCode(ret);
            }
            if (VisibleWhenDistant.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(VisibleWhenDistant).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Cell Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Cell Create_XML(
            XElement root,
            out Cell_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Cell Create_XML(
            XElement root,
            bool doMasks,
            out Cell_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Cell Object, Cell_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Cell_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Cell_ErrorMask()) : default(Func<Cell_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Cell Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Cell Create_XML(
            string path,
            out Cell_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Cell Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Cell Create_XML(
            Stream stream,
            out Cell_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Cell_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Cell_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Cell_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Cell_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            CellCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Cell Create_XML_Internal(
            XElement root,
            Func<Cell_ErrorMask> errorMask)
        {
            var ret = new Cell();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Cell item,
            XElement root,
            string name,
            Func<Cell_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<Cell.Flag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Cell_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Grid":
                    item._Grid.SetIfSucceeded(P2IntXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.Grid,
                        errorMask: errorMask));
                    break;
                case "AmbientColor":
                    item._AmbientColor.SetIfSucceeded(ColorXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.AmbientColor,
                        errorMask: errorMask));
                    break;
                case "DirectionalColor":
                    item._DirectionalColor.SetIfSucceeded(ColorXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.DirectionalColor,
                        errorMask: errorMask));
                    break;
                case "FogColor":
                    item._FogColor.SetIfSucceeded(ColorXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.FogColor,
                        errorMask: errorMask));
                    break;
                case "FogNear":
                    item._FogNear.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.FogNear,
                        errorMask: errorMask));
                    break;
                case "FogFar":
                    item._FogFar.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.FogFar,
                        errorMask: errorMask));
                    break;
                case "DirectionalRotationXY":
                    item._DirectionalRotationXY.SetIfSucceeded(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.DirectionalRotationXY,
                        errorMask: errorMask));
                    break;
                case "DirectionalRotationZ":
                    item._DirectionalRotationZ.SetIfSucceeded(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.DirectionalRotationZ,
                        errorMask: errorMask));
                    break;
                case "DirectionalFade":
                    item._DirectionalFade.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.DirectionalFade,
                        errorMask: errorMask));
                    break;
                case "FogClipDistance":
                    item._FogClipDistance.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.FogClipDistance,
                        errorMask: errorMask));
                    break;
                case "Regions":
                    item._Regions.SetIfSucceeded(ListXmlTranslation<FormIDLink<Region>, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Cell_FieldIndex.Regions,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return FormIDXmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDLink<Region>(o.Value));
                        }
                        ));
                    break;
                case "MusicType":
                    item._MusicType.SetIfSucceeded(EnumXmlTranslation<MusicType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Cell_FieldIndex.MusicType,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "WaterHeight":
                    item._WaterHeight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                        errorMask: errorMask));
                    break;
                case "Climate":
                    item.Climate_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.Climate,
                        errorMask: errorMask));
                    break;
                case "Water":
                    item.Water_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Cell_FieldIndex.Water,
                        errorMask: errorMask));
                    break;
                case "Ownership":
                    item._Ownership.SetIfSucceeded(LoquiXmlTranslation<Ownership, Ownership_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Cell_FieldIndex.Ownership,
                        errorMask: errorMask));
                    break;
                case "PathGrid":
                    item._PathGrid.SetIfSucceeded(LoquiXmlTranslation<PathGrid, PathGrid_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Cell_FieldIndex.PathGrid,
                        errorMask: errorMask));
                    break;
                case "Persistent":
                    item._Persistent.SetIfSucceeded(ListXmlTranslation<Placed, MaskItem<Exception, Placed_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Cell_FieldIndex.Persistent,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Placed_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<Placed, Placed_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "Temporary":
                    item._Temporary.SetIfSucceeded(ListXmlTranslation<Placed, MaskItem<Exception, Placed_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Cell_FieldIndex.Temporary,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Placed_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<Placed, Placed_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "VisibleWhenDistant":
                    item._VisibleWhenDistant.SetIfSucceeded(ListXmlTranslation<Placed, MaskItem<Exception, Placed_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistant,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Placed_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<Placed, Placed_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Cell_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Climate_Property;
            yield return Water_Property;
            if (Ownership != null)
            {
                foreach (var item in Ownership.Links)
                {
                    yield return item;
                }
            }
            if (PathGrid != null)
            {
                foreach (var item in PathGrid.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Cell Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Cell Create_Binary(
            MutagenFrame frame,
            out Cell_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Cell Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Cell_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Cell Object, Cell_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Cell_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Cell_ErrorMask()) : default(Func<Cell_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Cell Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Cell Create_Binary(
            string path,
            out Cell_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Cell Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Cell Create_Binary(
            Stream stream,
            out Cell_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Cell_ErrorMask errorMask)
        {
            errorMask = (Cell_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Cell_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Cell_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            CellCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Cell Create_Binary_Internal(
            MutagenFrame frame,
            Func<Cell_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = UtilityTranslation.MajorRecordParse<Cell, Cell_ErrorMask, Cell_FieldIndex>(
                record: new Cell(),
                frame: frame,
                errorMask: errorMask,
                recType: Cell_Registration.CELL_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            try
            {
                CustomBinaryEnd_Import(
                    frame: frame,
                    obj: ret,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Cell item,
            MutagenFrame frame,
            Func<Cell_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Cell_FieldIndex?> Fill_Binary_RecordTypes(
            Cell item,
            MutagenFrame frame,
            Func<Cell_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Cell.Flag>.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)Cell_FieldIndex.Flags,
                        errorMask: errorMask));
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.Flags);
                case "XCLC":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Grid.SetIfSucceeded(Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Cell_FieldIndex.Grid,
                        errorMask: errorMask));
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.Grid);
                case "XCLL":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._AmbientColor.SetIfSucceeded(Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.AmbientColor,
                            errorMask: errorMask,
                            extraByte: true));
                        item._DirectionalColor.SetIfSucceeded(Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.DirectionalColor,
                            errorMask: errorMask,
                            extraByte: true));
                        item._FogColor.SetIfSucceeded(Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.FogColor,
                            errorMask: errorMask,
                            extraByte: true));
                        item._FogNear.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.FogNear,
                            errorMask: errorMask));
                        item._FogFar.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.FogFar,
                            errorMask: errorMask));
                        item._DirectionalRotationXY.SetIfSucceeded(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.DirectionalRotationXY,
                            errorMask: errorMask));
                        item._DirectionalRotationZ.SetIfSucceeded(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.DirectionalRotationZ,
                            errorMask: errorMask));
                        item._DirectionalFade.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.DirectionalFade,
                            errorMask: errorMask));
                        item._FogClipDistance.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Cell_FieldIndex.FogClipDistance,
                            errorMask: errorMask));
                    }
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.FogClipDistance);
                case "XCLR":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var RegionstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Region>, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Cell_FieldIndex.Regions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDLink<Region>(o));
                        }
                        );
                    item._Regions.SetIfSucceeded(RegionstryGet);
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.Regions);
                case "XCMT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._MusicType.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)Cell_FieldIndex.MusicType,
                        errorMask: errorMask));
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.MusicType);
                case "XCLW":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._WaterHeight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                        errorMask: errorMask));
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.WaterHeight);
                case "XCCM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Climate_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Cell_FieldIndex.Climate,
                        errorMask: errorMask));
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.Climate);
                case "XCWT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Water_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Cell_FieldIndex.Water,
                        errorMask: errorMask));
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.Water);
                case "XOWN":
                case "XRNK":
                case "XGLB":
                    item._Ownership.SetIfSucceeded(LoquiBinaryTranslation<Ownership, Ownership_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Cell_FieldIndex.Ownership,
                        errorMask: errorMask));
                    return TryGet<Cell_FieldIndex?>.Succeed(Cell_FieldIndex.Ownership);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => CellCommon.ConvertFieldIndex(i));
            }
        }

        static partial void CustomBinaryEnd_Import(
            MutagenFrame frame,
            Cell obj,
            Func<Cell_ErrorMask> errorMask);
        static partial void CustomBinaryEnd_Export(
            MutagenWriter writer,
            Cell obj,
            Func<Cell_ErrorMask> errorMask);
        public static void CustomBinaryEnd_ExportInternal(
            MutagenWriter writer,
            Cell obj,
            Func<Cell_ErrorMask> errorMask)
        {
            CustomBinaryEnd_Export(
                writer: writer,
                obj: obj,
                errorMask: errorMask);
        }
        #endregion

        public Cell Copy(
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            return Cell.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Cell Copy(
            ICell item,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            Cell ret;
            if (item.GetType().Equals(typeof(Cell)))
            {
                ret = new Cell();
            }
            else
            {
                ret = (Cell)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Cell Copy_ToLoqui(
            ICellGetter item,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            Cell ret;
            if (item.GetType().Equals(typeof(Cell)))
            {
                ret = new Cell() as Cell;
            }
            else
            {
                ret = (Cell)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ICellGetter rhs,
            Cell_CopyMask copyMask,
            ICellGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICellGetter rhs,
            out Cell_ErrorMask errorMask,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Cell_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Cell_ErrorMask();
                }
                return retErrorMask;
            };
            CellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    this._Flags.Set(
                        (Cell.Flag)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Grid:
                    this._Grid.Set(
                        (P2Int)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.AmbientColor:
                    this._AmbientColor.Set(
                        (Color)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.DirectionalColor:
                    this._DirectionalColor.Set(
                        (Color)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.FogColor:
                    this._FogColor.Set(
                        (Color)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.FogNear:
                    this._FogNear.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.FogFar:
                    this._FogFar.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.DirectionalRotationXY:
                    this._DirectionalRotationXY.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.DirectionalRotationZ:
                    this._DirectionalRotationZ.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.DirectionalFade:
                    this._DirectionalFade.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.FogClipDistance:
                    this._FogClipDistance.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Regions:
                    this._Regions.SetTo((IEnumerable<FormIDLink<Region>>)obj, cmds);
                    break;
                case Cell_FieldIndex.MusicType:
                    this._MusicType.Set(
                        (MusicType)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this._WaterHeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate_Property.Set(
                        (FormIDSetLink<Climate>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Water:
                    this.Water_Property.Set(
                        (FormIDSetLink<Water>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Ownership:
                    this._Ownership.Set(
                        (Ownership)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.PathGrid:
                    this._PathGrid.Set(
                        (PathGrid)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Persistent:
                    this._Persistent.SetTo((IEnumerable<Placed>)obj, cmds);
                    break;
                case Cell_FieldIndex.Temporary:
                    this._Temporary.SetTo((IEnumerable<Placed>)obj, cmds);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this._VisibleWhenDistant.SetTo((IEnumerable<Placed>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CellCommon.Clear(this, cmds);
        }


        public new static Cell Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Cell();
            foreach (var pair in fields)
            {
                CopyInInternal_Cell(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Cell(Cell obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Cell_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Cell.Flag)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Grid:
                    obj._Grid.Set(
                        (P2Int)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.AmbientColor:
                    obj._AmbientColor.Set(
                        (Color)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.DirectionalColor:
                    obj._DirectionalColor.Set(
                        (Color)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.FogColor:
                    obj._FogColor.Set(
                        (Color)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.FogNear:
                    obj._FogNear.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.FogFar:
                    obj._FogFar.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.DirectionalRotationXY:
                    obj._DirectionalRotationXY.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.DirectionalRotationZ:
                    obj._DirectionalRotationZ.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.DirectionalFade:
                    obj._DirectionalFade.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.FogClipDistance:
                    obj._FogClipDistance.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Regions:
                    obj._Regions.SetTo((IEnumerable<FormIDLink<Region>>)pair.Value, null);
                    break;
                case Cell_FieldIndex.MusicType:
                    obj._MusicType.Set(
                        (MusicType)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj._WaterHeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.Set(
                        (FormIDSetLink<Climate>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.Set(
                        (FormIDSetLink<Water>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Ownership:
                    obj._Ownership.Set(
                        (Ownership)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj._PathGrid.Set(
                        (PathGrid)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Persistent:
                    obj._Persistent.SetTo((IEnumerable<Placed>)pair.Value, null);
                    break;
                case Cell_FieldIndex.Temporary:
                    obj._Temporary.SetTo((IEnumerable<Placed>)pair.Value, null);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj._VisibleWhenDistant.SetTo((IEnumerable<Placed>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Cell obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICell : ICellGetter, INamedMajorRecord, ILoquiClass<ICell, ICellGetter>, ILoquiClass<Cell, ICellGetter>
    {
        new Cell.Flag Flags { get; set; }
        new INotifyingSetItem<Cell.Flag> Flags_Property { get; }

        new P2Int Grid { get; set; }
        new INotifyingSetItem<P2Int> Grid_Property { get; }

        new Color AmbientColor { get; set; }
        new INotifyingItem<Color> AmbientColor_Property { get; }

        new Color DirectionalColor { get; set; }
        new INotifyingItem<Color> DirectionalColor_Property { get; }

        new Color FogColor { get; set; }
        new INotifyingItem<Color> FogColor_Property { get; }

        new Single FogNear { get; set; }
        new INotifyingItem<Single> FogNear_Property { get; }

        new Single FogFar { get; set; }
        new INotifyingItem<Single> FogFar_Property { get; }

        new Int32 DirectionalRotationXY { get; set; }
        new INotifyingItem<Int32> DirectionalRotationXY_Property { get; }

        new Int32 DirectionalRotationZ { get; set; }
        new INotifyingItem<Int32> DirectionalRotationZ_Property { get; }

        new Single DirectionalFade { get; set; }
        new INotifyingItem<Single> DirectionalFade_Property { get; }

        new Single FogClipDistance { get; set; }
        new INotifyingItem<Single> FogClipDistance_Property { get; }

        new INotifyingList<FormIDLink<Region>> Regions { get; }
        new MusicType MusicType { get; set; }
        new INotifyingSetItem<MusicType> MusicType_Property { get; }

        new Single WaterHeight { get; set; }
        new INotifyingSetItem<Single> WaterHeight_Property { get; }

        new Climate Climate { get; set; }
        new Water Water { get; set; }
        new Ownership Ownership { get; set; }
        new INotifyingSetItem<Ownership> Ownership_Property { get; }

        new PathGrid PathGrid { get; set; }
        new INotifyingSetItem<PathGrid> PathGrid_Property { get; }

        new INotifyingList<Placed> Persistent { get; }
        new INotifyingList<Placed> Temporary { get; }
        new INotifyingList<Placed> VisibleWhenDistant { get; }
    }

    public partial interface ICellGetter : INamedMajorRecordGetter
    {
        #region Flags
        Cell.Flag Flags { get; }
        INotifyingSetItemGetter<Cell.Flag> Flags_Property { get; }

        #endregion
        #region Grid
        P2Int Grid { get; }
        INotifyingSetItemGetter<P2Int> Grid_Property { get; }

        #endregion
        #region AmbientColor
        Color AmbientColor { get; }
        INotifyingItemGetter<Color> AmbientColor_Property { get; }

        #endregion
        #region DirectionalColor
        Color DirectionalColor { get; }
        INotifyingItemGetter<Color> DirectionalColor_Property { get; }

        #endregion
        #region FogColor
        Color FogColor { get; }
        INotifyingItemGetter<Color> FogColor_Property { get; }

        #endregion
        #region FogNear
        Single FogNear { get; }
        INotifyingItemGetter<Single> FogNear_Property { get; }

        #endregion
        #region FogFar
        Single FogFar { get; }
        INotifyingItemGetter<Single> FogFar_Property { get; }

        #endregion
        #region DirectionalRotationXY
        Int32 DirectionalRotationXY { get; }
        INotifyingItemGetter<Int32> DirectionalRotationXY_Property { get; }

        #endregion
        #region DirectionalRotationZ
        Int32 DirectionalRotationZ { get; }
        INotifyingItemGetter<Int32> DirectionalRotationZ_Property { get; }

        #endregion
        #region DirectionalFade
        Single DirectionalFade { get; }
        INotifyingItemGetter<Single> DirectionalFade_Property { get; }

        #endregion
        #region FogClipDistance
        Single FogClipDistance { get; }
        INotifyingItemGetter<Single> FogClipDistance_Property { get; }

        #endregion
        #region Regions
        INotifyingListGetter<FormIDLink<Region>> Regions { get; }
        #endregion
        #region MusicType
        MusicType MusicType { get; }
        INotifyingSetItemGetter<MusicType> MusicType_Property { get; }

        #endregion
        #region WaterHeight
        Single WaterHeight { get; }
        INotifyingSetItemGetter<Single> WaterHeight_Property { get; }

        #endregion
        #region Climate
        Climate Climate { get; }
        FormIDSetLink<Climate> Climate_Property { get; }

        #endregion
        #region Water
        Water Water { get; }
        FormIDSetLink<Water> Water_Property { get; }

        #endregion
        #region Ownership
        Ownership Ownership { get; }
        INotifyingSetItemGetter<Ownership> Ownership_Property { get; }

        #endregion
        #region PathGrid
        PathGrid PathGrid { get; }
        INotifyingSetItemGetter<PathGrid> PathGrid_Property { get; }

        #endregion
        #region Persistent
        INotifyingListGetter<Placed> Persistent { get; }
        #endregion
        #region Temporary
        INotifyingListGetter<Placed> Temporary { get; }
        #endregion
        #region VisibleWhenDistant
        INotifyingListGetter<Placed> VisibleWhenDistant { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Cell_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Flags = 6,
        Grid = 7,
        AmbientColor = 8,
        DirectionalColor = 9,
        FogColor = 10,
        FogNear = 11,
        FogFar = 12,
        DirectionalRotationXY = 13,
        DirectionalRotationZ = 14,
        DirectionalFade = 15,
        FogClipDistance = 16,
        Regions = 17,
        MusicType = 18,
        WaterHeight = 19,
        Climate = 20,
        Water = 21,
        Ownership = 22,
        PathGrid = 23,
        Persistent = 24,
        Temporary = 25,
        VisibleWhenDistant = 26,
    }
    #endregion

    #region Registration
    public class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 120,
            version: 0);

        public const string GUID = "d54abb07-d896-4ddb-b857-9b9df945dd1e";

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(Cell_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell_ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type CommonType = typeof(CellCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)Cell_FieldIndex.Flags;
                case "GRID":
                    return (ushort)Cell_FieldIndex.Grid;
                case "AMBIENTCOLOR":
                    return (ushort)Cell_FieldIndex.AmbientColor;
                case "DIRECTIONALCOLOR":
                    return (ushort)Cell_FieldIndex.DirectionalColor;
                case "FOGCOLOR":
                    return (ushort)Cell_FieldIndex.FogColor;
                case "FOGNEAR":
                    return (ushort)Cell_FieldIndex.FogNear;
                case "FOGFAR":
                    return (ushort)Cell_FieldIndex.FogFar;
                case "DIRECTIONALROTATIONXY":
                    return (ushort)Cell_FieldIndex.DirectionalRotationXY;
                case "DIRECTIONALROTATIONZ":
                    return (ushort)Cell_FieldIndex.DirectionalRotationZ;
                case "DIRECTIONALFADE":
                    return (ushort)Cell_FieldIndex.DirectionalFade;
                case "FOGCLIPDISTANCE":
                    return (ushort)Cell_FieldIndex.FogClipDistance;
                case "REGIONS":
                    return (ushort)Cell_FieldIndex.Regions;
                case "MUSICTYPE":
                    return (ushort)Cell_FieldIndex.MusicType;
                case "WATERHEIGHT":
                    return (ushort)Cell_FieldIndex.WaterHeight;
                case "CLIMATE":
                    return (ushort)Cell_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Cell_FieldIndex.Water;
                case "OWNERSHIP":
                    return (ushort)Cell_FieldIndex.Ownership;
                case "PATHGRID":
                    return (ushort)Cell_FieldIndex.PathGrid;
                case "PERSISTENT":
                    return (ushort)Cell_FieldIndex.Persistent;
                case "TEMPORARY":
                    return (ushort)Cell_FieldIndex.Temporary;
                case "VISIBLEWHENDISTANT":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistant;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.AmbientColor:
                case Cell_FieldIndex.DirectionalColor:
                case Cell_FieldIndex.FogColor:
                case Cell_FieldIndex.FogNear:
                case Cell_FieldIndex.FogFar:
                case Cell_FieldIndex.DirectionalRotationXY:
                case Cell_FieldIndex.DirectionalRotationZ:
                case Cell_FieldIndex.DirectionalFade:
                case Cell_FieldIndex.FogClipDistance:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Ownership:
                case Cell_FieldIndex.PathGrid:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Ownership:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.AmbientColor:
                case Cell_FieldIndex.DirectionalColor:
                case Cell_FieldIndex.FogColor:
                case Cell_FieldIndex.FogNear:
                case Cell_FieldIndex.FogFar:
                case Cell_FieldIndex.DirectionalRotationXY:
                case Cell_FieldIndex.DirectionalRotationZ:
                case Cell_FieldIndex.DirectionalFade:
                case Cell_FieldIndex.FogClipDistance:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.AmbientColor:
                case Cell_FieldIndex.DirectionalColor:
                case Cell_FieldIndex.FogColor:
                case Cell_FieldIndex.FogNear:
                case Cell_FieldIndex.FogFar:
                case Cell_FieldIndex.DirectionalRotationXY:
                case Cell_FieldIndex.DirectionalRotationZ:
                case Cell_FieldIndex.DirectionalFade:
                case Cell_FieldIndex.FogClipDistance:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Ownership:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    return "Flags";
                case Cell_FieldIndex.Grid:
                    return "Grid";
                case Cell_FieldIndex.AmbientColor:
                    return "AmbientColor";
                case Cell_FieldIndex.DirectionalColor:
                    return "DirectionalColor";
                case Cell_FieldIndex.FogColor:
                    return "FogColor";
                case Cell_FieldIndex.FogNear:
                    return "FogNear";
                case Cell_FieldIndex.FogFar:
                    return "FogFar";
                case Cell_FieldIndex.DirectionalRotationXY:
                    return "DirectionalRotationXY";
                case Cell_FieldIndex.DirectionalRotationZ:
                    return "DirectionalRotationZ";
                case Cell_FieldIndex.DirectionalFade:
                    return "DirectionalFade";
                case Cell_FieldIndex.FogClipDistance:
                    return "FogClipDistance";
                case Cell_FieldIndex.Regions:
                    return "Regions";
                case Cell_FieldIndex.MusicType:
                    return "MusicType";
                case Cell_FieldIndex.WaterHeight:
                    return "WaterHeight";
                case Cell_FieldIndex.Climate:
                    return "Climate";
                case Cell_FieldIndex.Water:
                    return "Water";
                case Cell_FieldIndex.Ownership:
                    return "Ownership";
                case Cell_FieldIndex.PathGrid:
                    return "PathGrid";
                case Cell_FieldIndex.Persistent:
                    return "Persistent";
                case Cell_FieldIndex.Temporary:
                    return "Temporary";
                case Cell_FieldIndex.VisibleWhenDistant:
                    return "VisibleWhenDistant";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.AmbientColor:
                case Cell_FieldIndex.DirectionalColor:
                case Cell_FieldIndex.FogColor:
                case Cell_FieldIndex.FogNear:
                case Cell_FieldIndex.FogFar:
                case Cell_FieldIndex.DirectionalRotationXY:
                case Cell_FieldIndex.DirectionalRotationZ:
                case Cell_FieldIndex.DirectionalFade:
                case Cell_FieldIndex.FogClipDistance:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Ownership:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.AmbientColor:
                case Cell_FieldIndex.DirectionalColor:
                case Cell_FieldIndex.FogColor:
                case Cell_FieldIndex.FogNear:
                case Cell_FieldIndex.FogFar:
                case Cell_FieldIndex.DirectionalRotationXY:
                case Cell_FieldIndex.DirectionalRotationZ:
                case Cell_FieldIndex.DirectionalFade:
                case Cell_FieldIndex.FogClipDistance:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Ownership:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    return typeof(Cell.Flag);
                case Cell_FieldIndex.Grid:
                    return typeof(P2Int);
                case Cell_FieldIndex.AmbientColor:
                    return typeof(Color);
                case Cell_FieldIndex.DirectionalColor:
                    return typeof(Color);
                case Cell_FieldIndex.FogColor:
                    return typeof(Color);
                case Cell_FieldIndex.FogNear:
                    return typeof(Single);
                case Cell_FieldIndex.FogFar:
                    return typeof(Single);
                case Cell_FieldIndex.DirectionalRotationXY:
                    return typeof(Int32);
                case Cell_FieldIndex.DirectionalRotationZ:
                    return typeof(Int32);
                case Cell_FieldIndex.DirectionalFade:
                    return typeof(Single);
                case Cell_FieldIndex.FogClipDistance:
                    return typeof(Single);
                case Cell_FieldIndex.Regions:
                    return typeof(NotifyingList<FormIDLink<Region>>);
                case Cell_FieldIndex.MusicType:
                    return typeof(MusicType);
                case Cell_FieldIndex.WaterHeight:
                    return typeof(Single);
                case Cell_FieldIndex.Climate:
                    return typeof(FormIDSetLink<Climate>);
                case Cell_FieldIndex.Water:
                    return typeof(FormIDSetLink<Water>);
                case Cell_FieldIndex.Ownership:
                    return typeof(Ownership);
                case Cell_FieldIndex.PathGrid:
                    return typeof(PathGrid);
                case Cell_FieldIndex.Persistent:
                    return typeof(NotifyingList<Placed>);
                case Cell_FieldIndex.Temporary:
                    return typeof(NotifyingList<Placed>);
                case Cell_FieldIndex.VisibleWhenDistant:
                    return typeof(NotifyingList<Placed>);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType XCLC_HEADER = new RecordType("XCLC");
        public static readonly RecordType XCLL_HEADER = new RecordType("XCLL");
        public static readonly RecordType XCLR_HEADER = new RecordType("XCLR");
        public static readonly RecordType XCMT_HEADER = new RecordType("XCMT");
        public static readonly RecordType XCLW_HEADER = new RecordType("XCLW");
        public static readonly RecordType XCCM_HEADER = new RecordType("XCCM");
        public static readonly RecordType XCWT_HEADER = new RecordType("XCWT");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CELL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 12;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CellCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICell item,
            ICellGetter rhs,
            ICellGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Cell_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs: rhs.Flags_Property,
                        def: def?.Flags_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.Grid ?? true)
            {
                try
                {
                    item.Grid_Property.SetToWithDefault(
                        rhs: rhs.Grid_Property,
                        def: def?.Grid_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.Grid, ex);
                }
            }
            if (copyMask?.AmbientColor ?? true)
            {
                try
                {
                    item.AmbientColor_Property.Set(
                        value: rhs.AmbientColor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.AmbientColor, ex);
                }
            }
            if (copyMask?.DirectionalColor ?? true)
            {
                try
                {
                    item.DirectionalColor_Property.Set(
                        value: rhs.DirectionalColor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.DirectionalColor, ex);
                }
            }
            if (copyMask?.FogColor ?? true)
            {
                try
                {
                    item.FogColor_Property.Set(
                        value: rhs.FogColor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.FogColor, ex);
                }
            }
            if (copyMask?.FogNear ?? true)
            {
                try
                {
                    item.FogNear_Property.Set(
                        value: rhs.FogNear,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.FogNear, ex);
                }
            }
            if (copyMask?.FogFar ?? true)
            {
                try
                {
                    item.FogFar_Property.Set(
                        value: rhs.FogFar,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.FogFar, ex);
                }
            }
            if (copyMask?.DirectionalRotationXY ?? true)
            {
                try
                {
                    item.DirectionalRotationXY_Property.Set(
                        value: rhs.DirectionalRotationXY,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.DirectionalRotationXY, ex);
                }
            }
            if (copyMask?.DirectionalRotationZ ?? true)
            {
                try
                {
                    item.DirectionalRotationZ_Property.Set(
                        value: rhs.DirectionalRotationZ,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.DirectionalRotationZ, ex);
                }
            }
            if (copyMask?.DirectionalFade ?? true)
            {
                try
                {
                    item.DirectionalFade_Property.Set(
                        value: rhs.DirectionalFade,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.DirectionalFade, ex);
                }
            }
            if (copyMask?.FogClipDistance ?? true)
            {
                try
                {
                    item.FogClipDistance_Property.Set(
                        value: rhs.FogClipDistance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.FogClipDistance, ex);
                }
            }
            if (copyMask?.Regions != CopyOption.Skip)
            {
                try
                {
                    item.Regions.SetToWithDefault(
                        rhs.Regions,
                        def?.Regions,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.Regions, ex);
                }
            }
            if (copyMask?.MusicType ?? true)
            {
                try
                {
                    item.MusicType_Property.SetToWithDefault(
                        rhs: rhs.MusicType_Property,
                        def: def?.MusicType_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.MusicType, ex);
                }
            }
            if (copyMask?.WaterHeight ?? true)
            {
                try
                {
                    item.WaterHeight_Property.SetToWithDefault(
                        rhs: rhs.WaterHeight_Property,
                        def: def?.WaterHeight_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.WaterHeight, ex);
                }
            }
            if (copyMask?.Climate ?? true)
            {
                try
                {
                    item.Climate_Property.SetToWithDefault(
                        rhs: rhs.Climate_Property,
                        def: def?.Climate_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.Climate, ex);
                }
            }
            if (copyMask?.Water ?? true)
            {
                try
                {
                    item.Water_Property.SetToWithDefault(
                        rhs: rhs.Water_Property,
                        def: def?.Water_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.Water, ex);
                }
            }
            if (copyMask?.Ownership.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Ownership_Property.SetToWithDefault(
                        rhs.Ownership_Property,
                        def?.Ownership_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Ownership.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    OwnershipCommon.CopyFieldsFrom(
                                        item: item.Ownership,
                                        rhs: rhs.Ownership,
                                        def: def?.Ownership,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Ownership_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Ownership_ErrorMask();
                                            baseMask.SetNthMask((int)Cell_FieldIndex.Ownership, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Ownership.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Ownership);
                                    return Ownership.Copy(
                                        r,
                                        copyMask?.Ownership?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ownership?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.Ownership, ex);
                }
            }
            if (copyMask?.PathGrid.Overall != CopyOption.Skip)
            {
                try
                {
                    item.PathGrid_Property.SetToWithDefault(
                        rhs.PathGrid_Property,
                        def?.PathGrid_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.PathGrid.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    PathGridCommon.CopyFieldsFrom(
                                        item: item.PathGrid,
                                        rhs: rhs.PathGrid,
                                        def: def?.PathGrid,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<PathGrid_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new PathGrid_ErrorMask();
                                            baseMask.SetNthMask((int)Cell_FieldIndex.PathGrid, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.PathGrid.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(PathGrid);
                                    return PathGrid.Copy(
                                        r,
                                        copyMask?.PathGrid?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.PathGrid?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.PathGrid, ex);
                }
            }
            if (copyMask?.Persistent.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Persistent.SetToWithDefault(
                        rhs: rhs.Persistent,
                        def: def?.Persistent,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Persistent.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Placed);
                                    return Placed.Copy(
                                        r,
                                        copyMask?.Persistent?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Persistent.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.Persistent, ex);
                }
            }
            if (copyMask?.Temporary.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Temporary.SetToWithDefault(
                        rhs: rhs.Temporary,
                        def: def?.Temporary,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Temporary.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Placed);
                                    return Placed.Copy(
                                        r,
                                        copyMask?.Temporary?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Temporary.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.Temporary, ex);
                }
            }
            if (copyMask?.VisibleWhenDistant.Overall != CopyOption.Skip)
            {
                try
                {
                    item.VisibleWhenDistant.SetToWithDefault(
                        rhs: rhs.VisibleWhenDistant,
                        def: def?.VisibleWhenDistant,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.VisibleWhenDistant.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Placed);
                                    return Placed.Copy(
                                        r,
                                        copyMask?.VisibleWhenDistant?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.VisibleWhenDistant.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Cell_FieldIndex.VisibleWhenDistant, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICell obj,
            NotifyingFireParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.AmbientColor:
                case Cell_FieldIndex.DirectionalColor:
                case Cell_FieldIndex.FogColor:
                case Cell_FieldIndex.FogNear:
                case Cell_FieldIndex.FogFar:
                case Cell_FieldIndex.DirectionalRotationXY:
                case Cell_FieldIndex.DirectionalRotationZ:
                case Cell_FieldIndex.DirectionalFade:
                case Cell_FieldIndex.FogClipDistance:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Cell_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Grid:
                    obj.Grid_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Regions:
                    obj.Regions.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.MusicType:
                    obj.MusicType_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj.WaterHeight_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Ownership:
                    obj.Ownership_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj.PathGrid_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Persistent:
                    obj.Persistent.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Temporary:
                    obj.Temporary.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj.VisibleWhenDistant.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICell obj,
            NotifyingUnsetParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Grid:
                    obj.Grid_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.AmbientColor:
                    obj.AmbientColor = default(Color);
                    break;
                case Cell_FieldIndex.DirectionalColor:
                    obj.DirectionalColor = default(Color);
                    break;
                case Cell_FieldIndex.FogColor:
                    obj.FogColor = default(Color);
                    break;
                case Cell_FieldIndex.FogNear:
                    obj.FogNear = default(Single);
                    break;
                case Cell_FieldIndex.FogFar:
                    obj.FogFar = default(Single);
                    break;
                case Cell_FieldIndex.DirectionalRotationXY:
                    obj.DirectionalRotationXY = default(Int32);
                    break;
                case Cell_FieldIndex.DirectionalRotationZ:
                    obj.DirectionalRotationZ = default(Int32);
                    break;
                case Cell_FieldIndex.DirectionalFade:
                    obj.DirectionalFade = default(Single);
                    break;
                case Cell_FieldIndex.FogClipDistance:
                    obj.FogClipDistance = default(Single);
                    break;
                case Cell_FieldIndex.Regions:
                    obj.Regions.Unset(cmds);
                    break;
                case Cell_FieldIndex.MusicType:
                    obj.MusicType_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj.WaterHeight_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Ownership:
                    obj.Ownership_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj.PathGrid_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Persistent:
                    obj.Persistent.Unset(cmds);
                    break;
                case Cell_FieldIndex.Temporary:
                    obj.Temporary.Unset(cmds);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj.VisibleWhenDistant.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICell obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.AmbientColor:
                case Cell_FieldIndex.DirectionalColor:
                case Cell_FieldIndex.FogColor:
                case Cell_FieldIndex.FogNear:
                case Cell_FieldIndex.FogFar:
                case Cell_FieldIndex.DirectionalRotationXY:
                case Cell_FieldIndex.DirectionalRotationZ:
                case Cell_FieldIndex.DirectionalFade:
                case Cell_FieldIndex.FogClipDistance:
                    return true;
                case Cell_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case Cell_FieldIndex.Grid:
                    return obj.Grid_Property.HasBeenSet;
                case Cell_FieldIndex.Regions:
                    return obj.Regions.HasBeenSet;
                case Cell_FieldIndex.MusicType:
                    return obj.MusicType_Property.HasBeenSet;
                case Cell_FieldIndex.WaterHeight:
                    return obj.WaterHeight_Property.HasBeenSet;
                case Cell_FieldIndex.Climate:
                    return obj.Climate_Property.HasBeenSet;
                case Cell_FieldIndex.Water:
                    return obj.Water_Property.HasBeenSet;
                case Cell_FieldIndex.Ownership:
                    return obj.Ownership_Property.HasBeenSet;
                case Cell_FieldIndex.PathGrid:
                    return obj.PathGrid_Property.HasBeenSet;
                case Cell_FieldIndex.Persistent:
                    return obj.Persistent.HasBeenSet;
                case Cell_FieldIndex.Temporary:
                    return obj.Temporary.HasBeenSet;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return obj.VisibleWhenDistant.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ICellGetter obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    return obj.Flags;
                case Cell_FieldIndex.Grid:
                    return obj.Grid;
                case Cell_FieldIndex.AmbientColor:
                    return obj.AmbientColor;
                case Cell_FieldIndex.DirectionalColor:
                    return obj.DirectionalColor;
                case Cell_FieldIndex.FogColor:
                    return obj.FogColor;
                case Cell_FieldIndex.FogNear:
                    return obj.FogNear;
                case Cell_FieldIndex.FogFar:
                    return obj.FogFar;
                case Cell_FieldIndex.DirectionalRotationXY:
                    return obj.DirectionalRotationXY;
                case Cell_FieldIndex.DirectionalRotationZ:
                    return obj.DirectionalRotationZ;
                case Cell_FieldIndex.DirectionalFade:
                    return obj.DirectionalFade;
                case Cell_FieldIndex.FogClipDistance:
                    return obj.FogClipDistance;
                case Cell_FieldIndex.Regions:
                    return obj.Regions;
                case Cell_FieldIndex.MusicType:
                    return obj.MusicType;
                case Cell_FieldIndex.WaterHeight:
                    return obj.WaterHeight;
                case Cell_FieldIndex.Climate:
                    return obj.Climate;
                case Cell_FieldIndex.Water:
                    return obj.Water;
                case Cell_FieldIndex.Ownership:
                    return obj.Ownership;
                case Cell_FieldIndex.PathGrid:
                    return obj.PathGrid;
                case Cell_FieldIndex.Persistent:
                    return obj.Persistent;
                case Cell_FieldIndex.Temporary:
                    return obj.Temporary;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return obj.VisibleWhenDistant;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ICell item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.Grid_Property.Unset(cmds.ToUnsetParams());
            item.AmbientColor = default(Color);
            item.DirectionalColor = default(Color);
            item.FogColor = default(Color);
            item.FogNear = default(Single);
            item.FogFar = default(Single);
            item.DirectionalRotationXY = default(Int32);
            item.DirectionalRotationZ = default(Int32);
            item.DirectionalFade = default(Single);
            item.FogClipDistance = default(Single);
            item.Regions.Unset(cmds.ToUnsetParams());
            item.MusicType_Property.Unset(cmds.ToUnsetParams());
            item.WaterHeight_Property.Unset(cmds.ToUnsetParams());
            item.Climate_Property.Unset(cmds.ToUnsetParams());
            item.Water_Property.Unset(cmds.ToUnsetParams());
            item.Ownership_Property.Unset(cmds.ToUnsetParams());
            item.PathGrid_Property.Unset(cmds.ToUnsetParams());
            item.Persistent.Unset(cmds.ToUnsetParams());
            item.Temporary.Unset(cmds.ToUnsetParams());
            item.VisibleWhenDistant.Unset(cmds.ToUnsetParams());
        }

        public static Cell_Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs)
        {
            var ret = new Cell_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            ret.Grid = item.Grid_Property.Equals(rhs.Grid_Property, (l, r) => l == r);
            ret.AmbientColor = item.AmbientColor == rhs.AmbientColor;
            ret.DirectionalColor = item.DirectionalColor == rhs.DirectionalColor;
            ret.FogColor = item.FogColor == rhs.FogColor;
            ret.FogNear = item.FogNear == rhs.FogNear;
            ret.FogFar = item.FogFar == rhs.FogFar;
            ret.DirectionalRotationXY = item.DirectionalRotationXY == rhs.DirectionalRotationXY;
            ret.DirectionalRotationZ = item.DirectionalRotationZ == rhs.DirectionalRotationZ;
            ret.DirectionalFade = item.DirectionalFade == rhs.DirectionalFade;
            ret.FogClipDistance = item.FogClipDistance == rhs.FogClipDistance;
            if (item.Regions.HasBeenSet == rhs.Regions.HasBeenSet)
            {
                if (item.Regions.HasBeenSet)
                {
                    ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Regions.Specific = item.Regions.SelectAgainst<FormIDLink<Region>, bool>(rhs.Regions, ((l, r) => object.Equals(l, r)), out ret.Regions.Overall);
                    ret.Regions.Overall = ret.Regions.Overall && ret.Regions.Specific.All((b) => b);
                }
                else
                {
                    ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Regions.Overall = true;
                }
            }
            else
            {
                ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                ret.Regions.Overall = false;
            }
            ret.MusicType = item.MusicType_Property.Equals(rhs.MusicType_Property, (l, r) => l == r);
            ret.WaterHeight = item.WaterHeight_Property.Equals(rhs.WaterHeight_Property, (l, r) => l == r);
            ret.Climate = item.Climate_Property.Equals(rhs.Climate_Property, (l, r) => l == r);
            ret.Water = item.Water_Property.Equals(rhs.Water_Property, (l, r) => l == r);
            ret.Ownership = item.Ownership_Property.LoquiEqualsHelper(rhs.Ownership_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.PathGrid = item.PathGrid_Property.LoquiEqualsHelper(rhs.PathGrid_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.Persistent.HasBeenSet == rhs.Persistent.HasBeenSet)
            {
                if (item.Persistent.HasBeenSet)
                {
                    ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.Persistent.Specific = item.Persistent.SelectAgainst<Placed, MaskItem<bool, Placed_Mask<bool>>>(rhs.Persistent, ((l, r) =>
                    {
                        MaskItem<bool, Placed_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Persistent.Overall);
                    ret.Persistent.Overall = ret.Persistent.Overall && ret.Persistent.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.Persistent.Overall = true;
                }
            }
            else
            {
                ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                ret.Persistent.Overall = false;
            }
            if (item.Temporary.HasBeenSet == rhs.Temporary.HasBeenSet)
            {
                if (item.Temporary.HasBeenSet)
                {
                    ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.Temporary.Specific = item.Temporary.SelectAgainst<Placed, MaskItem<bool, Placed_Mask<bool>>>(rhs.Temporary, ((l, r) =>
                    {
                        MaskItem<bool, Placed_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Temporary.Overall);
                    ret.Temporary.Overall = ret.Temporary.Overall && ret.Temporary.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.Temporary.Overall = true;
                }
            }
            else
            {
                ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                ret.Temporary.Overall = false;
            }
            if (item.VisibleWhenDistant.HasBeenSet == rhs.VisibleWhenDistant.HasBeenSet)
            {
                if (item.VisibleWhenDistant.HasBeenSet)
                {
                    ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.VisibleWhenDistant.Specific = item.VisibleWhenDistant.SelectAgainst<Placed, MaskItem<bool, Placed_Mask<bool>>>(rhs.VisibleWhenDistant, ((l, r) =>
                    {
                        MaskItem<bool, Placed_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.VisibleWhenDistant.Overall);
                    ret.VisibleWhenDistant.Overall = ret.VisibleWhenDistant.Overall && ret.VisibleWhenDistant.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                    ret.VisibleWhenDistant.Overall = true;
                }
            }
            else
            {
                ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>();
                ret.VisibleWhenDistant.Overall = false;
            }
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ICellGetter item,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICellGetter item,
            FileGeneration fg,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Cell)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Cell)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Grid ?? true)
                {
                    fg.AppendLine($"Grid => {item.Grid}");
                }
                if (printMask?.AmbientColor ?? true)
                {
                    fg.AppendLine($"AmbientColor => {item.AmbientColor}");
                }
                if (printMask?.DirectionalColor ?? true)
                {
                    fg.AppendLine($"DirectionalColor => {item.DirectionalColor}");
                }
                if (printMask?.FogColor ?? true)
                {
                    fg.AppendLine($"FogColor => {item.FogColor}");
                }
                if (printMask?.FogNear ?? true)
                {
                    fg.AppendLine($"FogNear => {item.FogNear}");
                }
                if (printMask?.FogFar ?? true)
                {
                    fg.AppendLine($"FogFar => {item.FogFar}");
                }
                if (printMask?.DirectionalRotationXY ?? true)
                {
                    fg.AppendLine($"DirectionalRotationXY => {item.DirectionalRotationXY}");
                }
                if (printMask?.DirectionalRotationZ ?? true)
                {
                    fg.AppendLine($"DirectionalRotationZ => {item.DirectionalRotationZ}");
                }
                if (printMask?.DirectionalFade ?? true)
                {
                    fg.AppendLine($"DirectionalFade => {item.DirectionalFade}");
                }
                if (printMask?.FogClipDistance ?? true)
                {
                    fg.AppendLine($"FogClipDistance => {item.FogClipDistance}");
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Regions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {item.MusicType}");
                }
                if (printMask?.WaterHeight ?? true)
                {
                    fg.AppendLine($"WaterHeight => {item.WaterHeight}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {item.Climate_Property}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {item.Water_Property}");
                }
                if (printMask?.Ownership?.Overall ?? true)
                {
                    item.Ownership?.ToString(fg, "Ownership");
                }
                if (printMask?.PathGrid?.Overall ?? true)
                {
                    item.PathGrid?.ToString(fg, "PathGrid");
                }
                if (printMask?.Persistent?.Overall ?? true)
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Persistent)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Temporary?.Overall ?? true)
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Temporary)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VisibleWhenDistant?.Overall ?? true)
                {
                    fg.AppendLine("VisibleWhenDistant =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.VisibleWhenDistant)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICellGetter item,
            Cell_Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.Grid.HasValue && checkMask.Grid.Value != item.Grid_Property.HasBeenSet) return false;
            if (checkMask.Regions.Overall.HasValue && checkMask.Regions.Overall.Value != item.Regions.HasBeenSet) return false;
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != item.MusicType_Property.HasBeenSet) return false;
            if (checkMask.WaterHeight.HasValue && checkMask.WaterHeight.Value != item.WaterHeight_Property.HasBeenSet) return false;
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != item.Climate_Property.HasBeenSet) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != item.Water_Property.HasBeenSet) return false;
            if (checkMask.Ownership.Overall.HasValue && checkMask.Ownership.Overall.Value != item.Ownership_Property.HasBeenSet) return false;
            if (checkMask.Ownership.Specific != null && (item.Ownership == null || !item.Ownership.HasBeenSet(checkMask.Ownership.Specific))) return false;
            if (checkMask.PathGrid.Overall.HasValue && checkMask.PathGrid.Overall.Value != item.PathGrid_Property.HasBeenSet) return false;
            if (checkMask.PathGrid.Specific != null && (item.PathGrid == null || !item.PathGrid.HasBeenSet(checkMask.PathGrid.Specific))) return false;
            if (checkMask.Persistent.Overall.HasValue && checkMask.Persistent.Overall.Value != item.Persistent.HasBeenSet) return false;
            if (checkMask.Temporary.Overall.HasValue && checkMask.Temporary.Overall.Value != item.Temporary.HasBeenSet) return false;
            if (checkMask.VisibleWhenDistant.Overall.HasValue && checkMask.VisibleWhenDistant.Overall.Value != item.VisibleWhenDistant.HasBeenSet) return false;
            return true;
        }

        public static Cell_Mask<bool> GetHasBeenSetMask(ICellGetter item)
        {
            var ret = new Cell_Mask<bool>();
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.Grid = item.Grid_Property.HasBeenSet;
            ret.AmbientColor = true;
            ret.DirectionalColor = true;
            ret.FogColor = true;
            ret.FogNear = true;
            ret.FogFar = true;
            ret.DirectionalRotationXY = true;
            ret.DirectionalRotationZ = true;
            ret.DirectionalFade = true;
            ret.FogClipDistance = true;
            ret.Regions = new MaskItem<bool, IEnumerable<bool>>(item.Regions.HasBeenSet, null);
            ret.MusicType = item.MusicType_Property.HasBeenSet;
            ret.WaterHeight = item.WaterHeight_Property.HasBeenSet;
            ret.Climate = item.Climate_Property.HasBeenSet;
            ret.Water = item.Water_Property.HasBeenSet;
            ret.Ownership = new MaskItem<bool, Ownership_Mask<bool>>(item.Ownership_Property.HasBeenSet, OwnershipCommon.GetHasBeenSetMask(item.Ownership));
            ret.PathGrid = new MaskItem<bool, PathGrid_Mask<bool>>(item.PathGrid_Property.HasBeenSet, PathGridCommon.GetHasBeenSetMask(item.PathGrid));
            ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>(item.Persistent.HasBeenSet, item.Persistent.Select((i) => new MaskItem<bool, Placed_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>(item.Temporary.HasBeenSet, item.Temporary.Select((i) => new MaskItem<bool, Placed_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, Placed_Mask<bool>>>>(item.VisibleWhenDistant.HasBeenSet, item.VisibleWhenDistant.Select((i) => new MaskItem<bool, Placed_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Cell_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Cell_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Cell_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Cell_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ICellGetter item,
            bool doMasks,
            out Cell_ErrorMask errorMask,
            string name = null)
        {
            Cell_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Cell_ErrorMask()) : default(Func<Cell_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ICellGetter item,
            Func<Cell_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Cell"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Cell");
                    }
                    if (item.Flags_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<Cell.Flag>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Flags),
                            item: item.Flags_Property,
                            fieldIndex: (int)Cell_FieldIndex.Flags,
                            errorMask: errorMask);
                    }
                    if (item.Grid_Property.HasBeenSet)
                    {
                        P2IntXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Grid),
                            item: item.Grid_Property,
                            fieldIndex: (int)Cell_FieldIndex.Grid,
                            errorMask: errorMask);
                    }
                    ColorXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.AmbientColor),
                        item: item.AmbientColor_Property,
                        fieldIndex: (int)Cell_FieldIndex.AmbientColor,
                        errorMask: errorMask);
                    ColorXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.DirectionalColor),
                        item: item.DirectionalColor_Property,
                        fieldIndex: (int)Cell_FieldIndex.DirectionalColor,
                        errorMask: errorMask);
                    ColorXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.FogColor),
                        item: item.FogColor_Property,
                        fieldIndex: (int)Cell_FieldIndex.FogColor,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.FogNear),
                        item: item.FogNear_Property,
                        fieldIndex: (int)Cell_FieldIndex.FogNear,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.FogFar),
                        item: item.FogFar_Property,
                        fieldIndex: (int)Cell_FieldIndex.FogFar,
                        errorMask: errorMask);
                    Int32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.DirectionalRotationXY),
                        item: item.DirectionalRotationXY_Property,
                        fieldIndex: (int)Cell_FieldIndex.DirectionalRotationXY,
                        errorMask: errorMask);
                    Int32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.DirectionalRotationZ),
                        item: item.DirectionalRotationZ_Property,
                        fieldIndex: (int)Cell_FieldIndex.DirectionalRotationZ,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.DirectionalFade),
                        item: item.DirectionalFade_Property,
                        fieldIndex: (int)Cell_FieldIndex.DirectionalFade,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.FogClipDistance),
                        item: item.FogClipDistance_Property,
                        fieldIndex: (int)Cell_FieldIndex.FogClipDistance,
                        errorMask: errorMask);
                    if (item.Regions.HasBeenSet)
                    {
                        ListXmlTranslation<FormIDLink<Region>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Regions),
                            item: item.Regions,
                            fieldIndex: (int)Cell_FieldIndex.Regions,
                            errorMask: errorMask,
                            transl: (FormIDLink<Region> subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                FormIDXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem?.FormID,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.MusicType_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<MusicType>.Instance.Write(
                            writer: writer,
                            name: nameof(item.MusicType),
                            item: item.MusicType_Property,
                            fieldIndex: (int)Cell_FieldIndex.MusicType,
                            errorMask: errorMask);
                    }
                    if (item.WaterHeight_Property.HasBeenSet)
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.WaterHeight),
                            item: item.WaterHeight_Property,
                            fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                            errorMask: errorMask);
                    }
                    if (item.Climate_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Climate),
                            item: item.Climate?.FormID,
                            fieldIndex: (int)Cell_FieldIndex.Climate,
                            errorMask: errorMask);
                    }
                    if (item.Water_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Water),
                            item: item.Water?.FormID,
                            fieldIndex: (int)Cell_FieldIndex.Water,
                            errorMask: errorMask);
                    }
                    if (item.Ownership_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Ownership, Ownership_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Ownership_Property,
                            name: nameof(item.Ownership),
                            fieldIndex: (int)Cell_FieldIndex.Ownership,
                            errorMask: errorMask);
                    }
                    if (item.PathGrid_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<PathGrid, PathGrid_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.PathGrid_Property,
                            name: nameof(item.PathGrid),
                            fieldIndex: (int)Cell_FieldIndex.PathGrid,
                            errorMask: errorMask);
                    }
                    if (item.Persistent.HasBeenSet)
                    {
                        ListXmlTranslation<Placed, MaskItem<Exception, Placed_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Persistent),
                            item: item.Persistent,
                            fieldIndex: (int)Cell_FieldIndex.Persistent,
                            errorMask: errorMask,
                            transl: (Placed subItem, bool listDoMasks, out MaskItem<Exception, Placed_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<Placed, Placed_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.Temporary.HasBeenSet)
                    {
                        ListXmlTranslation<Placed, MaskItem<Exception, Placed_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Temporary),
                            item: item.Temporary,
                            fieldIndex: (int)Cell_FieldIndex.Temporary,
                            errorMask: errorMask,
                            transl: (Placed subItem, bool listDoMasks, out MaskItem<Exception, Placed_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<Placed, Placed_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.VisibleWhenDistant.HasBeenSet)
                    {
                        ListXmlTranslation<Placed, MaskItem<Exception, Placed_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.VisibleWhenDistant),
                            item: item.VisibleWhenDistant,
                            fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistant,
                            errorMask: errorMask,
                            transl: (Placed subItem, bool listDoMasks, out MaskItem<Exception, Placed_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<Placed, Placed_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Cell item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Cell_ErrorMask errorMask)
        {
            Cell_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Cell_ErrorMask()) : default(Func<Cell_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Cell item,
            RecordTypeConverter recordTypeConverter,
            Func<Cell_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Cell_Registration.CELL_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
                Cell.CustomBinaryEnd_ExportInternal(
                    writer: writer,
                    obj: item,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Cell item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Cell_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Cell.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: new ContentLength(1),
                fieldIndex: (int)Cell_FieldIndex.Flags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.DATA_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Grid_Property,
                fieldIndex: (int)Cell_FieldIndex.Grid,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLC_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, Cell_Registration.XCLL_HEADER))
            {
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AmbientColor_Property,
                    fieldIndex: (int)Cell_FieldIndex.AmbientColor,
                    errorMask: errorMask,
                    extraByte: true);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DirectionalColor_Property,
                    fieldIndex: (int)Cell_FieldIndex.DirectionalColor,
                    errorMask: errorMask,
                    extraByte: true);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogColor_Property,
                    fieldIndex: (int)Cell_FieldIndex.FogColor,
                    errorMask: errorMask,
                    extraByte: true);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogNear_Property,
                    fieldIndex: (int)Cell_FieldIndex.FogNear,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogFar_Property,
                    fieldIndex: (int)Cell_FieldIndex.FogFar,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DirectionalRotationXY_Property,
                    fieldIndex: (int)Cell_FieldIndex.DirectionalRotationXY,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DirectionalRotationZ_Property,
                    fieldIndex: (int)Cell_FieldIndex.DirectionalRotationZ,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DirectionalFade_Property,
                    fieldIndex: (int)Cell_FieldIndex.DirectionalFade,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogClipDistance_Property,
                    fieldIndex: (int)Cell_FieldIndex.FogClipDistance,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Region>, Exception>.Instance.Write(
                writer: writer,
                item: item.Regions,
                fieldIndex: (int)Cell_FieldIndex.Regions,
                recordType: Cell_Registration.XCLR_HEADER,
                errorMask: errorMask,
                transl: (FormIDLink<Region> subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                writer,
                item.MusicType_Property,
                length: new ContentLength(1),
                fieldIndex: (int)Cell_FieldIndex.MusicType,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCMT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.WaterHeight_Property,
                fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLW_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Climate_Property,
                fieldIndex: (int)Cell_FieldIndex.Climate,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCCM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Water_Property,
                fieldIndex: (int)Cell_FieldIndex.Water,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCWT_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Ownership, Ownership_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Ownership_Property,
                fieldIndex: (int)Cell_FieldIndex.Ownership,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Cell_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Cell_Mask<T>>
    {
        #region Ctors
        public Cell_Mask()
        {
        }

        public Cell_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.Grid = initialValue;
            this.AmbientColor = initialValue;
            this.DirectionalColor = initialValue;
            this.FogColor = initialValue;
            this.FogNear = initialValue;
            this.FogFar = initialValue;
            this.DirectionalRotationXY = initialValue;
            this.DirectionalRotationZ = initialValue;
            this.DirectionalFade = initialValue;
            this.FogClipDistance = initialValue;
            this.Regions = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.MusicType = initialValue;
            this.WaterHeight = initialValue;
            this.Climate = initialValue;
            this.Water = initialValue;
            this.Ownership = new MaskItem<T, Ownership_Mask<T>>(initialValue, new Ownership_Mask<T>(initialValue));
            this.PathGrid = new MaskItem<T, PathGrid_Mask<T>>(initialValue, new PathGrid_Mask<T>(initialValue));
            this.Persistent = new MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>>(initialValue, null);
            this.Temporary = new MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>>(initialValue, null);
            this.VisibleWhenDistant = new MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Flags;
        public T Grid;
        public T AmbientColor;
        public T DirectionalColor;
        public T FogColor;
        public T FogNear;
        public T FogFar;
        public T DirectionalRotationXY;
        public T DirectionalRotationZ;
        public T DirectionalFade;
        public T FogClipDistance;
        public MaskItem<T, IEnumerable<T>> Regions;
        public T MusicType;
        public T WaterHeight;
        public T Climate;
        public T Water;
        public MaskItem<T, Ownership_Mask<T>> Ownership { get; set; }
        public MaskItem<T, PathGrid_Mask<T>> PathGrid { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>> Persistent;
        public MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>> Temporary;
        public MaskItem<T, IEnumerable<MaskItem<T, Placed_Mask<T>>>> VisibleWhenDistant;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Cell_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cell_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Grid, rhs.Grid)) return false;
            if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
            if (!object.Equals(this.DirectionalColor, rhs.DirectionalColor)) return false;
            if (!object.Equals(this.FogColor, rhs.FogColor)) return false;
            if (!object.Equals(this.FogNear, rhs.FogNear)) return false;
            if (!object.Equals(this.FogFar, rhs.FogFar)) return false;
            if (!object.Equals(this.DirectionalRotationXY, rhs.DirectionalRotationXY)) return false;
            if (!object.Equals(this.DirectionalRotationZ, rhs.DirectionalRotationZ)) return false;
            if (!object.Equals(this.DirectionalFade, rhs.DirectionalFade)) return false;
            if (!object.Equals(this.FogClipDistance, rhs.FogClipDistance)) return false;
            if (!object.Equals(this.Regions, rhs.Regions)) return false;
            if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
            if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
            if (!object.Equals(this.Climate, rhs.Climate)) return false;
            if (!object.Equals(this.Water, rhs.Water)) return false;
            if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
            if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
            if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
            if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
            if (!object.Equals(this.VisibleWhenDistant, rhs.VisibleWhenDistant)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Grid?.GetHashCode());
            ret = ret.CombineHashCode(this.AmbientColor?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FogColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FogNear?.GetHashCode());
            ret = ret.CombineHashCode(this.FogFar?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalRotationXY?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalRotationZ?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectionalFade?.GetHashCode());
            ret = ret.CombineHashCode(this.FogClipDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.Regions?.GetHashCode());
            ret = ret.CombineHashCode(this.MusicType?.GetHashCode());
            ret = ret.CombineHashCode(this.WaterHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Climate?.GetHashCode());
            ret = ret.CombineHashCode(this.Water?.GetHashCode());
            ret = ret.CombineHashCode(this.Ownership?.GetHashCode());
            ret = ret.CombineHashCode(this.PathGrid?.GetHashCode());
            ret = ret.CombineHashCode(this.Persistent?.GetHashCode());
            ret = ret.CombineHashCode(this.Temporary?.GetHashCode());
            ret = ret.CombineHashCode(this.VisibleWhenDistant?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Grid)) return false;
            if (!eval(this.AmbientColor)) return false;
            if (!eval(this.DirectionalColor)) return false;
            if (!eval(this.FogColor)) return false;
            if (!eval(this.FogNear)) return false;
            if (!eval(this.FogFar)) return false;
            if (!eval(this.DirectionalRotationXY)) return false;
            if (!eval(this.DirectionalRotationZ)) return false;
            if (!eval(this.DirectionalFade)) return false;
            if (!eval(this.FogClipDistance)) return false;
            if (this.Regions != null)
            {
                if (!eval(this.Regions.Overall)) return false;
                if (this.Regions.Specific != null)
                {
                    foreach (var item in this.Regions.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.MusicType)) return false;
            if (!eval(this.WaterHeight)) return false;
            if (!eval(this.Climate)) return false;
            if (!eval(this.Water)) return false;
            if (Ownership != null)
            {
                if (!eval(this.Ownership.Overall)) return false;
                if (this.Ownership.Specific != null && !this.Ownership.Specific.AllEqual(eval)) return false;
            }
            if (PathGrid != null)
            {
                if (!eval(this.PathGrid.Overall)) return false;
                if (this.PathGrid.Specific != null && !this.PathGrid.Specific.AllEqual(eval)) return false;
            }
            if (this.Persistent != null)
            {
                if (!eval(this.Persistent.Overall)) return false;
                if (this.Persistent.Specific != null)
                {
                    foreach (var item in this.Persistent.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Temporary != null)
            {
                if (!eval(this.Temporary.Overall)) return false;
                if (this.Temporary.Specific != null)
                {
                    foreach (var item in this.Temporary.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.VisibleWhenDistant != null)
            {
                if (!eval(this.VisibleWhenDistant.Overall)) return false;
                if (this.VisibleWhenDistant.Specific != null)
                {
                    foreach (var item in this.VisibleWhenDistant.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Cell_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Cell_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Cell_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Flags = eval(this.Flags);
            obj.Grid = eval(this.Grid);
            obj.AmbientColor = eval(this.AmbientColor);
            obj.DirectionalColor = eval(this.DirectionalColor);
            obj.FogColor = eval(this.FogColor);
            obj.FogNear = eval(this.FogNear);
            obj.FogFar = eval(this.FogFar);
            obj.DirectionalRotationXY = eval(this.DirectionalRotationXY);
            obj.DirectionalRotationZ = eval(this.DirectionalRotationZ);
            obj.DirectionalFade = eval(this.DirectionalFade);
            obj.FogClipDistance = eval(this.FogClipDistance);
            if (Regions != null)
            {
                obj.Regions = new MaskItem<R, IEnumerable<R>>();
                obj.Regions.Overall = eval(this.Regions.Overall);
                if (Regions.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Regions.Specific = l;
                    foreach (var item in Regions.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.MusicType = eval(this.MusicType);
            obj.WaterHeight = eval(this.WaterHeight);
            obj.Climate = eval(this.Climate);
            obj.Water = eval(this.Water);
            if (this.Ownership != null)
            {
                obj.Ownership = new MaskItem<R, Ownership_Mask<R>>();
                obj.Ownership.Overall = eval(this.Ownership.Overall);
                if (this.Ownership.Specific != null)
                {
                    obj.Ownership.Specific = this.Ownership.Specific.Translate(eval);
                }
            }
            if (this.PathGrid != null)
            {
                obj.PathGrid = new MaskItem<R, PathGrid_Mask<R>>();
                obj.PathGrid.Overall = eval(this.PathGrid.Overall);
                if (this.PathGrid.Specific != null)
                {
                    obj.PathGrid.Specific = this.PathGrid.Specific.Translate(eval);
                }
            }
            if (Persistent != null)
            {
                obj.Persistent = new MaskItem<R, IEnumerable<MaskItem<R, Placed_Mask<R>>>>();
                obj.Persistent.Overall = eval(this.Persistent.Overall);
                if (Persistent.Specific != null)
                {
                    List<MaskItem<R, Placed_Mask<R>>> l = new List<MaskItem<R, Placed_Mask<R>>>();
                    obj.Persistent.Specific = l;
                    foreach (var item in Persistent.Specific)
                    {
                        MaskItem<R, Placed_Mask<R>> mask = default(MaskItem<R, Placed_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Placed_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Temporary != null)
            {
                obj.Temporary = new MaskItem<R, IEnumerable<MaskItem<R, Placed_Mask<R>>>>();
                obj.Temporary.Overall = eval(this.Temporary.Overall);
                if (Temporary.Specific != null)
                {
                    List<MaskItem<R, Placed_Mask<R>>> l = new List<MaskItem<R, Placed_Mask<R>>>();
                    obj.Temporary.Specific = l;
                    foreach (var item in Temporary.Specific)
                    {
                        MaskItem<R, Placed_Mask<R>> mask = default(MaskItem<R, Placed_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Placed_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (VisibleWhenDistant != null)
            {
                obj.VisibleWhenDistant = new MaskItem<R, IEnumerable<MaskItem<R, Placed_Mask<R>>>>();
                obj.VisibleWhenDistant.Overall = eval(this.VisibleWhenDistant.Overall);
                if (VisibleWhenDistant.Specific != null)
                {
                    List<MaskItem<R, Placed_Mask<R>>> l = new List<MaskItem<R, Placed_Mask<R>>>();
                    obj.VisibleWhenDistant.Specific = l;
                    foreach (var item in VisibleWhenDistant.Specific)
                    {
                        MaskItem<R, Placed_Mask<R>> mask = default(MaskItem<R, Placed_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Placed_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Regions.Specific = null;
            this.Persistent.Specific = null;
            this.Temporary.Specific = null;
            this.VisibleWhenDistant.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Cell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Cell_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Cell_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Grid ?? true)
                {
                    fg.AppendLine($"Grid => {Grid}");
                }
                if (printMask?.AmbientColor ?? true)
                {
                    fg.AppendLine($"AmbientColor => {AmbientColor}");
                }
                if (printMask?.DirectionalColor ?? true)
                {
                    fg.AppendLine($"DirectionalColor => {DirectionalColor}");
                }
                if (printMask?.FogColor ?? true)
                {
                    fg.AppendLine($"FogColor => {FogColor}");
                }
                if (printMask?.FogNear ?? true)
                {
                    fg.AppendLine($"FogNear => {FogNear}");
                }
                if (printMask?.FogFar ?? true)
                {
                    fg.AppendLine($"FogFar => {FogFar}");
                }
                if (printMask?.DirectionalRotationXY ?? true)
                {
                    fg.AppendLine($"DirectionalRotationXY => {DirectionalRotationXY}");
                }
                if (printMask?.DirectionalRotationZ ?? true)
                {
                    fg.AppendLine($"DirectionalRotationZ => {DirectionalRotationZ}");
                }
                if (printMask?.DirectionalFade ?? true)
                {
                    fg.AppendLine($"DirectionalFade => {DirectionalFade}");
                }
                if (printMask?.FogClipDistance ?? true)
                {
                    fg.AppendLine($"FogClipDistance => {FogClipDistance}");
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Regions.Overall != null)
                        {
                            fg.AppendLine(Regions.Overall.ToString());
                        }
                        if (Regions.Specific != null)
                        {
                            foreach (var subItem in Regions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {MusicType}");
                }
                if (printMask?.WaterHeight ?? true)
                {
                    fg.AppendLine($"WaterHeight => {WaterHeight}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {Climate}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {Water}");
                }
                if (printMask?.Ownership?.Overall ?? true)
                {
                    Ownership?.ToString(fg);
                }
                if (printMask?.PathGrid?.Overall ?? true)
                {
                    PathGrid?.ToString(fg);
                }
                if (printMask?.Persistent?.Overall ?? true)
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Persistent.Overall != null)
                        {
                            fg.AppendLine(Persistent.Overall.ToString());
                        }
                        if (Persistent.Specific != null)
                        {
                            foreach (var subItem in Persistent.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Temporary?.Overall ?? true)
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Temporary.Overall != null)
                        {
                            fg.AppendLine(Temporary.Overall.ToString());
                        }
                        if (Temporary.Specific != null)
                        {
                            foreach (var subItem in Temporary.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VisibleWhenDistant?.Overall ?? true)
                {
                    fg.AppendLine("VisibleWhenDistant =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (VisibleWhenDistant.Overall != null)
                        {
                            fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                        }
                        if (VisibleWhenDistant.Specific != null)
                        {
                            foreach (var subItem in VisibleWhenDistant.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Cell_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Cell_ErrorMask>
    {
        #region Members
        public Exception Flags;
        public Exception Grid;
        public Exception AmbientColor;
        public Exception DirectionalColor;
        public Exception FogColor;
        public Exception FogNear;
        public Exception FogFar;
        public Exception DirectionalRotationXY;
        public Exception DirectionalRotationZ;
        public Exception DirectionalFade;
        public Exception FogClipDistance;
        public MaskItem<Exception, IEnumerable<Exception>> Regions;
        public Exception MusicType;
        public Exception WaterHeight;
        public Exception Climate;
        public Exception Water;
        public MaskItem<Exception, Ownership_ErrorMask> Ownership;
        public MaskItem<Exception, PathGrid_ErrorMask> PathGrid;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>> Persistent;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>> Temporary;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>> VisibleWhenDistant;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = ex;
                    break;
                case Cell_FieldIndex.AmbientColor:
                    this.AmbientColor = ex;
                    break;
                case Cell_FieldIndex.DirectionalColor:
                    this.DirectionalColor = ex;
                    break;
                case Cell_FieldIndex.FogColor:
                    this.FogColor = ex;
                    break;
                case Cell_FieldIndex.FogNear:
                    this.FogNear = ex;
                    break;
                case Cell_FieldIndex.FogFar:
                    this.FogFar = ex;
                    break;
                case Cell_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = ex;
                    break;
                case Cell_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = ex;
                    break;
                case Cell_FieldIndex.DirectionalFade:
                    this.DirectionalFade = ex;
                    break;
                case Cell_FieldIndex.FogClipDistance:
                    this.FogClipDistance = ex;
                    break;
                case Cell_FieldIndex.Regions:
                    this.Regions = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = ex;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = ex;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate = ex;
                    break;
                case Cell_FieldIndex.Water:
                    this.Water = ex;
                    break;
                case Cell_FieldIndex.Ownership:
                    this.Ownership = new MaskItem<Exception, Ownership_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = new MaskItem<Exception, PathGrid_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Persistent:
                    this.Persistent = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(ex, null);
                    break;
                case Cell_FieldIndex.Temporary:
                    this.Temporary = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(ex, null);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this.VisibleWhenDistant = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = (Exception)obj;
                    break;
                case Cell_FieldIndex.AmbientColor:
                    this.AmbientColor = (Exception)obj;
                    break;
                case Cell_FieldIndex.DirectionalColor:
                    this.DirectionalColor = (Exception)obj;
                    break;
                case Cell_FieldIndex.FogColor:
                    this.FogColor = (Exception)obj;
                    break;
                case Cell_FieldIndex.FogNear:
                    this.FogNear = (Exception)obj;
                    break;
                case Cell_FieldIndex.FogFar:
                    this.FogFar = (Exception)obj;
                    break;
                case Cell_FieldIndex.DirectionalRotationXY:
                    this.DirectionalRotationXY = (Exception)obj;
                    break;
                case Cell_FieldIndex.DirectionalRotationZ:
                    this.DirectionalRotationZ = (Exception)obj;
                    break;
                case Cell_FieldIndex.DirectionalFade:
                    this.DirectionalFade = (Exception)obj;
                    break;
                case Cell_FieldIndex.FogClipDistance:
                    this.FogClipDistance = (Exception)obj;
                    break;
                case Cell_FieldIndex.Regions:
                    this.Regions = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = (Exception)obj;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = (Exception)obj;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate = (Exception)obj;
                    break;
                case Cell_FieldIndex.Water:
                    this.Water = (Exception)obj;
                    break;
                case Cell_FieldIndex.Ownership:
                    this.Ownership = (MaskItem<Exception, Ownership_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = (MaskItem<Exception, PathGrid_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Persistent:
                    this.Persistent = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>)obj;
                    break;
                case Cell_FieldIndex.Temporary:
                    this.Temporary = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>)obj;
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this.VisibleWhenDistant = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (Grid != null) return true;
            if (AmbientColor != null) return true;
            if (DirectionalColor != null) return true;
            if (FogColor != null) return true;
            if (FogNear != null) return true;
            if (FogFar != null) return true;
            if (DirectionalRotationXY != null) return true;
            if (DirectionalRotationZ != null) return true;
            if (DirectionalFade != null) return true;
            if (FogClipDistance != null) return true;
            if (Regions != null) return true;
            if (MusicType != null) return true;
            if (WaterHeight != null) return true;
            if (Climate != null) return true;
            if (Water != null) return true;
            if (Ownership != null) return true;
            if (PathGrid != null) return true;
            if (Persistent != null) return true;
            if (Temporary != null) return true;
            if (VisibleWhenDistant != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Cell_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Grid => {Grid}");
            fg.AppendLine($"AmbientColor => {AmbientColor}");
            fg.AppendLine($"DirectionalColor => {DirectionalColor}");
            fg.AppendLine($"FogColor => {FogColor}");
            fg.AppendLine($"FogNear => {FogNear}");
            fg.AppendLine($"FogFar => {FogFar}");
            fg.AppendLine($"DirectionalRotationXY => {DirectionalRotationXY}");
            fg.AppendLine($"DirectionalRotationZ => {DirectionalRotationZ}");
            fg.AppendLine($"DirectionalFade => {DirectionalFade}");
            fg.AppendLine($"FogClipDistance => {FogClipDistance}");
            fg.AppendLine("Regions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Regions.Overall != null)
                {
                    fg.AppendLine(Regions.Overall.ToString());
                }
                if (Regions.Specific != null)
                {
                    foreach (var subItem in Regions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"MusicType => {MusicType}");
            fg.AppendLine($"WaterHeight => {WaterHeight}");
            fg.AppendLine($"Climate => {Climate}");
            fg.AppendLine($"Water => {Water}");
            Ownership?.ToString(fg);
            PathGrid?.ToString(fg);
            fg.AppendLine("Persistent =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Persistent.Overall != null)
                {
                    fg.AppendLine(Persistent.Overall.ToString());
                }
                if (Persistent.Specific != null)
                {
                    foreach (var subItem in Persistent.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Temporary =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Temporary.Overall != null)
                {
                    fg.AppendLine(Temporary.Overall.ToString());
                }
                if (Temporary.Specific != null)
                {
                    foreach (var subItem in Temporary.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("VisibleWhenDistant =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (VisibleWhenDistant.Overall != null)
                {
                    fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                }
                if (VisibleWhenDistant.Specific != null)
                {
                    foreach (var subItem in VisibleWhenDistant.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Cell_ErrorMask Combine(Cell_ErrorMask rhs)
        {
            var ret = new Cell_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Grid = this.Grid.Combine(rhs.Grid);
            ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor);
            ret.DirectionalColor = this.DirectionalColor.Combine(rhs.DirectionalColor);
            ret.FogColor = this.FogColor.Combine(rhs.FogColor);
            ret.FogNear = this.FogNear.Combine(rhs.FogNear);
            ret.FogFar = this.FogFar.Combine(rhs.FogFar);
            ret.DirectionalRotationXY = this.DirectionalRotationXY.Combine(rhs.DirectionalRotationXY);
            ret.DirectionalRotationZ = this.DirectionalRotationZ.Combine(rhs.DirectionalRotationZ);
            ret.DirectionalFade = this.DirectionalFade.Combine(rhs.DirectionalFade);
            ret.FogClipDistance = this.FogClipDistance.Combine(rhs.FogClipDistance);
            ret.Regions = new MaskItem<Exception, IEnumerable<Exception>>(this.Regions.Overall.Combine(rhs.Regions.Overall), new List<Exception>(this.Regions.Specific.And(rhs.Regions.Specific)));
            ret.MusicType = this.MusicType.Combine(rhs.MusicType);
            ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
            ret.Climate = this.Climate.Combine(rhs.Climate);
            ret.Water = this.Water.Combine(rhs.Water);
            ret.Ownership = new MaskItem<Exception, Ownership_ErrorMask>(this.Ownership.Overall.Combine(rhs.Ownership.Overall), ((IErrorMask<Ownership_ErrorMask>)this.Ownership.Specific).Combine(rhs.Ownership.Specific));
            ret.PathGrid = new MaskItem<Exception, PathGrid_ErrorMask>(this.PathGrid.Overall.Combine(rhs.PathGrid.Overall), ((IErrorMask<PathGrid_ErrorMask>)this.PathGrid.Specific).Combine(rhs.PathGrid.Specific));
            ret.Persistent = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(this.Persistent.Overall.Combine(rhs.Persistent.Overall), new List<MaskItem<Exception, Placed_ErrorMask>>(this.Persistent.Specific.And(rhs.Persistent.Specific)));
            ret.Temporary = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(this.Temporary.Overall.Combine(rhs.Temporary.Overall), new List<MaskItem<Exception, Placed_ErrorMask>>(this.Temporary.Specific.And(rhs.Temporary.Specific)));
            ret.VisibleWhenDistant = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Placed_ErrorMask>>>(this.VisibleWhenDistant.Overall.Combine(rhs.VisibleWhenDistant.Overall), new List<MaskItem<Exception, Placed_ErrorMask>>(this.VisibleWhenDistant.Specific.And(rhs.VisibleWhenDistant.Specific)));
            return ret;
        }
        public static Cell_ErrorMask Combine(Cell_ErrorMask lhs, Cell_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Cell_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Flags;
        public bool Grid;
        public bool AmbientColor;
        public bool DirectionalColor;
        public bool FogColor;
        public bool FogNear;
        public bool FogFar;
        public bool DirectionalRotationXY;
        public bool DirectionalRotationZ;
        public bool DirectionalFade;
        public bool FogClipDistance;
        public CopyOption Regions;
        public bool MusicType;
        public bool WaterHeight;
        public bool Climate;
        public bool Water;
        public MaskItem<CopyOption, Ownership_CopyMask> Ownership;
        public MaskItem<CopyOption, PathGrid_CopyMask> PathGrid;
        public MaskItem<CopyOption, Placed_CopyMask> Persistent;
        public MaskItem<CopyOption, Placed_CopyMask> Temporary;
        public MaskItem<CopyOption, Placed_CopyMask> VisibleWhenDistant;
        #endregion

    }
    #endregion




    #endregion

}
