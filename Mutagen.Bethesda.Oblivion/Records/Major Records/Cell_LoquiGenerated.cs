/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Cell : 
        Place,
        ICell,
        ILoquiObject<Cell>,
        ILoquiObjectSetter,
        INamed,
        IPlace,
        ILinkSubContainer,
        IEquatable<Cell>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;

        #region Ctor
        protected Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool ICellGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String ICellGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Flags];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.Flags, nameof(Flags_IsSet));
        }
        bool ICellGetter.Flags_IsSet => Flags_IsSet;
        private Cell.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Cell.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Cell.Flag ICellGetter.Flags => this.Flags;
        public void Flags_Set(
            Cell.Flag value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Flags, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.Flags, nameof(Flags), nameof(Flags_IsSet));
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Cell.Flag), false);
        }
        #endregion
        #region Grid
        public bool Grid_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Grid];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.Grid, nameof(Grid_IsSet));
        }
        bool ICellGetter.Grid_IsSet => Grid_IsSet;
        private P2Int _Grid;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P2Int Grid
        {
            get => this._Grid;
            set => Grid_Set(value);
        }
        P2Int ICellGetter.Grid => this.Grid;
        public void Grid_Set(
            P2Int value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Grid, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.Grid, nameof(Grid), nameof(Grid_IsSet));
        }
        public void Grid_Unset()
        {
            this.Grid_Set(default(P2Int), false);
        }
        #endregion
        #region Lighting
        public bool Lighting_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Lighting];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.Lighting, nameof(Lighting_IsSet));
        }
        bool ICellGetter.Lighting_IsSet => Lighting_IsSet;
        private CellLighting _Lighting;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CellLighting Lighting
        {
            get => _Lighting;
            set => Lighting_Set(value);
        }
        public void Lighting_Set(
            CellLighting value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Lighting, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.Lighting, nameof(Lighting), nameof(Lighting_IsSet));
        }
        public void Lighting_Unset()
        {
            this.Lighting_Set(default(CellLighting), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        CellLighting ICellGetter.Lighting => this.Lighting;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FormIDLink<Region>> _Regions = new SourceSetList<FormIDLink<Region>>();
        public ISourceSetList<FormIDLink<Region>> Regions => _Regions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDLink<Region>> RegionsEnumerable
        {
            get => _Regions.Items;
            set => _Regions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FormIDLink<Region>> ICell.Regions => _Regions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FormIDLink<Region>> ICellGetter.Regions => _Regions;
        #endregion

        #endregion
        #region MusicType
        public bool MusicType_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.MusicType];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.MusicType, nameof(MusicType_IsSet));
        }
        bool ICellGetter.MusicType_IsSet => MusicType_IsSet;
        private MusicType _MusicType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType MusicType
        {
            get => this._MusicType;
            set => MusicType_Set(value);
        }
        MusicType ICellGetter.MusicType => this.MusicType;
        public void MusicType_Set(
            MusicType value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _MusicType, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.MusicType, nameof(MusicType), nameof(MusicType_IsSet));
        }
        public void MusicType_Unset()
        {
            this.MusicType_Set(default(MusicType), false);
        }
        #endregion
        #region WaterHeight
        public bool WaterHeight_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.WaterHeight];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.WaterHeight, nameof(WaterHeight_IsSet));
        }
        bool ICellGetter.WaterHeight_IsSet => WaterHeight_IsSet;
        private Single _WaterHeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single WaterHeight
        {
            get => this._WaterHeight;
            set => WaterHeight_Set(value);
        }
        Single ICellGetter.WaterHeight => this.WaterHeight;
        public void WaterHeight_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _WaterHeight, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.WaterHeight, nameof(WaterHeight), nameof(WaterHeight_IsSet));
        }
        public void WaterHeight_Unset()
        {
            this.WaterHeight_Set(default(Single), false);
        }
        #endregion
        #region Climate
        public FormIDSetLink<Climate> Climate_Property { get; } = new FormIDSetLink<Climate>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Climate Climate { get => Climate_Property.Item; set => Climate_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Climate> ICellGetter.Climate_Property => this.Climate_Property;
        #endregion
        #region Water
        public FormIDSetLink<Water> Water_Property { get; } = new FormIDSetLink<Water>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Water Water { get => Water_Property.Item; set => Water_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Water> ICellGetter.Water_Property => this.Water_Property;
        #endregion
        #region Owner
        public FormIDSetLink<Faction> Owner_Property { get; } = new FormIDSetLink<Faction>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Faction Owner { get => Owner_Property.Item; set => Owner_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Faction> ICellGetter.Owner_Property => this.Owner_Property;
        #endregion
        #region FactionRank
        public bool FactionRank_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.FactionRank];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.FactionRank, nameof(FactionRank_IsSet));
        }
        bool ICellGetter.FactionRank_IsSet => FactionRank_IsSet;
        private Int32 _FactionRank;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FactionRank
        {
            get => this._FactionRank;
            set => FactionRank_Set(value);
        }
        Int32 ICellGetter.FactionRank => this.FactionRank;
        public void FactionRank_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _FactionRank, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.FactionRank, nameof(FactionRank), nameof(FactionRank_IsSet));
        }
        public void FactionRank_Unset()
        {
            this.FactionRank_Set(default(Int32), false);
        }
        #endregion
        #region GlobalVariable
        public FormIDSetLink<Global> GlobalVariable_Property { get; } = new FormIDSetLink<Global>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Global GlobalVariable { get => GlobalVariable_Property.Item; set => GlobalVariable_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Global> ICellGetter.GlobalVariable_Property => this.GlobalVariable_Property;
        #endregion
        #region PathGrid
        public bool PathGrid_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.PathGrid];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.PathGrid, nameof(PathGrid_IsSet));
        }
        bool ICellGetter.PathGrid_IsSet => PathGrid_IsSet;
        private PathGrid _PathGrid;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PathGrid PathGrid
        {
            get => _PathGrid;
            set => PathGrid_Set(value);
        }
        public void PathGrid_Set(
            PathGrid value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _PathGrid, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.PathGrid, nameof(PathGrid), nameof(PathGrid_IsSet));
        }
        public void PathGrid_Unset()
        {
            this.PathGrid_Set(default(PathGrid), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        PathGrid ICellGetter.PathGrid => this.PathGrid;
        #endregion
        #region Landscape
        public bool Landscape_IsSet
        {
            get => _hasBeenSetTracker[(int)Cell_FieldIndex.Landscape];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Cell_FieldIndex.Landscape, nameof(Landscape_IsSet));
        }
        bool ICellGetter.Landscape_IsSet => Landscape_IsSet;
        private Landscape _Landscape;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Landscape Landscape
        {
            get => _Landscape;
            set => Landscape_Set(value);
        }
        public void Landscape_Set(
            Landscape value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Landscape, value, _hasBeenSetTracker, markSet, (int)Cell_FieldIndex.Landscape, nameof(Landscape), nameof(Landscape_IsSet));
        }
        public void Landscape_Unset()
        {
            this.Landscape_Set(default(Landscape), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Landscape ICellGetter.Landscape => this.Landscape;
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IPlaced> _Persistent = new SourceSetList<IPlaced>();
        public ISourceSetList<IPlaced> Persistent => _Persistent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<IPlaced> PersistentEnumerable
        {
            get => _Persistent.Items;
            set => _Persistent.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<IPlaced> ICell.Persistent => _Persistent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<IPlaced> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IPlaced> _Temporary = new SourceSetList<IPlaced>();
        public ISourceSetList<IPlaced> Temporary => _Temporary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<IPlaced> TemporaryEnumerable
        {
            get => _Temporary.Items;
            set => _Temporary.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<IPlaced> ICell.Temporary => _Temporary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<IPlaced> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion
        #region VisibleWhenDistant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IPlaced> _VisibleWhenDistant = new SourceSetList<IPlaced>();
        public ISourceSetList<IPlaced> VisibleWhenDistant => _VisibleWhenDistant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<IPlaced> VisibleWhenDistantEnumerable
        {
            get => _VisibleWhenDistant.Items;
            set => _VisibleWhenDistant.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<IPlaced> ICell.VisibleWhenDistant => _VisibleWhenDistant;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<IPlaced> ICellGetter.VisibleWhenDistant => _VisibleWhenDistant;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => CellCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => CellCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CellCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CellCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Cell>.GetEqualsMask(Cell rhs) => CellCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICellGetter>.GetEqualsMask(ICellGetter rhs) => CellCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            return CellCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            CellCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Cell_Mask<bool> GetHasBeenSetMask()
        {
            return CellCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Cell rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cell rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Flags_IsSet != rhs.Flags_IsSet) return false;
            if (Flags_IsSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (Grid_IsSet != rhs.Grid_IsSet) return false;
            if (Grid_IsSet)
            {
                if (this.Grid != rhs.Grid) return false;
            }
            if (Lighting_IsSet != rhs.Lighting_IsSet) return false;
            if (Lighting_IsSet)
            {
                if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
            }
            if (Regions.HasBeenSet != rhs.Regions.HasBeenSet) return false;
            if (Regions.HasBeenSet)
            {
                if (!this.Regions.SequenceEqual(rhs.Regions)) return false;
            }
            if (MusicType_IsSet != rhs.MusicType_IsSet) return false;
            if (MusicType_IsSet)
            {
                if (this.MusicType != rhs.MusicType) return false;
            }
            if (WaterHeight_IsSet != rhs.WaterHeight_IsSet) return false;
            if (WaterHeight_IsSet)
            {
                if (!this.WaterHeight.EqualsWithin(rhs.WaterHeight)) return false;
            }
            if (Climate_Property.HasBeenSet != rhs.Climate_Property.HasBeenSet) return false;
            if (Climate_Property.HasBeenSet)
            {
                if (!this.Climate_Property.Equals(rhs.Climate_Property)) return false;
            }
            if (Water_Property.HasBeenSet != rhs.Water_Property.HasBeenSet) return false;
            if (Water_Property.HasBeenSet)
            {
                if (!this.Water_Property.Equals(rhs.Water_Property)) return false;
            }
            if (Owner_Property.HasBeenSet != rhs.Owner_Property.HasBeenSet) return false;
            if (Owner_Property.HasBeenSet)
            {
                if (!this.Owner_Property.Equals(rhs.Owner_Property)) return false;
            }
            if (FactionRank_IsSet != rhs.FactionRank_IsSet) return false;
            if (FactionRank_IsSet)
            {
                if (this.FactionRank != rhs.FactionRank) return false;
            }
            if (GlobalVariable_Property.HasBeenSet != rhs.GlobalVariable_Property.HasBeenSet) return false;
            if (GlobalVariable_Property.HasBeenSet)
            {
                if (!this.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property)) return false;
            }
            if (PathGrid_IsSet != rhs.PathGrid_IsSet) return false;
            if (PathGrid_IsSet)
            {
                if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
            }
            if (Landscape_IsSet != rhs.Landscape_IsSet) return false;
            if (Landscape_IsSet)
            {
                if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
            }
            if (Persistent.HasBeenSet != rhs.Persistent.HasBeenSet) return false;
            if (Persistent.HasBeenSet)
            {
                if (!this.Persistent.SequenceEqual(rhs.Persistent)) return false;
            }
            if (Temporary.HasBeenSet != rhs.Temporary.HasBeenSet) return false;
            if (Temporary.HasBeenSet)
            {
                if (!this.Temporary.SequenceEqual(rhs.Temporary)) return false;
            }
            if (VisibleWhenDistant.HasBeenSet != rhs.VisibleWhenDistant.HasBeenSet) return false;
            if (VisibleWhenDistant.HasBeenSet)
            {
                if (!this.VisibleWhenDistant.SequenceEqual(rhs.VisibleWhenDistant)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (Grid_IsSet)
            {
                ret = HashHelper.GetHashCode(Grid).CombineHashCode(ret);
            }
            if (Lighting_IsSet)
            {
                ret = HashHelper.GetHashCode(Lighting).CombineHashCode(ret);
            }
            if (Regions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Regions).CombineHashCode(ret);
            }
            if (MusicType_IsSet)
            {
                ret = HashHelper.GetHashCode(MusicType).CombineHashCode(ret);
            }
            if (WaterHeight_IsSet)
            {
                ret = HashHelper.GetHashCode(WaterHeight).CombineHashCode(ret);
            }
            if (Climate_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Climate).CombineHashCode(ret);
            }
            if (Water_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Water).CombineHashCode(ret);
            }
            if (Owner_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Owner).CombineHashCode(ret);
            }
            if (FactionRank_IsSet)
            {
                ret = HashHelper.GetHashCode(FactionRank).CombineHashCode(ret);
            }
            if (GlobalVariable_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(GlobalVariable).CombineHashCode(ret);
            }
            if (PathGrid_IsSet)
            {
                ret = HashHelper.GetHashCode(PathGrid).CombineHashCode(ret);
            }
            if (Landscape_IsSet)
            {
                ret = HashHelper.GetHashCode(Landscape).CombineHashCode(ret);
            }
            if (Persistent.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Persistent).CombineHashCode(ret);
            }
            if (Temporary.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Temporary).CombineHashCode(ret);
            }
            if (VisibleWhenDistant.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(VisibleWhenDistant).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Cell Create_Xml(
            XElement root,
            Cell_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Cell Create_Xml(
            XElement root,
            out Cell_ErrorMask errorMask,
            bool doMasks = true,
            Cell_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Cell Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Cell();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Cell Create_Xml(
            string path,
            Cell_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Cell Create_Xml(
            string path,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Cell Create_Xml(
            Stream stream,
            Cell_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Cell Create_Xml(
            Stream stream,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Cell>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out Place_ErrorMask errorMask,
            Place_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Cell_ErrorMask errorMask,
            bool doMasks = true,
            Cell_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out Place_ErrorMask errorMask,
            bool doMasks = true,
            Place_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            CellCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Cell item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                        if (EnumXmlTranslation<Cell.Flag>.Instance.Parse(
                            root: root,
                            item: out Cell.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Cell.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grid":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                        if (P2IntXmlTranslation.Instance.Parse(
                            root: root,
                            item: out P2Int GridParse,
                            errorMask: errorMask))
                        {
                            item.Grid = GridParse;
                        }
                        else
                        {
                            item.Grid = default(P2Int);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lighting":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                        if (LoquiXmlTranslation<CellLighting>.Instance.Parse(
                            root: root,
                            item: out CellLighting LightingParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting)))
                        {
                            item.Lighting = LightingParse;
                        }
                        else
                        {
                            item.Lighting = default(CellLighting);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Regions":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                        if (ListXmlTranslation<FormIDLink<Region>>.Instance.Parse(
                            root: root,
                            enumer: out var RegionsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Regions.SetTo(RegionsItem);
                        }
                        else
                        {
                            item.Regions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MusicType":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                        if (EnumXmlTranslation<MusicType>.Instance.Parse(
                            root: root,
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.MusicType = default(MusicType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaterHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WaterHeightParse,
                            errorMask: errorMask))
                        {
                            item.WaterHeight = WaterHeightParse;
                        }
                        else
                        {
                            item.WaterHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climate":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Climate_Property,
                        fieldIndex: (int)Cell_FieldIndex.Climate,
                        errorMask: errorMask);
                    break;
                case "Water":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Water_Property,
                        fieldIndex: (int)Cell_FieldIndex.Water,
                        errorMask: errorMask);
                    break;
                case "Owner":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Owner_Property,
                        fieldIndex: (int)Cell_FieldIndex.Owner,
                        errorMask: errorMask);
                    break;
                case "FactionRank":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 FactionRankParse,
                            errorMask: errorMask))
                        {
                            item.FactionRank = FactionRankParse;
                        }
                        else
                        {
                            item.FactionRank = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.GlobalVariable_Property,
                        fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                        errorMask: errorMask);
                    break;
                case "PathGrid":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                        if (LoquiXmlTranslation<PathGrid>.Instance.Parse(
                            root: root,
                            item: out PathGrid PathGridParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid)))
                        {
                            item.PathGrid = PathGridParse;
                        }
                        else
                        {
                            item.PathGrid = default(PathGrid);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Landscape":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                        if (LoquiXmlTranslation<Landscape>.Instance.Parse(
                            root: root,
                            item: out Landscape LandscapeParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape)))
                        {
                            item.Landscape = LandscapeParse;
                        }
                        else
                        {
                            item.Landscape = default(Landscape);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Persistent":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            root: root,
                            enumer: out var PersistentItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Persistent.SetTo(PersistentItem);
                        }
                        else
                        {
                            item.Persistent.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Temporary":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            root: root,
                            enumer: out var TemporaryItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Temporary.SetTo(TemporaryItem);
                        }
                        else
                        {
                            item.Temporary.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisibleWhenDistant":
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                        if (ListXmlTranslation<IPlaced>.Instance.Parse(
                            root: root,
                            enumer: out var VisibleWhenDistantItem,
                            transl: LoquiXmlTranslation<IPlaced>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.VisibleWhenDistant.SetTo(VisibleWhenDistantItem);
                        }
                        else
                        {
                            item.VisibleWhenDistant.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    Place.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Cell_FieldIndex)index)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                    return _hasBeenSetTracker[index];
                case Cell_FieldIndex.Regions:
                    return Regions.HasBeenSet;
                case Cell_FieldIndex.Climate:
                    return Climate_Property.HasBeenSet;
                case Cell_FieldIndex.Water:
                    return Water_Property.HasBeenSet;
                case Cell_FieldIndex.Owner:
                    return Owner_Property.HasBeenSet;
                case Cell_FieldIndex.GlobalVariable:
                    return GlobalVariable_Property.HasBeenSet;
                case Cell_FieldIndex.Persistent:
                    return Persistent.HasBeenSet;
                case Cell_FieldIndex.Temporary:
                    return Temporary.HasBeenSet;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return VisibleWhenDistant.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Cell_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Regions)
            {
                yield return item;
            }
            yield return Climate_Property;
            yield return Water_Property;
            yield return Owner_Property;
            yield return GlobalVariable_Property;
            if (PathGrid != null)
            {
                foreach (var item in PathGrid.Links)
                {
                    yield return item;
                }
            }
            if (Landscape != null)
            {
                foreach (var item in Landscape.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in Persistent.WhereCastable<IPlaced, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            foreach (var item in Temporary.WhereCastable<IPlaced, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            foreach (var item in VisibleWhenDistant.WhereCastable<IPlaced, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            foreach (var item in Regions)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            Climate_Property.Link(
                modList,
                sourceMod,
                cmds);
            Water_Property.Link(
                modList,
                sourceMod,
                cmds);
            Owner_Property.Link(
                modList,
                sourceMod,
                cmds);
            GlobalVariable_Property.Link(
                modList,
                sourceMod,
                cmds);
            if (PathGrid != null)
            {
                PathGrid?.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            if (Landscape != null)
            {
                Landscape?.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            foreach (var item in Persistent.WhereCastable<IPlaced, ILinkSubContainer>())
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            foreach (var item in Temporary.WhereCastable<IPlaced, ILinkSubContainer>())
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            foreach (var item in VisibleWhenDistant.WhereCastable<IPlaced, ILinkSubContainer>())
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
        }

        public Cell(FormKey formKey)
        {
            this.FormKey = formKey;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Cell Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Cell Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Cell Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = UtilityTranslation.MajorRecordParse<Cell>(
                record: new Cell(),
                frame: frame,
                errorMask: errorMask,
                recType: Cell_Registration.CELL_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            try
            {
                CustomBinaryEnd_Import(
                    frame: frame,
                    obj: ret,
                    masterReferences: masterReferences,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Cell Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static Cell Create_Binary(
            string path,
            MasterReferences masterReferences,
            out Cell_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        public static Cell Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static Cell Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Cell_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        masterReferences: masterReferences,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Cell_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    masterReferences: masterReferences,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Place_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            CellCommon.Write_Binary(
                item: this,
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Cell item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Place.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Cell item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Name);
                case 0x41544144: // DATA
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                        if (EnumBinaryTranslation<Cell.Flag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Cell.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Cell.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Flags);
                case 0x434C4358: // XCLC
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                        if (Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out P2Int GridParse,
                            errorMask: errorMask))
                        {
                            item.Grid = GridParse;
                        }
                        else
                        {
                            item.Grid = default(P2Int);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Grid);
                case 0x4C4C4358: // XCLL
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                        if (LoquiBinaryTranslation<CellLighting>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out CellLighting LightingParse,
                            errorMask: errorMask))
                        {
                            item.Lighting = LightingParse;
                        }
                        else
                        {
                            item.Lighting = default(CellLighting);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Lighting);
                case 0x524C4358: // XCLR
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Region>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Regions,
                        fieldIndex: (int)Cell_FieldIndex.Regions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormKeyBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Regions);
                case 0x544D4358: // XCMT
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                        if (EnumBinaryTranslation<MusicType>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.MusicType = default(MusicType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.MusicType);
                case 0x574C4358: // XCLW
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single WaterHeightParse,
                            errorMask: errorMask))
                        {
                            item.WaterHeight = WaterHeightParse;
                        }
                        else
                        {
                            item.WaterHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.WaterHeight);
                case 0x4D434358: // XCCM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Climate_Property,
                        fieldIndex: (int)Cell_FieldIndex.Climate,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Climate);
                case 0x54574358: // XCWT
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Water_Property,
                        fieldIndex: (int)Cell_FieldIndex.Water,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Water);
                case 0x4E574F58: // XOWN
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Owner_Property,
                        fieldIndex: (int)Cell_FieldIndex.Owner,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.Owner);
                case 0x4B4E5258: // XRNK
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 FactionRankParse,
                            errorMask: errorMask))
                        {
                            item.FactionRank = FactionRankParse;
                        }
                        else
                        {
                            item.FactionRank = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.FactionRank);
                case 0x424C4758: // XGLB
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.GlobalVariable_Property,
                        fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Cell_FieldIndex.GlobalVariable);
                default:
                    return Place.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        static partial void CustomBinaryEnd_Import(
            MutagenFrame frame,
            Cell obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);
        static partial void CustomBinaryEnd_Export(
            MutagenWriter writer,
            Cell obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);
        public static void CustomBinaryEnd_ExportInternal(
            MutagenWriter writer,
            Cell obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            CustomBinaryEnd_Export(
                writer: writer,
                obj: obj,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        #endregion

        public Cell Copy(
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            return Cell.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Cell Copy(
            ICell item,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            Cell ret;
            if (item.GetType().Equals(typeof(Cell)))
            {
                ret = new Cell();
            }
            else
            {
                ret = (Cell)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Cell Copy_ToLoqui(
            ICellGetter item,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null)
        {
            Cell ret;
            if (item.GetType().Equals(typeof(Cell)))
            {
                ret = new Cell() as Cell;
            }
            else
            {
                ret = (Cell)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (ICellGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICellGetter rhs,
            Cell_CopyMask copyMask,
            ICellGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICellGetter rhs,
            out Cell_ErrorMask errorMask,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICellGetter rhs,
            ErrorMaskBuilder errorMask,
            Cell_CopyMask copyMask = null,
            ICellGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            CellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Cell_FieldIndex.Flags:
                    this.Flags = (Cell.Flag)obj;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = (P2Int)obj;
                    break;
                case Cell_FieldIndex.Lighting:
                    this.Lighting = (CellLighting)obj;
                    break;
                case Cell_FieldIndex.Regions:
                    this._Regions.SetTo((IEnumerable<FormIDLink<Region>>)obj);
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = (MusicType)obj;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = (Single)obj;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate_Property.Set(
                        (FormIDSetLink<Climate>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Water:
                    this.Water_Property.Set(
                        (FormIDSetLink<Water>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.Owner:
                    this.Owner_Property.Set(
                        (FormIDSetLink<Faction>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.FactionRank:
                    this.FactionRank = (Int32)obj;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    this.GlobalVariable_Property.Set(
                        (FormIDSetLink<Global>)obj,
                        cmds);
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = (PathGrid)obj;
                    break;
                case Cell_FieldIndex.Landscape:
                    this.Landscape = (Landscape)obj;
                    break;
                case Cell_FieldIndex.Persistent:
                    this._Persistent.SetTo((IEnumerable<IPlaced>)obj);
                    break;
                case Cell_FieldIndex.Temporary:
                    this._Temporary.SetTo((IEnumerable<IPlaced>)obj);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this._VisibleWhenDistant.SetTo((IEnumerable<IPlaced>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CellCommon.Clear(this, cmds);
        }


        public new static Cell Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Cell();
            foreach (var pair in fields)
            {
                CopyInInternal_Cell(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Cell(Cell obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Cell_FieldIndex enu))
            {
                CopyInInternal_Place(obj, pair);
            }
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Cell_FieldIndex.Flags:
                    obj.Flags = (Cell.Flag)pair.Value;
                    break;
                case Cell_FieldIndex.Grid:
                    obj.Grid = (P2Int)pair.Value;
                    break;
                case Cell_FieldIndex.Lighting:
                    obj.Lighting = (CellLighting)pair.Value;
                    break;
                case Cell_FieldIndex.Regions:
                    obj._Regions.SetTo((IEnumerable<FormIDLink<Region>>)pair.Value);
                    break;
                case Cell_FieldIndex.MusicType:
                    obj.MusicType = (MusicType)pair.Value;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj.WaterHeight = (Single)pair.Value;
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.Set(
                        (FormIDSetLink<Climate>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.Set(
                        (FormIDSetLink<Water>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.Owner:
                    obj.Owner_Property.Set(
                        (FormIDSetLink<Faction>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.FactionRank:
                    obj.FactionRank = (Int32)pair.Value;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Set(
                        (FormIDSetLink<Global>)pair.Value,
                        null);
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj.PathGrid = (PathGrid)pair.Value;
                    break;
                case Cell_FieldIndex.Landscape:
                    obj.Landscape = (Landscape)pair.Value;
                    break;
                case Cell_FieldIndex.Persistent:
                    obj._Persistent.SetTo((IEnumerable<IPlaced>)pair.Value);
                    break;
                case Cell_FieldIndex.Temporary:
                    obj._Temporary.SetTo((IEnumerable<IPlaced>)pair.Value);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj._VisibleWhenDistant.SetTo((IEnumerable<IPlaced>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Cell obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICell : ICellGetter, IPlace, ILoquiClass<ICell, ICellGetter>, ILoquiClass<Cell, ICellGetter>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new Cell.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Cell.Flag item, bool hasBeenSet = true);
        void Flags_Unset();

        new P2Int Grid { get; set; }
        new bool Grid_IsSet { get; set; }
        void Grid_Set(P2Int item, bool hasBeenSet = true);
        void Grid_Unset();

        new CellLighting Lighting { get; set; }
        new bool Lighting_IsSet { get; set; }
        void Lighting_Set(CellLighting item, bool hasBeenSet = true);
        void Lighting_Unset();

        new ISourceSetList<FormIDLink<Region>> Regions { get; }
        new MusicType MusicType { get; set; }
        new bool MusicType_IsSet { get; set; }
        void MusicType_Set(MusicType item, bool hasBeenSet = true);
        void MusicType_Unset();

        new Single WaterHeight { get; set; }
        new bool WaterHeight_IsSet { get; set; }
        void WaterHeight_Set(Single item, bool hasBeenSet = true);
        void WaterHeight_Unset();

        new Climate Climate { get; set; }
        new Water Water { get; set; }
        new Faction Owner { get; set; }
        new Int32 FactionRank { get; set; }
        new bool FactionRank_IsSet { get; set; }
        void FactionRank_Set(Int32 item, bool hasBeenSet = true);
        void FactionRank_Unset();

        new Global GlobalVariable { get; set; }
        new PathGrid PathGrid { get; set; }
        new bool PathGrid_IsSet { get; set; }
        void PathGrid_Set(PathGrid item, bool hasBeenSet = true);
        void PathGrid_Unset();

        new Landscape Landscape { get; set; }
        new bool Landscape_IsSet { get; set; }
        void Landscape_Set(Landscape item, bool hasBeenSet = true);
        void Landscape_Unset();

        new ISourceSetList<IPlaced> Persistent { get; }
        new ISourceSetList<IPlaced> Temporary { get; }
        new ISourceSetList<IPlaced> VisibleWhenDistant { get; }
    }

    public partial interface ICellGetter : IPlaceGetter
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Flags
        Cell.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region Grid
        P2Int Grid { get; }
        bool Grid_IsSet { get; }

        #endregion
        #region Lighting
        CellLighting Lighting { get; }
        bool Lighting_IsSet { get; }

        #endregion
        #region Regions
        IObservableSetList<FormIDLink<Region>> Regions { get; }
        #endregion
        #region MusicType
        MusicType MusicType { get; }
        bool MusicType_IsSet { get; }

        #endregion
        #region WaterHeight
        Single WaterHeight { get; }
        bool WaterHeight_IsSet { get; }

        #endregion
        #region Climate
        Climate Climate { get; }
        FormIDSetLink<Climate> Climate_Property { get; }

        #endregion
        #region Water
        Water Water { get; }
        FormIDSetLink<Water> Water_Property { get; }

        #endregion
        #region Owner
        Faction Owner { get; }
        FormIDSetLink<Faction> Owner_Property { get; }

        #endregion
        #region FactionRank
        Int32 FactionRank { get; }
        bool FactionRank_IsSet { get; }

        #endregion
        #region GlobalVariable
        Global GlobalVariable { get; }
        FormIDSetLink<Global> GlobalVariable_Property { get; }

        #endregion
        #region PathGrid
        PathGrid PathGrid { get; }
        bool PathGrid_IsSet { get; }

        #endregion
        #region Landscape
        Landscape Landscape { get; }
        bool Landscape_IsSet { get; }

        #endregion
        #region Persistent
        IObservableSetList<IPlaced> Persistent { get; }
        #endregion
        #region Temporary
        IObservableSetList<IPlaced> Temporary { get; }
        #endregion
        #region VisibleWhenDistant
        IObservableSetList<IPlaced> VisibleWhenDistant { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Cell_FieldIndex
    {
        MajorRecordFlags = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Flags = 6,
        Grid = 7,
        Lighting = 8,
        Regions = 9,
        MusicType = 10,
        WaterHeight = 11,
        Climate = 12,
        Water = 13,
        Owner = 14,
        FactionRank = 15,
        GlobalVariable = 16,
        PathGrid = 17,
        Landscape = 18,
        Persistent = 19,
        Temporary = 20,
        VisibleWhenDistant = 21,
    }
    #endregion

    #region Registration
    public class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 120,
            version: 0);

        public const string GUID = "d54abb07-d896-4ddb-b857-9b9df945dd1e";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Cell_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell_ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type CommonType = typeof(CellCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Cell_FieldIndex.Name;
                case "FLAGS":
                    return (ushort)Cell_FieldIndex.Flags;
                case "GRID":
                    return (ushort)Cell_FieldIndex.Grid;
                case "LIGHTING":
                    return (ushort)Cell_FieldIndex.Lighting;
                case "REGIONS":
                    return (ushort)Cell_FieldIndex.Regions;
                case "MUSICTYPE":
                    return (ushort)Cell_FieldIndex.MusicType;
                case "WATERHEIGHT":
                    return (ushort)Cell_FieldIndex.WaterHeight;
                case "CLIMATE":
                    return (ushort)Cell_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Cell_FieldIndex.Water;
                case "OWNER":
                    return (ushort)Cell_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)Cell_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)Cell_FieldIndex.GlobalVariable;
                case "PATHGRID":
                    return (ushort)Cell_FieldIndex.PathGrid;
                case "LANDSCAPE":
                    return (ushort)Cell_FieldIndex.Landscape;
                case "PERSISTENT":
                    return (ushort)Cell_FieldIndex.Persistent;
                case "TEMPORARY":
                    return (ushort)Cell_FieldIndex.Temporary;
                case "VISIBLEWHENDISTANT":
                    return (ushort)Cell_FieldIndex.VisibleWhenDistant;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                    return false;
                default:
                    return Place_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return true;
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                    return false;
                default:
                    return Place_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return "Name";
                case Cell_FieldIndex.Flags:
                    return "Flags";
                case Cell_FieldIndex.Grid:
                    return "Grid";
                case Cell_FieldIndex.Lighting:
                    return "Lighting";
                case Cell_FieldIndex.Regions:
                    return "Regions";
                case Cell_FieldIndex.MusicType:
                    return "MusicType";
                case Cell_FieldIndex.WaterHeight:
                    return "WaterHeight";
                case Cell_FieldIndex.Climate:
                    return "Climate";
                case Cell_FieldIndex.Water:
                    return "Water";
                case Cell_FieldIndex.Owner:
                    return "Owner";
                case Cell_FieldIndex.FactionRank:
                    return "FactionRank";
                case Cell_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case Cell_FieldIndex.PathGrid:
                    return "PathGrid";
                case Cell_FieldIndex.Landscape:
                    return "Landscape";
                case Cell_FieldIndex.Persistent:
                    return "Persistent";
                case Cell_FieldIndex.Temporary:
                    return "Temporary";
                case Cell_FieldIndex.VisibleWhenDistant:
                    return "VisibleWhenDistant";
                default:
                    return Place_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                case Cell_FieldIndex.Flags:
                case Cell_FieldIndex.Grid:
                case Cell_FieldIndex.Lighting:
                case Cell_FieldIndex.Regions:
                case Cell_FieldIndex.MusicType:
                case Cell_FieldIndex.WaterHeight:
                case Cell_FieldIndex.Climate:
                case Cell_FieldIndex.Water:
                case Cell_FieldIndex.Owner:
                case Cell_FieldIndex.FactionRank:
                case Cell_FieldIndex.GlobalVariable:
                case Cell_FieldIndex.PathGrid:
                case Cell_FieldIndex.Landscape:
                case Cell_FieldIndex.Persistent:
                case Cell_FieldIndex.Temporary:
                case Cell_FieldIndex.VisibleWhenDistant:
                    return false;
                default:
                    return Place_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return typeof(String);
                case Cell_FieldIndex.Flags:
                    return typeof(Cell.Flag);
                case Cell_FieldIndex.Grid:
                    return typeof(P2Int);
                case Cell_FieldIndex.Lighting:
                    return typeof(CellLighting);
                case Cell_FieldIndex.Regions:
                    return typeof(SourceSetList<FormIDLink<Region>>);
                case Cell_FieldIndex.MusicType:
                    return typeof(MusicType);
                case Cell_FieldIndex.WaterHeight:
                    return typeof(Single);
                case Cell_FieldIndex.Climate:
                    return typeof(FormIDSetLink<Climate>);
                case Cell_FieldIndex.Water:
                    return typeof(FormIDSetLink<Water>);
                case Cell_FieldIndex.Owner:
                    return typeof(FormIDSetLink<Faction>);
                case Cell_FieldIndex.FactionRank:
                    return typeof(Int32);
                case Cell_FieldIndex.GlobalVariable:
                    return typeof(FormIDSetLink<Global>);
                case Cell_FieldIndex.PathGrid:
                    return typeof(PathGrid);
                case Cell_FieldIndex.Landscape:
                    return typeof(Landscape);
                case Cell_FieldIndex.Persistent:
                    return typeof(SourceSetList<IPlaced>);
                case Cell_FieldIndex.Temporary:
                    return typeof(SourceSetList<IPlaced>);
                case Cell_FieldIndex.VisibleWhenDistant:
                    return typeof(SourceSetList<IPlaced>);
                default:
                    return Place_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType XCLC_HEADER = new RecordType("XCLC");
        public static readonly RecordType XCLL_HEADER = new RecordType("XCLL");
        public static readonly RecordType XCLR_HEADER = new RecordType("XCLR");
        public static readonly RecordType XCMT_HEADER = new RecordType("XCMT");
        public static readonly RecordType XCLW_HEADER = new RecordType("XCLW");
        public static readonly RecordType XCCM_HEADER = new RecordType("XCCM");
        public static readonly RecordType XCWT_HEADER = new RecordType("XCWT");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CELL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 17;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CellCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICell item,
            ICellGetter rhs,
            ICellGetter def,
            ErrorMaskBuilder errorMask,
            Cell_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            PlaceCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(Cell.Flag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Grid ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Grid,
                        rhsHasBeenSet: rhs.Grid_IsSet,
                        defItem: def?.Grid ?? default(P2Int),
                        defHasBeenSet: def?.Grid_IsSet ?? false,
                        outRhsItem: out var rhsGridItem,
                        outDefItem: out var defGridItem))
                    {
                        item.Grid = rhsGridItem;
                    }
                    else
                    {
                        item.Grid_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Lighting.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Lighting,
                        rhsHasBeenSet: rhs.Lighting_IsSet,
                        defItem: def?.Lighting,
                        defHasBeenSet: def?.Lighting_IsSet ?? false,
                        outRhsItem: out var rhsLightingItem,
                        outDefItem: out var defLightingItem))
                    {
                        switch (copyMask?.Lighting.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Lighting = rhsLightingItem;
                                break;
                            case CopyOption.CopyIn:
                                CellLightingCommon.CopyFieldsFrom(
                                    item: item.Lighting,
                                    rhs: rhs.Lighting,
                                    def: def?.Lighting,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Lighting.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.Lighting = CellLighting.Copy(
                                    rhsLightingItem,
                                    copyMask?.Lighting?.Specific,
                                    def: defLightingItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Lighting?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Lighting_IsSet = false;
                        item.Lighting = default(CellLighting);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Regions != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                try
                {
                    item.Regions.SetToWithDefault(
                        rhs.Regions,
                        def?.Regions);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MusicType ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.MusicType);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MusicType,
                        rhsHasBeenSet: rhs.MusicType_IsSet,
                        defItem: def?.MusicType ?? default(MusicType),
                        defHasBeenSet: def?.MusicType_IsSet ?? false,
                        outRhsItem: out var rhsMusicTypeItem,
                        outDefItem: out var defMusicTypeItem))
                    {
                        item.MusicType = rhsMusicTypeItem;
                    }
                    else
                    {
                        item.MusicType_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.WaterHeight ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.WaterHeight);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.WaterHeight,
                        rhsHasBeenSet: rhs.WaterHeight_IsSet,
                        defItem: def?.WaterHeight ?? default(Single),
                        defHasBeenSet: def?.WaterHeight_IsSet ?? false,
                        outRhsItem: out var rhsWaterHeightItem,
                        outDefItem: out var defWaterHeightItem))
                    {
                        item.WaterHeight = rhsWaterHeightItem;
                    }
                    else
                    {
                        item.WaterHeight_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Climate ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Climate);
                try
                {
                    item.Climate_Property.SetToWithDefault(
                        rhs: rhs.Climate_Property,
                        def: def?.Climate_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Water ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Water);
                try
                {
                    item.Water_Property.SetToWithDefault(
                        rhs: rhs.Water_Property,
                        def: def?.Water_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Owner ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Owner);
                try
                {
                    item.Owner_Property.SetToWithDefault(
                        rhs: rhs.Owner_Property,
                        def: def?.Owner_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FactionRank ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.FactionRank);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FactionRank,
                        rhsHasBeenSet: rhs.FactionRank_IsSet,
                        defItem: def?.FactionRank ?? default(Int32),
                        defHasBeenSet: def?.FactionRank_IsSet ?? false,
                        outRhsItem: out var rhsFactionRankItem,
                        outDefItem: out var defFactionRankItem))
                    {
                        item.FactionRank = rhsFactionRankItem;
                    }
                    else
                    {
                        item.FactionRank_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GlobalVariable ?? true)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.GlobalVariable);
                try
                {
                    item.GlobalVariable_Property.SetToWithDefault(
                        rhs: rhs.GlobalVariable_Property,
                        def: def?.GlobalVariable_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PathGrid.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.PathGrid,
                        rhsHasBeenSet: rhs.PathGrid_IsSet,
                        defItem: def?.PathGrid,
                        defHasBeenSet: def?.PathGrid_IsSet ?? false,
                        outRhsItem: out var rhsPathGridItem,
                        outDefItem: out var defPathGridItem))
                    {
                        switch (copyMask?.PathGrid.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.PathGrid = rhsPathGridItem;
                                break;
                            case CopyOption.CopyIn:
                                PathGridCommon.CopyFieldsFrom(
                                    item: item.PathGrid,
                                    rhs: rhs.PathGrid,
                                    def: def?.PathGrid,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.PathGrid.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.PathGrid = PathGrid.Copy(
                                    rhsPathGridItem,
                                    copyMask?.PathGrid?.Specific,
                                    def: defPathGridItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.PathGrid?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.PathGrid_IsSet = false;
                        item.PathGrid = default(PathGrid);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Landscape.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Landscape,
                        rhsHasBeenSet: rhs.Landscape_IsSet,
                        defItem: def?.Landscape,
                        defHasBeenSet: def?.Landscape_IsSet ?? false,
                        outRhsItem: out var rhsLandscapeItem,
                        outDefItem: out var defLandscapeItem))
                    {
                        switch (copyMask?.Landscape.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Landscape = rhsLandscapeItem;
                                break;
                            case CopyOption.CopyIn:
                                LandscapeCommon.CopyFieldsFrom(
                                    item: item.Landscape,
                                    rhs: rhs.Landscape,
                                    def: def?.Landscape,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Landscape.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.Landscape = Landscape.Copy(
                                    rhsLandscapeItem,
                                    copyMask?.Landscape?.Specific,
                                    def: defLandscapeItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Landscape?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Landscape_IsSet = false;
                        item.Landscape = default(Landscape);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Persistent != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                try
                {
                    item.Persistent.SetToWithDefault(
                        rhs: rhs.Persistent,
                        def: def?.Persistent,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Persistent ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return LoquiRegistration.GetCopyFunc<IPlaced>(r.GetType())(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Persistent}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Temporary != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                try
                {
                    item.Temporary.SetToWithDefault(
                        rhs: rhs.Temporary,
                        def: def?.Temporary,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Temporary ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return LoquiRegistration.GetCopyFunc<IPlaced>(r.GetType())(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Temporary}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.VisibleWhenDistant != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                try
                {
                    item.VisibleWhenDistant.SetToWithDefault(
                        rhs: rhs.VisibleWhenDistant,
                        def: def?.VisibleWhenDistant,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.VisibleWhenDistant ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return LoquiRegistration.GetCopyFunc<IPlaced>(r.GetType())(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.VisibleWhenDistant}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICell obj,
            NotifyingFireParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    obj.Name_IsSet = on;
                    break;
                case Cell_FieldIndex.Flags:
                    obj.Flags_IsSet = on;
                    break;
                case Cell_FieldIndex.Grid:
                    obj.Grid_IsSet = on;
                    break;
                case Cell_FieldIndex.Lighting:
                    obj.Lighting_IsSet = on;
                    break;
                case Cell_FieldIndex.Regions:
                    obj.Regions.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.MusicType:
                    obj.MusicType_IsSet = on;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj.WaterHeight_IsSet = on;
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Owner:
                    obj.Owner_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.FactionRank:
                    obj.FactionRank_IsSet = on;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj.PathGrid_IsSet = on;
                    break;
                case Cell_FieldIndex.Landscape:
                    obj.Landscape_IsSet = on;
                    break;
                case Cell_FieldIndex.Persistent:
                    obj.Persistent.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.Temporary:
                    obj.Temporary.HasBeenSet = on;
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj.VisibleWhenDistant.HasBeenSet = on;
                    break;
                default:
                    PlaceCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICell obj,
            NotifyingUnsetParameters cmds = null)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    obj.Name_Unset();
                    break;
                case Cell_FieldIndex.Flags:
                    obj.Flags_Unset();
                    break;
                case Cell_FieldIndex.Grid:
                    obj.Grid_Unset();
                    break;
                case Cell_FieldIndex.Lighting:
                    obj.Lighting_Unset();
                    break;
                case Cell_FieldIndex.Regions:
                    obj.Regions.Unset();
                    break;
                case Cell_FieldIndex.MusicType:
                    obj.MusicType_Unset();
                    break;
                case Cell_FieldIndex.WaterHeight:
                    obj.WaterHeight_Unset();
                    break;
                case Cell_FieldIndex.Climate:
                    obj.Climate_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Water:
                    obj.Water_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.Owner:
                    obj.Owner_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.FactionRank:
                    obj.FactionRank_Unset();
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Unset(cmds);
                    break;
                case Cell_FieldIndex.PathGrid:
                    obj.PathGrid_Unset();
                    break;
                case Cell_FieldIndex.Landscape:
                    obj.Landscape_Unset();
                    break;
                case Cell_FieldIndex.Persistent:
                    obj.Persistent.Unset();
                    break;
                case Cell_FieldIndex.Temporary:
                    obj.Temporary.Unset();
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    obj.VisibleWhenDistant.Unset();
                    break;
                default:
                    PlaceCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICell obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return obj.Name_IsSet;
                case Cell_FieldIndex.Flags:
                    return obj.Flags_IsSet;
                case Cell_FieldIndex.Grid:
                    return obj.Grid_IsSet;
                case Cell_FieldIndex.Lighting:
                    return obj.Lighting_IsSet;
                case Cell_FieldIndex.Regions:
                    return obj.Regions.HasBeenSet;
                case Cell_FieldIndex.MusicType:
                    return obj.MusicType_IsSet;
                case Cell_FieldIndex.WaterHeight:
                    return obj.WaterHeight_IsSet;
                case Cell_FieldIndex.Climate:
                    return obj.Climate_Property.HasBeenSet;
                case Cell_FieldIndex.Water:
                    return obj.Water_Property.HasBeenSet;
                case Cell_FieldIndex.Owner:
                    return obj.Owner_Property.HasBeenSet;
                case Cell_FieldIndex.FactionRank:
                    return obj.FactionRank_IsSet;
                case Cell_FieldIndex.GlobalVariable:
                    return obj.GlobalVariable_Property.HasBeenSet;
                case Cell_FieldIndex.PathGrid:
                    return obj.PathGrid_IsSet;
                case Cell_FieldIndex.Landscape:
                    return obj.Landscape_IsSet;
                case Cell_FieldIndex.Persistent:
                    return obj.Persistent.HasBeenSet;
                case Cell_FieldIndex.Temporary:
                    return obj.Temporary.HasBeenSet;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return obj.VisibleWhenDistant.HasBeenSet;
                default:
                    return PlaceCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ICellGetter obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return obj.Name;
                case Cell_FieldIndex.Flags:
                    return obj.Flags;
                case Cell_FieldIndex.Grid:
                    return obj.Grid;
                case Cell_FieldIndex.Lighting:
                    return obj.Lighting;
                case Cell_FieldIndex.Regions:
                    return obj.Regions;
                case Cell_FieldIndex.MusicType:
                    return obj.MusicType;
                case Cell_FieldIndex.WaterHeight:
                    return obj.WaterHeight;
                case Cell_FieldIndex.Climate:
                    return obj.Climate;
                case Cell_FieldIndex.Water:
                    return obj.Water;
                case Cell_FieldIndex.Owner:
                    return obj.Owner;
                case Cell_FieldIndex.FactionRank:
                    return obj.FactionRank;
                case Cell_FieldIndex.GlobalVariable:
                    return obj.GlobalVariable;
                case Cell_FieldIndex.PathGrid:
                    return obj.PathGrid;
                case Cell_FieldIndex.Landscape:
                    return obj.Landscape;
                case Cell_FieldIndex.Persistent:
                    return obj.Persistent;
                case Cell_FieldIndex.Temporary:
                    return obj.Temporary;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return obj.VisibleWhenDistant;
                default:
                    return PlaceCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ICell item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Unset();
            item.Flags_Unset();
            item.Grid_Unset();
            item.Lighting_Unset();
            item.Regions.Unset();
            item.MusicType_Unset();
            item.WaterHeight_Unset();
            item.Climate_Property.Unset(cmds.ToUnsetParams());
            item.Water_Property.Unset(cmds.ToUnsetParams());
            item.Owner_Property.Unset(cmds.ToUnsetParams());
            item.FactionRank_Unset();
            item.GlobalVariable_Property.Unset(cmds.ToUnsetParams());
            item.PathGrid_Unset();
            item.Landscape_Unset();
            item.Persistent.Unset();
            item.Temporary.Unset();
            item.VisibleWhenDistant.Unset();
        }

        public static Cell_Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs)
        {
            var ret = new Cell_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && object.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.Grid = item.Grid_IsSet == rhs.Grid_IsSet && item.Grid == rhs.Grid;
            ret.Lighting = IHasBeenSetExt.LoquiEqualsHelper(item.Lighting_IsSet, rhs.Lighting_IsSet, item.Lighting, rhs.Lighting, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.Regions.HasBeenSet == rhs.Regions.HasBeenSet)
            {
                if (item.Regions.HasBeenSet)
                {
                    ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Regions.Specific = item.Regions.SelectAgainst<FormIDLink<Region>, bool>(rhs.Regions, ((l, r) => object.Equals(l, r)), out ret.Regions.Overall);
                    ret.Regions.Overall = ret.Regions.Overall && ret.Regions.Specific.All((b) => b);
                }
                else
                {
                    ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Regions.Overall = true;
                }
            }
            else
            {
                ret.Regions = new MaskItem<bool, IEnumerable<bool>>();
                ret.Regions.Overall = false;
            }
            ret.MusicType = item.MusicType_IsSet == rhs.MusicType_IsSet && item.MusicType == rhs.MusicType;
            ret.WaterHeight = item.WaterHeight_IsSet == rhs.WaterHeight_IsSet && item.WaterHeight == rhs.WaterHeight;
            ret.Climate = item.Climate_Property.Equals(rhs.Climate_Property, (l, r) => l == r);
            ret.Water = item.Water_Property.Equals(rhs.Water_Property, (l, r) => l == r);
            ret.Owner = item.Owner_Property.Equals(rhs.Owner_Property, (l, r) => l == r);
            ret.FactionRank = item.FactionRank_IsSet == rhs.FactionRank_IsSet && item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = item.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property, (l, r) => l == r);
            ret.PathGrid = IHasBeenSetExt.LoquiEqualsHelper(item.PathGrid_IsSet, rhs.PathGrid_IsSet, item.PathGrid, rhs.PathGrid, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Landscape = IHasBeenSetExt.LoquiEqualsHelper(item.Landscape_IsSet, rhs.Landscape_IsSet, item.Landscape, rhs.Landscape, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.Persistent.HasBeenSet == rhs.Persistent.HasBeenSet)
            {
                if (item.Persistent.HasBeenSet)
                {
                    ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                    ret.Persistent.Specific = item.Persistent.SelectAgainst<IPlaced, MaskItem<bool, IMask<bool>>>(rhs.Persistent, ((l, r) =>
                    {
                        MaskItem<bool, IMask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Persistent.Overall);
                    ret.Persistent.Overall = ret.Persistent.Overall && ret.Persistent.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                    ret.Persistent.Overall = true;
                }
            }
            else
            {
                ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                ret.Persistent.Overall = false;
            }
            if (item.Temporary.HasBeenSet == rhs.Temporary.HasBeenSet)
            {
                if (item.Temporary.HasBeenSet)
                {
                    ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                    ret.Temporary.Specific = item.Temporary.SelectAgainst<IPlaced, MaskItem<bool, IMask<bool>>>(rhs.Temporary, ((l, r) =>
                    {
                        MaskItem<bool, IMask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Temporary.Overall);
                    ret.Temporary.Overall = ret.Temporary.Overall && ret.Temporary.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                    ret.Temporary.Overall = true;
                }
            }
            else
            {
                ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                ret.Temporary.Overall = false;
            }
            if (item.VisibleWhenDistant.HasBeenSet == rhs.VisibleWhenDistant.HasBeenSet)
            {
                if (item.VisibleWhenDistant.HasBeenSet)
                {
                    ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                    ret.VisibleWhenDistant.Specific = item.VisibleWhenDistant.SelectAgainst<IPlaced, MaskItem<bool, IMask<bool>>>(rhs.VisibleWhenDistant, ((l, r) =>
                    {
                        MaskItem<bool, IMask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.VisibleWhenDistant.Overall);
                    ret.VisibleWhenDistant.Overall = ret.VisibleWhenDistant.Overall && ret.VisibleWhenDistant.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                    ret.VisibleWhenDistant.Overall = true;
                }
            }
            else
            {
                ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>();
                ret.VisibleWhenDistant.Overall = false;
            }
            PlaceCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ICellGetter item,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICellGetter item,
            FileGeneration fg,
            string name = null,
            Cell_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Cell)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Cell)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Grid ?? true)
                {
                    fg.AppendLine($"Grid => {item.Grid}");
                }
                if (printMask?.Lighting?.Overall ?? true)
                {
                    item.Lighting?.ToString(fg, "Lighting");
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Regions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {item.MusicType}");
                }
                if (printMask?.WaterHeight ?? true)
                {
                    fg.AppendLine($"WaterHeight => {item.WaterHeight}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {item.Climate_Property}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {item.Water_Property}");
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {item.Owner_Property}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {item.FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {item.GlobalVariable_Property}");
                }
                if (printMask?.PathGrid?.Overall ?? true)
                {
                    item.PathGrid?.ToString(fg, "PathGrid");
                }
                if (printMask?.Landscape?.Overall ?? true)
                {
                    item.Landscape?.ToString(fg, "Landscape");
                }
                if (printMask?.Persistent?.Overall ?? true)
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Persistent)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Temporary?.Overall ?? true)
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Temporary)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VisibleWhenDistant?.Overall ?? true)
                {
                    fg.AppendLine("VisibleWhenDistant =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.VisibleWhenDistant)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICellGetter item,
            Cell_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.Grid.HasValue && checkMask.Grid.Value != item.Grid_IsSet) return false;
            if (checkMask.Lighting.Overall.HasValue && checkMask.Lighting.Overall.Value != item.Lighting_IsSet) return false;
            if (checkMask.Lighting.Specific != null && (item.Lighting == null || !item.Lighting.HasBeenSet(checkMask.Lighting.Specific))) return false;
            if (checkMask.Regions.Overall.HasValue && checkMask.Regions.Overall.Value != item.Regions.HasBeenSet) return false;
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != item.MusicType_IsSet) return false;
            if (checkMask.WaterHeight.HasValue && checkMask.WaterHeight.Value != item.WaterHeight_IsSet) return false;
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != item.Climate_Property.HasBeenSet) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != item.Water_Property.HasBeenSet) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != item.Owner_Property.HasBeenSet) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != item.FactionRank_IsSet) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != item.GlobalVariable_Property.HasBeenSet) return false;
            if (checkMask.PathGrid.Overall.HasValue && checkMask.PathGrid.Overall.Value != item.PathGrid_IsSet) return false;
            if (checkMask.PathGrid.Specific != null && (item.PathGrid == null || !item.PathGrid.HasBeenSet(checkMask.PathGrid.Specific))) return false;
            if (checkMask.Landscape.Overall.HasValue && checkMask.Landscape.Overall.Value != item.Landscape_IsSet) return false;
            if (checkMask.Landscape.Specific != null && (item.Landscape == null || !item.Landscape.HasBeenSet(checkMask.Landscape.Specific))) return false;
            if (checkMask.Persistent.Overall.HasValue && checkMask.Persistent.Overall.Value != item.Persistent.HasBeenSet) return false;
            if (checkMask.Temporary.Overall.HasValue && checkMask.Temporary.Overall.Value != item.Temporary.HasBeenSet) return false;
            if (checkMask.VisibleWhenDistant.Overall.HasValue && checkMask.VisibleWhenDistant.Overall.Value != item.VisibleWhenDistant.HasBeenSet) return false;
            return true;
        }

        public static Cell_Mask<bool> GetHasBeenSetMask(ICellGetter item)
        {
            var ret = new Cell_Mask<bool>();
            ret.Name = item.Name_IsSet;
            ret.Flags = item.Flags_IsSet;
            ret.Grid = item.Grid_IsSet;
            ret.Lighting = new MaskItem<bool, CellLighting_Mask<bool>>(item.Lighting_IsSet, CellLightingCommon.GetHasBeenSetMask(item.Lighting));
            ret.Regions = new MaskItem<bool, IEnumerable<bool>>(item.Regions.HasBeenSet, null);
            ret.MusicType = item.MusicType_IsSet;
            ret.WaterHeight = item.WaterHeight_IsSet;
            ret.Climate = item.Climate_Property.HasBeenSet;
            ret.Water = item.Water_Property.HasBeenSet;
            ret.Owner = item.Owner_Property.HasBeenSet;
            ret.FactionRank = item.FactionRank_IsSet;
            ret.GlobalVariable = item.GlobalVariable_Property.HasBeenSet;
            ret.PathGrid = new MaskItem<bool, PathGrid_Mask<bool>>(item.PathGrid_IsSet, PathGridCommon.GetHasBeenSetMask(item.PathGrid));
            ret.Landscape = new MaskItem<bool, Landscape_Mask<bool>>(item.Landscape_IsSet, LandscapeCommon.GetHasBeenSetMask(item.Landscape));
            ret.Persistent = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>(item.Persistent.HasBeenSet, item.Persistent.Select((i) => new MaskItem<bool, IMask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Temporary = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>(item.Temporary.HasBeenSet, item.Temporary.Select((i) => new MaskItem<bool, IMask<bool>>(true, i.GetHasBeenSetMask())));
            ret.VisibleWhenDistant = new MaskItem<bool, IEnumerable<MaskItem<bool, IMask<bool>>>>(item.VisibleWhenDistant.HasBeenSet, item.VisibleWhenDistant.Select((i) => new MaskItem<bool, IMask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Cell_FieldIndex? ConvertFieldIndex(Place_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Cell_FieldIndex ConvertFieldIndex(Place_FieldIndex index)
        {
            switch (index)
            {
                case Place_FieldIndex.MajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case Place_FieldIndex.RecordType:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Cell_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Cell item,
            bool doMasks,
            out Cell_ErrorMask errorMask,
            Cell_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Cell item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Cell");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Cell");
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Cell_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Cell.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Cell_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Grid_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                P2IntXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Grid),
                    item: item.Grid,
                    fieldIndex: (int)Cell_FieldIndex.Grid,
                    errorMask: errorMask);
            }
            if (item.Lighting_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                LoquiXmlTranslation<CellLighting>.Instance.Write(
                    node: elem,
                    item: item.Lighting,
                    name: nameof(item.Lighting),
                    fieldIndex: (int)Cell_FieldIndex.Lighting,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
            }
            if (item.Regions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                ListXmlTranslation<FormIDLink<Region>>.Instance.Write(
                    node: elem,
                    name: nameof(item.Regions),
                    item: item.Regions,
                    fieldIndex: (int)Cell_FieldIndex.Regions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Regions),
                    transl: (XElement subNode, FormIDLink<Region> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.MusicType_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: elem,
                    name: nameof(item.MusicType),
                    item: item.MusicType,
                    fieldIndex: (int)Cell_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if (item.WaterHeight_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.WaterHeight),
                    item: item.WaterHeight,
                    fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                    errorMask: errorMask);
            }
            if (item.Climate_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Climate),
                    item: item.Climate_Property?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Climate,
                    errorMask: errorMask);
            }
            if (item.Water_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Water),
                    item: item.Water_Property?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Water,
                    errorMask: errorMask);
            }
            if (item.Owner_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Owner),
                    item: item.Owner_Property?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if (item.FactionRank_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank,
                    fieldIndex: (int)Cell_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if (item.GlobalVariable_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable_Property?.FormKey,
                    fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if (item.PathGrid_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                LoquiXmlTranslation<PathGrid>.Instance.Write(
                    node: elem,
                    item: item.PathGrid,
                    name: nameof(item.PathGrid),
                    fieldIndex: (int)Cell_FieldIndex.PathGrid,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid));
            }
            if (item.Landscape_IsSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                LoquiXmlTranslation<Landscape>.Instance.Write(
                    node: elem,
                    item: item.Landscape,
                    name: nameof(item.Landscape),
                    fieldIndex: (int)Cell_FieldIndex.Landscape,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape));
            }
            if (item.Persistent.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                ListXmlTranslation<IPlaced>.Instance.Write(
                    node: elem,
                    name: nameof(item.Persistent),
                    item: item.Persistent,
                    fieldIndex: (int)Cell_FieldIndex.Persistent,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Persistent),
                    transl: (XElement subNode, IPlaced subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<IPlaced>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Temporary.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                ListXmlTranslation<IPlaced>.Instance.Write(
                    node: elem,
                    name: nameof(item.Temporary),
                    item: item.Temporary,
                    fieldIndex: (int)Cell_FieldIndex.Temporary,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.Temporary),
                    transl: (XElement subNode, IPlaced subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<IPlaced>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.VisibleWhenDistant.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                ListXmlTranslation<IPlaced>.Instance.Write(
                    node: elem,
                    name: nameof(item.VisibleWhenDistant),
                    item: item.VisibleWhenDistant,
                    fieldIndex: (int)Cell_FieldIndex.VisibleWhenDistant,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Cell_FieldIndex.VisibleWhenDistant),
                    transl: (XElement subNode, IPlaced subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<IPlaced>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Cell item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Cell_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                masterReferences: masterReferences,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Cell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Cell item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Cell_Registration.CELL_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            Cell.CustomBinaryEnd_ExportInternal(
                writer: writer,
                obj: item,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Cell item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)Cell_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Cell.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    fieldIndex: (int)Cell_FieldIndex.Flags,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.DATA_HEADER),
                    nullable: false);
            }
            if (item.Grid_IsSet)
            {
                Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Grid,
                    fieldIndex: (int)Cell_FieldIndex.Grid,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLC_HEADER),
                    nullable: false);
            }
            if (item.Lighting_IsSet)
            {
                LoquiBinaryTranslation<CellLighting>.Instance.Write(
                    writer: writer,
                    item: item.Lighting,
                    fieldIndex: (int)Cell_FieldIndex.Lighting,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.Regions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Region>>.Instance.Write(
                    writer: writer,
                    items: item.Regions,
                    fieldIndex: (int)Cell_FieldIndex.Regions,
                    recordType: Cell_Registration.XCLR_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, FormIDLink<Region> subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.MusicType_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                    writer,
                    item.MusicType,
                    length: 1,
                    fieldIndex: (int)Cell_FieldIndex.MusicType,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCMT_HEADER),
                    nullable: false);
            }
            if (item.WaterHeight_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.WaterHeight,
                    fieldIndex: (int)Cell_FieldIndex.WaterHeight,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCLW_HEADER),
                    nullable: false);
            }
            if (item.Climate_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Climate_Property,
                    fieldIndex: (int)Cell_FieldIndex.Climate,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCCM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Water_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Water_Property,
                    fieldIndex: (int)Cell_FieldIndex.Water,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XCWT_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Owner_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Owner_Property,
                    fieldIndex: (int)Cell_FieldIndex.Owner,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XOWN_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.FactionRank_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FactionRank,
                    fieldIndex: (int)Cell_FieldIndex.FactionRank,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XRNK_HEADER),
                    nullable: false);
            }
            if (item.GlobalVariable_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.GlobalVariable_Property,
                    fieldIndex: (int)Cell_FieldIndex.GlobalVariable,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Cell_Registration.XGLB_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Cell_Mask<T> : Place_Mask<T>, IMask<T>, IEquatable<Cell_Mask<T>>
    {
        #region Ctors
        public Cell_Mask()
        {
        }

        public Cell_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Flags = initialValue;
            this.Grid = initialValue;
            this.Lighting = new MaskItem<T, CellLighting_Mask<T>>(initialValue, new CellLighting_Mask<T>(initialValue));
            this.Regions = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.MusicType = initialValue;
            this.WaterHeight = initialValue;
            this.Climate = initialValue;
            this.Water = initialValue;
            this.Owner = initialValue;
            this.FactionRank = initialValue;
            this.GlobalVariable = initialValue;
            this.PathGrid = new MaskItem<T, PathGrid_Mask<T>>(initialValue, new PathGrid_Mask<T>(initialValue));
            this.Landscape = new MaskItem<T, Landscape_Mask<T>>(initialValue, new Landscape_Mask<T>(initialValue));
            this.Persistent = new MaskItem<T, IEnumerable<MaskItem<T, IMask<T>>>>(initialValue, null);
            this.Temporary = new MaskItem<T, IEnumerable<MaskItem<T, IMask<T>>>>(initialValue, null);
            this.VisibleWhenDistant = new MaskItem<T, IEnumerable<MaskItem<T, IMask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public T Flags;
        public T Grid;
        public MaskItem<T, CellLighting_Mask<T>> Lighting { get; set; }
        public MaskItem<T, IEnumerable<T>> Regions;
        public T MusicType;
        public T WaterHeight;
        public T Climate;
        public T Water;
        public T Owner;
        public T FactionRank;
        public T GlobalVariable;
        public MaskItem<T, PathGrid_Mask<T>> PathGrid { get; set; }
        public MaskItem<T, Landscape_Mask<T>> Landscape { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, IMask<T>>>> Persistent;
        public MaskItem<T, IEnumerable<MaskItem<T, IMask<T>>>> Temporary;
        public MaskItem<T, IEnumerable<MaskItem<T, IMask<T>>>> VisibleWhenDistant;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Cell_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cell_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Grid, rhs.Grid)) return false;
            if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
            if (!object.Equals(this.Regions, rhs.Regions)) return false;
            if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
            if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
            if (!object.Equals(this.Climate, rhs.Climate)) return false;
            if (!object.Equals(this.Water, rhs.Water)) return false;
            if (!object.Equals(this.Owner, rhs.Owner)) return false;
            if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
            if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
            if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
            if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
            if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
            if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
            if (!object.Equals(this.VisibleWhenDistant, rhs.VisibleWhenDistant)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Grid?.GetHashCode());
            ret = ret.CombineHashCode(this.Lighting?.GetHashCode());
            ret = ret.CombineHashCode(this.Regions?.GetHashCode());
            ret = ret.CombineHashCode(this.MusicType?.GetHashCode());
            ret = ret.CombineHashCode(this.WaterHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Climate?.GetHashCode());
            ret = ret.CombineHashCode(this.Water?.GetHashCode());
            ret = ret.CombineHashCode(this.Owner?.GetHashCode());
            ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
            ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
            ret = ret.CombineHashCode(this.PathGrid?.GetHashCode());
            ret = ret.CombineHashCode(this.Landscape?.GetHashCode());
            ret = ret.CombineHashCode(this.Persistent?.GetHashCode());
            ret = ret.CombineHashCode(this.Temporary?.GetHashCode());
            ret = ret.CombineHashCode(this.VisibleWhenDistant?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Grid)) return false;
            if (Lighting != null)
            {
                if (!eval(this.Lighting.Overall)) return false;
                if (this.Lighting.Specific != null && !this.Lighting.Specific.AllEqual(eval)) return false;
            }
            if (this.Regions != null)
            {
                if (!eval(this.Regions.Overall)) return false;
                if (this.Regions.Specific != null)
                {
                    foreach (var item in this.Regions.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.MusicType)) return false;
            if (!eval(this.WaterHeight)) return false;
            if (!eval(this.Climate)) return false;
            if (!eval(this.Water)) return false;
            if (!eval(this.Owner)) return false;
            if (!eval(this.FactionRank)) return false;
            if (!eval(this.GlobalVariable)) return false;
            if (PathGrid != null)
            {
                if (!eval(this.PathGrid.Overall)) return false;
                if (this.PathGrid.Specific != null && !this.PathGrid.Specific.AllEqual(eval)) return false;
            }
            if (Landscape != null)
            {
                if (!eval(this.Landscape.Overall)) return false;
                if (this.Landscape.Specific != null && !this.Landscape.Specific.AllEqual(eval)) return false;
            }
            if (this.Persistent != null)
            {
                if (!eval(this.Persistent.Overall)) return false;
                if (this.Persistent.Specific != null)
                {
                    foreach (var item in this.Persistent.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        throw new NotImplementedException();
                    }
                }
            }
            if (this.Temporary != null)
            {
                if (!eval(this.Temporary.Overall)) return false;
                if (this.Temporary.Specific != null)
                {
                    foreach (var item in this.Temporary.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        throw new NotImplementedException();
                    }
                }
            }
            if (this.VisibleWhenDistant != null)
            {
                if (!eval(this.VisibleWhenDistant.Overall)) return false;
                if (this.VisibleWhenDistant.Specific != null)
                {
                    foreach (var item in this.VisibleWhenDistant.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        throw new NotImplementedException();
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Cell_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Cell_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Cell_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Flags = eval(this.Flags);
            obj.Grid = eval(this.Grid);
            if (this.Lighting != null)
            {
                obj.Lighting = new MaskItem<R, CellLighting_Mask<R>>();
                obj.Lighting.Overall = eval(this.Lighting.Overall);
                if (this.Lighting.Specific != null)
                {
                    obj.Lighting.Specific = this.Lighting.Specific.Translate(eval);
                }
            }
            if (Regions != null)
            {
                obj.Regions = new MaskItem<R, IEnumerable<R>>();
                obj.Regions.Overall = eval(this.Regions.Overall);
                if (Regions.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Regions.Specific = l;
                    foreach (var item in Regions.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.MusicType = eval(this.MusicType);
            obj.WaterHeight = eval(this.WaterHeight);
            obj.Climate = eval(this.Climate);
            obj.Water = eval(this.Water);
            obj.Owner = eval(this.Owner);
            obj.FactionRank = eval(this.FactionRank);
            obj.GlobalVariable = eval(this.GlobalVariable);
            if (this.PathGrid != null)
            {
                obj.PathGrid = new MaskItem<R, PathGrid_Mask<R>>();
                obj.PathGrid.Overall = eval(this.PathGrid.Overall);
                if (this.PathGrid.Specific != null)
                {
                    obj.PathGrid.Specific = this.PathGrid.Specific.Translate(eval);
                }
            }
            if (this.Landscape != null)
            {
                obj.Landscape = new MaskItem<R, Landscape_Mask<R>>();
                obj.Landscape.Overall = eval(this.Landscape.Overall);
                if (this.Landscape.Specific != null)
                {
                    obj.Landscape.Specific = this.Landscape.Specific.Translate(eval);
                }
            }
            if (Persistent != null)
            {
                obj.Persistent = new MaskItem<R, IEnumerable<MaskItem<R, IMask<R>>>>();
                obj.Persistent.Overall = eval(this.Persistent.Overall);
                if (Persistent.Specific != null)
                {
                    List<MaskItem<R, IMask<R>>> l = new List<MaskItem<R, IMask<R>>>();
                    obj.Persistent.Specific = l;
                    foreach (var item in Persistent.Specific)
                    {
                        MaskItem<R, IMask<R>> mask = default(MaskItem<R, IMask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, IMask<R>>();
                            mask.Overall = eval(item.Overall);
                            throw new NotImplementedException();
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Temporary != null)
            {
                obj.Temporary = new MaskItem<R, IEnumerable<MaskItem<R, IMask<R>>>>();
                obj.Temporary.Overall = eval(this.Temporary.Overall);
                if (Temporary.Specific != null)
                {
                    List<MaskItem<R, IMask<R>>> l = new List<MaskItem<R, IMask<R>>>();
                    obj.Temporary.Specific = l;
                    foreach (var item in Temporary.Specific)
                    {
                        MaskItem<R, IMask<R>> mask = default(MaskItem<R, IMask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, IMask<R>>();
                            mask.Overall = eval(item.Overall);
                            throw new NotImplementedException();
                        }
                        l.Add(mask);
                    }
                }
            }
            if (VisibleWhenDistant != null)
            {
                obj.VisibleWhenDistant = new MaskItem<R, IEnumerable<MaskItem<R, IMask<R>>>>();
                obj.VisibleWhenDistant.Overall = eval(this.VisibleWhenDistant.Overall);
                if (VisibleWhenDistant.Specific != null)
                {
                    List<MaskItem<R, IMask<R>>> l = new List<MaskItem<R, IMask<R>>>();
                    obj.VisibleWhenDistant.Specific = l;
                    foreach (var item in VisibleWhenDistant.Specific)
                    {
                        MaskItem<R, IMask<R>> mask = default(MaskItem<R, IMask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, IMask<R>>();
                            mask.Overall = eval(item.Overall);
                            throw new NotImplementedException();
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Regions.Specific = null;
            this.Persistent.Specific = null;
            this.Temporary.Specific = null;
            this.VisibleWhenDistant.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Cell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Cell_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Cell_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Grid ?? true)
                {
                    fg.AppendLine($"Grid => {Grid}");
                }
                if (printMask?.Lighting?.Overall ?? true)
                {
                    Lighting?.ToString(fg);
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Regions.Overall != null)
                        {
                            fg.AppendLine(Regions.Overall.ToString());
                        }
                        if (Regions.Specific != null)
                        {
                            foreach (var subItem in Regions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {MusicType}");
                }
                if (printMask?.WaterHeight ?? true)
                {
                    fg.AppendLine($"WaterHeight => {WaterHeight}");
                }
                if (printMask?.Climate ?? true)
                {
                    fg.AppendLine($"Climate => {Climate}");
                }
                if (printMask?.Water ?? true)
                {
                    fg.AppendLine($"Water => {Water}");
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {Owner}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                }
                if (printMask?.PathGrid?.Overall ?? true)
                {
                    PathGrid?.ToString(fg);
                }
                if (printMask?.Landscape?.Overall ?? true)
                {
                    Landscape?.ToString(fg);
                }
                if (printMask?.Persistent?.Overall ?? true)
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Persistent.Overall != null)
                        {
                            fg.AppendLine(Persistent.Overall.ToString());
                        }
                        if (Persistent.Specific != null)
                        {
                            foreach (var subItem in Persistent.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Temporary?.Overall ?? true)
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Temporary.Overall != null)
                        {
                            fg.AppendLine(Temporary.Overall.ToString());
                        }
                        if (Temporary.Specific != null)
                        {
                            foreach (var subItem in Temporary.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VisibleWhenDistant?.Overall ?? true)
                {
                    fg.AppendLine("VisibleWhenDistant =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (VisibleWhenDistant.Overall != null)
                        {
                            fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                        }
                        if (VisibleWhenDistant.Specific != null)
                        {
                            foreach (var subItem in VisibleWhenDistant.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Cell_ErrorMask : Place_ErrorMask, IErrorMask<Cell_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Flags;
        public Exception Grid;
        public MaskItem<Exception, CellLighting_ErrorMask> Lighting;
        public MaskItem<Exception, IEnumerable<Exception>> Regions;
        public Exception MusicType;
        public Exception WaterHeight;
        public Exception Climate;
        public Exception Water;
        public Exception Owner;
        public Exception FactionRank;
        public Exception GlobalVariable;
        public MaskItem<Exception, PathGrid_ErrorMask> PathGrid;
        public MaskItem<Exception, Landscape_ErrorMask> Landscape;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>> Persistent;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>> Temporary;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>> VisibleWhenDistant;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    return Name;
                case Cell_FieldIndex.Flags:
                    return Flags;
                case Cell_FieldIndex.Grid:
                    return Grid;
                case Cell_FieldIndex.Lighting:
                    return Lighting;
                case Cell_FieldIndex.Regions:
                    return Regions;
                case Cell_FieldIndex.MusicType:
                    return MusicType;
                case Cell_FieldIndex.WaterHeight:
                    return WaterHeight;
                case Cell_FieldIndex.Climate:
                    return Climate;
                case Cell_FieldIndex.Water:
                    return Water;
                case Cell_FieldIndex.Owner:
                    return Owner;
                case Cell_FieldIndex.FactionRank:
                    return FactionRank;
                case Cell_FieldIndex.GlobalVariable:
                    return GlobalVariable;
                case Cell_FieldIndex.PathGrid:
                    return PathGrid;
                case Cell_FieldIndex.Landscape:
                    return Landscape;
                case Cell_FieldIndex.Persistent:
                    return Persistent;
                case Cell_FieldIndex.Temporary:
                    return Temporary;
                case Cell_FieldIndex.VisibleWhenDistant:
                    return VisibleWhenDistant;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Cell_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = ex;
                    break;
                case Cell_FieldIndex.Lighting:
                    this.Lighting = new MaskItem<Exception, CellLighting_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Regions:
                    this.Regions = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = ex;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = ex;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate = ex;
                    break;
                case Cell_FieldIndex.Water:
                    this.Water = ex;
                    break;
                case Cell_FieldIndex.Owner:
                    this.Owner = ex;
                    break;
                case Cell_FieldIndex.FactionRank:
                    this.FactionRank = ex;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    this.GlobalVariable = ex;
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = new MaskItem<Exception, PathGrid_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Landscape:
                    this.Landscape = new MaskItem<Exception, Landscape_ErrorMask>(ex, null);
                    break;
                case Cell_FieldIndex.Persistent:
                    this.Persistent = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(ex, null);
                    break;
                case Cell_FieldIndex.Temporary:
                    this.Temporary = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(ex, null);
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this.VisibleWhenDistant = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Cell_FieldIndex enu = (Cell_FieldIndex)index;
            switch (enu)
            {
                case Cell_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Cell_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Cell_FieldIndex.Grid:
                    this.Grid = (Exception)obj;
                    break;
                case Cell_FieldIndex.Lighting:
                    this.Lighting = (MaskItem<Exception, CellLighting_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Regions:
                    this.Regions = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Cell_FieldIndex.MusicType:
                    this.MusicType = (Exception)obj;
                    break;
                case Cell_FieldIndex.WaterHeight:
                    this.WaterHeight = (Exception)obj;
                    break;
                case Cell_FieldIndex.Climate:
                    this.Climate = (Exception)obj;
                    break;
                case Cell_FieldIndex.Water:
                    this.Water = (Exception)obj;
                    break;
                case Cell_FieldIndex.Owner:
                    this.Owner = (Exception)obj;
                    break;
                case Cell_FieldIndex.FactionRank:
                    this.FactionRank = (Exception)obj;
                    break;
                case Cell_FieldIndex.GlobalVariable:
                    this.GlobalVariable = (Exception)obj;
                    break;
                case Cell_FieldIndex.PathGrid:
                    this.PathGrid = (MaskItem<Exception, PathGrid_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Landscape:
                    this.Landscape = (MaskItem<Exception, Landscape_ErrorMask>)obj;
                    break;
                case Cell_FieldIndex.Persistent:
                    this.Persistent = (MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>)obj;
                    break;
                case Cell_FieldIndex.Temporary:
                    this.Temporary = (MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>)obj;
                    break;
                case Cell_FieldIndex.VisibleWhenDistant:
                    this.VisibleWhenDistant = (MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Flags != null) return true;
            if (Grid != null) return true;
            if (Lighting != null) return true;
            if (Regions != null) return true;
            if (MusicType != null) return true;
            if (WaterHeight != null) return true;
            if (Climate != null) return true;
            if (Water != null) return true;
            if (Owner != null) return true;
            if (FactionRank != null) return true;
            if (GlobalVariable != null) return true;
            if (PathGrid != null) return true;
            if (Landscape != null) return true;
            if (Persistent != null) return true;
            if (Temporary != null) return true;
            if (VisibleWhenDistant != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Cell_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Grid => {Grid}");
            Lighting?.ToString(fg);
            fg.AppendLine("Regions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Regions.Overall != null)
                {
                    fg.AppendLine(Regions.Overall.ToString());
                }
                if (Regions.Specific != null)
                {
                    foreach (var subItem in Regions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"MusicType => {MusicType}");
            fg.AppendLine($"WaterHeight => {WaterHeight}");
            fg.AppendLine($"Climate => {Climate}");
            fg.AppendLine($"Water => {Water}");
            fg.AppendLine($"Owner => {Owner}");
            fg.AppendLine($"FactionRank => {FactionRank}");
            fg.AppendLine($"GlobalVariable => {GlobalVariable}");
            PathGrid?.ToString(fg);
            Landscape?.ToString(fg);
            fg.AppendLine("Persistent =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Persistent.Overall != null)
                {
                    fg.AppendLine(Persistent.Overall.ToString());
                }
                if (Persistent.Specific != null)
                {
                    foreach (var subItem in Persistent.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Temporary =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Temporary.Overall != null)
                {
                    fg.AppendLine(Temporary.Overall.ToString());
                }
                if (Temporary.Specific != null)
                {
                    foreach (var subItem in Temporary.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("VisibleWhenDistant =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (VisibleWhenDistant.Overall != null)
                {
                    fg.AppendLine(VisibleWhenDistant.Overall.ToString());
                }
                if (VisibleWhenDistant.Specific != null)
                {
                    foreach (var subItem in VisibleWhenDistant.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Cell_ErrorMask Combine(Cell_ErrorMask rhs)
        {
            var ret = new Cell_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Grid = this.Grid.Combine(rhs.Grid);
            ret.Lighting = new MaskItem<Exception, CellLighting_ErrorMask>(this.Lighting.Overall.Combine(rhs.Lighting.Overall), ((IErrorMask<CellLighting_ErrorMask>)this.Lighting.Specific).Combine(rhs.Lighting.Specific));
            ret.Regions = new MaskItem<Exception, IEnumerable<Exception>>(this.Regions.Overall.Combine(rhs.Regions.Overall), new List<Exception>(this.Regions.Specific.And(rhs.Regions.Specific)));
            ret.MusicType = this.MusicType.Combine(rhs.MusicType);
            ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
            ret.Climate = this.Climate.Combine(rhs.Climate);
            ret.Water = this.Water.Combine(rhs.Water);
            ret.Owner = this.Owner.Combine(rhs.Owner);
            ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
            ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
            ret.PathGrid = new MaskItem<Exception, PathGrid_ErrorMask>(this.PathGrid.Overall.Combine(rhs.PathGrid.Overall), ((IErrorMask<PathGrid_ErrorMask>)this.PathGrid.Specific).Combine(rhs.PathGrid.Specific));
            ret.Landscape = new MaskItem<Exception, Landscape_ErrorMask>(this.Landscape.Overall.Combine(rhs.Landscape.Overall), ((IErrorMask<Landscape_ErrorMask>)this.Landscape.Specific).Combine(rhs.Landscape.Specific));
            ret.Persistent = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(this.Persistent.Overall.Combine(rhs.Persistent.Overall), new List<MaskItem<Exception, IErrorMask>>(this.Persistent.Specific.And(rhs.Persistent.Specific)));
            ret.Temporary = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(this.Temporary.Overall.Combine(rhs.Temporary.Overall), new List<MaskItem<Exception, IErrorMask>>(this.Temporary.Specific.And(rhs.Temporary.Specific)));
            ret.VisibleWhenDistant = new MaskItem<Exception, IEnumerable<MaskItem<Exception, IErrorMask>>>(this.VisibleWhenDistant.Overall.Combine(rhs.VisibleWhenDistant.Overall), new List<MaskItem<Exception, IErrorMask>>(this.VisibleWhenDistant.Specific.And(rhs.VisibleWhenDistant.Specific)));
            return ret;
        }
        public static Cell_ErrorMask Combine(Cell_ErrorMask lhs, Cell_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Cell_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Cell_ErrorMask();
        }
        #endregion

    }
    public class Cell_CopyMask : Place_CopyMask
    {
        #region Members
        public bool Name;
        public bool Flags;
        public bool Grid;
        public MaskItem<CopyOption, CellLighting_CopyMask> Lighting;
        public CopyOption Regions;
        public bool MusicType;
        public bool WaterHeight;
        public bool Climate;
        public bool Water;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<CopyOption, PathGrid_CopyMask> PathGrid;
        public MaskItem<CopyOption, Landscape_CopyMask> Landscape;
        public CopyOption Persistent;
        public CopyOption Temporary;
        public CopyOption VisibleWhenDistant;
        #endregion

    }
    public class Cell_TranslationMask : Place_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Name;
        public bool Flags;
        public bool Grid;
        public MaskItem<bool, CellLighting_TranslationMask> Lighting;
        public bool Regions;
        public bool MusicType;
        public bool WaterHeight;
        public bool Climate;
        public bool Water;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<bool, PathGrid_TranslationMask> PathGrid;
        public MaskItem<bool, Landscape_TranslationMask> Landscape;
        public bool Persistent;
        public bool Temporary;
        public bool VisibleWhenDistant;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Flags, null));
            ret.Add((Grid, null));
            ret.Add((Lighting?.Overall ?? true, Lighting?.Specific?.GetCrystal()));
            ret.Add((Regions, null));
            ret.Add((MusicType, null));
            ret.Add((WaterHeight, null));
            ret.Add((Climate, null));
            ret.Add((Water, null));
            ret.Add((Owner, null));
            ret.Add((FactionRank, null));
            ret.Add((GlobalVariable, null));
            ret.Add((PathGrid?.Overall ?? true, PathGrid?.Specific?.GetCrystal()));
            ret.Add((Landscape?.Overall ?? true, Landscape?.Specific?.GetCrystal()));
            ret.Add((Persistent, null));
            ret.Add((Temporary, null));
            ret.Add((VisibleWhenDistant, null));
        }
    }
    #endregion

    #endregion

}
