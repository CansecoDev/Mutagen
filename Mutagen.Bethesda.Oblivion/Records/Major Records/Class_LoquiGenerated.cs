/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Class : 
        MajorRecord,
        IClass,
        ILoquiObject<Class>,
        ILoquiObjectSetter,
        INamed,
        IEquatable<Class>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;

        #region Ctor
        protected Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Class_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Class_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IClassGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IClassGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Class_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)Class_FieldIndex.Description];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Class_FieldIndex.Description, nameof(Description_IsSet));
        }
        bool IClassGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String IClassGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Description, value, _hasBeenSetTracker, markSet, (int)Class_FieldIndex.Description, nameof(Description), nameof(Description_IsSet));
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Class_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Class_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool IClassGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IClassGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Class_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region PrimaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<ActorValue> _PrimaryAttributes = new SourceBoundedSetList<ActorValue>(max: 2);
        public ISourceSetList<ActorValue> PrimaryAttributes => _PrimaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ActorValue> PrimaryAttributesEnumerable
        {
            get => _PrimaryAttributes.Items;
            set => _PrimaryAttributes.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<ActorValue> IClass.PrimaryAttributes => _PrimaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<ActorValue> IClassGetter.PrimaryAttributes => _PrimaryAttributes;
        #endregion

        #endregion
        #region Specialization
        private Class.SpecializationFlag _Specialization;
        public Class.SpecializationFlag Specialization
        {
            get => this._Specialization;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Specialization, value, nameof(Specialization));
            }
        }
        #endregion
        #region SecondaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<ActorValue> _SecondaryAttributes = new SourceBoundedSetList<ActorValue>(max: 7);
        public ISourceSetList<ActorValue> SecondaryAttributes => _SecondaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ActorValue> SecondaryAttributesEnumerable
        {
            get => _SecondaryAttributes.Items;
            set => _SecondaryAttributes.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<ActorValue> IClass.SecondaryAttributes => _SecondaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<ActorValue> IClassGetter.SecondaryAttributes => _SecondaryAttributes;
        #endregion

        #endregion
        #region Flags
        private ClassFlag _Flags;
        public ClassFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region ClassServices
        private ClassService _ClassServices;
        public ClassService ClassServices
        {
            get => this._ClassServices;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._ClassServices, value, nameof(ClassServices));
            }
        }
        #endregion
        #region Training
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClassTraining _Training = new ClassTraining();
        public ClassTraining Training
        {
            get => _Training;
            set => _Training = value ?? new ClassTraining();
        }
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ClassCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ClassCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ClassCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ClassCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Class>.GetEqualsMask(Class rhs, EqualsMaskHelper.Include include) => ClassCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IClassGetter>.GetEqualsMask(IClassGetter rhs, EqualsMaskHelper.Include include) => ClassCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            return ClassCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClassCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Class_Mask<bool> GetHasBeenSetMask()
        {
            return ClassCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Class rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Class rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Description_IsSet != rhs.Description_IsSet) return false;
            if (Description_IsSet)
            {
                if (!object.Equals(this.Description, rhs.Description)) return false;
            }
            if (Icon_IsSet != rhs.Icon_IsSet) return false;
            if (Icon_IsSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (!this.PrimaryAttributes.SequenceEqual(rhs.PrimaryAttributes)) return false;
            if (this.Specialization != rhs.Specialization) return false;
            if (!this.SecondaryAttributes.SequenceEqual(rhs.SecondaryAttributes)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.ClassServices != rhs.ClassServices) return false;
            if (!object.Equals(this.Training, rhs.Training)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Description_IsSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(PrimaryAttributes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Specialization).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SecondaryAttributes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ClassServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Training).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Class Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Class_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Class Create_Xml(
            XElement node,
            out Class_ErrorMask errorMask,
            bool doMasks = true,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Class Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Class() : null;
                    break;
                default:
                    break;
            }
            var ret = new Class();
            try
            {
                ret.DATADataTypeState |= Class.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ClassCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Class Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Class_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Class Create_Xml(
            string path,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Class Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Class_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Class Create_Xml(
            Stream stream,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Class_ErrorMask errorMask,
            bool doMasks = true,
            Class_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ClassCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            Class item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Class.DATADataType.Has;
                    break;
                default:
                    MajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                    return _hasBeenSetTracker[index];
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Class_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        public Class(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(Class obj, Class rhs, Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override MajorRecord Duplicate(Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Class(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Class Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Class Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Class Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Class>(
                record: new Class(),
                frame: frame,
                errorMask: errorMask,
                recType: Class_Registration.CLAS_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Class Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static Class Create_Binary(
            string path,
            MasterReferences masterReferences,
            out Class_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Class Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static Class Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static Class Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Class_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Class Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ClassCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Class item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Class item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Name);
                case 0x43534544: // DESC
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Description);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Description);
                case 0x4E4F4349: // ICON
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Icon);
                case 0x41544144: // DATA
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.ParseRepeatedItem(
                            frame: frame,
                            amount: 2,
                            item: item.PrimaryAttributes,
                            fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, out ActorValue listSubItem, ErrorMaskBuilder listErrMask) =>
                            {
                                return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                                    frame: r.SpawnWithLength(4),
                                    item: out listSubItem,
                                    errorMask: listErrMask);
                            }
                            );
                        try
                        {
                            errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                            if (EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Class.SpecializationFlag SpecializationParse,
                                errorMask: errorMask))
                            {
                                item.Specialization = SpecializationParse;
                            }
                            else
                            {
                                item.Specialization = default(Class.SpecializationFlag);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.ParseRepeatedItem(
                            frame: frame,
                            amount: 7,
                            item: item.SecondaryAttributes,
                            fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, out ActorValue listSubItem, ErrorMaskBuilder listErrMask) =>
                            {
                                return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                                    frame: r.SpawnWithLength(4),
                                    item: out listSubItem,
                                    errorMask: listErrMask);
                            }
                            );
                        try
                        {
                            errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                            if (EnumBinaryTranslation<ClassFlag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out ClassFlag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.Flags = default(ClassFlag);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                            if (EnumBinaryTranslation<ClassService>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out ClassService ClassServicesParse,
                                errorMask: errorMask))
                            {
                                item.ClassServices = ClassServicesParse;
                            }
                            else
                            {
                                item.ClassServices = default(ClassService);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break0;
                            return TryGet<int?>.Succeed((int)Class_FieldIndex.ClassServices);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Class_FieldIndex.Training);
                            if (LoquiBinaryTranslation<ClassTraining>.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                masterReferences: masterReferences,
                                item: out ClassTraining TrainingParse,
                                errorMask: errorMask))
                            {
                                item.Training = TrainingParse;
                            }
                            else
                            {
                                item.Training = default(ClassTraining);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Training);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Class Copy(
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            return Class.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Class Copy(
            IClass item,
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            Class ret;
            if (item.GetType().Equals(typeof(Class)))
            {
                ret = new Class();
            }
            else
            {
                ret = (Class)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Class Copy_ToLoqui(
            IClassGetter item,
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            Class ret;
            if (item.GetType().Equals(typeof(Class)))
            {
                ret = new Class() as Class;
            }
            else
            {
                ret = (Class)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IClassGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IClassGetter rhs,
            Class_CopyMask copyMask,
            IClassGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IClassGetter rhs,
            out Class_ErrorMask errorMask,
            Class_CopyMask copyMask = null,
            IClassGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ClassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IClassGetter rhs,
            ErrorMaskBuilder errorMask,
            Class_CopyMask copyMask = null,
            IClassGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ClassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Class_FieldIndex.Description:
                    this.Description = (String)obj;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this._PrimaryAttributes.SetTo((IEnumerable<ActorValue>)obj);
                    break;
                case Class_FieldIndex.Specialization:
                    this.Specialization = (Class.SpecializationFlag)obj;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this._SecondaryAttributes.SetTo((IEnumerable<ActorValue>)obj);
                    break;
                case Class_FieldIndex.Flags:
                    this.Flags = (ClassFlag)obj;
                    break;
                case Class_FieldIndex.ClassServices:
                    this.ClassServices = (ClassService)obj;
                    break;
                case Class_FieldIndex.Training:
                    this.Training = (ClassTraining)obj;
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ClassCommon.Clear(this, cmds);
        }


        public new static Class Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Class();
            foreach (var pair in fields)
            {
                CopyInInternal_Class(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Class(Class obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Class_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Class_FieldIndex.Description:
                    obj.Description = (String)pair.Value;
                    break;
                case Class_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    obj._PrimaryAttributes.SetTo((IEnumerable<ActorValue>)pair.Value);
                    break;
                case Class_FieldIndex.Specialization:
                    obj.Specialization = (Class.SpecializationFlag)pair.Value;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    obj._SecondaryAttributes.SetTo((IEnumerable<ActorValue>)pair.Value);
                    break;
                case Class_FieldIndex.Flags:
                    obj.Flags = (ClassFlag)pair.Value;
                    break;
                case Class_FieldIndex.ClassServices:
                    obj.ClassServices = (ClassService)pair.Value;
                    break;
                case Class_FieldIndex.Training:
                    obj.Training = (ClassTraining)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Class obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IClass : IClassGetter, IMajorRecord, ILoquiClass<IClass, IClassGetter>, ILoquiClass<Class, IClassGetter>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String item, bool hasBeenSet = true);
        void Description_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String item, bool hasBeenSet = true);
        void Icon_Unset();

        new ISourceSetList<ActorValue> PrimaryAttributes { get; }
        new Class.SpecializationFlag Specialization { get; set; }

        new ISourceSetList<ActorValue> SecondaryAttributes { get; }
        new ClassFlag Flags { get; set; }

        new ClassService ClassServices { get; set; }

        new ClassTraining Training { get; set; }

    }

    public partial interface IClassGetter : IMajorRecordGetter
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region PrimaryAttributes
        IObservableSetList<ActorValue> PrimaryAttributes { get; }
        #endregion
        #region Specialization
        Class.SpecializationFlag Specialization { get; }

        #endregion
        #region SecondaryAttributes
        IObservableSetList<ActorValue> SecondaryAttributes { get; }
        #endregion
        #region Flags
        ClassFlag Flags { get; }

        #endregion
        #region ClassServices
        ClassService ClassServices { get; }

        #endregion
        #region Training
        ClassTraining Training { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Class_FieldIndex
    {
        MajorRecordFlags = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Description = 6,
        Icon = 7,
        PrimaryAttributes = 8,
        Specialization = 9,
        SecondaryAttributes = 10,
        Flags = 11,
        ClassServices = 12,
        Training = 13,
    }
    #endregion

    #region Registration
    public class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 16,
            version: 0);

        public const string GUID = "3f2e301a-e8f4-42db-875c-3e760e4eff31";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Class_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class_ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type CommonType = typeof(ClassCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Class_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Class_FieldIndex.Description;
                case "ICON":
                    return (ushort)Class_FieldIndex.Icon;
                case "PRIMARYATTRIBUTES":
                    return (ushort)Class_FieldIndex.PrimaryAttributes;
                case "SPECIALIZATION":
                    return (ushort)Class_FieldIndex.Specialization;
                case "SECONDARYATTRIBUTES":
                    return (ushort)Class_FieldIndex.SecondaryAttributes;
                case "FLAGS":
                    return (ushort)Class_FieldIndex.Flags;
                case "CLASSSERVICES":
                    return (ushort)Class_FieldIndex.ClassServices;
                case "TRAINING":
                    return (ushort)Class_FieldIndex.Training;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.SecondaryAttributes:
                    return true;
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Training:
                    return true;
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return "Name";
                case Class_FieldIndex.Description:
                    return "Description";
                case Class_FieldIndex.Icon:
                    return "Icon";
                case Class_FieldIndex.PrimaryAttributes:
                    return "PrimaryAttributes";
                case Class_FieldIndex.Specialization:
                    return "Specialization";
                case Class_FieldIndex.SecondaryAttributes:
                    return "SecondaryAttributes";
                case Class_FieldIndex.Flags:
                    return "Flags";
                case Class_FieldIndex.ClassServices:
                    return "ClassServices";
                case Class_FieldIndex.Training:
                    return "Training";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return typeof(String);
                case Class_FieldIndex.Description:
                    return typeof(String);
                case Class_FieldIndex.Icon:
                    return typeof(String);
                case Class_FieldIndex.PrimaryAttributes:
                    return typeof(SourceSetList<ActorValue>);
                case Class_FieldIndex.Specialization:
                    return typeof(Class.SpecializationFlag);
                case Class_FieldIndex.SecondaryAttributes:
                    return typeof(SourceSetList<ActorValue>);
                case Class_FieldIndex.Flags:
                    return typeof(ClassFlag);
                case Class_FieldIndex.ClassServices:
                    return typeof(ClassService);
                case Class_FieldIndex.Training:
                    return typeof(ClassTraining);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ClassCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IClass item,
            IClassGetter rhs,
            IClassGetter def,
            ErrorMaskBuilder errorMask,
            Class_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Description);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Description,
                        rhsHasBeenSet: rhs.Description_IsSet,
                        defItem: def?.Description ?? default(String),
                        defHasBeenSet: def?.Description_IsSet ?? false,
                        outRhsItem: out var rhsDescriptionItem,
                        outDefItem: out var defDescriptionItem))
                    {
                        item.Description = rhsDescriptionItem;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PrimaryAttributes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.PrimaryAttributes);
                try
                {
                    item.PrimaryAttributes.SetToWithDefault(
                        rhs.PrimaryAttributes,
                        def?.PrimaryAttributes);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Specialization ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                try
                {
                    item.Specialization = rhs.Specialization;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SecondaryAttributes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.SecondaryAttributes);
                try
                {
                    item.SecondaryAttributes.SetToWithDefault(
                        rhs.SecondaryAttributes,
                        def?.SecondaryAttributes);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ClassServices ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                try
                {
                    item.ClassServices = rhs.ClassServices;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Training.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Training);
                try
                {
                    switch (copyMask?.Training?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Training = rhs.Training;
                            break;
                        case CopyOption.CopyIn:
                            ClassTrainingCommon.CopyFieldsFrom(
                                item: item.Training,
                                rhs: rhs.Training,
                                def: def?.Training,
                                errorMask: errorMask,
                                copyMask: copyMask?.Training.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Training == null)
                            {
                                item.Training = null;
                            }
                            else
                            {
                                item.Training = ClassTraining.Copy(
                                    rhs.Training,
                                    copyMask?.Training?.Specific,
                                    def?.Training);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Training?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IClass obj,
            NotifyingFireParameters cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Class_FieldIndex.Name:
                    obj.Name_IsSet = on;
                    break;
                case Class_FieldIndex.Description:
                    obj.Description_IsSet = on;
                    break;
                case Class_FieldIndex.Icon:
                    obj.Icon_IsSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IClass obj,
            NotifyingUnsetParameters cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    obj.Name_Unset();
                    break;
                case Class_FieldIndex.Description:
                    obj.Description_Unset();
                    break;
                case Class_FieldIndex.Icon:
                    obj.Icon_Unset();
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    obj.PrimaryAttributes.Unset();
                    break;
                case Class_FieldIndex.Specialization:
                    obj.Specialization = default(Class.SpecializationFlag);
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    obj.SecondaryAttributes.Unset();
                    break;
                case Class_FieldIndex.Flags:
                    obj.Flags = default(ClassFlag);
                    break;
                case Class_FieldIndex.ClassServices:
                    obj.ClassServices = default(ClassService);
                    break;
                case Class_FieldIndex.Training:
                    obj.Training = default(ClassTraining);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IClass obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return true;
                case Class_FieldIndex.Name:
                    return obj.Name_IsSet;
                case Class_FieldIndex.Description:
                    return obj.Description_IsSet;
                case Class_FieldIndex.Icon:
                    return obj.Icon_IsSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IClassGetter obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return obj.Name;
                case Class_FieldIndex.Description:
                    return obj.Description;
                case Class_FieldIndex.Icon:
                    return obj.Icon;
                case Class_FieldIndex.PrimaryAttributes:
                    return obj.PrimaryAttributes;
                case Class_FieldIndex.Specialization:
                    return obj.Specialization;
                case Class_FieldIndex.SecondaryAttributes:
                    return obj.SecondaryAttributes;
                case Class_FieldIndex.Flags:
                    return obj.Flags;
                case Class_FieldIndex.ClassServices:
                    return obj.ClassServices;
                case Class_FieldIndex.Training:
                    return obj.Training;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IClass item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Unset();
            item.Description_Unset();
            item.Icon_Unset();
            item.PrimaryAttributes.Unset();
            item.Specialization = default(Class.SpecializationFlag);
            item.SecondaryAttributes.Unset();
            item.Flags = default(ClassFlag);
            item.ClassServices = default(ClassService);
            item.Training = default(ClassTraining);
        }

        public static Class_Mask<bool> GetEqualsMask(
            this IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Class_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            Class_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && object.Equals(item.Name, rhs.Name);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && object.Equals(item.Description, rhs.Description);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && object.Equals(item.Icon, rhs.Icon);
            ret.PrimaryAttributes = item.PrimaryAttributes.CollectionEqualsHelper(
                rhs.PrimaryAttributes,
                (l, r) => l == r,
                include);
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.SecondaryAttributes = item.SecondaryAttributes.CollectionEqualsHelper(
                rhs.SecondaryAttributes,
                (l, r) => l == r,
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ClassServices = item.ClassServices == rhs.ClassServices;
            ret.Training = MaskItemExt.Factory(ClassTrainingCommon.GetEqualsMask(item.Training, rhs.Training, include), include);
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IClassGetter item,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IClassGetter item,
            FileGeneration fg,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Class)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Class)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.PrimaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("PrimaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.PrimaryAttributes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {item.Specialization}");
                }
                if (printMask?.SecondaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("SecondaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SecondaryAttributes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.ClassServices ?? true)
                {
                    fg.AppendLine($"ClassServices => {item.ClassServices}");
                }
                if (printMask?.Training?.Overall ?? true)
                {
                    item.Training?.ToString(fg, "Training");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IClassGetter item,
            Class_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.PrimaryAttributes.Overall.HasValue && checkMask.PrimaryAttributes.Overall.Value != item.PrimaryAttributes.HasBeenSet) return false;
            if (checkMask.SecondaryAttributes.Overall.HasValue && checkMask.SecondaryAttributes.Overall.Value != item.SecondaryAttributes.HasBeenSet) return false;
            return true;
        }

        public static Class_Mask<bool> GetHasBeenSetMask(IClassGetter item)
        {
            var ret = new Class_Mask<bool>();
            ret.Name = item.Name_IsSet;
            ret.Description = item.Description_IsSet;
            ret.Icon = item.Icon_IsSet;
            ret.PrimaryAttributes = new MaskItem<bool, IEnumerable<(int, bool)>>(item.PrimaryAttributes.HasBeenSet, null);
            ret.Specialization = true;
            ret.SecondaryAttributes = new MaskItem<bool, IEnumerable<(int, bool)>>(item.SecondaryAttributes.HasBeenSet, null);
            ret.Flags = true;
            ret.ClassServices = true;
            ret.Training = new MaskItem<bool, ClassTraining_Mask<bool>>(true, ClassTrainingCommon.GetHasBeenSetMask(item.Training));
            return ret;
        }

        public static Class_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Class_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Class item,
            bool doMasks,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Class item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Class");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Class");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this Class item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            MajorRecordCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Class_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Class_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Class_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.PrimaryAttributes) ?? true))
                {
                    ListXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.PrimaryAttributes),
                        item: item.PrimaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.PrimaryAttributes),
                        transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                        {
                            EnumXmlTranslation<ActorValue>.Instance.Write(
                                node: subNode,
                                name: null,
                                item: subItem,
                                errorMask: listSubMask);
                        }
                        );
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Specialization) ?? true))
                {
                    EnumXmlTranslation<Class.SpecializationFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Specialization),
                        item: item.Specialization,
                        fieldIndex: (int)Class_FieldIndex.Specialization,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.SecondaryAttributes) ?? true))
                {
                    ListXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.SecondaryAttributes),
                        item: item.SecondaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.SecondaryAttributes),
                        transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                        {
                            EnumXmlTranslation<ActorValue>.Instance.Write(
                                node: subNode,
                                name: null,
                                item: subItem,
                                errorMask: listSubMask);
                        }
                        );
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<ClassFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Class_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.ClassServices) ?? true))
                {
                    EnumXmlTranslation<ClassService>.Instance.Write(
                        node: node,
                        name: nameof(item.ClassServices),
                        item: item.ClassServices,
                        fieldIndex: (int)Class_FieldIndex.ClassServices,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(Class.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Training) ?? true))
                    {
                        LoquiXmlTranslation<ClassTraining>.Instance.Write(
                            node: node,
                            item: item.Training,
                            name: nameof(item.Training),
                            fieldIndex: (int)Class_FieldIndex.Training,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.Training));
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
        }

        public static void FillPublic_Xml(
            this Class item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Class item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrimaryAttributes":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.PrimaryAttributes);
                        if (ListXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            enumer: out var PrimaryAttributesItem,
                            transl: EnumXmlTranslation<ActorValue>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PrimaryAttributes.SetTo(PrimaryAttributesItem);
                        }
                        else
                        {
                            item.PrimaryAttributes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Class.DATADataType.Has;
                    break;
                case "Specialization":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                        if (EnumXmlTranslation<Class.SpecializationFlag>.Instance.Parse(
                            node: node,
                            item: out Class.SpecializationFlag SpecializationParse,
                            errorMask: errorMask))
                        {
                            item.Specialization = SpecializationParse;
                        }
                        else
                        {
                            item.Specialization = default(Class.SpecializationFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondaryAttributes":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.SecondaryAttributes);
                        if (ListXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            enumer: out var SecondaryAttributesItem,
                            transl: EnumXmlTranslation<ActorValue>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SecondaryAttributes.SetTo(SecondaryAttributesItem);
                        }
                        else
                        {
                            item.SecondaryAttributes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                        if (EnumXmlTranslation<ClassFlag>.Instance.Parse(
                            node: node,
                            item: out ClassFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(ClassFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ClassServices":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                        if (EnumXmlTranslation<ClassService>.Instance.Parse(
                            node: node,
                            item: out ClassService ClassServicesParse,
                            errorMask: errorMask))
                        {
                            item.ClassServices = ClassServicesParse;
                        }
                        else
                        {
                            item.ClassServices = default(ClassService);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Training":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Training);
                        if (LoquiXmlTranslation<ClassTraining>.Instance.Parse(
                            node: node,
                            item: out ClassTraining TrainingParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.Training)))
                        {
                            item.Training = TrainingParse;
                        }
                        else
                        {
                            item.Training = default(ClassTraining);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Class.DATADataType.Break0;
                    break;
                default:
                    MajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Class item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Class_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Class item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Class_Registration.CLAS_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Class item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)Class_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Class_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    fieldIndex: (int)Class_FieldIndex.Description,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Class_Registration.DESC_HEADER),
                    nullable: false);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    fieldIndex: (int)Class_FieldIndex.Icon,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Class_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Class_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                        writer: writer,
                        items: item.PrimaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                        errorMask: errorMask,
                        transl: (MutagenWriter subWriter, ActorValue subItem, ErrorMaskBuilder listErrorMask) =>
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                                subWriter,
                                subItem,
                                length: 4,
                                errorMask: listErrorMask);
                        }
                        );
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Write(
                        writer,
                        item.Specialization,
                        length: 4,
                        fieldIndex: (int)Class_FieldIndex.Specialization,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                        writer: writer,
                        items: item.SecondaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                        errorMask: errorMask,
                        transl: (MutagenWriter subWriter, ActorValue subItem, ErrorMaskBuilder listErrorMask) =>
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                                subWriter,
                                subItem,
                                length: 4,
                                errorMask: listErrorMask);
                        }
                        );
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4,
                        fieldIndex: (int)Class_FieldIndex.Flags,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassService>.Instance.Write(
                        writer,
                        item.ClassServices,
                        length: 4,
                        fieldIndex: (int)Class_FieldIndex.ClassServices,
                        errorMask: errorMask);
                    if (!item.DATADataTypeState.HasFlag(Class.DATADataType.Break0))
                    {
                        LoquiBinaryTranslation<ClassTraining>.Instance.Write(
                            writer: writer,
                            item: item.Training,
                            fieldIndex: (int)Class_FieldIndex.Training,
                            errorMask: errorMask,
                            masterReferences: masterReferences);
                    }
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Class_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Class_Mask<T>>
    {
        #region Ctors
        public Class_Mask()
        {
        }

        public Class_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Description = initialValue;
            this.Icon = initialValue;
            this.PrimaryAttributes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Specialization = initialValue;
            this.SecondaryAttributes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Flags = initialValue;
            this.ClassServices = initialValue;
            this.Training = new MaskItem<T, ClassTraining_Mask<T>>(initialValue, new ClassTraining_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Name;
        public T Description;
        public T Icon;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> PrimaryAttributes;
        public T Specialization;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> SecondaryAttributes;
        public T Flags;
        public T ClassServices;
        public MaskItem<T, ClassTraining_Mask<T>> Training { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Class_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Class_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.PrimaryAttributes, rhs.PrimaryAttributes)) return false;
            if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
            if (!object.Equals(this.SecondaryAttributes, rhs.SecondaryAttributes)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.ClassServices, rhs.ClassServices)) return false;
            if (!object.Equals(this.Training, rhs.Training)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.PrimaryAttributes?.GetHashCode());
            ret = ret.CombineHashCode(this.Specialization?.GetHashCode());
            ret = ret.CombineHashCode(this.SecondaryAttributes?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.ClassServices?.GetHashCode());
            ret = ret.CombineHashCode(this.Training?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Icon)) return false;
            if (this.PrimaryAttributes != null)
            {
                if (!eval(this.PrimaryAttributes.Overall)) return false;
                if (this.PrimaryAttributes.Specific != null)
                {
                    foreach (var item in this.PrimaryAttributes.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.Specialization)) return false;
            if (this.SecondaryAttributes != null)
            {
                if (!eval(this.SecondaryAttributes.Overall)) return false;
                if (this.SecondaryAttributes.Specific != null)
                {
                    foreach (var item in this.SecondaryAttributes.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.ClassServices)) return false;
            if (Training != null)
            {
                if (!eval(this.Training.Overall)) return false;
                if (this.Training.Specific != null && !this.Training.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Class_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Class_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Class_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Description = eval(this.Description);
            obj.Icon = eval(this.Icon);
            if (PrimaryAttributes != null)
            {
                obj.PrimaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.PrimaryAttributes.Overall = eval(this.PrimaryAttributes.Overall);
                if (PrimaryAttributes.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.PrimaryAttributes.Specific = l;
                    foreach (var item in PrimaryAttributes.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.Specialization = eval(this.Specialization);
            if (SecondaryAttributes != null)
            {
                obj.SecondaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.SecondaryAttributes.Overall = eval(this.SecondaryAttributes.Overall);
                if (SecondaryAttributes.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.SecondaryAttributes.Specific = l;
                    foreach (var item in SecondaryAttributes.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.Flags = eval(this.Flags);
            obj.ClassServices = eval(this.ClassServices);
            if (this.Training != null)
            {
                obj.Training = new MaskItem<R, ClassTraining_Mask<R>>();
                obj.Training.Overall = eval(this.Training.Overall);
                if (this.Training.Specific != null)
                {
                    obj.Training.Specific = this.Training.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.PrimaryAttributes.Specific = null;
            this.SecondaryAttributes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Class_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Class_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Class_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.PrimaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("PrimaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (PrimaryAttributes.Overall != null)
                        {
                            fg.AppendLine(PrimaryAttributes.Overall.ToString());
                        }
                        if (PrimaryAttributes.Specific != null)
                        {
                            foreach (var subItem in PrimaryAttributes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {Specialization}");
                }
                if (printMask?.SecondaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("SecondaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SecondaryAttributes.Overall != null)
                        {
                            fg.AppendLine(SecondaryAttributes.Overall.ToString());
                        }
                        if (SecondaryAttributes.Specific != null)
                        {
                            foreach (var subItem in SecondaryAttributes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.ClassServices ?? true)
                {
                    fg.AppendLine($"ClassServices => {ClassServices}");
                }
                if (printMask?.Training?.Overall ?? true)
                {
                    Training?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Class_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Class_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Description;
        public Exception Icon;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> PrimaryAttributes;
        public Exception Specialization;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> SecondaryAttributes;
        public Exception Flags;
        public Exception ClassServices;
        public MaskItem<Exception, ClassTraining_ErrorMask> Training;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return Name;
                case Class_FieldIndex.Description:
                    return Description;
                case Class_FieldIndex.Icon:
                    return Icon;
                case Class_FieldIndex.PrimaryAttributes:
                    return PrimaryAttributes;
                case Class_FieldIndex.Specialization:
                    return Specialization;
                case Class_FieldIndex.SecondaryAttributes:
                    return SecondaryAttributes;
                case Class_FieldIndex.Flags:
                    return Flags;
                case Class_FieldIndex.ClassServices:
                    return ClassServices;
                case Class_FieldIndex.Training:
                    return Training;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Class_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this.PrimaryAttributes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Class_FieldIndex.Specialization:
                    this.Specialization = ex;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this.SecondaryAttributes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Class_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Class_FieldIndex.ClassServices:
                    this.ClassServices = ex;
                    break;
                case Class_FieldIndex.Training:
                    this.Training = new MaskItem<Exception, ClassTraining_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Class_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this.PrimaryAttributes = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Class_FieldIndex.Specialization:
                    this.Specialization = (Exception)obj;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this.SecondaryAttributes = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Class_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Class_FieldIndex.ClassServices:
                    this.ClassServices = (Exception)obj;
                    break;
                case Class_FieldIndex.Training:
                    this.Training = (MaskItem<Exception, ClassTraining_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Description != null) return true;
            if (Icon != null) return true;
            if (PrimaryAttributes != null) return true;
            if (Specialization != null) return true;
            if (SecondaryAttributes != null) return true;
            if (Flags != null) return true;
            if (ClassServices != null) return true;
            if (Training != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Class_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine("PrimaryAttributes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (PrimaryAttributes.Overall != null)
                {
                    fg.AppendLine(PrimaryAttributes.Overall.ToString());
                }
                if (PrimaryAttributes.Specific != null)
                {
                    foreach (var subItem in PrimaryAttributes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Specialization => {Specialization}");
            fg.AppendLine("SecondaryAttributes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SecondaryAttributes.Overall != null)
                {
                    fg.AppendLine(SecondaryAttributes.Overall.ToString());
                }
                if (SecondaryAttributes.Specific != null)
                {
                    foreach (var subItem in SecondaryAttributes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"ClassServices => {ClassServices}");
            Training?.ToString(fg);
        }
        #endregion

        #region Combine
        public Class_ErrorMask Combine(Class_ErrorMask rhs)
        {
            var ret = new Class_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.PrimaryAttributes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.PrimaryAttributes.Overall.Combine(rhs.PrimaryAttributes.Overall), new List<(int Index, Exception Value)>(this.PrimaryAttributes.Specific.And(rhs.PrimaryAttributes.Specific)));
            ret.Specialization = this.Specialization.Combine(rhs.Specialization);
            ret.SecondaryAttributes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.SecondaryAttributes.Overall.Combine(rhs.SecondaryAttributes.Overall), new List<(int Index, Exception Value)>(this.SecondaryAttributes.Specific.And(rhs.SecondaryAttributes.Specific)));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.ClassServices = this.ClassServices.Combine(rhs.ClassServices);
            ret.Training = new MaskItem<Exception, ClassTraining_ErrorMask>(this.Training.Overall.Combine(rhs.Training.Overall), ((IErrorMask<ClassTraining_ErrorMask>)this.Training.Specific).Combine(rhs.Training.Specific));
            return ret;
        }
        public static Class_ErrorMask Combine(Class_ErrorMask lhs, Class_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Class_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Class_ErrorMask();
        }
        #endregion

    }
    public class Class_CopyMask : MajorRecord_CopyMask
    {
        public Class_CopyMask()
        {
        }

        public Class_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Description = defaultOn;
            this.Icon = defaultOn;
            this.PrimaryAttributes = deepCopyOption;
            this.Specialization = defaultOn;
            this.SecondaryAttributes = deepCopyOption;
            this.Flags = defaultOn;
            this.ClassServices = defaultOn;
            this.Training = new MaskItem<CopyOption, ClassTraining_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Name;
        public bool Description;
        public bool Icon;
        public CopyOption PrimaryAttributes;
        public bool Specialization;
        public CopyOption SecondaryAttributes;
        public bool Flags;
        public bool ClassServices;
        public MaskItem<CopyOption, ClassTraining_CopyMask> Training;
        #endregion

    }

    public class Class_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Description;
        public bool Icon;
        public bool PrimaryAttributes;
        public bool Specialization;
        public bool SecondaryAttributes;
        public bool Flags;
        public bool ClassServices;
        public MaskItem<bool, ClassTraining_TranslationMask> Training;
        #endregion

        #region Ctors
        public Class_TranslationMask()
            : base()
        {
        }

        public Class_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Description = defaultOn;
            this.Icon = defaultOn;
            this.PrimaryAttributes = defaultOn;
            this.Specialization = defaultOn;
            this.SecondaryAttributes = defaultOn;
            this.Flags = defaultOn;
            this.ClassServices = defaultOn;
            this.Training = new MaskItem<bool, ClassTraining_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Description, null));
            ret.Add((Icon, null));
            ret.Add((PrimaryAttributes, null));
            ret.Add((Specialization, null));
            ret.Add((SecondaryAttributes, null));
            ret.Add((Flags, null));
            ret.Add((ClassServices, null));
            ret.Add((Training?.Overall ?? true, Training?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
