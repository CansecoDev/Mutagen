/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Class :
        OblivionMajorRecord,
        IClassInternal,
        ILoquiObjectSetter<Class>,
        INamed,
        IEquatable<Class>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;
        protected override object CommonInstance => ClassCommon.Instance;

        #region Ctor
        protected Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Class_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Class_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IClassGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IClassGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Class_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)Class_FieldIndex.Description];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Class_FieldIndex.Description, nameof(Description_IsSet));
        }
        bool IClassGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String IClassGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Description, value, _hasBeenSetTracker, markSet, (int)Class_FieldIndex.Description, nameof(Description), nameof(Description_IsSet));
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Class_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Class_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool IClassGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IClassGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Class_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region PrimaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ISourceList<ActorValue> _PrimaryAttributes = new SourceBoundedList<ActorValue>(max: 2);
        public ISourceList<ActorValue> PrimaryAttributes => _PrimaryAttributes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<ActorValue> IClass.PrimaryAttributes => _PrimaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ActorValue> IClassGetter.PrimaryAttributes => _PrimaryAttributes;
        #endregion

        #endregion
        #region Specialization
        private Class.SpecializationFlag _Specialization;
        public Class.SpecializationFlag Specialization
        {
            get => this._Specialization;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Specialization, value, nameof(Specialization));
            }
        }
        #endregion
        #region SecondaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ISourceList<ActorValue> _SecondaryAttributes = new SourceBoundedList<ActorValue>(max: 7);
        public ISourceList<ActorValue> SecondaryAttributes => _SecondaryAttributes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<ActorValue> IClass.SecondaryAttributes => _SecondaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ActorValue> IClassGetter.SecondaryAttributes => _SecondaryAttributes;
        #endregion

        #endregion
        #region Flags
        private ClassFlag _Flags;
        public ClassFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region ClassServices
        private ClassService _ClassServices;
        public ClassService ClassServices
        {
            get => this._ClassServices;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._ClassServices, value, nameof(ClassServices));
            }
        }
        #endregion
        #region Training
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClassTraining _Training = new ClassTraining();
        public ClassTraining Training
        {
            get => _Training;
            set => _Training = value ?? new ClassTraining();
        }
        IClassTrainingGetter IClassGetter.Training => _Training;
        #endregion
        #region DATADataTypeState
        private Class.DATADataType _DATADataTypeState;
        public Class.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        Class.DATADataType IClassInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        Class.DATADataType IClassInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClassMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IClassInternalGetter rhs)) return false;
            return ((ClassCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(Class obj)
        {
            return ((ClassCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClassCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => ClassXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Class CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Class_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Class CreateFromXml(
            XElement node,
            out Class_ErrorMask errorMask,
            bool doMasks = true,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Class CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Class() : null;
                    break;
                default:
                    break;
            }
            var ret = new Class();
            try
            {
                ret.DATADataTypeState |= Class.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ClassXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Class CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Class_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            string path,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Class CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Class_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            Stream stream,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Class_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Class item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Class.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                    return _hasBeenSetTracker[index];
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Class_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        public Class(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Class(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Class CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Class CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Class CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Class>(
                record: new Class(),
                frame: frame,
                errorMask: errorMask,
                recType: Class_Registration.CLAS_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Class item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Class item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DescriptionParse))
                    {
                        item.Description = DescriptionParse;
                    }
                    else
                    {
                        item.Description = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.ParseRepeatedItem(
                        frame: frame,
                        amount: 2,
                        item: item.PrimaryAttributes,
                        transl: (MutagenFrame r, out ActorValue listSubItem) =>
                        {
                            return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                                frame: r.SpawnWithLength(4),
                                item: out listSubItem);
                        });
                    if (EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Class.SpecializationFlag SpecializationParse))
                    {
                        item.Specialization = SpecializationParse;
                    }
                    else
                    {
                        item.Specialization = default(Class.SpecializationFlag);
                    }
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.ParseRepeatedItem(
                        frame: frame,
                        amount: 7,
                        item: item.SecondaryAttributes,
                        transl: (MutagenFrame r, out ActorValue listSubItem) =>
                        {
                            return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                                frame: r.SpawnWithLength(4),
                                item: out listSubItem);
                        });
                    if (EnumBinaryTranslation<ClassFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out ClassFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(ClassFlag);
                    }
                    if (EnumBinaryTranslation<ClassService>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out ClassService ClassServicesParse))
                    {
                        item.ClassServices = ClassServicesParse;
                    }
                    else
                    {
                        item.ClassServices = default(ClassService);
                    }
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= DATADataType.Break0;
                        return TryGet<int?>.Succeed((int)Class_FieldIndex.ClassServices);
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Training);
                        item.Training = Mutagen.Bethesda.Oblivion.ClassTraining.CreateFromBinary(
                            frame: dataFrame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Training);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Class Copy(
            Class_CopyMask copyMask = null,
            Class def = null)
        {
            return Class.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Class Copy(
            Class item,
            Class_CopyMask copyMask = null,
            Class def = null)
        {
            Class ret;
            if (item.GetType().Equals(typeof(Class)))
            {
                ret = new Class();
            }
            else
            {
                ret = (Class)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Class Copy_ToLoqui(
            Class item,
            Class_CopyMask copyMask = null,
            Class def = null)
        {
            Class ret;
            if (item.GetType().Equals(typeof(Class)))
            {
                ret = new Class() as Class;
            }
            else
            {
                ret = (Class)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Class rhs,
            Class_CopyMask copyMask,
            Class def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Class rhs,
            out Class_ErrorMask errorMask,
            Class_CopyMask copyMask = null,
            Class def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ClassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Class rhs,
            ErrorMaskBuilder errorMask,
            Class_CopyMask copyMask = null,
            Class def = null)
        {
            ClassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Class_FieldIndex.Description:
                    this.Description = (String)obj;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this._PrimaryAttributes.SetTo((IList<ActorValue>)obj);
                    break;
                case Class_FieldIndex.Specialization:
                    this.Specialization = (Class.SpecializationFlag)obj;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this._SecondaryAttributes.SetTo((IList<ActorValue>)obj);
                    break;
                case Class_FieldIndex.Flags:
                    this.Flags = (ClassFlag)obj;
                    break;
                case Class_FieldIndex.ClassServices:
                    this.ClassServices = (ClassService)obj;
                    break;
                case Class_FieldIndex.Training:
                    this.Training = (ClassTraining)obj;
                    break;
                case Class_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Class.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            ClassCommon.Instance.Clear(this);
        }

        public new static Class Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Class();
            foreach (var pair in fields)
            {
                CopyInInternal_Class(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Class(Class obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Class_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Class_FieldIndex.Description:
                    obj.Description = (String)pair.Value;
                    break;
                case Class_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    obj._PrimaryAttributes.SetTo((IList<ActorValue>)pair.Value);
                    break;
                case Class_FieldIndex.Specialization:
                    obj.Specialization = (Class.SpecializationFlag)pair.Value;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    obj._SecondaryAttributes.SetTo((IList<ActorValue>)pair.Value);
                    break;
                case Class_FieldIndex.Flags:
                    obj.Flags = (ClassFlag)pair.Value;
                    break;
                case Class_FieldIndex.ClassServices:
                    obj.ClassServices = (ClassService)pair.Value;
                    break;
                case Class_FieldIndex.Training:
                    obj.Training = (ClassTraining)pair.Value;
                    break;
                case Class_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (Class.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IClass :
        IClassInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IClassInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String value, bool hasBeenSet = true);
        void Description_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new IList<ActorValue> PrimaryAttributes { get; }
        new Class.SpecializationFlag Specialization { get; set; }

        new IList<ActorValue> SecondaryAttributes { get; }
        new ClassFlag Flags { get; set; }

        new ClassService ClassServices { get; set; }

        new ClassTraining Training { get; set; }

        void CopyFieldsFrom(
            Class rhs,
            ErrorMaskBuilder errorMask = null,
            Class_CopyMask copyMask = null,
            Class def = null);
    }

    public partial interface IClassInternal :
        IOblivionMajorRecordInternal,
        IClass,
        IClassInternalGetter
    {
        new Class.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IClassGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IClassInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region PrimaryAttributes
        IReadOnlyList<ActorValue> PrimaryAttributes { get; }
        #endregion
        #region Specialization
        Class.SpecializationFlag Specialization { get; }

        #endregion
        #region SecondaryAttributes
        IReadOnlyList<ActorValue> SecondaryAttributes { get; }
        #endregion
        #region Flags
        ClassFlag Flags { get; }

        #endregion
        #region ClassServices
        ClassService ClassServices { get; }

        #endregion
        #region Training
        IClassTrainingGetter Training { get; }

        #endregion

    }

    public partial interface IClassInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IClassGetter
    {
        #region DATADataTypeState
        Class.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ClassMixIn
    {
        public static void Clear(this IClassInternal item)
        {
            ((ClassCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static Class_Mask<bool> GetEqualsMask(
            this IClassInternalGetter item,
            IClassInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClassInternalGetter item,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            return ((ClassCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClassInternalGetter item,
            FileGeneration fg,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            ((ClassCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClassInternalGetter item,
            Class_Mask<bool?> checkMask)
        {
            return ((ClassCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Class_Mask<bool> GetHasBeenSetMask(this IClassInternalGetter item)
        {
            var ret = new Class_Mask<bool>();
            ((ClassCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClassInternalGetter item,
            IClassInternalGetter rhs)
        {
            return ((ClassCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Class_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Description = 6,
        Icon = 7,
        PrimaryAttributes = 8,
        Specialization = 9,
        SecondaryAttributes = 10,
        Flags = 11,
        ClassServices = 12,
        Training = 13,
        DATADataTypeState = 14,
    }
    #endregion

    #region Registration
    public class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 16,
            version: 0);

        public const string GUID = "3f2e301a-e8f4-42db-875c-3e760e4eff31";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(Class_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class_ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type InternalGetterType = typeof(IClassInternalGetter);

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type InternalSetterType = typeof(IClassInternal);

        public static readonly Type CommonType = typeof(ClassCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Class_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Class_FieldIndex.Description;
                case "ICON":
                    return (ushort)Class_FieldIndex.Icon;
                case "PRIMARYATTRIBUTES":
                    return (ushort)Class_FieldIndex.PrimaryAttributes;
                case "SPECIALIZATION":
                    return (ushort)Class_FieldIndex.Specialization;
                case "SECONDARYATTRIBUTES":
                    return (ushort)Class_FieldIndex.SecondaryAttributes;
                case "FLAGS":
                    return (ushort)Class_FieldIndex.Flags;
                case "CLASSSERVICES":
                    return (ushort)Class_FieldIndex.ClassServices;
                case "TRAINING":
                    return (ushort)Class_FieldIndex.Training;
                case "DATADATATYPESTATE":
                    return (ushort)Class_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.SecondaryAttributes:
                    return true;
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Training:
                    return true;
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return "Name";
                case Class_FieldIndex.Description:
                    return "Description";
                case Class_FieldIndex.Icon:
                    return "Icon";
                case Class_FieldIndex.PrimaryAttributes:
                    return "PrimaryAttributes";
                case Class_FieldIndex.Specialization:
                    return "Specialization";
                case Class_FieldIndex.SecondaryAttributes:
                    return "SecondaryAttributes";
                case Class_FieldIndex.Flags:
                    return "Flags";
                case Class_FieldIndex.ClassServices:
                    return "ClassServices";
                case Class_FieldIndex.Training:
                    return "Training";
                case Class_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return typeof(String);
                case Class_FieldIndex.Description:
                    return typeof(String);
                case Class_FieldIndex.Icon:
                    return typeof(String);
                case Class_FieldIndex.PrimaryAttributes:
                    return typeof(IList<ActorValue>);
                case Class_FieldIndex.Specialization:
                    return typeof(Class.SpecializationFlag);
                case Class_FieldIndex.SecondaryAttributes:
                    return typeof(IList<ActorValue>);
                case Class_FieldIndex.Flags:
                    return typeof(ClassFlag);
                case Class_FieldIndex.ClassServices:
                    return typeof(ClassService);
                case Class_FieldIndex.Training:
                    return typeof(ClassTraining);
                case Class_FieldIndex.DATADataTypeState:
                    return typeof(Class.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClassXmlWriteTranslation);
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(ClassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClassCommon : OblivionMajorRecordCommon
    {
        public static readonly ClassCommon Instance = new ClassCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Class item,
            Class rhs,
            Class def,
            ErrorMaskBuilder errorMask,
            Class_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Description);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Description,
                        rhsHasBeenSet: rhs.Description_IsSet,
                        defItem: def?.Description ?? default(String),
                        defHasBeenSet: def?.Description_IsSet ?? false,
                        outRhsItem: out var rhsDescriptionItem,
                        outDefItem: out var defDescriptionItem))
                    {
                        item.Description = rhsDescriptionItem;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PrimaryAttributes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.PrimaryAttributes);
                try
                {
                    item.PrimaryAttributes.SetToWithDefault(
                        rhs.PrimaryAttributes,
                        def?.PrimaryAttributes);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Specialization ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                try
                {
                    item.Specialization = rhs.Specialization;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SecondaryAttributes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.SecondaryAttributes);
                try
                {
                    item.SecondaryAttributes.SetToWithDefault(
                        rhs.SecondaryAttributes,
                        def?.SecondaryAttributes);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ClassServices ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                try
                {
                    item.ClassServices = rhs.ClassServices;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Training.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Training);
                try
                {
                    switch (copyMask?.Training?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Training = Utility.GetGetterInterfaceReference<ClassTraining>(rhs.Training);
                            break;
                        case CopyOption.CopyIn:
                            ClassTrainingCommon.CopyFieldsFrom(
                                item: item.Training,
                                rhs: rhs.Training,
                                def: def?.Training,
                                errorMask: errorMask,
                                copyMask: copyMask?.Training.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Training == null)
                            {
                                item.Training = null;
                            }
                            else
                            {
                                item.Training = ClassTraining.Copy(
                                    rhs.Training,
                                    copyMask?.Training?.Specific,
                                    def?.Training);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Training?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IClassInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Description_Unset();
            item.Icon_Unset();
            item.PrimaryAttributes.Clear();
            item.Specialization = default(Class.SpecializationFlag);
            item.SecondaryAttributes.Clear();
            item.Flags = default(ClassFlag);
            item.ClassServices = default(ClassService);
            item.Training = default(ClassTraining);
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }

        public Class_Mask<bool> GetEqualsMask(
            IClassInternalGetter item,
            IClassInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Class_Mask<bool>();
            ((ClassCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IClassInternalGetter item,
            IClassInternalGetter rhs,
            Class_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.PrimaryAttributes = item.PrimaryAttributes.CollectionEqualsHelper(
                rhs.PrimaryAttributes,
                (l, r) => l == r,
                include);
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.SecondaryAttributes = item.SecondaryAttributes.CollectionEqualsHelper(
                rhs.SecondaryAttributes,
                (l, r) => l == r,
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ClassServices = item.ClassServices == rhs.ClassServices;
            ret.Training = MaskItemExt.Factory(item.Training.GetEqualsMask(rhs.Training, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IClassInternalGetter item,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IClassInternalGetter item,
            FileGeneration fg,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Class =>");
            }
            else
            {
                fg.AppendLine($"{name} (Class) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IClassInternalGetter item,
            FileGeneration fg,
            Class_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.PrimaryAttributes?.Overall ?? true)
            {
                fg.AppendLine("PrimaryAttributes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PrimaryAttributes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Specialization ?? true)
            {
                fg.AppendLine($"Specialization => {item.Specialization}");
            }
            if (printMask?.SecondaryAttributes?.Overall ?? true)
            {
                fg.AppendLine("SecondaryAttributes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SecondaryAttributes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.ClassServices ?? true)
            {
                fg.AppendLine($"ClassServices => {item.ClassServices}");
            }
            if (printMask?.Training?.Overall ?? true)
            {
                item.Training?.ToString(fg, "Training");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IClassInternalGetter item,
            Class_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IClassInternalGetter item,
            Class_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Description = item.Description_IsSet;
            mask.Icon = item.Icon_IsSet;
            mask.PrimaryAttributes = new MaskItem<bool, IEnumerable<(int, bool)>>(true, null);
            mask.Specialization = true;
            mask.SecondaryAttributes = new MaskItem<bool, IEnumerable<(int, bool)>>(true, null);
            mask.Flags = true;
            mask.ClassServices = true;
            mask.Training = new MaskItem<bool, ClassTraining_Mask<bool>>(true, item.Training.GetHasBeenSetMask());
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Class_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Class_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IClassInternalGetter lhs,
            IClassInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Description_IsSet != rhs.Description_IsSet) return false;
            if (lhs.Description_IsSet)
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (!lhs.PrimaryAttributes.SequenceEqual(rhs.PrimaryAttributes)) return false;
            if (lhs.Specialization != rhs.Specialization) return false;
            if (!lhs.SecondaryAttributes.SequenceEqual(rhs.SecondaryAttributes)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.ClassServices != rhs.ClassServices) return false;
            if (!object.Equals(lhs.Training, rhs.Training)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IClassInternalGetter)lhs,
                rhs: rhs as IClassInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IClassInternalGetter)lhs,
                rhs: rhs as IClassInternalGetter);
        }

        public virtual int GetHashCode(IClassInternalGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Description_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Description).CombineHashCode(ret);
            }
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.PrimaryAttributes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Specialization).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SecondaryAttributes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ClassServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Training).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IClassInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IClassInternalGetter)item);
        }

        #endregion


        #region Mutagen
        partial void PostDuplicate(Class obj, Class rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Class(getNextFormKey());
            ret.CopyFieldsFrom((Class)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Class)item, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

    }
    #endregion

}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ClassXmlWriteTranslation Instance = new ClassXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClassInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Class_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Class_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Class_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.PrimaryAttributes) ?? true))
                {
                    ListXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.PrimaryAttributes),
                        item: item.PrimaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.PrimaryAttributes),
                        transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                        {
                            EnumXmlTranslation<ActorValue>.Instance.Write(
                                node: subNode,
                                name: null,
                                item: subItem,
                                errorMask: listSubMask);
                        });
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Specialization) ?? true))
                {
                    EnumXmlTranslation<Class.SpecializationFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Specialization),
                        item: item.Specialization,
                        fieldIndex: (int)Class_FieldIndex.Specialization,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.SecondaryAttributes) ?? true))
                {
                    ListXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.SecondaryAttributes),
                        item: item.SecondaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.SecondaryAttributes),
                        transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                        {
                            EnumXmlTranslation<ActorValue>.Instance.Write(
                                node: subNode,
                                name: null,
                                item: subItem,
                                errorMask: listSubMask);
                        });
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<ClassFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Class_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.ClassServices) ?? true))
                {
                    EnumXmlTranslation<ClassService>.Instance.Write(
                        node: node,
                        name: nameof(item.ClassServices),
                        item: item.ClassServices,
                        fieldIndex: (int)Class_FieldIndex.ClassServices,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(Class.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Training) ?? true))
                    {
                        var loquiItem = item.Training;
                        ((ClassTrainingXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: node,
                            name: nameof(item.Training),
                            fieldIndex: (int)Class_FieldIndex.Training,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.Training));
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Class.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Class_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IClassInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Class");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Class");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClassInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClassInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClassInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ClassXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static ClassXmlCreateTranslation Instance = new ClassXmlCreateTranslation();

        public static void FillPublicXml(
            IClassInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrimaryAttributes":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.PrimaryAttributes);
                        if (ListXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            enumer: out var PrimaryAttributesItem,
                            transl: EnumXmlTranslation<ActorValue>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PrimaryAttributes.SetTo(PrimaryAttributesItem);
                        }
                        else
                        {
                            item.PrimaryAttributes.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Class.DATADataType.Has;
                    break;
                case "Specialization":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                        if (EnumXmlTranslation<Class.SpecializationFlag>.Instance.Parse(
                            node: node,
                            item: out Class.SpecializationFlag SpecializationParse,
                            errorMask: errorMask))
                        {
                            item.Specialization = SpecializationParse;
                        }
                        else
                        {
                            item.Specialization = default(Class.SpecializationFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondaryAttributes":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.SecondaryAttributes);
                        if (ListXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            enumer: out var SecondaryAttributesItem,
                            transl: EnumXmlTranslation<ActorValue>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SecondaryAttributes.SetTo(SecondaryAttributesItem);
                        }
                        else
                        {
                            item.SecondaryAttributes.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                        if (EnumXmlTranslation<ClassFlag>.Instance.Parse(
                            node: node,
                            item: out ClassFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(ClassFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ClassServices":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                        if (EnumXmlTranslation<ClassService>.Instance.Parse(
                            node: node,
                            item: out ClassService ClassServicesParse,
                            errorMask: errorMask))
                        {
                            item.ClassServices = ClassServicesParse;
                        }
                        else
                        {
                            item.ClassServices = default(ClassService);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Training":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Training);
                        if (LoquiXmlTranslation<ClassTraining>.Instance.Parse(
                            node: node,
                            item: out ClassTraining TrainingParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.Training)))
                        {
                            item.Training = TrainingParse;
                        }
                        else
                        {
                            item.Training = default(ClassTraining);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Class.DATADataType.Break0;
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<Class.DATADataType>.Instance.Parse(
                            node: node,
                            item: out Class.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(Class.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ClassXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClassInternalGetter item,
            XElement node,
            out Class_ErrorMask errorMask,
            bool doMasks = true,
            Class_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClassXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClassInternalGetter item,
            string path,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassInternalGetter item,
            Stream stream,
            out Class_ErrorMask errorMask,
            Class_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Class_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Class_Mask<T>>
    {
        #region Ctors
        public Class_Mask()
        {
        }

        public Class_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Description = initialValue;
            this.Icon = initialValue;
            this.PrimaryAttributes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Specialization = initialValue;
            this.SecondaryAttributes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Flags = initialValue;
            this.ClassServices = initialValue;
            this.Training = new MaskItem<T, ClassTraining_Mask<T>>(initialValue, new ClassTraining_Mask<T>(initialValue));
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public T Description;
        public T Icon;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> PrimaryAttributes;
        public T Specialization;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> SecondaryAttributes;
        public T Flags;
        public T ClassServices;
        public MaskItem<T, ClassTraining_Mask<T>> Training { get; set; }
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Class_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Class_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.PrimaryAttributes, rhs.PrimaryAttributes)) return false;
            if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
            if (!object.Equals(this.SecondaryAttributes, rhs.SecondaryAttributes)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.ClassServices, rhs.ClassServices)) return false;
            if (!object.Equals(this.Training, rhs.Training)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.PrimaryAttributes?.GetHashCode());
            ret = ret.CombineHashCode(this.Specialization?.GetHashCode());
            ret = ret.CombineHashCode(this.SecondaryAttributes?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.ClassServices?.GetHashCode());
            ret = ret.CombineHashCode(this.Training?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Icon)) return false;
            if (this.PrimaryAttributes != null)
            {
                if (!eval(this.PrimaryAttributes.Overall)) return false;
                if (this.PrimaryAttributes.Specific != null)
                {
                    foreach (var item in this.PrimaryAttributes.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.Specialization)) return false;
            if (this.SecondaryAttributes != null)
            {
                if (!eval(this.SecondaryAttributes.Overall)) return false;
                if (this.SecondaryAttributes.Specific != null)
                {
                    foreach (var item in this.SecondaryAttributes.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.ClassServices)) return false;
            if (Training != null)
            {
                if (!eval(this.Training.Overall)) return false;
                if (this.Training.Specific != null && !this.Training.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Class_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Class_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Class_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Description = eval(this.Description);
            obj.Icon = eval(this.Icon);
            if (PrimaryAttributes != null)
            {
                obj.PrimaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.PrimaryAttributes.Overall = eval(this.PrimaryAttributes.Overall);
                if (PrimaryAttributes.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.PrimaryAttributes.Specific = l;
                    foreach (var item in PrimaryAttributes.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.Specialization = eval(this.Specialization);
            if (SecondaryAttributes != null)
            {
                obj.SecondaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.SecondaryAttributes.Overall = eval(this.SecondaryAttributes.Overall);
                if (SecondaryAttributes.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.SecondaryAttributes.Specific = l;
                    foreach (var item in SecondaryAttributes.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.Flags = eval(this.Flags);
            obj.ClassServices = eval(this.ClassServices);
            if (this.Training != null)
            {
                obj.Training = new MaskItem<R, ClassTraining_Mask<R>>();
                obj.Training.Overall = eval(this.Training.Overall);
                if (this.Training.Specific != null)
                {
                    obj.Training.Specific = this.Training.Specific.Translate(eval);
                }
            }
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.PrimaryAttributes.Specific = null;
            this.SecondaryAttributes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Class_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Class_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Class_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.PrimaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("PrimaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (PrimaryAttributes.Overall != null)
                        {
                            fg.AppendLine(PrimaryAttributes.Overall.ToString());
                        }
                        if (PrimaryAttributes.Specific != null)
                        {
                            foreach (var subItem in PrimaryAttributes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {Specialization}");
                }
                if (printMask?.SecondaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("SecondaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SecondaryAttributes.Overall != null)
                        {
                            fg.AppendLine(SecondaryAttributes.Overall.ToString());
                        }
                        if (SecondaryAttributes.Specific != null)
                        {
                            foreach (var subItem in SecondaryAttributes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.ClassServices ?? true)
                {
                    fg.AppendLine($"ClassServices => {ClassServices}");
                }
                if (printMask?.Training?.Overall ?? true)
                {
                    Training?.ToString(fg);
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Class_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Class_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Description;
        public Exception Icon;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> PrimaryAttributes;
        public Exception Specialization;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> SecondaryAttributes;
        public Exception Flags;
        public Exception ClassServices;
        public MaskItem<Exception, ClassTraining_ErrorMask> Training;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return Name;
                case Class_FieldIndex.Description:
                    return Description;
                case Class_FieldIndex.Icon:
                    return Icon;
                case Class_FieldIndex.PrimaryAttributes:
                    return PrimaryAttributes;
                case Class_FieldIndex.Specialization:
                    return Specialization;
                case Class_FieldIndex.SecondaryAttributes:
                    return SecondaryAttributes;
                case Class_FieldIndex.Flags:
                    return Flags;
                case Class_FieldIndex.ClassServices:
                    return ClassServices;
                case Class_FieldIndex.Training:
                    return Training;
                case Class_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Class_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this.PrimaryAttributes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Class_FieldIndex.Specialization:
                    this.Specialization = ex;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this.SecondaryAttributes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Class_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Class_FieldIndex.ClassServices:
                    this.ClassServices = ex;
                    break;
                case Class_FieldIndex.Training:
                    this.Training = new MaskItem<Exception, ClassTraining_ErrorMask>(ex, null);
                    break;
                case Class_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Class_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this.PrimaryAttributes = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Class_FieldIndex.Specialization:
                    this.Specialization = (Exception)obj;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this.SecondaryAttributes = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Class_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Class_FieldIndex.ClassServices:
                    this.ClassServices = (Exception)obj;
                    break;
                case Class_FieldIndex.Training:
                    this.Training = (MaskItem<Exception, ClassTraining_ErrorMask>)obj;
                    break;
                case Class_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Description != null) return true;
            if (Icon != null) return true;
            if (PrimaryAttributes != null) return true;
            if (Specialization != null) return true;
            if (SecondaryAttributes != null) return true;
            if (Flags != null) return true;
            if (ClassServices != null) return true;
            if (Training != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Class_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine("PrimaryAttributes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (PrimaryAttributes.Overall != null)
                {
                    fg.AppendLine(PrimaryAttributes.Overall.ToString());
                }
                if (PrimaryAttributes.Specific != null)
                {
                    foreach (var subItem in PrimaryAttributes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Specialization => {Specialization}");
            fg.AppendLine("SecondaryAttributes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SecondaryAttributes.Overall != null)
                {
                    fg.AppendLine(SecondaryAttributes.Overall.ToString());
                }
                if (SecondaryAttributes.Specific != null)
                {
                    foreach (var subItem in SecondaryAttributes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"ClassServices => {ClassServices}");
            Training?.ToString(fg);
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Class_ErrorMask Combine(Class_ErrorMask rhs)
        {
            var ret = new Class_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.PrimaryAttributes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.PrimaryAttributes.Overall.Combine(rhs.PrimaryAttributes.Overall), new List<(int Index, Exception Value)>(this.PrimaryAttributes.Specific.And(rhs.PrimaryAttributes.Specific)));
            ret.Specialization = this.Specialization.Combine(rhs.Specialization);
            ret.SecondaryAttributes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.SecondaryAttributes.Overall.Combine(rhs.SecondaryAttributes.Overall), new List<(int Index, Exception Value)>(this.SecondaryAttributes.Specific.And(rhs.SecondaryAttributes.Specific)));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.ClassServices = this.ClassServices.Combine(rhs.ClassServices);
            ret.Training = new MaskItem<Exception, ClassTraining_ErrorMask>(this.Training.Overall.Combine(rhs.Training.Overall), ((IErrorMask<ClassTraining_ErrorMask>)this.Training.Specific).Combine(rhs.Training.Specific));
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Class_ErrorMask Combine(Class_ErrorMask lhs, Class_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Class_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Class_ErrorMask();
        }
        #endregion

    }
    public class Class_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Class_CopyMask()
        {
        }

        public Class_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Description = defaultOn;
            this.Icon = defaultOn;
            this.PrimaryAttributes = deepCopyOption;
            this.Specialization = defaultOn;
            this.SecondaryAttributes = deepCopyOption;
            this.Flags = defaultOn;
            this.ClassServices = defaultOn;
            this.Training = new MaskItem<CopyOption, ClassTraining_CopyMask>(deepCopyOption, default);
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool Name;
        public bool Description;
        public bool Icon;
        public CopyOption PrimaryAttributes;
        public bool Specialization;
        public CopyOption SecondaryAttributes;
        public bool Flags;
        public bool ClassServices;
        public MaskItem<CopyOption, ClassTraining_CopyMask> Training;
        public bool DATADataTypeState;
        #endregion

    }

    public class Class_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Description;
        public bool Icon;
        public bool PrimaryAttributes;
        public bool Specialization;
        public bool SecondaryAttributes;
        public bool Flags;
        public bool ClassServices;
        public MaskItem<bool, ClassTraining_TranslationMask> Training;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Class_TranslationMask()
            : base()
        {
        }

        public Class_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Description = defaultOn;
            this.Icon = defaultOn;
            this.PrimaryAttributes = defaultOn;
            this.Specialization = defaultOn;
            this.SecondaryAttributes = defaultOn;
            this.Flags = defaultOn;
            this.ClassServices = defaultOn;
            this.Training = new MaskItem<bool, ClassTraining_TranslationMask>(defaultOn, null);
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Description, null));
            ret.Add((Icon, null));
            ret.Add((PrimaryAttributes, null));
            ret.Add((Specialization, null));
            ret.Add((SecondaryAttributes, null));
            ret.Add((Flags, null));
            ret.Add((ClassServices, null));
            ret.Add((Training?.Overall ?? true, Training?.Specific?.GetCrystal()));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClassBinaryWriteTranslation Instance = new ClassBinaryWriteTranslation();

        public static void Write_Embedded(
            IClassInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IClassInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Class_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(Class_Registration.DESC_HEADER),
                    nullable: false);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Class_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Class_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                        writer: writer,
                        items: item.PrimaryAttributes,
                        transl: (MutagenWriter subWriter, ActorValue subItem) =>
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                                subWriter,
                                subItem,
                                length: 4);
                        });
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Write(
                        writer,
                        item.Specialization,
                        length: 4);
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                        writer: writer,
                        items: item.SecondaryAttributes,
                        transl: (MutagenWriter subWriter, ActorValue subItem) =>
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                                subWriter,
                                subItem,
                                length: 4);
                        });
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassService>.Instance.Write(
                        writer,
                        item.ClassServices,
                        length: 4);
                    if (!item.DATADataTypeState.HasFlag(Class.DATADataType.Break0))
                    {
                        {
                            var loquiItem = item.Training;
                            ((ClassTrainingBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: writer,
                                errorMask: errorMask,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    }
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IClassInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Class_Registration.CLAS_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClassInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClassInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClassInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ClassBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static ClassBinaryCreateTranslation Instance = new ClassBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClassBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IClassInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClassBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IClassInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;
        protected override object CommonInstance => ClassCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => ClassXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public bool Description_IsSet => _DescriptionLocation.HasValue;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DescriptionLocation.Value, _package.Meta)) : default;
        #endregion
        #region Icon
        private int? _IconLocation;
        public bool Icon_IsSet => _IconLocation.HasValue;
        public String Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default;
        #endregion
        private int? _DATALocation;
        public Class.DATADataType DATADataTypeState { get; private set; }
        public IReadOnlyList<ActorValue> PrimaryAttributes => BinaryWrapperNumberedList.FactoryForEnum<ActorValue>(_DATALocation.HasValue ? _data.Slice(_DATALocation.Value + 0) : default, amount: 2, enumLength: 4);
        #region Specialization
        private int _SpecializationLocation => _DATALocation.Value + 0x8;
        private bool _Specialization_IsSet => _DATALocation.HasValue;
        public Class.SpecializationFlag Specialization => _Specialization_IsSet ? (Class.SpecializationFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_SpecializationLocation, 4)) : default;
        #endregion
        public IReadOnlyList<ActorValue> SecondaryAttributes => BinaryWrapperNumberedList.FactoryForEnum<ActorValue>(_DATALocation.HasValue ? _data.Slice(_DATALocation.Value + 12) : default, amount: 7, enumLength: 4);
        #region Flags
        private int _FlagsLocation => _DATALocation.Value + 0x28;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public ClassFlag Flags => _Flags_IsSet ? (ClassFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region ClassServices
        private int _ClassServicesLocation => _DATALocation.Value + 0x2C;
        private bool _ClassServices_IsSet => _DATALocation.HasValue;
        public ClassService ClassServices => _ClassServices_IsSet ? (ClassService)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ClassServicesLocation, 4)) : default;
        #endregion
        #region Training
        private int _TrainingLocation => _DATALocation.Value + 0x30;
        private bool _Training_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Class.DATADataType.Break0);
        private IClassTrainingGetter _Training => _Training_IsSet ? ClassTrainingBinaryWrapper.ClassTrainingFactory(new BinaryMemoryReadStream(_data.Slice(_TrainingLocation)), _package) : default;
        public IClassTrainingGetter Training => _Training ?? new ClassTraining();
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected ClassBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ClassBinaryWrapper ClassFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ClassBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Class.DATADataType.Has;
                    var subLen = _package.Meta.SubRecord(_data.Slice((stream.Position - offset))).RecordLength;
                    if (subLen <= 0x30)
                    {
                        this.DATADataTypeState |= Class.DATADataType.Break0;
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Training);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

