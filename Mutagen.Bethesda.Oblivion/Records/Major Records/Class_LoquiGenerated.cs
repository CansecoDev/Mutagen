/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Class : 
        MajorRecord,
        IClass,
        ILoquiObject<Class>,
        ILoquiObjectSetter,
        INamed,
        IPropertySupporter<String>,
        IPropertySupporter<Class.SpecializationFlag>,
        IPropertySupporter<ClassFlag>,
        IPropertySupporter<ClassService>,
        IPropertySupporter<ClassTraining>,
        IEquatable<Class>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;

        #region Ctor
        public Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        protected String _Name;
        protected PropertyForwarder<Class, String> _NameForwarder;
        public INotifyingSetItem<String> Name_Property => _NameForwarder ?? (_NameForwarder = new PropertyForwarder<Class, String>(this, (int)Class_FieldIndex.Name));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => this.SetName(value);
        }
        protected void SetName(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Class_FieldIndex.Name];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Name == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Class_FieldIndex.Name] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Name;
                _Name = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Class_FieldIndex.Name,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Name = item;
            }
        }
        protected void UnsetName()
        {
            _hasBeenSetTracker[(int)Class_FieldIndex.Name] = false;
            Name = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IClass.Name_Property => this.Name_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IClassGetter.Name_Property => this.Name_Property;
        #endregion
        #region Description
        protected String _Description;
        protected PropertyForwarder<Class, String> _DescriptionForwarder;
        public INotifyingSetItem<String> Description_Property => _DescriptionForwarder ?? (_DescriptionForwarder = new PropertyForwarder<Class, String>(this, (int)Class_FieldIndex.Description));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => this.SetDescription(value);
        }
        protected void SetDescription(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Class_FieldIndex.Description];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Description == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Class_FieldIndex.Description] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Description;
                _Description = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Class_FieldIndex.Description,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Description = item;
            }
        }
        protected void UnsetDescription()
        {
            _hasBeenSetTracker[(int)Class_FieldIndex.Description] = false;
            Description = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IClass.Description_Property => this.Description_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IClassGetter.Description_Property => this.Description_Property;
        #endregion
        #region Icon
        protected String _Icon;
        protected PropertyForwarder<Class, String> _IconForwarder;
        public INotifyingSetItem<String> Icon_Property => _IconForwarder ?? (_IconForwarder = new PropertyForwarder<Class, String>(this, (int)Class_FieldIndex.Icon));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => this.SetIcon(value);
        }
        protected void SetIcon(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Class_FieldIndex.Icon];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Icon == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Class_FieldIndex.Icon] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Icon;
                _Icon = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Class_FieldIndex.Icon,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Icon = item;
            }
        }
        protected void UnsetIcon()
        {
            _hasBeenSetTracker[(int)Class_FieldIndex.Icon] = false;
            Icon = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IClass.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IClassGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region PrimaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<ActorValue> _PrimaryAttributes = new NotifyingListBounded<ActorValue>(max: 2);
        public INotifyingList<ActorValue> PrimaryAttributes => _PrimaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ActorValue> PrimaryAttributesEnumerable
        {
            get => _PrimaryAttributes;
            set => _PrimaryAttributes.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<ActorValue> IClass.PrimaryAttributes => _PrimaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<ActorValue> IClassGetter.PrimaryAttributes => _PrimaryAttributes;
        #endregion

        #endregion
        #region Specialization
        protected Class.SpecializationFlag _Specialization;
        protected PropertyForwarder<Class, Class.SpecializationFlag> _SpecializationForwarder;
        public INotifyingSetItem<Class.SpecializationFlag> Specialization_Property => _SpecializationForwarder ?? (_SpecializationForwarder = new PropertyForwarder<Class, Class.SpecializationFlag>(this, (int)Class_FieldIndex.Specialization));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Class.SpecializationFlag Specialization
        {
            get => this._Specialization;
            set => this.SetSpecialization(value);
        }
        protected void SetSpecialization(
            Class.SpecializationFlag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Class_FieldIndex.Specialization];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Specialization == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Class_FieldIndex.Specialization] = hasBeenSet;
            }
            if (_ClassSpecializationFlag_subscriptions != null)
            {
                var tmp = Specialization;
                _Specialization = item;
                _ClassSpecializationFlag_subscriptions.FireSubscriptions(
                    index: (int)Class_FieldIndex.Specialization,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Specialization = item;
            }
        }
        protected void UnsetSpecialization()
        {
            _hasBeenSetTracker[(int)Class_FieldIndex.Specialization] = false;
            Specialization = default(Class.SpecializationFlag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Class.SpecializationFlag> IClass.Specialization_Property => this.Specialization_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Class.SpecializationFlag> IClassGetter.Specialization_Property => this.Specialization_Property;
        #endregion
        #region SecondaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<ActorValue> _SecondaryAttributes = new NotifyingListBounded<ActorValue>(max: 7);
        public INotifyingList<ActorValue> SecondaryAttributes => _SecondaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ActorValue> SecondaryAttributesEnumerable
        {
            get => _SecondaryAttributes;
            set => _SecondaryAttributes.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<ActorValue> IClass.SecondaryAttributes => _SecondaryAttributes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<ActorValue> IClassGetter.SecondaryAttributes => _SecondaryAttributes;
        #endregion

        #endregion
        #region Flags
        protected ClassFlag _Flags;
        protected PropertyForwarder<Class, ClassFlag> _FlagsForwarder;
        public INotifyingSetItem<ClassFlag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<Class, ClassFlag>(this, (int)Class_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ClassFlag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            ClassFlag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Class_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Class_FieldIndex.Flags] = hasBeenSet;
            }
            if (_ClassFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _ClassFlag_subscriptions.FireSubscriptions(
                    index: (int)Class_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)Class_FieldIndex.Flags] = false;
            Flags = default(ClassFlag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<ClassFlag> IClass.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<ClassFlag> IClassGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region ClassServices
        protected ClassService _ClassServices;
        protected PropertyForwarder<Class, ClassService> _ClassServicesForwarder;
        public INotifyingSetItem<ClassService> ClassServices_Property => _ClassServicesForwarder ?? (_ClassServicesForwarder = new PropertyForwarder<Class, ClassService>(this, (int)Class_FieldIndex.ClassServices));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ClassService ClassServices
        {
            get => this._ClassServices;
            set => this.SetClassServices(value);
        }
        protected void SetClassServices(
            ClassService item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Class_FieldIndex.ClassServices];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ClassServices == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Class_FieldIndex.ClassServices] = hasBeenSet;
            }
            if (_ClassService_subscriptions != null)
            {
                var tmp = ClassServices;
                _ClassServices = item;
                _ClassService_subscriptions.FireSubscriptions(
                    index: (int)Class_FieldIndex.ClassServices,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ClassServices = item;
            }
        }
        protected void UnsetClassServices()
        {
            _hasBeenSetTracker[(int)Class_FieldIndex.ClassServices] = false;
            ClassServices = default(ClassService);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<ClassService> IClass.ClassServices_Property => this.ClassServices_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<ClassService> IClassGetter.ClassServices_Property => this.ClassServices_Property;
        #endregion
        #region Training
        protected ClassTraining _Training;
        protected PropertyForwarder<Class, ClassTraining> _TrainingForwarder;
        public INotifyingSetItem<ClassTraining> Training_Property => _TrainingForwarder ?? (_TrainingForwarder = new PropertyForwarder<Class, ClassTraining>(this, (int)Class_FieldIndex.Training));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ClassTraining Training
        {
            get => this._Training;
            set => this.SetTraining(value);
        }
        protected void SetTraining(
            ClassTraining item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Class_FieldIndex.Training];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Training, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Class_FieldIndex.Training] = hasBeenSet;
            }
            if (_ClassTraining_subscriptions != null)
            {
                var tmp = Training;
                if (item == null)
                {
                    item = new ClassTraining();
                }
                _Training = item;
                _ClassTraining_subscriptions.FireSubscriptions(
                    index: (int)Class_FieldIndex.Training,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Training = item;
            }
        }
        protected void UnsetTraining()
        {
            _hasBeenSetTracker[(int)Class_FieldIndex.Training] = false;
            Training = default(ClassTraining);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<ClassTraining> IClass.Training_Property => this.Training_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<ClassTraining> IClassGetter.Training_Property => this.Training_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ClassCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ClassCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ClassCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ClassCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Class>.GetEqualsMask(Class rhs) => ClassCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IClassGetter>.GetEqualsMask(IClassGetter rhs) => ClassCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ClassCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            return ClassCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClassCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Class_Mask<bool> GetHasBeenSetMask()
        {
            return ClassCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Class rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Class rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(this.Description, rhs.Description)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (!this.PrimaryAttributes.SequenceEqual(rhs.PrimaryAttributes)) return false;
            if (this.Specialization != rhs.Specialization) return false;
            if (!this.SecondaryAttributes.SequenceEqual(rhs.SecondaryAttributes)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.ClassServices != rhs.ClassServices) return false;
            if (!object.Equals(this.Training, rhs.Training)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(PrimaryAttributes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Specialization).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SecondaryAttributes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ClassServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Training).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Class Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Class Create_XML(
            XElement root,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Class Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Class();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Class Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Class Create_XML(
            string path,
            out Class_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Class Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Class Create_XML(
            Stream stream,
            out Class_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Class>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Class>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Class_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Class_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Class_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Class_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            ClassCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Class item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.UnsetDescription();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrimaryAttributes":
                    ListXmlTranslation<ActorValue>.Instance.ParseInto(
                        root: root,
                        item: item.PrimaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                        errorMask: errorMask,
                        transl: EnumXmlTranslation<ActorValue>.Instance.Parse);
                    break;
                case "Specialization":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                        if (EnumXmlTranslation<Class.SpecializationFlag>.Instance.Parse(
                            root: root,
                            item: out Class.SpecializationFlag SpecializationParse,
                            errorMask: errorMask))
                        {
                            item.Specialization = SpecializationParse;
                        }
                        else
                        {
                            item.UnsetSpecialization();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondaryAttributes":
                    ListXmlTranslation<ActorValue>.Instance.ParseInto(
                        root: root,
                        item: item.SecondaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                        errorMask: errorMask,
                        transl: EnumXmlTranslation<ActorValue>.Instance.Parse);
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                        if (EnumXmlTranslation<ClassFlag>.Instance.Parse(
                            root: root,
                            item: out ClassFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ClassServices":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                        if (EnumXmlTranslation<ClassService>.Instance.Parse(
                            root: root,
                            item: out ClassService ClassServicesParse,
                            errorMask: errorMask))
                        {
                            item.ClassServices = ClassServicesParse;
                        }
                        else
                        {
                            item.UnsetClassServices();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Training":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Training);
                        if (LoquiXmlTranslation<ClassTraining>.Instance.Parse(
                            root: root,
                            item: out ClassTraining TrainingParse,
                            errorMask: errorMask))
                        {
                            item.Training = TrainingParse;
                        }
                        else
                        {
                            item.UnsetTraining();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                    return _hasBeenSetTracker[index];
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Name:
                    return Name;
                case Class_FieldIndex.Description:
                    return Description;
                case Class_FieldIndex.Icon:
                    return Icon;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Name:
                    SetName(item, hasBeenSet, cmds);
                    break;
                case Class_FieldIndex.Description:
                    SetDescription(item, hasBeenSet, cmds);
                    break;
                case Class_FieldIndex.Icon:
                    SetIcon(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Name:
                    SetName(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                case Class_FieldIndex.Description:
                    SetDescription(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                case Class_FieldIndex.Icon:
                    SetIcon(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter Class.SpecializationFlag
        protected ObjectCentralizationSubscriptions<Class.SpecializationFlag> _ClassSpecializationFlag_subscriptions;
        Class.SpecializationFlag IPropertySupporter<Class.SpecializationFlag>.Get(int index)
        {
            return GetClassSpecializationFlag(index: index);
        }

        protected Class.SpecializationFlag GetClassSpecializationFlag(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Specialization:
                    return Specialization;
                default:
                    throw new ArgumentException($"Unknown index for field type Class.SpecializationFlag: {index}");
            }
        }

        void IPropertySupporter<Class.SpecializationFlag>.Set(
            int index,
            Class.SpecializationFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetClassSpecializationFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetClassSpecializationFlag(
            int index,
            Class.SpecializationFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Specialization:
                    SetSpecialization(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Class.SpecializationFlag: {index}");
            }
        }

        bool IPropertySupporter<Class.SpecializationFlag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Class.SpecializationFlag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Class.SpecializationFlag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetClassSpecializationFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetClassSpecializationFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Specialization:
                    SetSpecialization(
                        item: default(Class.SpecializationFlag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Class.SpecializationFlag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Class.SpecializationFlag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Class.SpecializationFlag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ClassSpecializationFlag_subscriptions == null)
            {
                _ClassSpecializationFlag_subscriptions = new ObjectCentralizationSubscriptions<Class.SpecializationFlag>();
            }
            _ClassSpecializationFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Class.SpecializationFlag>.Unsubscribe(
            int index,
            object owner)
        {
            _ClassSpecializationFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Class.SpecializationFlag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Class.SpecializationFlag IPropertySupporter<Class.SpecializationFlag>.DefaultValue(int index)
        {
            return DefaultValueClassSpecializationFlag(index: index);
        }

        protected Class.SpecializationFlag DefaultValueClassSpecializationFlag(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Specialization:
                    return default(Class.SpecializationFlag);
                default:
                    throw new ArgumentException($"Unknown index for field type Class.SpecializationFlag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter ClassFlag
        protected ObjectCentralizationSubscriptions<ClassFlag> _ClassFlag_subscriptions;
        ClassFlag IPropertySupporter<ClassFlag>.Get(int index)
        {
            return GetClassFlag(index: index);
        }

        protected ClassFlag GetClassFlag(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassFlag: {index}");
            }
        }

        void IPropertySupporter<ClassFlag>.Set(
            int index,
            ClassFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetClassFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetClassFlag(
            int index,
            ClassFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassFlag: {index}");
            }
        }

        bool IPropertySupporter<ClassFlag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<ClassFlag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ClassFlag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetClassFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetClassFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Flags:
                    SetFlags(
                        item: default(ClassFlag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassFlag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ClassFlag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ClassFlag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ClassFlag_subscriptions == null)
            {
                _ClassFlag_subscriptions = new ObjectCentralizationSubscriptions<ClassFlag>();
            }
            _ClassFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ClassFlag>.Unsubscribe(
            int index,
            object owner)
        {
            _ClassFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ClassFlag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ClassFlag IPropertySupporter<ClassFlag>.DefaultValue(int index)
        {
            return DefaultValueClassFlag(index: index);
        }

        protected ClassFlag DefaultValueClassFlag(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Flags:
                    return default(ClassFlag);
                default:
                    throw new ArgumentException($"Unknown index for field type ClassFlag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter ClassService
        protected ObjectCentralizationSubscriptions<ClassService> _ClassService_subscriptions;
        ClassService IPropertySupporter<ClassService>.Get(int index)
        {
            return GetClassService(index: index);
        }

        protected ClassService GetClassService(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.ClassServices:
                    return ClassServices;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassService: {index}");
            }
        }

        void IPropertySupporter<ClassService>.Set(
            int index,
            ClassService item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetClassService(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetClassService(
            int index,
            ClassService item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.ClassServices:
                    SetClassServices(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassService: {index}");
            }
        }

        bool IPropertySupporter<ClassService>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<ClassService>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ClassService>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetClassService(
                index: index,
                cmds: cmds);
        }

        protected void UnsetClassService(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.ClassServices:
                    SetClassServices(
                        item: default(ClassService),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassService: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ClassService>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ClassService> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ClassService_subscriptions == null)
            {
                _ClassService_subscriptions = new ObjectCentralizationSubscriptions<ClassService>();
            }
            _ClassService_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ClassService>.Unsubscribe(
            int index,
            object owner)
        {
            _ClassService_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ClassService>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ClassService IPropertySupporter<ClassService>.DefaultValue(int index)
        {
            return DefaultValueClassService(index: index);
        }

        protected ClassService DefaultValueClassService(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.ClassServices:
                    return default(ClassService);
                default:
                    throw new ArgumentException($"Unknown index for field type ClassService: {index}");
            }
        }

        #endregion

        #region IPropertySupporter ClassTraining
        protected ObjectCentralizationSubscriptions<ClassTraining> _ClassTraining_subscriptions;
        ClassTraining IPropertySupporter<ClassTraining>.Get(int index)
        {
            return GetClassTraining(index: index);
        }

        protected ClassTraining GetClassTraining(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Training:
                    return Training;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassTraining: {index}");
            }
        }

        void IPropertySupporter<ClassTraining>.Set(
            int index,
            ClassTraining item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetClassTraining(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetClassTraining(
            int index,
            ClassTraining item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Training:
                    SetTraining(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassTraining: {index}");
            }
        }

        bool IPropertySupporter<ClassTraining>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<ClassTraining>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ClassTraining>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetClassTraining(
                index: index,
                cmds: cmds);
        }

        protected void UnsetClassTraining(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Training:
                    SetTraining(
                        item: default(ClassTraining),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ClassTraining: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ClassTraining>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ClassTraining> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ClassTraining_subscriptions == null)
            {
                _ClassTraining_subscriptions = new ObjectCentralizationSubscriptions<ClassTraining>();
            }
            _ClassTraining_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ClassTraining>.Unsubscribe(
            int index,
            object owner)
        {
            _ClassTraining_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ClassTraining>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ClassTraining IPropertySupporter<ClassTraining>.DefaultValue(int index)
        {
            return DefaultValueClassTraining(index: index);
        }

        protected ClassTraining DefaultValueClassTraining(int index)
        {
            switch ((Class_FieldIndex)index)
            {
                case Class_FieldIndex.Training:
                    return default(ClassTraining);
                default:
                    throw new ArgumentException($"Unknown index for field type ClassTraining: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Class_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Class Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Class Create_Binary(
            MutagenFrame frame,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Class Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Class>(
                record: new Class(),
                frame: frame,
                errorMask: errorMask,
                recType: Class_Registration.CLAS_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Class Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Class Create_Binary(
            string path,
            out Class_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Class Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Class Create_Binary(
            Stream stream,
            out Class_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Class_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ClassCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Class item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Class item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Name);
                case 0x43534544: // DESC
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Description);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.UnsetDescription();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Description);
                case 0x4E4F4349: // ICON
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Icon);
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.ParseRepeatedItem(
                            frame: frame,
                            amount: 2,
                            item: item.PrimaryAttributes,
                            fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, out ActorValue listSubItem, ErrorMaskBuilder listErrMask) =>
                            {
                                return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                                    frame: r.SpawnWithLength(4),
                                    item: out listSubItem,
                                    errorMask: listErrMask);
                            }
                            );
                        try
                        {
                            errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                            if (EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Class.SpecializationFlag SpecializationParse,
                                errorMask: errorMask))
                            {
                                item.Specialization = SpecializationParse;
                            }
                            else
                            {
                                item.UnsetSpecialization();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.ParseRepeatedItem(
                            frame: frame,
                            amount: 7,
                            item: item.SecondaryAttributes,
                            fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, out ActorValue listSubItem, ErrorMaskBuilder listErrMask) =>
                            {
                                return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                                    frame: r.SpawnWithLength(4),
                                    item: out listSubItem,
                                    errorMask: listErrMask);
                            }
                            );
                        try
                        {
                            errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                            if (EnumBinaryTranslation<ClassFlag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out ClassFlag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.UnsetFlags();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                            if (EnumBinaryTranslation<ClassService>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out ClassService ClassServicesParse,
                                errorMask: errorMask))
                            {
                                item.ClassServices = ClassServicesParse;
                            }
                            else
                            {
                                item.UnsetClassServices();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break0;
                            return TryGet<int?>.Succeed((int)Class_FieldIndex.ClassServices);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Class_FieldIndex.Training);
                            if (LoquiBinaryTranslation<ClassTraining>.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out ClassTraining TrainingParse,
                                errorMask: errorMask))
                            {
                                item.Training = TrainingParse;
                            }
                            else
                            {
                                item.UnsetTraining();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Training);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Class Copy(
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            return Class.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Class Copy(
            IClass item,
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            Class ret;
            if (item.GetType().Equals(typeof(Class)))
            {
                ret = new Class();
            }
            else
            {
                ret = (Class)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Class Copy_ToLoqui(
            IClassGetter item,
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            Class ret;
            if (item.GetType().Equals(typeof(Class)))
            {
                ret = new Class() as Class;
            }
            else
            {
                ret = (Class)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IClassGetter rhs,
            Class_CopyMask copyMask,
            IClassGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IClassGetter rhs,
            out Class_ErrorMask errorMask,
            Class_CopyMask copyMask = null,
            IClassGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ClassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IClassGetter rhs,
            ErrorMaskBuilder errorMask,
            Class_CopyMask copyMask = null,
            IClassGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ClassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.SetName(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Class_FieldIndex.Description:
                    this.SetDescription(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Class_FieldIndex.Icon:
                    this.SetIcon(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this._PrimaryAttributes.SetTo((IEnumerable<ActorValue>)obj, cmds);
                    break;
                case Class_FieldIndex.Specialization:
                    this.SetSpecialization(
                        (Class.SpecializationFlag)obj,
                        cmds: cmds);
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this._SecondaryAttributes.SetTo((IEnumerable<ActorValue>)obj, cmds);
                    break;
                case Class_FieldIndex.Flags:
                    this.SetFlags(
                        (ClassFlag)obj,
                        cmds: cmds);
                    break;
                case Class_FieldIndex.ClassServices:
                    this.SetClassServices(
                        (ClassService)obj,
                        cmds: cmds);
                    break;
                case Class_FieldIndex.Training:
                    this.SetTraining(
                        (ClassTraining)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ClassCommon.Clear(this, cmds);
        }


        public new static Class Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Class();
            foreach (var pair in fields)
            {
                CopyInInternal_Class(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Class(Class obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Class_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    obj.SetName(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Class_FieldIndex.Description:
                    obj.SetDescription(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Class_FieldIndex.Icon:
                    obj.SetIcon(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    obj._PrimaryAttributes.SetTo((IEnumerable<ActorValue>)pair.Value, null);
                    break;
                case Class_FieldIndex.Specialization:
                    obj.SetSpecialization(
                        (Class.SpecializationFlag)pair.Value,
                        cmds: null);
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    obj._SecondaryAttributes.SetTo((IEnumerable<ActorValue>)pair.Value, null);
                    break;
                case Class_FieldIndex.Flags:
                    obj.SetFlags(
                        (ClassFlag)pair.Value,
                        cmds: null);
                    break;
                case Class_FieldIndex.ClassServices:
                    obj.SetClassServices(
                        (ClassService)pair.Value,
                        cmds: null);
                    break;
                case Class_FieldIndex.Training:
                    obj.SetTraining(
                        (ClassTraining)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Class obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IClass : IClassGetter, IMajorRecord, ILoquiClass<IClass, IClassGetter>, ILoquiClass<Class, IClassGetter>
    {
        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

        new String Description { get; set; }
        new INotifyingSetItem<String> Description_Property { get; }

        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

        new INotifyingList<ActorValue> PrimaryAttributes { get; }
        new Class.SpecializationFlag Specialization { get; set; }
        new INotifyingItem<Class.SpecializationFlag> Specialization_Property { get; }

        new INotifyingList<ActorValue> SecondaryAttributes { get; }
        new ClassFlag Flags { get; set; }
        new INotifyingItem<ClassFlag> Flags_Property { get; }

        new ClassService ClassServices { get; set; }
        new INotifyingItem<ClassService> ClassServices_Property { get; }

        new ClassTraining Training { get; set; }
        new INotifyingItem<ClassTraining> Training_Property { get; }

    }

    public partial interface IClassGetter : IMajorRecordGetter
    {
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion
        #region Description
        String Description { get; }
        INotifyingSetItemGetter<String> Description_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion
        #region PrimaryAttributes
        INotifyingListGetter<ActorValue> PrimaryAttributes { get; }
        #endregion
        #region Specialization
        Class.SpecializationFlag Specialization { get; }
        INotifyingItemGetter<Class.SpecializationFlag> Specialization_Property { get; }

        #endregion
        #region SecondaryAttributes
        INotifyingListGetter<ActorValue> SecondaryAttributes { get; }
        #endregion
        #region Flags
        ClassFlag Flags { get; }
        INotifyingItemGetter<ClassFlag> Flags_Property { get; }

        #endregion
        #region ClassServices
        ClassService ClassServices { get; }
        INotifyingItemGetter<ClassService> ClassServices_Property { get; }

        #endregion
        #region Training
        ClassTraining Training { get; }
        INotifyingItemGetter<ClassTraining> Training_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Class_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Description = 6,
        Icon = 7,
        PrimaryAttributes = 8,
        Specialization = 9,
        SecondaryAttributes = 10,
        Flags = 11,
        ClassServices = 12,
        Training = 13,
    }
    #endregion

    #region Registration
    public class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 16,
            version: 0);

        public const string GUID = "3f2e301a-e8f4-42db-875c-3e760e4eff31";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Class_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class_ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type CommonType = typeof(ClassCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Class_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Class_FieldIndex.Description;
                case "ICON":
                    return (ushort)Class_FieldIndex.Icon;
                case "PRIMARYATTRIBUTES":
                    return (ushort)Class_FieldIndex.PrimaryAttributes;
                case "SPECIALIZATION":
                    return (ushort)Class_FieldIndex.Specialization;
                case "SECONDARYATTRIBUTES":
                    return (ushort)Class_FieldIndex.SecondaryAttributes;
                case "FLAGS":
                    return (ushort)Class_FieldIndex.Flags;
                case "CLASSSERVICES":
                    return (ushort)Class_FieldIndex.ClassServices;
                case "TRAINING":
                    return (ushort)Class_FieldIndex.Training;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.SecondaryAttributes:
                    return true;
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Training:
                    return true;
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return "Name";
                case Class_FieldIndex.Description:
                    return "Description";
                case Class_FieldIndex.Icon:
                    return "Icon";
                case Class_FieldIndex.PrimaryAttributes:
                    return "PrimaryAttributes";
                case Class_FieldIndex.Specialization:
                    return "Specialization";
                case Class_FieldIndex.SecondaryAttributes:
                    return "SecondaryAttributes";
                case Class_FieldIndex.Flags:
                    return "Flags";
                case Class_FieldIndex.ClassServices:
                    return "ClassServices";
                case Class_FieldIndex.Training:
                    return "Training";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return typeof(String);
                case Class_FieldIndex.Description:
                    return typeof(String);
                case Class_FieldIndex.Icon:
                    return typeof(String);
                case Class_FieldIndex.PrimaryAttributes:
                    return typeof(NotifyingList<ActorValue>);
                case Class_FieldIndex.Specialization:
                    return typeof(Class.SpecializationFlag);
                case Class_FieldIndex.SecondaryAttributes:
                    return typeof(NotifyingList<ActorValue>);
                case Class_FieldIndex.Flags:
                    return typeof(ClassFlag);
                case Class_FieldIndex.ClassServices:
                    return typeof(ClassService);
                case Class_FieldIndex.Training:
                    return typeof(ClassTraining);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ClassCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IClass item,
            IClassGetter rhs,
            IClassGetter def,
            ErrorMaskBuilder errorMask,
            Class_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Name);
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Description);
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs: rhs.Description_Property,
                        def: def?.Description_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PrimaryAttributes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.PrimaryAttributes);
                try
                {
                    item.PrimaryAttributes.SetToWithDefault(
                        rhs.PrimaryAttributes,
                        def?.PrimaryAttributes,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Specialization ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                try
                {
                    item.Specialization_Property.Set(
                        value: rhs.Specialization,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SecondaryAttributes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.SecondaryAttributes);
                try
                {
                    item.SecondaryAttributes.SetToWithDefault(
                        rhs.SecondaryAttributes,
                        def?.SecondaryAttributes,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ClassServices ?? true)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                try
                {
                    item.ClassServices_Property.Set(
                        value: rhs.ClassServices,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Training.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Training);
                try
                {
                    switch (copyMask?.Training?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Training = rhs.Training;
                            break;
                        case CopyOption.CopyIn:
                            ClassTrainingCommon.CopyFieldsFrom(
                                item: item.Training,
                                rhs: rhs.Training,
                                def: def?.Training,
                                errorMask: errorMask,
                                copyMask: copyMask?.Training.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Training == null)
                            {
                                item.Training = null;
                            }
                            else
                            {
                                item.Training = ClassTraining.Copy(
                                    rhs.Training,
                                    copyMask?.Training?.Specific,
                                    def?.Training);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Training?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IClass obj,
            NotifyingFireParameters cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Class_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                case Class_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                case Class_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IClass obj,
            NotifyingUnsetParameters cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                case Class_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case Class_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    obj.PrimaryAttributes.Unset(cmds);
                    break;
                case Class_FieldIndex.Specialization:
                    obj.Specialization = default(Class.SpecializationFlag);
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    obj.SecondaryAttributes.Unset(cmds);
                    break;
                case Class_FieldIndex.Flags:
                    obj.Flags = default(ClassFlag);
                    break;
                case Class_FieldIndex.ClassServices:
                    obj.ClassServices = default(ClassService);
                    break;
                case Class_FieldIndex.Training:
                    obj.Training = default(ClassTraining);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IClass obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                    return true;
                case Class_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                case Class_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                case Class_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IClassGetter obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return obj.Name;
                case Class_FieldIndex.Description:
                    return obj.Description;
                case Class_FieldIndex.Icon:
                    return obj.Icon;
                case Class_FieldIndex.PrimaryAttributes:
                    return obj.PrimaryAttributes;
                case Class_FieldIndex.Specialization:
                    return obj.Specialization;
                case Class_FieldIndex.SecondaryAttributes:
                    return obj.SecondaryAttributes;
                case Class_FieldIndex.Flags:
                    return obj.Flags;
                case Class_FieldIndex.ClassServices:
                    return obj.ClassServices;
                case Class_FieldIndex.Training:
                    return obj.Training;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IClass item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Property.Unset(cmds.ToUnsetParams());
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.PrimaryAttributes.Unset(cmds.ToUnsetParams());
            item.Specialization = default(Class.SpecializationFlag);
            item.SecondaryAttributes.Unset(cmds.ToUnsetParams());
            item.Flags = default(ClassFlag);
            item.ClassServices = default(ClassService);
            item.Training = default(ClassTraining);
        }

        public static Class_Mask<bool> GetEqualsMask(
            this IClassGetter item,
            IClassGetter rhs)
        {
            var ret = new Class_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            Class_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.PrimaryAttributes = new MaskItem<bool, IEnumerable<bool>>();
            ret.PrimaryAttributes.Specific = item.PrimaryAttributes.SelectAgainst<ActorValue, bool>(rhs.PrimaryAttributes, ((l, r) => object.Equals(l, r)), out ret.PrimaryAttributes.Overall);
            ret.PrimaryAttributes.Overall = ret.PrimaryAttributes.Overall && ret.PrimaryAttributes.Specific.All((b) => b);
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.SecondaryAttributes = new MaskItem<bool, IEnumerable<bool>>();
            ret.SecondaryAttributes.Specific = item.SecondaryAttributes.SelectAgainst<ActorValue, bool>(rhs.SecondaryAttributes, ((l, r) => object.Equals(l, r)), out ret.SecondaryAttributes.Overall);
            ret.SecondaryAttributes.Overall = ret.SecondaryAttributes.Overall && ret.SecondaryAttributes.Specific.All((b) => b);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ClassServices = item.ClassServices == rhs.ClassServices;
            ret.Training = new MaskItem<bool, ClassTraining_Mask<bool>>();
            ret.Training.Specific = ClassTrainingCommon.GetEqualsMask(item.Training, rhs.Training);
            ret.Training.Overall = ret.Training.Specific.AllEqual((b) => b);
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IClassGetter item,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IClassGetter item,
            FileGeneration fg,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Class)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Class)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.PrimaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("PrimaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.PrimaryAttributes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {item.Specialization}");
                }
                if (printMask?.SecondaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("SecondaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SecondaryAttributes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.ClassServices ?? true)
                {
                    fg.AppendLine($"ClassServices => {item.ClassServices}");
                }
                if (printMask?.Training?.Overall ?? true)
                {
                    item.Training?.ToString(fg, "Training");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IClassGetter item,
            Class_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.PrimaryAttributes.Overall.HasValue && checkMask.PrimaryAttributes.Overall.Value != item.PrimaryAttributes.HasBeenSet) return false;
            if (checkMask.SecondaryAttributes.Overall.HasValue && checkMask.SecondaryAttributes.Overall.Value != item.SecondaryAttributes.HasBeenSet) return false;
            return true;
        }

        public static Class_Mask<bool> GetHasBeenSetMask(IClassGetter item)
        {
            var ret = new Class_Mask<bool>();
            ret.Name = item.Name_Property.HasBeenSet;
            ret.Description = item.Description_Property.HasBeenSet;
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.PrimaryAttributes = new MaskItem<bool, IEnumerable<bool>>(item.PrimaryAttributes.HasBeenSet, null);
            ret.Specialization = true;
            ret.SecondaryAttributes = new MaskItem<bool, IEnumerable<bool>>(item.SecondaryAttributes.HasBeenSet, null);
            ret.Flags = true;
            ret.ClassServices = true;
            ret.Training = new MaskItem<bool, ClassTraining_Mask<bool>>(true, ClassTrainingCommon.GetHasBeenSetMask(item.Training));
            return ret;
        }

        public static Class_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Class_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IClassGetter item,
            bool doMasks,
            out Class_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IClassGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Class");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Class");
            }
            if (item.Name_Property.HasBeenSet)
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name_Property,
                    fieldIndex: (int)Class_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Description_Property.HasBeenSet)
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Description),
                    item: item.Description_Property,
                    fieldIndex: (int)Class_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Icon_Property.HasBeenSet)
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Icon),
                    item: item.Icon_Property,
                    fieldIndex: (int)Class_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            ListXmlTranslation<ActorValue>.Instance.Write(
                node: elem,
                name: nameof(item.PrimaryAttributes),
                item: item.PrimaryAttributes,
                fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                errorMask: errorMask,
                transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder listSubMask) =>
                {
                    EnumXmlTranslation<ActorValue>.Instance.Write(
                        node: subNode,
                        name: "Item",
                        item: subItem,
                        errorMask: listSubMask);
                }
                );
            EnumXmlTranslation<Class.SpecializationFlag>.Instance.Write(
                node: elem,
                name: nameof(item.Specialization),
                item: item.Specialization_Property,
                fieldIndex: (int)Class_FieldIndex.Specialization,
                errorMask: errorMask);
            ListXmlTranslation<ActorValue>.Instance.Write(
                node: elem,
                name: nameof(item.SecondaryAttributes),
                item: item.SecondaryAttributes,
                fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                errorMask: errorMask,
                transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder listSubMask) =>
                {
                    EnumXmlTranslation<ActorValue>.Instance.Write(
                        node: subNode,
                        name: "Item",
                        item: subItem,
                        errorMask: listSubMask);
                }
                );
            EnumXmlTranslation<ClassFlag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)Class_FieldIndex.Flags,
                errorMask: errorMask);
            EnumXmlTranslation<ClassService>.Instance.Write(
                node: elem,
                name: nameof(item.ClassServices),
                item: item.ClassServices_Property,
                fieldIndex: (int)Class_FieldIndex.ClassServices,
                errorMask: errorMask);
            LoquiXmlTranslation<ClassTraining>.Instance.Write(
                node: elem,
                item: item.Training_Property,
                name: nameof(item.Training),
                fieldIndex: (int)Class_FieldIndex.Training,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Class item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Class_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Class_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Class item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Class_Registration.CLAS_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Class item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)Class_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.FULL_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description_Property,
                fieldIndex: (int)Class_FieldIndex.Description,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.DESC_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Class_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.ICON_HEADER),
                nullable: false);
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Class_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                        writer: writer,
                        items: item.PrimaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                        errorMask: errorMask,
                        transl: (MutagenWriter subWriter, ActorValue subItem, ErrorMaskBuilder listErrorMask) =>
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                                subWriter,
                                subItem,
                                length: 4,
                                errorMask: listErrorMask);
                        }
                        );
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Write(
                        writer,
                        item.Specialization_Property,
                        length: 4,
                        fieldIndex: (int)Class_FieldIndex.Specialization,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                        writer: writer,
                        items: item.SecondaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                        errorMask: errorMask,
                        transl: (MutagenWriter subWriter, ActorValue subItem, ErrorMaskBuilder listErrorMask) =>
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                                subWriter,
                                subItem,
                                length: 4,
                                errorMask: listErrorMask);
                        }
                        );
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassFlag>.Instance.Write(
                        writer,
                        item.Flags_Property,
                        length: 4,
                        fieldIndex: (int)Class_FieldIndex.Flags,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassService>.Instance.Write(
                        writer,
                        item.ClassServices_Property,
                        length: 4,
                        fieldIndex: (int)Class_FieldIndex.ClassServices,
                        errorMask: errorMask);
                    if (!item.DATADataTypeState.HasFlag(Class.DATADataType.Break0))
                    {
                        LoquiBinaryTranslation<ClassTraining>.Instance.Write(
                            writer: writer,
                            item: item.Training_Property,
                            fieldIndex: (int)Class_FieldIndex.Training,
                            errorMask: errorMask);
                    }
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Class_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Class_Mask<T>>
    {
        #region Ctors
        public Class_Mask()
        {
        }

        public Class_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Description = initialValue;
            this.Icon = initialValue;
            this.PrimaryAttributes = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Specialization = initialValue;
            this.SecondaryAttributes = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Flags = initialValue;
            this.ClassServices = initialValue;
            this.Training = new MaskItem<T, ClassTraining_Mask<T>>(initialValue, new ClassTraining_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Name;
        public T Description;
        public T Icon;
        public MaskItem<T, IEnumerable<T>> PrimaryAttributes;
        public T Specialization;
        public MaskItem<T, IEnumerable<T>> SecondaryAttributes;
        public T Flags;
        public T ClassServices;
        public MaskItem<T, ClassTraining_Mask<T>> Training { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Class_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Class_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.PrimaryAttributes, rhs.PrimaryAttributes)) return false;
            if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
            if (!object.Equals(this.SecondaryAttributes, rhs.SecondaryAttributes)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.ClassServices, rhs.ClassServices)) return false;
            if (!object.Equals(this.Training, rhs.Training)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.PrimaryAttributes?.GetHashCode());
            ret = ret.CombineHashCode(this.Specialization?.GetHashCode());
            ret = ret.CombineHashCode(this.SecondaryAttributes?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.ClassServices?.GetHashCode());
            ret = ret.CombineHashCode(this.Training?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Icon)) return false;
            if (this.PrimaryAttributes != null)
            {
                if (!eval(this.PrimaryAttributes.Overall)) return false;
                if (this.PrimaryAttributes.Specific != null)
                {
                    foreach (var item in this.PrimaryAttributes.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.Specialization)) return false;
            if (this.SecondaryAttributes != null)
            {
                if (!eval(this.SecondaryAttributes.Overall)) return false;
                if (this.SecondaryAttributes.Specific != null)
                {
                    foreach (var item in this.SecondaryAttributes.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.ClassServices)) return false;
            if (Training != null)
            {
                if (!eval(this.Training.Overall)) return false;
                if (this.Training.Specific != null && !this.Training.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Class_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Class_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Class_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Description = eval(this.Description);
            obj.Icon = eval(this.Icon);
            if (PrimaryAttributes != null)
            {
                obj.PrimaryAttributes = new MaskItem<R, IEnumerable<R>>();
                obj.PrimaryAttributes.Overall = eval(this.PrimaryAttributes.Overall);
                if (PrimaryAttributes.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.PrimaryAttributes.Specific = l;
                    foreach (var item in PrimaryAttributes.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.Specialization = eval(this.Specialization);
            if (SecondaryAttributes != null)
            {
                obj.SecondaryAttributes = new MaskItem<R, IEnumerable<R>>();
                obj.SecondaryAttributes.Overall = eval(this.SecondaryAttributes.Overall);
                if (SecondaryAttributes.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.SecondaryAttributes.Specific = l;
                    foreach (var item in SecondaryAttributes.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.Flags = eval(this.Flags);
            obj.ClassServices = eval(this.ClassServices);
            if (this.Training != null)
            {
                obj.Training = new MaskItem<R, ClassTraining_Mask<R>>();
                obj.Training.Overall = eval(this.Training.Overall);
                if (this.Training.Specific != null)
                {
                    obj.Training.Specific = this.Training.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.PrimaryAttributes.Specific = null;
            this.SecondaryAttributes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Class_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Class_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Class_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.PrimaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("PrimaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (PrimaryAttributes.Overall != null)
                        {
                            fg.AppendLine(PrimaryAttributes.Overall.ToString());
                        }
                        if (PrimaryAttributes.Specific != null)
                        {
                            foreach (var subItem in PrimaryAttributes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {Specialization}");
                }
                if (printMask?.SecondaryAttributes?.Overall ?? true)
                {
                    fg.AppendLine("SecondaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SecondaryAttributes.Overall != null)
                        {
                            fg.AppendLine(SecondaryAttributes.Overall.ToString());
                        }
                        if (SecondaryAttributes.Specific != null)
                        {
                            foreach (var subItem in SecondaryAttributes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.ClassServices ?? true)
                {
                    fg.AppendLine($"ClassServices => {ClassServices}");
                }
                if (printMask?.Training?.Overall ?? true)
                {
                    Training?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Class_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Class_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Description;
        public Exception Icon;
        public MaskItem<Exception, IEnumerable<Exception>> PrimaryAttributes;
        public Exception Specialization;
        public MaskItem<Exception, IEnumerable<Exception>> SecondaryAttributes;
        public Exception Flags;
        public Exception ClassServices;
        public MaskItem<Exception, ClassTraining_ErrorMask> Training;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return Name;
                case Class_FieldIndex.Description:
                    return Description;
                case Class_FieldIndex.Icon:
                    return Icon;
                case Class_FieldIndex.PrimaryAttributes:
                    return PrimaryAttributes;
                case Class_FieldIndex.Specialization:
                    return Specialization;
                case Class_FieldIndex.SecondaryAttributes:
                    return SecondaryAttributes;
                case Class_FieldIndex.Flags:
                    return Flags;
                case Class_FieldIndex.ClassServices:
                    return ClassServices;
                case Class_FieldIndex.Training:
                    return Training;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Class_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this.PrimaryAttributes = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Class_FieldIndex.Specialization:
                    this.Specialization = ex;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this.SecondaryAttributes = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Class_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Class_FieldIndex.ClassServices:
                    this.ClassServices = ex;
                    break;
                case Class_FieldIndex.Training:
                    this.Training = new MaskItem<Exception, ClassTraining_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Class_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Class_FieldIndex.PrimaryAttributes:
                    this.PrimaryAttributes = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Class_FieldIndex.Specialization:
                    this.Specialization = (Exception)obj;
                    break;
                case Class_FieldIndex.SecondaryAttributes:
                    this.SecondaryAttributes = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Class_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Class_FieldIndex.ClassServices:
                    this.ClassServices = (Exception)obj;
                    break;
                case Class_FieldIndex.Training:
                    this.Training = (MaskItem<Exception, ClassTraining_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Description != null) return true;
            if (Icon != null) return true;
            if (PrimaryAttributes != null) return true;
            if (Specialization != null) return true;
            if (SecondaryAttributes != null) return true;
            if (Flags != null) return true;
            if (ClassServices != null) return true;
            if (Training != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Class_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine("PrimaryAttributes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (PrimaryAttributes.Overall != null)
                {
                    fg.AppendLine(PrimaryAttributes.Overall.ToString());
                }
                if (PrimaryAttributes.Specific != null)
                {
                    foreach (var subItem in PrimaryAttributes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Specialization => {Specialization}");
            fg.AppendLine("SecondaryAttributes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SecondaryAttributes.Overall != null)
                {
                    fg.AppendLine(SecondaryAttributes.Overall.ToString());
                }
                if (SecondaryAttributes.Specific != null)
                {
                    foreach (var subItem in SecondaryAttributes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"ClassServices => {ClassServices}");
            Training?.ToString(fg);
        }
        #endregion

        #region Combine
        public Class_ErrorMask Combine(Class_ErrorMask rhs)
        {
            var ret = new Class_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.PrimaryAttributes = new MaskItem<Exception, IEnumerable<Exception>>(this.PrimaryAttributes.Overall.Combine(rhs.PrimaryAttributes.Overall), new List<Exception>(this.PrimaryAttributes.Specific.And(rhs.PrimaryAttributes.Specific)));
            ret.Specialization = this.Specialization.Combine(rhs.Specialization);
            ret.SecondaryAttributes = new MaskItem<Exception, IEnumerable<Exception>>(this.SecondaryAttributes.Overall.Combine(rhs.SecondaryAttributes.Overall), new List<Exception>(this.SecondaryAttributes.Specific.And(rhs.SecondaryAttributes.Specific)));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.ClassServices = this.ClassServices.Combine(rhs.ClassServices);
            ret.Training = new MaskItem<Exception, ClassTraining_ErrorMask>(this.Training.Overall.Combine(rhs.Training.Overall), ((IErrorMask<ClassTraining_ErrorMask>)this.Training.Specific).Combine(rhs.Training.Specific));
            return ret;
        }
        public static Class_ErrorMask Combine(Class_ErrorMask lhs, Class_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Class_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Class_ErrorMask();
        }
        #endregion

    }
    public class Class_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Name;
        public bool Description;
        public bool Icon;
        public CopyOption PrimaryAttributes;
        public bool Specialization;
        public CopyOption SecondaryAttributes;
        public bool Flags;
        public bool ClassServices;
        public MaskItem<CopyOption, ClassTraining_CopyMask> Training;
        #endregion

    }
    #endregion





    #endregion

}
