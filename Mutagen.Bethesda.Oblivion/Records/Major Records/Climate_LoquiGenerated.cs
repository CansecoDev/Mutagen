/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Climate : MajorRecord, IClimate, ILoquiObjectSetter, IEquatable<Climate>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static Climate_Registration Registration => Climate_Registration.Instance;

        #region Ctor
        public Climate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<WeatherChance> _Weathers = new NotifyingList<WeatherChance>();
        public INotifyingList<WeatherChance> Weathers => _Weathers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<WeatherChance> WeathersEnumerable
        {
            get => _Weathers;
            set => _Weathers.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<WeatherChance> IClimate.Weathers => _Weathers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<WeatherChance> IClimateGetter.Weathers => _Weathers;
        #endregion

        #endregion
        #region SunTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _SunTexture = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> SunTexture_Property => _SunTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath SunTexture
        {
            get => this._SunTexture.Item;
            set => this._SunTexture.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> IClimate.SunTexture_Property => this.SunTexture_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> IClimateGetter.SunTexture_Property => this.SunTexture_Property;
        #endregion
        #region SunGlareTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _SunGlareTexture = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> SunGlareTexture_Property => _SunGlareTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath SunGlareTexture
        {
            get => this._SunGlareTexture.Item;
            set => this._SunGlareTexture.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> IClimate.SunGlareTexture_Property => this.SunGlareTexture_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> IClimateGetter.SunGlareTexture_Property => this.SunGlareTexture_Property;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _Model = new NotifyingSetItem<Model>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public INotifyingSetItem<Model> Model_Property => this._Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IClimateGetter.Model => this.Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IClimate.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IClimateGetter.Model_Property => this.Model_Property;
        #endregion
        #region SunriseBegin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<DateTime> _SunriseBegin = NotifyingItem.Factory<DateTime>();
        public INotifyingItem<DateTime> SunriseBegin_Property => _SunriseBegin;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DateTime SunriseBegin
        {
            get => this._SunriseBegin.Item;
            set => this._SunriseBegin.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<DateTime> IClimate.SunriseBegin_Property => this.SunriseBegin_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<DateTime> IClimateGetter.SunriseBegin_Property => this.SunriseBegin_Property;
        #endregion
        #region SunriseEnd
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<DateTime> _SunriseEnd = NotifyingItem.Factory<DateTime>();
        public INotifyingItem<DateTime> SunriseEnd_Property => _SunriseEnd;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DateTime SunriseEnd
        {
            get => this._SunriseEnd.Item;
            set => this._SunriseEnd.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<DateTime> IClimate.SunriseEnd_Property => this.SunriseEnd_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<DateTime> IClimateGetter.SunriseEnd_Property => this.SunriseEnd_Property;
        #endregion
        #region SunsetBegin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<DateTime> _SunsetBegin = NotifyingItem.Factory<DateTime>();
        public INotifyingItem<DateTime> SunsetBegin_Property => _SunsetBegin;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DateTime SunsetBegin
        {
            get => this._SunsetBegin.Item;
            set => this._SunsetBegin.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<DateTime> IClimate.SunsetBegin_Property => this.SunsetBegin_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<DateTime> IClimateGetter.SunsetBegin_Property => this.SunsetBegin_Property;
        #endregion
        #region SunsetEnd
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<DateTime> _SunsetEnd = NotifyingItem.Factory<DateTime>();
        public INotifyingItem<DateTime> SunsetEnd_Property => _SunsetEnd;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DateTime SunsetEnd
        {
            get => this._SunsetEnd.Item;
            set => this._SunsetEnd.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<DateTime> IClimate.SunsetEnd_Property => this.SunsetEnd_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<DateTime> IClimateGetter.SunsetEnd_Property => this.SunsetEnd_Property;
        #endregion
        #region Volatility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Volatility = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Volatility_Property => _Volatility;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Volatility
        {
            get => this._Volatility.Item;
            set => this._Volatility.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IClimate.Volatility_Property => this.Volatility_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IClimateGetter.Volatility_Property => this.Volatility_Property;
        #endregion
        #region Phase
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Climate.MoonPhase> _Phase = NotifyingItem.Factory<Climate.MoonPhase>();
        public INotifyingItem<Climate.MoonPhase> Phase_Property => _Phase;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Climate.MoonPhase Phase
        {
            get => this._Phase.Item;
            set => this._Phase.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Climate.MoonPhase> IClimate.Phase_Property => this.Phase_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Climate.MoonPhase> IClimateGetter.Phase_Property => this.Phase_Property;
        #endregion
        #region PhaseLength
        protected INotifyingItem<Byte> _PhaseLength = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> PhaseLength_Property => _PhaseLength;
        public Byte PhaseLength
        {
            get => this._PhaseLength.Item;
            set => this._PhaseLength.Set(value.PutInRange(PhaseLength_Range.Min, PhaseLength_Range.Max));
        }
        INotifyingItem<Byte> IClimate.PhaseLength_Property => this.PhaseLength_Property;
        INotifyingItemGetter<Byte> IClimateGetter.PhaseLength_Property => this.PhaseLength_Property;
        public static RangeUInt8 PhaseLength_Range = new RangeUInt8(0, 63);
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ClimateCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ClimateCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ClimateCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ClimateCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ClimateCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Climate_Mask<bool> printMask = null)
        {
            return ClimateCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClimateCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Climate_Mask<bool> GetHasBeenSetMask()
        {
            return ClimateCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Climate rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Climate rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Weathers.HasBeenSet != rhs.Weathers.HasBeenSet) return false;
            if (Weathers.HasBeenSet)
            {
                if (!Weathers.SequenceEqual(rhs.Weathers)) return false;
            }
            if (SunTexture_Property.HasBeenSet != rhs.SunTexture_Property.HasBeenSet) return false;
            if (SunTexture_Property.HasBeenSet)
            {
                if (!object.Equals(SunTexture, rhs.SunTexture)) return false;
            }
            if (SunGlareTexture_Property.HasBeenSet != rhs.SunGlareTexture_Property.HasBeenSet) return false;
            if (SunGlareTexture_Property.HasBeenSet)
            {
                if (!object.Equals(SunGlareTexture, rhs.SunGlareTexture)) return false;
            }
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(Model, rhs.Model)) return false;
            }
            if (SunriseBegin != rhs.SunriseBegin) return false;
            if (SunriseEnd != rhs.SunriseEnd) return false;
            if (SunsetBegin != rhs.SunsetBegin) return false;
            if (SunsetEnd != rhs.SunsetEnd) return false;
            if (Volatility != rhs.Volatility) return false;
            if (Phase != rhs.Phase) return false;
            if (PhaseLength != rhs.PhaseLength) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Weathers.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Weathers).CombineHashCode(ret);
            }
            if (SunTexture_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SunTexture).CombineHashCode(ret);
            }
            if (SunGlareTexture_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SunGlareTexture).CombineHashCode(ret);
            }
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(SunriseBegin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunriseEnd).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunsetBegin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunsetEnd).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Volatility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Phase).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PhaseLength).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Climate Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Climate Create_XML(
            XElement root,
            out Climate_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Climate Create_XML(
            XElement root,
            bool doMasks,
            out Climate_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Climate Object, Climate_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Climate_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Climate_ErrorMask()) : default(Func<Climate_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Climate Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Climate Create_XML(
            string path,
            out Climate_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Climate Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Climate Create_XML(
            Stream stream,
            out Climate_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Climate, Climate_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Climate_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Climate, Climate_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Climate_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Climate_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Climate_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Climate_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Climate_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Climate_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Climate_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ClimateCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Climate Create_XML_Internal(
            XElement root,
            Func<Climate_ErrorMask> errorMask)
        {
            var ret = new Climate();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Climate item,
            XElement root,
            string name,
            Func<Climate_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Weathers":
                    item._Weathers.SetIfSucceeded(ListXmlTranslation<WeatherChance, MaskItem<Exception, WeatherChance_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Climate_FieldIndex.Weathers,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, WeatherChance_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<WeatherChance, WeatherChance_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "SunTexture":
                    item._SunTexture.SetIfSucceeded(FilePathXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Climate_FieldIndex.SunTexture,
                        errorMask: errorMask));
                    break;
                case "SunGlareTexture":
                    item._SunGlareTexture.SetIfSucceeded(FilePathXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Climate_FieldIndex.SunGlareTexture,
                        errorMask: errorMask));
                    break;
                case "Model":
                    item._Model.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Climate_FieldIndex.Model,
                        errorMask: errorMask));
                    break;
                case "SunriseBegin":
                    item._SunriseBegin.SetIfSucceeded(DateTimeXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Climate_FieldIndex.SunriseBegin,
                        errorMask: errorMask));
                    break;
                case "SunriseEnd":
                    item._SunriseEnd.SetIfSucceeded(DateTimeXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Climate_FieldIndex.SunriseEnd,
                        errorMask: errorMask));
                    break;
                case "SunsetBegin":
                    item._SunsetBegin.SetIfSucceeded(DateTimeXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Climate_FieldIndex.SunsetBegin,
                        errorMask: errorMask));
                    break;
                case "SunsetEnd":
                    item._SunsetEnd.SetIfSucceeded(DateTimeXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Climate_FieldIndex.SunsetEnd,
                        errorMask: errorMask));
                    break;
                case "Volatility":
                    item._Volatility.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Climate_FieldIndex.Volatility,
                        errorMask: errorMask));
                    break;
                case "Phase":
                    item._Phase.SetIfSucceeded(EnumXmlTranslation<Climate.MoonPhase>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Climate_FieldIndex.Phase,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "PhaseLength":
                    item._PhaseLength.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Climate_FieldIndex.PhaseLength,
                        errorMask: errorMask));
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Climate Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Climate Create_Binary(
            MutagenFrame frame,
            out Climate_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Climate Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Climate_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Climate Object, Climate_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Climate_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Climate_ErrorMask()) : default(Func<Climate_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Climate Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Climate Create_Binary(
            string path,
            out Climate_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Climate Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Climate Create_Binary(
            Stream stream,
            out Climate_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Climate, Climate_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Climate_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Climate, Climate_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Climate_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Climate_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Climate_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Climate_ErrorMask errorMask)
        {
            errorMask = (Climate_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Climate_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Climate_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ClimateCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_SunriseBegin_Custom(
            MutagenFrame frame,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        static partial void WriteBinary_SunriseBegin_Custom(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        public static void WriteBinary_SunriseBegin(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask)
        {
            WriteBinary_SunriseBegin_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        static partial void FillBinary_SunriseEnd_Custom(
            MutagenFrame frame,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        static partial void WriteBinary_SunriseEnd_Custom(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        public static void WriteBinary_SunriseEnd(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask)
        {
            WriteBinary_SunriseEnd_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        static partial void FillBinary_SunsetBegin_Custom(
            MutagenFrame frame,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        static partial void WriteBinary_SunsetBegin_Custom(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        public static void WriteBinary_SunsetBegin(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask)
        {
            WriteBinary_SunsetBegin_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        static partial void FillBinary_SunsetEnd_Custom(
            MutagenFrame frame,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        static partial void WriteBinary_SunsetEnd_Custom(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        public static void WriteBinary_SunsetEnd(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask)
        {
            WriteBinary_SunsetEnd_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        static partial void FillBinary_Phase_Custom(
            MutagenFrame frame,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        static partial void WriteBinary_Phase_Custom(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        public static void WriteBinary_Phase(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask)
        {
            WriteBinary_Phase_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        static partial void FillBinary_PhaseLength_Custom(
            MutagenFrame frame,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        static partial void WriteBinary_PhaseLength_Custom(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask);

        public static void WriteBinary_PhaseLength(
            MutagenWriter writer,
            Climate item,
            int fieldIndex,
            Func<Climate_ErrorMask> errorMask)
        {
            WriteBinary_PhaseLength_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        private static Climate Create_Binary_Internal(
            MutagenFrame frame,
            Func<Climate_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Climate, Climate_ErrorMask, Climate_FieldIndex>(
                record: new Climate(),
                frame: frame,
                errorMask: errorMask,
                recType: Climate_Registration.CLMT_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Climate item,
            MutagenFrame frame,
            Func<Climate_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Climate_FieldIndex?> Fill_Binary_RecordTypes(
            Climate item,
            MutagenFrame frame,
            Func<Climate_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "WLST":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var WeatherstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherChance, MaskItem<Exception, WeatherChance_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Climate_FieldIndex.Weathers,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, WeatherChance_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<WeatherChance, WeatherChance_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Weathers.SetIfSucceeded(WeatherstryGet);
                    return TryGet<Climate_FieldIndex?>.Succeed(Climate_FieldIndex.Weathers);
                case "FNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._SunTexture.SetIfSucceeded(Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Climate_FieldIndex.SunTexture,
                        errorMask: errorMask));
                    return TryGet<Climate_FieldIndex?>.Succeed(Climate_FieldIndex.SunTexture);
                case "GNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._SunGlareTexture.SetIfSucceeded(Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Climate_FieldIndex.SunGlareTexture,
                        errorMask: errorMask));
                    return TryGet<Climate_FieldIndex?>.Succeed(Climate_FieldIndex.SunGlareTexture);
                case "MODL":
                    item._Model.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Climate_FieldIndex.Model,
                        errorMask: errorMask));
                    return TryGet<Climate_FieldIndex?>.Succeed(Climate_FieldIndex.Model);
                case "TNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        FillBinary_SunriseBegin_Custom(
                            frame: dataFrame,
                            item: item,
                            fieldIndex: (int)Climate_FieldIndex.SunriseBegin,
                            errorMask: errorMask);
                        FillBinary_SunriseEnd_Custom(
                            frame: dataFrame,
                            item: item,
                            fieldIndex: (int)Climate_FieldIndex.SunriseEnd,
                            errorMask: errorMask);
                        FillBinary_SunsetBegin_Custom(
                            frame: dataFrame,
                            item: item,
                            fieldIndex: (int)Climate_FieldIndex.SunsetBegin,
                            errorMask: errorMask);
                        FillBinary_SunsetEnd_Custom(
                            frame: dataFrame,
                            item: item,
                            fieldIndex: (int)Climate_FieldIndex.SunsetEnd,
                            errorMask: errorMask);
                        item._Volatility.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Climate_FieldIndex.Volatility,
                            errorMask: errorMask));
                        FillBinary_Phase_Custom(
                            frame: dataFrame,
                            item: item,
                            fieldIndex: (int)Climate_FieldIndex.Phase,
                            errorMask: errorMask);
                        FillBinary_PhaseLength_Custom(
                            frame: dataFrame,
                            item: item,
                            fieldIndex: (int)Climate_FieldIndex.PhaseLength,
                            errorMask: errorMask);
                    }
                    return TryGet<Climate_FieldIndex?>.Succeed(Climate_FieldIndex.PhaseLength);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => ClimateCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Climate Copy(
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null)
        {
            return Climate.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Climate Copy(
            IClimate item,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null)
        {
            Climate ret;
            if (item.GetType().Equals(typeof(Climate)))
            {
                ret = new Climate();
            }
            else
            {
                ret = (Climate)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null)
            where CopyType : class, IClimate
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Climate)))
            {
                ret = new Climate() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Climate Copy_ToLoqui(
            IClimateGetter item,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null)
        {
            Climate ret;
            if (item.GetType().Equals(typeof(Climate)))
            {
                ret = new Climate() as Climate;
            }
            else
            {
                ret = (Climate)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    this._Weathers.SetTo((IEnumerable<WeatherChance>)obj, cmds);
                    break;
                case Climate_FieldIndex.SunTexture:
                    this._SunTexture.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    this._SunGlareTexture.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    this._SunriseBegin.Set(
                        (DateTime)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    this._SunriseEnd.Set(
                        (DateTime)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    this._SunsetBegin.Set(
                        (DateTime)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    this._SunsetEnd.Set(
                        (DateTime)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.Volatility:
                    this._Volatility.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.Phase:
                    this._Phase.Set(
                        (Climate.MoonPhase)obj,
                        cmds);
                    break;
                case Climate_FieldIndex.PhaseLength:
                    this._PhaseLength.Set(
                        (Byte)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ClimateCommon.Clear(this, cmds);
        }


        public new static Climate Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Climate();
            foreach (var pair in fields)
            {
                CopyInInternal_Climate(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Climate(Climate obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Climate_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    obj._Weathers.SetTo((IEnumerable<WeatherChance>)pair.Value, null);
                    break;
                case Climate_FieldIndex.SunTexture:
                    obj._SunTexture.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    obj._SunGlareTexture.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    obj._SunriseBegin.Set(
                        (DateTime)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    obj._SunriseEnd.Set(
                        (DateTime)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    obj._SunsetBegin.Set(
                        (DateTime)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    obj._SunsetEnd.Set(
                        (DateTime)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.Volatility:
                    obj._Volatility.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.Phase:
                    obj._Phase.Set(
                        (Climate.MoonPhase)pair.Value,
                        null);
                    break;
                case Climate_FieldIndex.PhaseLength:
                    obj._PhaseLength.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Climate obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IClimate : IClimateGetter, IMajorRecord, ILoquiClass<IClimate, IClimateGetter>, ILoquiClass<Climate, IClimateGetter>
    {
        new INotifyingList<WeatherChance> Weathers { get; }
        new FilePath SunTexture { get; set; }
        new INotifyingSetItem<FilePath> SunTexture_Property { get; }

        new FilePath SunGlareTexture { get; set; }
        new INotifyingSetItem<FilePath> SunGlareTexture_Property { get; }

        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new DateTime SunriseBegin { get; set; }
        new INotifyingItem<DateTime> SunriseBegin_Property { get; }

        new DateTime SunriseEnd { get; set; }
        new INotifyingItem<DateTime> SunriseEnd_Property { get; }

        new DateTime SunsetBegin { get; set; }
        new INotifyingItem<DateTime> SunsetBegin_Property { get; }

        new DateTime SunsetEnd { get; set; }
        new INotifyingItem<DateTime> SunsetEnd_Property { get; }

        new Byte Volatility { get; set; }
        new INotifyingItem<Byte> Volatility_Property { get; }

        new Climate.MoonPhase Phase { get; set; }
        new INotifyingItem<Climate.MoonPhase> Phase_Property { get; }

        new Byte PhaseLength { get; set; }
        new INotifyingItem<Byte> PhaseLength_Property { get; }

    }

    public interface IClimateGetter : IMajorRecordGetter
    {
        #region Weathers
        INotifyingListGetter<WeatherChance> Weathers { get; }
        #endregion
        #region SunTexture
        FilePath SunTexture { get; }
        INotifyingSetItemGetter<FilePath> SunTexture_Property { get; }

        #endregion
        #region SunGlareTexture
        FilePath SunGlareTexture { get; }
        INotifyingSetItemGetter<FilePath> SunGlareTexture_Property { get; }

        #endregion
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region SunriseBegin
        DateTime SunriseBegin { get; }
        INotifyingItemGetter<DateTime> SunriseBegin_Property { get; }

        #endregion
        #region SunriseEnd
        DateTime SunriseEnd { get; }
        INotifyingItemGetter<DateTime> SunriseEnd_Property { get; }

        #endregion
        #region SunsetBegin
        DateTime SunsetBegin { get; }
        INotifyingItemGetter<DateTime> SunsetBegin_Property { get; }

        #endregion
        #region SunsetEnd
        DateTime SunsetEnd { get; }
        INotifyingItemGetter<DateTime> SunsetEnd_Property { get; }

        #endregion
        #region Volatility
        Byte Volatility { get; }
        INotifyingItemGetter<Byte> Volatility_Property { get; }

        #endregion
        #region Phase
        Climate.MoonPhase Phase { get; }
        INotifyingItemGetter<Climate.MoonPhase> Phase_Property { get; }

        #endregion
        #region PhaseLength
        Byte PhaseLength { get; }
        INotifyingItemGetter<Byte> PhaseLength_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Climate_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Weathers = 5,
        SunTexture = 6,
        SunGlareTexture = 7,
        Model = 8,
        SunriseBegin = 9,
        SunriseEnd = 10,
        SunsetBegin = 11,
        SunsetEnd = 12,
        Volatility = 13,
        Phase = 14,
        PhaseLength = 15,
    }
    #endregion

    #region Registration
    public class Climate_Registration : ILoquiRegistration
    {
        public static readonly Climate_Registration Instance = new Climate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 105,
            version: 0);

        public const string GUID = "25ca8fab-7f62-4f8b-9c32-d65a3261ac05";

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(Climate_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Climate_ErrorMask);

        public static readonly Type ClassType = typeof(Climate);

        public static readonly Type GetterType = typeof(IClimateGetter);

        public static readonly Type SetterType = typeof(IClimate);

        public static readonly Type CommonType = typeof(ClimateCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Climate";

        public const string Name = "Climate";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "WEATHERS":
                    return (ushort)Climate_FieldIndex.Weathers;
                case "SUNTEXTURE":
                    return (ushort)Climate_FieldIndex.SunTexture;
                case "SUNGLARETEXTURE":
                    return (ushort)Climate_FieldIndex.SunGlareTexture;
                case "MODEL":
                    return (ushort)Climate_FieldIndex.Model;
                case "SUNRISEBEGIN":
                    return (ushort)Climate_FieldIndex.SunriseBegin;
                case "SUNRISEEND":
                    return (ushort)Climate_FieldIndex.SunriseEnd;
                case "SUNSETBEGIN":
                    return (ushort)Climate_FieldIndex.SunsetBegin;
                case "SUNSETEND":
                    return (ushort)Climate_FieldIndex.SunsetEnd;
                case "VOLATILITY":
                    return (ushort)Climate_FieldIndex.Volatility;
                case "PHASE":
                    return (ushort)Climate_FieldIndex.Phase;
                case "PHASELENGTH":
                    return (ushort)Climate_FieldIndex.PhaseLength;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return true;
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.Model:
                    return true;
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return "Weathers";
                case Climate_FieldIndex.SunTexture:
                    return "SunTexture";
                case Climate_FieldIndex.SunGlareTexture:
                    return "SunGlareTexture";
                case Climate_FieldIndex.Model:
                    return "Model";
                case Climate_FieldIndex.SunriseBegin:
                    return "SunriseBegin";
                case Climate_FieldIndex.SunriseEnd:
                    return "SunriseEnd";
                case Climate_FieldIndex.SunsetBegin:
                    return "SunsetBegin";
                case Climate_FieldIndex.SunsetEnd:
                    return "SunsetEnd";
                case Climate_FieldIndex.Volatility:
                    return "Volatility";
                case Climate_FieldIndex.Phase:
                    return "Phase";
                case Climate_FieldIndex.PhaseLength:
                    return "PhaseLength";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return typeof(NotifyingList<WeatherChance>);
                case Climate_FieldIndex.SunTexture:
                    return typeof(FilePath);
                case Climate_FieldIndex.SunGlareTexture:
                    return typeof(FilePath);
                case Climate_FieldIndex.Model:
                    return typeof(Model);
                case Climate_FieldIndex.SunriseBegin:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunriseEnd:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunsetBegin:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunsetEnd:
                    return typeof(DateTime);
                case Climate_FieldIndex.Volatility:
                    return typeof(Byte);
                case Climate_FieldIndex.Phase:
                    return typeof(Climate.MoonPhase);
                case Climate_FieldIndex.PhaseLength:
                    return typeof(Byte);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType WLST_HEADER = new RecordType("WLST");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLMT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ClimateCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IClimate item,
            IClimateGetter rhs,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            ClimateCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IClimate item,
            IClimateGetter rhs,
            out Climate_ErrorMask errorMask,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            ClimateCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IClimate item,
            IClimateGetter rhs,
            IClimateGetter def,
            bool doMasks,
            out Climate_ErrorMask errorMask,
            Climate_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            Climate_ErrorMask retErrorMask = null;
            Func<Climate_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Climate_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IClimate item,
            IClimateGetter rhs,
            IClimateGetter def,
            bool doMasks,
            Func<Climate_ErrorMask> errorMask,
            Climate_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Weathers.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Weathers.SetToWithDefault(
                        rhs: rhs.Weathers,
                        def: def?.Weathers,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Weathers.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(WeatherChance);
                                    return WeatherChance.Copy(
                                        r,
                                        copyMask?.Weathers?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Weathers.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.Weathers, ex);
                }
            }
            if (copyMask?.SunTexture ?? true)
            {
                try
                {
                    item.SunTexture_Property.SetToWithDefault(
                        rhs: rhs.SunTexture_Property,
                        def: def?.SunTexture_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.SunTexture, ex);
                }
            }
            if (copyMask?.SunGlareTexture ?? true)
            {
                try
                {
                    item.SunGlareTexture_Property.SetToWithDefault(
                        rhs: rhs.SunGlareTexture_Property,
                        def: def?.SunGlareTexture_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.SunGlareTexture, ex);
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Model.Specific == null)
                                            {
                                                baseMask.Model = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.Model.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.SunriseBegin ?? true)
            {
                try
                {
                    item.SunriseBegin_Property.Set(
                        value: rhs.SunriseBegin,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.SunriseBegin, ex);
                }
            }
            if (copyMask?.SunriseEnd ?? true)
            {
                try
                {
                    item.SunriseEnd_Property.Set(
                        value: rhs.SunriseEnd,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.SunriseEnd, ex);
                }
            }
            if (copyMask?.SunsetBegin ?? true)
            {
                try
                {
                    item.SunsetBegin_Property.Set(
                        value: rhs.SunsetBegin,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.SunsetBegin, ex);
                }
            }
            if (copyMask?.SunsetEnd ?? true)
            {
                try
                {
                    item.SunsetEnd_Property.Set(
                        value: rhs.SunsetEnd,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.SunsetEnd, ex);
                }
            }
            if (copyMask?.Volatility ?? true)
            {
                try
                {
                    item.Volatility_Property.Set(
                        value: rhs.Volatility,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.Volatility, ex);
                }
            }
            if (copyMask?.Phase ?? true)
            {
                try
                {
                    item.Phase_Property.Set(
                        value: rhs.Phase,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.Phase, ex);
                }
            }
            if (copyMask?.PhaseLength ?? true)
            {
                try
                {
                    item.PhaseLength_Property.Set(
                        value: rhs.PhaseLength,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Climate_FieldIndex.PhaseLength, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IClimate obj,
            NotifyingFireParameters cmds = null)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Climate_FieldIndex.Weathers:
                    obj.Weathers.HasBeenSet = on;
                    break;
                case Climate_FieldIndex.SunTexture:
                    obj.SunTexture_Property.HasBeenSet = on;
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    obj.SunGlareTexture_Property.HasBeenSet = on;
                    break;
                case Climate_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IClimate obj,
            NotifyingUnsetParameters cmds = null)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    obj.Weathers.Unset(cmds);
                    break;
                case Climate_FieldIndex.SunTexture:
                    obj.SunTexture_Property.Unset(cmds);
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    obj.SunGlareTexture_Property.Unset(cmds);
                    break;
                case Climate_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    obj.SunriseBegin = default(DateTime);
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    obj.SunriseEnd = default(DateTime);
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    obj.SunsetBegin = default(DateTime);
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    obj.SunsetEnd = default(DateTime);
                    break;
                case Climate_FieldIndex.Volatility:
                    obj.Volatility = default(Byte);
                    break;
                case Climate_FieldIndex.Phase:
                    obj.Phase = default(Climate.MoonPhase);
                    break;
                case Climate_FieldIndex.PhaseLength:
                    obj.PhaseLength = default(Byte);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IClimate obj)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                    return true;
                case Climate_FieldIndex.Weathers:
                    return obj.Weathers.HasBeenSet;
                case Climate_FieldIndex.SunTexture:
                    return obj.SunTexture_Property.HasBeenSet;
                case Climate_FieldIndex.SunGlareTexture:
                    return obj.SunGlareTexture_Property.HasBeenSet;
                case Climate_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IClimateGetter obj)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return obj.Weathers;
                case Climate_FieldIndex.SunTexture:
                    return obj.SunTexture;
                case Climate_FieldIndex.SunGlareTexture:
                    return obj.SunGlareTexture;
                case Climate_FieldIndex.Model:
                    return obj.Model;
                case Climate_FieldIndex.SunriseBegin:
                    return obj.SunriseBegin;
                case Climate_FieldIndex.SunriseEnd:
                    return obj.SunriseEnd;
                case Climate_FieldIndex.SunsetBegin:
                    return obj.SunsetBegin;
                case Climate_FieldIndex.SunsetEnd:
                    return obj.SunsetEnd;
                case Climate_FieldIndex.Volatility:
                    return obj.Volatility;
                case Climate_FieldIndex.Phase:
                    return obj.Phase;
                case Climate_FieldIndex.PhaseLength:
                    return obj.PhaseLength;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IClimate item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Weathers.Unset(cmds.ToUnsetParams());
            item.SunTexture_Property.Unset(cmds.ToUnsetParams());
            item.SunGlareTexture_Property.Unset(cmds.ToUnsetParams());
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.SunriseBegin = default(DateTime);
            item.SunriseEnd = default(DateTime);
            item.SunsetBegin = default(DateTime);
            item.SunsetEnd = default(DateTime);
            item.Volatility = default(Byte);
            item.Phase = default(Climate.MoonPhase);
            item.PhaseLength = default(Byte);
        }

        public static Climate_Mask<bool> GetEqualsMask(
            this IClimateGetter item,
            IClimateGetter rhs)
        {
            var ret = new Climate_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            Climate_Mask<bool> ret)
        {
            if (rhs == null) return;
            if (item.Weathers.HasBeenSet == rhs.Weathers.HasBeenSet)
            {
                if (item.Weathers.HasBeenSet)
                {
                    ret.Weathers = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherChance_Mask<bool>>>>();
                    ret.Weathers.Specific = item.Weathers.SelectAgainst<WeatherChance, MaskItem<bool, WeatherChance_Mask<bool>>>(rhs.Weathers, ((l, r) =>
                    {
                        MaskItem<bool, WeatherChance_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, WeatherChance_Mask<bool>>();
                        itemRet.Specific = WeatherChanceCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.Weathers.Overall);
                    ret.Weathers.Overall = ret.Weathers.Overall && ret.Weathers.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Weathers = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherChance_Mask<bool>>>>();
                    ret.Weathers.Overall = true;
                }
            }
            else
            {
                ret.Weathers = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherChance_Mask<bool>>>>();
                ret.Weathers.Overall = false;
            }
            ret.SunTexture = item.SunTexture_Property.Equals(rhs.SunTexture_Property, (l, r) => object.Equals(l, r));
            ret.SunGlareTexture = item.SunGlareTexture_Property.Equals(rhs.SunGlareTexture_Property, (l, r) => object.Equals(l, r));
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.SunriseBegin = item.SunriseBegin == rhs.SunriseBegin;
            ret.SunriseEnd = item.SunriseEnd == rhs.SunriseEnd;
            ret.SunsetBegin = item.SunsetBegin == rhs.SunsetBegin;
            ret.SunsetEnd = item.SunsetEnd == rhs.SunsetEnd;
            ret.Volatility = item.Volatility == rhs.Volatility;
            ret.Phase = item.Phase == rhs.Phase;
            ret.PhaseLength = item.PhaseLength == rhs.PhaseLength;
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IClimateGetter item,
            string name = null,
            Climate_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IClimateGetter item,
            FileGeneration fg,
            string name = null,
            Climate_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Climate)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Climate)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weathers?.Overall ?? true)
                {
                    fg.AppendLine("Weathers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Weathers)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SunTexture ?? true)
                {
                    fg.AppendLine($"SunTexture => {item.SunTexture}");
                }
                if (printMask?.SunGlareTexture ?? true)
                {
                    fg.AppendLine($"SunGlareTexture => {item.SunGlareTexture}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.SunriseBegin ?? true)
                {
                    fg.AppendLine($"SunriseBegin => {item.SunriseBegin}");
                }
                if (printMask?.SunriseEnd ?? true)
                {
                    fg.AppendLine($"SunriseEnd => {item.SunriseEnd}");
                }
                if (printMask?.SunsetBegin ?? true)
                {
                    fg.AppendLine($"SunsetBegin => {item.SunsetBegin}");
                }
                if (printMask?.SunsetEnd ?? true)
                {
                    fg.AppendLine($"SunsetEnd => {item.SunsetEnd}");
                }
                if (printMask?.Volatility ?? true)
                {
                    fg.AppendLine($"Volatility => {item.Volatility}");
                }
                if (printMask?.Phase ?? true)
                {
                    fg.AppendLine($"Phase => {item.Phase}");
                }
                if (printMask?.PhaseLength ?? true)
                {
                    fg.AppendLine($"PhaseLength => {item.PhaseLength}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IClimateGetter item,
            Climate_Mask<bool?> checkMask)
        {
            if (checkMask.Weathers.Overall.HasValue && checkMask.Weathers.Overall.Value != item.Weathers.HasBeenSet) return false;
            if (checkMask.SunTexture.HasValue && checkMask.SunTexture.Value != item.SunTexture_Property.HasBeenSet) return false;
            if (checkMask.SunGlareTexture.HasValue && checkMask.SunGlareTexture.Value != item.SunGlareTexture_Property.HasBeenSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model_Property.Item == null || !item.Model_Property.Item.HasBeenSet(checkMask.Model.Specific))) return false;
            return true;
        }

        public static Climate_Mask<bool> GetHasBeenSetMask(IClimateGetter item)
        {
            var ret = new Climate_Mask<bool>();
            ret.Weathers = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherChance_Mask<bool>>>>(item.Weathers.HasBeenSet, item.Weathers.Select((i) => new MaskItem<bool, WeatherChance_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.SunTexture = item.SunTexture_Property.HasBeenSet;
            ret.SunGlareTexture = item.SunGlareTexture_Property.HasBeenSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model_Property.Item));
            ret.SunriseBegin = true;
            ret.SunriseEnd = true;
            ret.SunsetBegin = true;
            ret.SunsetEnd = true;
            ret.Volatility = true;
            ret.Phase = true;
            ret.PhaseLength = true;
            return ret;
        }

        public static Climate_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Climate_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IClimateGetter item,
            bool doMasks,
            out Climate_ErrorMask errorMask,
            string name = null)
        {
            Climate_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Climate_ErrorMask()) : default(Func<Climate_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IClimateGetter item,
            Func<Climate_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Climate"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Climate");
                    }
                    if (item.Weathers.HasBeenSet)
                    {
                        ListXmlTranslation<WeatherChance, MaskItem<Exception, WeatherChance_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Weathers),
                            item: item.Weathers,
                            fieldIndex: (int)Climate_FieldIndex.Weathers,
                            errorMask: errorMask,
                            transl: (WeatherChance subItem, bool listDoMasks, out MaskItem<Exception, WeatherChance_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<WeatherChance, WeatherChance_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.SunTexture_Property.HasBeenSet)
                    {
                        FilePathXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.SunTexture),
                            item: item.SunTexture_Property,
                            fieldIndex: (int)Climate_FieldIndex.SunTexture,
                            errorMask: errorMask);
                    }
                    if (item.SunGlareTexture_Property.HasBeenSet)
                    {
                        FilePathXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.SunGlareTexture),
                            item: item.SunGlareTexture_Property,
                            fieldIndex: (int)Climate_FieldIndex.SunGlareTexture,
                            errorMask: errorMask);
                    }
                    if (item.Model_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Model_Property,
                            name: nameof(item.Model),
                            fieldIndex: (int)Climate_FieldIndex.Model,
                            errorMask: errorMask);
                    }
                    DateTimeXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.SunriseBegin),
                        item: item.SunriseBegin_Property,
                        fieldIndex: (int)Climate_FieldIndex.SunriseBegin,
                        errorMask: errorMask);
                    DateTimeXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.SunriseEnd),
                        item: item.SunriseEnd_Property,
                        fieldIndex: (int)Climate_FieldIndex.SunriseEnd,
                        errorMask: errorMask);
                    DateTimeXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.SunsetBegin),
                        item: item.SunsetBegin_Property,
                        fieldIndex: (int)Climate_FieldIndex.SunsetBegin,
                        errorMask: errorMask);
                    DateTimeXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.SunsetEnd),
                        item: item.SunsetEnd_Property,
                        fieldIndex: (int)Climate_FieldIndex.SunsetEnd,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Volatility),
                        item: item.Volatility_Property,
                        fieldIndex: (int)Climate_FieldIndex.Volatility,
                        errorMask: errorMask);
                    EnumXmlTranslation<Climate.MoonPhase>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Phase),
                        item: item.Phase_Property,
                        fieldIndex: (int)Climate_FieldIndex.Phase,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.PhaseLength),
                        item: item.PhaseLength_Property,
                        fieldIndex: (int)Climate_FieldIndex.PhaseLength,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Climate item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Climate_ErrorMask errorMask)
        {
            Climate_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Climate_ErrorMask()) : default(Func<Climate_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Climate item,
            RecordTypeConverter recordTypeConverter,
            Func<Climate_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Climate_Registration.CLMT_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Climate item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Climate_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherChance, MaskItem<Exception, WeatherChance_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Weathers,
                fieldIndex: (int)Climate_FieldIndex.Weathers,
                recordType: Climate_Registration.WLST_HEADER,
                errorMask: errorMask,
                transl: (WeatherChance subItem, bool listDoMasks, out MaskItem<Exception, WeatherChance_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<WeatherChance, WeatherChance_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SunTexture_Property,
                fieldIndex: (int)Climate_FieldIndex.SunTexture,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Climate_Registration.FNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SunGlareTexture_Property,
                fieldIndex: (int)Climate_FieldIndex.SunGlareTexture,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Climate_Registration.GNAM_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Climate_FieldIndex.Model,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, Climate_Registration.TNAM_HEADER))
            {
                Climate.WriteBinary_SunriseBegin(
                    writer: writer,
                    item: item,
                    fieldIndex: (int)Climate_FieldIndex.SunriseBegin,
                    errorMask: errorMask);
                Climate.WriteBinary_SunriseEnd(
                    writer: writer,
                    item: item,
                    fieldIndex: (int)Climate_FieldIndex.SunriseEnd,
                    errorMask: errorMask);
                Climate.WriteBinary_SunsetBegin(
                    writer: writer,
                    item: item,
                    fieldIndex: (int)Climate_FieldIndex.SunsetBegin,
                    errorMask: errorMask);
                Climate.WriteBinary_SunsetEnd(
                    writer: writer,
                    item: item,
                    fieldIndex: (int)Climate_FieldIndex.SunsetEnd,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Volatility_Property,
                    fieldIndex: (int)Climate_FieldIndex.Volatility,
                    errorMask: errorMask);
                Climate.WriteBinary_Phase(
                    writer: writer,
                    item: item,
                    fieldIndex: (int)Climate_FieldIndex.Phase,
                    errorMask: errorMask);
                Climate.WriteBinary_PhaseLength(
                    writer: writer,
                    item: item,
                    fieldIndex: (int)Climate_FieldIndex.PhaseLength,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Climate_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Climate_Mask<T>>
    {
        #region Ctors
        public Climate_Mask()
        {
        }

        public Climate_Mask(T initialValue)
        {
            this.Weathers = new MaskItem<T, IEnumerable<MaskItem<T, WeatherChance_Mask<T>>>>(initialValue, null);
            this.SunTexture = initialValue;
            this.SunGlareTexture = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.SunriseBegin = initialValue;
            this.SunriseEnd = initialValue;
            this.SunsetBegin = initialValue;
            this.SunsetEnd = initialValue;
            this.Volatility = initialValue;
            this.Phase = initialValue;
            this.PhaseLength = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, WeatherChance_Mask<T>>>> Weathers;
        public T SunTexture;
        public T SunGlareTexture;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T SunriseBegin;
        public T SunriseEnd;
        public T SunsetBegin;
        public T SunsetEnd;
        public T Volatility;
        public T Phase;
        public T PhaseLength;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Climate_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Climate_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(this.SunTexture, rhs.SunTexture)) return false;
            if (!object.Equals(this.SunGlareTexture, rhs.SunGlareTexture)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.SunriseBegin, rhs.SunriseBegin)) return false;
            if (!object.Equals(this.SunriseEnd, rhs.SunriseEnd)) return false;
            if (!object.Equals(this.SunsetBegin, rhs.SunsetBegin)) return false;
            if (!object.Equals(this.SunsetEnd, rhs.SunsetEnd)) return false;
            if (!object.Equals(this.Volatility, rhs.Volatility)) return false;
            if (!object.Equals(this.Phase, rhs.Phase)) return false;
            if (!object.Equals(this.PhaseLength, rhs.PhaseLength)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Weathers?.GetHashCode());
            ret = ret.CombineHashCode(this.SunTexture?.GetHashCode());
            ret = ret.CombineHashCode(this.SunGlareTexture?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.SunriseBegin?.GetHashCode());
            ret = ret.CombineHashCode(this.SunriseEnd?.GetHashCode());
            ret = ret.CombineHashCode(this.SunsetBegin?.GetHashCode());
            ret = ret.CombineHashCode(this.SunsetEnd?.GetHashCode());
            ret = ret.CombineHashCode(this.Volatility?.GetHashCode());
            ret = ret.CombineHashCode(this.Phase?.GetHashCode());
            ret = ret.CombineHashCode(this.PhaseLength?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Weathers != null)
            {
                if (!eval(this.Weathers.Overall)) return false;
                if (this.Weathers.Specific != null)
                {
                    foreach (var item in this.Weathers.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.SunTexture)) return false;
            if (!eval(this.SunGlareTexture)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.SunriseBegin)) return false;
            if (!eval(this.SunriseEnd)) return false;
            if (!eval(this.SunsetBegin)) return false;
            if (!eval(this.SunsetEnd)) return false;
            if (!eval(this.Volatility)) return false;
            if (!eval(this.Phase)) return false;
            if (!eval(this.PhaseLength)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Climate_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Climate_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Climate_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Weathers != null)
            {
                obj.Weathers = new MaskItem<R, IEnumerable<MaskItem<R, WeatherChance_Mask<R>>>>();
                obj.Weathers.Overall = eval(this.Weathers.Overall);
                if (Weathers.Specific != null)
                {
                    List<MaskItem<R, WeatherChance_Mask<R>>> l = new List<MaskItem<R, WeatherChance_Mask<R>>>();
                    obj.Weathers.Specific = l;
                    foreach (var item in Weathers.Specific)
                    {
                        MaskItem<R, WeatherChance_Mask<R>> mask = default(MaskItem<R, WeatherChance_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, WeatherChance_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.SunTexture = eval(this.SunTexture);
            obj.SunGlareTexture = eval(this.SunGlareTexture);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.SunriseBegin = eval(this.SunriseBegin);
            obj.SunriseEnd = eval(this.SunriseEnd);
            obj.SunsetBegin = eval(this.SunsetBegin);
            obj.SunsetEnd = eval(this.SunsetEnd);
            obj.Volatility = eval(this.Volatility);
            obj.Phase = eval(this.Phase);
            obj.PhaseLength = eval(this.PhaseLength);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Weathers.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Climate_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Climate_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Climate_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weathers?.Overall ?? true)
                {
                    fg.AppendLine("Weathers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Weathers.Overall != null)
                        {
                            fg.AppendLine(Weathers.Overall.ToString());
                        }
                        if (Weathers.Specific != null)
                        {
                            foreach (var subItem in Weathers.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SunTexture ?? true)
                {
                    fg.AppendLine($"SunTexture => {SunTexture}");
                }
                if (printMask?.SunGlareTexture ?? true)
                {
                    fg.AppendLine($"SunGlareTexture => {SunGlareTexture}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.SunriseBegin ?? true)
                {
                    fg.AppendLine($"SunriseBegin => {SunriseBegin}");
                }
                if (printMask?.SunriseEnd ?? true)
                {
                    fg.AppendLine($"SunriseEnd => {SunriseEnd}");
                }
                if (printMask?.SunsetBegin ?? true)
                {
                    fg.AppendLine($"SunsetBegin => {SunsetBegin}");
                }
                if (printMask?.SunsetEnd ?? true)
                {
                    fg.AppendLine($"SunsetEnd => {SunsetEnd}");
                }
                if (printMask?.Volatility ?? true)
                {
                    fg.AppendLine($"Volatility => {Volatility}");
                }
                if (printMask?.Phase ?? true)
                {
                    fg.AppendLine($"Phase => {Phase}");
                }
                if (printMask?.PhaseLength ?? true)
                {
                    fg.AppendLine($"PhaseLength => {PhaseLength}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Climate_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Climate_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>> Weathers;
        public Exception SunTexture;
        public Exception SunGlareTexture;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception SunriseBegin;
        public Exception SunriseEnd;
        public Exception SunsetBegin;
        public Exception SunsetEnd;
        public Exception Volatility;
        public Exception Phase;
        public Exception PhaseLength;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    this.Weathers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>(ex, null);
                    break;
                case Climate_FieldIndex.SunTexture:
                    this.SunTexture = ex;
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    this.SunGlareTexture = ex;
                    break;
                case Climate_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    this.SunriseBegin = ex;
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    this.SunriseEnd = ex;
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    this.SunsetBegin = ex;
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    this.SunsetEnd = ex;
                    break;
                case Climate_FieldIndex.Volatility:
                    this.Volatility = ex;
                    break;
                case Climate_FieldIndex.Phase:
                    this.Phase = ex;
                    break;
                case Climate_FieldIndex.PhaseLength:
                    this.PhaseLength = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    this.Weathers = (MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>)obj;
                    break;
                case Climate_FieldIndex.SunTexture:
                    this.SunTexture = (Exception)obj;
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    this.SunGlareTexture = (Exception)obj;
                    break;
                case Climate_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    this.SunriseBegin = (Exception)obj;
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    this.SunriseEnd = (Exception)obj;
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    this.SunsetBegin = (Exception)obj;
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    this.SunsetEnd = (Exception)obj;
                    break;
                case Climate_FieldIndex.Volatility:
                    this.Volatility = (Exception)obj;
                    break;
                case Climate_FieldIndex.Phase:
                    this.Phase = (Exception)obj;
                    break;
                case Climate_FieldIndex.PhaseLength:
                    this.PhaseLength = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Weathers != null) return true;
            if (SunTexture != null) return true;
            if (SunGlareTexture != null) return true;
            if (Model != null) return true;
            if (SunriseBegin != null) return true;
            if (SunriseEnd != null) return true;
            if (SunsetBegin != null) return true;
            if (SunsetEnd != null) return true;
            if (Volatility != null) return true;
            if (Phase != null) return true;
            if (PhaseLength != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Climate_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Weathers =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Weathers.Overall != null)
                {
                    fg.AppendLine(Weathers.Overall.ToString());
                }
                if (Weathers.Specific != null)
                {
                    foreach (var subItem in Weathers.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"SunTexture => {SunTexture}");
            fg.AppendLine($"SunGlareTexture => {SunGlareTexture}");
            Model?.ToString(fg);
            fg.AppendLine($"SunriseBegin => {SunriseBegin}");
            fg.AppendLine($"SunriseEnd => {SunriseEnd}");
            fg.AppendLine($"SunsetBegin => {SunsetBegin}");
            fg.AppendLine($"SunsetEnd => {SunsetEnd}");
            fg.AppendLine($"Volatility => {Volatility}");
            fg.AppendLine($"Phase => {Phase}");
            fg.AppendLine($"PhaseLength => {PhaseLength}");
        }
        #endregion

        #region Combine
        public Climate_ErrorMask Combine(Climate_ErrorMask rhs)
        {
            var ret = new Climate_ErrorMask();
            ret.Weathers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>(this.Weathers.Overall.Combine(rhs.Weathers.Overall), new List<MaskItem<Exception, WeatherChance_ErrorMask>>(this.Weathers.Specific.And(rhs.Weathers.Specific)));
            ret.SunTexture = this.SunTexture.Combine(rhs.SunTexture);
            ret.SunGlareTexture = this.SunGlareTexture.Combine(rhs.SunGlareTexture);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.SunriseBegin = this.SunriseBegin.Combine(rhs.SunriseBegin);
            ret.SunriseEnd = this.SunriseEnd.Combine(rhs.SunriseEnd);
            ret.SunsetBegin = this.SunsetBegin.Combine(rhs.SunsetBegin);
            ret.SunsetEnd = this.SunsetEnd.Combine(rhs.SunsetEnd);
            ret.Volatility = this.Volatility.Combine(rhs.Volatility);
            ret.Phase = this.Phase.Combine(rhs.Phase);
            ret.PhaseLength = this.PhaseLength.Combine(rhs.PhaseLength);
            return ret;
        }
        public static Climate_ErrorMask Combine(Climate_ErrorMask lhs, Climate_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Climate_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, WeatherChance_CopyMask> Weathers;
        public bool SunTexture;
        public bool SunGlareTexture;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool SunriseBegin;
        public bool SunriseEnd;
        public bool SunsetBegin;
        public bool SunsetEnd;
        public bool Volatility;
        public bool Phase;
        public bool PhaseLength;
        #endregion

    }
    #endregion




    #endregion

}
