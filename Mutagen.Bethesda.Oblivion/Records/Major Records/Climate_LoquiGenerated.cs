/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Climate :
        OblivionMajorRecord,
        IClimate,
        IClimateInternal,
        ILoquiObject<Climate>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<Climate>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static Climate_Registration Registration => Climate_Registration.Instance;
        protected override object CommonInstance => ClimateCommon.Instance;

        #region Ctor
        protected Climate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<WeatherChance> _Weathers = new SourceSetList<WeatherChance>();
        public ISourceSetList<WeatherChance> Weathers => _Weathers;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<WeatherChance> IClimate.Weathers => _Weathers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IWeatherChanceGetter> IClimateGetter.Weathers => _Weathers;
        #endregion

        #endregion
        #region SunTexture
        public bool SunTexture_IsSet
        {
            get => _hasBeenSetTracker[(int)Climate_FieldIndex.SunTexture];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Climate_FieldIndex.SunTexture, nameof(SunTexture_IsSet));
        }
        bool IClimateGetter.SunTexture_IsSet => SunTexture_IsSet;
        private String _SunTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String SunTexture
        {
            get => this._SunTexture;
            set => SunTexture_Set(value);
        }
        String IClimateGetter.SunTexture => this.SunTexture;
        public void SunTexture_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _SunTexture, value, _hasBeenSetTracker, markSet, (int)Climate_FieldIndex.SunTexture, nameof(SunTexture), nameof(SunTexture_IsSet));
        }
        public void SunTexture_Unset()
        {
            this.SunTexture_Set(default(String), false);
        }
        #endregion
        #region SunGlareTexture
        public bool SunGlareTexture_IsSet
        {
            get => _hasBeenSetTracker[(int)Climate_FieldIndex.SunGlareTexture];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Climate_FieldIndex.SunGlareTexture, nameof(SunGlareTexture_IsSet));
        }
        bool IClimateGetter.SunGlareTexture_IsSet => SunGlareTexture_IsSet;
        private String _SunGlareTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String SunGlareTexture
        {
            get => this._SunGlareTexture;
            set => SunGlareTexture_Set(value);
        }
        String IClimateGetter.SunGlareTexture => this.SunGlareTexture;
        public void SunGlareTexture_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _SunGlareTexture, value, _hasBeenSetTracker, markSet, (int)Climate_FieldIndex.SunGlareTexture, nameof(SunGlareTexture), nameof(SunGlareTexture_IsSet));
        }
        public void SunGlareTexture_Unset()
        {
            this.SunGlareTexture_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Climate_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Climate_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool IClimateGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, markSet, (int)Climate_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IClimateGetter.Model => this.Model;
        #endregion
        #region SunriseBegin
        private DateTime _SunriseBegin;
        public DateTime SunriseBegin
        {
            get => this._SunriseBegin;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._SunriseBegin, value, nameof(SunriseBegin));
            }
        }
        #endregion
        #region SunriseEnd
        private DateTime _SunriseEnd;
        public DateTime SunriseEnd
        {
            get => this._SunriseEnd;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._SunriseEnd, value, nameof(SunriseEnd));
            }
        }
        #endregion
        #region SunsetBegin
        private DateTime _SunsetBegin;
        public DateTime SunsetBegin
        {
            get => this._SunsetBegin;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._SunsetBegin, value, nameof(SunsetBegin));
            }
        }
        #endregion
        #region SunsetEnd
        private DateTime _SunsetEnd;
        public DateTime SunsetEnd
        {
            get => this._SunsetEnd;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._SunsetEnd, value, nameof(SunsetEnd));
            }
        }
        #endregion
        #region Volatility
        private Byte _Volatility;
        public Byte Volatility
        {
            get => this._Volatility;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Volatility, value, nameof(Volatility));
            }
        }
        #endregion
        #region Phase
        private Climate.MoonPhase _Phase;
        public Climate.MoonPhase Phase
        {
            get => this._Phase;
            set
            {
                this.TNAMDataTypeState |= TNAMDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Phase, value, nameof(Phase));
            }
        }
        #endregion
        #region PhaseLength
        private Byte _PhaseLength;
        public Byte PhaseLength
        {
            get => _PhaseLength;
            set
            {
                this._PhaseLength = value.PutInRange(PhaseLength_Range.Min, PhaseLength_Range.Max);
            }
        }
        public static RangeUInt8 PhaseLength_Range = new RangeUInt8(0, 63);
        #endregion
        #region TNAMDataTypeState
        private Climate.TNAMDataType _TNAMDataTypeState;
        public Climate.TNAMDataType TNAMDataTypeState
        {
            get => this._TNAMDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._TNAMDataTypeState, value, nameof(TNAMDataTypeState));
        }
        Climate.TNAMDataType IClimateInternal.TNAMDataTypeState
        {
            get => this.TNAMDataTypeState;
            set => this.TNAMDataTypeState = value;
        }
        Climate.TNAMDataType IClimateInternalGetter.TNAMDataTypeState
        {
            get => this.TNAMDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask<Climate>.GetEqualsMask(Climate rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask(rhs, include);
        IMask<bool> IEqualsMask<IClimateGetter>.GetEqualsMask(IClimateGetter rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask(rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClimateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Climate rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Climate rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Weathers.HasBeenSet != rhs.Weathers.HasBeenSet) return false;
            if (Weathers.HasBeenSet)
            {
                if (!this.Weathers.SequenceEqual(rhs.Weathers)) return false;
            }
            if (SunTexture_IsSet != rhs.SunTexture_IsSet) return false;
            if (SunTexture_IsSet)
            {
                if (!string.Equals(this.SunTexture, rhs.SunTexture)) return false;
            }
            if (SunGlareTexture_IsSet != rhs.SunGlareTexture_IsSet) return false;
            if (SunGlareTexture_IsSet)
            {
                if (!string.Equals(this.SunGlareTexture, rhs.SunGlareTexture)) return false;
            }
            if (Model_IsSet != rhs.Model_IsSet) return false;
            if (Model_IsSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (this.SunriseBegin != rhs.SunriseBegin) return false;
            if (this.SunriseEnd != rhs.SunriseEnd) return false;
            if (this.SunsetBegin != rhs.SunsetBegin) return false;
            if (this.SunsetEnd != rhs.SunsetEnd) return false;
            if (this.Volatility != rhs.Volatility) return false;
            if (this.Phase != rhs.Phase) return false;
            if (this.PhaseLength != rhs.PhaseLength) return false;
            if (this.TNAMDataTypeState != rhs.TNAMDataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Weathers.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Weathers).CombineHashCode(ret);
            }
            if (SunTexture_IsSet)
            {
                ret = HashHelper.GetHashCode(SunTexture).CombineHashCode(ret);
            }
            if (SunGlareTexture_IsSet)
            {
                ret = HashHelper.GetHashCode(SunGlareTexture).CombineHashCode(ret);
            }
            if (Model_IsSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(SunriseBegin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunriseEnd).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunsetBegin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SunsetEnd).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Volatility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Phase).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PhaseLength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TNAMDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override IXmlTranslator XmlTranslator => ClimateXmlTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Climate Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Climate_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Climate Create_Xml(
            XElement node,
            out Climate_ErrorMask errorMask,
            bool doMasks = true,
            Climate_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Climate_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Climate Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Climate() : null;
                    break;
                default:
                    break;
            }
            var ret = new Climate();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ClimateXmlTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Climate Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Climate_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Climate Create_Xml(
            string path,
            out Climate_ErrorMask errorMask,
            Climate_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Climate Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Climate_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Climate Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Climate_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Climate Create_Xml(
            Stream stream,
            out Climate_ErrorMask errorMask,
            Climate_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Climate Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Climate_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElement_Xml(
            Climate item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasTNAMDataType":
                    item.TNAMDataTypeState |= Climate.TNAMDataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Climate_FieldIndex)index)
            {
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case Climate_FieldIndex.Weathers:
                    return Weathers.HasBeenSet;
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Climate_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum TNAMDataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Weathers.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Weathers.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public Climate(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Climate(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(Climate obj, Climate rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Climate(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override IBinaryTranslator BinaryTranslator => ClimateBinaryTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Climate Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Climate Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Climate_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Climate_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Climate Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Climate>(
                record: new Climate(),
                frame: frame,
                errorMask: errorMask,
                recType: Climate_Registration.CLMT_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        protected static void Fill_Binary_Structs(
            Climate item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Climate item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54534C57: // WLST
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherChance>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Weathers,
                        fieldIndex: (int)Climate_FieldIndex.Weathers,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out WeatherChance listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<WeatherChance>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.Weathers);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String SunTextureParse))
                    {
                        item.SunTexture = SunTextureParse;
                    }
                    else
                    {
                        item.SunTexture = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.SunTexture);
                }
                case 0x4D414E47: // GNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String SunGlareTextureParse))
                    {
                        item.SunGlareTexture = SunGlareTextureParse;
                    }
                    else
                    {
                        item.SunGlareTexture = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.SunGlareTexture);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.Create_Binary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.Model);
                }
                case 0x4D414E54: // TNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.TNAMDataTypeState = TNAMDataType.Has;
                    }
                    ClimateBinaryTranslation.FillBinary_SunriseBegin_Custom_Public(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    ClimateBinaryTranslation.FillBinary_SunriseEnd_Custom_Public(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    ClimateBinaryTranslation.FillBinary_SunsetBegin_Custom_Public(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    ClimateBinaryTranslation.FillBinary_SunsetEnd_Custom_Public(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    item.Volatility = dataFrame.ReadUInt8();
                    ClimateBinaryTranslation.FillBinary_Phase_Custom_Public(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    ClimateBinaryTranslation.FillBinary_PhaseLength_Custom_Public(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Climate_FieldIndex.PhaseLength);
                }
                default:
                    return OblivionMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Climate Copy(
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null)
        {
            return Climate.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Climate Copy(
            IClimateGetter item,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null)
        {
            Climate ret;
            if (item.GetType().Equals(typeof(Climate)))
            {
                ret = new Climate();
            }
            else
            {
                ret = (Climate)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Climate Copy_ToLoqui(
            IClimateGetter item,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null)
        {
            Climate ret;
            if (item.GetType().Equals(typeof(Climate)))
            {
                ret = new Climate() as Climate;
            }
            else
            {
                ret = (Climate)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IClimateGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IClimateGetter rhs,
            Climate_CopyMask copyMask,
            IClimateGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IClimateGetter rhs,
            out Climate_ErrorMask errorMask,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ClimateCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Climate_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IClimateGetter rhs,
            ErrorMaskBuilder errorMask,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null)
        {
            ClimateCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    this._Weathers.SetTo((IEnumerable<WeatherChance>)obj);
                    break;
                case Climate_FieldIndex.SunTexture:
                    this.SunTexture = (String)obj;
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    this.SunGlareTexture = (String)obj;
                    break;
                case Climate_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    this.SunriseBegin = (DateTime)obj;
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    this.SunriseEnd = (DateTime)obj;
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    this.SunsetBegin = (DateTime)obj;
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    this.SunsetEnd = (DateTime)obj;
                    break;
                case Climate_FieldIndex.Volatility:
                    this.Volatility = (Byte)obj;
                    break;
                case Climate_FieldIndex.Phase:
                    this.Phase = (Climate.MoonPhase)obj;
                    break;
                case Climate_FieldIndex.PhaseLength:
                    this.PhaseLength = (Byte)obj;
                    break;
                case Climate_FieldIndex.TNAMDataTypeState:
                    this.TNAMDataTypeState = (Climate.TNAMDataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            ClimateCommon.Instance.Clear(this);
        }

        public new static Climate Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Climate();
            foreach (var pair in fields)
            {
                CopyInInternal_Climate(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Climate(Climate obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Climate_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    obj._Weathers.SetTo((IEnumerable<WeatherChance>)pair.Value);
                    break;
                case Climate_FieldIndex.SunTexture:
                    obj.SunTexture = (String)pair.Value;
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    obj.SunGlareTexture = (String)pair.Value;
                    break;
                case Climate_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    obj.SunriseBegin = (DateTime)pair.Value;
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    obj.SunriseEnd = (DateTime)pair.Value;
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    obj.SunsetBegin = (DateTime)pair.Value;
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    obj.SunsetEnd = (DateTime)pair.Value;
                    break;
                case Climate_FieldIndex.Volatility:
                    obj.Volatility = (Byte)pair.Value;
                    break;
                case Climate_FieldIndex.Phase:
                    obj.Phase = (Climate.MoonPhase)pair.Value;
                    break;
                case Climate_FieldIndex.PhaseLength:
                    obj.PhaseLength = (Byte)pair.Value;
                    break;
                case Climate_FieldIndex.TNAMDataTypeState:
                    obj.TNAMDataTypeState = (Climate.TNAMDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IClimate :
        IClimateGetter,
        IOblivionMajorRecord,
        ILoquiClass<IClimate, IClimateGetter>,
        ILoquiClass<Climate, IClimateGetter>
    {
        new ISetList<WeatherChance> Weathers { get; }
        new String SunTexture { get; set; }
        new bool SunTexture_IsSet { get; set; }
        void SunTexture_Set(String item, bool hasBeenSet = true);
        void SunTexture_Unset();

        new String SunGlareTexture { get; set; }
        new bool SunGlareTexture_IsSet { get; set; }
        void SunGlareTexture_Set(String item, bool hasBeenSet = true);
        void SunGlareTexture_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model item, bool hasBeenSet = true);
        void Model_Unset();

        new DateTime SunriseBegin { get; set; }

        new DateTime SunriseEnd { get; set; }

        new DateTime SunsetBegin { get; set; }

        new DateTime SunsetEnd { get; set; }

        new Byte Volatility { get; set; }

        new Climate.MoonPhase Phase { get; set; }

        new Byte PhaseLength { get; set; }

        void CopyFieldsFrom(
            IClimateGetter rhs,
            ErrorMaskBuilder errorMask = null,
            Climate_CopyMask copyMask = null,
            IClimateGetter def = null);
    }

    public partial interface IClimateInternal :
        IOblivionMajorRecordInternal,
        IClimate,
        IClimateInternalGetter
    {
        new Climate.TNAMDataType TNAMDataTypeState { get; set; }

    }

    public partial interface IClimateGetter :
        IOblivionMajorRecordGetter,
        IXmlItem,
        IBinaryItem
    {
        #region Weathers
        IReadOnlySetList<IWeatherChanceGetter> Weathers { get; }
        #endregion
        #region SunTexture
        String SunTexture { get; }
        bool SunTexture_IsSet { get; }

        #endregion
        #region SunGlareTexture
        String SunGlareTexture { get; }
        bool SunGlareTexture_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region SunriseBegin
        DateTime SunriseBegin { get; }

        #endregion
        #region SunriseEnd
        DateTime SunriseEnd { get; }

        #endregion
        #region SunsetBegin
        DateTime SunsetBegin { get; }

        #endregion
        #region SunsetEnd
        DateTime SunsetEnd { get; }

        #endregion
        #region Volatility
        Byte Volatility { get; }

        #endregion
        #region Phase
        Climate.MoonPhase Phase { get; }

        #endregion
        #region PhaseLength
        Byte PhaseLength { get; }

        #endregion

    }

    public partial interface IClimateInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IClimateGetter
    {
        #region TNAMDataTypeState
        Climate.TNAMDataType TNAMDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ClimateMixIn
    {
        public static void Clear(this IClimateInternal item)
        {
            ((ClimateCommon)item.CommonInstance).Clear(item: item);
        }

        public static Climate_Mask<bool> GetEqualsMask(
            this IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Climate_Mask<bool>();
            ((ClimateCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static string ToString(
            this IClimateInternalGetter item,
            string name = null,
            Climate_Mask<bool> printMask = null)
        {
            return ((ClimateCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClimateInternalGetter item,
            FileGeneration fg,
            string name = null,
            Climate_Mask<bool> printMask = null)
        {
            ((ClimateCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClimateInternalGetter item,
            Climate_Mask<bool?> checkMask)
        {
            return ((ClimateCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Climate_Mask<bool> GetHasBeenSetMask(this IClimateGetter item)
        {
            var ret = new Climate_Mask<bool>();
            ((ClimateCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Climate_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Weathers = 5,
        SunTexture = 6,
        SunGlareTexture = 7,
        Model = 8,
        SunriseBegin = 9,
        SunriseEnd = 10,
        SunsetBegin = 11,
        SunsetEnd = 12,
        Volatility = 13,
        Phase = 14,
        PhaseLength = 15,
        TNAMDataTypeState = 16,
    }
    #endregion

    #region Registration
    public class Climate_Registration : ILoquiRegistration
    {
        public static readonly Climate_Registration Instance = new Climate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 105,
            version: 0);

        public const string GUID = "25ca8fab-7f62-4f8b-9c32-d65a3261ac05";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(Climate_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Climate_ErrorMask);

        public static readonly Type ClassType = typeof(Climate);

        public static readonly Type GetterType = typeof(IClimateGetter);

        public static readonly Type InternalGetterType = typeof(IClimateInternalGetter);

        public static readonly Type SetterType = typeof(IClimate);

        public static readonly Type InternalSetterType = typeof(IClimateInternal);

        public static readonly Type CommonType = typeof(ClimateCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Climate";

        public const string Name = "Climate";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "WEATHERS":
                    return (ushort)Climate_FieldIndex.Weathers;
                case "SUNTEXTURE":
                    return (ushort)Climate_FieldIndex.SunTexture;
                case "SUNGLARETEXTURE":
                    return (ushort)Climate_FieldIndex.SunGlareTexture;
                case "MODEL":
                    return (ushort)Climate_FieldIndex.Model;
                case "SUNRISEBEGIN":
                    return (ushort)Climate_FieldIndex.SunriseBegin;
                case "SUNRISEEND":
                    return (ushort)Climate_FieldIndex.SunriseEnd;
                case "SUNSETBEGIN":
                    return (ushort)Climate_FieldIndex.SunsetBegin;
                case "SUNSETEND":
                    return (ushort)Climate_FieldIndex.SunsetEnd;
                case "VOLATILITY":
                    return (ushort)Climate_FieldIndex.Volatility;
                case "PHASE":
                    return (ushort)Climate_FieldIndex.Phase;
                case "PHASELENGTH":
                    return (ushort)Climate_FieldIndex.PhaseLength;
                case "TNAMDATATYPESTATE":
                    return (ushort)Climate_FieldIndex.TNAMDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return true;
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.Model:
                    return true;
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return "Weathers";
                case Climate_FieldIndex.SunTexture:
                    return "SunTexture";
                case Climate_FieldIndex.SunGlareTexture:
                    return "SunGlareTexture";
                case Climate_FieldIndex.Model:
                    return "Model";
                case Climate_FieldIndex.SunriseBegin:
                    return "SunriseBegin";
                case Climate_FieldIndex.SunriseEnd:
                    return "SunriseEnd";
                case Climate_FieldIndex.SunsetBegin:
                    return "SunsetBegin";
                case Climate_FieldIndex.SunsetEnd:
                    return "SunsetEnd";
                case Climate_FieldIndex.Volatility:
                    return "Volatility";
                case Climate_FieldIndex.Phase:
                    return "Phase";
                case Climate_FieldIndex.PhaseLength:
                    return "PhaseLength";
                case Climate_FieldIndex.TNAMDataTypeState:
                    return "TNAMDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                case Climate_FieldIndex.SunTexture:
                case Climate_FieldIndex.SunGlareTexture:
                case Climate_FieldIndex.Model:
                case Climate_FieldIndex.SunriseBegin:
                case Climate_FieldIndex.SunriseEnd:
                case Climate_FieldIndex.SunsetBegin:
                case Climate_FieldIndex.SunsetEnd:
                case Climate_FieldIndex.Volatility:
                case Climate_FieldIndex.Phase:
                case Climate_FieldIndex.PhaseLength:
                case Climate_FieldIndex.TNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return typeof(SourceSetList<WeatherChance>);
                case Climate_FieldIndex.SunTexture:
                    return typeof(String);
                case Climate_FieldIndex.SunGlareTexture:
                    return typeof(String);
                case Climate_FieldIndex.Model:
                    return typeof(Model);
                case Climate_FieldIndex.SunriseBegin:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunriseEnd:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunsetBegin:
                    return typeof(DateTime);
                case Climate_FieldIndex.SunsetEnd:
                    return typeof(DateTime);
                case Climate_FieldIndex.Volatility:
                    return typeof(Byte);
                case Climate_FieldIndex.Phase:
                    return typeof(Climate.MoonPhase);
                case Climate_FieldIndex.PhaseLength:
                    return typeof(Byte);
                case Climate_FieldIndex.TNAMDataTypeState:
                    return typeof(Climate.TNAMDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlTranslation = typeof(ClimateXmlTranslation);
        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType WLST_HEADER = new RecordType("WLST");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLMT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryTranslation = typeof(ClimateBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClimateCommon : OblivionMajorRecordCommon
    {
        public static readonly ClimateCommon Instance = new ClimateCommon();
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IClimate item,
            IClimateGetter rhs,
            IClimateGetter def,
            ErrorMaskBuilder errorMask,
            Climate_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Weathers.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Weathers);
                try
                {
                    item.Weathers.SetToWithDefault<WeatherChance, IWeatherChanceGetter>(
                        rhs: rhs.Weathers,
                        def: def?.Weathers,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Weathers.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (WeatherChance)r;
                                case CopyOption.MakeCopy:
                                    return WeatherChance.Copy(
                                        r,
                                        copyMask?.Weathers?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Weathers.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SunTexture ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.SunTexture);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.SunTexture,
                        rhsHasBeenSet: rhs.SunTexture_IsSet,
                        defItem: def?.SunTexture ?? default(String),
                        defHasBeenSet: def?.SunTexture_IsSet ?? false,
                        outRhsItem: out var rhsSunTextureItem,
                        outDefItem: out var defSunTextureItem))
                    {
                        item.SunTexture = rhsSunTextureItem;
                    }
                    else
                    {
                        item.SunTexture_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SunGlareTexture ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.SunGlareTexture);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.SunGlareTexture,
                        rhsHasBeenSet: rhs.SunGlareTexture_IsSet,
                        defItem: def?.SunGlareTexture ?? default(String),
                        defHasBeenSet: def?.SunGlareTexture_IsSet ?? false,
                        outRhsItem: out var rhsSunGlareTextureItem,
                        outDefItem: out var defSunGlareTextureItem))
                    {
                        item.SunGlareTexture = rhsSunGlareTextureItem;
                    }
                    else
                    {
                        item.SunGlareTexture_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            item: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SunriseBegin ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.SunriseBegin);
                try
                {
                    item.SunriseBegin = rhs.SunriseBegin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SunriseEnd ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.SunriseEnd);
                try
                {
                    item.SunriseEnd = rhs.SunriseEnd;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SunsetBegin ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.SunsetBegin);
                try
                {
                    item.SunsetBegin = rhs.SunsetBegin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SunsetEnd ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.SunsetEnd);
                try
                {
                    item.SunsetEnd = rhs.SunsetEnd;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Volatility ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Volatility);
                try
                {
                    item.Volatility = rhs.Volatility;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Phase ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Phase);
                try
                {
                    item.Phase = rhs.Phase;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PhaseLength ?? true)
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.PhaseLength);
                try
                {
                    item.PhaseLength = rhs.PhaseLength;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IClimate item)
        {
            ClearPartial();
            item.Weathers.Unset();
            item.SunTexture_Unset();
            item.SunGlareTexture_Unset();
            item.Model_Unset();
            item.SunriseBegin = default(DateTime);
            item.SunriseEnd = default(DateTime);
            item.SunsetBegin = default(DateTime);
            item.SunsetEnd = default(DateTime);
            item.Volatility = default(Byte);
            item.Phase = default(Climate.MoonPhase);
            item.PhaseLength = default(Byte);
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecord item)
        {
            Clear(item: (IClimate)item);
        }

        public override void Clear(IMajorRecord item)
        {
            Clear(item: (IClimate)item);
        }

        public void FillEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            Climate_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Weathers = item.Weathers.CollectionEqualsHelper(
                rhs.Weathers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SunTexture = item.SunTexture_IsSet == rhs.SunTexture_IsSet && string.Equals(item.SunTexture, rhs.SunTexture);
            ret.SunGlareTexture = item.SunGlareTexture_IsSet == rhs.SunGlareTexture_IsSet && string.Equals(item.SunGlareTexture, rhs.SunGlareTexture);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.SunriseBegin = item.SunriseBegin == rhs.SunriseBegin;
            ret.SunriseEnd = item.SunriseEnd == rhs.SunriseEnd;
            ret.SunsetBegin = item.SunsetBegin == rhs.SunsetBegin;
            ret.SunsetEnd = item.SunsetEnd == rhs.SunsetEnd;
            ret.Volatility = item.Volatility == rhs.Volatility;
            ret.Phase = item.Phase == rhs.Phase;
            ret.PhaseLength = item.PhaseLength == rhs.PhaseLength;
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IClimateGetter item,
            string name = null,
            Climate_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IClimateGetter item,
            FileGeneration fg,
            string name = null,
            Climate_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Climate)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Climate)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IClimateGetter item,
            FileGeneration fg,
            Climate_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Weathers?.Overall ?? true)
            {
                fg.AppendLine("Weathers =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Weathers)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SunTexture ?? true)
            {
                fg.AppendLine($"SunTexture => {item.SunTexture}");
            }
            if (printMask?.SunGlareTexture ?? true)
            {
                fg.AppendLine($"SunGlareTexture => {item.SunGlareTexture}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.SunriseBegin ?? true)
            {
                fg.AppendLine($"SunriseBegin => {item.SunriseBegin}");
            }
            if (printMask?.SunriseEnd ?? true)
            {
                fg.AppendLine($"SunriseEnd => {item.SunriseEnd}");
            }
            if (printMask?.SunsetBegin ?? true)
            {
                fg.AppendLine($"SunsetBegin => {item.SunsetBegin}");
            }
            if (printMask?.SunsetEnd ?? true)
            {
                fg.AppendLine($"SunsetEnd => {item.SunsetEnd}");
            }
            if (printMask?.Volatility ?? true)
            {
                fg.AppendLine($"Volatility => {item.Volatility}");
            }
            if (printMask?.Phase ?? true)
            {
                fg.AppendLine($"Phase => {item.Phase}");
            }
            if (printMask?.PhaseLength ?? true)
            {
                fg.AppendLine($"PhaseLength => {item.PhaseLength}");
            }
            if (printMask?.TNAMDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IClimateGetter item,
            Climate_Mask<bool?> checkMask)
        {
            if (checkMask.Weathers.Overall.HasValue && checkMask.Weathers.Overall.Value != item.Weathers.HasBeenSet) return false;
            if (checkMask.SunTexture.HasValue && checkMask.SunTexture.Value != item.SunTexture_IsSet) return false;
            if (checkMask.SunGlareTexture.HasValue && checkMask.SunGlareTexture.Value != item.SunGlareTexture_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IClimateGetter item,
            Climate_Mask<bool> mask)
        {
            mask.Weathers = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WeatherChance_Mask<bool>>>>(item.Weathers.HasBeenSet, item.Weathers.WithIndex().Select((i) => new MaskItemIndexed<bool, WeatherChance_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.SunTexture = item.SunTexture_IsSet;
            mask.SunGlareTexture = item.SunGlareTexture_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.SunriseBegin = true;
            mask.SunriseEnd = true;
            mask.SunsetBegin = true;
            mask.SunsetEnd = true;
            mask.Volatility = true;
            mask.Phase = true;
            mask.PhaseLength = true;
            mask.TNAMDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Climate_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Climate_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ClimateXmlTranslation :
        OblivionMajorRecordXmlTranslation,
        IXmlTranslator
    {
        public new readonly static ClimateXmlTranslation Instance = new ClimateXmlTranslation();

        public static void WriteToNode_Xml(
            IClimateInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Weathers.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Climate_FieldIndex.Weathers) ?? true))
            {
                ListXmlTranslation<IWeatherChanceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Weathers),
                    item: item.Weathers,
                    fieldIndex: (int)Climate_FieldIndex.Weathers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Climate_FieldIndex.Weathers),
                    transl: (XElement subNode, IWeatherChanceGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        ((WeatherChanceXmlTranslation)((IXmlItem)subItem).XmlTranslator).Write(
                            item: subItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.SunTexture_IsSet
                && (translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunTexture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunTexture),
                    item: item.SunTexture,
                    fieldIndex: (int)Climate_FieldIndex.SunTexture,
                    errorMask: errorMask);
            }
            if (item.SunGlareTexture_IsSet
                && (translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunGlareTexture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunGlareTexture),
                    item: item.SunGlareTexture,
                    fieldIndex: (int)Climate_FieldIndex.SunGlareTexture,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                ((ModelXmlTranslation)((IXmlItem)item.Model).XmlTranslator).Write(
                    item: item.Model,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Climate_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Climate_FieldIndex.Model));
            }
            if (item.TNAMDataTypeState.HasFlag(Climate.TNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseBegin) ?? true))
                {
                    DateTimeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunriseBegin),
                        item: item.SunriseBegin,
                        fieldIndex: (int)Climate_FieldIndex.SunriseBegin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseEnd) ?? true))
                {
                    DateTimeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunriseEnd),
                        item: item.SunriseEnd,
                        fieldIndex: (int)Climate_FieldIndex.SunriseEnd,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetBegin) ?? true))
                {
                    DateTimeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunsetBegin),
                        item: item.SunsetBegin,
                        fieldIndex: (int)Climate_FieldIndex.SunsetBegin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetEnd) ?? true))
                {
                    DateTimeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunsetEnd),
                        item: item.SunsetEnd,
                        fieldIndex: (int)Climate_FieldIndex.SunsetEnd,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.Volatility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Volatility),
                        item: item.Volatility,
                        fieldIndex: (int)Climate_FieldIndex.Volatility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.Phase) ?? true))
                {
                    EnumXmlTranslation<Climate.MoonPhase>.Instance.Write(
                        node: node,
                        name: nameof(item.Phase),
                        item: item.Phase,
                        fieldIndex: (int)Climate_FieldIndex.Phase,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.PhaseLength) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PhaseLength),
                        item: item.PhaseLength,
                        fieldIndex: (int)Climate_FieldIndex.PhaseLength,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Climate_FieldIndex.TNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Climate.TNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.TNAMDataTypeState),
                    item: item.TNAMDataTypeState,
                    fieldIndex: (int)Climate_FieldIndex.TNAMDataTypeState,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            IClimateInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClimateXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            IClimateInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Weathers":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.Weathers);
                        if (ListXmlTranslation<WeatherChance>.Instance.Parse(
                            node: node,
                            enumer: out var WeathersItem,
                            transl: LoquiXmlTranslation<WeatherChance>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Weathers.SetTo(WeathersItem);
                        }
                        else
                        {
                            item.Weathers.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunTexture":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.SunTexture);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String SunTextureParse,
                            errorMask: errorMask))
                        {
                            item.SunTexture = SunTextureParse;
                        }
                        else
                        {
                            item.SunTexture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunGlareTexture":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.SunGlareTexture);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String SunGlareTextureParse,
                            errorMask: errorMask))
                        {
                            item.SunGlareTexture = SunGlareTextureParse;
                        }
                        else
                        {
                            item.SunGlareTexture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Climate_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunriseBegin":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.SunriseBegin);
                        if (DateTimeXmlTranslation.Instance.Parse(
                            node: node,
                            item: out DateTime SunriseBeginParse,
                            errorMask: errorMask))
                        {
                            item.SunriseBegin = SunriseBeginParse;
                        }
                        else
                        {
                            item.SunriseBegin = default(DateTime);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.TNAMDataTypeState |= Climate.TNAMDataType.Has;
                    break;
                case "SunriseEnd":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.SunriseEnd);
                        if (DateTimeXmlTranslation.Instance.Parse(
                            node: node,
                            item: out DateTime SunriseEndParse,
                            errorMask: errorMask))
                        {
                            item.SunriseEnd = SunriseEndParse;
                        }
                        else
                        {
                            item.SunriseEnd = default(DateTime);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunsetBegin":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.SunsetBegin);
                        if (DateTimeXmlTranslation.Instance.Parse(
                            node: node,
                            item: out DateTime SunsetBeginParse,
                            errorMask: errorMask))
                        {
                            item.SunsetBegin = SunsetBeginParse;
                        }
                        else
                        {
                            item.SunsetBegin = default(DateTime);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunsetEnd":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.SunsetEnd);
                        if (DateTimeXmlTranslation.Instance.Parse(
                            node: node,
                            item: out DateTime SunsetEndParse,
                            errorMask: errorMask))
                        {
                            item.SunsetEnd = SunsetEndParse;
                        }
                        else
                        {
                            item.SunsetEnd = default(DateTime);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Volatility":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.Volatility);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte VolatilityParse,
                            errorMask: errorMask))
                        {
                            item.Volatility = VolatilityParse;
                        }
                        else
                        {
                            item.Volatility = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Phase":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.Phase);
                        if (EnumXmlTranslation<Climate.MoonPhase>.Instance.Parse(
                            node: node,
                            item: out Climate.MoonPhase PhaseParse,
                            errorMask: errorMask))
                        {
                            item.Phase = PhaseParse;
                        }
                        else
                        {
                            item.Phase = default(Climate.MoonPhase);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PhaseLength":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.PhaseLength);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte PhaseLengthParse,
                            errorMask: errorMask))
                        {
                            item.PhaseLength = PhaseLengthParse;
                        }
                        else
                        {
                            item.PhaseLength = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TNAMDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Climate_FieldIndex.TNAMDataTypeState);
                        if (EnumXmlTranslation<Climate.TNAMDataType>.Instance.Parse(
                            node: node,
                            item: out Climate.TNAMDataType TNAMDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.TNAMDataTypeState = TNAMDataTypeStateParse;
                        }
                        else
                        {
                            item.TNAMDataTypeState = default(Climate.TNAMDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        public void Write(
            XElement node,
            IClimateInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Climate");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Climate");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClimateInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClimateInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClimateInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    #region Xml Write Mixins
    public static class ClimateXmlTranslationMixIn
    {
        public static void Write_Xml(
            this IClimateInternalGetter item,
            XElement node,
            out Climate_ErrorMask errorMask,
            bool doMasks = true,
            Climate_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClimateXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Climate_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this IClimateInternalGetter item,
            string path,
            out Climate_ErrorMask errorMask,
            Climate_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IClimateInternalGetter item,
            Stream stream,
            out Climate_ErrorMask errorMask,
            Climate_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Climate_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Climate_Mask<T>>
    {
        #region Ctors
        public Climate_Mask()
        {
        }

        public Climate_Mask(T initialValue)
        {
            this.Weathers = new MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherChance_Mask<T>>>>(initialValue, null);
            this.SunTexture = initialValue;
            this.SunGlareTexture = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.SunriseBegin = initialValue;
            this.SunriseEnd = initialValue;
            this.SunsetBegin = initialValue;
            this.SunsetEnd = initialValue;
            this.Volatility = initialValue;
            this.Phase = initialValue;
            this.PhaseLength = initialValue;
            this.TNAMDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherChance_Mask<T>>>> Weathers;
        public T SunTexture;
        public T SunGlareTexture;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T SunriseBegin;
        public T SunriseEnd;
        public T SunsetBegin;
        public T SunsetEnd;
        public T Volatility;
        public T Phase;
        public T PhaseLength;
        public T TNAMDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Climate_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Climate_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(this.SunTexture, rhs.SunTexture)) return false;
            if (!object.Equals(this.SunGlareTexture, rhs.SunGlareTexture)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.SunriseBegin, rhs.SunriseBegin)) return false;
            if (!object.Equals(this.SunriseEnd, rhs.SunriseEnd)) return false;
            if (!object.Equals(this.SunsetBegin, rhs.SunsetBegin)) return false;
            if (!object.Equals(this.SunsetEnd, rhs.SunsetEnd)) return false;
            if (!object.Equals(this.Volatility, rhs.Volatility)) return false;
            if (!object.Equals(this.Phase, rhs.Phase)) return false;
            if (!object.Equals(this.PhaseLength, rhs.PhaseLength)) return false;
            if (!object.Equals(this.TNAMDataTypeState, rhs.TNAMDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Weathers?.GetHashCode());
            ret = ret.CombineHashCode(this.SunTexture?.GetHashCode());
            ret = ret.CombineHashCode(this.SunGlareTexture?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.SunriseBegin?.GetHashCode());
            ret = ret.CombineHashCode(this.SunriseEnd?.GetHashCode());
            ret = ret.CombineHashCode(this.SunsetBegin?.GetHashCode());
            ret = ret.CombineHashCode(this.SunsetEnd?.GetHashCode());
            ret = ret.CombineHashCode(this.Volatility?.GetHashCode());
            ret = ret.CombineHashCode(this.Phase?.GetHashCode());
            ret = ret.CombineHashCode(this.PhaseLength?.GetHashCode());
            ret = ret.CombineHashCode(this.TNAMDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Weathers != null)
            {
                if (!eval(this.Weathers.Overall)) return false;
                if (this.Weathers.Specific != null)
                {
                    foreach (var item in this.Weathers.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.SunTexture)) return false;
            if (!eval(this.SunGlareTexture)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.SunriseBegin)) return false;
            if (!eval(this.SunriseEnd)) return false;
            if (!eval(this.SunsetBegin)) return false;
            if (!eval(this.SunsetEnd)) return false;
            if (!eval(this.Volatility)) return false;
            if (!eval(this.Phase)) return false;
            if (!eval(this.PhaseLength)) return false;
            if (!eval(this.TNAMDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Climate_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Climate_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Climate_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Weathers != null)
            {
                obj.Weathers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherChance_Mask<R>>>>();
                obj.Weathers.Overall = eval(this.Weathers.Overall);
                if (Weathers.Specific != null)
                {
                    List<MaskItemIndexed<R, WeatherChance_Mask<R>>> l = new List<MaskItemIndexed<R, WeatherChance_Mask<R>>>();
                    obj.Weathers.Specific = l;
                    foreach (var item in Weathers.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, WeatherChance_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, WeatherChance_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.SunTexture = eval(this.SunTexture);
            obj.SunGlareTexture = eval(this.SunGlareTexture);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.SunriseBegin = eval(this.SunriseBegin);
            obj.SunriseEnd = eval(this.SunriseEnd);
            obj.SunsetBegin = eval(this.SunsetBegin);
            obj.SunsetEnd = eval(this.SunsetEnd);
            obj.Volatility = eval(this.Volatility);
            obj.Phase = eval(this.Phase);
            obj.PhaseLength = eval(this.PhaseLength);
            obj.TNAMDataTypeState = eval(this.TNAMDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Weathers.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Climate_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Climate_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Climate_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weathers?.Overall ?? true)
                {
                    fg.AppendLine("Weathers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Weathers.Overall != null)
                        {
                            fg.AppendLine(Weathers.Overall.ToString());
                        }
                        if (Weathers.Specific != null)
                        {
                            foreach (var subItem in Weathers.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SunTexture ?? true)
                {
                    fg.AppendLine($"SunTexture => {SunTexture}");
                }
                if (printMask?.SunGlareTexture ?? true)
                {
                    fg.AppendLine($"SunGlareTexture => {SunGlareTexture}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.SunriseBegin ?? true)
                {
                    fg.AppendLine($"SunriseBegin => {SunriseBegin}");
                }
                if (printMask?.SunriseEnd ?? true)
                {
                    fg.AppendLine($"SunriseEnd => {SunriseEnd}");
                }
                if (printMask?.SunsetBegin ?? true)
                {
                    fg.AppendLine($"SunsetBegin => {SunsetBegin}");
                }
                if (printMask?.SunsetEnd ?? true)
                {
                    fg.AppendLine($"SunsetEnd => {SunsetEnd}");
                }
                if (printMask?.Volatility ?? true)
                {
                    fg.AppendLine($"Volatility => {Volatility}");
                }
                if (printMask?.Phase ?? true)
                {
                    fg.AppendLine($"Phase => {Phase}");
                }
                if (printMask?.PhaseLength ?? true)
                {
                    fg.AppendLine($"PhaseLength => {PhaseLength}");
                }
                if (printMask?.TNAMDataTypeState ?? true)
                {
                    fg.AppendLine($"TNAMDataTypeState => {TNAMDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Climate_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Climate_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>> Weathers;
        public Exception SunTexture;
        public Exception SunGlareTexture;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception SunriseBegin;
        public Exception SunriseEnd;
        public Exception SunsetBegin;
        public Exception SunsetEnd;
        public Exception Volatility;
        public Exception Phase;
        public Exception PhaseLength;
        public Exception TNAMDataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    return Weathers;
                case Climate_FieldIndex.SunTexture:
                    return SunTexture;
                case Climate_FieldIndex.SunGlareTexture:
                    return SunGlareTexture;
                case Climate_FieldIndex.Model:
                    return Model;
                case Climate_FieldIndex.SunriseBegin:
                    return SunriseBegin;
                case Climate_FieldIndex.SunriseEnd:
                    return SunriseEnd;
                case Climate_FieldIndex.SunsetBegin:
                    return SunsetBegin;
                case Climate_FieldIndex.SunsetEnd:
                    return SunsetEnd;
                case Climate_FieldIndex.Volatility:
                    return Volatility;
                case Climate_FieldIndex.Phase:
                    return Phase;
                case Climate_FieldIndex.PhaseLength:
                    return PhaseLength;
                case Climate_FieldIndex.TNAMDataTypeState:
                    return TNAMDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    this.Weathers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>(ex, null);
                    break;
                case Climate_FieldIndex.SunTexture:
                    this.SunTexture = ex;
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    this.SunGlareTexture = ex;
                    break;
                case Climate_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    this.SunriseBegin = ex;
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    this.SunriseEnd = ex;
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    this.SunsetBegin = ex;
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    this.SunsetEnd = ex;
                    break;
                case Climate_FieldIndex.Volatility:
                    this.Volatility = ex;
                    break;
                case Climate_FieldIndex.Phase:
                    this.Phase = ex;
                    break;
                case Climate_FieldIndex.PhaseLength:
                    this.PhaseLength = ex;
                    break;
                case Climate_FieldIndex.TNAMDataTypeState:
                    this.TNAMDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Climate_FieldIndex enu = (Climate_FieldIndex)index;
            switch (enu)
            {
                case Climate_FieldIndex.Weathers:
                    this.Weathers = (MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>)obj;
                    break;
                case Climate_FieldIndex.SunTexture:
                    this.SunTexture = (Exception)obj;
                    break;
                case Climate_FieldIndex.SunGlareTexture:
                    this.SunGlareTexture = (Exception)obj;
                    break;
                case Climate_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Climate_FieldIndex.SunriseBegin:
                    this.SunriseBegin = (Exception)obj;
                    break;
                case Climate_FieldIndex.SunriseEnd:
                    this.SunriseEnd = (Exception)obj;
                    break;
                case Climate_FieldIndex.SunsetBegin:
                    this.SunsetBegin = (Exception)obj;
                    break;
                case Climate_FieldIndex.SunsetEnd:
                    this.SunsetEnd = (Exception)obj;
                    break;
                case Climate_FieldIndex.Volatility:
                    this.Volatility = (Exception)obj;
                    break;
                case Climate_FieldIndex.Phase:
                    this.Phase = (Exception)obj;
                    break;
                case Climate_FieldIndex.PhaseLength:
                    this.PhaseLength = (Exception)obj;
                    break;
                case Climate_FieldIndex.TNAMDataTypeState:
                    this.TNAMDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Weathers != null) return true;
            if (SunTexture != null) return true;
            if (SunGlareTexture != null) return true;
            if (Model != null) return true;
            if (SunriseBegin != null) return true;
            if (SunriseEnd != null) return true;
            if (SunsetBegin != null) return true;
            if (SunsetEnd != null) return true;
            if (Volatility != null) return true;
            if (Phase != null) return true;
            if (PhaseLength != null) return true;
            if (TNAMDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Climate_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Weathers =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Weathers.Overall != null)
                {
                    fg.AppendLine(Weathers.Overall.ToString());
                }
                if (Weathers.Specific != null)
                {
                    foreach (var subItem in Weathers.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"SunTexture => {SunTexture}");
            fg.AppendLine($"SunGlareTexture => {SunGlareTexture}");
            Model?.ToString(fg);
            fg.AppendLine($"SunriseBegin => {SunriseBegin}");
            fg.AppendLine($"SunriseEnd => {SunriseEnd}");
            fg.AppendLine($"SunsetBegin => {SunsetBegin}");
            fg.AppendLine($"SunsetEnd => {SunsetEnd}");
            fg.AppendLine($"Volatility => {Volatility}");
            fg.AppendLine($"Phase => {Phase}");
            fg.AppendLine($"PhaseLength => {PhaseLength}");
            fg.AppendLine($"TNAMDataTypeState => {TNAMDataTypeState}");
        }
        #endregion

        #region Combine
        public Climate_ErrorMask Combine(Climate_ErrorMask rhs)
        {
            var ret = new Climate_ErrorMask();
            ret.Weathers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>(this.Weathers.Overall.Combine(rhs.Weathers.Overall), new List<MaskItem<Exception, WeatherChance_ErrorMask>>(this.Weathers.Specific.And(rhs.Weathers.Specific)));
            ret.SunTexture = this.SunTexture.Combine(rhs.SunTexture);
            ret.SunGlareTexture = this.SunGlareTexture.Combine(rhs.SunGlareTexture);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.SunriseBegin = this.SunriseBegin.Combine(rhs.SunriseBegin);
            ret.SunriseEnd = this.SunriseEnd.Combine(rhs.SunriseEnd);
            ret.SunsetBegin = this.SunsetBegin.Combine(rhs.SunsetBegin);
            ret.SunsetEnd = this.SunsetEnd.Combine(rhs.SunsetEnd);
            ret.Volatility = this.Volatility.Combine(rhs.Volatility);
            ret.Phase = this.Phase.Combine(rhs.Phase);
            ret.PhaseLength = this.PhaseLength.Combine(rhs.PhaseLength);
            ret.TNAMDataTypeState = this.TNAMDataTypeState.Combine(rhs.TNAMDataTypeState);
            return ret;
        }
        public static Climate_ErrorMask Combine(Climate_ErrorMask lhs, Climate_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Climate_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Climate_ErrorMask();
        }
        #endregion

    }
    public class Climate_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Climate_CopyMask()
        {
        }

        public Climate_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Weathers = new MaskItem<CopyOption, WeatherChance_CopyMask>(deepCopyOption, default);
            this.SunTexture = defaultOn;
            this.SunGlareTexture = defaultOn;
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.SunriseBegin = defaultOn;
            this.SunriseEnd = defaultOn;
            this.SunsetBegin = defaultOn;
            this.SunsetEnd = defaultOn;
            this.Volatility = defaultOn;
            this.Phase = defaultOn;
            this.PhaseLength = defaultOn;
            this.TNAMDataTypeState = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, WeatherChance_CopyMask> Weathers;
        public bool SunTexture;
        public bool SunGlareTexture;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool SunriseBegin;
        public bool SunriseEnd;
        public bool SunsetBegin;
        public bool SunsetEnd;
        public bool Volatility;
        public bool Phase;
        public bool PhaseLength;
        public bool TNAMDataTypeState;
        #endregion

    }

    public class Climate_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, WeatherChance_TranslationMask> Weathers;
        public bool SunTexture;
        public bool SunGlareTexture;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool SunriseBegin;
        public bool SunriseEnd;
        public bool SunsetBegin;
        public bool SunsetEnd;
        public bool Volatility;
        public bool Phase;
        public bool PhaseLength;
        public bool TNAMDataTypeState;
        #endregion

        #region Ctors
        public Climate_TranslationMask()
            : base()
        {
        }

        public Climate_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Weathers = new MaskItem<bool, WeatherChance_TranslationMask>(defaultOn, null);
            this.SunTexture = defaultOn;
            this.SunGlareTexture = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.SunriseBegin = defaultOn;
            this.SunriseEnd = defaultOn;
            this.SunsetBegin = defaultOn;
            this.SunsetEnd = defaultOn;
            this.Volatility = defaultOn;
            this.Phase = defaultOn;
            this.PhaseLength = defaultOn;
            this.TNAMDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Weathers?.Overall ?? true, Weathers?.Specific?.GetCrystal()));
            ret.Add((SunTexture, null));
            ret.Add((SunGlareTexture, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((SunriseBegin, null));
            ret.Add((SunriseEnd, null));
            ret.Add((SunsetBegin, null));
            ret.Add((SunsetEnd, null));
            ret.Add((Volatility, null));
            ret.Add((Phase, null));
            ret.Add((PhaseLength, null));
            ret.Add((TNAMDataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ClimateBinaryTranslation :
        OblivionMajorRecordBinaryTranslation,
        IBinaryTranslator
    {
        public new readonly static ClimateBinaryTranslation Instance = new ClimateBinaryTranslation();

        static partial void FillBinary_SunriseBegin_Custom(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_SunriseBegin_Custom_Public(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_SunriseBegin_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_SunriseBegin_Custom(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_SunriseBegin(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_SunriseBegin_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_SunriseEnd_Custom(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_SunriseEnd_Custom_Public(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_SunriseEnd_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_SunriseEnd_Custom(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_SunriseEnd(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_SunriseEnd_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_SunsetBegin_Custom(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_SunsetBegin_Custom_Public(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_SunsetBegin_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_SunsetBegin_Custom(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_SunsetBegin(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_SunsetBegin_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_SunsetEnd_Custom(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_SunsetEnd_Custom_Public(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_SunsetEnd_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_SunsetEnd_Custom(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_SunsetEnd(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_SunsetEnd_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_Phase_Custom(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_Phase_Custom_Public(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_Phase_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_Phase_Custom(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_Phase(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_Phase_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_PhaseLength_Custom(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_PhaseLength_Custom_Public(
            MutagenFrame frame,
            Climate item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_PhaseLength_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_PhaseLength_Custom(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_PhaseLength(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_PhaseLength_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IClimateInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IClimateInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Weathers.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IWeatherChanceGetter>.Instance.Write(
                    writer: writer,
                    items: item.Weathers,
                    fieldIndex: (int)Climate_FieldIndex.Weathers,
                    recordType: Climate_Registration.WLST_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IWeatherChanceGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        ((WeatherChanceBinaryTranslation)((IBinaryItem)subItem).BinaryTranslator).Write(
                            item: subItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.SunTexture_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SunTexture,
                    header: recordTypeConverter.ConvertToCustom(Climate_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.SunGlareTexture_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SunGlareTexture,
                    header: recordTypeConverter.ConvertToCustom(Climate_Registration.GNAM_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                ((ModelBinaryTranslation)((IBinaryItem)item.Model).BinaryTranslator).Write(
                    item: item.Model,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.TNAMDataTypeState.HasFlag(Climate.TNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Climate_Registration.TNAM_HEADER)))
                {
                    ClimateBinaryTranslation.WriteBinary_SunriseBegin(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                    ClimateBinaryTranslation.WriteBinary_SunriseEnd(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                    ClimateBinaryTranslation.WriteBinary_SunsetBegin(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                    ClimateBinaryTranslation.WriteBinary_SunsetEnd(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                    writer.Write(item.Volatility);
                    ClimateBinaryTranslation.WriteBinary_Phase(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                    ClimateBinaryTranslation.WriteBinary_PhaseLength(
                        writer: writer,
                        item: item,
                        errorMask: errorMask,
                        masterReferences: masterReferences);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IClimateInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Climate_Registration.CLMT_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClimateInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClimateInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClimateInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class ClimateBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this IClimateInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Climate_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClimateBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Climate_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
