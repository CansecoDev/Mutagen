/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class ClothingAbstract : NamedMajorRecord, IClothingAbstract, ILoquiObject<ClothingAbstract>, ILoquiObjectSetter, IEquatable<ClothingAbstract>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClothingAbstract_Registration.Instance;
        public new static ClothingAbstract_Registration Registration => ClothingAbstract_Registration.Instance;

        #region Ctor
        public ClothingAbstract()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> IClothingAbstractGetter.Script_Property => this.Script_Property;
        #endregion
        #region Enchantment
        public FormIDSetLink<Enchantment> Enchantment_Property { get; } = new FormIDSetLink<Enchantment>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Enchantment Enchantment { get => Enchantment_Property.Item; set => Enchantment_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Enchantment> IClothingAbstractGetter.Enchantment_Property => this.Enchantment_Property;
        #endregion
        #region EnchantmentPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<UInt16> _EnchantmentPoints = NotifyingSetItem.Factory<UInt16>(markAsSet: false);
        public INotifyingSetItem<UInt16> EnchantmentPoints_Property => _EnchantmentPoints;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 EnchantmentPoints
        {
            get => this._EnchantmentPoints.Item;
            set => this._EnchantmentPoints.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<UInt16> IClothingAbstract.EnchantmentPoints_Property => this.EnchantmentPoints_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<UInt16> IClothingAbstractGetter.EnchantmentPoints_Property => this.EnchantmentPoints_Property;
        #endregion
        #region BipedFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<BipedFlag> _BipedFlags = NotifyingItem.Factory<BipedFlag>();
        public INotifyingItem<BipedFlag> BipedFlags_Property => _BipedFlags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public BipedFlag BipedFlags
        {
            get => this._BipedFlags.Item;
            set => this._BipedFlags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<BipedFlag> IClothingAbstract.BipedFlags_Property => this.BipedFlags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<BipedFlag> IClothingAbstractGetter.BipedFlags_Property => this.BipedFlags_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<EquipmentFlag> _Flags = NotifyingItem.Factory<EquipmentFlag>();
        public INotifyingItem<EquipmentFlag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public EquipmentFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<EquipmentFlag> IClothingAbstract.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<EquipmentFlag> IClothingAbstractGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region MaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _MaleBipedModel = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> MaleBipedModel_Property => this._MaleBipedModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IClothingAbstractGetter.MaleBipedModel => this.MaleBipedModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model MaleBipedModel { get => _MaleBipedModel.Item; set => _MaleBipedModel.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IClothingAbstract.MaleBipedModel_Property => this.MaleBipedModel_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IClothingAbstractGetter.MaleBipedModel_Property => this.MaleBipedModel_Property;
        #endregion
        #region MaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _MaleWorldModel = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> MaleWorldModel_Property => this._MaleWorldModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IClothingAbstractGetter.MaleWorldModel => this.MaleWorldModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model MaleWorldModel { get => _MaleWorldModel.Item; set => _MaleWorldModel.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IClothingAbstract.MaleWorldModel_Property => this.MaleWorldModel_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IClothingAbstractGetter.MaleWorldModel_Property => this.MaleWorldModel_Property;
        #endregion
        #region MaleIcon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _MaleIcon = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> MaleIcon_Property => _MaleIcon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath MaleIcon
        {
            get => this._MaleIcon.Item;
            set => this._MaleIcon.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> IClothingAbstract.MaleIcon_Property => this.MaleIcon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> IClothingAbstractGetter.MaleIcon_Property => this.MaleIcon_Property;
        #endregion
        #region FemaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _FemaleBipedModel = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> FemaleBipedModel_Property => this._FemaleBipedModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IClothingAbstractGetter.FemaleBipedModel => this.FemaleBipedModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model FemaleBipedModel { get => _FemaleBipedModel.Item; set => _FemaleBipedModel.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IClothingAbstract.FemaleBipedModel_Property => this.FemaleBipedModel_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IClothingAbstractGetter.FemaleBipedModel_Property => this.FemaleBipedModel_Property;
        #endregion
        #region FemaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _FemaleWorldModel = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> FemaleWorldModel_Property => this._FemaleWorldModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IClothingAbstractGetter.FemaleWorldModel => this.FemaleWorldModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model FemaleWorldModel { get => _FemaleWorldModel.Item; set => _FemaleWorldModel.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IClothingAbstract.FemaleWorldModel_Property => this.FemaleWorldModel_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IClothingAbstractGetter.FemaleWorldModel_Property => this.FemaleWorldModel_Property;
        #endregion
        #region FemaleIcon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _FemaleIcon = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> FemaleIcon_Property => _FemaleIcon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath FemaleIcon
        {
            get => this._FemaleIcon.Item;
            set => this._FemaleIcon.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> IClothingAbstract.FemaleIcon_Property => this.FemaleIcon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> IClothingAbstractGetter.FemaleIcon_Property => this.FemaleIcon_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ClothingAbstractCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ClothingAbstractCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ClothingAbstractCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ClothingAbstractCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<ClothingAbstract>.GetEqualsMask(ClothingAbstract rhs) => ClothingAbstractCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IClothingAbstractGetter>.GetEqualsMask(IClothingAbstractGetter rhs) => ClothingAbstractCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ClothingAbstractCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ClothingAbstract_Mask<bool> printMask = null)
        {
            return ClothingAbstractCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClothingAbstractCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new ClothingAbstract_Mask<bool> GetHasBeenSetMask()
        {
            return ClothingAbstractCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ClothingAbstract rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ClothingAbstract rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (Enchantment_Property.HasBeenSet != rhs.Enchantment_Property.HasBeenSet) return false;
            if (Enchantment_Property.HasBeenSet)
            {
                if (!this.Enchantment_Property.Equals(rhs.Enchantment_Property)) return false;
            }
            if (EnchantmentPoints_Property.HasBeenSet != rhs.EnchantmentPoints_Property.HasBeenSet) return false;
            if (EnchantmentPoints_Property.HasBeenSet)
            {
                if (this.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            }
            if (this.BipedFlags != rhs.BipedFlags) return false;
            if (this.Flags != rhs.Flags) return false;
            if (MaleBipedModel_Property.HasBeenSet != rhs.MaleBipedModel_Property.HasBeenSet) return false;
            if (MaleBipedModel_Property.HasBeenSet)
            {
                if (!object.Equals(this.MaleBipedModel, rhs.MaleBipedModel)) return false;
            }
            if (MaleWorldModel_Property.HasBeenSet != rhs.MaleWorldModel_Property.HasBeenSet) return false;
            if (MaleWorldModel_Property.HasBeenSet)
            {
                if (!object.Equals(this.MaleWorldModel, rhs.MaleWorldModel)) return false;
            }
            if (MaleIcon_Property.HasBeenSet != rhs.MaleIcon_Property.HasBeenSet) return false;
            if (MaleIcon_Property.HasBeenSet)
            {
                if (!object.Equals(this.MaleIcon, rhs.MaleIcon)) return false;
            }
            if (FemaleBipedModel_Property.HasBeenSet != rhs.FemaleBipedModel_Property.HasBeenSet) return false;
            if (FemaleBipedModel_Property.HasBeenSet)
            {
                if (!object.Equals(this.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            }
            if (FemaleWorldModel_Property.HasBeenSet != rhs.FemaleWorldModel_Property.HasBeenSet) return false;
            if (FemaleWorldModel_Property.HasBeenSet)
            {
                if (!object.Equals(this.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            }
            if (FemaleIcon_Property.HasBeenSet != rhs.FemaleIcon_Property.HasBeenSet) return false;
            if (FemaleIcon_Property.HasBeenSet)
            {
                if (!object.Equals(this.FemaleIcon, rhs.FemaleIcon)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Enchantment_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Enchantment).CombineHashCode(ret);
            }
            if (EnchantmentPoints_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnchantmentPoints).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(BipedFlags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (MaleBipedModel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleBipedModel).CombineHashCode(ret);
            }
            if (MaleWorldModel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleWorldModel).CombineHashCode(ret);
            }
            if (MaleIcon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleIcon).CombineHashCode(ret);
            }
            if (FemaleBipedModel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleBipedModel).CombineHashCode(ret);
            }
            if (FemaleWorldModel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleWorldModel).CombineHashCode(ret);
            }
            if (FemaleIcon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleIcon).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<ClothingAbstract>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out ClothingAbstract_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<ClothingAbstract>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = ClothingAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out ClothingAbstract_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out ClothingAbstract_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out ClothingAbstract_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out ClothingAbstract_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as ClothingAbstract_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            ClothingAbstractCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            ClothingAbstract item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Script":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Script,
                        item: item.Script_Property,
                        errorMask: errorMask);
                    break;
                case "Enchantment":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Enchantment,
                        item: item.Enchantment_Property,
                        errorMask: errorMask);
                    break;
                case "EnchantmentPoints":
                    UInt16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.EnchantmentPoints,
                        item: item._EnchantmentPoints,
                        errorMask: errorMask);
                    break;
                case "BipedFlags":
                    EnumXmlTranslation<BipedFlag>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.BipedFlags,
                        item: item._BipedFlags,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    EnumXmlTranslation<EquipmentFlag>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Flags,
                        item: item._Flags,
                        errorMask: errorMask);
                    break;
                case "MaleBipedModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out var MaleBipedModelParse,
                            errorMask: errorMask))
                        {
                            item._MaleBipedModel.Item = MaleBipedModelParse;
                        }
                        else
                        {
                            item._MaleBipedModel.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleWorldModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out var MaleWorldModelParse,
                            errorMask: errorMask))
                        {
                            item._MaleWorldModel.Item = MaleWorldModelParse;
                        }
                        else
                        {
                            item._MaleWorldModel.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleIcon":
                    FilePathXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.MaleIcon,
                        item: item._MaleIcon,
                        errorMask: errorMask);
                    break;
                case "FemaleBipedModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out var FemaleBipedModelParse,
                            errorMask: errorMask))
                        {
                            item._FemaleBipedModel.Item = FemaleBipedModelParse;
                        }
                        else
                        {
                            item._FemaleBipedModel.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleWorldModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out var FemaleWorldModelParse,
                            errorMask: errorMask))
                        {
                            item._FemaleWorldModel.Item = FemaleWorldModelParse;
                        }
                        else
                        {
                            item._FemaleWorldModel.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleIcon":
                    FilePathXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleIcon,
                        item: item._FemaleIcon,
                        errorMask: errorMask);
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Enchantment_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as ClothingAbstract_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ClothingAbstractCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static TryGet<ClothingAbstract_FieldIndex?> Fill_Binary_RecordTypes(
            ClothingAbstract item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Script_Property,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Script,
                        errorMask: errorMask);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.Script);
                case "ENAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Enchantment_Property,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Enchantment,
                        errorMask: errorMask);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.Enchantment);
                case "ANAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._EnchantmentPoints,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.EnchantmentPoints,
                        errorMask: errorMask);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.EnchantmentPoints);
                case "BMDT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedFlag>.Instance.ParseInto(
                            frame: dataFrame.SpawnWithLength(2),
                            item: item._BipedFlags,
                            fieldIndex: (int)ClothingAbstract_FieldIndex.BipedFlags,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EquipmentFlag>.Instance.ParseInto(
                            frame: dataFrame.SpawnWithLength(2),
                            item: item._Flags,
                            fieldIndex: (int)ClothingAbstract_FieldIndex.Flags,
                            errorMask: errorMask);
                    }
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.Flags);
                case "MODL":
                    LoquiBinaryTranslation<Model>.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)ClothingAbstract_FieldIndex.MaleBipedModel,
                        errorMask: errorMask,
                        item: item._MaleBipedModel);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.MaleBipedModel);
                case "MOD2":
                    LoquiBinaryTranslation<Model>.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)ClothingAbstract_FieldIndex.MaleWorldModel,
                        errorMask: errorMask,
                        item: item._MaleWorldModel,
                        recordTypeConverter: ClothingAbstract_Registration.MaleWorldModelConverter);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.MaleWorldModel);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._MaleIcon,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.MaleIcon,
                        errorMask: errorMask);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.MaleIcon);
                case "MOD3":
                    LoquiBinaryTranslation<Model>.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleBipedModel,
                        errorMask: errorMask,
                        item: item._FemaleBipedModel,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleBipedModelConverter);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.FemaleBipedModel);
                case "MOD4":
                    LoquiBinaryTranslation<Model>.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleWorldModel,
                        errorMask: errorMask,
                        item: item._FemaleWorldModel,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleWorldModelConverter);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.FemaleWorldModel);
                case "ICO2":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._FemaleIcon,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleIcon,
                        errorMask: errorMask);
                    return TryGet<ClothingAbstract_FieldIndex?>.Succeed(ClothingAbstract_FieldIndex.FemaleIcon);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => ClothingAbstractCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public ClothingAbstract Copy(
            ClothingAbstract_CopyMask copyMask = null,
            IClothingAbstractGetter def = null)
        {
            return ClothingAbstract.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ClothingAbstract Copy(
            IClothingAbstract item,
            ClothingAbstract_CopyMask copyMask = null,
            IClothingAbstractGetter def = null)
        {
            ClothingAbstract ret = (ClothingAbstract)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ClothingAbstract Copy_ToLoqui(
            IClothingAbstractGetter item,
            ClothingAbstract_CopyMask copyMask = null,
            IClothingAbstractGetter def = null)
        {
            ClothingAbstract ret = (ClothingAbstract)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IClothingAbstractGetter rhs,
            ClothingAbstract_CopyMask copyMask,
            IClothingAbstractGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IClothingAbstractGetter rhs,
            out ClothingAbstract_ErrorMask errorMask,
            ClothingAbstract_CopyMask copyMask = null,
            IClothingAbstractGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ClothingAbstractCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = ClothingAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IClothingAbstractGetter rhs,
            ErrorMaskBuilder errorMask,
            ClothingAbstract_CopyMask copyMask = null,
            IClothingAbstractGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ClothingAbstractCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    this.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    this._EnchantmentPoints.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    this._BipedFlags.Set(
                        (BipedFlag)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    this._Flags.Set(
                        (EquipmentFlag)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    this._MaleBipedModel.Set(
                        (Model)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    this._MaleWorldModel.Set(
                        (Model)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    this._MaleIcon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    this._FemaleBipedModel.Set(
                        (Model)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    this._FemaleWorldModel.Set(
                        (Model)obj,
                        cmds);
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    this._FemaleIcon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ClothingAbstractCommon.Clear(this, cmds);
        }


        protected new static void CopyInInternal_ClothingAbstract(ClothingAbstract obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ClothingAbstract_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Set(
                        (FormIDSetLink<Enchantment>)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    obj._EnchantmentPoints.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    obj._BipedFlags.Set(
                        (BipedFlag)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    obj._Flags.Set(
                        (EquipmentFlag)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    obj._MaleBipedModel.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    obj._MaleWorldModel.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    obj._MaleIcon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    obj._FemaleBipedModel.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    obj._FemaleWorldModel.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    obj._FemaleIcon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ClothingAbstract obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IClothingAbstract : IClothingAbstractGetter, INamedMajorRecord, ILoquiClass<IClothingAbstract, IClothingAbstractGetter>, ILoquiClass<ClothingAbstract, IClothingAbstractGetter>
    {
        new Script Script { get; set; }
        new Enchantment Enchantment { get; set; }
        new UInt16 EnchantmentPoints { get; set; }
        new INotifyingSetItem<UInt16> EnchantmentPoints_Property { get; }

        new BipedFlag BipedFlags { get; set; }
        new INotifyingItem<BipedFlag> BipedFlags_Property { get; }

        new EquipmentFlag Flags { get; set; }
        new INotifyingItem<EquipmentFlag> Flags_Property { get; }

        new Model MaleBipedModel { get; set; }
        new INotifyingSetItem<Model> MaleBipedModel_Property { get; }

        new Model MaleWorldModel { get; set; }
        new INotifyingSetItem<Model> MaleWorldModel_Property { get; }

        new FilePath MaleIcon { get; set; }
        new INotifyingSetItem<FilePath> MaleIcon_Property { get; }

        new Model FemaleBipedModel { get; set; }
        new INotifyingSetItem<Model> FemaleBipedModel_Property { get; }

        new Model FemaleWorldModel { get; set; }
        new INotifyingSetItem<Model> FemaleWorldModel_Property { get; }

        new FilePath FemaleIcon { get; set; }
        new INotifyingSetItem<FilePath> FemaleIcon_Property { get; }

    }

    public partial interface IClothingAbstractGetter : INamedMajorRecordGetter
    {
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Enchantment
        Enchantment Enchantment { get; }
        FormIDSetLink<Enchantment> Enchantment_Property { get; }

        #endregion
        #region EnchantmentPoints
        UInt16 EnchantmentPoints { get; }
        INotifyingSetItemGetter<UInt16> EnchantmentPoints_Property { get; }

        #endregion
        #region BipedFlags
        BipedFlag BipedFlags { get; }
        INotifyingItemGetter<BipedFlag> BipedFlags_Property { get; }

        #endregion
        #region Flags
        EquipmentFlag Flags { get; }
        INotifyingItemGetter<EquipmentFlag> Flags_Property { get; }

        #endregion
        #region MaleBipedModel
        Model MaleBipedModel { get; }
        INotifyingSetItemGetter<Model> MaleBipedModel_Property { get; }

        #endregion
        #region MaleWorldModel
        Model MaleWorldModel { get; }
        INotifyingSetItemGetter<Model> MaleWorldModel_Property { get; }

        #endregion
        #region MaleIcon
        FilePath MaleIcon { get; }
        INotifyingSetItemGetter<FilePath> MaleIcon_Property { get; }

        #endregion
        #region FemaleBipedModel
        Model FemaleBipedModel { get; }
        INotifyingSetItemGetter<Model> FemaleBipedModel_Property { get; }

        #endregion
        #region FemaleWorldModel
        Model FemaleWorldModel { get; }
        INotifyingSetItemGetter<Model> FemaleWorldModel_Property { get; }

        #endregion
        #region FemaleIcon
        FilePath FemaleIcon { get; }
        INotifyingSetItemGetter<FilePath> FemaleIcon_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ClothingAbstract_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
    }
    #endregion

    #region Registration
    public class ClothingAbstract_Registration : ILoquiRegistration
    {
        public static readonly ClothingAbstract_Registration Instance = new ClothingAbstract_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 69,
            version: 0);

        public const string GUID = "45098216-a539-4788-84f5-ece76ab7abf2";

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(ClothingAbstract_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClothingAbstract_ErrorMask);

        public static readonly Type ClassType = typeof(ClothingAbstract);

        public static readonly Type GetterType = typeof(IClothingAbstractGetter);

        public static readonly Type SetterType = typeof(IClothingAbstract);

        public static readonly Type CommonType = typeof(ClothingAbstractCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ClothingAbstract";

        public const string Name = "ClothingAbstract";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SCRIPT":
                    return (ushort)ClothingAbstract_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)ClothingAbstract_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)ClothingAbstract_FieldIndex.EnchantmentPoints;
                case "BIPEDFLAGS":
                    return (ushort)ClothingAbstract_FieldIndex.BipedFlags;
                case "FLAGS":
                    return (ushort)ClothingAbstract_FieldIndex.Flags;
                case "MALEBIPEDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.MaleBipedModel;
                case "MALEWORLDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.MaleWorldModel;
                case "MALEICON":
                    return (ushort)ClothingAbstract_FieldIndex.MaleIcon;
                case "FEMALEBIPEDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleBipedModel;
                case "FEMALEWORLDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleWorldModel;
                case "FEMALEICON":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleIcon;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return true;
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    return "Script";
                case ClothingAbstract_FieldIndex.Enchantment:
                    return "Enchantment";
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return "BipedFlags";
                case ClothingAbstract_FieldIndex.Flags:
                    return "Flags";
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return "MaleBipedModel";
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return "MaleWorldModel";
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return "MaleIcon";
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return "FemaleBipedModel";
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return "FemaleWorldModel";
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return "FemaleIcon";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case ClothingAbstract_FieldIndex.Enchantment:
                    return typeof(FormIDSetLink<Enchantment>);
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return typeof(BipedFlag);
                case ClothingAbstract_FieldIndex.Flags:
                    return typeof(EquipmentFlag);
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return typeof(FilePath);
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return typeof(FilePath);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MOD2_HEADER = new RecordType("MOD2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MOD3_HEADER = new RecordType("MOD3");
        public static readonly RecordType MOD4_HEADER = new RecordType("MOD4");
        public static readonly RecordType ICO2_HEADER = new RecordType("ICO2");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FULL_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER
                    })
            );
        });
        public static RecordTypeConverter MaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD2"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO2B"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO2T"))
            );
        public static RecordTypeConverter FemaleBipedModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD3"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO3B"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO3T"))
            );
        public static RecordTypeConverter FemaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD4"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO4B"))
            ,
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO4T"))
            );
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ClothingAbstractCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IClothingAbstract item,
            IClothingAbstractGetter rhs,
            IClothingAbstractGetter def,
            ErrorMaskBuilder errorMask,
            ClothingAbstract_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Script ?? true)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Enchantment ?? true)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.Enchantment);
                try
                {
                    item.Enchantment_Property.SetToWithDefault(
                        rhs: rhs.Enchantment_Property,
                        def: def?.Enchantment_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.EnchantmentPoints ?? true)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.EnchantmentPoints);
                try
                {
                    item.EnchantmentPoints_Property.SetToWithDefault(
                        rhs: rhs.EnchantmentPoints_Property,
                        def: def?.EnchantmentPoints_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.BipedFlags ?? true)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.BipedFlags);
                try
                {
                    item.BipedFlags_Property.Set(
                        value: rhs.BipedFlags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MaleBipedModel.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                try
                {
                    item.MaleBipedModel_Property.SetToWithDefault(
                        rhs.MaleBipedModel_Property,
                        def?.MaleBipedModel_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.MaleBipedModel.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.MaleBipedModel,
                                        rhs: rhs.MaleBipedModel,
                                        def: def?.MaleBipedModel,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.MaleBipedModel.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.MaleBipedModel?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MaleBipedModel?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MaleWorldModel.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                try
                {
                    item.MaleWorldModel_Property.SetToWithDefault(
                        rhs.MaleWorldModel_Property,
                        def?.MaleWorldModel_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.MaleWorldModel.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.MaleWorldModel,
                                        rhs: rhs.MaleWorldModel,
                                        def: def?.MaleWorldModel,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.MaleWorldModel.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.MaleWorldModel?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MaleWorldModel?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MaleIcon ?? true)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.MaleIcon);
                try
                {
                    item.MaleIcon_Property.SetToWithDefault(
                        rhs: rhs.MaleIcon_Property,
                        def: def?.MaleIcon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FemaleBipedModel.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                try
                {
                    item.FemaleBipedModel_Property.SetToWithDefault(
                        rhs.FemaleBipedModel_Property,
                        def?.FemaleBipedModel_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.FemaleBipedModel.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.FemaleBipedModel,
                                        rhs: rhs.FemaleBipedModel,
                                        def: def?.FemaleBipedModel,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.FemaleBipedModel.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.FemaleBipedModel?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FemaleBipedModel?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FemaleWorldModel.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                try
                {
                    item.FemaleWorldModel_Property.SetToWithDefault(
                        rhs.FemaleWorldModel_Property,
                        def?.FemaleWorldModel_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.FemaleWorldModel.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.FemaleWorldModel,
                                        rhs: rhs.FemaleWorldModel,
                                        def: def?.FemaleWorldModel,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.FemaleWorldModel.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.FemaleWorldModel?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FemaleWorldModel?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FemaleIcon ?? true)
            {
                errorMask.PushIndex((int)ClothingAbstract_FieldIndex.FemaleIcon);
                try
                {
                    item.FemaleIcon_Property.SetToWithDefault(
                        rhs: rhs.FemaleIcon_Property,
                        def: def?.FemaleIcon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IClothingAbstract obj,
            NotifyingFireParameters cmds = null)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case ClothingAbstract_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    obj.Enchantment_Property.HasBeenSet = on;
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints_Property.HasBeenSet = on;
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    obj.MaleBipedModel_Property.HasBeenSet = on;
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    obj.MaleWorldModel_Property.HasBeenSet = on;
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    obj.MaleIcon_Property.HasBeenSet = on;
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    obj.FemaleBipedModel_Property.HasBeenSet = on;
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    obj.FemaleWorldModel_Property.HasBeenSet = on;
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    obj.FemaleIcon_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IClothingAbstract obj,
            NotifyingUnsetParameters cmds = null)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Unset(cmds);
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints_Property.Unset(cmds);
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    obj.BipedFlags = default(BipedFlag);
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    obj.Flags = default(EquipmentFlag);
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    obj.MaleBipedModel_Property.Unset(cmds);
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    obj.MaleWorldModel_Property.Unset(cmds);
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    obj.MaleIcon_Property.Unset(cmds);
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    obj.FemaleBipedModel_Property.Unset(cmds);
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    obj.FemaleWorldModel_Property.Unset(cmds);
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    obj.FemaleIcon_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IClothingAbstract obj)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                    return true;
                case ClothingAbstract_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.Enchantment:
                    return obj.Enchantment_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return obj.EnchantmentPoints_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return obj.MaleBipedModel_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return obj.MaleWorldModel_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return obj.MaleIcon_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return obj.FemaleBipedModel_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return obj.FemaleWorldModel_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return obj.FemaleIcon_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IClothingAbstractGetter obj)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    return obj.Script;
                case ClothingAbstract_FieldIndex.Enchantment:
                    return obj.Enchantment;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return obj.EnchantmentPoints;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return obj.BipedFlags;
                case ClothingAbstract_FieldIndex.Flags:
                    return obj.Flags;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return obj.MaleBipedModel;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return obj.MaleWorldModel;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return obj.MaleIcon;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return obj.FemaleBipedModel;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return obj.FemaleWorldModel;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return obj.FemaleIcon;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IClothingAbstract item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Enchantment_Property.Unset(cmds.ToUnsetParams());
            item.EnchantmentPoints_Property.Unset(cmds.ToUnsetParams());
            item.BipedFlags = default(BipedFlag);
            item.Flags = default(EquipmentFlag);
            item.MaleBipedModel_Property.Unset(cmds.ToUnsetParams());
            item.MaleWorldModel_Property.Unset(cmds.ToUnsetParams());
            item.MaleIcon_Property.Unset(cmds.ToUnsetParams());
            item.FemaleBipedModel_Property.Unset(cmds.ToUnsetParams());
            item.FemaleWorldModel_Property.Unset(cmds.ToUnsetParams());
            item.FemaleIcon_Property.Unset(cmds.ToUnsetParams());
        }

        public static ClothingAbstract_Mask<bool> GetEqualsMask(
            this IClothingAbstractGetter item,
            IClothingAbstractGetter rhs)
        {
            var ret = new ClothingAbstract_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IClothingAbstractGetter item,
            IClothingAbstractGetter rhs,
            ClothingAbstract_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Enchantment = item.Enchantment_Property.Equals(rhs.Enchantment_Property, (l, r) => l == r);
            ret.EnchantmentPoints = item.EnchantmentPoints_Property.Equals(rhs.EnchantmentPoints_Property, (l, r) => l == r);
            ret.BipedFlags = item.BipedFlags == rhs.BipedFlags;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaleBipedModel = item.MaleBipedModel_Property.LoquiEqualsHelper(rhs.MaleBipedModel_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.MaleWorldModel = item.MaleWorldModel_Property.LoquiEqualsHelper(rhs.MaleWorldModel_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.MaleIcon = item.MaleIcon_Property.Equals(rhs.MaleIcon_Property, (l, r) => object.Equals(l, r));
            ret.FemaleBipedModel = item.FemaleBipedModel_Property.LoquiEqualsHelper(rhs.FemaleBipedModel_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.FemaleWorldModel = item.FemaleWorldModel_Property.LoquiEqualsHelper(rhs.FemaleWorldModel_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.FemaleIcon = item.FemaleIcon_Property.Equals(rhs.FemaleIcon_Property, (l, r) => object.Equals(l, r));
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IClothingAbstractGetter item,
            string name = null,
            ClothingAbstract_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IClothingAbstractGetter item,
            FileGeneration fg,
            string name = null,
            ClothingAbstract_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ClothingAbstract)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ClothingAbstract)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {item.Enchantment_Property}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {item.EnchantmentPoints}");
                }
                if (printMask?.BipedFlags ?? true)
                {
                    fg.AppendLine($"BipedFlags => {item.BipedFlags}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.MaleBipedModel?.Overall ?? true)
                {
                    item.MaleBipedModel?.ToString(fg, "MaleBipedModel");
                }
                if (printMask?.MaleWorldModel?.Overall ?? true)
                {
                    item.MaleWorldModel?.ToString(fg, "MaleWorldModel");
                }
                if (printMask?.MaleIcon ?? true)
                {
                    fg.AppendLine($"MaleIcon => {item.MaleIcon}");
                }
                if (printMask?.FemaleBipedModel?.Overall ?? true)
                {
                    item.FemaleBipedModel?.ToString(fg, "FemaleBipedModel");
                }
                if (printMask?.FemaleWorldModel?.Overall ?? true)
                {
                    item.FemaleWorldModel?.ToString(fg, "FemaleWorldModel");
                }
                if (printMask?.FemaleIcon ?? true)
                {
                    fg.AppendLine($"FemaleIcon => {item.FemaleIcon}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IClothingAbstractGetter item,
            ClothingAbstract_Mask<bool?> checkMask)
        {
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment_Property.HasBeenSet) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != item.EnchantmentPoints_Property.HasBeenSet) return false;
            if (checkMask.MaleBipedModel.Overall.HasValue && checkMask.MaleBipedModel.Overall.Value != item.MaleBipedModel_Property.HasBeenSet) return false;
            if (checkMask.MaleBipedModel.Specific != null && (item.MaleBipedModel == null || !item.MaleBipedModel.HasBeenSet(checkMask.MaleBipedModel.Specific))) return false;
            if (checkMask.MaleWorldModel.Overall.HasValue && checkMask.MaleWorldModel.Overall.Value != item.MaleWorldModel_Property.HasBeenSet) return false;
            if (checkMask.MaleWorldModel.Specific != null && (item.MaleWorldModel == null || !item.MaleWorldModel.HasBeenSet(checkMask.MaleWorldModel.Specific))) return false;
            if (checkMask.MaleIcon.HasValue && checkMask.MaleIcon.Value != item.MaleIcon_Property.HasBeenSet) return false;
            if (checkMask.FemaleBipedModel.Overall.HasValue && checkMask.FemaleBipedModel.Overall.Value != item.FemaleBipedModel_Property.HasBeenSet) return false;
            if (checkMask.FemaleBipedModel.Specific != null && (item.FemaleBipedModel == null || !item.FemaleBipedModel.HasBeenSet(checkMask.FemaleBipedModel.Specific))) return false;
            if (checkMask.FemaleWorldModel.Overall.HasValue && checkMask.FemaleWorldModel.Overall.Value != item.FemaleWorldModel_Property.HasBeenSet) return false;
            if (checkMask.FemaleWorldModel.Specific != null && (item.FemaleWorldModel == null || !item.FemaleWorldModel.HasBeenSet(checkMask.FemaleWorldModel.Specific))) return false;
            if (checkMask.FemaleIcon.HasValue && checkMask.FemaleIcon.Value != item.FemaleIcon_Property.HasBeenSet) return false;
            return true;
        }

        public static ClothingAbstract_Mask<bool> GetHasBeenSetMask(IClothingAbstractGetter item)
        {
            var ret = new ClothingAbstract_Mask<bool>();
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Enchantment = item.Enchantment_Property.HasBeenSet;
            ret.EnchantmentPoints = item.EnchantmentPoints_Property.HasBeenSet;
            ret.BipedFlags = true;
            ret.Flags = true;
            ret.MaleBipedModel = new MaskItem<bool, Model_Mask<bool>>(item.MaleBipedModel_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.MaleBipedModel));
            ret.MaleWorldModel = new MaskItem<bool, Model_Mask<bool>>(item.MaleWorldModel_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.MaleWorldModel));
            ret.MaleIcon = item.MaleIcon_Property.HasBeenSet;
            ret.FemaleBipedModel = new MaskItem<bool, Model_Mask<bool>>(item.FemaleBipedModel_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.FemaleBipedModel));
            ret.FemaleWorldModel = new MaskItem<bool, Model_Mask<bool>>(item.FemaleWorldModel_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.FemaleWorldModel));
            ret.FemaleIcon = item.FemaleIcon_Property.HasBeenSet;
            return ret;
        }

        public static ClothingAbstract_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static ClothingAbstract_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (ClothingAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static ClothingAbstract_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static ClothingAbstract_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (ClothingAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IClothingAbstractGetter item,
            bool doMasks,
            out ClothingAbstract_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = ClothingAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_XML_Internal(
            XElement node,
            IClothingAbstractGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ClothingAbstract");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ClothingAbstract");
            }
            if (item.Script_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Script),
                    item: item.Script?.FormID,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Enchantment_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Enchantment),
                    item: item.Enchantment?.FormID,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Enchantment,
                    errorMask: errorMask);
            }
            if (item.EnchantmentPoints_Property.HasBeenSet)
            {
                UInt16XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.EnchantmentPoints),
                    item: item.EnchantmentPoints_Property,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.EnchantmentPoints,
                    errorMask: errorMask);
            }
            EnumXmlTranslation<BipedFlag>.Instance.Write(
                node: elem,
                name: nameof(item.BipedFlags),
                item: item.BipedFlags_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.BipedFlags,
                errorMask: errorMask);
            EnumXmlTranslation<EquipmentFlag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.Flags,
                errorMask: errorMask);
            if (item.MaleBipedModel_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.MaleBipedModel_Property,
                    name: nameof(item.MaleBipedModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleBipedModel,
                    errorMask: errorMask);
            }
            if (item.MaleWorldModel_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.MaleWorldModel_Property,
                    name: nameof(item.MaleWorldModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleWorldModel,
                    errorMask: errorMask);
            }
            if (item.MaleIcon_Property.HasBeenSet)
            {
                FilePathXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.MaleIcon),
                    item: item.MaleIcon_Property,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleIcon,
                    errorMask: errorMask);
            }
            if (item.FemaleBipedModel_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.FemaleBipedModel_Property,
                    name: nameof(item.FemaleBipedModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleBipedModel,
                    errorMask: errorMask);
            }
            if (item.FemaleWorldModel_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.FemaleWorldModel_Property,
                    name: nameof(item.FemaleWorldModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleWorldModel,
                    errorMask: errorMask);
            }
            if (item.FemaleIcon_Property.HasBeenSet)
            {
                FilePathXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FemaleIcon),
                    item: item.FemaleIcon_Property,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleIcon,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ClothingAbstract item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out ClothingAbstract_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = ClothingAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            ClothingAbstract item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask);
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            ClothingAbstract item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Enchantment_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.Enchantment,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ENAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantmentPoints_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.EnchantmentPoints,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ANAM_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, ClothingAbstract_Registration.BMDT_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedFlag>.Instance.Write(
                    writer,
                    item.BipedFlags_Property,
                    length: 2,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.BipedFlags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<EquipmentFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: 2,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.MaleBipedModel_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.MaleBipedModel,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.MaleWorldModel_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.MaleWorldModel,
                errorMask: errorMask,
                recordTypeConverter: ClothingAbstract_Registration.MaleWorldModelConverter);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaleIcon_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.MaleIcon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ICON_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.FemaleBipedModel_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleBipedModel,
                errorMask: errorMask,
                recordTypeConverter: ClothingAbstract_Registration.FemaleBipedModelConverter);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.FemaleWorldModel_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleWorldModel,
                errorMask: errorMask,
                recordTypeConverter: ClothingAbstract_Registration.FemaleWorldModelConverter);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FemaleIcon_Property,
                fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleIcon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ICO2_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class ClothingAbstract_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<ClothingAbstract_Mask<T>>
    {
        #region Ctors
        public ClothingAbstract_Mask()
        {
        }

        public ClothingAbstract_Mask(T initialValue)
        {
            this.Script = initialValue;
            this.Enchantment = initialValue;
            this.EnchantmentPoints = initialValue;
            this.BipedFlags = initialValue;
            this.Flags = initialValue;
            this.MaleBipedModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.MaleWorldModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.MaleIcon = initialValue;
            this.FemaleBipedModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.FemaleWorldModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.FemaleIcon = initialValue;
        }
        #endregion

        #region Members
        public T Script;
        public T Enchantment;
        public T EnchantmentPoints;
        public T BipedFlags;
        public T Flags;
        public MaskItem<T, Model_Mask<T>> MaleBipedModel { get; set; }
        public MaskItem<T, Model_Mask<T>> MaleWorldModel { get; set; }
        public T MaleIcon;
        public MaskItem<T, Model_Mask<T>> FemaleBipedModel { get; set; }
        public MaskItem<T, Model_Mask<T>> FemaleWorldModel { get; set; }
        public T FemaleIcon;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ClothingAbstract_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ClothingAbstract_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
            if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
            if (!object.Equals(this.BipedFlags, rhs.BipedFlags)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.MaleBipedModel, rhs.MaleBipedModel)) return false;
            if (!object.Equals(this.MaleWorldModel, rhs.MaleWorldModel)) return false;
            if (!object.Equals(this.MaleIcon, rhs.MaleIcon)) return false;
            if (!object.Equals(this.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            if (!object.Equals(this.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            if (!object.Equals(this.FemaleIcon, rhs.FemaleIcon)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantmentPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.BipedFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleBipedModel?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleWorldModel?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleIcon?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleBipedModel?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleWorldModel?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleIcon?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Enchantment)) return false;
            if (!eval(this.EnchantmentPoints)) return false;
            if (!eval(this.BipedFlags)) return false;
            if (!eval(this.Flags)) return false;
            if (MaleBipedModel != null)
            {
                if (!eval(this.MaleBipedModel.Overall)) return false;
                if (this.MaleBipedModel.Specific != null && !this.MaleBipedModel.Specific.AllEqual(eval)) return false;
            }
            if (MaleWorldModel != null)
            {
                if (!eval(this.MaleWorldModel.Overall)) return false;
                if (this.MaleWorldModel.Specific != null && !this.MaleWorldModel.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.MaleIcon)) return false;
            if (FemaleBipedModel != null)
            {
                if (!eval(this.FemaleBipedModel.Overall)) return false;
                if (this.FemaleBipedModel.Specific != null && !this.FemaleBipedModel.Specific.AllEqual(eval)) return false;
            }
            if (FemaleWorldModel != null)
            {
                if (!eval(this.FemaleWorldModel.Overall)) return false;
                if (this.FemaleWorldModel.Specific != null && !this.FemaleWorldModel.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.FemaleIcon)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new ClothingAbstract_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ClothingAbstract_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ClothingAbstract_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Script = eval(this.Script);
            obj.Enchantment = eval(this.Enchantment);
            obj.EnchantmentPoints = eval(this.EnchantmentPoints);
            obj.BipedFlags = eval(this.BipedFlags);
            obj.Flags = eval(this.Flags);
            if (this.MaleBipedModel != null)
            {
                obj.MaleBipedModel = new MaskItem<R, Model_Mask<R>>();
                obj.MaleBipedModel.Overall = eval(this.MaleBipedModel.Overall);
                if (this.MaleBipedModel.Specific != null)
                {
                    obj.MaleBipedModel.Specific = this.MaleBipedModel.Specific.Translate(eval);
                }
            }
            if (this.MaleWorldModel != null)
            {
                obj.MaleWorldModel = new MaskItem<R, Model_Mask<R>>();
                obj.MaleWorldModel.Overall = eval(this.MaleWorldModel.Overall);
                if (this.MaleWorldModel.Specific != null)
                {
                    obj.MaleWorldModel.Specific = this.MaleWorldModel.Specific.Translate(eval);
                }
            }
            obj.MaleIcon = eval(this.MaleIcon);
            if (this.FemaleBipedModel != null)
            {
                obj.FemaleBipedModel = new MaskItem<R, Model_Mask<R>>();
                obj.FemaleBipedModel.Overall = eval(this.FemaleBipedModel.Overall);
                if (this.FemaleBipedModel.Specific != null)
                {
                    obj.FemaleBipedModel.Specific = this.FemaleBipedModel.Specific.Translate(eval);
                }
            }
            if (this.FemaleWorldModel != null)
            {
                obj.FemaleWorldModel = new MaskItem<R, Model_Mask<R>>();
                obj.FemaleWorldModel.Overall = eval(this.FemaleWorldModel.Overall);
                if (this.FemaleWorldModel.Specific != null)
                {
                    obj.FemaleWorldModel.Specific = this.FemaleWorldModel.Specific.Translate(eval);
                }
            }
            obj.FemaleIcon = eval(this.FemaleIcon);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ClothingAbstract_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ClothingAbstract_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ClothingAbstract_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {Enchantment}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                }
                if (printMask?.BipedFlags ?? true)
                {
                    fg.AppendLine($"BipedFlags => {BipedFlags}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.MaleBipedModel?.Overall ?? true)
                {
                    MaleBipedModel?.ToString(fg);
                }
                if (printMask?.MaleWorldModel?.Overall ?? true)
                {
                    MaleWorldModel?.ToString(fg);
                }
                if (printMask?.MaleIcon ?? true)
                {
                    fg.AppendLine($"MaleIcon => {MaleIcon}");
                }
                if (printMask?.FemaleBipedModel?.Overall ?? true)
                {
                    FemaleBipedModel?.ToString(fg);
                }
                if (printMask?.FemaleWorldModel?.Overall ?? true)
                {
                    FemaleWorldModel?.ToString(fg);
                }
                if (printMask?.FemaleIcon ?? true)
                {
                    fg.AppendLine($"FemaleIcon => {FemaleIcon}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ClothingAbstract_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<ClothingAbstract_ErrorMask>
    {
        #region Members
        public Exception Script;
        public Exception Enchantment;
        public Exception EnchantmentPoints;
        public Exception BipedFlags;
        public Exception Flags;
        public MaskItem<Exception, Model_ErrorMask> MaleBipedModel;
        public MaskItem<Exception, Model_ErrorMask> MaleWorldModel;
        public Exception MaleIcon;
        public MaskItem<Exception, Model_ErrorMask> FemaleBipedModel;
        public MaskItem<Exception, Model_ErrorMask> FemaleWorldModel;
        public Exception FemaleIcon;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    return Script;
                case ClothingAbstract_FieldIndex.Enchantment:
                    return Enchantment;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return BipedFlags;
                case ClothingAbstract_FieldIndex.Flags:
                    return Flags;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return MaleBipedModel;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return MaleWorldModel;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return MaleIcon;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return FemaleBipedModel;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return FemaleWorldModel;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return FemaleIcon;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    this.Enchantment = ex;
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = ex;
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    this.BipedFlags = ex;
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    this.MaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    this.MaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    this.MaleIcon = ex;
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    this.FemaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    this.FemaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    this.FemaleIcon = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    this.Enchantment = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    this.BipedFlags = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    this.MaleBipedModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    this.MaleWorldModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    this.MaleIcon = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    this.FemaleBipedModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    this.FemaleWorldModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    this.FemaleIcon = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Script != null) return true;
            if (Enchantment != null) return true;
            if (EnchantmentPoints != null) return true;
            if (BipedFlags != null) return true;
            if (Flags != null) return true;
            if (MaleBipedModel != null) return true;
            if (MaleWorldModel != null) return true;
            if (MaleIcon != null) return true;
            if (FemaleBipedModel != null) return true;
            if (FemaleWorldModel != null) return true;
            if (FemaleIcon != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("ClothingAbstract_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Enchantment => {Enchantment}");
            fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
            fg.AppendLine($"BipedFlags => {BipedFlags}");
            fg.AppendLine($"Flags => {Flags}");
            MaleBipedModel?.ToString(fg);
            MaleWorldModel?.ToString(fg);
            fg.AppendLine($"MaleIcon => {MaleIcon}");
            FemaleBipedModel?.ToString(fg);
            FemaleWorldModel?.ToString(fg);
            fg.AppendLine($"FemaleIcon => {FemaleIcon}");
        }
        #endregion

        #region Combine
        public ClothingAbstract_ErrorMask Combine(ClothingAbstract_ErrorMask rhs)
        {
            var ret = new ClothingAbstract_ErrorMask();
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
            ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
            ret.BipedFlags = this.BipedFlags.Combine(rhs.BipedFlags);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.MaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(this.MaleBipedModel.Overall.Combine(rhs.MaleBipedModel.Overall), ((IErrorMask<Model_ErrorMask>)this.MaleBipedModel.Specific).Combine(rhs.MaleBipedModel.Specific));
            ret.MaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(this.MaleWorldModel.Overall.Combine(rhs.MaleWorldModel.Overall), ((IErrorMask<Model_ErrorMask>)this.MaleWorldModel.Specific).Combine(rhs.MaleWorldModel.Specific));
            ret.MaleIcon = this.MaleIcon.Combine(rhs.MaleIcon);
            ret.FemaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(this.FemaleBipedModel.Overall.Combine(rhs.FemaleBipedModel.Overall), ((IErrorMask<Model_ErrorMask>)this.FemaleBipedModel.Specific).Combine(rhs.FemaleBipedModel.Specific));
            ret.FemaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(this.FemaleWorldModel.Overall.Combine(rhs.FemaleWorldModel.Overall), ((IErrorMask<Model_ErrorMask>)this.FemaleWorldModel.Specific).Combine(rhs.FemaleWorldModel.Specific));
            ret.FemaleIcon = this.FemaleIcon.Combine(rhs.FemaleIcon);
            return ret;
        }
        public static ClothingAbstract_ErrorMask Combine(ClothingAbstract_ErrorMask lhs, ClothingAbstract_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ClothingAbstract_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            throw new NotImplementedException();
        }
        #endregion

    }
    public class ClothingAbstract_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Script;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool BipedFlags;
        public bool Flags;
        public MaskItem<CopyOption, Model_CopyMask> MaleBipedModel;
        public MaskItem<CopyOption, Model_CopyMask> MaleWorldModel;
        public bool MaleIcon;
        public MaskItem<CopyOption, Model_CopyMask> FemaleBipedModel;
        public MaskItem<CopyOption, Model_CopyMask> FemaleWorldModel;
        public bool FemaleIcon;
        #endregion

    }
    #endregion




    #endregion

}
