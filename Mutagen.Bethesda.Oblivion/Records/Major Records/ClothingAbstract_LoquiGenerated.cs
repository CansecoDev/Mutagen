/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class ClothingAbstract :
        ItemAbstract,
        IClothingAbstractInternal,
        ILoquiObjectSetter<ClothingAbstract>,
        INamed,
        ILinkSubContainer,
        IEquatable<ClothingAbstract>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClothingAbstract_Registration.Instance;
        public new static ClothingAbstract_Registration Registration => ClothingAbstract_Registration.Instance;
        protected override object CommonInstance => ClothingAbstractCommon.Instance;

        #region Ctor
        protected ClothingAbstract()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)ClothingAbstract_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ClothingAbstract_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IClothingAbstractGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IClothingAbstractGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)ClothingAbstract_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Script
        public IFormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Script> IClothingAbstract.Script_Property => this.Script_Property;
        IScriptInternalGetter IClothingAbstractGetter.Script => this.Script_Property.Item;
        IFormIDSetLinkGetter<IScriptInternalGetter> IClothingAbstractGetter.Script_Property => this.Script_Property;
        #endregion
        #region Enchantment
        public IFormIDSetLink<Enchantment> Enchantment_Property { get; } = new FormIDSetLink<Enchantment>();
        public Enchantment Enchantment { get => Enchantment_Property.Item; set => Enchantment_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Enchantment> IClothingAbstract.Enchantment_Property => this.Enchantment_Property;
        IEnchantmentInternalGetter IClothingAbstractGetter.Enchantment => this.Enchantment_Property.Item;
        IFormIDSetLinkGetter<IEnchantmentInternalGetter> IClothingAbstractGetter.Enchantment_Property => this.Enchantment_Property;
        #endregion
        #region EnchantmentPoints
        public bool EnchantmentPoints_IsSet
        {
            get => _hasBeenSetTracker[(int)ClothingAbstract_FieldIndex.EnchantmentPoints];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ClothingAbstract_FieldIndex.EnchantmentPoints, nameof(EnchantmentPoints_IsSet));
        }
        bool IClothingAbstractGetter.EnchantmentPoints_IsSet => EnchantmentPoints_IsSet;
        private UInt16 _EnchantmentPoints;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 EnchantmentPoints
        {
            get => this._EnchantmentPoints;
            set => EnchantmentPoints_Set(value);
        }
        UInt16 IClothingAbstractGetter.EnchantmentPoints => this.EnchantmentPoints;
        public void EnchantmentPoints_Set(
            UInt16 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _EnchantmentPoints, value, _hasBeenSetTracker, markSet, (int)ClothingAbstract_FieldIndex.EnchantmentPoints, nameof(EnchantmentPoints), nameof(EnchantmentPoints_IsSet));
        }
        public void EnchantmentPoints_Unset()
        {
            this.EnchantmentPoints_Set(default(UInt16), false);
        }
        #endregion
        #region BipedFlags
        private BipedFlag _BipedFlags;
        public BipedFlag BipedFlags
        {
            get => this._BipedFlags;
            set
            {
                this.BMDTDataTypeState |= BMDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BipedFlags, value, nameof(BipedFlags));
            }
        }
        #endregion
        #region Flags
        private EquipmentFlag _Flags;
        public EquipmentFlag Flags
        {
            get => this._Flags;
            set
            {
                this.BMDTDataTypeState |= BMDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region MaleBipedModel
        public bool MaleBipedModel_IsSet
        {
            get => _hasBeenSetTracker[(int)ClothingAbstract_FieldIndex.MaleBipedModel];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ClothingAbstract_FieldIndex.MaleBipedModel, nameof(MaleBipedModel_IsSet));
        }
        bool IClothingAbstractGetter.MaleBipedModel_IsSet => MaleBipedModel_IsSet;
        private Model _MaleBipedModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model MaleBipedModel
        {
            get => _MaleBipedModel;
            set => MaleBipedModel_Set(value);
        }
        public void MaleBipedModel_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _MaleBipedModel, value, _hasBeenSetTracker, hasBeenSet, (int)ClothingAbstract_FieldIndex.MaleBipedModel, nameof(MaleBipedModel), nameof(MaleBipedModel_IsSet));
        }
        public void MaleBipedModel_Unset()
        {
            this.MaleBipedModel_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IClothingAbstractGetter.MaleBipedModel => this.MaleBipedModel;
        #endregion
        #region MaleWorldModel
        public bool MaleWorldModel_IsSet
        {
            get => _hasBeenSetTracker[(int)ClothingAbstract_FieldIndex.MaleWorldModel];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ClothingAbstract_FieldIndex.MaleWorldModel, nameof(MaleWorldModel_IsSet));
        }
        bool IClothingAbstractGetter.MaleWorldModel_IsSet => MaleWorldModel_IsSet;
        private Model _MaleWorldModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model MaleWorldModel
        {
            get => _MaleWorldModel;
            set => MaleWorldModel_Set(value);
        }
        public void MaleWorldModel_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _MaleWorldModel, value, _hasBeenSetTracker, hasBeenSet, (int)ClothingAbstract_FieldIndex.MaleWorldModel, nameof(MaleWorldModel), nameof(MaleWorldModel_IsSet));
        }
        public void MaleWorldModel_Unset()
        {
            this.MaleWorldModel_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IClothingAbstractGetter.MaleWorldModel => this.MaleWorldModel;
        #endregion
        #region MaleIcon
        public bool MaleIcon_IsSet
        {
            get => _hasBeenSetTracker[(int)ClothingAbstract_FieldIndex.MaleIcon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ClothingAbstract_FieldIndex.MaleIcon, nameof(MaleIcon_IsSet));
        }
        bool IClothingAbstractGetter.MaleIcon_IsSet => MaleIcon_IsSet;
        private String _MaleIcon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MaleIcon
        {
            get => this._MaleIcon;
            set => MaleIcon_Set(value);
        }
        String IClothingAbstractGetter.MaleIcon => this.MaleIcon;
        public void MaleIcon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _MaleIcon, value, _hasBeenSetTracker, markSet, (int)ClothingAbstract_FieldIndex.MaleIcon, nameof(MaleIcon), nameof(MaleIcon_IsSet));
        }
        public void MaleIcon_Unset()
        {
            this.MaleIcon_Set(default(String), false);
        }
        #endregion
        #region FemaleBipedModel
        public bool FemaleBipedModel_IsSet
        {
            get => _hasBeenSetTracker[(int)ClothingAbstract_FieldIndex.FemaleBipedModel];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ClothingAbstract_FieldIndex.FemaleBipedModel, nameof(FemaleBipedModel_IsSet));
        }
        bool IClothingAbstractGetter.FemaleBipedModel_IsSet => FemaleBipedModel_IsSet;
        private Model _FemaleBipedModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model FemaleBipedModel
        {
            get => _FemaleBipedModel;
            set => FemaleBipedModel_Set(value);
        }
        public void FemaleBipedModel_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _FemaleBipedModel, value, _hasBeenSetTracker, hasBeenSet, (int)ClothingAbstract_FieldIndex.FemaleBipedModel, nameof(FemaleBipedModel), nameof(FemaleBipedModel_IsSet));
        }
        public void FemaleBipedModel_Unset()
        {
            this.FemaleBipedModel_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IClothingAbstractGetter.FemaleBipedModel => this.FemaleBipedModel;
        #endregion
        #region FemaleWorldModel
        public bool FemaleWorldModel_IsSet
        {
            get => _hasBeenSetTracker[(int)ClothingAbstract_FieldIndex.FemaleWorldModel];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ClothingAbstract_FieldIndex.FemaleWorldModel, nameof(FemaleWorldModel_IsSet));
        }
        bool IClothingAbstractGetter.FemaleWorldModel_IsSet => FemaleWorldModel_IsSet;
        private Model _FemaleWorldModel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model FemaleWorldModel
        {
            get => _FemaleWorldModel;
            set => FemaleWorldModel_Set(value);
        }
        public void FemaleWorldModel_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _FemaleWorldModel, value, _hasBeenSetTracker, hasBeenSet, (int)ClothingAbstract_FieldIndex.FemaleWorldModel, nameof(FemaleWorldModel), nameof(FemaleWorldModel_IsSet));
        }
        public void FemaleWorldModel_Unset()
        {
            this.FemaleWorldModel_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IClothingAbstractGetter.FemaleWorldModel => this.FemaleWorldModel;
        #endregion
        #region FemaleIcon
        public bool FemaleIcon_IsSet
        {
            get => _hasBeenSetTracker[(int)ClothingAbstract_FieldIndex.FemaleIcon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)ClothingAbstract_FieldIndex.FemaleIcon, nameof(FemaleIcon_IsSet));
        }
        bool IClothingAbstractGetter.FemaleIcon_IsSet => FemaleIcon_IsSet;
        private String _FemaleIcon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String FemaleIcon
        {
            get => this._FemaleIcon;
            set => FemaleIcon_Set(value);
        }
        String IClothingAbstractGetter.FemaleIcon => this.FemaleIcon;
        public void FemaleIcon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _FemaleIcon, value, _hasBeenSetTracker, markSet, (int)ClothingAbstract_FieldIndex.FemaleIcon, nameof(FemaleIcon), nameof(FemaleIcon_IsSet));
        }
        public void FemaleIcon_Unset()
        {
            this.FemaleIcon_Set(default(String), false);
        }
        #endregion
        #region BMDTDataTypeState
        private ClothingAbstract.BMDTDataType _BMDTDataTypeState;
        public ClothingAbstract.BMDTDataType BMDTDataTypeState
        {
            get => this._BMDTDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._BMDTDataTypeState, value, nameof(BMDTDataTypeState));
        }
        ClothingAbstract.BMDTDataType IClothingAbstractInternal.BMDTDataTypeState
        {
            get => this.BMDTDataTypeState;
            set => this.BMDTDataTypeState = value;
        }
        ClothingAbstract.BMDTDataType IClothingAbstractInternalGetter.BMDTDataTypeState
        {
            get => this.BMDTDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClothingAbstractInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClothingAbstractMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IClothingAbstractInternalGetter rhs)) return false;
            return ((ClothingAbstractCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(ClothingAbstract obj)
        {
            return ((ClothingAbstractCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClothingAbstractCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => ClothingAbstractXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static ClothingAbstract CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ClothingAbstract_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ClothingAbstract CreateFromXml(
            XElement node,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true,
            ClothingAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ClothingAbstract_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ClothingAbstract CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            ClothingAbstract ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown ClothingAbstract subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static ClothingAbstract CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ClothingAbstract_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ClothingAbstract CreateFromXml(
            string path,
            out ClothingAbstract_ErrorMask errorMask,
            ClothingAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClothingAbstract CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ClothingAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ClothingAbstract CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ClothingAbstract_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ClothingAbstract CreateFromXml(
            Stream stream,
            out ClothingAbstract_ErrorMask errorMask,
            ClothingAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClothingAbstract CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ClothingAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            ClothingAbstract item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasBMDTDataType":
                    item.BMDTDataTypeState |= ClothingAbstract.BMDTDataType.Has;
                    break;
                default:
                    ItemAbstract.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((ClothingAbstract_FieldIndex)index)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return _hasBeenSetTracker[index];
                case ClothingAbstract_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.Enchantment:
                    return Enchantment_Property.HasBeenSet;
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        [Flags]
        public enum BMDTDataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Enchantment_Property;
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            Script_Property.Link(
                modList,
                sourceMod);
            Enchantment_Property.Link(
                modList,
                sourceMod);
        }

        public ClothingAbstract(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public ClothingAbstract(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => ClothingAbstractBinaryWriteTranslation.Instance;
        protected static void FillBinaryStructs(
            ClothingAbstract item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ItemAbstract.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            ClothingAbstract item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Name);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Enchantment_Property);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EnchantmentPoints = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.EnchantmentPoints);
                }
                case 0x54444D42: // BMDT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.BMDTDataTypeState = BMDTDataType.Has;
                    }
                    if (EnumBinaryTranslation<BipedFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(2),
                        item: out BipedFlag BipedFlagsParse))
                    {
                        item.BipedFlags = BipedFlagsParse;
                    }
                    else
                    {
                        item.BipedFlags = default(BipedFlag);
                    }
                    if (EnumBinaryTranslation<EquipmentFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(2),
                        item: out EquipmentFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(EquipmentFlag);
                    }
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Flags);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                        item.MaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                }
                case 0x32444F4D: // MOD2
                {
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                        item.MaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: ClothingAbstract_Registration.MaleWorldModelConverter,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String MaleIconParse))
                    {
                        item.MaleIcon = MaleIconParse;
                    }
                    else
                    {
                        item.MaleIcon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleIcon);
                }
                case 0x33444F4D: // MOD3
                {
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                        item.FemaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: ClothingAbstract_Registration.FemaleBipedModelConverter,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                }
                case 0x34444F4D: // MOD4
                {
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                        item.FemaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: ClothingAbstract_Registration.FemaleWorldModelConverter,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                }
                case 0x324F4349: // ICO2
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String FemaleIconParse))
                    {
                        item.FemaleIcon = FemaleIconParse;
                    }
                    else
                    {
                        item.FemaleIcon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleIcon);
                }
                default:
                    return ItemAbstract.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public ClothingAbstract Copy(
            ClothingAbstract_CopyMask copyMask = null,
            ClothingAbstract def = null)
        {
            return ClothingAbstract.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ClothingAbstract Copy(
            ClothingAbstract item,
            ClothingAbstract_CopyMask copyMask = null,
            ClothingAbstract def = null)
        {
            ClothingAbstract ret = (ClothingAbstract)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ClothingAbstract Copy_ToLoqui(
            ClothingAbstract item,
            ClothingAbstract_CopyMask copyMask = null,
            ClothingAbstract def = null)
        {
            ClothingAbstract ret = (ClothingAbstract)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ClothingAbstract rhs,
            ClothingAbstract_CopyMask copyMask,
            ClothingAbstract def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ClothingAbstract rhs,
            out ClothingAbstract_ErrorMask errorMask,
            ClothingAbstract_CopyMask copyMask = null,
            ClothingAbstract def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ClothingAbstractCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ClothingAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ClothingAbstract rhs,
            ErrorMaskBuilder errorMask,
            ClothingAbstract_CopyMask copyMask = null,
            ClothingAbstract def = null)
        {
            ClothingAbstractCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case ClothingAbstract_FieldIndex.Script:
                    this.Script_Property.Set((IFormIDSetLink<Script>)obj);
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    this.Enchantment_Property.Set((IFormIDSetLink<Enchantment>)obj);
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (UInt16)obj;
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    this.BipedFlags = (BipedFlag)obj;
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    this.Flags = (EquipmentFlag)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    this.MaleBipedModel = (Model)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    this.MaleWorldModel = (Model)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    this.MaleIcon = (String)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    this.FemaleBipedModel = (Model)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    this.FemaleWorldModel = (Model)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    this.FemaleIcon = (String)obj;
                    break;
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    this.BMDTDataTypeState = (ClothingAbstract.BMDTDataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            ClothingAbstractCommon.Instance.Clear(this);
        }

        protected new static void CopyInInternal_ClothingAbstract(ClothingAbstract obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ClothingAbstract_FieldIndex enu))
            {
                CopyInInternal_ItemAbstract(obj, pair);
            }
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.Script:
                    obj.Script_Property.Set((IFormIDSetLink<Script>)pair.Value);
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    obj.Enchantment_Property.Set((IFormIDSetLink<Enchantment>)pair.Value);
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    obj.EnchantmentPoints = (UInt16)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    obj.BipedFlags = (BipedFlag)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    obj.Flags = (EquipmentFlag)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    obj.MaleBipedModel = (Model)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    obj.MaleWorldModel = (Model)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    obj.MaleIcon = (String)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    obj.FemaleBipedModel = (Model)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    obj.FemaleWorldModel = (Model)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    obj.FemaleIcon = (String)pair.Value;
                    break;
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    obj.BMDTDataTypeState = (ClothingAbstract.BMDTDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IClothingAbstract :
        IClothingAbstractInternalGetter,
        IItemAbstract,
        ILoquiObjectSetter<IClothingAbstractInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Enchantment Enchantment { get; set; }
        new IFormIDSetLink<Enchantment> Enchantment_Property { get; }
        new UInt16 EnchantmentPoints { get; set; }
        new bool EnchantmentPoints_IsSet { get; set; }
        void EnchantmentPoints_Set(UInt16 value, bool hasBeenSet = true);
        void EnchantmentPoints_Unset();

        new BipedFlag BipedFlags { get; set; }

        new EquipmentFlag Flags { get; set; }

        new Model MaleBipedModel { get; set; }
        new bool MaleBipedModel_IsSet { get; set; }
        void MaleBipedModel_Set(Model value, bool hasBeenSet = true);
        void MaleBipedModel_Unset();

        new Model MaleWorldModel { get; set; }
        new bool MaleWorldModel_IsSet { get; set; }
        void MaleWorldModel_Set(Model value, bool hasBeenSet = true);
        void MaleWorldModel_Unset();

        new String MaleIcon { get; set; }
        new bool MaleIcon_IsSet { get; set; }
        void MaleIcon_Set(String value, bool hasBeenSet = true);
        void MaleIcon_Unset();

        new Model FemaleBipedModel { get; set; }
        new bool FemaleBipedModel_IsSet { get; set; }
        void FemaleBipedModel_Set(Model value, bool hasBeenSet = true);
        void FemaleBipedModel_Unset();

        new Model FemaleWorldModel { get; set; }
        new bool FemaleWorldModel_IsSet { get; set; }
        void FemaleWorldModel_Set(Model value, bool hasBeenSet = true);
        void FemaleWorldModel_Unset();

        new String FemaleIcon { get; set; }
        new bool FemaleIcon_IsSet { get; set; }
        void FemaleIcon_Set(String value, bool hasBeenSet = true);
        void FemaleIcon_Unset();

        void CopyFieldsFrom(
            ClothingAbstract rhs,
            ErrorMaskBuilder errorMask = null,
            ClothingAbstract_CopyMask copyMask = null,
            ClothingAbstract def = null);
    }

    public partial interface IClothingAbstractInternal :
        IItemAbstractInternal,
        IClothingAbstract,
        IClothingAbstractInternalGetter
    {
        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Enchantment Enchantment { get; set; }
        new IFormIDSetLink<Enchantment> Enchantment_Property { get; }
        new ClothingAbstract.BMDTDataType BMDTDataTypeState { get; set; }

    }

    public partial interface IClothingAbstractGetter :
        IItemAbstractGetter,
        ILoquiObject<IClothingAbstractInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Script
        IScriptInternalGetter Script { get; }
        IFormIDSetLinkGetter<IScriptInternalGetter> Script_Property { get; }

        #endregion
        #region Enchantment
        IEnchantmentInternalGetter Enchantment { get; }
        IFormIDSetLinkGetter<IEnchantmentInternalGetter> Enchantment_Property { get; }

        #endregion
        #region EnchantmentPoints
        UInt16 EnchantmentPoints { get; }
        bool EnchantmentPoints_IsSet { get; }

        #endregion
        #region BipedFlags
        BipedFlag BipedFlags { get; }

        #endregion
        #region Flags
        EquipmentFlag Flags { get; }

        #endregion
        #region MaleBipedModel
        IModelGetter MaleBipedModel { get; }
        bool MaleBipedModel_IsSet { get; }

        #endregion
        #region MaleWorldModel
        IModelGetter MaleWorldModel { get; }
        bool MaleWorldModel_IsSet { get; }

        #endregion
        #region MaleIcon
        String MaleIcon { get; }
        bool MaleIcon_IsSet { get; }

        #endregion
        #region FemaleBipedModel
        IModelGetter FemaleBipedModel { get; }
        bool FemaleBipedModel_IsSet { get; }

        #endregion
        #region FemaleWorldModel
        IModelGetter FemaleWorldModel { get; }
        bool FemaleWorldModel_IsSet { get; }

        #endregion
        #region FemaleIcon
        String FemaleIcon { get; }
        bool FemaleIcon_IsSet { get; }

        #endregion

    }

    public partial interface IClothingAbstractInternalGetter :
        IItemAbstractInternalGetter,
        IClothingAbstractGetter
    {
        #region BMDTDataTypeState
        ClothingAbstract.BMDTDataType BMDTDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ClothingAbstractMixIn
    {
        public static void Clear(this IClothingAbstractInternal item)
        {
            ((ClothingAbstractCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static ClothingAbstract_Mask<bool> GetEqualsMask(
            this IClothingAbstractInternalGetter item,
            IClothingAbstractInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClothingAbstractCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClothingAbstractInternalGetter item,
            string name = null,
            ClothingAbstract_Mask<bool> printMask = null)
        {
            return ((ClothingAbstractCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClothingAbstractInternalGetter item,
            FileGeneration fg,
            string name = null,
            ClothingAbstract_Mask<bool> printMask = null)
        {
            ((ClothingAbstractCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClothingAbstractInternalGetter item,
            ClothingAbstract_Mask<bool?> checkMask)
        {
            return ((ClothingAbstractCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ClothingAbstract_Mask<bool> GetHasBeenSetMask(this IClothingAbstractInternalGetter item)
        {
            var ret = new ClothingAbstract_Mask<bool>();
            ((ClothingAbstractCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClothingAbstractInternalGetter item,
            IClothingAbstractInternalGetter rhs)
        {
            return ((ClothingAbstractCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ClothingAbstract_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        BMDTDataTypeState = 17,
    }
    #endregion

    #region Registration
    public class ClothingAbstract_Registration : ILoquiRegistration
    {
        public static readonly ClothingAbstract_Registration Instance = new ClothingAbstract_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 69,
            version: 0);

        public const string GUID = "45098216-a539-4788-84f5-ece76ab7abf2";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(ClothingAbstract_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClothingAbstract_ErrorMask);

        public static readonly Type ClassType = typeof(ClothingAbstract);

        public static readonly Type GetterType = typeof(IClothingAbstractGetter);

        public static readonly Type InternalGetterType = typeof(IClothingAbstractInternalGetter);

        public static readonly Type SetterType = typeof(IClothingAbstract);

        public static readonly Type InternalSetterType = typeof(IClothingAbstractInternal);

        public static readonly Type CommonType = typeof(ClothingAbstractCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ClothingAbstract";

        public const string Name = "ClothingAbstract";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)ClothingAbstract_FieldIndex.Name;
                case "SCRIPT":
                    return (ushort)ClothingAbstract_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)ClothingAbstract_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)ClothingAbstract_FieldIndex.EnchantmentPoints;
                case "BIPEDFLAGS":
                    return (ushort)ClothingAbstract_FieldIndex.BipedFlags;
                case "FLAGS":
                    return (ushort)ClothingAbstract_FieldIndex.Flags;
                case "MALEBIPEDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.MaleBipedModel;
                case "MALEWORLDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.MaleWorldModel;
                case "MALEICON":
                    return (ushort)ClothingAbstract_FieldIndex.MaleIcon;
                case "FEMALEBIPEDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleBipedModel;
                case "FEMALEWORLDMODEL":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleWorldModel;
                case "FEMALEICON":
                    return (ushort)ClothingAbstract_FieldIndex.FemaleIcon;
                case "BMDTDATATYPESTATE":
                    return (ushort)ClothingAbstract_FieldIndex.BMDTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return true;
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    return "Name";
                case ClothingAbstract_FieldIndex.Script:
                    return "Script";
                case ClothingAbstract_FieldIndex.Enchantment:
                    return "Enchantment";
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return "BipedFlags";
                case ClothingAbstract_FieldIndex.Flags:
                    return "Flags";
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return "MaleBipedModel";
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return "MaleWorldModel";
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return "MaleIcon";
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return "FemaleBipedModel";
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return "FemaleWorldModel";
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return "FemaleIcon";
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return "BMDTDataTypeState";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                case ClothingAbstract_FieldIndex.Script:
                case ClothingAbstract_FieldIndex.Enchantment:
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                case ClothingAbstract_FieldIndex.BipedFlags:
                case ClothingAbstract_FieldIndex.Flags:
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                case ClothingAbstract_FieldIndex.MaleIcon:
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                case ClothingAbstract_FieldIndex.FemaleIcon:
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    return typeof(String);
                case ClothingAbstract_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case ClothingAbstract_FieldIndex.Enchantment:
                    return typeof(IFormIDSetLink<Enchantment>);
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return typeof(BipedFlag);
                case ClothingAbstract_FieldIndex.Flags:
                    return typeof(EquipmentFlag);
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return typeof(String);
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return typeof(Model);
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return typeof(String);
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return typeof(ClothingAbstract.BMDTDataType);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClothingAbstractXmlWriteTranslation);
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MOD2_HEADER = new RecordType("MOD2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MOD3_HEADER = new RecordType("MOD3");
        public static readonly RecordType MOD4_HEADER = new RecordType("MOD4");
        public static readonly RecordType ICO2_HEADER = new RecordType("ICO2");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FULL_HEADER,
                        SCRI_HEADER,
                        ENAM_HEADER,
                        ANAM_HEADER,
                        BMDT_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER
                    })
            );
        });
        public static RecordTypeConverter MaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD2")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO2B")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO2T")));
        public static RecordTypeConverter FemaleBipedModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD3")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO3B")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO3T")));
        public static RecordTypeConverter FemaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODL_HEADER,
                new RecordType("MOD4")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODB_HEADER,
                new RecordType("MO4B")),
            new KeyValuePair<RecordType, RecordType>(
                Model_Registration.MODT_HEADER,
                new RecordType("MO4T")));
        public const int NumStructFields = 0;
        public const int NumTypedFields = 10;
        public static readonly Type BinaryWriteTranslation = typeof(ClothingAbstractBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClothingAbstractCommon : ItemAbstractCommon
    {
        public static readonly ClothingAbstractCommon Instance = new ClothingAbstractCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            ClothingAbstract item,
            ClothingAbstract rhs,
            ClothingAbstract def,
            ErrorMaskBuilder errorMask,
            ClothingAbstract_CopyMask copyMask)
        {
            ItemAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetLink(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Enchantment ?? true)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Enchantment);
                try
                {
                    item.Enchantment_Property.SetLink(
                        rhs: rhs.Enchantment_Property,
                        def: def?.Enchantment_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EnchantmentPoints ?? true)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.EnchantmentPoints);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.EnchantmentPoints,
                        rhsHasBeenSet: rhs.EnchantmentPoints_IsSet,
                        defItem: def?.EnchantmentPoints ?? default(UInt16),
                        defHasBeenSet: def?.EnchantmentPoints_IsSet ?? false,
                        outRhsItem: out var rhsEnchantmentPointsItem,
                        outDefItem: out var defEnchantmentPointsItem))
                    {
                        item.EnchantmentPoints = rhsEnchantmentPointsItem;
                    }
                    else
                    {
                        item.EnchantmentPoints_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BipedFlags ?? true)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.BipedFlags);
                try
                {
                    item.BipedFlags = rhs.BipedFlags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaleBipedModel.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MaleBipedModel,
                        rhsHasBeenSet: rhs.MaleBipedModel_IsSet,
                        defItem: def?.MaleBipedModel,
                        defHasBeenSet: def?.MaleBipedModel_IsSet ?? false,
                        outRhsItem: out var rhsMaleBipedModelItem,
                        outDefItem: out var defMaleBipedModelItem))
                    {
                        switch (copyMask?.MaleBipedModel.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.MaleBipedModel,
                                    rhs: rhs.MaleBipedModel,
                                    def: def?.MaleBipedModel,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.MaleBipedModel.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.MaleBipedModel = Model.Copy(
                                    rhsMaleBipedModelItem,
                                    copyMask?.MaleBipedModel?.Specific,
                                    def: defMaleBipedModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.MaleBipedModel?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.MaleBipedModel_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaleWorldModel.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MaleWorldModel,
                        rhsHasBeenSet: rhs.MaleWorldModel_IsSet,
                        defItem: def?.MaleWorldModel,
                        defHasBeenSet: def?.MaleWorldModel_IsSet ?? false,
                        outRhsItem: out var rhsMaleWorldModelItem,
                        outDefItem: out var defMaleWorldModelItem))
                    {
                        switch (copyMask?.MaleWorldModel.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.MaleWorldModel,
                                    rhs: rhs.MaleWorldModel,
                                    def: def?.MaleWorldModel,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.MaleWorldModel.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.MaleWorldModel = Model.Copy(
                                    rhsMaleWorldModelItem,
                                    copyMask?.MaleWorldModel?.Specific,
                                    def: defMaleWorldModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.MaleWorldModel?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.MaleWorldModel_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaleIcon ?? true)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleIcon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MaleIcon,
                        rhsHasBeenSet: rhs.MaleIcon_IsSet,
                        defItem: def?.MaleIcon ?? default(String),
                        defHasBeenSet: def?.MaleIcon_IsSet ?? false,
                        outRhsItem: out var rhsMaleIconItem,
                        outDefItem: out var defMaleIconItem))
                    {
                        item.MaleIcon = rhsMaleIconItem;
                    }
                    else
                    {
                        item.MaleIcon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FemaleBipedModel.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FemaleBipedModel,
                        rhsHasBeenSet: rhs.FemaleBipedModel_IsSet,
                        defItem: def?.FemaleBipedModel,
                        defHasBeenSet: def?.FemaleBipedModel_IsSet ?? false,
                        outRhsItem: out var rhsFemaleBipedModelItem,
                        outDefItem: out var defFemaleBipedModelItem))
                    {
                        switch (copyMask?.FemaleBipedModel.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.FemaleBipedModel,
                                    rhs: rhs.FemaleBipedModel,
                                    def: def?.FemaleBipedModel,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.FemaleBipedModel.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.FemaleBipedModel = Model.Copy(
                                    rhsFemaleBipedModelItem,
                                    copyMask?.FemaleBipedModel?.Specific,
                                    def: defFemaleBipedModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.FemaleBipedModel?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.FemaleBipedModel_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FemaleWorldModel.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FemaleWorldModel,
                        rhsHasBeenSet: rhs.FemaleWorldModel_IsSet,
                        defItem: def?.FemaleWorldModel,
                        defHasBeenSet: def?.FemaleWorldModel_IsSet ?? false,
                        outRhsItem: out var rhsFemaleWorldModelItem,
                        outDefItem: out var defFemaleWorldModelItem))
                    {
                        switch (copyMask?.FemaleWorldModel.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.FemaleWorldModel,
                                    rhs: rhs.FemaleWorldModel,
                                    def: def?.FemaleWorldModel,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.FemaleWorldModel.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.FemaleWorldModel = Model.Copy(
                                    rhsFemaleWorldModelItem,
                                    copyMask?.FemaleWorldModel?.Specific,
                                    def: defFemaleWorldModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.FemaleWorldModel?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.FemaleWorldModel_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FemaleIcon ?? true)
            {
                errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleIcon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FemaleIcon,
                        rhsHasBeenSet: rhs.FemaleIcon_IsSet,
                        defItem: def?.FemaleIcon ?? default(String),
                        defHasBeenSet: def?.FemaleIcon_IsSet ?? false,
                        outRhsItem: out var rhsFemaleIconItem,
                        outDefItem: out var defFemaleIconItem))
                    {
                        item.FemaleIcon = rhsFemaleIconItem;
                    }
                    else
                    {
                        item.FemaleIcon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IClothingAbstractInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Script_Property.Unset();
            item.Enchantment_Property.Unset();
            item.EnchantmentPoints_Unset();
            item.BipedFlags = default(BipedFlag);
            item.Flags = default(EquipmentFlag);
            item.MaleBipedModel_Unset();
            item.MaleWorldModel_Unset();
            item.MaleIcon_Unset();
            item.FemaleBipedModel_Unset();
            item.FemaleWorldModel_Unset();
            item.FemaleIcon_Unset();
            base.Clear(item);
        }

        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (IClothingAbstractInternal)item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IClothingAbstractInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClothingAbstractInternal)item);
        }

        public ClothingAbstract_Mask<bool> GetEqualsMask(
            IClothingAbstractInternalGetter item,
            IClothingAbstractInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ClothingAbstract_Mask<bool>();
            ((ClothingAbstractCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IClothingAbstractInternalGetter item,
            IClothingAbstractInternalGetter rhs,
            ClothingAbstract_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.Enchantment = item.Enchantment_Property.FormKey == rhs.Enchantment_Property.FormKey;
            ret.EnchantmentPoints = item.EnchantmentPoints_IsSet == rhs.EnchantmentPoints_IsSet && item.EnchantmentPoints == rhs.EnchantmentPoints;
            ret.BipedFlags = item.BipedFlags == rhs.BipedFlags;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.MaleBipedModel_IsSet,
                rhs.MaleBipedModel_IsSet,
                item.MaleBipedModel,
                rhs.MaleBipedModel,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.MaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.MaleWorldModel_IsSet,
                rhs.MaleWorldModel_IsSet,
                item.MaleWorldModel,
                rhs.MaleWorldModel,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.MaleIcon = item.MaleIcon_IsSet == rhs.MaleIcon_IsSet && string.Equals(item.MaleIcon, rhs.MaleIcon);
            ret.FemaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleBipedModel_IsSet,
                rhs.FemaleBipedModel_IsSet,
                item.FemaleBipedModel,
                rhs.FemaleBipedModel,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.FemaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleWorldModel_IsSet,
                rhs.FemaleWorldModel_IsSet,
                item.FemaleWorldModel,
                rhs.FemaleWorldModel,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.FemaleIcon = item.FemaleIcon_IsSet == rhs.FemaleIcon_IsSet && string.Equals(item.FemaleIcon, rhs.FemaleIcon);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IClothingAbstractInternalGetter item,
            string name = null,
            ClothingAbstract_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IClothingAbstractInternalGetter item,
            FileGeneration fg,
            string name = null,
            ClothingAbstract_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ClothingAbstract =>");
            }
            else
            {
                fg.AppendLine($"{name} (ClothingAbstract) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IClothingAbstractInternalGetter item,
            FileGeneration fg,
            ClothingAbstract_Mask<bool> printMask = null)
        {
            ItemAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script_Property}");
            }
            if (printMask?.Enchantment ?? true)
            {
                fg.AppendLine($"Enchantment => {item.Enchantment_Property}");
            }
            if (printMask?.EnchantmentPoints ?? true)
            {
                fg.AppendLine($"EnchantmentPoints => {item.EnchantmentPoints}");
            }
            if (printMask?.BipedFlags ?? true)
            {
                fg.AppendLine($"BipedFlags => {item.BipedFlags}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.MaleBipedModel?.Overall ?? true)
            {
                item.MaleBipedModel?.ToString(fg, "MaleBipedModel");
            }
            if (printMask?.MaleWorldModel?.Overall ?? true)
            {
                item.MaleWorldModel?.ToString(fg, "MaleWorldModel");
            }
            if (printMask?.MaleIcon ?? true)
            {
                fg.AppendLine($"MaleIcon => {item.MaleIcon}");
            }
            if (printMask?.FemaleBipedModel?.Overall ?? true)
            {
                item.FemaleBipedModel?.ToString(fg, "FemaleBipedModel");
            }
            if (printMask?.FemaleWorldModel?.Overall ?? true)
            {
                item.FemaleWorldModel?.ToString(fg, "FemaleWorldModel");
            }
            if (printMask?.FemaleIcon ?? true)
            {
                fg.AppendLine($"FemaleIcon => {item.FemaleIcon}");
            }
            if (printMask?.BMDTDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IClothingAbstractInternalGetter item,
            ClothingAbstract_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment_Property.HasBeenSet) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != item.EnchantmentPoints_IsSet) return false;
            if (checkMask.MaleBipedModel.Overall.HasValue && checkMask.MaleBipedModel.Overall.Value != item.MaleBipedModel_IsSet) return false;
            if (checkMask.MaleBipedModel.Specific != null && (item.MaleBipedModel == null || !item.MaleBipedModel.HasBeenSet(checkMask.MaleBipedModel.Specific))) return false;
            if (checkMask.MaleWorldModel.Overall.HasValue && checkMask.MaleWorldModel.Overall.Value != item.MaleWorldModel_IsSet) return false;
            if (checkMask.MaleWorldModel.Specific != null && (item.MaleWorldModel == null || !item.MaleWorldModel.HasBeenSet(checkMask.MaleWorldModel.Specific))) return false;
            if (checkMask.MaleIcon.HasValue && checkMask.MaleIcon.Value != item.MaleIcon_IsSet) return false;
            if (checkMask.FemaleBipedModel.Overall.HasValue && checkMask.FemaleBipedModel.Overall.Value != item.FemaleBipedModel_IsSet) return false;
            if (checkMask.FemaleBipedModel.Specific != null && (item.FemaleBipedModel == null || !item.FemaleBipedModel.HasBeenSet(checkMask.FemaleBipedModel.Specific))) return false;
            if (checkMask.FemaleWorldModel.Overall.HasValue && checkMask.FemaleWorldModel.Overall.Value != item.FemaleWorldModel_IsSet) return false;
            if (checkMask.FemaleWorldModel.Specific != null && (item.FemaleWorldModel == null || !item.FemaleWorldModel.HasBeenSet(checkMask.FemaleWorldModel.Specific))) return false;
            if (checkMask.FemaleIcon.HasValue && checkMask.FemaleIcon.Value != item.FemaleIcon_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IClothingAbstractInternalGetter item,
            ClothingAbstract_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Script = item.Script_Property.HasBeenSet;
            mask.Enchantment = item.Enchantment_Property.HasBeenSet;
            mask.EnchantmentPoints = item.EnchantmentPoints_IsSet;
            mask.BipedFlags = true;
            mask.Flags = true;
            mask.MaleBipedModel = new MaskItem<bool, Model_Mask<bool>>(item.MaleBipedModel_IsSet, item.MaleBipedModel.GetHasBeenSetMask());
            mask.MaleWorldModel = new MaskItem<bool, Model_Mask<bool>>(item.MaleWorldModel_IsSet, item.MaleWorldModel.GetHasBeenSetMask());
            mask.MaleIcon = item.MaleIcon_IsSet;
            mask.FemaleBipedModel = new MaskItem<bool, Model_Mask<bool>>(item.FemaleBipedModel_IsSet, item.FemaleBipedModel.GetHasBeenSetMask());
            mask.FemaleWorldModel = new MaskItem<bool, Model_Mask<bool>>(item.FemaleWorldModel_IsSet, item.FemaleWorldModel.GetHasBeenSetMask());
            mask.FemaleIcon = item.FemaleIcon_IsSet;
            mask.BMDTDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static ClothingAbstract_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (ClothingAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static ClothingAbstract_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (ClothingAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static ClothingAbstract_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (ClothingAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ClothingAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IClothingAbstractInternalGetter lhs,
            IClothingAbstractInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (lhs.Script_Property.HasBeenSet)
            {
                if (!lhs.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (lhs.Enchantment_Property.HasBeenSet != rhs.Enchantment_Property.HasBeenSet) return false;
            if (lhs.Enchantment_Property.HasBeenSet)
            {
                if (!lhs.Enchantment_Property.Equals(rhs.Enchantment_Property)) return false;
            }
            if (lhs.EnchantmentPoints_IsSet != rhs.EnchantmentPoints_IsSet) return false;
            if (lhs.EnchantmentPoints_IsSet)
            {
                if (lhs.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            }
            if (lhs.BipedFlags != rhs.BipedFlags) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.MaleBipedModel_IsSet != rhs.MaleBipedModel_IsSet) return false;
            if (lhs.MaleBipedModel_IsSet)
            {
                if (!object.Equals(lhs.MaleBipedModel, rhs.MaleBipedModel)) return false;
            }
            if (lhs.MaleWorldModel_IsSet != rhs.MaleWorldModel_IsSet) return false;
            if (lhs.MaleWorldModel_IsSet)
            {
                if (!object.Equals(lhs.MaleWorldModel, rhs.MaleWorldModel)) return false;
            }
            if (lhs.MaleIcon_IsSet != rhs.MaleIcon_IsSet) return false;
            if (lhs.MaleIcon_IsSet)
            {
                if (!string.Equals(lhs.MaleIcon, rhs.MaleIcon)) return false;
            }
            if (lhs.FemaleBipedModel_IsSet != rhs.FemaleBipedModel_IsSet) return false;
            if (lhs.FemaleBipedModel_IsSet)
            {
                if (!object.Equals(lhs.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            }
            if (lhs.FemaleWorldModel_IsSet != rhs.FemaleWorldModel_IsSet) return false;
            if (lhs.FemaleWorldModel_IsSet)
            {
                if (!object.Equals(lhs.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            }
            if (lhs.FemaleIcon_IsSet != rhs.FemaleIcon_IsSet) return false;
            if (lhs.FemaleIcon_IsSet)
            {
                if (!string.Equals(lhs.FemaleIcon, rhs.FemaleIcon)) return false;
            }
            if (lhs.BMDTDataTypeState != rhs.BMDTDataTypeState) return false;
            return true;
        }

        public override bool Equals(
            IItemAbstractInternalGetter lhs,
            IItemAbstractInternalGetter rhs)
        {
            return Equals(
                lhs: (IClothingAbstractInternalGetter)lhs,
                rhs: rhs as IClothingAbstractInternalGetter);
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IClothingAbstractInternalGetter)lhs,
                rhs: rhs as IClothingAbstractInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IClothingAbstractInternalGetter)lhs,
                rhs: rhs as IClothingAbstractInternalGetter);
        }

        public virtual int GetHashCode(IClothingAbstractInternalGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            if (item.Enchantment_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Enchantment).CombineHashCode(ret);
            }
            if (item.EnchantmentPoints_IsSet)
            {
                ret = HashHelper.GetHashCode(item.EnchantmentPoints).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.BipedFlags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            if (item.MaleBipedModel_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MaleBipedModel).CombineHashCode(ret);
            }
            if (item.MaleWorldModel_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MaleWorldModel).CombineHashCode(ret);
            }
            if (item.MaleIcon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MaleIcon).CombineHashCode(ret);
            }
            if (item.FemaleBipedModel_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FemaleBipedModel).CombineHashCode(ret);
            }
            if (item.FemaleWorldModel_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FemaleWorldModel).CombineHashCode(ret);
            }
            if (item.FemaleIcon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FemaleIcon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.BMDTDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IItemAbstractInternalGetter item)
        {
            return GetHashCode(item: (IClothingAbstractInternalGetter)item);
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IClothingAbstractInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IClothingAbstractInternalGetter)item);
        }

        #endregion


        #region Mutagen
        partial void PostDuplicate(ClothingAbstract obj, ClothingAbstract rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            throw new NotImplementedException();
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ClothingAbstractXmlWriteTranslation :
        ItemAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ClothingAbstractXmlWriteTranslation Instance = new ClothingAbstractXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClothingAbstractInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            ItemAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Enchantment_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Enchantment) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Enchantment),
                    item: item.Enchantment_Property?.FormKey,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.Enchantment,
                    errorMask: errorMask);
            }
            if (item.EnchantmentPoints_IsSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.EnchantmentPoints) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantmentPoints),
                    item: item.EnchantmentPoints,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.EnchantmentPoints,
                    errorMask: errorMask);
            }
            if (item.BMDTDataTypeState.HasFlag(ClothingAbstract.BMDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.BipedFlags) ?? true))
                {
                    EnumXmlTranslation<BipedFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.BipedFlags),
                        item: item.BipedFlags,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.BipedFlags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<EquipmentFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if (item.MaleBipedModel_IsSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleBipedModel) ?? true))
            {
                var loquiItem = item.MaleBipedModel;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.MaleBipedModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleBipedModel,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleBipedModel));
            }
            if (item.MaleWorldModel_IsSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleWorldModel) ?? true))
            {
                var loquiItem = item.MaleWorldModel;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.MaleWorldModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleWorldModel,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleWorldModel));
            }
            if (item.MaleIcon_IsSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.MaleIcon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleIcon),
                    item: item.MaleIcon,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.MaleIcon,
                    errorMask: errorMask);
            }
            if (item.FemaleBipedModel_IsSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleBipedModel) ?? true))
            {
                var loquiItem = item.FemaleBipedModel;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.FemaleBipedModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleBipedModel,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleBipedModel));
            }
            if (item.FemaleWorldModel_IsSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleWorldModel) ?? true))
            {
                var loquiItem = item.FemaleWorldModel;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.FemaleWorldModel),
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleWorldModel,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleWorldModel));
            }
            if (item.FemaleIcon_IsSet
                && (translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.FemaleIcon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleIcon),
                    item: item.FemaleIcon,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.FemaleIcon,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClothingAbstract_FieldIndex.BMDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<ClothingAbstract.BMDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.BMDTDataTypeState),
                    item: item.BMDTDataTypeState,
                    fieldIndex: (int)ClothingAbstract_FieldIndex.BMDTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IClothingAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ClothingAbstract");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ClothingAbstract");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClothingAbstractInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClothingAbstractInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClothingAbstractInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IClothingAbstractInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ClothingAbstractXmlCreateTranslation : ItemAbstractXmlCreateTranslation
    {
        public new readonly static ClothingAbstractXmlCreateTranslation Instance = new ClothingAbstractXmlCreateTranslation();

        public static void FillPublicXml(
            IClothingAbstractInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClothingAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClothingAbstractInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Enchantment":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Enchantment_Property,
                        fieldIndex: (int)ClothingAbstract_FieldIndex.Enchantment,
                        errorMask: errorMask);
                    break;
                case "EnchantmentPoints":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.EnchantmentPoints);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 EnchantmentPointsParse,
                            errorMask: errorMask))
                        {
                            item.EnchantmentPoints = EnchantmentPointsParse;
                        }
                        else
                        {
                            item.EnchantmentPoints = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BipedFlags":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.BipedFlags);
                        if (EnumXmlTranslation<BipedFlag>.Instance.Parse(
                            node: node,
                            item: out BipedFlag BipedFlagsParse,
                            errorMask: errorMask))
                        {
                            item.BipedFlags = BipedFlagsParse;
                        }
                        else
                        {
                            item.BipedFlags = default(BipedFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.BMDTDataTypeState |= ClothingAbstract.BMDTDataType.Has;
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.Flags);
                        if (EnumXmlTranslation<EquipmentFlag>.Instance.Parse(
                            node: node,
                            item: out EquipmentFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(EquipmentFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleBipedModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model MaleBipedModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleBipedModel)))
                        {
                            item.MaleBipedModel = MaleBipedModelParse;
                        }
                        else
                        {
                            item.MaleBipedModel = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleWorldModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model MaleWorldModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.MaleWorldModel)))
                        {
                            item.MaleWorldModel = MaleWorldModelParse;
                        }
                        else
                        {
                            item.MaleWorldModel = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleIcon":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.MaleIcon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String MaleIconParse,
                            errorMask: errorMask))
                        {
                            item.MaleIcon = MaleIconParse;
                        }
                        else
                        {
                            item.MaleIcon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleBipedModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model FemaleBipedModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleBipedModel)))
                        {
                            item.FemaleBipedModel = FemaleBipedModelParse;
                        }
                        else
                        {
                            item.FemaleBipedModel = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleWorldModel":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model FemaleWorldModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClothingAbstract_FieldIndex.FemaleWorldModel)))
                        {
                            item.FemaleWorldModel = FemaleWorldModelParse;
                        }
                        else
                        {
                            item.FemaleWorldModel = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleIcon":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.FemaleIcon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String FemaleIconParse,
                            errorMask: errorMask))
                        {
                            item.FemaleIcon = FemaleIconParse;
                        }
                        else
                        {
                            item.FemaleIcon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BMDTDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)ClothingAbstract_FieldIndex.BMDTDataTypeState);
                        if (EnumXmlTranslation<ClothingAbstract.BMDTDataType>.Instance.Parse(
                            node: node,
                            item: out ClothingAbstract.BMDTDataType BMDTDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.BMDTDataTypeState = BMDTDataTypeStateParse;
                        }
                        else
                        {
                            item.BMDTDataTypeState = default(ClothingAbstract.BMDTDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class ClothingAbstractXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClothingAbstractInternalGetter item,
            XElement node,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true,
            ClothingAbstract_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClothingAbstractXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClothingAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClothingAbstractInternalGetter item,
            string path,
            out ClothingAbstract_ErrorMask errorMask,
            ClothingAbstract_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClothingAbstractInternalGetter item,
            Stream stream,
            out ClothingAbstract_ErrorMask errorMask,
            ClothingAbstract_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class ClothingAbstract_Mask<T> : ItemAbstract_Mask<T>, IMask<T>, IEquatable<ClothingAbstract_Mask<T>>
    {
        #region Ctors
        public ClothingAbstract_Mask()
        {
        }

        public ClothingAbstract_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Script = initialValue;
            this.Enchantment = initialValue;
            this.EnchantmentPoints = initialValue;
            this.BipedFlags = initialValue;
            this.Flags = initialValue;
            this.MaleBipedModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.MaleWorldModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.MaleIcon = initialValue;
            this.FemaleBipedModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.FemaleWorldModel = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.FemaleIcon = initialValue;
            this.BMDTDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public T Script;
        public T Enchantment;
        public T EnchantmentPoints;
        public T BipedFlags;
        public T Flags;
        public MaskItem<T, Model_Mask<T>> MaleBipedModel { get; set; }
        public MaskItem<T, Model_Mask<T>> MaleWorldModel { get; set; }
        public T MaleIcon;
        public MaskItem<T, Model_Mask<T>> FemaleBipedModel { get; set; }
        public MaskItem<T, Model_Mask<T>> FemaleWorldModel { get; set; }
        public T FemaleIcon;
        public T BMDTDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ClothingAbstract_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ClothingAbstract_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
            if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
            if (!object.Equals(this.BipedFlags, rhs.BipedFlags)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.MaleBipedModel, rhs.MaleBipedModel)) return false;
            if (!object.Equals(this.MaleWorldModel, rhs.MaleWorldModel)) return false;
            if (!object.Equals(this.MaleIcon, rhs.MaleIcon)) return false;
            if (!object.Equals(this.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            if (!object.Equals(this.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            if (!object.Equals(this.FemaleIcon, rhs.FemaleIcon)) return false;
            if (!object.Equals(this.BMDTDataTypeState, rhs.BMDTDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantmentPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.BipedFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleBipedModel?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleWorldModel?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleIcon?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleBipedModel?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleWorldModel?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleIcon?.GetHashCode());
            ret = ret.CombineHashCode(this.BMDTDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Enchantment)) return false;
            if (!eval(this.EnchantmentPoints)) return false;
            if (!eval(this.BipedFlags)) return false;
            if (!eval(this.Flags)) return false;
            if (MaleBipedModel != null)
            {
                if (!eval(this.MaleBipedModel.Overall)) return false;
                if (this.MaleBipedModel.Specific != null && !this.MaleBipedModel.Specific.AllEqual(eval)) return false;
            }
            if (MaleWorldModel != null)
            {
                if (!eval(this.MaleWorldModel.Overall)) return false;
                if (this.MaleWorldModel.Specific != null && !this.MaleWorldModel.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.MaleIcon)) return false;
            if (FemaleBipedModel != null)
            {
                if (!eval(this.FemaleBipedModel.Overall)) return false;
                if (this.FemaleBipedModel.Specific != null && !this.FemaleBipedModel.Specific.AllEqual(eval)) return false;
            }
            if (FemaleWorldModel != null)
            {
                if (!eval(this.FemaleWorldModel.Overall)) return false;
                if (this.FemaleWorldModel.Specific != null && !this.FemaleWorldModel.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.FemaleIcon)) return false;
            if (!eval(this.BMDTDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new ClothingAbstract_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ClothingAbstract_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ClothingAbstract_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Script = eval(this.Script);
            obj.Enchantment = eval(this.Enchantment);
            obj.EnchantmentPoints = eval(this.EnchantmentPoints);
            obj.BipedFlags = eval(this.BipedFlags);
            obj.Flags = eval(this.Flags);
            if (this.MaleBipedModel != null)
            {
                obj.MaleBipedModel = new MaskItem<R, Model_Mask<R>>();
                obj.MaleBipedModel.Overall = eval(this.MaleBipedModel.Overall);
                if (this.MaleBipedModel.Specific != null)
                {
                    obj.MaleBipedModel.Specific = this.MaleBipedModel.Specific.Translate(eval);
                }
            }
            if (this.MaleWorldModel != null)
            {
                obj.MaleWorldModel = new MaskItem<R, Model_Mask<R>>();
                obj.MaleWorldModel.Overall = eval(this.MaleWorldModel.Overall);
                if (this.MaleWorldModel.Specific != null)
                {
                    obj.MaleWorldModel.Specific = this.MaleWorldModel.Specific.Translate(eval);
                }
            }
            obj.MaleIcon = eval(this.MaleIcon);
            if (this.FemaleBipedModel != null)
            {
                obj.FemaleBipedModel = new MaskItem<R, Model_Mask<R>>();
                obj.FemaleBipedModel.Overall = eval(this.FemaleBipedModel.Overall);
                if (this.FemaleBipedModel.Specific != null)
                {
                    obj.FemaleBipedModel.Specific = this.FemaleBipedModel.Specific.Translate(eval);
                }
            }
            if (this.FemaleWorldModel != null)
            {
                obj.FemaleWorldModel = new MaskItem<R, Model_Mask<R>>();
                obj.FemaleWorldModel.Overall = eval(this.FemaleWorldModel.Overall);
                if (this.FemaleWorldModel.Specific != null)
                {
                    obj.FemaleWorldModel.Specific = this.FemaleWorldModel.Specific.Translate(eval);
                }
            }
            obj.FemaleIcon = eval(this.FemaleIcon);
            obj.BMDTDataTypeState = eval(this.BMDTDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ClothingAbstract_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ClothingAbstract_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ClothingAbstract_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {Enchantment}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                }
                if (printMask?.BipedFlags ?? true)
                {
                    fg.AppendLine($"BipedFlags => {BipedFlags}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.MaleBipedModel?.Overall ?? true)
                {
                    MaleBipedModel?.ToString(fg);
                }
                if (printMask?.MaleWorldModel?.Overall ?? true)
                {
                    MaleWorldModel?.ToString(fg);
                }
                if (printMask?.MaleIcon ?? true)
                {
                    fg.AppendLine($"MaleIcon => {MaleIcon}");
                }
                if (printMask?.FemaleBipedModel?.Overall ?? true)
                {
                    FemaleBipedModel?.ToString(fg);
                }
                if (printMask?.FemaleWorldModel?.Overall ?? true)
                {
                    FemaleWorldModel?.ToString(fg);
                }
                if (printMask?.FemaleIcon ?? true)
                {
                    fg.AppendLine($"FemaleIcon => {FemaleIcon}");
                }
                if (printMask?.BMDTDataTypeState ?? true)
                {
                    fg.AppendLine($"BMDTDataTypeState => {BMDTDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ClothingAbstract_ErrorMask : ItemAbstract_ErrorMask, IErrorMask<ClothingAbstract_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Script;
        public Exception Enchantment;
        public Exception EnchantmentPoints;
        public Exception BipedFlags;
        public Exception Flags;
        public MaskItem<Exception, Model_ErrorMask> MaleBipedModel;
        public MaskItem<Exception, Model_ErrorMask> MaleWorldModel;
        public Exception MaleIcon;
        public MaskItem<Exception, Model_ErrorMask> FemaleBipedModel;
        public MaskItem<Exception, Model_ErrorMask> FemaleWorldModel;
        public Exception FemaleIcon;
        public Exception BMDTDataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    return Name;
                case ClothingAbstract_FieldIndex.Script:
                    return Script;
                case ClothingAbstract_FieldIndex.Enchantment:
                    return Enchantment;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return BipedFlags;
                case ClothingAbstract_FieldIndex.Flags:
                    return Flags;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return MaleBipedModel;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return MaleWorldModel;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return MaleIcon;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return FemaleBipedModel;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return FemaleWorldModel;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return FemaleIcon;
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    return BMDTDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case ClothingAbstract_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    this.Enchantment = ex;
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = ex;
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    this.BipedFlags = ex;
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    this.MaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    this.MaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    this.MaleIcon = ex;
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    this.FemaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    this.FemaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    this.FemaleIcon = ex;
                    break;
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    this.BMDTDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            ClothingAbstract_FieldIndex enu = (ClothingAbstract_FieldIndex)index;
            switch (enu)
            {
                case ClothingAbstract_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.Enchantment:
                    this.Enchantment = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.BipedFlags:
                    this.BipedFlags = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    this.MaleBipedModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    this.MaleWorldModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case ClothingAbstract_FieldIndex.MaleIcon:
                    this.MaleIcon = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    this.FemaleBipedModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    this.FemaleWorldModel = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    this.FemaleIcon = (Exception)obj;
                    break;
                case ClothingAbstract_FieldIndex.BMDTDataTypeState:
                    this.BMDTDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Script != null) return true;
            if (Enchantment != null) return true;
            if (EnchantmentPoints != null) return true;
            if (BipedFlags != null) return true;
            if (Flags != null) return true;
            if (MaleBipedModel != null) return true;
            if (MaleWorldModel != null) return true;
            if (MaleIcon != null) return true;
            if (FemaleBipedModel != null) return true;
            if (FemaleWorldModel != null) return true;
            if (FemaleIcon != null) return true;
            if (BMDTDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("ClothingAbstract_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Enchantment => {Enchantment}");
            fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
            fg.AppendLine($"BipedFlags => {BipedFlags}");
            fg.AppendLine($"Flags => {Flags}");
            MaleBipedModel?.ToString(fg);
            MaleWorldModel?.ToString(fg);
            fg.AppendLine($"MaleIcon => {MaleIcon}");
            FemaleBipedModel?.ToString(fg);
            FemaleWorldModel?.ToString(fg);
            fg.AppendLine($"FemaleIcon => {FemaleIcon}");
            fg.AppendLine($"BMDTDataTypeState => {BMDTDataTypeState}");
        }
        #endregion

        #region Combine
        public ClothingAbstract_ErrorMask Combine(ClothingAbstract_ErrorMask rhs)
        {
            var ret = new ClothingAbstract_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
            ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
            ret.BipedFlags = this.BipedFlags.Combine(rhs.BipedFlags);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.MaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(this.MaleBipedModel.Overall.Combine(rhs.MaleBipedModel.Overall), ((IErrorMask<Model_ErrorMask>)this.MaleBipedModel.Specific).Combine(rhs.MaleBipedModel.Specific));
            ret.MaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(this.MaleWorldModel.Overall.Combine(rhs.MaleWorldModel.Overall), ((IErrorMask<Model_ErrorMask>)this.MaleWorldModel.Specific).Combine(rhs.MaleWorldModel.Specific));
            ret.MaleIcon = this.MaleIcon.Combine(rhs.MaleIcon);
            ret.FemaleBipedModel = new MaskItem<Exception, Model_ErrorMask>(this.FemaleBipedModel.Overall.Combine(rhs.FemaleBipedModel.Overall), ((IErrorMask<Model_ErrorMask>)this.FemaleBipedModel.Specific).Combine(rhs.FemaleBipedModel.Specific));
            ret.FemaleWorldModel = new MaskItem<Exception, Model_ErrorMask>(this.FemaleWorldModel.Overall.Combine(rhs.FemaleWorldModel.Overall), ((IErrorMask<Model_ErrorMask>)this.FemaleWorldModel.Specific).Combine(rhs.FemaleWorldModel.Specific));
            ret.FemaleIcon = this.FemaleIcon.Combine(rhs.FemaleIcon);
            ret.BMDTDataTypeState = this.BMDTDataTypeState.Combine(rhs.BMDTDataTypeState);
            return ret;
        }
        public static ClothingAbstract_ErrorMask Combine(ClothingAbstract_ErrorMask lhs, ClothingAbstract_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ClothingAbstract_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ClothingAbstract_ErrorMask();
        }
        #endregion

    }
    public class ClothingAbstract_CopyMask : ItemAbstract_CopyMask
    {
        public ClothingAbstract_CopyMask()
        {
        }

        public ClothingAbstract_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Script = defaultOn;
            this.Enchantment = defaultOn;
            this.EnchantmentPoints = defaultOn;
            this.BipedFlags = defaultOn;
            this.Flags = defaultOn;
            this.MaleBipedModel = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.MaleWorldModel = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.MaleIcon = defaultOn;
            this.FemaleBipedModel = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.FemaleWorldModel = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.FemaleIcon = defaultOn;
            this.BMDTDataTypeState = defaultOn;
        }

        #region Members
        public bool Name;
        public bool Script;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool BipedFlags;
        public bool Flags;
        public MaskItem<CopyOption, Model_CopyMask> MaleBipedModel;
        public MaskItem<CopyOption, Model_CopyMask> MaleWorldModel;
        public bool MaleIcon;
        public MaskItem<CopyOption, Model_CopyMask> FemaleBipedModel;
        public MaskItem<CopyOption, Model_CopyMask> FemaleWorldModel;
        public bool FemaleIcon;
        public bool BMDTDataTypeState;
        #endregion

    }

    public class ClothingAbstract_TranslationMask : ItemAbstract_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Script;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool BipedFlags;
        public bool Flags;
        public MaskItem<bool, Model_TranslationMask> MaleBipedModel;
        public MaskItem<bool, Model_TranslationMask> MaleWorldModel;
        public bool MaleIcon;
        public MaskItem<bool, Model_TranslationMask> FemaleBipedModel;
        public MaskItem<bool, Model_TranslationMask> FemaleWorldModel;
        public bool FemaleIcon;
        public bool BMDTDataTypeState;
        #endregion

        #region Ctors
        public ClothingAbstract_TranslationMask()
            : base()
        {
        }

        public ClothingAbstract_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Script = defaultOn;
            this.Enchantment = defaultOn;
            this.EnchantmentPoints = defaultOn;
            this.BipedFlags = defaultOn;
            this.Flags = defaultOn;
            this.MaleBipedModel = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.MaleWorldModel = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.MaleIcon = defaultOn;
            this.FemaleBipedModel = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.FemaleWorldModel = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.FemaleIcon = defaultOn;
            this.BMDTDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Script, null));
            ret.Add((Enchantment, null));
            ret.Add((EnchantmentPoints, null));
            ret.Add((BipedFlags, null));
            ret.Add((Flags, null));
            ret.Add((MaleBipedModel?.Overall ?? true, MaleBipedModel?.Specific?.GetCrystal()));
            ret.Add((MaleWorldModel?.Overall ?? true, MaleWorldModel?.Specific?.GetCrystal()));
            ret.Add((MaleIcon, null));
            ret.Add((FemaleBipedModel?.Overall ?? true, FemaleBipedModel?.Specific?.GetCrystal()));
            ret.Add((FemaleWorldModel?.Overall ?? true, FemaleWorldModel?.Specific?.GetCrystal()));
            ret.Add((FemaleIcon, null));
            ret.Add((BMDTDataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ClothingAbstractBinaryWriteTranslation :
        ItemAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClothingAbstractBinaryWriteTranslation Instance = new ClothingAbstractBinaryWriteTranslation();

        public static void Write_Embedded(
            IClothingAbstractInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IClothingAbstractInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Enchantment_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Enchantment_Property,
                    header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ENAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.EnchantmentPoints_IsSet)
            {
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnchantmentPoints,
                    header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ANAM_HEADER),
                    nullable: false);
            }
            if (item.BMDTDataTypeState.HasFlag(ClothingAbstract.BMDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.BMDT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedFlag>.Instance.Write(
                        writer,
                        item.BipedFlags,
                        length: 2);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EquipmentFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 2);
                }
            }
            if (item.MaleBipedModel_IsSet)
            {
                var loquiItem = item.MaleBipedModel;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.MaleWorldModel_IsSet)
            {
                var loquiItem = item.MaleWorldModel;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: ClothingAbstract_Registration.MaleWorldModelConverter);
            }
            if (item.MaleIcon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaleIcon,
                    header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.FemaleBipedModel_IsSet)
            {
                var loquiItem = item.FemaleBipedModel;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: ClothingAbstract_Registration.FemaleBipedModelConverter);
            }
            if (item.FemaleWorldModel_IsSet)
            {
                var loquiItem = item.FemaleWorldModel;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: ClothingAbstract_Registration.FemaleWorldModelConverter);
            }
            if (item.FemaleIcon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FemaleIcon,
                    header: recordTypeConverter.ConvertToCustom(ClothingAbstract_Registration.ICO2_HEADER),
                    nullable: false);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IClothingAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClothingAbstractInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClothingAbstractInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClothingAbstractInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IClothingAbstractInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ClothingAbstractBinaryCreateTranslation : ItemAbstractBinaryCreateTranslation
    {
        public new readonly static ClothingAbstractBinaryCreateTranslation Instance = new ClothingAbstractBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class ClothingAbstractBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IClothingAbstractInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ClothingAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ClothingAbstractBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ClothingAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class ClothingAbstractBinaryWrapper :
        ItemAbstractBinaryWrapper,
        IClothingAbstractInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClothingAbstract_Registration.Instance;
        public new static ClothingAbstract_Registration Registration => ClothingAbstract_Registration.Instance;
        protected override object CommonInstance => ClothingAbstractCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClothingAbstractInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => ClothingAbstractXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => ClothingAbstractBinaryWriteTranslation.Instance;

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptInternalGetter> Script_Property => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptInternalGetter>.Empty;
        public IScriptInternalGetter Script => default;
        #endregion
        #region Enchantment
        private int? _EnchantmentLocation;
        public bool Enchantment_IsSet => _EnchantmentLocation.HasValue;
        public IFormIDSetLinkGetter<IEnchantmentInternalGetter> Enchantment_Property => _EnchantmentLocation.HasValue ? new FormIDSetLink<IEnchantmentInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentLocation.Value, _package.Meta)))) : FormIDSetLink<IEnchantmentInternalGetter>.Empty;
        public IEnchantmentInternalGetter Enchantment => default;
        #endregion
        #region EnchantmentPoints
        private int? _EnchantmentPointsLocation;
        public bool EnchantmentPoints_IsSet => _EnchantmentPointsLocation.HasValue;
        public UInt16 EnchantmentPoints => _EnchantmentPointsLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentPointsLocation.Value, _package.Meta)) : default;
        #endregion
        private int? _BMDTLocation;
        public ClothingAbstract.BMDTDataType BMDTDataTypeState { get; private set; }
        #region BipedFlags
        private int _BipedFlagsLocation => _BMDTLocation.Value + 0x0;
        private bool _BipedFlags_IsSet => _BMDTLocation.HasValue;
        public BipedFlag BipedFlags => _BipedFlags_IsSet ? (BipedFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BipedFlagsLocation, 2)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _BMDTLocation.Value + 0x2;
        private bool _Flags_IsSet => _BMDTLocation.HasValue;
        public EquipmentFlag Flags => _Flags_IsSet ? (EquipmentFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FlagsLocation, 2)) : default;
        #endregion
        #region MaleBipedModel
        public IModelGetter MaleBipedModel { get; private set; }
        public bool MaleBipedModel_IsSet => MaleBipedModel != null;
        #endregion
        #region MaleWorldModel
        public IModelGetter MaleWorldModel { get; private set; }
        public bool MaleWorldModel_IsSet => MaleWorldModel != null;
        #endregion
        #region MaleIcon
        private int? _MaleIconLocation;
        public bool MaleIcon_IsSet => _MaleIconLocation.HasValue;
        public String MaleIcon => _MaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _MaleIconLocation.Value, _package.Meta)) : default;
        #endregion
        #region FemaleBipedModel
        public IModelGetter FemaleBipedModel { get; private set; }
        public bool FemaleBipedModel_IsSet => FemaleBipedModel != null;
        #endregion
        #region FemaleWorldModel
        public IModelGetter FemaleWorldModel { get; private set; }
        public bool FemaleWorldModel_IsSet => FemaleWorldModel != null;
        #endregion
        #region FemaleIcon
        private int? _FemaleIconLocation;
        public bool FemaleIcon_IsSet => _FemaleIconLocation.HasValue;
        public String FemaleIcon => _FemaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _FemaleIconLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected ClothingAbstractBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Name);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    _EnchantmentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    _EnchantmentPointsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.EnchantmentPoints);
                }
                case 0x54444D42: // BMDT
                {
                    _BMDTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.BMDTDataTypeState = ClothingAbstract.BMDTDataType.Has;
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.Flags);
                }
                case 0x4C444F4D: // MODL
                {
                    this.MaleBipedModel = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleBipedModel);
                }
                case 0x32444F4D: // MOD2
                {
                    this.MaleWorldModel = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: ClothingAbstract_Registration.MaleWorldModelConverter);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleWorldModel);
                }
                case 0x4E4F4349: // ICON
                {
                    _MaleIconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.MaleIcon);
                }
                case 0x33444F4D: // MOD3
                {
                    this.FemaleBipedModel = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleBipedModelConverter);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleBipedModel);
                }
                case 0x34444F4D: // MOD4
                {
                    this.FemaleWorldModel = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: ClothingAbstract_Registration.FemaleWorldModelConverter);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleWorldModel);
                }
                case 0x324F4349: // ICO2
                {
                    _FemaleIconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ClothingAbstract_FieldIndex.FemaleIcon);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
    }

    #endregion

    #endregion

}
