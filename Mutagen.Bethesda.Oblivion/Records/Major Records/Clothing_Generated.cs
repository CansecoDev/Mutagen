/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Clothing :
        AClothing,
        IClothingInternal,
        ILoquiObjectSetter<Clothing>,
        IEquatable<IClothingGetter>
    {
        #region Ctor
        protected Clothing()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClothingData? _Data;
        public ClothingData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IClothingDataGetter? IClothingGetter.Data => this.Data;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClothingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IClothingGetter rhs)) return false;
            return ((ClothingCommon)((IClothingGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IClothingGetter? obj)
        {
            return ((ClothingCommon)((IClothingGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClothingCommon)((IClothingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AClothing.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Data = new MaskItem<TItem, ClothingData.Mask<TItem>?>(initialValue, new ClothingData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Script,
                TItem Enchantment,
                TItem EnchantmentPoints,
                TItem ClothingFlags,
                TItem MaleBipedModel,
                TItem MaleWorldModel,
                TItem MaleIcon,
                TItem FemaleBipedModel,
                TItem FemaleWorldModel,
                TItem FemaleIcon,
                TItem Data)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags,
                Name: Name,
                Script: Script,
                Enchantment: Enchantment,
                EnchantmentPoints: EnchantmentPoints,
                ClothingFlags: ClothingFlags,
                MaleBipedModel: MaleBipedModel,
                MaleWorldModel: MaleWorldModel,
                MaleIcon: MaleIcon,
                FemaleBipedModel: FemaleBipedModel,
                FemaleWorldModel: FemaleWorldModel,
                FemaleIcon: FemaleIcon)
            {
                this.Data = new MaskItem<TItem, ClothingData.Mask<TItem>?>(Data, new ClothingData.Mask<TItem>(Data));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ClothingData.Mask<TItem>?>? Data { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Clothing.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Data = this.Data == null ? null : new MaskItem<R, ClothingData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Clothing.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Clothing.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Clothing.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AClothing.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ClothingData.ErrorMask?>? Data;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
                switch (enu)
                {
                    case Clothing_FieldIndex.Data:
                        return Data;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
                switch (enu)
                {
                    case Clothing_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, ClothingData.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
                switch (enu)
                {
                    case Clothing_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, ClothingData.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Data?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AClothing.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ClothingData.TranslationMask? Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Clothing_Registration.TriggeringRecordType;
        public Clothing(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Clothing(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Clothing(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClothingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClothingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Clothing CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Clothing();
            ((ClothingSetterCommon)((IClothingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Clothing item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ClothingSetterCommon)((IClothingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Clothing GetNew()
        {
            return new Clothing();
        }

    }
    #endregion

    #region Interface
    public partial interface IClothing :
        IClothingGetter,
        IAClothing,
        ILoquiObjectSetter<IClothingInternal>
    {
        new ClothingData? Data { get; set; }
    }

    public partial interface IClothingInternal :
        IAClothingInternal,
        IClothing,
        IClothingGetter
    {
    }

    public partial interface IClothingGetter :
        IAClothingGetter,
        ILoquiObject<IClothingGetter>,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Clothing_Registration.Instance;
        IClothingDataGetter? Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClothingMixIn
    {
        public static void Clear(this IClothingInternal item)
        {
            ((ClothingSetterCommon)((IClothingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Clothing.Mask<bool> GetEqualsMask(
            this IClothingGetter item,
            IClothingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClothingCommon)((IClothingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClothingGetter item,
            string? name = null,
            Clothing.Mask<bool>? printMask = null)
        {
            return ((ClothingCommon)((IClothingGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClothingGetter item,
            FileGeneration fg,
            string? name = null,
            Clothing.Mask<bool>? printMask = null)
        {
            ((ClothingCommon)((IClothingGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IClothingGetter item,
            IClothingGetter rhs)
        {
            return ((ClothingCommon)((IClothingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClothingInternal lhs,
            IClothingGetter rhs,
            out Clothing.ErrorMask errorMask,
            Clothing.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClothingSetterTranslationCommon)((IClothingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Clothing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClothingInternal lhs,
            IClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClothingSetterTranslationCommon)((IClothingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Clothing DeepCopy(
            this IClothingGetter item,
            Clothing.TranslationMask? copyMask = null)
        {
            return ((ClothingSetterTranslationCommon)((IClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Clothing DeepCopy(
            this IClothingGetter item,
            out Clothing.ErrorMask errorMask,
            Clothing.TranslationMask? copyMask = null)
        {
            return ((ClothingSetterTranslationCommon)((IClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Clothing DeepCopy(
            this IClothingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClothingSetterTranslationCommon)((IClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IClothingInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClothingSetterCommon)((IClothingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Clothing_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        ClothingFlags = 9,
        MaleBipedModel = 10,
        MaleWorldModel = 11,
        MaleIcon = 12,
        FemaleBipedModel = 13,
        FemaleWorldModel = 14,
        FemaleIcon = 15,
        Data = 16,
    }
    #endregion

    #region Registration
    public partial class Clothing_Registration : ILoquiRegistration
    {
        public static readonly Clothing_Registration Instance = new Clothing_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 70,
            version: 0);

        public const string GUID = "961523f7-15f4-402b-9446-4bac4a46f998";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(Clothing.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Clothing.ErrorMask);

        public static readonly Type ClassType = typeof(Clothing);

        public static readonly Type GetterType = typeof(IClothingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClothing);

        public static readonly Type? InternalSetterType = typeof(IClothingInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Clothing";

        public const string Name = "Clothing";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CLOT;
        public static readonly Type BinaryWriteTranslation = typeof(ClothingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ClothingSetterCommon : AClothingSetterCommon
    {
        public new static readonly ClothingSetterCommon Instance = new ClothingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClothingInternal item)
        {
            ClearPartial();
            item.Data = null;
            base.Clear(item);
        }
        
        public override void Clear(IAClothingInternal item)
        {
            Clear(item: (IClothingInternal)item);
        }
        
        public override void Clear(IAItemInternal item)
        {
            Clear(item: (IClothingInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IClothingInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClothingInternal)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClothingInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IClothingInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ClothingBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ClothingBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAClothingInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Clothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IAItemInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Clothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Clothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Clothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ClothingCommon : AClothingCommon
    {
        public new static readonly ClothingCommon Instance = new ClothingCommon();

        public Clothing.Mask<bool> GetEqualsMask(
            IClothingGetter item,
            IClothingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Clothing.Mask<bool>(false);
            ((ClothingCommon)((IClothingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClothingGetter item,
            IClothingGetter rhs,
            Clothing.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IClothingGetter item,
            string? name = null,
            Clothing.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClothingGetter item,
            FileGeneration fg,
            string? name = null,
            Clothing.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Clothing =>");
            }
            else
            {
                fg.AppendLine($"{name} (Clothing) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClothingGetter item,
            FileGeneration fg,
            Clothing.Mask<bool>? printMask = null)
        {
            AClothingCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
        }
        
        public static Clothing_FieldIndex ConvertFieldIndex(AClothing_FieldIndex index)
        {
            switch (index)
            {
                case AClothing_FieldIndex.MajorRecordFlagsRaw:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.FormKey:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.VersionControl:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.EditorID:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.OblivionMajorRecordFlags:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.Name:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.Script:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.Enchantment:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.EnchantmentPoints:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.ClothingFlags:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.MaleBipedModel:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.MaleWorldModel:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.MaleIcon:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.FemaleBipedModel:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.FemaleWorldModel:
                    return (Clothing_FieldIndex)((int)index);
                case AClothing_FieldIndex.FemaleIcon:
                    return (Clothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Clothing_FieldIndex ConvertFieldIndex(AItem_FieldIndex index)
        {
            switch (index)
            {
                case AItem_FieldIndex.MajorRecordFlagsRaw:
                    return (Clothing_FieldIndex)((int)index);
                case AItem_FieldIndex.FormKey:
                    return (Clothing_FieldIndex)((int)index);
                case AItem_FieldIndex.VersionControl:
                    return (Clothing_FieldIndex)((int)index);
                case AItem_FieldIndex.EditorID:
                    return (Clothing_FieldIndex)((int)index);
                case AItem_FieldIndex.OblivionMajorRecordFlags:
                    return (Clothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Clothing_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Clothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Clothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Clothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Clothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Clothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Clothing_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Clothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Clothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Clothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Clothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClothingGetter? lhs,
            IClothingGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAClothingGetter)lhs, (IAClothingGetter)rhs)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            return true;
        }
        
        public override bool Equals(
            IAClothingGetter? lhs,
            IAClothingGetter? rhs)
        {
            return Equals(
                lhs: (IClothingGetter?)lhs,
                rhs: rhs as IClothingGetter);
        }
        
        public override bool Equals(
            IAItemGetter? lhs,
            IAItemGetter? rhs)
        {
            return Equals(
                lhs: (IClothingGetter?)lhs,
                rhs: rhs as IClothingGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClothingGetter?)lhs,
                rhs: rhs as IClothingGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClothingGetter?)lhs,
                rhs: rhs as IClothingGetter);
        }
        
        public virtual int GetHashCode(IClothingGetter item)
        {
            var hash = new HashCode();
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAClothingGetter item)
        {
            return GetHashCode(item: (IClothingGetter)item);
        }
        
        public override int GetHashCode(IAItemGetter item)
        {
            return GetHashCode(item: (IClothingGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IClothingGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClothingGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Clothing.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IClothingGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IClothingGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Clothing obj, Clothing rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Clothing(getNextFormKey());
            ret.DeepCopyIn((Clothing)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Clothing)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ClothingSetterTranslationCommon : AClothingSetterTranslationCommon
    {
        public new static readonly ClothingSetterTranslationCommon Instance = new ClothingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IClothingInternal item,
            IClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IClothing item,
            IClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAClothing)item,
                (IAClothingGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Clothing_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Clothing_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Clothing_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IAClothingInternal item,
            IAClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClothingInternal)item,
                rhs: (IClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAClothing item,
            IAClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClothing)item,
                rhs: (IClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAItemInternal item,
            IAItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClothingInternal)item,
                rhs: (IClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAItem item,
            IAItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClothing)item,
                rhs: (IClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClothingInternal)item,
                rhs: (IClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClothing)item,
                rhs: (IClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClothingInternal)item,
                rhs: (IClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClothing)item,
                rhs: (IClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Clothing DeepCopy(
            IClothingGetter item,
            Clothing.TranslationMask? copyMask = null)
        {
            Clothing ret = (Clothing)((ClothingCommon)((IClothingGetter)item).CommonInstance()!).GetNew();
            ((ClothingSetterTranslationCommon)((IClothingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Clothing DeepCopy(
            IClothingGetter item,
            out Clothing.ErrorMask errorMask,
            Clothing.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Clothing ret = (Clothing)((ClothingCommon)((IClothingGetter)item).CommonInstance()!).GetNew();
            ((ClothingSetterTranslationCommon)((IClothingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Clothing.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Clothing DeepCopy(
            IClothingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Clothing ret = (Clothing)((ClothingCommon)((IClothingGetter)item).CommonInstance()!).GetNew();
            ((ClothingSetterTranslationCommon)((IClothingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Clothing
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Clothing_Registration.Instance;
        public new static Clothing_Registration Registration => Clothing_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClothingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClothingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClothingSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClothingBinaryWriteTranslation :
        AClothingBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClothingBinaryWriteTranslation Instance = new ClothingBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IClothingGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            AClothingBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Data.TryGet(out var DataItem))
            {
                ((ClothingDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IClothingGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CLOT),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAClothingGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAItemGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClothingBinaryCreateTranslation : AClothingBinaryCreateTranslation
    {
        public new readonly static ClothingBinaryCreateTranslation Instance = new ClothingBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CLOT;
        public static void FillBinaryStructs(
            IClothingInternal item,
            MutagenFrame frame)
        {
            AClothingBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IClothingInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.ClothingData.CreateFromBinary(frame: frame);
                    return (int)Clothing_FieldIndex.Data;
                }
                default:
                    return AClothingBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClothingBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClothingBinaryOverlay :
        AClothingBinaryOverlay,
        IClothingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Clothing_Registration.Instance;
        public new static Clothing_Registration Registration => Clothing_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClothingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClothingSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClothingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClothingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Data
        private RangeInt32? _DataLocation;
        public IClothingDataGetter? Data => _DataLocation.HasValue ? ClothingDataBinaryOverlay.ClothingDataFactory(new OverlayStream(_data.Slice(_DataLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClothingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ClothingBinaryOverlay ClothingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ClothingBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ClothingBinaryOverlay ClothingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ClothingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Clothing_FieldIndex.Data;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClothingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IClothingGetter rhs)) return false;
            return ((ClothingCommon)((IClothingGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IClothingGetter? obj)
        {
            return ((ClothingCommon)((IClothingGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClothingCommon)((IClothingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

