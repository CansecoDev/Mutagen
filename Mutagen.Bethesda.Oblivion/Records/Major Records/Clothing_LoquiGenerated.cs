/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Clothing : ClothingAbstract, IClothing, ILoquiObject<Clothing>, ILoquiObjectSetter, IEquatable<Clothing>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Clothing_Registration.Instance;
        public new static Clothing_Registration Registration => Clothing_Registration.Instance;

        #region Ctor
        public Clothing()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Value
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt32> _Value = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Value_Property => _Value;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Value
        {
            get => this._Value.Item;
            set => this._Value.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IClothing.Value_Property => this.Value_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IClothingGetter.Value_Property => this.Value_Property;
        #endregion
        #region Weight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _Weight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Weight_Property => _Weight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Weight
        {
            get => this._Weight.Item;
            set => this._Weight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IClothing.Weight_Property => this.Weight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IClothingGetter.Weight_Property => this.Weight_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ClothingCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ClothingCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ClothingCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ClothingCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Clothing>.GetEqualsMask(Clothing rhs) => ClothingCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IClothingGetter>.GetEqualsMask(IClothingGetter rhs) => ClothingCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ClothingCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Clothing_Mask<bool> printMask = null)
        {
            return ClothingCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClothingCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Clothing_Mask<bool> GetHasBeenSetMask()
        {
            return ClothingCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Clothing rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Clothing rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.Value != rhs.Value) return false;
            if (!this.Weight.EqualsWithin(rhs.Weight)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Clothing Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Clothing Create_XML(
            XElement root,
            out Clothing_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Clothing Object, Clothing_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Clothing_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Clothing_ErrorMask()) : default(Func<Clothing_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Clothing Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Clothing Create_XML(
            string path,
            out Clothing_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Clothing Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Clothing Create_XML(
            Stream stream,
            out Clothing_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Clothing, Clothing_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Clothing_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Clothing, Clothing_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Clothing_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Clothing_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out ClothingAbstract_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Clothing_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Clothing_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Clothing_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Clothing_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as Clothing_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out Clothing_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Clothing_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            ClothingCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Clothing Create_XML_Internal(
            XElement root,
            Func<Clothing_ErrorMask> errorMask)
        {
            var ret = new Clothing();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Clothing item,
            XElement root,
            string name,
            Func<Clothing_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Value":
                    item._Value.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Clothing_FieldIndex.Value,
                        errorMask: errorMask));
                    break;
                case "Weight":
                    item._Weight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Clothing_FieldIndex.Weight,
                        errorMask: errorMask));
                    break;
                default:
                    ClothingAbstract.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Clothing_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Clothing Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Clothing Create_Binary(
            MutagenFrame frame,
            out Clothing_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Clothing Object, Clothing_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Clothing_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Clothing_ErrorMask()) : default(Func<Clothing_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Clothing Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Clothing Create_Binary(
            string path,
            out Clothing_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Clothing Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Clothing Create_Binary(
            Stream stream,
            out Clothing_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Clothing_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as Clothing_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out Clothing_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Clothing_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ClothingCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Clothing Create_Binary_Internal(
            MutagenFrame frame,
            Func<Clothing_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Clothing, Clothing_ErrorMask, Clothing_FieldIndex>(
                record: new Clothing(),
                frame: frame,
                errorMask: errorMask,
                recType: Clothing_Registration.CLOT_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Clothing item,
            MutagenFrame frame,
            Func<Clothing_ErrorMask> errorMask)
        {
            ClothingAbstract.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Clothing_FieldIndex?> Fill_Binary_RecordTypes(
            Clothing item,
            MutagenFrame frame,
            Func<Clothing_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        item._Value.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Clothing_FieldIndex.Value,
                            errorMask: errorMask));
                        item._Weight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Clothing_FieldIndex.Weight,
                            errorMask: errorMask));
                    }
                    return TryGet<Clothing_FieldIndex?>.Succeed(Clothing_FieldIndex.Weight);
                default:
                    return ClothingAbstract.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => ClothingCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Clothing Copy(
            Clothing_CopyMask copyMask = null,
            IClothingGetter def = null)
        {
            return Clothing.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Clothing Copy(
            IClothing item,
            Clothing_CopyMask copyMask = null,
            IClothingGetter def = null)
        {
            Clothing ret;
            if (item.GetType().Equals(typeof(Clothing)))
            {
                ret = new Clothing();
            }
            else
            {
                ret = (Clothing)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Clothing Copy_ToLoqui(
            IClothingGetter item,
            Clothing_CopyMask copyMask = null,
            IClothingGetter def = null)
        {
            Clothing ret;
            if (item.GetType().Equals(typeof(Clothing)))
            {
                ret = new Clothing() as Clothing;
            }
            else
            {
                ret = (Clothing)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IClothingGetter rhs,
            Clothing_CopyMask copyMask,
            IClothingGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IClothingGetter rhs,
            out Clothing_ErrorMask errorMask,
            Clothing_CopyMask copyMask = null,
            IClothingGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Clothing_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Clothing_ErrorMask();
                }
                return retErrorMask;
            };
            ClothingCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    this._Value.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Clothing_FieldIndex.Weight:
                    this._Weight.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ClothingCommon.Clear(this, cmds);
        }


        public new static Clothing Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Clothing();
            foreach (var pair in fields)
            {
                CopyInInternal_Clothing(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Clothing(Clothing obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Clothing_FieldIndex enu))
            {
                CopyInInternal_ClothingAbstract(obj, pair);
            }
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    obj._Value.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Clothing_FieldIndex.Weight:
                    obj._Weight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Clothing obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IClothing : IClothingGetter, IClothingAbstract, ILoquiClass<IClothing, IClothingGetter>, ILoquiClass<Clothing, IClothingGetter>
    {
        new UInt32 Value { get; set; }
        new INotifyingItem<UInt32> Value_Property { get; }

        new Single Weight { get; set; }
        new INotifyingItem<Single> Weight_Property { get; }

    }

    public partial interface IClothingGetter : IClothingAbstractGetter
    {
        #region Value
        UInt32 Value { get; }
        INotifyingItemGetter<UInt32> Value_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        INotifyingItemGetter<Single> Weight_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Clothing_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        Value = 17,
        Weight = 18,
    }
    #endregion

    #region Registration
    public class Clothing_Registration : ILoquiRegistration
    {
        public static readonly Clothing_Registration Instance = new Clothing_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 70,
            version: 0);

        public const string GUID = "961523f7-15f4-402b-9446-4bac4a46f998";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Clothing_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Clothing_ErrorMask);

        public static readonly Type ClassType = typeof(Clothing);

        public static readonly Type GetterType = typeof(IClothingGetter);

        public static readonly Type SetterType = typeof(IClothing);

        public static readonly Type CommonType = typeof(ClothingCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Clothing";

        public const string Name = "Clothing";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VALUE":
                    return (ushort)Clothing_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)Clothing_FieldIndex.Weight;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                case Clothing_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                case Clothing_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                case Clothing_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    return "Value";
                case Clothing_FieldIndex.Weight:
                    return "Weight";
                default:
                    return ClothingAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                case Clothing_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                case Clothing_FieldIndex.Weight:
                    return false;
                default:
                    return ClothingAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    return typeof(UInt32);
                case Clothing_FieldIndex.Weight:
                    return typeof(Single);
                default:
                    return ClothingAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLOT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ClothingCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IClothing item,
            IClothingGetter rhs,
            IClothingGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Clothing_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            ClothingAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Value ?? true)
            {
                try
                {
                    item.Value_Property.Set(
                        value: rhs.Value,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Clothing_FieldIndex.Value, ex);
                }
            }
            if (copyMask?.Weight ?? true)
            {
                try
                {
                    item.Weight_Property.Set(
                        value: rhs.Weight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Clothing_FieldIndex.Weight, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IClothing obj,
            NotifyingFireParameters cmds = null)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                case Clothing_FieldIndex.Weight:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    ClothingAbstractCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IClothing obj,
            NotifyingUnsetParameters cmds = null)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    obj.Value = default(UInt32);
                    break;
                case Clothing_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                default:
                    ClothingAbstractCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IClothing obj)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                case Clothing_FieldIndex.Weight:
                    return true;
                default:
                    return ClothingAbstractCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IClothingGetter obj)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    return obj.Value;
                case Clothing_FieldIndex.Weight:
                    return obj.Weight;
                default:
                    return ClothingAbstractCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IClothing item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Value = default(UInt32);
            item.Weight = default(Single);
        }

        public static Clothing_Mask<bool> GetEqualsMask(
            this IClothingGetter item,
            IClothingGetter rhs)
        {
            var ret = new Clothing_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IClothingGetter item,
            IClothingGetter rhs,
            Clothing_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight == rhs.Weight;
            ClothingAbstractCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IClothingGetter item,
            string name = null,
            Clothing_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IClothingGetter item,
            FileGeneration fg,
            string name = null,
            Clothing_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Clothing)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Clothing)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {item.Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IClothingGetter item,
            Clothing_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Clothing_Mask<bool> GetHasBeenSetMask(IClothingGetter item)
        {
            var ret = new Clothing_Mask<bool>();
            ret.Value = true;
            ret.Weight = true;
            return ret;
        }

        public static Clothing_FieldIndex? ConvertFieldIndex(ClothingAbstract_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Clothing_FieldIndex ConvertFieldIndex(ClothingAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ClothingAbstract_FieldIndex.MajorRecordFlags:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FormID:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Version:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EditorID:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.RecordType:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Name:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Script:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Enchantment:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.EnchantmentPoints:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.BipedFlags:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.Flags:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleBipedModel:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleWorldModel:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.MaleIcon:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleBipedModel:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleWorldModel:
                    return (Clothing_FieldIndex)((int)index);
                case ClothingAbstract_FieldIndex.FemaleIcon:
                    return (Clothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Clothing_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Clothing_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Clothing_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Clothing_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Clothing_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Clothing_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Clothing_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Clothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Clothing_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Clothing_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Clothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Clothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Clothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Clothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Clothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IClothingGetter item,
            bool doMasks,
            out Clothing_ErrorMask errorMask,
            string name = null)
        {
            Clothing_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Clothing_ErrorMask()) : default(Func<Clothing_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            IClothingGetter item,
            Func<Clothing_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Clothing");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Clothing");
                }
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Value),
                    item: item.Value_Property,
                    fieldIndex: (int)Clothing_FieldIndex.Value,
                    errorMask: errorMask);
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Weight),
                    item: item.Weight_Property,
                    fieldIndex: (int)Clothing_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Clothing item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Clothing_ErrorMask errorMask)
        {
            Clothing_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Clothing_ErrorMask()) : default(Func<Clothing_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Clothing item,
            RecordTypeConverter recordTypeConverter,
            Func<Clothing_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Clothing_Registration.CLOT_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Clothing item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Clothing_ErrorMask> errorMask)
        {
            ClothingAbstractCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, Clothing_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Value_Property,
                    fieldIndex: (int)Clothing_FieldIndex.Value,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight_Property,
                    fieldIndex: (int)Clothing_FieldIndex.Weight,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Clothing_Mask<T> : ClothingAbstract_Mask<T>, IMask<T>, IEquatable<Clothing_Mask<T>>
    {
        #region Ctors
        public Clothing_Mask()
        {
        }

        public Clothing_Mask(T initialValue)
        {
            this.Value = initialValue;
            this.Weight = initialValue;
        }
        #endregion

        #region Members
        public T Value;
        public T Weight;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Clothing_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Clothing_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Weight)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Clothing_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Clothing_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Clothing_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Value = eval(this.Value);
            obj.Weight = eval(this.Weight);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Clothing_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Clothing_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Clothing_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Clothing_ErrorMask : ClothingAbstract_ErrorMask, IErrorMask<Clothing_ErrorMask>
    {
        #region Members
        public Exception Value;
        public Exception Weight;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    return Value;
                case Clothing_FieldIndex.Weight:
                    return Weight;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Clothing_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Clothing_FieldIndex enu = (Clothing_FieldIndex)index;
            switch (enu)
            {
                case Clothing_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Clothing_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Value != null) return true;
            if (Weight != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Clothing_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Weight => {Weight}");
        }
        #endregion

        #region Combine
        public Clothing_ErrorMask Combine(Clothing_ErrorMask rhs)
        {
            var ret = new Clothing_ErrorMask();
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            return ret;
        }
        public static Clothing_ErrorMask Combine(Clothing_ErrorMask lhs, Clothing_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Clothing_CopyMask : ClothingAbstract_CopyMask
    {
        #region Members
        public bool Value;
        public bool Weight;
        #endregion

    }
    #endregion




    #endregion

}
