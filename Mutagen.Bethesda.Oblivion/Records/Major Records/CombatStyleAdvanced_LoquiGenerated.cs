/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CombatStyleAdvanced :
        LoquiNotifyingObject,
        ICombatStyleAdvanced,
        ILoquiObject<CombatStyleAdvanced>,
        ILoquiObjectSetter,
        IEquatable<CombatStyleAdvanced>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleAdvanced_Registration.Instance;
        public static CombatStyleAdvanced_Registration Registration => CombatStyleAdvanced_Registration.Instance;

        #region Ctor
        public CombatStyleAdvanced()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DodgeFatigueModMult
        private Single _DodgeFatigueModMult;
        public Single DodgeFatigueModMult
        {
            get => this._DodgeFatigueModMult;
            set => this.RaiseAndSetIfChanged(ref this._DodgeFatigueModMult, value, nameof(DodgeFatigueModMult));
        }
        #endregion
        #region DodgeFatigueModBase
        private Single _DodgeFatigueModBase;
        public Single DodgeFatigueModBase
        {
            get => this._DodgeFatigueModBase;
            set => this.RaiseAndSetIfChanged(ref this._DodgeFatigueModBase, value, nameof(DodgeFatigueModBase));
        }
        #endregion
        #region EncumbSpeedModBase
        private Single _EncumbSpeedModBase;
        public Single EncumbSpeedModBase
        {
            get => this._EncumbSpeedModBase;
            set => this.RaiseAndSetIfChanged(ref this._EncumbSpeedModBase, value, nameof(EncumbSpeedModBase));
        }
        #endregion
        #region EncumbSpeedModMult
        private Single _EncumbSpeedModMult;
        public Single EncumbSpeedModMult
        {
            get => this._EncumbSpeedModMult;
            set => this.RaiseAndSetIfChanged(ref this._EncumbSpeedModMult, value, nameof(EncumbSpeedModMult));
        }
        #endregion
        #region DodgeWhileUnderAttackMult
        private Single _DodgeWhileUnderAttackMult;
        public Single DodgeWhileUnderAttackMult
        {
            get => this._DodgeWhileUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._DodgeWhileUnderAttackMult, value, nameof(DodgeWhileUnderAttackMult));
        }
        #endregion
        #region DodgeNotUnderAttackMult
        private Single _DodgeNotUnderAttackMult;
        public Single DodgeNotUnderAttackMult
        {
            get => this._DodgeNotUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._DodgeNotUnderAttackMult, value, nameof(DodgeNotUnderAttackMult));
        }
        #endregion
        #region DodgeBackWhileUnderAttackMult
        private Single _DodgeBackWhileUnderAttackMult;
        public Single DodgeBackWhileUnderAttackMult
        {
            get => this._DodgeBackWhileUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._DodgeBackWhileUnderAttackMult, value, nameof(DodgeBackWhileUnderAttackMult));
        }
        #endregion
        #region DodgeBackNotUnderAttackMult
        private Single _DodgeBackNotUnderAttackMult;
        public Single DodgeBackNotUnderAttackMult
        {
            get => this._DodgeBackNotUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._DodgeBackNotUnderAttackMult, value, nameof(DodgeBackNotUnderAttackMult));
        }
        #endregion
        #region DodgeForwardWhileUnderAttackMult
        private Single _DodgeForwardWhileUnderAttackMult;
        public Single DodgeForwardWhileUnderAttackMult
        {
            get => this._DodgeForwardWhileUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._DodgeForwardWhileUnderAttackMult, value, nameof(DodgeForwardWhileUnderAttackMult));
        }
        #endregion
        #region DodgeForwardNotUnderAttackMult
        private Single _DodgeForwardNotUnderAttackMult;
        public Single DodgeForwardNotUnderAttackMult
        {
            get => this._DodgeForwardNotUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._DodgeForwardNotUnderAttackMult, value, nameof(DodgeForwardNotUnderAttackMult));
        }
        #endregion
        #region BlockSkillModifierMult
        private Single _BlockSkillModifierMult;
        public Single BlockSkillModifierMult
        {
            get => this._BlockSkillModifierMult;
            set => this.RaiseAndSetIfChanged(ref this._BlockSkillModifierMult, value, nameof(BlockSkillModifierMult));
        }
        #endregion
        #region BlockSkillModifierBase
        private Single _BlockSkillModifierBase;
        public Single BlockSkillModifierBase
        {
            get => this._BlockSkillModifierBase;
            set => this.RaiseAndSetIfChanged(ref this._BlockSkillModifierBase, value, nameof(BlockSkillModifierBase));
        }
        #endregion
        #region BlockWhileUnderAttackMult
        private Single _BlockWhileUnderAttackMult;
        public Single BlockWhileUnderAttackMult
        {
            get => this._BlockWhileUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._BlockWhileUnderAttackMult, value, nameof(BlockWhileUnderAttackMult));
        }
        #endregion
        #region BlockNotUnderAttackMult
        private Single _BlockNotUnderAttackMult;
        public Single BlockNotUnderAttackMult
        {
            get => this._BlockNotUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._BlockNotUnderAttackMult, value, nameof(BlockNotUnderAttackMult));
        }
        #endregion
        #region AttackSkillModifierMult
        private Single _AttackSkillModifierMult;
        public Single AttackSkillModifierMult
        {
            get => this._AttackSkillModifierMult;
            set => this.RaiseAndSetIfChanged(ref this._AttackSkillModifierMult, value, nameof(AttackSkillModifierMult));
        }
        #endregion
        #region AttackSkillModifierBase
        private Single _AttackSkillModifierBase;
        public Single AttackSkillModifierBase
        {
            get => this._AttackSkillModifierBase;
            set => this.RaiseAndSetIfChanged(ref this._AttackSkillModifierBase, value, nameof(AttackSkillModifierBase));
        }
        #endregion
        #region AttackWhileUnderAttackMult
        private Single _AttackWhileUnderAttackMult;
        public Single AttackWhileUnderAttackMult
        {
            get => this._AttackWhileUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._AttackWhileUnderAttackMult, value, nameof(AttackWhileUnderAttackMult));
        }
        #endregion
        #region AttackNotUnderAttackMult
        private Single _AttackNotUnderAttackMult;
        public Single AttackNotUnderAttackMult
        {
            get => this._AttackNotUnderAttackMult;
            set => this.RaiseAndSetIfChanged(ref this._AttackNotUnderAttackMult, value, nameof(AttackNotUnderAttackMult));
        }
        #endregion
        #region AttackDuringBlockMult
        private Single _AttackDuringBlockMult;
        public Single AttackDuringBlockMult
        {
            get => this._AttackDuringBlockMult;
            set => this.RaiseAndSetIfChanged(ref this._AttackDuringBlockMult, value, nameof(AttackDuringBlockMult));
        }
        #endregion
        #region PowerAttackFatigueModBase
        private Single _PowerAttackFatigueModBase;
        public Single PowerAttackFatigueModBase
        {
            get => this._PowerAttackFatigueModBase;
            set => this.RaiseAndSetIfChanged(ref this._PowerAttackFatigueModBase, value, nameof(PowerAttackFatigueModBase));
        }
        #endregion
        #region PowerAttackFatigueModMult
        private Single _PowerAttackFatigueModMult;
        public Single PowerAttackFatigueModMult
        {
            get => this._PowerAttackFatigueModMult;
            set => this.RaiseAndSetIfChanged(ref this._PowerAttackFatigueModMult, value, nameof(PowerAttackFatigueModMult));
        }
        #endregion

        IMask<bool> IEqualsMask<CombatStyleAdvanced>.GetEqualsMask(CombatStyleAdvanced rhs, EqualsMaskHelper.Include include) => CombatStyleAdvancedCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ICombatStyleAdvancedGetter>.GetEqualsMask(ICombatStyleAdvancedGetter rhs, EqualsMaskHelper.Include include) => CombatStyleAdvancedCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            CombatStyleAdvanced_Mask<bool> printMask = null)
        {
            return CombatStyleAdvancedCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CombatStyleAdvancedCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public CombatStyleAdvanced_Mask<bool> GetHasBeenSetMask()
        {
            return CombatStyleAdvancedCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CombatStyleAdvanced rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CombatStyleAdvanced rhs)
        {
            if (rhs == null) return false;
            if (!this.DodgeFatigueModMult.EqualsWithin(rhs.DodgeFatigueModMult)) return false;
            if (!this.DodgeFatigueModBase.EqualsWithin(rhs.DodgeFatigueModBase)) return false;
            if (!this.EncumbSpeedModBase.EqualsWithin(rhs.EncumbSpeedModBase)) return false;
            if (!this.EncumbSpeedModMult.EqualsWithin(rhs.EncumbSpeedModMult)) return false;
            if (!this.DodgeWhileUnderAttackMult.EqualsWithin(rhs.DodgeWhileUnderAttackMult)) return false;
            if (!this.DodgeNotUnderAttackMult.EqualsWithin(rhs.DodgeNotUnderAttackMult)) return false;
            if (!this.DodgeBackWhileUnderAttackMult.EqualsWithin(rhs.DodgeBackWhileUnderAttackMult)) return false;
            if (!this.DodgeBackNotUnderAttackMult.EqualsWithin(rhs.DodgeBackNotUnderAttackMult)) return false;
            if (!this.DodgeForwardWhileUnderAttackMult.EqualsWithin(rhs.DodgeForwardWhileUnderAttackMult)) return false;
            if (!this.DodgeForwardNotUnderAttackMult.EqualsWithin(rhs.DodgeForwardNotUnderAttackMult)) return false;
            if (!this.BlockSkillModifierMult.EqualsWithin(rhs.BlockSkillModifierMult)) return false;
            if (!this.BlockSkillModifierBase.EqualsWithin(rhs.BlockSkillModifierBase)) return false;
            if (!this.BlockWhileUnderAttackMult.EqualsWithin(rhs.BlockWhileUnderAttackMult)) return false;
            if (!this.BlockNotUnderAttackMult.EqualsWithin(rhs.BlockNotUnderAttackMult)) return false;
            if (!this.AttackSkillModifierMult.EqualsWithin(rhs.AttackSkillModifierMult)) return false;
            if (!this.AttackSkillModifierBase.EqualsWithin(rhs.AttackSkillModifierBase)) return false;
            if (!this.AttackWhileUnderAttackMult.EqualsWithin(rhs.AttackWhileUnderAttackMult)) return false;
            if (!this.AttackNotUnderAttackMult.EqualsWithin(rhs.AttackNotUnderAttackMult)) return false;
            if (!this.AttackDuringBlockMult.EqualsWithin(rhs.AttackDuringBlockMult)) return false;
            if (!this.PowerAttackFatigueModBase.EqualsWithin(rhs.PowerAttackFatigueModBase)) return false;
            if (!this.PowerAttackFatigueModMult.EqualsWithin(rhs.PowerAttackFatigueModMult)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(DodgeFatigueModMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeFatigueModBase).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EncumbSpeedModBase).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EncumbSpeedModMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeWhileUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeNotUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeBackWhileUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeBackNotUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeForwardWhileUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeForwardNotUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BlockSkillModifierMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BlockSkillModifierBase).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BlockWhileUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BlockNotUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AttackSkillModifierMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AttackSkillModifierBase).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AttackWhileUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AttackNotUnderAttackMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AttackDuringBlockMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PowerAttackFatigueModBase).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PowerAttackFatigueModMult).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlTranslator XmlTranslator => CombatStyleAdvancedXmlTranslation.Instance;
        IXmlTranslator IXmlItem.XmlTranslator => this.XmlTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static CombatStyleAdvanced CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            CombatStyleAdvanced_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CombatStyleAdvanced CreateFromXml(
            XElement node,
            out CombatStyleAdvanced_ErrorMask errorMask,
            bool doMasks = true,
            CombatStyleAdvanced_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = CombatStyleAdvanced_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CombatStyleAdvanced CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new CombatStyleAdvanced() : null;
                    break;
                default:
                    break;
            }
            var ret = new CombatStyleAdvanced();
            try
            {
                foreach (var elem in node.Elements())
                {
                    CombatStyleAdvancedXmlTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static CombatStyleAdvanced CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            CombatStyleAdvanced_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CombatStyleAdvanced CreateFromXml(
            string path,
            out CombatStyleAdvanced_ErrorMask errorMask,
            CombatStyleAdvanced_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CombatStyleAdvanced CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            CombatStyleAdvanced_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CombatStyleAdvanced CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            CombatStyleAdvanced_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CombatStyleAdvanced CreateFromXml(
            Stream stream,
            out CombatStyleAdvanced_ErrorMask errorMask,
            CombatStyleAdvanced_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CombatStyleAdvanced CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            CombatStyleAdvanced_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((CombatStyleAdvanced_FieldIndex)index)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = CombatStyleAdvanced_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected IBinaryTranslator BinaryTranslator => CombatStyleAdvancedBinaryTranslation.Instance;
        IBinaryTranslator IBinaryItem.BinaryTranslator => this.BinaryTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static CombatStyleAdvanced CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static CombatStyleAdvanced CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out CombatStyleAdvanced_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CombatStyleAdvanced_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CombatStyleAdvanced CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new CombatStyleAdvanced();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(CombatStyleAdvanced_Registration.CSAD_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            CombatStyleAdvanced item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DodgeFatigueModMultParse))
            {
                item.DodgeFatigueModMult = DodgeFatigueModMultParse;
            }
            else
            {
                item.DodgeFatigueModMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DodgeFatigueModBaseParse))
            {
                item.DodgeFatigueModBase = DodgeFatigueModBaseParse;
            }
            else
            {
                item.DodgeFatigueModBase = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single EncumbSpeedModBaseParse))
            {
                item.EncumbSpeedModBase = EncumbSpeedModBaseParse;
            }
            else
            {
                item.EncumbSpeedModBase = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single EncumbSpeedModMultParse))
            {
                item.EncumbSpeedModMult = EncumbSpeedModMultParse;
            }
            else
            {
                item.EncumbSpeedModMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DodgeWhileUnderAttackMultParse))
            {
                item.DodgeWhileUnderAttackMult = DodgeWhileUnderAttackMultParse;
            }
            else
            {
                item.DodgeWhileUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DodgeNotUnderAttackMultParse))
            {
                item.DodgeNotUnderAttackMult = DodgeNotUnderAttackMultParse;
            }
            else
            {
                item.DodgeNotUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DodgeBackWhileUnderAttackMultParse))
            {
                item.DodgeBackWhileUnderAttackMult = DodgeBackWhileUnderAttackMultParse;
            }
            else
            {
                item.DodgeBackWhileUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DodgeBackNotUnderAttackMultParse))
            {
                item.DodgeBackNotUnderAttackMult = DodgeBackNotUnderAttackMultParse;
            }
            else
            {
                item.DodgeBackNotUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DodgeForwardWhileUnderAttackMultParse))
            {
                item.DodgeForwardWhileUnderAttackMult = DodgeForwardWhileUnderAttackMultParse;
            }
            else
            {
                item.DodgeForwardWhileUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DodgeForwardNotUnderAttackMultParse))
            {
                item.DodgeForwardNotUnderAttackMult = DodgeForwardNotUnderAttackMultParse;
            }
            else
            {
                item.DodgeForwardNotUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single BlockSkillModifierMultParse))
            {
                item.BlockSkillModifierMult = BlockSkillModifierMultParse;
            }
            else
            {
                item.BlockSkillModifierMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single BlockSkillModifierBaseParse))
            {
                item.BlockSkillModifierBase = BlockSkillModifierBaseParse;
            }
            else
            {
                item.BlockSkillModifierBase = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single BlockWhileUnderAttackMultParse))
            {
                item.BlockWhileUnderAttackMult = BlockWhileUnderAttackMultParse;
            }
            else
            {
                item.BlockWhileUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single BlockNotUnderAttackMultParse))
            {
                item.BlockNotUnderAttackMult = BlockNotUnderAttackMultParse;
            }
            else
            {
                item.BlockNotUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single AttackSkillModifierMultParse))
            {
                item.AttackSkillModifierMult = AttackSkillModifierMultParse;
            }
            else
            {
                item.AttackSkillModifierMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single AttackSkillModifierBaseParse))
            {
                item.AttackSkillModifierBase = AttackSkillModifierBaseParse;
            }
            else
            {
                item.AttackSkillModifierBase = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single AttackWhileUnderAttackMultParse))
            {
                item.AttackWhileUnderAttackMult = AttackWhileUnderAttackMultParse;
            }
            else
            {
                item.AttackWhileUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single AttackNotUnderAttackMultParse))
            {
                item.AttackNotUnderAttackMult = AttackNotUnderAttackMultParse;
            }
            else
            {
                item.AttackNotUnderAttackMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single AttackDuringBlockMultParse))
            {
                item.AttackDuringBlockMult = AttackDuringBlockMultParse;
            }
            else
            {
                item.AttackDuringBlockMult = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single PowerAttackFatigueModBaseParse))
            {
                item.PowerAttackFatigueModBase = PowerAttackFatigueModBaseParse;
            }
            else
            {
                item.PowerAttackFatigueModBase = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single PowerAttackFatigueModMultParse))
            {
                item.PowerAttackFatigueModMult = PowerAttackFatigueModMultParse;
            }
            else
            {
                item.PowerAttackFatigueModMult = default(Single);
            }
        }

        #endregion

        public CombatStyleAdvanced Copy(
            CombatStyleAdvanced_CopyMask copyMask = null,
            ICombatStyleAdvancedGetter def = null)
        {
            return CombatStyleAdvanced.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CombatStyleAdvanced Copy(
            ICombatStyleAdvanced item,
            CombatStyleAdvanced_CopyMask copyMask = null,
            ICombatStyleAdvancedGetter def = null)
        {
            CombatStyleAdvanced ret;
            if (item.GetType().Equals(typeof(CombatStyleAdvanced)))
            {
                ret = new CombatStyleAdvanced();
            }
            else
            {
                ret = (CombatStyleAdvanced)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CombatStyleAdvanced Copy_ToLoqui(
            ICombatStyleAdvancedGetter item,
            CombatStyleAdvanced_CopyMask copyMask = null,
            ICombatStyleAdvancedGetter def = null)
        {
            CombatStyleAdvanced ret;
            if (item.GetType().Equals(typeof(CombatStyleAdvanced)))
            {
                ret = new CombatStyleAdvanced() as CombatStyleAdvanced;
            }
            else
            {
                ret = (CombatStyleAdvanced)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ICombatStyleAdvancedGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ICombatStyleAdvancedGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ICombatStyleAdvancedGetter rhs,
            CombatStyleAdvanced_CopyMask copyMask,
            ICombatStyleAdvancedGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ICombatStyleAdvancedGetter rhs,
            out CombatStyleAdvanced_ErrorMask errorMask,
            CombatStyleAdvanced_CopyMask copyMask = null,
            ICombatStyleAdvancedGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyleAdvancedCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = CombatStyleAdvanced_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICombatStyleAdvancedGetter rhs,
            ErrorMaskBuilder errorMask,
            CombatStyleAdvanced_CopyMask copyMask = null,
            ICombatStyleAdvancedGetter def = null)
        {
            CombatStyleAdvancedCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                    this.DodgeFatigueModMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                    this.DodgeFatigueModBase = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                    this.EncumbSpeedModBase = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                    this.EncumbSpeedModMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                    this.DodgeWhileUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                    this.DodgeNotUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                    this.DodgeBackWhileUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                    this.DodgeBackNotUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                    this.DodgeForwardWhileUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                    this.DodgeForwardNotUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                    this.BlockSkillModifierMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                    this.BlockSkillModifierBase = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                    this.BlockWhileUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                    this.BlockNotUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                    this.AttackSkillModifierMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                    this.AttackSkillModifierBase = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                    this.AttackWhileUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                    this.AttackNotUnderAttackMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                    this.AttackDuringBlockMult = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                    this.PowerAttackFatigueModBase = (Single)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    this.PowerAttackFatigueModMult = (Single)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            CombatStyleAdvancedCommon.Clear(this);
        }


        public static CombatStyleAdvanced Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CombatStyleAdvanced();
            foreach (var pair in fields)
            {
                CopyInInternal_CombatStyleAdvanced(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CombatStyleAdvanced(CombatStyleAdvanced obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CombatStyleAdvanced_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                    obj.DodgeFatigueModMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                    obj.DodgeFatigueModBase = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                    obj.EncumbSpeedModBase = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                    obj.EncumbSpeedModMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                    obj.DodgeWhileUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                    obj.DodgeNotUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                    obj.DodgeBackWhileUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                    obj.DodgeBackNotUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                    obj.DodgeForwardWhileUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                    obj.DodgeForwardNotUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                    obj.BlockSkillModifierMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                    obj.BlockSkillModifierBase = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                    obj.BlockWhileUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                    obj.BlockNotUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                    obj.AttackSkillModifierMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                    obj.AttackSkillModifierBase = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                    obj.AttackWhileUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                    obj.AttackNotUnderAttackMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                    obj.AttackDuringBlockMult = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                    obj.PowerAttackFatigueModBase = (Single)pair.Value;
                    break;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    obj.PowerAttackFatigueModMult = (Single)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ICombatStyleAdvanced :
        ICombatStyleAdvancedGetter,
        ILoquiClass<ICombatStyleAdvanced, ICombatStyleAdvancedGetter>,
        ILoquiClass<CombatStyleAdvanced, ICombatStyleAdvancedGetter>
    {
        new Single DodgeFatigueModMult { get; set; }

        new Single DodgeFatigueModBase { get; set; }

        new Single EncumbSpeedModBase { get; set; }

        new Single EncumbSpeedModMult { get; set; }

        new Single DodgeWhileUnderAttackMult { get; set; }

        new Single DodgeNotUnderAttackMult { get; set; }

        new Single DodgeBackWhileUnderAttackMult { get; set; }

        new Single DodgeBackNotUnderAttackMult { get; set; }

        new Single DodgeForwardWhileUnderAttackMult { get; set; }

        new Single DodgeForwardNotUnderAttackMult { get; set; }

        new Single BlockSkillModifierMult { get; set; }

        new Single BlockSkillModifierBase { get; set; }

        new Single BlockWhileUnderAttackMult { get; set; }

        new Single BlockNotUnderAttackMult { get; set; }

        new Single AttackSkillModifierMult { get; set; }

        new Single AttackSkillModifierBase { get; set; }

        new Single AttackWhileUnderAttackMult { get; set; }

        new Single AttackNotUnderAttackMult { get; set; }

        new Single AttackDuringBlockMult { get; set; }

        new Single PowerAttackFatigueModBase { get; set; }

        new Single PowerAttackFatigueModMult { get; set; }

        void CopyFieldsFrom(
            ICombatStyleAdvancedGetter rhs,
            ErrorMaskBuilder errorMask = null,
            CombatStyleAdvanced_CopyMask copyMask = null,
            ICombatStyleAdvancedGetter def = null);
    }

    public partial interface ICombatStyleAdvancedGetter :
        ILoquiObject,
        IXmlItem,
        IBinaryItem
    {
        #region DodgeFatigueModMult
        Single DodgeFatigueModMult { get; }

        #endregion
        #region DodgeFatigueModBase
        Single DodgeFatigueModBase { get; }

        #endregion
        #region EncumbSpeedModBase
        Single EncumbSpeedModBase { get; }

        #endregion
        #region EncumbSpeedModMult
        Single EncumbSpeedModMult { get; }

        #endregion
        #region DodgeWhileUnderAttackMult
        Single DodgeWhileUnderAttackMult { get; }

        #endregion
        #region DodgeNotUnderAttackMult
        Single DodgeNotUnderAttackMult { get; }

        #endregion
        #region DodgeBackWhileUnderAttackMult
        Single DodgeBackWhileUnderAttackMult { get; }

        #endregion
        #region DodgeBackNotUnderAttackMult
        Single DodgeBackNotUnderAttackMult { get; }

        #endregion
        #region DodgeForwardWhileUnderAttackMult
        Single DodgeForwardWhileUnderAttackMult { get; }

        #endregion
        #region DodgeForwardNotUnderAttackMult
        Single DodgeForwardNotUnderAttackMult { get; }

        #endregion
        #region BlockSkillModifierMult
        Single BlockSkillModifierMult { get; }

        #endregion
        #region BlockSkillModifierBase
        Single BlockSkillModifierBase { get; }

        #endregion
        #region BlockWhileUnderAttackMult
        Single BlockWhileUnderAttackMult { get; }

        #endregion
        #region BlockNotUnderAttackMult
        Single BlockNotUnderAttackMult { get; }

        #endregion
        #region AttackSkillModifierMult
        Single AttackSkillModifierMult { get; }

        #endregion
        #region AttackSkillModifierBase
        Single AttackSkillModifierBase { get; }

        #endregion
        #region AttackWhileUnderAttackMult
        Single AttackWhileUnderAttackMult { get; }

        #endregion
        #region AttackNotUnderAttackMult
        Single AttackNotUnderAttackMult { get; }

        #endregion
        #region AttackDuringBlockMult
        Single AttackDuringBlockMult { get; }

        #endregion
        #region PowerAttackFatigueModBase
        Single PowerAttackFatigueModBase { get; }

        #endregion
        #region PowerAttackFatigueModMult
        Single PowerAttackFatigueModMult { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CombatStyleAdvanced_FieldIndex
    {
        DodgeFatigueModMult = 0,
        DodgeFatigueModBase = 1,
        EncumbSpeedModBase = 2,
        EncumbSpeedModMult = 3,
        DodgeWhileUnderAttackMult = 4,
        DodgeNotUnderAttackMult = 5,
        DodgeBackWhileUnderAttackMult = 6,
        DodgeBackNotUnderAttackMult = 7,
        DodgeForwardWhileUnderAttackMult = 8,
        DodgeForwardNotUnderAttackMult = 9,
        BlockSkillModifierMult = 10,
        BlockSkillModifierBase = 11,
        BlockWhileUnderAttackMult = 12,
        BlockNotUnderAttackMult = 13,
        AttackSkillModifierMult = 14,
        AttackSkillModifierBase = 15,
        AttackWhileUnderAttackMult = 16,
        AttackNotUnderAttackMult = 17,
        AttackDuringBlockMult = 18,
        PowerAttackFatigueModBase = 19,
        PowerAttackFatigueModMult = 20,
    }
    #endregion

    #region Registration
    public class CombatStyleAdvanced_Registration : ILoquiRegistration
    {
        public static readonly CombatStyleAdvanced_Registration Instance = new CombatStyleAdvanced_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 160,
            version: 0);

        public const string GUID = "ae4707ff-2084-4b55-96bb-8de3d58cd76f";

        public const ushort AdditionalFieldCount = 21;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(CombatStyleAdvanced_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyleAdvanced_ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyleAdvanced);

        public static readonly Type GetterType = typeof(ICombatStyleAdvancedGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyleAdvanced);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(CombatStyleAdvancedCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CombatStyleAdvanced";

        public const string Name = "CombatStyleAdvanced";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DODGEFATIGUEMODMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult;
                case "DODGEFATIGUEMODBASE":
                    return (ushort)CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase;
                case "ENCUMBSPEEDMODBASE":
                    return (ushort)CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase;
                case "ENCUMBSPEEDMODMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult;
                case "DODGEWHILEUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult;
                case "DODGENOTUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult;
                case "DODGEBACKWHILEUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult;
                case "DODGEBACKNOTUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult;
                case "DODGEFORWARDWHILEUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult;
                case "DODGEFORWARDNOTUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult;
                case "BLOCKSKILLMODIFIERMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult;
                case "BLOCKSKILLMODIFIERBASE":
                    return (ushort)CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase;
                case "BLOCKWHILEUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult;
                case "BLOCKNOTUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult;
                case "ATTACKSKILLMODIFIERMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult;
                case "ATTACKSKILLMODIFIERBASE":
                    return (ushort)CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase;
                case "ATTACKWHILEUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult;
                case "ATTACKNOTUNDERATTACKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult;
                case "ATTACKDURINGBLOCKMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult;
                case "POWERATTACKFATIGUEMODBASE":
                    return (ushort)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase;
                case "POWERATTACKFATIGUEMODMULT":
                    return (ushort)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                    return "DodgeFatigueModMult";
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                    return "DodgeFatigueModBase";
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                    return "EncumbSpeedModBase";
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                    return "EncumbSpeedModMult";
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                    return "DodgeWhileUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                    return "DodgeNotUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                    return "DodgeBackWhileUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                    return "DodgeBackNotUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                    return "DodgeForwardWhileUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                    return "DodgeForwardNotUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                    return "BlockSkillModifierMult";
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                    return "BlockSkillModifierBase";
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                    return "BlockWhileUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                    return "BlockNotUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                    return "AttackSkillModifierMult";
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                    return "AttackSkillModifierBase";
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                    return "AttackWhileUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                    return "AttackNotUnderAttackMult";
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                    return "AttackDuringBlockMult";
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                    return "PowerAttackFatigueModBase";
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return "PowerAttackFatigueModMult";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                    return typeof(Single);
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(CombatStyleAdvancedXmlTranslation);
        public static readonly RecordType CSAD_HEADER = new RecordType("CSAD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CSAD_HEADER;
        public const int NumStructFields = 21;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryTranslation = typeof(CombatStyleAdvancedBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CombatStyleAdvancedCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICombatStyleAdvanced item,
            ICombatStyleAdvancedGetter rhs,
            ICombatStyleAdvancedGetter def,
            ErrorMaskBuilder errorMask,
            CombatStyleAdvanced_CopyMask copyMask)
        {
            if (copyMask?.DodgeFatigueModMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult);
                try
                {
                    item.DodgeFatigueModMult = rhs.DodgeFatigueModMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeFatigueModBase ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase);
                try
                {
                    item.DodgeFatigueModBase = rhs.DodgeFatigueModBase;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EncumbSpeedModBase ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase);
                try
                {
                    item.EncumbSpeedModBase = rhs.EncumbSpeedModBase;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EncumbSpeedModMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult);
                try
                {
                    item.EncumbSpeedModMult = rhs.EncumbSpeedModMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeWhileUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult);
                try
                {
                    item.DodgeWhileUnderAttackMult = rhs.DodgeWhileUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeNotUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult);
                try
                {
                    item.DodgeNotUnderAttackMult = rhs.DodgeNotUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeBackWhileUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult);
                try
                {
                    item.DodgeBackWhileUnderAttackMult = rhs.DodgeBackWhileUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeBackNotUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult);
                try
                {
                    item.DodgeBackNotUnderAttackMult = rhs.DodgeBackNotUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeForwardWhileUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult);
                try
                {
                    item.DodgeForwardWhileUnderAttackMult = rhs.DodgeForwardWhileUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeForwardNotUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult);
                try
                {
                    item.DodgeForwardNotUnderAttackMult = rhs.DodgeForwardNotUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BlockSkillModifierMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult);
                try
                {
                    item.BlockSkillModifierMult = rhs.BlockSkillModifierMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BlockSkillModifierBase ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase);
                try
                {
                    item.BlockSkillModifierBase = rhs.BlockSkillModifierBase;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BlockWhileUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult);
                try
                {
                    item.BlockWhileUnderAttackMult = rhs.BlockWhileUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BlockNotUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult);
                try
                {
                    item.BlockNotUnderAttackMult = rhs.BlockNotUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AttackSkillModifierMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult);
                try
                {
                    item.AttackSkillModifierMult = rhs.AttackSkillModifierMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AttackSkillModifierBase ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase);
                try
                {
                    item.AttackSkillModifierBase = rhs.AttackSkillModifierBase;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AttackWhileUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult);
                try
                {
                    item.AttackWhileUnderAttackMult = rhs.AttackWhileUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AttackNotUnderAttackMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult);
                try
                {
                    item.AttackNotUnderAttackMult = rhs.AttackNotUnderAttackMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AttackDuringBlockMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult);
                try
                {
                    item.AttackDuringBlockMult = rhs.AttackDuringBlockMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PowerAttackFatigueModBase ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase);
                try
                {
                    item.PowerAttackFatigueModBase = rhs.PowerAttackFatigueModBase;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PowerAttackFatigueModMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult);
                try
                {
                    item.PowerAttackFatigueModMult = rhs.PowerAttackFatigueModMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ICombatStyleAdvanced item)
        {
            item.DodgeFatigueModMult = default(Single);
            item.DodgeFatigueModBase = default(Single);
            item.EncumbSpeedModBase = default(Single);
            item.EncumbSpeedModMult = default(Single);
            item.DodgeWhileUnderAttackMult = default(Single);
            item.DodgeNotUnderAttackMult = default(Single);
            item.DodgeBackWhileUnderAttackMult = default(Single);
            item.DodgeBackNotUnderAttackMult = default(Single);
            item.DodgeForwardWhileUnderAttackMult = default(Single);
            item.DodgeForwardNotUnderAttackMult = default(Single);
            item.BlockSkillModifierMult = default(Single);
            item.BlockSkillModifierBase = default(Single);
            item.BlockWhileUnderAttackMult = default(Single);
            item.BlockNotUnderAttackMult = default(Single);
            item.AttackSkillModifierMult = default(Single);
            item.AttackSkillModifierBase = default(Single);
            item.AttackWhileUnderAttackMult = default(Single);
            item.AttackNotUnderAttackMult = default(Single);
            item.AttackDuringBlockMult = default(Single);
            item.PowerAttackFatigueModBase = default(Single);
            item.PowerAttackFatigueModMult = default(Single);
        }

        public static CombatStyleAdvanced_Mask<bool> GetEqualsMask(
            this ICombatStyleAdvancedGetter item,
            ICombatStyleAdvancedGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyleAdvanced_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ICombatStyleAdvancedGetter item,
            ICombatStyleAdvancedGetter rhs,
            CombatStyleAdvanced_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DodgeFatigueModMult = item.DodgeFatigueModMult.EqualsWithin(rhs.DodgeFatigueModMult);
            ret.DodgeFatigueModBase = item.DodgeFatigueModBase.EqualsWithin(rhs.DodgeFatigueModBase);
            ret.EncumbSpeedModBase = item.EncumbSpeedModBase.EqualsWithin(rhs.EncumbSpeedModBase);
            ret.EncumbSpeedModMult = item.EncumbSpeedModMult.EqualsWithin(rhs.EncumbSpeedModMult);
            ret.DodgeWhileUnderAttackMult = item.DodgeWhileUnderAttackMult.EqualsWithin(rhs.DodgeWhileUnderAttackMult);
            ret.DodgeNotUnderAttackMult = item.DodgeNotUnderAttackMult.EqualsWithin(rhs.DodgeNotUnderAttackMult);
            ret.DodgeBackWhileUnderAttackMult = item.DodgeBackWhileUnderAttackMult.EqualsWithin(rhs.DodgeBackWhileUnderAttackMult);
            ret.DodgeBackNotUnderAttackMult = item.DodgeBackNotUnderAttackMult.EqualsWithin(rhs.DodgeBackNotUnderAttackMult);
            ret.DodgeForwardWhileUnderAttackMult = item.DodgeForwardWhileUnderAttackMult.EqualsWithin(rhs.DodgeForwardWhileUnderAttackMult);
            ret.DodgeForwardNotUnderAttackMult = item.DodgeForwardNotUnderAttackMult.EqualsWithin(rhs.DodgeForwardNotUnderAttackMult);
            ret.BlockSkillModifierMult = item.BlockSkillModifierMult.EqualsWithin(rhs.BlockSkillModifierMult);
            ret.BlockSkillModifierBase = item.BlockSkillModifierBase.EqualsWithin(rhs.BlockSkillModifierBase);
            ret.BlockWhileUnderAttackMult = item.BlockWhileUnderAttackMult.EqualsWithin(rhs.BlockWhileUnderAttackMult);
            ret.BlockNotUnderAttackMult = item.BlockNotUnderAttackMult.EqualsWithin(rhs.BlockNotUnderAttackMult);
            ret.AttackSkillModifierMult = item.AttackSkillModifierMult.EqualsWithin(rhs.AttackSkillModifierMult);
            ret.AttackSkillModifierBase = item.AttackSkillModifierBase.EqualsWithin(rhs.AttackSkillModifierBase);
            ret.AttackWhileUnderAttackMult = item.AttackWhileUnderAttackMult.EqualsWithin(rhs.AttackWhileUnderAttackMult);
            ret.AttackNotUnderAttackMult = item.AttackNotUnderAttackMult.EqualsWithin(rhs.AttackNotUnderAttackMult);
            ret.AttackDuringBlockMult = item.AttackDuringBlockMult.EqualsWithin(rhs.AttackDuringBlockMult);
            ret.PowerAttackFatigueModBase = item.PowerAttackFatigueModBase.EqualsWithin(rhs.PowerAttackFatigueModBase);
            ret.PowerAttackFatigueModMult = item.PowerAttackFatigueModMult.EqualsWithin(rhs.PowerAttackFatigueModMult);
        }

        public static string ToString(
            this ICombatStyleAdvancedGetter item,
            string name = null,
            CombatStyleAdvanced_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICombatStyleAdvancedGetter item,
            FileGeneration fg,
            string name = null,
            CombatStyleAdvanced_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CombatStyleAdvanced)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CombatStyleAdvanced)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DodgeFatigueModMult ?? true)
                {
                    fg.AppendLine($"DodgeFatigueModMult => {item.DodgeFatigueModMult}");
                }
                if (printMask?.DodgeFatigueModBase ?? true)
                {
                    fg.AppendLine($"DodgeFatigueModBase => {item.DodgeFatigueModBase}");
                }
                if (printMask?.EncumbSpeedModBase ?? true)
                {
                    fg.AppendLine($"EncumbSpeedModBase => {item.EncumbSpeedModBase}");
                }
                if (printMask?.EncumbSpeedModMult ?? true)
                {
                    fg.AppendLine($"EncumbSpeedModMult => {item.EncumbSpeedModMult}");
                }
                if (printMask?.DodgeWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeWhileUnderAttackMult => {item.DodgeWhileUnderAttackMult}");
                }
                if (printMask?.DodgeNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeNotUnderAttackMult => {item.DodgeNotUnderAttackMult}");
                }
                if (printMask?.DodgeBackWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeBackWhileUnderAttackMult => {item.DodgeBackWhileUnderAttackMult}");
                }
                if (printMask?.DodgeBackNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeBackNotUnderAttackMult => {item.DodgeBackNotUnderAttackMult}");
                }
                if (printMask?.DodgeForwardWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeForwardWhileUnderAttackMult => {item.DodgeForwardWhileUnderAttackMult}");
                }
                if (printMask?.DodgeForwardNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeForwardNotUnderAttackMult => {item.DodgeForwardNotUnderAttackMult}");
                }
                if (printMask?.BlockSkillModifierMult ?? true)
                {
                    fg.AppendLine($"BlockSkillModifierMult => {item.BlockSkillModifierMult}");
                }
                if (printMask?.BlockSkillModifierBase ?? true)
                {
                    fg.AppendLine($"BlockSkillModifierBase => {item.BlockSkillModifierBase}");
                }
                if (printMask?.BlockWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"BlockWhileUnderAttackMult => {item.BlockWhileUnderAttackMult}");
                }
                if (printMask?.BlockNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"BlockNotUnderAttackMult => {item.BlockNotUnderAttackMult}");
                }
                if (printMask?.AttackSkillModifierMult ?? true)
                {
                    fg.AppendLine($"AttackSkillModifierMult => {item.AttackSkillModifierMult}");
                }
                if (printMask?.AttackSkillModifierBase ?? true)
                {
                    fg.AppendLine($"AttackSkillModifierBase => {item.AttackSkillModifierBase}");
                }
                if (printMask?.AttackWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"AttackWhileUnderAttackMult => {item.AttackWhileUnderAttackMult}");
                }
                if (printMask?.AttackNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"AttackNotUnderAttackMult => {item.AttackNotUnderAttackMult}");
                }
                if (printMask?.AttackDuringBlockMult ?? true)
                {
                    fg.AppendLine($"AttackDuringBlockMult => {item.AttackDuringBlockMult}");
                }
                if (printMask?.PowerAttackFatigueModBase ?? true)
                {
                    fg.AppendLine($"PowerAttackFatigueModBase => {item.PowerAttackFatigueModBase}");
                }
                if (printMask?.PowerAttackFatigueModMult ?? true)
                {
                    fg.AppendLine($"PowerAttackFatigueModMult => {item.PowerAttackFatigueModMult}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICombatStyleAdvancedGetter item,
            CombatStyleAdvanced_Mask<bool?> checkMask)
        {
            return true;
        }

        public static CombatStyleAdvanced_Mask<bool> GetHasBeenSetMask(ICombatStyleAdvancedGetter item)
        {
            var ret = new CombatStyleAdvanced_Mask<bool>();
            ret.DodgeFatigueModMult = true;
            ret.DodgeFatigueModBase = true;
            ret.EncumbSpeedModBase = true;
            ret.EncumbSpeedModMult = true;
            ret.DodgeWhileUnderAttackMult = true;
            ret.DodgeNotUnderAttackMult = true;
            ret.DodgeBackWhileUnderAttackMult = true;
            ret.DodgeBackNotUnderAttackMult = true;
            ret.DodgeForwardWhileUnderAttackMult = true;
            ret.DodgeForwardNotUnderAttackMult = true;
            ret.BlockSkillModifierMult = true;
            ret.BlockSkillModifierBase = true;
            ret.BlockWhileUnderAttackMult = true;
            ret.BlockNotUnderAttackMult = true;
            ret.AttackSkillModifierMult = true;
            ret.AttackSkillModifierBase = true;
            ret.AttackWhileUnderAttackMult = true;
            ret.AttackNotUnderAttackMult = true;
            ret.AttackDuringBlockMult = true;
            ret.PowerAttackFatigueModBase = true;
            ret.PowerAttackFatigueModMult = true;
            return ret;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class CombatStyleAdvancedXmlTranslation : IXmlTranslator
    {
        public readonly static CombatStyleAdvancedXmlTranslation Instance = new CombatStyleAdvancedXmlTranslation();

        public static void WriteToNodeXml(
            ICombatStyleAdvancedGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DodgeFatigueModMult),
                    item: item.DodgeFatigueModMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DodgeFatigueModBase),
                    item: item.DodgeFatigueModBase,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EncumbSpeedModBase),
                    item: item.EncumbSpeedModBase,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EncumbSpeedModMult),
                    item: item.EncumbSpeedModMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DodgeWhileUnderAttackMult),
                    item: item.DodgeWhileUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DodgeNotUnderAttackMult),
                    item: item.DodgeNotUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DodgeBackWhileUnderAttackMult),
                    item: item.DodgeBackWhileUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DodgeBackNotUnderAttackMult),
                    item: item.DodgeBackNotUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DodgeForwardWhileUnderAttackMult),
                    item: item.DodgeForwardWhileUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DodgeForwardNotUnderAttackMult),
                    item: item.DodgeForwardNotUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlockSkillModifierMult),
                    item: item.BlockSkillModifierMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlockSkillModifierBase),
                    item: item.BlockSkillModifierBase,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlockWhileUnderAttackMult),
                    item: item.BlockWhileUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlockNotUnderAttackMult),
                    item: item.BlockNotUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackSkillModifierMult),
                    item: item.AttackSkillModifierMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackSkillModifierBase),
                    item: item.AttackSkillModifierBase,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackWhileUnderAttackMult),
                    item: item.AttackWhileUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackNotUnderAttackMult),
                    item: item.AttackNotUnderAttackMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackDuringBlockMult),
                    item: item.AttackDuringBlockMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PowerAttackFatigueModBase),
                    item: item.PowerAttackFatigueModBase,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PowerAttackFatigueModMult),
                    item: item.PowerAttackFatigueModMult,
                    fieldIndex: (int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult,
                    errorMask: errorMask);
            }
        }

        public static void FillPublicXml(
            ICombatStyleAdvanced item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CombatStyleAdvancedXmlTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICombatStyleAdvanced item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "DodgeFatigueModMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DodgeFatigueModMultParse,
                            errorMask: errorMask))
                        {
                            item.DodgeFatigueModMult = DodgeFatigueModMultParse;
                        }
                        else
                        {
                            item.DodgeFatigueModMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeFatigueModBase":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DodgeFatigueModBaseParse,
                            errorMask: errorMask))
                        {
                            item.DodgeFatigueModBase = DodgeFatigueModBaseParse;
                        }
                        else
                        {
                            item.DodgeFatigueModBase = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EncumbSpeedModBase":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EncumbSpeedModBaseParse,
                            errorMask: errorMask))
                        {
                            item.EncumbSpeedModBase = EncumbSpeedModBaseParse;
                        }
                        else
                        {
                            item.EncumbSpeedModBase = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EncumbSpeedModMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EncumbSpeedModMultParse,
                            errorMask: errorMask))
                        {
                            item.EncumbSpeedModMult = EncumbSpeedModMultParse;
                        }
                        else
                        {
                            item.EncumbSpeedModMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeWhileUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DodgeWhileUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.DodgeWhileUnderAttackMult = DodgeWhileUnderAttackMultParse;
                        }
                        else
                        {
                            item.DodgeWhileUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeNotUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DodgeNotUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.DodgeNotUnderAttackMult = DodgeNotUnderAttackMultParse;
                        }
                        else
                        {
                            item.DodgeNotUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeBackWhileUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DodgeBackWhileUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.DodgeBackWhileUnderAttackMult = DodgeBackWhileUnderAttackMultParse;
                        }
                        else
                        {
                            item.DodgeBackWhileUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeBackNotUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DodgeBackNotUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.DodgeBackNotUnderAttackMult = DodgeBackNotUnderAttackMultParse;
                        }
                        else
                        {
                            item.DodgeBackNotUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeForwardWhileUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DodgeForwardWhileUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.DodgeForwardWhileUnderAttackMult = DodgeForwardWhileUnderAttackMultParse;
                        }
                        else
                        {
                            item.DodgeForwardWhileUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeForwardNotUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DodgeForwardNotUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.DodgeForwardNotUnderAttackMult = DodgeForwardNotUnderAttackMultParse;
                        }
                        else
                        {
                            item.DodgeForwardNotUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockSkillModifierMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BlockSkillModifierMultParse,
                            errorMask: errorMask))
                        {
                            item.BlockSkillModifierMult = BlockSkillModifierMultParse;
                        }
                        else
                        {
                            item.BlockSkillModifierMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockSkillModifierBase":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BlockSkillModifierBaseParse,
                            errorMask: errorMask))
                        {
                            item.BlockSkillModifierBase = BlockSkillModifierBaseParse;
                        }
                        else
                        {
                            item.BlockSkillModifierBase = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockWhileUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BlockWhileUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.BlockWhileUnderAttackMult = BlockWhileUnderAttackMultParse;
                        }
                        else
                        {
                            item.BlockWhileUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockNotUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BlockNotUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.BlockNotUnderAttackMult = BlockNotUnderAttackMultParse;
                        }
                        else
                        {
                            item.BlockNotUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackSkillModifierMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single AttackSkillModifierMultParse,
                            errorMask: errorMask))
                        {
                            item.AttackSkillModifierMult = AttackSkillModifierMultParse;
                        }
                        else
                        {
                            item.AttackSkillModifierMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackSkillModifierBase":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single AttackSkillModifierBaseParse,
                            errorMask: errorMask))
                        {
                            item.AttackSkillModifierBase = AttackSkillModifierBaseParse;
                        }
                        else
                        {
                            item.AttackSkillModifierBase = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackWhileUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single AttackWhileUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.AttackWhileUnderAttackMult = AttackWhileUnderAttackMultParse;
                        }
                        else
                        {
                            item.AttackWhileUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackNotUnderAttackMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single AttackNotUnderAttackMultParse,
                            errorMask: errorMask))
                        {
                            item.AttackNotUnderAttackMult = AttackNotUnderAttackMultParse;
                        }
                        else
                        {
                            item.AttackNotUnderAttackMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackDuringBlockMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single AttackDuringBlockMultParse,
                            errorMask: errorMask))
                        {
                            item.AttackDuringBlockMult = AttackDuringBlockMultParse;
                        }
                        else
                        {
                            item.AttackDuringBlockMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackFatigueModBase":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single PowerAttackFatigueModBaseParse,
                            errorMask: errorMask))
                        {
                            item.PowerAttackFatigueModBase = PowerAttackFatigueModBaseParse;
                        }
                        else
                        {
                            item.PowerAttackFatigueModBase = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackFatigueModMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single PowerAttackFatigueModMultParse,
                            errorMask: errorMask))
                        {
                            item.PowerAttackFatigueModMult = PowerAttackFatigueModMultParse;
                        }
                        else
                        {
                            item.PowerAttackFatigueModMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        public void Write(
            XElement node,
            ICombatStyleAdvancedGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CombatStyleAdvanced");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CombatStyleAdvanced");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICombatStyleAdvancedGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICombatStyleAdvancedGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ICombatStyleAdvancedGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    #region Xml Write Mixins
    public static class CombatStyleAdvancedXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            XElement node,
            out CombatStyleAdvanced_ErrorMask errorMask,
            bool doMasks = true,
            CombatStyleAdvanced_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CombatStyleAdvancedXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyleAdvanced_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            string path,
            out CombatStyleAdvanced_ErrorMask errorMask,
            CombatStyleAdvanced_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            Stream stream,
            out CombatStyleAdvanced_ErrorMask errorMask,
            CombatStyleAdvanced_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((CombatStyleAdvancedXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            XElement node,
            string name = null,
            CombatStyleAdvanced_TranslationMask translationMask = null)
        {
            ((CombatStyleAdvancedXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CombatStyleAdvancedXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICombatStyleAdvancedGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CombatStyleAdvancedXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class CombatStyleAdvanced_Mask<T> : IMask<T>, IEquatable<CombatStyleAdvanced_Mask<T>>
    {
        #region Ctors
        public CombatStyleAdvanced_Mask()
        {
        }

        public CombatStyleAdvanced_Mask(T initialValue)
        {
            this.DodgeFatigueModMult = initialValue;
            this.DodgeFatigueModBase = initialValue;
            this.EncumbSpeedModBase = initialValue;
            this.EncumbSpeedModMult = initialValue;
            this.DodgeWhileUnderAttackMult = initialValue;
            this.DodgeNotUnderAttackMult = initialValue;
            this.DodgeBackWhileUnderAttackMult = initialValue;
            this.DodgeBackNotUnderAttackMult = initialValue;
            this.DodgeForwardWhileUnderAttackMult = initialValue;
            this.DodgeForwardNotUnderAttackMult = initialValue;
            this.BlockSkillModifierMult = initialValue;
            this.BlockSkillModifierBase = initialValue;
            this.BlockWhileUnderAttackMult = initialValue;
            this.BlockNotUnderAttackMult = initialValue;
            this.AttackSkillModifierMult = initialValue;
            this.AttackSkillModifierBase = initialValue;
            this.AttackWhileUnderAttackMult = initialValue;
            this.AttackNotUnderAttackMult = initialValue;
            this.AttackDuringBlockMult = initialValue;
            this.PowerAttackFatigueModBase = initialValue;
            this.PowerAttackFatigueModMult = initialValue;
        }
        #endregion

        #region Members
        public T DodgeFatigueModMult;
        public T DodgeFatigueModBase;
        public T EncumbSpeedModBase;
        public T EncumbSpeedModMult;
        public T DodgeWhileUnderAttackMult;
        public T DodgeNotUnderAttackMult;
        public T DodgeBackWhileUnderAttackMult;
        public T DodgeBackNotUnderAttackMult;
        public T DodgeForwardWhileUnderAttackMult;
        public T DodgeForwardNotUnderAttackMult;
        public T BlockSkillModifierMult;
        public T BlockSkillModifierBase;
        public T BlockWhileUnderAttackMult;
        public T BlockNotUnderAttackMult;
        public T AttackSkillModifierMult;
        public T AttackSkillModifierBase;
        public T AttackWhileUnderAttackMult;
        public T AttackNotUnderAttackMult;
        public T AttackDuringBlockMult;
        public T PowerAttackFatigueModBase;
        public T PowerAttackFatigueModMult;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CombatStyleAdvanced_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CombatStyleAdvanced_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.DodgeFatigueModMult, rhs.DodgeFatigueModMult)) return false;
            if (!object.Equals(this.DodgeFatigueModBase, rhs.DodgeFatigueModBase)) return false;
            if (!object.Equals(this.EncumbSpeedModBase, rhs.EncumbSpeedModBase)) return false;
            if (!object.Equals(this.EncumbSpeedModMult, rhs.EncumbSpeedModMult)) return false;
            if (!object.Equals(this.DodgeWhileUnderAttackMult, rhs.DodgeWhileUnderAttackMult)) return false;
            if (!object.Equals(this.DodgeNotUnderAttackMult, rhs.DodgeNotUnderAttackMult)) return false;
            if (!object.Equals(this.DodgeBackWhileUnderAttackMult, rhs.DodgeBackWhileUnderAttackMult)) return false;
            if (!object.Equals(this.DodgeBackNotUnderAttackMult, rhs.DodgeBackNotUnderAttackMult)) return false;
            if (!object.Equals(this.DodgeForwardWhileUnderAttackMult, rhs.DodgeForwardWhileUnderAttackMult)) return false;
            if (!object.Equals(this.DodgeForwardNotUnderAttackMult, rhs.DodgeForwardNotUnderAttackMult)) return false;
            if (!object.Equals(this.BlockSkillModifierMult, rhs.BlockSkillModifierMult)) return false;
            if (!object.Equals(this.BlockSkillModifierBase, rhs.BlockSkillModifierBase)) return false;
            if (!object.Equals(this.BlockWhileUnderAttackMult, rhs.BlockWhileUnderAttackMult)) return false;
            if (!object.Equals(this.BlockNotUnderAttackMult, rhs.BlockNotUnderAttackMult)) return false;
            if (!object.Equals(this.AttackSkillModifierMult, rhs.AttackSkillModifierMult)) return false;
            if (!object.Equals(this.AttackSkillModifierBase, rhs.AttackSkillModifierBase)) return false;
            if (!object.Equals(this.AttackWhileUnderAttackMult, rhs.AttackWhileUnderAttackMult)) return false;
            if (!object.Equals(this.AttackNotUnderAttackMult, rhs.AttackNotUnderAttackMult)) return false;
            if (!object.Equals(this.AttackDuringBlockMult, rhs.AttackDuringBlockMult)) return false;
            if (!object.Equals(this.PowerAttackFatigueModBase, rhs.PowerAttackFatigueModBase)) return false;
            if (!object.Equals(this.PowerAttackFatigueModMult, rhs.PowerAttackFatigueModMult)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.DodgeFatigueModMult?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeFatigueModBase?.GetHashCode());
            ret = ret.CombineHashCode(this.EncumbSpeedModBase?.GetHashCode());
            ret = ret.CombineHashCode(this.EncumbSpeedModMult?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeWhileUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeNotUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeBackWhileUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeBackNotUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeForwardWhileUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeForwardNotUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.BlockSkillModifierMult?.GetHashCode());
            ret = ret.CombineHashCode(this.BlockSkillModifierBase?.GetHashCode());
            ret = ret.CombineHashCode(this.BlockWhileUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.BlockNotUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackSkillModifierMult?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackSkillModifierBase?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackWhileUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackNotUnderAttackMult?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackDuringBlockMult?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackFatigueModBase?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackFatigueModMult?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.DodgeFatigueModMult)) return false;
            if (!eval(this.DodgeFatigueModBase)) return false;
            if (!eval(this.EncumbSpeedModBase)) return false;
            if (!eval(this.EncumbSpeedModMult)) return false;
            if (!eval(this.DodgeWhileUnderAttackMult)) return false;
            if (!eval(this.DodgeNotUnderAttackMult)) return false;
            if (!eval(this.DodgeBackWhileUnderAttackMult)) return false;
            if (!eval(this.DodgeBackNotUnderAttackMult)) return false;
            if (!eval(this.DodgeForwardWhileUnderAttackMult)) return false;
            if (!eval(this.DodgeForwardNotUnderAttackMult)) return false;
            if (!eval(this.BlockSkillModifierMult)) return false;
            if (!eval(this.BlockSkillModifierBase)) return false;
            if (!eval(this.BlockWhileUnderAttackMult)) return false;
            if (!eval(this.BlockNotUnderAttackMult)) return false;
            if (!eval(this.AttackSkillModifierMult)) return false;
            if (!eval(this.AttackSkillModifierBase)) return false;
            if (!eval(this.AttackWhileUnderAttackMult)) return false;
            if (!eval(this.AttackNotUnderAttackMult)) return false;
            if (!eval(this.AttackDuringBlockMult)) return false;
            if (!eval(this.PowerAttackFatigueModBase)) return false;
            if (!eval(this.PowerAttackFatigueModMult)) return false;
            return true;
        }
        #endregion

        #region Translate
        public CombatStyleAdvanced_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CombatStyleAdvanced_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CombatStyleAdvanced_Mask<R> obj, Func<T, R> eval)
        {
            obj.DodgeFatigueModMult = eval(this.DodgeFatigueModMult);
            obj.DodgeFatigueModBase = eval(this.DodgeFatigueModBase);
            obj.EncumbSpeedModBase = eval(this.EncumbSpeedModBase);
            obj.EncumbSpeedModMult = eval(this.EncumbSpeedModMult);
            obj.DodgeWhileUnderAttackMult = eval(this.DodgeWhileUnderAttackMult);
            obj.DodgeNotUnderAttackMult = eval(this.DodgeNotUnderAttackMult);
            obj.DodgeBackWhileUnderAttackMult = eval(this.DodgeBackWhileUnderAttackMult);
            obj.DodgeBackNotUnderAttackMult = eval(this.DodgeBackNotUnderAttackMult);
            obj.DodgeForwardWhileUnderAttackMult = eval(this.DodgeForwardWhileUnderAttackMult);
            obj.DodgeForwardNotUnderAttackMult = eval(this.DodgeForwardNotUnderAttackMult);
            obj.BlockSkillModifierMult = eval(this.BlockSkillModifierMult);
            obj.BlockSkillModifierBase = eval(this.BlockSkillModifierBase);
            obj.BlockWhileUnderAttackMult = eval(this.BlockWhileUnderAttackMult);
            obj.BlockNotUnderAttackMult = eval(this.BlockNotUnderAttackMult);
            obj.AttackSkillModifierMult = eval(this.AttackSkillModifierMult);
            obj.AttackSkillModifierBase = eval(this.AttackSkillModifierBase);
            obj.AttackWhileUnderAttackMult = eval(this.AttackWhileUnderAttackMult);
            obj.AttackNotUnderAttackMult = eval(this.AttackNotUnderAttackMult);
            obj.AttackDuringBlockMult = eval(this.AttackDuringBlockMult);
            obj.PowerAttackFatigueModBase = eval(this.PowerAttackFatigueModBase);
            obj.PowerAttackFatigueModMult = eval(this.PowerAttackFatigueModMult);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CombatStyleAdvanced_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CombatStyleAdvanced_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CombatStyleAdvanced_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DodgeFatigueModMult ?? true)
                {
                    fg.AppendLine($"DodgeFatigueModMult => {DodgeFatigueModMult}");
                }
                if (printMask?.DodgeFatigueModBase ?? true)
                {
                    fg.AppendLine($"DodgeFatigueModBase => {DodgeFatigueModBase}");
                }
                if (printMask?.EncumbSpeedModBase ?? true)
                {
                    fg.AppendLine($"EncumbSpeedModBase => {EncumbSpeedModBase}");
                }
                if (printMask?.EncumbSpeedModMult ?? true)
                {
                    fg.AppendLine($"EncumbSpeedModMult => {EncumbSpeedModMult}");
                }
                if (printMask?.DodgeWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeWhileUnderAttackMult => {DodgeWhileUnderAttackMult}");
                }
                if (printMask?.DodgeNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeNotUnderAttackMult => {DodgeNotUnderAttackMult}");
                }
                if (printMask?.DodgeBackWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeBackWhileUnderAttackMult => {DodgeBackWhileUnderAttackMult}");
                }
                if (printMask?.DodgeBackNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeBackNotUnderAttackMult => {DodgeBackNotUnderAttackMult}");
                }
                if (printMask?.DodgeForwardWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeForwardWhileUnderAttackMult => {DodgeForwardWhileUnderAttackMult}");
                }
                if (printMask?.DodgeForwardNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"DodgeForwardNotUnderAttackMult => {DodgeForwardNotUnderAttackMult}");
                }
                if (printMask?.BlockSkillModifierMult ?? true)
                {
                    fg.AppendLine($"BlockSkillModifierMult => {BlockSkillModifierMult}");
                }
                if (printMask?.BlockSkillModifierBase ?? true)
                {
                    fg.AppendLine($"BlockSkillModifierBase => {BlockSkillModifierBase}");
                }
                if (printMask?.BlockWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"BlockWhileUnderAttackMult => {BlockWhileUnderAttackMult}");
                }
                if (printMask?.BlockNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"BlockNotUnderAttackMult => {BlockNotUnderAttackMult}");
                }
                if (printMask?.AttackSkillModifierMult ?? true)
                {
                    fg.AppendLine($"AttackSkillModifierMult => {AttackSkillModifierMult}");
                }
                if (printMask?.AttackSkillModifierBase ?? true)
                {
                    fg.AppendLine($"AttackSkillModifierBase => {AttackSkillModifierBase}");
                }
                if (printMask?.AttackWhileUnderAttackMult ?? true)
                {
                    fg.AppendLine($"AttackWhileUnderAttackMult => {AttackWhileUnderAttackMult}");
                }
                if (printMask?.AttackNotUnderAttackMult ?? true)
                {
                    fg.AppendLine($"AttackNotUnderAttackMult => {AttackNotUnderAttackMult}");
                }
                if (printMask?.AttackDuringBlockMult ?? true)
                {
                    fg.AppendLine($"AttackDuringBlockMult => {AttackDuringBlockMult}");
                }
                if (printMask?.PowerAttackFatigueModBase ?? true)
                {
                    fg.AppendLine($"PowerAttackFatigueModBase => {PowerAttackFatigueModBase}");
                }
                if (printMask?.PowerAttackFatigueModMult ?? true)
                {
                    fg.AppendLine($"PowerAttackFatigueModMult => {PowerAttackFatigueModMult}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CombatStyleAdvanced_ErrorMask : IErrorMask, IErrorMask<CombatStyleAdvanced_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception DodgeFatigueModMult;
        public Exception DodgeFatigueModBase;
        public Exception EncumbSpeedModBase;
        public Exception EncumbSpeedModMult;
        public Exception DodgeWhileUnderAttackMult;
        public Exception DodgeNotUnderAttackMult;
        public Exception DodgeBackWhileUnderAttackMult;
        public Exception DodgeBackNotUnderAttackMult;
        public Exception DodgeForwardWhileUnderAttackMult;
        public Exception DodgeForwardNotUnderAttackMult;
        public Exception BlockSkillModifierMult;
        public Exception BlockSkillModifierBase;
        public Exception BlockWhileUnderAttackMult;
        public Exception BlockNotUnderAttackMult;
        public Exception AttackSkillModifierMult;
        public Exception AttackSkillModifierBase;
        public Exception AttackWhileUnderAttackMult;
        public Exception AttackNotUnderAttackMult;
        public Exception AttackDuringBlockMult;
        public Exception PowerAttackFatigueModBase;
        public Exception PowerAttackFatigueModMult;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                    return DodgeFatigueModMult;
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                    return DodgeFatigueModBase;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                    return EncumbSpeedModBase;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                    return EncumbSpeedModMult;
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                    return DodgeWhileUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                    return DodgeNotUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                    return DodgeBackWhileUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                    return DodgeBackNotUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                    return DodgeForwardWhileUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                    return DodgeForwardNotUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                    return BlockSkillModifierMult;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                    return BlockSkillModifierBase;
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                    return BlockWhileUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                    return BlockNotUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                    return AttackSkillModifierMult;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                    return AttackSkillModifierBase;
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                    return AttackWhileUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                    return AttackNotUnderAttackMult;
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                    return AttackDuringBlockMult;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                    return PowerAttackFatigueModBase;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    return PowerAttackFatigueModMult;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                    this.DodgeFatigueModMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                    this.DodgeFatigueModBase = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                    this.EncumbSpeedModBase = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                    this.EncumbSpeedModMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                    this.DodgeWhileUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                    this.DodgeNotUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                    this.DodgeBackWhileUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                    this.DodgeBackNotUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                    this.DodgeForwardWhileUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                    this.DodgeForwardNotUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                    this.BlockSkillModifierMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                    this.BlockSkillModifierBase = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                    this.BlockWhileUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                    this.BlockNotUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                    this.AttackSkillModifierMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                    this.AttackSkillModifierBase = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                    this.AttackWhileUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                    this.AttackNotUnderAttackMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                    this.AttackDuringBlockMult = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                    this.PowerAttackFatigueModBase = ex;
                    break;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    this.PowerAttackFatigueModMult = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                    this.DodgeFatigueModMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                    this.DodgeFatigueModBase = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                    this.EncumbSpeedModBase = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                    this.EncumbSpeedModMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                    this.DodgeWhileUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                    this.DodgeNotUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                    this.DodgeBackWhileUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                    this.DodgeBackNotUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                    this.DodgeForwardWhileUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                    this.DodgeForwardNotUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                    this.BlockSkillModifierMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                    this.BlockSkillModifierBase = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                    this.BlockWhileUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                    this.BlockNotUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                    this.AttackSkillModifierMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                    this.AttackSkillModifierBase = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                    this.AttackWhileUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                    this.AttackNotUnderAttackMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                    this.AttackDuringBlockMult = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                    this.PowerAttackFatigueModBase = (Exception)obj;
                    break;
                case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                    this.PowerAttackFatigueModMult = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (DodgeFatigueModMult != null) return true;
            if (DodgeFatigueModBase != null) return true;
            if (EncumbSpeedModBase != null) return true;
            if (EncumbSpeedModMult != null) return true;
            if (DodgeWhileUnderAttackMult != null) return true;
            if (DodgeNotUnderAttackMult != null) return true;
            if (DodgeBackWhileUnderAttackMult != null) return true;
            if (DodgeBackNotUnderAttackMult != null) return true;
            if (DodgeForwardWhileUnderAttackMult != null) return true;
            if (DodgeForwardNotUnderAttackMult != null) return true;
            if (BlockSkillModifierMult != null) return true;
            if (BlockSkillModifierBase != null) return true;
            if (BlockWhileUnderAttackMult != null) return true;
            if (BlockNotUnderAttackMult != null) return true;
            if (AttackSkillModifierMult != null) return true;
            if (AttackSkillModifierBase != null) return true;
            if (AttackWhileUnderAttackMult != null) return true;
            if (AttackNotUnderAttackMult != null) return true;
            if (AttackDuringBlockMult != null) return true;
            if (PowerAttackFatigueModBase != null) return true;
            if (PowerAttackFatigueModMult != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CombatStyleAdvanced_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"DodgeFatigueModMult => {DodgeFatigueModMult}");
            fg.AppendLine($"DodgeFatigueModBase => {DodgeFatigueModBase}");
            fg.AppendLine($"EncumbSpeedModBase => {EncumbSpeedModBase}");
            fg.AppendLine($"EncumbSpeedModMult => {EncumbSpeedModMult}");
            fg.AppendLine($"DodgeWhileUnderAttackMult => {DodgeWhileUnderAttackMult}");
            fg.AppendLine($"DodgeNotUnderAttackMult => {DodgeNotUnderAttackMult}");
            fg.AppendLine($"DodgeBackWhileUnderAttackMult => {DodgeBackWhileUnderAttackMult}");
            fg.AppendLine($"DodgeBackNotUnderAttackMult => {DodgeBackNotUnderAttackMult}");
            fg.AppendLine($"DodgeForwardWhileUnderAttackMult => {DodgeForwardWhileUnderAttackMult}");
            fg.AppendLine($"DodgeForwardNotUnderAttackMult => {DodgeForwardNotUnderAttackMult}");
            fg.AppendLine($"BlockSkillModifierMult => {BlockSkillModifierMult}");
            fg.AppendLine($"BlockSkillModifierBase => {BlockSkillModifierBase}");
            fg.AppendLine($"BlockWhileUnderAttackMult => {BlockWhileUnderAttackMult}");
            fg.AppendLine($"BlockNotUnderAttackMult => {BlockNotUnderAttackMult}");
            fg.AppendLine($"AttackSkillModifierMult => {AttackSkillModifierMult}");
            fg.AppendLine($"AttackSkillModifierBase => {AttackSkillModifierBase}");
            fg.AppendLine($"AttackWhileUnderAttackMult => {AttackWhileUnderAttackMult}");
            fg.AppendLine($"AttackNotUnderAttackMult => {AttackNotUnderAttackMult}");
            fg.AppendLine($"AttackDuringBlockMult => {AttackDuringBlockMult}");
            fg.AppendLine($"PowerAttackFatigueModBase => {PowerAttackFatigueModBase}");
            fg.AppendLine($"PowerAttackFatigueModMult => {PowerAttackFatigueModMult}");
        }
        #endregion

        #region Combine
        public CombatStyleAdvanced_ErrorMask Combine(CombatStyleAdvanced_ErrorMask rhs)
        {
            var ret = new CombatStyleAdvanced_ErrorMask();
            ret.DodgeFatigueModMult = this.DodgeFatigueModMult.Combine(rhs.DodgeFatigueModMult);
            ret.DodgeFatigueModBase = this.DodgeFatigueModBase.Combine(rhs.DodgeFatigueModBase);
            ret.EncumbSpeedModBase = this.EncumbSpeedModBase.Combine(rhs.EncumbSpeedModBase);
            ret.EncumbSpeedModMult = this.EncumbSpeedModMult.Combine(rhs.EncumbSpeedModMult);
            ret.DodgeWhileUnderAttackMult = this.DodgeWhileUnderAttackMult.Combine(rhs.DodgeWhileUnderAttackMult);
            ret.DodgeNotUnderAttackMult = this.DodgeNotUnderAttackMult.Combine(rhs.DodgeNotUnderAttackMult);
            ret.DodgeBackWhileUnderAttackMult = this.DodgeBackWhileUnderAttackMult.Combine(rhs.DodgeBackWhileUnderAttackMult);
            ret.DodgeBackNotUnderAttackMult = this.DodgeBackNotUnderAttackMult.Combine(rhs.DodgeBackNotUnderAttackMult);
            ret.DodgeForwardWhileUnderAttackMult = this.DodgeForwardWhileUnderAttackMult.Combine(rhs.DodgeForwardWhileUnderAttackMult);
            ret.DodgeForwardNotUnderAttackMult = this.DodgeForwardNotUnderAttackMult.Combine(rhs.DodgeForwardNotUnderAttackMult);
            ret.BlockSkillModifierMult = this.BlockSkillModifierMult.Combine(rhs.BlockSkillModifierMult);
            ret.BlockSkillModifierBase = this.BlockSkillModifierBase.Combine(rhs.BlockSkillModifierBase);
            ret.BlockWhileUnderAttackMult = this.BlockWhileUnderAttackMult.Combine(rhs.BlockWhileUnderAttackMult);
            ret.BlockNotUnderAttackMult = this.BlockNotUnderAttackMult.Combine(rhs.BlockNotUnderAttackMult);
            ret.AttackSkillModifierMult = this.AttackSkillModifierMult.Combine(rhs.AttackSkillModifierMult);
            ret.AttackSkillModifierBase = this.AttackSkillModifierBase.Combine(rhs.AttackSkillModifierBase);
            ret.AttackWhileUnderAttackMult = this.AttackWhileUnderAttackMult.Combine(rhs.AttackWhileUnderAttackMult);
            ret.AttackNotUnderAttackMult = this.AttackNotUnderAttackMult.Combine(rhs.AttackNotUnderAttackMult);
            ret.AttackDuringBlockMult = this.AttackDuringBlockMult.Combine(rhs.AttackDuringBlockMult);
            ret.PowerAttackFatigueModBase = this.PowerAttackFatigueModBase.Combine(rhs.PowerAttackFatigueModBase);
            ret.PowerAttackFatigueModMult = this.PowerAttackFatigueModMult.Combine(rhs.PowerAttackFatigueModMult);
            return ret;
        }
        public static CombatStyleAdvanced_ErrorMask Combine(CombatStyleAdvanced_ErrorMask lhs, CombatStyleAdvanced_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static CombatStyleAdvanced_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new CombatStyleAdvanced_ErrorMask();
        }
        #endregion

    }
    public class CombatStyleAdvanced_CopyMask
    {
        public CombatStyleAdvanced_CopyMask()
        {
        }

        public CombatStyleAdvanced_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.DodgeFatigueModMult = defaultOn;
            this.DodgeFatigueModBase = defaultOn;
            this.EncumbSpeedModBase = defaultOn;
            this.EncumbSpeedModMult = defaultOn;
            this.DodgeWhileUnderAttackMult = defaultOn;
            this.DodgeNotUnderAttackMult = defaultOn;
            this.DodgeBackWhileUnderAttackMult = defaultOn;
            this.DodgeBackNotUnderAttackMult = defaultOn;
            this.DodgeForwardWhileUnderAttackMult = defaultOn;
            this.DodgeForwardNotUnderAttackMult = defaultOn;
            this.BlockSkillModifierMult = defaultOn;
            this.BlockSkillModifierBase = defaultOn;
            this.BlockWhileUnderAttackMult = defaultOn;
            this.BlockNotUnderAttackMult = defaultOn;
            this.AttackSkillModifierMult = defaultOn;
            this.AttackSkillModifierBase = defaultOn;
            this.AttackWhileUnderAttackMult = defaultOn;
            this.AttackNotUnderAttackMult = defaultOn;
            this.AttackDuringBlockMult = defaultOn;
            this.PowerAttackFatigueModBase = defaultOn;
            this.PowerAttackFatigueModMult = defaultOn;
        }

        #region Members
        public bool DodgeFatigueModMult;
        public bool DodgeFatigueModBase;
        public bool EncumbSpeedModBase;
        public bool EncumbSpeedModMult;
        public bool DodgeWhileUnderAttackMult;
        public bool DodgeNotUnderAttackMult;
        public bool DodgeBackWhileUnderAttackMult;
        public bool DodgeBackNotUnderAttackMult;
        public bool DodgeForwardWhileUnderAttackMult;
        public bool DodgeForwardNotUnderAttackMult;
        public bool BlockSkillModifierMult;
        public bool BlockSkillModifierBase;
        public bool BlockWhileUnderAttackMult;
        public bool BlockNotUnderAttackMult;
        public bool AttackSkillModifierMult;
        public bool AttackSkillModifierBase;
        public bool AttackWhileUnderAttackMult;
        public bool AttackNotUnderAttackMult;
        public bool AttackDuringBlockMult;
        public bool PowerAttackFatigueModBase;
        public bool PowerAttackFatigueModMult;
        #endregion

    }

    public class CombatStyleAdvanced_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool DodgeFatigueModMult;
        public bool DodgeFatigueModBase;
        public bool EncumbSpeedModBase;
        public bool EncumbSpeedModMult;
        public bool DodgeWhileUnderAttackMult;
        public bool DodgeNotUnderAttackMult;
        public bool DodgeBackWhileUnderAttackMult;
        public bool DodgeBackNotUnderAttackMult;
        public bool DodgeForwardWhileUnderAttackMult;
        public bool DodgeForwardNotUnderAttackMult;
        public bool BlockSkillModifierMult;
        public bool BlockSkillModifierBase;
        public bool BlockWhileUnderAttackMult;
        public bool BlockNotUnderAttackMult;
        public bool AttackSkillModifierMult;
        public bool AttackSkillModifierBase;
        public bool AttackWhileUnderAttackMult;
        public bool AttackNotUnderAttackMult;
        public bool AttackDuringBlockMult;
        public bool PowerAttackFatigueModBase;
        public bool PowerAttackFatigueModMult;
        #endregion

        #region Ctors
        public CombatStyleAdvanced_TranslationMask()
        {
        }

        public CombatStyleAdvanced_TranslationMask(bool defaultOn)
        {
            this.DodgeFatigueModMult = defaultOn;
            this.DodgeFatigueModBase = defaultOn;
            this.EncumbSpeedModBase = defaultOn;
            this.EncumbSpeedModMult = defaultOn;
            this.DodgeWhileUnderAttackMult = defaultOn;
            this.DodgeNotUnderAttackMult = defaultOn;
            this.DodgeBackWhileUnderAttackMult = defaultOn;
            this.DodgeBackNotUnderAttackMult = defaultOn;
            this.DodgeForwardWhileUnderAttackMult = defaultOn;
            this.DodgeForwardNotUnderAttackMult = defaultOn;
            this.BlockSkillModifierMult = defaultOn;
            this.BlockSkillModifierBase = defaultOn;
            this.BlockWhileUnderAttackMult = defaultOn;
            this.BlockNotUnderAttackMult = defaultOn;
            this.AttackSkillModifierMult = defaultOn;
            this.AttackSkillModifierBase = defaultOn;
            this.AttackWhileUnderAttackMult = defaultOn;
            this.AttackNotUnderAttackMult = defaultOn;
            this.AttackDuringBlockMult = defaultOn;
            this.PowerAttackFatigueModBase = defaultOn;
            this.PowerAttackFatigueModMult = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((DodgeFatigueModMult, null));
            ret.Add((DodgeFatigueModBase, null));
            ret.Add((EncumbSpeedModBase, null));
            ret.Add((EncumbSpeedModMult, null));
            ret.Add((DodgeWhileUnderAttackMult, null));
            ret.Add((DodgeNotUnderAttackMult, null));
            ret.Add((DodgeBackWhileUnderAttackMult, null));
            ret.Add((DodgeBackNotUnderAttackMult, null));
            ret.Add((DodgeForwardWhileUnderAttackMult, null));
            ret.Add((DodgeForwardNotUnderAttackMult, null));
            ret.Add((BlockSkillModifierMult, null));
            ret.Add((BlockSkillModifierBase, null));
            ret.Add((BlockWhileUnderAttackMult, null));
            ret.Add((BlockNotUnderAttackMult, null));
            ret.Add((AttackSkillModifierMult, null));
            ret.Add((AttackSkillModifierBase, null));
            ret.Add((AttackWhileUnderAttackMult, null));
            ret.Add((AttackNotUnderAttackMult, null));
            ret.Add((AttackDuringBlockMult, null));
            ret.Add((PowerAttackFatigueModBase, null));
            ret.Add((PowerAttackFatigueModMult, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class CombatStyleAdvancedBinaryTranslation : IBinaryTranslator
    {
        public readonly static CombatStyleAdvancedBinaryTranslation Instance = new CombatStyleAdvancedBinaryTranslation();

        public static void Write_Embedded(
            ICombatStyleAdvancedGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DodgeFatigueModMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DodgeFatigueModBase);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EncumbSpeedModBase);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EncumbSpeedModMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DodgeWhileUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DodgeNotUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DodgeBackWhileUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DodgeBackNotUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DodgeForwardWhileUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DodgeForwardNotUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BlockSkillModifierMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BlockSkillModifierBase);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BlockWhileUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BlockNotUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackSkillModifierMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackSkillModifierBase);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackWhileUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackNotUnderAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackDuringBlockMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.PowerAttackFatigueModBase);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.PowerAttackFatigueModMult);
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleAdvancedGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: CombatStyleAdvanced_Registration.CSAD_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ICombatStyleAdvancedGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class CombatStyleAdvancedBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICombatStyleAdvancedGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out CombatStyleAdvanced_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CombatStyleAdvancedBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CombatStyleAdvanced_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this ICombatStyleAdvancedGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((CombatStyleAdvancedBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this ICombatStyleAdvancedGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((CombatStyleAdvancedBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
