/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CombatStyle : 
        MajorRecord,
        ICombatStyle,
        ILoquiObject<CombatStyle>,
        ILoquiObjectSetter,
        IEquatable<CombatStyle>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static CombatStyle_Registration Registration => CombatStyle_Registration.Instance;

        #region Ctor
        protected CombatStyle()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DodgePercentChance
        private Byte _DodgePercentChance;
        public Byte DodgePercentChance
        {
            get => _DodgePercentChance;
            set
            {
                this._DodgePercentChance = value.PutInRange(DodgePercentChance_Range.Min, DodgePercentChance_Range.Max);
            }
        }
        public static RangeUInt8 DodgePercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region LeftRightPercentChance
        private Byte _LeftRightPercentChance;
        public Byte LeftRightPercentChance
        {
            get => _LeftRightPercentChance;
            set
            {
                this._LeftRightPercentChance = value.PutInRange(LeftRightPercentChance_Range.Min, LeftRightPercentChance_Range.Max);
            }
        }
        public static RangeUInt8 LeftRightPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region DodgeLeftRightTimerMin
        private Single _DodgeLeftRightTimerMin;
        public Single DodgeLeftRightTimerMin
        {
            get => this._DodgeLeftRightTimerMin;
            set => this.RaiseAndSetIfChanged(ref this._DodgeLeftRightTimerMin, value, nameof(DodgeLeftRightTimerMin));
        }
        #endregion
        #region DodgeLeftRightTimerMax
        private Single _DodgeLeftRightTimerMax;
        public Single DodgeLeftRightTimerMax
        {
            get => this._DodgeLeftRightTimerMax;
            set => this.RaiseAndSetIfChanged(ref this._DodgeLeftRightTimerMax, value, nameof(DodgeLeftRightTimerMax));
        }
        #endregion
        #region DodgeForwardTimerMin
        private Single _DodgeForwardTimerMin;
        public Single DodgeForwardTimerMin
        {
            get => this._DodgeForwardTimerMin;
            set => this.RaiseAndSetIfChanged(ref this._DodgeForwardTimerMin, value, nameof(DodgeForwardTimerMin));
        }
        #endregion
        #region DodgeForwardTimerMax
        private Single _DodgeForwardTimerMax;
        public Single DodgeForwardTimerMax
        {
            get => this._DodgeForwardTimerMax;
            set => this.RaiseAndSetIfChanged(ref this._DodgeForwardTimerMax, value, nameof(DodgeForwardTimerMax));
        }
        #endregion
        #region DodgeBackTimerMin
        private Single _DodgeBackTimerMin;
        public Single DodgeBackTimerMin
        {
            get => this._DodgeBackTimerMin;
            set => this.RaiseAndSetIfChanged(ref this._DodgeBackTimerMin, value, nameof(DodgeBackTimerMin));
        }
        #endregion
        #region DodgeBackTimerMax
        private Single _DodgeBackTimerMax;
        public Single DodgeBackTimerMax
        {
            get => this._DodgeBackTimerMax;
            set => this.RaiseAndSetIfChanged(ref this._DodgeBackTimerMax, value, nameof(DodgeBackTimerMax));
        }
        #endregion
        #region IdleTimerMin
        private Single _IdleTimerMin;
        public Single IdleTimerMin
        {
            get => this._IdleTimerMin;
            set => this.RaiseAndSetIfChanged(ref this._IdleTimerMin, value, nameof(IdleTimerMin));
        }
        #endregion
        #region IdleTimerMax
        private Single _IdleTimerMax;
        public Single IdleTimerMax
        {
            get => this._IdleTimerMax;
            set => this.RaiseAndSetIfChanged(ref this._IdleTimerMax, value, nameof(IdleTimerMax));
        }
        #endregion
        #region BlockPercentChance
        private Byte _BlockPercentChance;
        public Byte BlockPercentChance
        {
            get => _BlockPercentChance;
            set
            {
                this._BlockPercentChance = value.PutInRange(BlockPercentChance_Range.Min, BlockPercentChance_Range.Max);
            }
        }
        public static RangeUInt8 BlockPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region AttackPercentChance
        private Byte _AttackPercentChance;
        public Byte AttackPercentChance
        {
            get => _AttackPercentChance;
            set
            {
                this._AttackPercentChance = value.PutInRange(AttackPercentChance_Range.Min, AttackPercentChance_Range.Max);
            }
        }
        public static RangeUInt8 AttackPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region RecoilStaggerBonusToAttack
        private Single _RecoilStaggerBonusToAttack;
        public Single RecoilStaggerBonusToAttack
        {
            get => this._RecoilStaggerBonusToAttack;
            set => this.RaiseAndSetIfChanged(ref this._RecoilStaggerBonusToAttack, value, nameof(RecoilStaggerBonusToAttack));
        }
        #endregion
        #region UnconsciousBonusToAttack
        private Single _UnconsciousBonusToAttack;
        public Single UnconsciousBonusToAttack
        {
            get => this._UnconsciousBonusToAttack;
            set => this.RaiseAndSetIfChanged(ref this._UnconsciousBonusToAttack, value, nameof(UnconsciousBonusToAttack));
        }
        #endregion
        #region HandToHandBonusToAttack
        private Single _HandToHandBonusToAttack;
        public Single HandToHandBonusToAttack
        {
            get => this._HandToHandBonusToAttack;
            set => this.RaiseAndSetIfChanged(ref this._HandToHandBonusToAttack, value, nameof(HandToHandBonusToAttack));
        }
        #endregion
        #region PowerAttackPercentChance
        private Byte _PowerAttackPercentChance;
        public Byte PowerAttackPercentChance
        {
            get => _PowerAttackPercentChance;
            set
            {
                this._PowerAttackPercentChance = value.PutInRange(PowerAttackPercentChance_Range.Min, PowerAttackPercentChance_Range.Max);
            }
        }
        public static RangeUInt8 PowerAttackPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region RecoilStaggerBonusToPowerAttack
        private Single _RecoilStaggerBonusToPowerAttack;
        public Single RecoilStaggerBonusToPowerAttack
        {
            get => this._RecoilStaggerBonusToPowerAttack;
            set => this.RaiseAndSetIfChanged(ref this._RecoilStaggerBonusToPowerAttack, value, nameof(RecoilStaggerBonusToPowerAttack));
        }
        #endregion
        #region UnconsciousBonusToPowerAttack
        private Single _UnconsciousBonusToPowerAttack;
        public Single UnconsciousBonusToPowerAttack
        {
            get => this._UnconsciousBonusToPowerAttack;
            set => this.RaiseAndSetIfChanged(ref this._UnconsciousBonusToPowerAttack, value, nameof(UnconsciousBonusToPowerAttack));
        }
        #endregion
        #region PowerAttackNormal
        private Byte _PowerAttackNormal;
        public Byte PowerAttackNormal
        {
            get => _PowerAttackNormal;
            set
            {
                this._PowerAttackNormal = value.PutInRange(PowerAttackNormal_Range.Min, PowerAttackNormal_Range.Max);
            }
        }
        public static RangeUInt8 PowerAttackNormal_Range = new RangeUInt8(0, 100);
        #endregion
        #region PowerAttackForward
        private Byte _PowerAttackForward;
        public Byte PowerAttackForward
        {
            get => _PowerAttackForward;
            set
            {
                this._PowerAttackForward = value.PutInRange(PowerAttackForward_Range.Min, PowerAttackForward_Range.Max);
            }
        }
        public static RangeUInt8 PowerAttackForward_Range = new RangeUInt8(0, 100);
        #endregion
        #region PowerAttackBack
        private Byte _PowerAttackBack;
        public Byte PowerAttackBack
        {
            get => _PowerAttackBack;
            set
            {
                this._PowerAttackBack = value.PutInRange(PowerAttackBack_Range.Min, PowerAttackBack_Range.Max);
            }
        }
        public static RangeUInt8 PowerAttackBack_Range = new RangeUInt8(0, 100);
        #endregion
        #region PowerAttackLeft
        private Byte _PowerAttackLeft;
        public Byte PowerAttackLeft
        {
            get => _PowerAttackLeft;
            set
            {
                this._PowerAttackLeft = value.PutInRange(PowerAttackLeft_Range.Min, PowerAttackLeft_Range.Max);
            }
        }
        public static RangeUInt8 PowerAttackLeft_Range = new RangeUInt8(0, 100);
        #endregion
        #region PowerAttackRight
        private Byte _PowerAttackRight;
        public Byte PowerAttackRight
        {
            get => _PowerAttackRight;
            set
            {
                this._PowerAttackRight = value.PutInRange(PowerAttackRight_Range.Min, PowerAttackRight_Range.Max);
            }
        }
        public static RangeUInt8 PowerAttackRight_Range = new RangeUInt8(0, 100);
        #endregion
        #region HoldTimerMin
        private Single _HoldTimerMin;
        public Single HoldTimerMin
        {
            get => this._HoldTimerMin;
            set => this.RaiseAndSetIfChanged(ref this._HoldTimerMin, value, nameof(HoldTimerMin));
        }
        #endregion
        #region HoldTimerMax
        private Single _HoldTimerMax;
        public Single HoldTimerMax
        {
            get => this._HoldTimerMax;
            set => this.RaiseAndSetIfChanged(ref this._HoldTimerMax, value, nameof(HoldTimerMax));
        }
        #endregion
        #region Flags
        private CombatStyle.Flag _Flags;
        public CombatStyle.Flag Flags
        {
            get => this._Flags;
            set => this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
        }
        #endregion
        #region AcrobaticDodgePercentChance
        private Byte _AcrobaticDodgePercentChance;
        public Byte AcrobaticDodgePercentChance
        {
            get => _AcrobaticDodgePercentChance;
            set
            {
                this._AcrobaticDodgePercentChance = value.PutInRange(AcrobaticDodgePercentChance_Range.Min, AcrobaticDodgePercentChance_Range.Max);
            }
        }
        public static RangeUInt8 AcrobaticDodgePercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region RangeMultOptimal
        private Single _RangeMultOptimal;
        public Single RangeMultOptimal
        {
            get => this._RangeMultOptimal;
            set => this.RaiseAndSetIfChanged(ref this._RangeMultOptimal, value, nameof(RangeMultOptimal));
        }
        #endregion
        #region RangeMultMax
        private Single _RangeMultMax;
        public Single RangeMultMax
        {
            get => this._RangeMultMax;
            set => this.RaiseAndSetIfChanged(ref this._RangeMultMax, value, nameof(RangeMultMax));
        }
        #endregion
        #region SwitchDistanceMelee
        private Single _SwitchDistanceMelee;
        public Single SwitchDistanceMelee
        {
            get => this._SwitchDistanceMelee;
            set => this.RaiseAndSetIfChanged(ref this._SwitchDistanceMelee, value, nameof(SwitchDistanceMelee));
        }
        #endregion
        #region SwitchDistanceRanged
        private Single _SwitchDistanceRanged;
        public Single SwitchDistanceRanged
        {
            get => this._SwitchDistanceRanged;
            set => this.RaiseAndSetIfChanged(ref this._SwitchDistanceRanged, value, nameof(SwitchDistanceRanged));
        }
        #endregion
        #region BuffStandoffDistance
        private Single _BuffStandoffDistance;
        public Single BuffStandoffDistance
        {
            get => this._BuffStandoffDistance;
            set => this.RaiseAndSetIfChanged(ref this._BuffStandoffDistance, value, nameof(BuffStandoffDistance));
        }
        #endregion
        #region RangedStandoffDistance
        private Single _RangedStandoffDistance;
        public Single RangedStandoffDistance
        {
            get => this._RangedStandoffDistance;
            set => this.RaiseAndSetIfChanged(ref this._RangedStandoffDistance, value, nameof(RangedStandoffDistance));
        }
        #endregion
        #region GroupStandoffDistance
        private Single _GroupStandoffDistance;
        public Single GroupStandoffDistance
        {
            get => this._GroupStandoffDistance;
            set => this.RaiseAndSetIfChanged(ref this._GroupStandoffDistance, value, nameof(GroupStandoffDistance));
        }
        #endregion
        #region RushingAttackPercentChance
        private Byte _RushingAttackPercentChance;
        public Byte RushingAttackPercentChance
        {
            get => _RushingAttackPercentChance;
            set
            {
                this._RushingAttackPercentChance = value.PutInRange(RushingAttackPercentChance_Range.Min, RushingAttackPercentChance_Range.Max);
            }
        }
        public static RangeUInt8 RushingAttackPercentChance_Range = new RangeUInt8(0, 100);
        #endregion
        #region RushingAttackDistanceMult
        private Single _RushingAttackDistanceMult;
        public Single RushingAttackDistanceMult
        {
            get => this._RushingAttackDistanceMult;
            set => this.RaiseAndSetIfChanged(ref this._RushingAttackDistanceMult, value, nameof(RushingAttackDistanceMult));
        }
        #endregion
        #region Advanced
        public bool Advanced_IsSet
        {
            get => _hasBeenSetTracker[(int)CombatStyle_FieldIndex.Advanced];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)CombatStyle_FieldIndex.Advanced, nameof(Advanced_IsSet));
        }
        bool ICombatStyleGetter.Advanced_IsSet => Advanced_IsSet;
        private CombatStyleAdvanced _Advanced;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CombatStyleAdvanced Advanced
        {
            get => _Advanced;
            set => Advanced_Set(value);
        }
        public void Advanced_Set(
            CombatStyleAdvanced value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Advanced, value, _hasBeenSetTracker, markSet, (int)CombatStyle_FieldIndex.Advanced, nameof(Advanced), nameof(Advanced_IsSet));
        }
        public void Advanced_Unset()
        {
            this.Advanced_Set(default(CombatStyleAdvanced), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        CombatStyleAdvanced ICombatStyleGetter.Advanced => this.Advanced;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => CombatStyleCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => CombatStyleCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CombatStyleCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CombatStyleCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<CombatStyle>.GetEqualsMask(CombatStyle rhs) => CombatStyleCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICombatStyleGetter>.GetEqualsMask(ICombatStyleGetter rhs) => CombatStyleCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            CombatStyle_Mask<bool> printMask = null)
        {
            return CombatStyleCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            CombatStyleCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new CombatStyle_Mask<bool> GetHasBeenSetMask()
        {
            return CombatStyleCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CombatStyle rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CombatStyle rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.DodgePercentChance != rhs.DodgePercentChance) return false;
            if (this.LeftRightPercentChance != rhs.LeftRightPercentChance) return false;
            if (!this.DodgeLeftRightTimerMin.EqualsWithin(rhs.DodgeLeftRightTimerMin)) return false;
            if (!this.DodgeLeftRightTimerMax.EqualsWithin(rhs.DodgeLeftRightTimerMax)) return false;
            if (!this.DodgeForwardTimerMin.EqualsWithin(rhs.DodgeForwardTimerMin)) return false;
            if (!this.DodgeForwardTimerMax.EqualsWithin(rhs.DodgeForwardTimerMax)) return false;
            if (!this.DodgeBackTimerMin.EqualsWithin(rhs.DodgeBackTimerMin)) return false;
            if (!this.DodgeBackTimerMax.EqualsWithin(rhs.DodgeBackTimerMax)) return false;
            if (!this.IdleTimerMin.EqualsWithin(rhs.IdleTimerMin)) return false;
            if (!this.IdleTimerMax.EqualsWithin(rhs.IdleTimerMax)) return false;
            if (this.BlockPercentChance != rhs.BlockPercentChance) return false;
            if (this.AttackPercentChance != rhs.AttackPercentChance) return false;
            if (!this.RecoilStaggerBonusToAttack.EqualsWithin(rhs.RecoilStaggerBonusToAttack)) return false;
            if (!this.UnconsciousBonusToAttack.EqualsWithin(rhs.UnconsciousBonusToAttack)) return false;
            if (!this.HandToHandBonusToAttack.EqualsWithin(rhs.HandToHandBonusToAttack)) return false;
            if (this.PowerAttackPercentChance != rhs.PowerAttackPercentChance) return false;
            if (!this.RecoilStaggerBonusToPowerAttack.EqualsWithin(rhs.RecoilStaggerBonusToPowerAttack)) return false;
            if (!this.UnconsciousBonusToPowerAttack.EqualsWithin(rhs.UnconsciousBonusToPowerAttack)) return false;
            if (this.PowerAttackNormal != rhs.PowerAttackNormal) return false;
            if (this.PowerAttackForward != rhs.PowerAttackForward) return false;
            if (this.PowerAttackBack != rhs.PowerAttackBack) return false;
            if (this.PowerAttackLeft != rhs.PowerAttackLeft) return false;
            if (this.PowerAttackRight != rhs.PowerAttackRight) return false;
            if (!this.HoldTimerMin.EqualsWithin(rhs.HoldTimerMin)) return false;
            if (!this.HoldTimerMax.EqualsWithin(rhs.HoldTimerMax)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.AcrobaticDodgePercentChance != rhs.AcrobaticDodgePercentChance) return false;
            if (!this.RangeMultOptimal.EqualsWithin(rhs.RangeMultOptimal)) return false;
            if (!this.RangeMultMax.EqualsWithin(rhs.RangeMultMax)) return false;
            if (!this.SwitchDistanceMelee.EqualsWithin(rhs.SwitchDistanceMelee)) return false;
            if (!this.SwitchDistanceRanged.EqualsWithin(rhs.SwitchDistanceRanged)) return false;
            if (!this.BuffStandoffDistance.EqualsWithin(rhs.BuffStandoffDistance)) return false;
            if (!this.RangedStandoffDistance.EqualsWithin(rhs.RangedStandoffDistance)) return false;
            if (!this.GroupStandoffDistance.EqualsWithin(rhs.GroupStandoffDistance)) return false;
            if (this.RushingAttackPercentChance != rhs.RushingAttackPercentChance) return false;
            if (!this.RushingAttackDistanceMult.EqualsWithin(rhs.RushingAttackDistanceMult)) return false;
            if (Advanced_IsSet != rhs.Advanced_IsSet) return false;
            if (Advanced_IsSet)
            {
                if (!object.Equals(this.Advanced, rhs.Advanced)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(DodgePercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LeftRightPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeLeftRightTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeLeftRightTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeForwardTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeForwardTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeBackTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DodgeBackTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(IdleTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(IdleTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BlockPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AttackPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RecoilStaggerBonusToAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UnconsciousBonusToAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HandToHandBonusToAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PowerAttackPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RecoilStaggerBonusToPowerAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UnconsciousBonusToPowerAttack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PowerAttackNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PowerAttackForward).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PowerAttackBack).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PowerAttackLeft).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PowerAttackRight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HoldTimerMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HoldTimerMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AcrobaticDodgePercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeMultOptimal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeMultMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SwitchDistanceMelee).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SwitchDistanceRanged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BuffStandoffDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangedStandoffDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(GroupStandoffDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RushingAttackPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RushingAttackDistanceMult).CombineHashCode(ret);
            if (Advanced_IsSet)
            {
                ret = HashHelper.GetHashCode(Advanced).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static CombatStyle Create_Xml(
            XElement root,
            CombatStyle_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CombatStyle Create_Xml(
            XElement root,
            out CombatStyle_ErrorMask errorMask,
            bool doMasks = true,
            CombatStyle_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CombatStyle Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new CombatStyle();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static CombatStyle Create_Xml(
            string path,
            CombatStyle_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static CombatStyle Create_Xml(
            string path,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CombatStyle Create_Xml(
            Stream stream,
            CombatStyle_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static CombatStyle Create_Xml(
            Stream stream,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<CombatStyle>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out CombatStyle_ErrorMask errorMask,
            bool doMasks = true,
            CombatStyle_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            CombatStyleCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            CombatStyle item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "DodgePercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgePercentChance);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte DodgePercentChanceParse,
                            errorMask: errorMask))
                        {
                            item.DodgePercentChance = DodgePercentChanceParse;
                        }
                        else
                        {
                            item.DodgePercentChance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeftRightPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.LeftRightPercentChance);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte LeftRightPercentChanceParse,
                            errorMask: errorMask))
                        {
                            item.LeftRightPercentChance = LeftRightPercentChanceParse;
                        }
                        else
                        {
                            item.LeftRightPercentChance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeLeftRightTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DodgeLeftRightTimerMinParse,
                            errorMask: errorMask))
                        {
                            item.DodgeLeftRightTimerMin = DodgeLeftRightTimerMinParse;
                        }
                        else
                        {
                            item.DodgeLeftRightTimerMin = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeLeftRightTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DodgeLeftRightTimerMaxParse,
                            errorMask: errorMask))
                        {
                            item.DodgeLeftRightTimerMax = DodgeLeftRightTimerMaxParse;
                        }
                        else
                        {
                            item.DodgeLeftRightTimerMax = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeForwardTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeForwardTimerMin);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DodgeForwardTimerMinParse,
                            errorMask: errorMask))
                        {
                            item.DodgeForwardTimerMin = DodgeForwardTimerMinParse;
                        }
                        else
                        {
                            item.DodgeForwardTimerMin = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeForwardTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeForwardTimerMax);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DodgeForwardTimerMaxParse,
                            errorMask: errorMask))
                        {
                            item.DodgeForwardTimerMax = DodgeForwardTimerMaxParse;
                        }
                        else
                        {
                            item.DodgeForwardTimerMax = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeBackTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeBackTimerMin);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DodgeBackTimerMinParse,
                            errorMask: errorMask))
                        {
                            item.DodgeBackTimerMin = DodgeBackTimerMinParse;
                        }
                        else
                        {
                            item.DodgeBackTimerMin = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DodgeBackTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeBackTimerMax);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DodgeBackTimerMaxParse,
                            errorMask: errorMask))
                        {
                            item.DodgeBackTimerMax = DodgeBackTimerMaxParse;
                        }
                        else
                        {
                            item.DodgeBackTimerMax = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.IdleTimerMin);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single IdleTimerMinParse,
                            errorMask: errorMask))
                        {
                            item.IdleTimerMin = IdleTimerMinParse;
                        }
                        else
                        {
                            item.IdleTimerMin = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.IdleTimerMax);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single IdleTimerMaxParse,
                            errorMask: errorMask))
                        {
                            item.IdleTimerMax = IdleTimerMaxParse;
                        }
                        else
                        {
                            item.IdleTimerMax = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.BlockPercentChance);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte BlockPercentChanceParse,
                            errorMask: errorMask))
                        {
                            item.BlockPercentChance = BlockPercentChanceParse;
                        }
                        else
                        {
                            item.BlockPercentChance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.AttackPercentChance);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte AttackPercentChanceParse,
                            errorMask: errorMask))
                        {
                            item.AttackPercentChance = AttackPercentChanceParse;
                        }
                        else
                        {
                            item.AttackPercentChance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RecoilStaggerBonusToAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RecoilStaggerBonusToAttackParse,
                            errorMask: errorMask))
                        {
                            item.RecoilStaggerBonusToAttack = RecoilStaggerBonusToAttackParse;
                        }
                        else
                        {
                            item.RecoilStaggerBonusToAttack = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnconsciousBonusToAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.UnconsciousBonusToAttack);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single UnconsciousBonusToAttackParse,
                            errorMask: errorMask))
                        {
                            item.UnconsciousBonusToAttack = UnconsciousBonusToAttackParse;
                        }
                        else
                        {
                            item.UnconsciousBonusToAttack = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HandToHandBonusToAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.HandToHandBonusToAttack);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HandToHandBonusToAttackParse,
                            errorMask: errorMask))
                        {
                            item.HandToHandBonusToAttack = HandToHandBonusToAttackParse;
                        }
                        else
                        {
                            item.HandToHandBonusToAttack = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackPercentChance);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PowerAttackPercentChanceParse,
                            errorMask: errorMask))
                        {
                            item.PowerAttackPercentChance = PowerAttackPercentChanceParse;
                        }
                        else
                        {
                            item.PowerAttackPercentChance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RecoilStaggerBonusToPowerAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RecoilStaggerBonusToPowerAttackParse,
                            errorMask: errorMask))
                        {
                            item.RecoilStaggerBonusToPowerAttack = RecoilStaggerBonusToPowerAttackParse;
                        }
                        else
                        {
                            item.RecoilStaggerBonusToPowerAttack = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnconsciousBonusToPowerAttack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single UnconsciousBonusToPowerAttackParse,
                            errorMask: errorMask))
                        {
                            item.UnconsciousBonusToPowerAttack = UnconsciousBonusToPowerAttackParse;
                        }
                        else
                        {
                            item.UnconsciousBonusToPowerAttack = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackNormal":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackNormal);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PowerAttackNormalParse,
                            errorMask: errorMask))
                        {
                            item.PowerAttackNormal = PowerAttackNormalParse;
                        }
                        else
                        {
                            item.PowerAttackNormal = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackForward":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackForward);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PowerAttackForwardParse,
                            errorMask: errorMask))
                        {
                            item.PowerAttackForward = PowerAttackForwardParse;
                        }
                        else
                        {
                            item.PowerAttackForward = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackBack":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackBack);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PowerAttackBackParse,
                            errorMask: errorMask))
                        {
                            item.PowerAttackBack = PowerAttackBackParse;
                        }
                        else
                        {
                            item.PowerAttackBack = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackLeft":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackLeft);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PowerAttackLeftParse,
                            errorMask: errorMask))
                        {
                            item.PowerAttackLeft = PowerAttackLeftParse;
                        }
                        else
                        {
                            item.PowerAttackLeft = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PowerAttackRight":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackRight);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PowerAttackRightParse,
                            errorMask: errorMask))
                        {
                            item.PowerAttackRight = PowerAttackRightParse;
                        }
                        else
                        {
                            item.PowerAttackRight = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HoldTimerMin":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.HoldTimerMin);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HoldTimerMinParse,
                            errorMask: errorMask))
                        {
                            item.HoldTimerMin = HoldTimerMinParse;
                        }
                        else
                        {
                            item.HoldTimerMin = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HoldTimerMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.HoldTimerMax);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HoldTimerMaxParse,
                            errorMask: errorMask))
                        {
                            item.HoldTimerMax = HoldTimerMaxParse;
                        }
                        else
                        {
                            item.HoldTimerMax = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.Flags);
                        if (EnumXmlTranslation<CombatStyle.Flag>.Instance.Parse(
                            root: root,
                            item: out CombatStyle.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(CombatStyle.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AcrobaticDodgePercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte AcrobaticDodgePercentChanceParse,
                            errorMask: errorMask))
                        {
                            item.AcrobaticDodgePercentChance = AcrobaticDodgePercentChanceParse;
                        }
                        else
                        {
                            item.AcrobaticDodgePercentChance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RangeMultOptimal":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangeMultOptimal);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RangeMultOptimalParse,
                            errorMask: errorMask))
                        {
                            item.RangeMultOptimal = RangeMultOptimalParse;
                        }
                        else
                        {
                            item.RangeMultOptimal = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RangeMultMax":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangeMultMax);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RangeMultMaxParse,
                            errorMask: errorMask))
                        {
                            item.RangeMultMax = RangeMultMaxParse;
                        }
                        else
                        {
                            item.RangeMultMax = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SwitchDistanceMelee":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.SwitchDistanceMelee);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single SwitchDistanceMeleeParse,
                            errorMask: errorMask))
                        {
                            item.SwitchDistanceMelee = SwitchDistanceMeleeParse;
                        }
                        else
                        {
                            item.SwitchDistanceMelee = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SwitchDistanceRanged":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.SwitchDistanceRanged);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single SwitchDistanceRangedParse,
                            errorMask: errorMask))
                        {
                            item.SwitchDistanceRanged = SwitchDistanceRangedParse;
                        }
                        else
                        {
                            item.SwitchDistanceRanged = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BuffStandoffDistance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.BuffStandoffDistance);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single BuffStandoffDistanceParse,
                            errorMask: errorMask))
                        {
                            item.BuffStandoffDistance = BuffStandoffDistanceParse;
                        }
                        else
                        {
                            item.BuffStandoffDistance = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RangedStandoffDistance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangedStandoffDistance);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RangedStandoffDistanceParse,
                            errorMask: errorMask))
                        {
                            item.RangedStandoffDistance = RangedStandoffDistanceParse;
                        }
                        else
                        {
                            item.RangedStandoffDistance = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GroupStandoffDistance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.GroupStandoffDistance);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single GroupStandoffDistanceParse,
                            errorMask: errorMask))
                        {
                            item.GroupStandoffDistance = GroupStandoffDistanceParse;
                        }
                        else
                        {
                            item.GroupStandoffDistance = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RushingAttackPercentChance":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RushingAttackPercentChance);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte RushingAttackPercentChanceParse,
                            errorMask: errorMask))
                        {
                            item.RushingAttackPercentChance = RushingAttackPercentChanceParse;
                        }
                        else
                        {
                            item.RushingAttackPercentChance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RushingAttackDistanceMult":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RushingAttackDistanceMultParse,
                            errorMask: errorMask))
                        {
                            item.RushingAttackDistanceMult = RushingAttackDistanceMultParse;
                        }
                        else
                        {
                            item.RushingAttackDistanceMult = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Advanced":
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.Advanced);
                        if (LoquiXmlTranslation<CombatStyleAdvanced>.Instance.Parse(
                            root: root,
                            item: out CombatStyleAdvanced AdvancedParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Advanced)))
                        {
                            item.Advanced = AdvancedParse;
                        }
                        else
                        {
                            item.Advanced = default(CombatStyleAdvanced);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((CombatStyle_FieldIndex)index)
            {
                case CombatStyle_FieldIndex.Advanced:
                    return _hasBeenSetTracker[index];
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = CombatStyle_Registration.TRIGGERING_RECORD_TYPE;
        public CSTDDataType CSTDDataTypeState;
        [Flags]
        public enum CSTDDataType
        {
            Has = 1,
            Break0 = 2,
            Break1 = 4,
            Break2 = 8,
            Break3 = 16,
            Break4 = 32
        }
        public CombatStyle(FormKey formKey)
        {
            this.FormKey = formKey;
        }

        partial void PostDuplicate(CombatStyle obj, CombatStyle rhs, Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override MajorRecord Duplicate(Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new CombatStyle(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static CombatStyle Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static CombatStyle Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out CombatStyle_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CombatStyle Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<CombatStyle>(
                record: new CombatStyle(),
                frame: frame,
                errorMask: errorMask,
                recType: CombatStyle_Registration.CSTY_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static CombatStyle Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static CombatStyle Create_Binary(
            string path,
            MasterReferences masterReferences,
            out CombatStyle_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        public static CombatStyle Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static CombatStyle Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out CombatStyle_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out CombatStyle_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out CombatStyle_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        masterReferences: masterReferences,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out CombatStyle_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    masterReferences: masterReferences,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            CombatStyleCommon.Write_Binary(
                item: this,
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_SecondaryFlags_Custom(
            MutagenFrame frame,
            CombatStyle item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_SecondaryFlags_Custom(
            MutagenWriter writer,
            CombatStyle item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_SecondaryFlags(
            MutagenWriter writer,
            CombatStyle item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_SecondaryFlags_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            CombatStyle item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            CombatStyle item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x44545343: // CSTD
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.CSTDDataTypeState = CSTDDataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgePercentChance);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte DodgePercentChanceParse,
                                errorMask: errorMask))
                            {
                                item.DodgePercentChance = DodgePercentChanceParse;
                            }
                            else
                            {
                                item.DodgePercentChance = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.LeftRightPercentChance);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte LeftRightPercentChanceParse,
                                errorMask: errorMask))
                            {
                                item.LeftRightPercentChance = LeftRightPercentChanceParse;
                            }
                            else
                            {
                                item.LeftRightPercentChance = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        dataFrame.SetPosition(dataFrame.Position + 2);
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DodgeLeftRightTimerMinParse,
                                errorMask: errorMask))
                            {
                                item.DodgeLeftRightTimerMin = DodgeLeftRightTimerMinParse;
                            }
                            else
                            {
                                item.DodgeLeftRightTimerMin = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DodgeLeftRightTimerMaxParse,
                                errorMask: errorMask))
                            {
                                item.DodgeLeftRightTimerMax = DodgeLeftRightTimerMaxParse;
                            }
                            else
                            {
                                item.DodgeLeftRightTimerMax = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeForwardTimerMin);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DodgeForwardTimerMinParse,
                                errorMask: errorMask))
                            {
                                item.DodgeForwardTimerMin = DodgeForwardTimerMinParse;
                            }
                            else
                            {
                                item.DodgeForwardTimerMin = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeForwardTimerMax);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DodgeForwardTimerMaxParse,
                                errorMask: errorMask))
                            {
                                item.DodgeForwardTimerMax = DodgeForwardTimerMaxParse;
                            }
                            else
                            {
                                item.DodgeForwardTimerMax = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeBackTimerMin);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DodgeBackTimerMinParse,
                                errorMask: errorMask))
                            {
                                item.DodgeBackTimerMin = DodgeBackTimerMinParse;
                            }
                            else
                            {
                                item.DodgeBackTimerMin = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeBackTimerMax);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single DodgeBackTimerMaxParse,
                                errorMask: errorMask))
                            {
                                item.DodgeBackTimerMax = DodgeBackTimerMaxParse;
                            }
                            else
                            {
                                item.DodgeBackTimerMax = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.IdleTimerMin);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single IdleTimerMinParse,
                                errorMask: errorMask))
                            {
                                item.IdleTimerMin = IdleTimerMinParse;
                            }
                            else
                            {
                                item.IdleTimerMin = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.IdleTimerMax);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single IdleTimerMaxParse,
                                errorMask: errorMask))
                            {
                                item.IdleTimerMax = IdleTimerMaxParse;
                            }
                            else
                            {
                                item.IdleTimerMax = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.BlockPercentChance);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte BlockPercentChanceParse,
                                errorMask: errorMask))
                            {
                                item.BlockPercentChance = BlockPercentChanceParse;
                            }
                            else
                            {
                                item.BlockPercentChance = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.AttackPercentChance);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte AttackPercentChanceParse,
                                errorMask: errorMask))
                            {
                                item.AttackPercentChance = AttackPercentChanceParse;
                            }
                            else
                            {
                                item.AttackPercentChance = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        dataFrame.SetPosition(dataFrame.Position + 2);
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RecoilStaggerBonusToAttackParse,
                                errorMask: errorMask))
                            {
                                item.RecoilStaggerBonusToAttack = RecoilStaggerBonusToAttackParse;
                            }
                            else
                            {
                                item.RecoilStaggerBonusToAttack = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.UnconsciousBonusToAttack);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single UnconsciousBonusToAttackParse,
                                errorMask: errorMask))
                            {
                                item.UnconsciousBonusToAttack = UnconsciousBonusToAttackParse;
                            }
                            else
                            {
                                item.UnconsciousBonusToAttack = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.HandToHandBonusToAttack);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HandToHandBonusToAttackParse,
                                errorMask: errorMask))
                            {
                                item.HandToHandBonusToAttack = HandToHandBonusToAttackParse;
                            }
                            else
                            {
                                item.HandToHandBonusToAttack = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackPercentChance);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PowerAttackPercentChanceParse,
                                errorMask: errorMask))
                            {
                                item.PowerAttackPercentChance = PowerAttackPercentChanceParse;
                            }
                            else
                            {
                                item.PowerAttackPercentChance = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        dataFrame.SetPosition(dataFrame.Position + 3);
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RecoilStaggerBonusToPowerAttackParse,
                                errorMask: errorMask))
                            {
                                item.RecoilStaggerBonusToPowerAttack = RecoilStaggerBonusToPowerAttackParse;
                            }
                            else
                            {
                                item.RecoilStaggerBonusToPowerAttack = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single UnconsciousBonusToPowerAttackParse,
                                errorMask: errorMask))
                            {
                                item.UnconsciousBonusToPowerAttack = UnconsciousBonusToPowerAttackParse;
                            }
                            else
                            {
                                item.UnconsciousBonusToPowerAttack = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackNormal);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PowerAttackNormalParse,
                                errorMask: errorMask))
                            {
                                item.PowerAttackNormal = PowerAttackNormalParse;
                            }
                            else
                            {
                                item.PowerAttackNormal = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackForward);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PowerAttackForwardParse,
                                errorMask: errorMask))
                            {
                                item.PowerAttackForward = PowerAttackForwardParse;
                            }
                            else
                            {
                                item.PowerAttackForward = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackBack);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PowerAttackBackParse,
                                errorMask: errorMask))
                            {
                                item.PowerAttackBack = PowerAttackBackParse;
                            }
                            else
                            {
                                item.PowerAttackBack = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackLeft);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PowerAttackLeftParse,
                                errorMask: errorMask))
                            {
                                item.PowerAttackLeft = PowerAttackLeftParse;
                            }
                            else
                            {
                                item.PowerAttackLeft = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackRight);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PowerAttackRightParse,
                                errorMask: errorMask))
                            {
                                item.PowerAttackRight = PowerAttackRightParse;
                            }
                            else
                            {
                                item.PowerAttackRight = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        dataFrame.SetPosition(dataFrame.Position + 3);
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.HoldTimerMin);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HoldTimerMinParse,
                                errorMask: errorMask))
                            {
                                item.HoldTimerMin = HoldTimerMinParse;
                            }
                            else
                            {
                                item.HoldTimerMin = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.HoldTimerMax);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HoldTimerMaxParse,
                                errorMask: errorMask))
                            {
                                item.HoldTimerMax = HoldTimerMaxParse;
                            }
                            else
                            {
                                item.HoldTimerMax = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.Flags);
                            if (EnumBinaryTranslation<CombatStyle.Flag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(1),
                                item: out CombatStyle.Flag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.Flags = default(CombatStyle.Flag);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte AcrobaticDodgePercentChanceParse,
                                errorMask: errorMask))
                            {
                                item.AcrobaticDodgePercentChance = AcrobaticDodgePercentChanceParse;
                            }
                            else
                            {
                                item.AcrobaticDodgePercentChance = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        dataFrame.SetPosition(dataFrame.Position + 2);
                        if (dataFrame.Complete)
                        {
                            item.CSTDDataTypeState |= CSTDDataType.Break0;
                            return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangeMultOptimal);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RangeMultOptimalParse,
                                errorMask: errorMask))
                            {
                                item.RangeMultOptimal = RangeMultOptimalParse;
                            }
                            else
                            {
                                item.RangeMultOptimal = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangeMultMax);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RangeMultMaxParse,
                                errorMask: errorMask))
                            {
                                item.RangeMultMax = RangeMultMaxParse;
                            }
                            else
                            {
                                item.RangeMultMax = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        if (dataFrame.Complete)
                        {
                            item.CSTDDataTypeState |= CSTDDataType.Break1;
                            return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.RangeMultMax);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.SwitchDistanceMelee);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single SwitchDistanceMeleeParse,
                                errorMask: errorMask))
                            {
                                item.SwitchDistanceMelee = SwitchDistanceMeleeParse;
                            }
                            else
                            {
                                item.SwitchDistanceMelee = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.SwitchDistanceRanged);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single SwitchDistanceRangedParse,
                                errorMask: errorMask))
                            {
                                item.SwitchDistanceRanged = SwitchDistanceRangedParse;
                            }
                            else
                            {
                                item.SwitchDistanceRanged = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.BuffStandoffDistance);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single BuffStandoffDistanceParse,
                                errorMask: errorMask))
                            {
                                item.BuffStandoffDistance = BuffStandoffDistanceParse;
                            }
                            else
                            {
                                item.BuffStandoffDistance = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        if (dataFrame.Complete)
                        {
                            item.CSTDDataTypeState |= CSTDDataType.Break2;
                            return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.BuffStandoffDistance);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangedStandoffDistance);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RangedStandoffDistanceParse,
                                errorMask: errorMask))
                            {
                                item.RangedStandoffDistance = RangedStandoffDistanceParse;
                            }
                            else
                            {
                                item.RangedStandoffDistance = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.GroupStandoffDistance);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single GroupStandoffDistanceParse,
                                errorMask: errorMask))
                            {
                                item.GroupStandoffDistance = GroupStandoffDistanceParse;
                            }
                            else
                            {
                                item.GroupStandoffDistance = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        if (dataFrame.Complete)
                        {
                            item.CSTDDataTypeState |= CSTDDataType.Break3;
                            return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.GroupStandoffDistance);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.RushingAttackPercentChance);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte RushingAttackPercentChanceParse,
                                errorMask: errorMask))
                            {
                                item.RushingAttackPercentChance = RushingAttackPercentChanceParse;
                            }
                            else
                            {
                                item.RushingAttackPercentChance = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        dataFrame.SetPosition(dataFrame.Position + 3);
                        try
                        {
                            errorMask?.PushIndex((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single RushingAttackDistanceMultParse,
                                errorMask: errorMask))
                            {
                                item.RushingAttackDistanceMult = RushingAttackDistanceMultParse;
                            }
                            else
                            {
                                item.RushingAttackDistanceMult = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        if (dataFrame.Complete)
                        {
                            item.CSTDDataTypeState |= CSTDDataType.Break4;
                            return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                        }
                        FillBinary_SecondaryFlags_Custom(
                            frame: dataFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                case 0x44415343: // CSAD
                    try
                    {
                        errorMask?.PushIndex((int)CombatStyle_FieldIndex.Advanced);
                        if (LoquiBinaryTranslation<CombatStyleAdvanced>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out CombatStyleAdvanced AdvancedParse,
                            errorMask: errorMask))
                        {
                            item.Advanced = AdvancedParse;
                        }
                        else
                        {
                            item.Advanced = default(CombatStyleAdvanced);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)CombatStyle_FieldIndex.Advanced);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public CombatStyle Copy(
            CombatStyle_CopyMask copyMask = null,
            ICombatStyleGetter def = null)
        {
            return CombatStyle.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CombatStyle Copy(
            ICombatStyle item,
            CombatStyle_CopyMask copyMask = null,
            ICombatStyleGetter def = null)
        {
            CombatStyle ret;
            if (item.GetType().Equals(typeof(CombatStyle)))
            {
                ret = new CombatStyle();
            }
            else
            {
                ret = (CombatStyle)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CombatStyle Copy_ToLoqui(
            ICombatStyleGetter item,
            CombatStyle_CopyMask copyMask = null,
            ICombatStyleGetter def = null)
        {
            CombatStyle ret;
            if (item.GetType().Equals(typeof(CombatStyle)))
            {
                ret = new CombatStyle() as CombatStyle;
            }
            else
            {
                ret = (CombatStyle)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (ICombatStyleGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICombatStyleGetter rhs,
            CombatStyle_CopyMask copyMask,
            ICombatStyleGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICombatStyleGetter rhs,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_CopyMask copyMask = null,
            ICombatStyleGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyleCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICombatStyleGetter rhs,
            ErrorMaskBuilder errorMask,
            CombatStyle_CopyMask copyMask = null,
            ICombatStyleGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            CombatStyleCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    this.DodgePercentChance = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    this.LeftRightPercentChance = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    this.DodgeLeftRightTimerMin = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    this.DodgeLeftRightTimerMax = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    this.DodgeForwardTimerMin = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    this.DodgeForwardTimerMax = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    this.DodgeBackTimerMin = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    this.DodgeBackTimerMax = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    this.IdleTimerMin = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    this.IdleTimerMax = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    this.BlockPercentChance = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    this.AttackPercentChance = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    this.RecoilStaggerBonusToAttack = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    this.UnconsciousBonusToAttack = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    this.HandToHandBonusToAttack = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    this.PowerAttackPercentChance = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    this.RecoilStaggerBonusToPowerAttack = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    this.UnconsciousBonusToPowerAttack = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    this.PowerAttackNormal = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    this.PowerAttackForward = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    this.PowerAttackBack = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    this.PowerAttackLeft = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    this.PowerAttackRight = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    this.HoldTimerMin = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    this.HoldTimerMax = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.Flags:
                    this.Flags = (CombatStyle.Flag)obj;
                    break;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    this.AcrobaticDodgePercentChance = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    this.RangeMultOptimal = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.RangeMultMax:
                    this.RangeMultMax = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    this.SwitchDistanceMelee = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    this.SwitchDistanceRanged = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    this.BuffStandoffDistance = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    this.RangedStandoffDistance = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    this.GroupStandoffDistance = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    this.RushingAttackPercentChance = (Byte)obj;
                    break;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    this.RushingAttackDistanceMult = (Single)obj;
                    break;
                case CombatStyle_FieldIndex.Advanced:
                    this.Advanced = (CombatStyleAdvanced)obj;
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CombatStyleCommon.Clear(this, cmds);
        }


        public new static CombatStyle Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CombatStyle();
            foreach (var pair in fields)
            {
                CopyInInternal_CombatStyle(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_CombatStyle(CombatStyle obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CombatStyle_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    obj.DodgePercentChance = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    obj.LeftRightPercentChance = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    obj.DodgeLeftRightTimerMin = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    obj.DodgeLeftRightTimerMax = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    obj.DodgeForwardTimerMin = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    obj.DodgeForwardTimerMax = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    obj.DodgeBackTimerMin = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    obj.DodgeBackTimerMax = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    obj.IdleTimerMin = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    obj.IdleTimerMax = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    obj.BlockPercentChance = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    obj.AttackPercentChance = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    obj.RecoilStaggerBonusToAttack = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    obj.UnconsciousBonusToAttack = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    obj.HandToHandBonusToAttack = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    obj.PowerAttackPercentChance = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    obj.RecoilStaggerBonusToPowerAttack = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    obj.UnconsciousBonusToPowerAttack = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    obj.PowerAttackNormal = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    obj.PowerAttackForward = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    obj.PowerAttackBack = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    obj.PowerAttackLeft = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    obj.PowerAttackRight = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    obj.HoldTimerMin = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    obj.HoldTimerMax = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.Flags:
                    obj.Flags = (CombatStyle.Flag)pair.Value;
                    break;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    obj.AcrobaticDodgePercentChance = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    obj.RangeMultOptimal = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.RangeMultMax:
                    obj.RangeMultMax = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    obj.SwitchDistanceMelee = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    obj.SwitchDistanceRanged = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    obj.BuffStandoffDistance = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    obj.RangedStandoffDistance = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    obj.GroupStandoffDistance = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    obj.RushingAttackPercentChance = (Byte)pair.Value;
                    break;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    obj.RushingAttackDistanceMult = (Single)pair.Value;
                    break;
                case CombatStyle_FieldIndex.Advanced:
                    obj.Advanced = (CombatStyleAdvanced)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, CombatStyle obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyle : ICombatStyleGetter, IMajorRecord, ILoquiClass<ICombatStyle, ICombatStyleGetter>, ILoquiClass<CombatStyle, ICombatStyleGetter>
    {
        new Byte DodgePercentChance { get; set; }

        new Byte LeftRightPercentChance { get; set; }

        new Single DodgeLeftRightTimerMin { get; set; }

        new Single DodgeLeftRightTimerMax { get; set; }

        new Single DodgeForwardTimerMin { get; set; }

        new Single DodgeForwardTimerMax { get; set; }

        new Single DodgeBackTimerMin { get; set; }

        new Single DodgeBackTimerMax { get; set; }

        new Single IdleTimerMin { get; set; }

        new Single IdleTimerMax { get; set; }

        new Byte BlockPercentChance { get; set; }

        new Byte AttackPercentChance { get; set; }

        new Single RecoilStaggerBonusToAttack { get; set; }

        new Single UnconsciousBonusToAttack { get; set; }

        new Single HandToHandBonusToAttack { get; set; }

        new Byte PowerAttackPercentChance { get; set; }

        new Single RecoilStaggerBonusToPowerAttack { get; set; }

        new Single UnconsciousBonusToPowerAttack { get; set; }

        new Byte PowerAttackNormal { get; set; }

        new Byte PowerAttackForward { get; set; }

        new Byte PowerAttackBack { get; set; }

        new Byte PowerAttackLeft { get; set; }

        new Byte PowerAttackRight { get; set; }

        new Single HoldTimerMin { get; set; }

        new Single HoldTimerMax { get; set; }

        new CombatStyle.Flag Flags { get; set; }

        new Byte AcrobaticDodgePercentChance { get; set; }

        new Single RangeMultOptimal { get; set; }

        new Single RangeMultMax { get; set; }

        new Single SwitchDistanceMelee { get; set; }

        new Single SwitchDistanceRanged { get; set; }

        new Single BuffStandoffDistance { get; set; }

        new Single RangedStandoffDistance { get; set; }

        new Single GroupStandoffDistance { get; set; }

        new Byte RushingAttackPercentChance { get; set; }

        new Single RushingAttackDistanceMult { get; set; }

        new CombatStyleAdvanced Advanced { get; set; }
        new bool Advanced_IsSet { get; set; }
        void Advanced_Set(CombatStyleAdvanced item, bool hasBeenSet = true);
        void Advanced_Unset();

    }

    public partial interface ICombatStyleGetter : IMajorRecordGetter
    {
        #region DodgePercentChance
        Byte DodgePercentChance { get; }

        #endregion
        #region LeftRightPercentChance
        Byte LeftRightPercentChance { get; }

        #endregion
        #region DodgeLeftRightTimerMin
        Single DodgeLeftRightTimerMin { get; }

        #endregion
        #region DodgeLeftRightTimerMax
        Single DodgeLeftRightTimerMax { get; }

        #endregion
        #region DodgeForwardTimerMin
        Single DodgeForwardTimerMin { get; }

        #endregion
        #region DodgeForwardTimerMax
        Single DodgeForwardTimerMax { get; }

        #endregion
        #region DodgeBackTimerMin
        Single DodgeBackTimerMin { get; }

        #endregion
        #region DodgeBackTimerMax
        Single DodgeBackTimerMax { get; }

        #endregion
        #region IdleTimerMin
        Single IdleTimerMin { get; }

        #endregion
        #region IdleTimerMax
        Single IdleTimerMax { get; }

        #endregion
        #region BlockPercentChance
        Byte BlockPercentChance { get; }

        #endregion
        #region AttackPercentChance
        Byte AttackPercentChance { get; }

        #endregion
        #region RecoilStaggerBonusToAttack
        Single RecoilStaggerBonusToAttack { get; }

        #endregion
        #region UnconsciousBonusToAttack
        Single UnconsciousBonusToAttack { get; }

        #endregion
        #region HandToHandBonusToAttack
        Single HandToHandBonusToAttack { get; }

        #endregion
        #region PowerAttackPercentChance
        Byte PowerAttackPercentChance { get; }

        #endregion
        #region RecoilStaggerBonusToPowerAttack
        Single RecoilStaggerBonusToPowerAttack { get; }

        #endregion
        #region UnconsciousBonusToPowerAttack
        Single UnconsciousBonusToPowerAttack { get; }

        #endregion
        #region PowerAttackNormal
        Byte PowerAttackNormal { get; }

        #endregion
        #region PowerAttackForward
        Byte PowerAttackForward { get; }

        #endregion
        #region PowerAttackBack
        Byte PowerAttackBack { get; }

        #endregion
        #region PowerAttackLeft
        Byte PowerAttackLeft { get; }

        #endregion
        #region PowerAttackRight
        Byte PowerAttackRight { get; }

        #endregion
        #region HoldTimerMin
        Single HoldTimerMin { get; }

        #endregion
        #region HoldTimerMax
        Single HoldTimerMax { get; }

        #endregion
        #region Flags
        CombatStyle.Flag Flags { get; }

        #endregion
        #region AcrobaticDodgePercentChance
        Byte AcrobaticDodgePercentChance { get; }

        #endregion
        #region RangeMultOptimal
        Single RangeMultOptimal { get; }

        #endregion
        #region RangeMultMax
        Single RangeMultMax { get; }

        #endregion
        #region SwitchDistanceMelee
        Single SwitchDistanceMelee { get; }

        #endregion
        #region SwitchDistanceRanged
        Single SwitchDistanceRanged { get; }

        #endregion
        #region BuffStandoffDistance
        Single BuffStandoffDistance { get; }

        #endregion
        #region RangedStandoffDistance
        Single RangedStandoffDistance { get; }

        #endregion
        #region GroupStandoffDistance
        Single GroupStandoffDistance { get; }

        #endregion
        #region RushingAttackPercentChance
        Byte RushingAttackPercentChance { get; }

        #endregion
        #region RushingAttackDistanceMult
        Single RushingAttackDistanceMult { get; }

        #endregion
        #region Advanced
        CombatStyleAdvanced Advanced { get; }
        bool Advanced_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CombatStyle_FieldIndex
    {
        MajorRecordFlags = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        DodgePercentChance = 5,
        LeftRightPercentChance = 6,
        DodgeLeftRightTimerMin = 7,
        DodgeLeftRightTimerMax = 8,
        DodgeForwardTimerMin = 9,
        DodgeForwardTimerMax = 10,
        DodgeBackTimerMin = 11,
        DodgeBackTimerMax = 12,
        IdleTimerMin = 13,
        IdleTimerMax = 14,
        BlockPercentChance = 15,
        AttackPercentChance = 16,
        RecoilStaggerBonusToAttack = 17,
        UnconsciousBonusToAttack = 18,
        HandToHandBonusToAttack = 19,
        PowerAttackPercentChance = 20,
        RecoilStaggerBonusToPowerAttack = 21,
        UnconsciousBonusToPowerAttack = 22,
        PowerAttackNormal = 23,
        PowerAttackForward = 24,
        PowerAttackBack = 25,
        PowerAttackLeft = 26,
        PowerAttackRight = 27,
        HoldTimerMin = 28,
        HoldTimerMax = 29,
        Flags = 30,
        AcrobaticDodgePercentChance = 31,
        RangeMultOptimal = 32,
        RangeMultMax = 33,
        SwitchDistanceMelee = 34,
        SwitchDistanceRanged = 35,
        BuffStandoffDistance = 36,
        RangedStandoffDistance = 37,
        GroupStandoffDistance = 38,
        RushingAttackPercentChance = 39,
        RushingAttackDistanceMult = 40,
        Advanced = 41,
    }
    #endregion

    #region Registration
    public class CombatStyle_Registration : ILoquiRegistration
    {
        public static readonly CombatStyle_Registration Instance = new CombatStyle_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 88,
            version: 0);

        public const string GUID = "5a84afb8-6c2a-4274-aa72-155f9fcddd71";

        public const ushort AdditionalFieldCount = 37;

        public const ushort FieldCount = 42;

        public static readonly Type MaskType = typeof(CombatStyle_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyle_ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyle);

        public static readonly Type GetterType = typeof(ICombatStyleGetter);

        public static readonly Type SetterType = typeof(ICombatStyle);

        public static readonly Type CommonType = typeof(CombatStyleCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CombatStyle";

        public const string Name = "CombatStyle";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DODGEPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.DodgePercentChance;
                case "LEFTRIGHTPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.LeftRightPercentChance;
                case "DODGELEFTRIGHTTIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.DodgeLeftRightTimerMin;
                case "DODGELEFTRIGHTTIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.DodgeLeftRightTimerMax;
                case "DODGEFORWARDTIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.DodgeForwardTimerMin;
                case "DODGEFORWARDTIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.DodgeForwardTimerMax;
                case "DODGEBACKTIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.DodgeBackTimerMin;
                case "DODGEBACKTIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.DodgeBackTimerMax;
                case "IDLETIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.IdleTimerMin;
                case "IDLETIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.IdleTimerMax;
                case "BLOCKPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.BlockPercentChance;
                case "ATTACKPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.AttackPercentChance;
                case "RECOILSTAGGERBONUSTOATTACK":
                    return (ushort)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack;
                case "UNCONSCIOUSBONUSTOATTACK":
                    return (ushort)CombatStyle_FieldIndex.UnconsciousBonusToAttack;
                case "HANDTOHANDBONUSTOATTACK":
                    return (ushort)CombatStyle_FieldIndex.HandToHandBonusToAttack;
                case "POWERATTACKPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackPercentChance;
                case "RECOILSTAGGERBONUSTOPOWERATTACK":
                    return (ushort)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack;
                case "UNCONSCIOUSBONUSTOPOWERATTACK":
                    return (ushort)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack;
                case "POWERATTACKNORMAL":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackNormal;
                case "POWERATTACKFORWARD":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackForward;
                case "POWERATTACKBACK":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackBack;
                case "POWERATTACKLEFT":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackLeft;
                case "POWERATTACKRIGHT":
                    return (ushort)CombatStyle_FieldIndex.PowerAttackRight;
                case "HOLDTIMERMIN":
                    return (ushort)CombatStyle_FieldIndex.HoldTimerMin;
                case "HOLDTIMERMAX":
                    return (ushort)CombatStyle_FieldIndex.HoldTimerMax;
                case "FLAGS":
                    return (ushort)CombatStyle_FieldIndex.Flags;
                case "ACROBATICDODGEPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.AcrobaticDodgePercentChance;
                case "RANGEMULTOPTIMAL":
                    return (ushort)CombatStyle_FieldIndex.RangeMultOptimal;
                case "RANGEMULTMAX":
                    return (ushort)CombatStyle_FieldIndex.RangeMultMax;
                case "SWITCHDISTANCEMELEE":
                    return (ushort)CombatStyle_FieldIndex.SwitchDistanceMelee;
                case "SWITCHDISTANCERANGED":
                    return (ushort)CombatStyle_FieldIndex.SwitchDistanceRanged;
                case "BUFFSTANDOFFDISTANCE":
                    return (ushort)CombatStyle_FieldIndex.BuffStandoffDistance;
                case "RANGEDSTANDOFFDISTANCE":
                    return (ushort)CombatStyle_FieldIndex.RangedStandoffDistance;
                case "GROUPSTANDOFFDISTANCE":
                    return (ushort)CombatStyle_FieldIndex.GroupStandoffDistance;
                case "RUSHINGATTACKPERCENTCHANCE":
                    return (ushort)CombatStyle_FieldIndex.RushingAttackPercentChance;
                case "RUSHINGATTACKDISTANCEMULT":
                    return (ushort)CombatStyle_FieldIndex.RushingAttackDistanceMult;
                case "ADVANCED":
                    return (ushort)CombatStyle_FieldIndex.Advanced;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.Advanced:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.Advanced:
                    return true;
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.Advanced:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    return "DodgePercentChance";
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    return "LeftRightPercentChance";
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    return "DodgeLeftRightTimerMin";
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    return "DodgeLeftRightTimerMax";
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    return "DodgeForwardTimerMin";
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    return "DodgeForwardTimerMax";
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    return "DodgeBackTimerMin";
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    return "DodgeBackTimerMax";
                case CombatStyle_FieldIndex.IdleTimerMin:
                    return "IdleTimerMin";
                case CombatStyle_FieldIndex.IdleTimerMax:
                    return "IdleTimerMax";
                case CombatStyle_FieldIndex.BlockPercentChance:
                    return "BlockPercentChance";
                case CombatStyle_FieldIndex.AttackPercentChance:
                    return "AttackPercentChance";
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    return "RecoilStaggerBonusToAttack";
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    return "UnconsciousBonusToAttack";
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    return "HandToHandBonusToAttack";
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    return "PowerAttackPercentChance";
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    return "RecoilStaggerBonusToPowerAttack";
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    return "UnconsciousBonusToPowerAttack";
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    return "PowerAttackNormal";
                case CombatStyle_FieldIndex.PowerAttackForward:
                    return "PowerAttackForward";
                case CombatStyle_FieldIndex.PowerAttackBack:
                    return "PowerAttackBack";
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    return "PowerAttackLeft";
                case CombatStyle_FieldIndex.PowerAttackRight:
                    return "PowerAttackRight";
                case CombatStyle_FieldIndex.HoldTimerMin:
                    return "HoldTimerMin";
                case CombatStyle_FieldIndex.HoldTimerMax:
                    return "HoldTimerMax";
                case CombatStyle_FieldIndex.Flags:
                    return "Flags";
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    return "AcrobaticDodgePercentChance";
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    return "RangeMultOptimal";
                case CombatStyle_FieldIndex.RangeMultMax:
                    return "RangeMultMax";
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    return "SwitchDistanceMelee";
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    return "SwitchDistanceRanged";
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    return "BuffStandoffDistance";
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    return "RangedStandoffDistance";
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    return "GroupStandoffDistance";
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    return "RushingAttackPercentChance";
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return "RushingAttackDistanceMult";
                case CombatStyle_FieldIndex.Advanced:
                    return "Advanced";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.Advanced:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                case CombatStyle_FieldIndex.Advanced:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.IdleTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.IdleTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.BlockPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.AttackPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    return typeof(Single);
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.PowerAttackForward:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.PowerAttackBack:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.PowerAttackRight:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.HoldTimerMin:
                    return typeof(Single);
                case CombatStyle_FieldIndex.HoldTimerMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.Flags:
                    return typeof(CombatStyle.Flag);
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    return typeof(Single);
                case CombatStyle_FieldIndex.RangeMultMax:
                    return typeof(Single);
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    return typeof(Single);
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    return typeof(Single);
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    return typeof(Single);
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    return typeof(Single);
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    return typeof(Single);
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    return typeof(Byte);
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return typeof(Single);
                case CombatStyle_FieldIndex.Advanced:
                    return typeof(CombatStyleAdvanced);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType CSTD_HEADER = new RecordType("CSTD");
        public static readonly RecordType CSAD_HEADER = new RecordType("CSAD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CSTY_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CombatStyleCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICombatStyle item,
            ICombatStyleGetter rhs,
            ICombatStyleGetter def,
            ErrorMaskBuilder errorMask,
            CombatStyle_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.DodgePercentChance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgePercentChance);
                try
                {
                    item.DodgePercentChance = rhs.DodgePercentChance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LeftRightPercentChance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.LeftRightPercentChance);
                try
                {
                    item.LeftRightPercentChance = rhs.LeftRightPercentChance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeLeftRightTimerMin ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin);
                try
                {
                    item.DodgeLeftRightTimerMin = rhs.DodgeLeftRightTimerMin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeLeftRightTimerMax ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax);
                try
                {
                    item.DodgeLeftRightTimerMax = rhs.DodgeLeftRightTimerMax;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeForwardTimerMin ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeForwardTimerMin);
                try
                {
                    item.DodgeForwardTimerMin = rhs.DodgeForwardTimerMin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeForwardTimerMax ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeForwardTimerMax);
                try
                {
                    item.DodgeForwardTimerMax = rhs.DodgeForwardTimerMax;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeBackTimerMin ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeBackTimerMin);
                try
                {
                    item.DodgeBackTimerMin = rhs.DodgeBackTimerMin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DodgeBackTimerMax ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.DodgeBackTimerMax);
                try
                {
                    item.DodgeBackTimerMax = rhs.DodgeBackTimerMax;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.IdleTimerMin ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.IdleTimerMin);
                try
                {
                    item.IdleTimerMin = rhs.IdleTimerMin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.IdleTimerMax ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.IdleTimerMax);
                try
                {
                    item.IdleTimerMax = rhs.IdleTimerMax;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BlockPercentChance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.BlockPercentChance);
                try
                {
                    item.BlockPercentChance = rhs.BlockPercentChance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AttackPercentChance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.AttackPercentChance);
                try
                {
                    item.AttackPercentChance = rhs.AttackPercentChance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RecoilStaggerBonusToAttack ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack);
                try
                {
                    item.RecoilStaggerBonusToAttack = rhs.RecoilStaggerBonusToAttack;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.UnconsciousBonusToAttack ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.UnconsciousBonusToAttack);
                try
                {
                    item.UnconsciousBonusToAttack = rhs.UnconsciousBonusToAttack;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HandToHandBonusToAttack ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.HandToHandBonusToAttack);
                try
                {
                    item.HandToHandBonusToAttack = rhs.HandToHandBonusToAttack;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PowerAttackPercentChance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackPercentChance);
                try
                {
                    item.PowerAttackPercentChance = rhs.PowerAttackPercentChance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RecoilStaggerBonusToPowerAttack ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack);
                try
                {
                    item.RecoilStaggerBonusToPowerAttack = rhs.RecoilStaggerBonusToPowerAttack;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.UnconsciousBonusToPowerAttack ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack);
                try
                {
                    item.UnconsciousBonusToPowerAttack = rhs.UnconsciousBonusToPowerAttack;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PowerAttackNormal ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackNormal);
                try
                {
                    item.PowerAttackNormal = rhs.PowerAttackNormal;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PowerAttackForward ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackForward);
                try
                {
                    item.PowerAttackForward = rhs.PowerAttackForward;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PowerAttackBack ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackBack);
                try
                {
                    item.PowerAttackBack = rhs.PowerAttackBack;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PowerAttackLeft ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackLeft);
                try
                {
                    item.PowerAttackLeft = rhs.PowerAttackLeft;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PowerAttackRight ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.PowerAttackRight);
                try
                {
                    item.PowerAttackRight = rhs.PowerAttackRight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HoldTimerMin ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.HoldTimerMin);
                try
                {
                    item.HoldTimerMin = rhs.HoldTimerMin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HoldTimerMax ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.HoldTimerMax);
                try
                {
                    item.HoldTimerMax = rhs.HoldTimerMax;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AcrobaticDodgePercentChance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance);
                try
                {
                    item.AcrobaticDodgePercentChance = rhs.AcrobaticDodgePercentChance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RangeMultOptimal ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangeMultOptimal);
                try
                {
                    item.RangeMultOptimal = rhs.RangeMultOptimal;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RangeMultMax ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangeMultMax);
                try
                {
                    item.RangeMultMax = rhs.RangeMultMax;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SwitchDistanceMelee ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.SwitchDistanceMelee);
                try
                {
                    item.SwitchDistanceMelee = rhs.SwitchDistanceMelee;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SwitchDistanceRanged ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.SwitchDistanceRanged);
                try
                {
                    item.SwitchDistanceRanged = rhs.SwitchDistanceRanged;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BuffStandoffDistance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.BuffStandoffDistance);
                try
                {
                    item.BuffStandoffDistance = rhs.BuffStandoffDistance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RangedStandoffDistance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.RangedStandoffDistance);
                try
                {
                    item.RangedStandoffDistance = rhs.RangedStandoffDistance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GroupStandoffDistance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.GroupStandoffDistance);
                try
                {
                    item.GroupStandoffDistance = rhs.GroupStandoffDistance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RushingAttackPercentChance ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.RushingAttackPercentChance);
                try
                {
                    item.RushingAttackPercentChance = rhs.RushingAttackPercentChance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RushingAttackDistanceMult ?? true)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.RushingAttackDistanceMult);
                try
                {
                    item.RushingAttackDistanceMult = rhs.RushingAttackDistanceMult;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Advanced.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.Advanced);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Advanced,
                        rhsHasBeenSet: rhs.Advanced_IsSet,
                        defItem: def?.Advanced,
                        defHasBeenSet: def?.Advanced_IsSet ?? false,
                        outRhsItem: out var rhsAdvancedItem,
                        outDefItem: out var defAdvancedItem))
                    {
                        switch (copyMask?.Advanced.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Advanced = rhsAdvancedItem;
                                break;
                            case CopyOption.CopyIn:
                                CombatStyleAdvancedCommon.CopyFieldsFrom(
                                    item: item.Advanced,
                                    rhs: rhs.Advanced,
                                    def: def?.Advanced,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Advanced.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.Advanced = CombatStyleAdvanced.Copy(
                                    rhsAdvancedItem,
                                    copyMask?.Advanced?.Specific,
                                    def: defAdvancedItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Advanced?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Advanced_Set(
                            item: default(CombatStyleAdvanced),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICombatStyle obj,
            NotifyingFireParameters cmds = null)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case CombatStyle_FieldIndex.Advanced:
                    obj.Advanced_IsSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICombatStyle obj,
            NotifyingUnsetParameters cmds = null)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    obj.DodgePercentChance = default(Byte);
                    break;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    obj.LeftRightPercentChance = default(Byte);
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    obj.DodgeLeftRightTimerMin = default(Single);
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    obj.DodgeLeftRightTimerMax = default(Single);
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    obj.DodgeForwardTimerMin = default(Single);
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    obj.DodgeForwardTimerMax = default(Single);
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    obj.DodgeBackTimerMin = default(Single);
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    obj.DodgeBackTimerMax = default(Single);
                    break;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    obj.IdleTimerMin = default(Single);
                    break;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    obj.IdleTimerMax = default(Single);
                    break;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    obj.BlockPercentChance = default(Byte);
                    break;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    obj.AttackPercentChance = default(Byte);
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    obj.RecoilStaggerBonusToAttack = default(Single);
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    obj.UnconsciousBonusToAttack = default(Single);
                    break;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    obj.HandToHandBonusToAttack = default(Single);
                    break;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    obj.PowerAttackPercentChance = default(Byte);
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    obj.RecoilStaggerBonusToPowerAttack = default(Single);
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    obj.UnconsciousBonusToPowerAttack = default(Single);
                    break;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    obj.PowerAttackNormal = default(Byte);
                    break;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    obj.PowerAttackForward = default(Byte);
                    break;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    obj.PowerAttackBack = default(Byte);
                    break;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    obj.PowerAttackLeft = default(Byte);
                    break;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    obj.PowerAttackRight = default(Byte);
                    break;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    obj.HoldTimerMin = default(Single);
                    break;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    obj.HoldTimerMax = default(Single);
                    break;
                case CombatStyle_FieldIndex.Flags:
                    obj.Flags = default(CombatStyle.Flag);
                    break;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    obj.AcrobaticDodgePercentChance = default(Byte);
                    break;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    obj.RangeMultOptimal = default(Single);
                    break;
                case CombatStyle_FieldIndex.RangeMultMax:
                    obj.RangeMultMax = default(Single);
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    obj.SwitchDistanceMelee = default(Single);
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    obj.SwitchDistanceRanged = default(Single);
                    break;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    obj.BuffStandoffDistance = default(Single);
                    break;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    obj.RangedStandoffDistance = default(Single);
                    break;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    obj.GroupStandoffDistance = default(Single);
                    break;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    obj.RushingAttackPercentChance = default(Byte);
                    break;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    obj.RushingAttackDistanceMult = default(Single);
                    break;
                case CombatStyle_FieldIndex.Advanced:
                    obj.Advanced_Unset();
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICombatStyle obj)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                case CombatStyle_FieldIndex.IdleTimerMin:
                case CombatStyle_FieldIndex.IdleTimerMax:
                case CombatStyle_FieldIndex.BlockPercentChance:
                case CombatStyle_FieldIndex.AttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                case CombatStyle_FieldIndex.PowerAttackNormal:
                case CombatStyle_FieldIndex.PowerAttackForward:
                case CombatStyle_FieldIndex.PowerAttackBack:
                case CombatStyle_FieldIndex.PowerAttackLeft:
                case CombatStyle_FieldIndex.PowerAttackRight:
                case CombatStyle_FieldIndex.HoldTimerMin:
                case CombatStyle_FieldIndex.HoldTimerMax:
                case CombatStyle_FieldIndex.Flags:
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                case CombatStyle_FieldIndex.RangeMultOptimal:
                case CombatStyle_FieldIndex.RangeMultMax:
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return true;
                case CombatStyle_FieldIndex.Advanced:
                    return obj.Advanced_IsSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ICombatStyleGetter obj)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    return obj.DodgePercentChance;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    return obj.LeftRightPercentChance;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    return obj.DodgeLeftRightTimerMin;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    return obj.DodgeLeftRightTimerMax;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    return obj.DodgeForwardTimerMin;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    return obj.DodgeForwardTimerMax;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    return obj.DodgeBackTimerMin;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    return obj.DodgeBackTimerMax;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    return obj.IdleTimerMin;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    return obj.IdleTimerMax;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    return obj.BlockPercentChance;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    return obj.AttackPercentChance;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    return obj.RecoilStaggerBonusToAttack;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    return obj.UnconsciousBonusToAttack;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    return obj.HandToHandBonusToAttack;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    return obj.PowerAttackPercentChance;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    return obj.RecoilStaggerBonusToPowerAttack;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    return obj.UnconsciousBonusToPowerAttack;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    return obj.PowerAttackNormal;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    return obj.PowerAttackForward;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    return obj.PowerAttackBack;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    return obj.PowerAttackLeft;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    return obj.PowerAttackRight;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    return obj.HoldTimerMin;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    return obj.HoldTimerMax;
                case CombatStyle_FieldIndex.Flags:
                    return obj.Flags;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    return obj.AcrobaticDodgePercentChance;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    return obj.RangeMultOptimal;
                case CombatStyle_FieldIndex.RangeMultMax:
                    return obj.RangeMultMax;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    return obj.SwitchDistanceMelee;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    return obj.SwitchDistanceRanged;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    return obj.BuffStandoffDistance;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    return obj.RangedStandoffDistance;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    return obj.GroupStandoffDistance;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    return obj.RushingAttackPercentChance;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return obj.RushingAttackDistanceMult;
                case CombatStyle_FieldIndex.Advanced:
                    return obj.Advanced;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ICombatStyle item,
            NotifyingUnsetParameters cmds = null)
        {
            item.DodgePercentChance = default(Byte);
            item.LeftRightPercentChance = default(Byte);
            item.DodgeLeftRightTimerMin = default(Single);
            item.DodgeLeftRightTimerMax = default(Single);
            item.DodgeForwardTimerMin = default(Single);
            item.DodgeForwardTimerMax = default(Single);
            item.DodgeBackTimerMin = default(Single);
            item.DodgeBackTimerMax = default(Single);
            item.IdleTimerMin = default(Single);
            item.IdleTimerMax = default(Single);
            item.BlockPercentChance = default(Byte);
            item.AttackPercentChance = default(Byte);
            item.RecoilStaggerBonusToAttack = default(Single);
            item.UnconsciousBonusToAttack = default(Single);
            item.HandToHandBonusToAttack = default(Single);
            item.PowerAttackPercentChance = default(Byte);
            item.RecoilStaggerBonusToPowerAttack = default(Single);
            item.UnconsciousBonusToPowerAttack = default(Single);
            item.PowerAttackNormal = default(Byte);
            item.PowerAttackForward = default(Byte);
            item.PowerAttackBack = default(Byte);
            item.PowerAttackLeft = default(Byte);
            item.PowerAttackRight = default(Byte);
            item.HoldTimerMin = default(Single);
            item.HoldTimerMax = default(Single);
            item.Flags = default(CombatStyle.Flag);
            item.AcrobaticDodgePercentChance = default(Byte);
            item.RangeMultOptimal = default(Single);
            item.RangeMultMax = default(Single);
            item.SwitchDistanceMelee = default(Single);
            item.SwitchDistanceRanged = default(Single);
            item.BuffStandoffDistance = default(Single);
            item.RangedStandoffDistance = default(Single);
            item.GroupStandoffDistance = default(Single);
            item.RushingAttackPercentChance = default(Byte);
            item.RushingAttackDistanceMult = default(Single);
            item.Advanced_Unset();
        }

        public static CombatStyle_Mask<bool> GetEqualsMask(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs)
        {
            var ret = new CombatStyle_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            CombatStyle_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.DodgePercentChance = item.DodgePercentChance == rhs.DodgePercentChance;
            ret.LeftRightPercentChance = item.LeftRightPercentChance == rhs.LeftRightPercentChance;
            ret.DodgeLeftRightTimerMin = item.DodgeLeftRightTimerMin == rhs.DodgeLeftRightTimerMin;
            ret.DodgeLeftRightTimerMax = item.DodgeLeftRightTimerMax == rhs.DodgeLeftRightTimerMax;
            ret.DodgeForwardTimerMin = item.DodgeForwardTimerMin == rhs.DodgeForwardTimerMin;
            ret.DodgeForwardTimerMax = item.DodgeForwardTimerMax == rhs.DodgeForwardTimerMax;
            ret.DodgeBackTimerMin = item.DodgeBackTimerMin == rhs.DodgeBackTimerMin;
            ret.DodgeBackTimerMax = item.DodgeBackTimerMax == rhs.DodgeBackTimerMax;
            ret.IdleTimerMin = item.IdleTimerMin == rhs.IdleTimerMin;
            ret.IdleTimerMax = item.IdleTimerMax == rhs.IdleTimerMax;
            ret.BlockPercentChance = item.BlockPercentChance == rhs.BlockPercentChance;
            ret.AttackPercentChance = item.AttackPercentChance == rhs.AttackPercentChance;
            ret.RecoilStaggerBonusToAttack = item.RecoilStaggerBonusToAttack == rhs.RecoilStaggerBonusToAttack;
            ret.UnconsciousBonusToAttack = item.UnconsciousBonusToAttack == rhs.UnconsciousBonusToAttack;
            ret.HandToHandBonusToAttack = item.HandToHandBonusToAttack == rhs.HandToHandBonusToAttack;
            ret.PowerAttackPercentChance = item.PowerAttackPercentChance == rhs.PowerAttackPercentChance;
            ret.RecoilStaggerBonusToPowerAttack = item.RecoilStaggerBonusToPowerAttack == rhs.RecoilStaggerBonusToPowerAttack;
            ret.UnconsciousBonusToPowerAttack = item.UnconsciousBonusToPowerAttack == rhs.UnconsciousBonusToPowerAttack;
            ret.PowerAttackNormal = item.PowerAttackNormal == rhs.PowerAttackNormal;
            ret.PowerAttackForward = item.PowerAttackForward == rhs.PowerAttackForward;
            ret.PowerAttackBack = item.PowerAttackBack == rhs.PowerAttackBack;
            ret.PowerAttackLeft = item.PowerAttackLeft == rhs.PowerAttackLeft;
            ret.PowerAttackRight = item.PowerAttackRight == rhs.PowerAttackRight;
            ret.HoldTimerMin = item.HoldTimerMin == rhs.HoldTimerMin;
            ret.HoldTimerMax = item.HoldTimerMax == rhs.HoldTimerMax;
            ret.Flags = item.Flags == rhs.Flags;
            ret.AcrobaticDodgePercentChance = item.AcrobaticDodgePercentChance == rhs.AcrobaticDodgePercentChance;
            ret.RangeMultOptimal = item.RangeMultOptimal == rhs.RangeMultOptimal;
            ret.RangeMultMax = item.RangeMultMax == rhs.RangeMultMax;
            ret.SwitchDistanceMelee = item.SwitchDistanceMelee == rhs.SwitchDistanceMelee;
            ret.SwitchDistanceRanged = item.SwitchDistanceRanged == rhs.SwitchDistanceRanged;
            ret.BuffStandoffDistance = item.BuffStandoffDistance == rhs.BuffStandoffDistance;
            ret.RangedStandoffDistance = item.RangedStandoffDistance == rhs.RangedStandoffDistance;
            ret.GroupStandoffDistance = item.GroupStandoffDistance == rhs.GroupStandoffDistance;
            ret.RushingAttackPercentChance = item.RushingAttackPercentChance == rhs.RushingAttackPercentChance;
            ret.RushingAttackDistanceMult = item.RushingAttackDistanceMult == rhs.RushingAttackDistanceMult;
            ret.Advanced = IHasBeenSetExt.LoquiEqualsHelper(item.Advanced_IsSet, rhs.Advanced_IsSet, item.Advanced, rhs.Advanced, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ICombatStyleGetter item,
            string name = null,
            CombatStyle_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICombatStyleGetter item,
            FileGeneration fg,
            string name = null,
            CombatStyle_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CombatStyle)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CombatStyle)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DodgePercentChance ?? true)
                {
                    fg.AppendLine($"DodgePercentChance => {item.DodgePercentChance}");
                }
                if (printMask?.LeftRightPercentChance ?? true)
                {
                    fg.AppendLine($"LeftRightPercentChance => {item.LeftRightPercentChance}");
                }
                if (printMask?.DodgeLeftRightTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeLeftRightTimerMin => {item.DodgeLeftRightTimerMin}");
                }
                if (printMask?.DodgeLeftRightTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeLeftRightTimerMax => {item.DodgeLeftRightTimerMax}");
                }
                if (printMask?.DodgeForwardTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeForwardTimerMin => {item.DodgeForwardTimerMin}");
                }
                if (printMask?.DodgeForwardTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeForwardTimerMax => {item.DodgeForwardTimerMax}");
                }
                if (printMask?.DodgeBackTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeBackTimerMin => {item.DodgeBackTimerMin}");
                }
                if (printMask?.DodgeBackTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeBackTimerMax => {item.DodgeBackTimerMax}");
                }
                if (printMask?.IdleTimerMin ?? true)
                {
                    fg.AppendLine($"IdleTimerMin => {item.IdleTimerMin}");
                }
                if (printMask?.IdleTimerMax ?? true)
                {
                    fg.AppendLine($"IdleTimerMax => {item.IdleTimerMax}");
                }
                if (printMask?.BlockPercentChance ?? true)
                {
                    fg.AppendLine($"BlockPercentChance => {item.BlockPercentChance}");
                }
                if (printMask?.AttackPercentChance ?? true)
                {
                    fg.AppendLine($"AttackPercentChance => {item.AttackPercentChance}");
                }
                if (printMask?.RecoilStaggerBonusToAttack ?? true)
                {
                    fg.AppendLine($"RecoilStaggerBonusToAttack => {item.RecoilStaggerBonusToAttack}");
                }
                if (printMask?.UnconsciousBonusToAttack ?? true)
                {
                    fg.AppendLine($"UnconsciousBonusToAttack => {item.UnconsciousBonusToAttack}");
                }
                if (printMask?.HandToHandBonusToAttack ?? true)
                {
                    fg.AppendLine($"HandToHandBonusToAttack => {item.HandToHandBonusToAttack}");
                }
                if (printMask?.PowerAttackPercentChance ?? true)
                {
                    fg.AppendLine($"PowerAttackPercentChance => {item.PowerAttackPercentChance}");
                }
                if (printMask?.RecoilStaggerBonusToPowerAttack ?? true)
                {
                    fg.AppendLine($"RecoilStaggerBonusToPowerAttack => {item.RecoilStaggerBonusToPowerAttack}");
                }
                if (printMask?.UnconsciousBonusToPowerAttack ?? true)
                {
                    fg.AppendLine($"UnconsciousBonusToPowerAttack => {item.UnconsciousBonusToPowerAttack}");
                }
                if (printMask?.PowerAttackNormal ?? true)
                {
                    fg.AppendLine($"PowerAttackNormal => {item.PowerAttackNormal}");
                }
                if (printMask?.PowerAttackForward ?? true)
                {
                    fg.AppendLine($"PowerAttackForward => {item.PowerAttackForward}");
                }
                if (printMask?.PowerAttackBack ?? true)
                {
                    fg.AppendLine($"PowerAttackBack => {item.PowerAttackBack}");
                }
                if (printMask?.PowerAttackLeft ?? true)
                {
                    fg.AppendLine($"PowerAttackLeft => {item.PowerAttackLeft}");
                }
                if (printMask?.PowerAttackRight ?? true)
                {
                    fg.AppendLine($"PowerAttackRight => {item.PowerAttackRight}");
                }
                if (printMask?.HoldTimerMin ?? true)
                {
                    fg.AppendLine($"HoldTimerMin => {item.HoldTimerMin}");
                }
                if (printMask?.HoldTimerMax ?? true)
                {
                    fg.AppendLine($"HoldTimerMax => {item.HoldTimerMax}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.AcrobaticDodgePercentChance ?? true)
                {
                    fg.AppendLine($"AcrobaticDodgePercentChance => {item.AcrobaticDodgePercentChance}");
                }
                if (printMask?.RangeMultOptimal ?? true)
                {
                    fg.AppendLine($"RangeMultOptimal => {item.RangeMultOptimal}");
                }
                if (printMask?.RangeMultMax ?? true)
                {
                    fg.AppendLine($"RangeMultMax => {item.RangeMultMax}");
                }
                if (printMask?.SwitchDistanceMelee ?? true)
                {
                    fg.AppendLine($"SwitchDistanceMelee => {item.SwitchDistanceMelee}");
                }
                if (printMask?.SwitchDistanceRanged ?? true)
                {
                    fg.AppendLine($"SwitchDistanceRanged => {item.SwitchDistanceRanged}");
                }
                if (printMask?.BuffStandoffDistance ?? true)
                {
                    fg.AppendLine($"BuffStandoffDistance => {item.BuffStandoffDistance}");
                }
                if (printMask?.RangedStandoffDistance ?? true)
                {
                    fg.AppendLine($"RangedStandoffDistance => {item.RangedStandoffDistance}");
                }
                if (printMask?.GroupStandoffDistance ?? true)
                {
                    fg.AppendLine($"GroupStandoffDistance => {item.GroupStandoffDistance}");
                }
                if (printMask?.RushingAttackPercentChance ?? true)
                {
                    fg.AppendLine($"RushingAttackPercentChance => {item.RushingAttackPercentChance}");
                }
                if (printMask?.RushingAttackDistanceMult ?? true)
                {
                    fg.AppendLine($"RushingAttackDistanceMult => {item.RushingAttackDistanceMult}");
                }
                if (printMask?.Advanced?.Overall ?? true)
                {
                    item.Advanced?.ToString(fg, "Advanced");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICombatStyleGetter item,
            CombatStyle_Mask<bool?> checkMask)
        {
            if (checkMask.Advanced.Overall.HasValue && checkMask.Advanced.Overall.Value != item.Advanced_IsSet) return false;
            if (checkMask.Advanced.Specific != null && (item.Advanced == null || !item.Advanced.HasBeenSet(checkMask.Advanced.Specific))) return false;
            return true;
        }

        public static CombatStyle_Mask<bool> GetHasBeenSetMask(ICombatStyleGetter item)
        {
            var ret = new CombatStyle_Mask<bool>();
            ret.DodgePercentChance = true;
            ret.LeftRightPercentChance = true;
            ret.DodgeLeftRightTimerMin = true;
            ret.DodgeLeftRightTimerMax = true;
            ret.DodgeForwardTimerMin = true;
            ret.DodgeForwardTimerMax = true;
            ret.DodgeBackTimerMin = true;
            ret.DodgeBackTimerMax = true;
            ret.IdleTimerMin = true;
            ret.IdleTimerMax = true;
            ret.BlockPercentChance = true;
            ret.AttackPercentChance = true;
            ret.RecoilStaggerBonusToAttack = true;
            ret.UnconsciousBonusToAttack = true;
            ret.HandToHandBonusToAttack = true;
            ret.PowerAttackPercentChance = true;
            ret.RecoilStaggerBonusToPowerAttack = true;
            ret.UnconsciousBonusToPowerAttack = true;
            ret.PowerAttackNormal = true;
            ret.PowerAttackForward = true;
            ret.PowerAttackBack = true;
            ret.PowerAttackLeft = true;
            ret.PowerAttackRight = true;
            ret.HoldTimerMin = true;
            ret.HoldTimerMax = true;
            ret.Flags = true;
            ret.AcrobaticDodgePercentChance = true;
            ret.RangeMultOptimal = true;
            ret.RangeMultMax = true;
            ret.SwitchDistanceMelee = true;
            ret.SwitchDistanceRanged = true;
            ret.BuffStandoffDistance = true;
            ret.RangedStandoffDistance = true;
            ret.GroupStandoffDistance = true;
            ret.RushingAttackPercentChance = true;
            ret.RushingAttackDistanceMult = true;
            ret.Advanced = new MaskItem<bool, CombatStyleAdvanced_Mask<bool>>(item.Advanced_IsSet, CombatStyleAdvancedCommon.GetHasBeenSetMask(item.Advanced));
            return ret;
        }

        public static CombatStyle_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static CombatStyle_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            CombatStyle item,
            bool doMasks,
            out CombatStyle_ErrorMask errorMask,
            CombatStyle_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            CombatStyle item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CombatStyle");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CombatStyle");
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgePercentChance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DodgePercentChance),
                    item: item.DodgePercentChance,
                    fieldIndex: (int)CombatStyle_FieldIndex.DodgePercentChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LeftRightPercentChance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.LeftRightPercentChance),
                    item: item.LeftRightPercentChance,
                    fieldIndex: (int)CombatStyle_FieldIndex.LeftRightPercentChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DodgeLeftRightTimerMin),
                    item: item.DodgeLeftRightTimerMin,
                    fieldIndex: (int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DodgeLeftRightTimerMax),
                    item: item.DodgeLeftRightTimerMax,
                    fieldIndex: (int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeForwardTimerMin) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DodgeForwardTimerMin),
                    item: item.DodgeForwardTimerMin,
                    fieldIndex: (int)CombatStyle_FieldIndex.DodgeForwardTimerMin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeForwardTimerMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DodgeForwardTimerMax),
                    item: item.DodgeForwardTimerMax,
                    fieldIndex: (int)CombatStyle_FieldIndex.DodgeForwardTimerMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeBackTimerMin) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DodgeBackTimerMin),
                    item: item.DodgeBackTimerMin,
                    fieldIndex: (int)CombatStyle_FieldIndex.DodgeBackTimerMin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeBackTimerMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DodgeBackTimerMax),
                    item: item.DodgeBackTimerMax,
                    fieldIndex: (int)CombatStyle_FieldIndex.DodgeBackTimerMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.IdleTimerMin) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.IdleTimerMin),
                    item: item.IdleTimerMin,
                    fieldIndex: (int)CombatStyle_FieldIndex.IdleTimerMin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.IdleTimerMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.IdleTimerMax),
                    item: item.IdleTimerMax,
                    fieldIndex: (int)CombatStyle_FieldIndex.IdleTimerMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.BlockPercentChance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BlockPercentChance),
                    item: item.BlockPercentChance,
                    fieldIndex: (int)CombatStyle_FieldIndex.BlockPercentChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AttackPercentChance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.AttackPercentChance),
                    item: item.AttackPercentChance,
                    fieldIndex: (int)CombatStyle_FieldIndex.AttackPercentChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RecoilStaggerBonusToAttack),
                    item: item.RecoilStaggerBonusToAttack,
                    fieldIndex: (int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.UnconsciousBonusToAttack) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.UnconsciousBonusToAttack),
                    item: item.UnconsciousBonusToAttack,
                    fieldIndex: (int)CombatStyle_FieldIndex.UnconsciousBonusToAttack,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HandToHandBonusToAttack) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HandToHandBonusToAttack),
                    item: item.HandToHandBonusToAttack,
                    fieldIndex: (int)CombatStyle_FieldIndex.HandToHandBonusToAttack,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackPercentChance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PowerAttackPercentChance),
                    item: item.PowerAttackPercentChance,
                    fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackPercentChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RecoilStaggerBonusToPowerAttack),
                    item: item.RecoilStaggerBonusToPowerAttack,
                    fieldIndex: (int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.UnconsciousBonusToPowerAttack),
                    item: item.UnconsciousBonusToPowerAttack,
                    fieldIndex: (int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackNormal) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PowerAttackNormal),
                    item: item.PowerAttackNormal,
                    fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackNormal,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackForward) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PowerAttackForward),
                    item: item.PowerAttackForward,
                    fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackForward,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackBack) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PowerAttackBack),
                    item: item.PowerAttackBack,
                    fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackBack,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackLeft) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PowerAttackLeft),
                    item: item.PowerAttackLeft,
                    fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackLeft,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PowerAttackRight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PowerAttackRight),
                    item: item.PowerAttackRight,
                    fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackRight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoldTimerMin) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HoldTimerMin),
                    item: item.HoldTimerMin,
                    fieldIndex: (int)CombatStyle_FieldIndex.HoldTimerMin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoldTimerMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.HoldTimerMax),
                    item: item.HoldTimerMax,
                    fieldIndex: (int)CombatStyle_FieldIndex.HoldTimerMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<CombatStyle.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)CombatStyle_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.AcrobaticDodgePercentChance),
                    item: item.AcrobaticDodgePercentChance,
                    fieldIndex: (int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangeMultOptimal) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RangeMultOptimal),
                    item: item.RangeMultOptimal,
                    fieldIndex: (int)CombatStyle_FieldIndex.RangeMultOptimal,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangeMultMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RangeMultMax),
                    item: item.RangeMultMax,
                    fieldIndex: (int)CombatStyle_FieldIndex.RangeMultMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SwitchDistanceMelee) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SwitchDistanceMelee),
                    item: item.SwitchDistanceMelee,
                    fieldIndex: (int)CombatStyle_FieldIndex.SwitchDistanceMelee,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SwitchDistanceRanged) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SwitchDistanceRanged),
                    item: item.SwitchDistanceRanged,
                    fieldIndex: (int)CombatStyle_FieldIndex.SwitchDistanceRanged,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.BuffStandoffDistance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BuffStandoffDistance),
                    item: item.BuffStandoffDistance,
                    fieldIndex: (int)CombatStyle_FieldIndex.BuffStandoffDistance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedStandoffDistance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RangedStandoffDistance),
                    item: item.RangedStandoffDistance,
                    fieldIndex: (int)CombatStyle_FieldIndex.RangedStandoffDistance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroupStandoffDistance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.GroupStandoffDistance),
                    item: item.GroupStandoffDistance,
                    fieldIndex: (int)CombatStyle_FieldIndex.GroupStandoffDistance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RushingAttackPercentChance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RushingAttackPercentChance),
                    item: item.RushingAttackPercentChance,
                    fieldIndex: (int)CombatStyle_FieldIndex.RushingAttackPercentChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RushingAttackDistanceMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RushingAttackDistanceMult),
                    item: item.RushingAttackDistanceMult,
                    fieldIndex: (int)CombatStyle_FieldIndex.RushingAttackDistanceMult,
                    errorMask: errorMask);
            }
            if (item.Advanced_IsSet
                && (translationMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Advanced) ?? true))
            {
                LoquiXmlTranslation<CombatStyleAdvanced>.Instance.Write(
                    node: elem,
                    item: item.Advanced,
                    name: nameof(item.Advanced),
                    fieldIndex: (int)CombatStyle_FieldIndex.Advanced,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Advanced));
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            CombatStyle item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out CombatStyle_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                masterReferences: masterReferences,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = CombatStyle_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            CombatStyle item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: CombatStyle_Registration.CSTY_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            CombatStyle item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(CombatStyle_Registration.CSTD_HEADER)))
                {
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgePercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgePercentChance,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LeftRightPercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.LeftRightPercentChance,
                        errorMask: errorMask);
                    writer.WriteZeros(2);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeLeftRightTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeLeftRightTimerMin,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeLeftRightTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeLeftRightTimerMax,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeForwardTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeForwardTimerMin,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeForwardTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeForwardTimerMax,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeBackTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeBackTimerMin,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DodgeBackTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.DodgeBackTimerMax,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.IdleTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.IdleTimerMin,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.IdleTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.IdleTimerMax,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BlockPercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.BlockPercentChance,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.AttackPercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.AttackPercentChance,
                        errorMask: errorMask);
                    writer.WriteZeros(2);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RecoilStaggerBonusToAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.RecoilStaggerBonusToAttack,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.UnconsciousBonusToAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.UnconsciousBonusToAttack,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HandToHandBonusToAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.HandToHandBonusToAttack,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.PowerAttackPercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackPercentChance,
                        errorMask: errorMask);
                    writer.WriteZeros(3);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RecoilStaggerBonusToPowerAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.UnconsciousBonusToPowerAttack,
                        fieldIndex: (int)CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.PowerAttackNormal,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackNormal,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.PowerAttackForward,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackForward,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.PowerAttackBack,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackBack,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.PowerAttackLeft,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackLeft,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.PowerAttackRight,
                        fieldIndex: (int)CombatStyle_FieldIndex.PowerAttackRight,
                        errorMask: errorMask);
                    writer.WriteZeros(3);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HoldTimerMin,
                        fieldIndex: (int)CombatStyle_FieldIndex.HoldTimerMin,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HoldTimerMax,
                        fieldIndex: (int)CombatStyle_FieldIndex.HoldTimerMax,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<CombatStyle.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1,
                        fieldIndex: (int)CombatStyle_FieldIndex.Flags,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.AcrobaticDodgePercentChance,
                        fieldIndex: (int)CombatStyle_FieldIndex.AcrobaticDodgePercentChance,
                        errorMask: errorMask);
                    writer.WriteZeros(2);
                    if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.RangeMultOptimal,
                            fieldIndex: (int)CombatStyle_FieldIndex.RangeMultOptimal,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.RangeMultMax,
                            fieldIndex: (int)CombatStyle_FieldIndex.RangeMultMax,
                            errorMask: errorMask);
                        if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break1))
                        {
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.SwitchDistanceMelee,
                                fieldIndex: (int)CombatStyle_FieldIndex.SwitchDistanceMelee,
                                errorMask: errorMask);
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.SwitchDistanceRanged,
                                fieldIndex: (int)CombatStyle_FieldIndex.SwitchDistanceRanged,
                                errorMask: errorMask);
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.BuffStandoffDistance,
                                fieldIndex: (int)CombatStyle_FieldIndex.BuffStandoffDistance,
                                errorMask: errorMask);
                            if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break2))
                            {
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RangedStandoffDistance,
                                    fieldIndex: (int)CombatStyle_FieldIndex.RangedStandoffDistance,
                                    errorMask: errorMask);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.GroupStandoffDistance,
                                    fieldIndex: (int)CombatStyle_FieldIndex.GroupStandoffDistance,
                                    errorMask: errorMask);
                                if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break3))
                                {
                                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.RushingAttackPercentChance,
                                        fieldIndex: (int)CombatStyle_FieldIndex.RushingAttackPercentChance,
                                        errorMask: errorMask);
                                    writer.WriteZeros(3);
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.RushingAttackDistanceMult,
                                        fieldIndex: (int)CombatStyle_FieldIndex.RushingAttackDistanceMult,
                                        errorMask: errorMask);
                                    if (!item.CSTDDataTypeState.HasFlag(CombatStyle.CSTDDataType.Break4))
                                    {
                                        CombatStyle.WriteBinary_SecondaryFlags(
                                            writer: writer,
                                            item: item,
                                            masterReferences: masterReferences,
                                            errorMask: errorMask);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (item.Advanced_IsSet)
            {
                LoquiBinaryTranslation<CombatStyleAdvanced>.Instance.Write(
                    writer: writer,
                    item: item.Advanced,
                    fieldIndex: (int)CombatStyle_FieldIndex.Advanced,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class CombatStyle_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<CombatStyle_Mask<T>>
    {
        #region Ctors
        public CombatStyle_Mask()
        {
        }

        public CombatStyle_Mask(T initialValue)
        {
            this.DodgePercentChance = initialValue;
            this.LeftRightPercentChance = initialValue;
            this.DodgeLeftRightTimerMin = initialValue;
            this.DodgeLeftRightTimerMax = initialValue;
            this.DodgeForwardTimerMin = initialValue;
            this.DodgeForwardTimerMax = initialValue;
            this.DodgeBackTimerMin = initialValue;
            this.DodgeBackTimerMax = initialValue;
            this.IdleTimerMin = initialValue;
            this.IdleTimerMax = initialValue;
            this.BlockPercentChance = initialValue;
            this.AttackPercentChance = initialValue;
            this.RecoilStaggerBonusToAttack = initialValue;
            this.UnconsciousBonusToAttack = initialValue;
            this.HandToHandBonusToAttack = initialValue;
            this.PowerAttackPercentChance = initialValue;
            this.RecoilStaggerBonusToPowerAttack = initialValue;
            this.UnconsciousBonusToPowerAttack = initialValue;
            this.PowerAttackNormal = initialValue;
            this.PowerAttackForward = initialValue;
            this.PowerAttackBack = initialValue;
            this.PowerAttackLeft = initialValue;
            this.PowerAttackRight = initialValue;
            this.HoldTimerMin = initialValue;
            this.HoldTimerMax = initialValue;
            this.Flags = initialValue;
            this.AcrobaticDodgePercentChance = initialValue;
            this.RangeMultOptimal = initialValue;
            this.RangeMultMax = initialValue;
            this.SwitchDistanceMelee = initialValue;
            this.SwitchDistanceRanged = initialValue;
            this.BuffStandoffDistance = initialValue;
            this.RangedStandoffDistance = initialValue;
            this.GroupStandoffDistance = initialValue;
            this.RushingAttackPercentChance = initialValue;
            this.RushingAttackDistanceMult = initialValue;
            this.Advanced = new MaskItem<T, CombatStyleAdvanced_Mask<T>>(initialValue, new CombatStyleAdvanced_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T DodgePercentChance;
        public T LeftRightPercentChance;
        public T DodgeLeftRightTimerMin;
        public T DodgeLeftRightTimerMax;
        public T DodgeForwardTimerMin;
        public T DodgeForwardTimerMax;
        public T DodgeBackTimerMin;
        public T DodgeBackTimerMax;
        public T IdleTimerMin;
        public T IdleTimerMax;
        public T BlockPercentChance;
        public T AttackPercentChance;
        public T RecoilStaggerBonusToAttack;
        public T UnconsciousBonusToAttack;
        public T HandToHandBonusToAttack;
        public T PowerAttackPercentChance;
        public T RecoilStaggerBonusToPowerAttack;
        public T UnconsciousBonusToPowerAttack;
        public T PowerAttackNormal;
        public T PowerAttackForward;
        public T PowerAttackBack;
        public T PowerAttackLeft;
        public T PowerAttackRight;
        public T HoldTimerMin;
        public T HoldTimerMax;
        public T Flags;
        public T AcrobaticDodgePercentChance;
        public T RangeMultOptimal;
        public T RangeMultMax;
        public T SwitchDistanceMelee;
        public T SwitchDistanceRanged;
        public T BuffStandoffDistance;
        public T RangedStandoffDistance;
        public T GroupStandoffDistance;
        public T RushingAttackPercentChance;
        public T RushingAttackDistanceMult;
        public MaskItem<T, CombatStyleAdvanced_Mask<T>> Advanced { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CombatStyle_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CombatStyle_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.DodgePercentChance, rhs.DodgePercentChance)) return false;
            if (!object.Equals(this.LeftRightPercentChance, rhs.LeftRightPercentChance)) return false;
            if (!object.Equals(this.DodgeLeftRightTimerMin, rhs.DodgeLeftRightTimerMin)) return false;
            if (!object.Equals(this.DodgeLeftRightTimerMax, rhs.DodgeLeftRightTimerMax)) return false;
            if (!object.Equals(this.DodgeForwardTimerMin, rhs.DodgeForwardTimerMin)) return false;
            if (!object.Equals(this.DodgeForwardTimerMax, rhs.DodgeForwardTimerMax)) return false;
            if (!object.Equals(this.DodgeBackTimerMin, rhs.DodgeBackTimerMin)) return false;
            if (!object.Equals(this.DodgeBackTimerMax, rhs.DodgeBackTimerMax)) return false;
            if (!object.Equals(this.IdleTimerMin, rhs.IdleTimerMin)) return false;
            if (!object.Equals(this.IdleTimerMax, rhs.IdleTimerMax)) return false;
            if (!object.Equals(this.BlockPercentChance, rhs.BlockPercentChance)) return false;
            if (!object.Equals(this.AttackPercentChance, rhs.AttackPercentChance)) return false;
            if (!object.Equals(this.RecoilStaggerBonusToAttack, rhs.RecoilStaggerBonusToAttack)) return false;
            if (!object.Equals(this.UnconsciousBonusToAttack, rhs.UnconsciousBonusToAttack)) return false;
            if (!object.Equals(this.HandToHandBonusToAttack, rhs.HandToHandBonusToAttack)) return false;
            if (!object.Equals(this.PowerAttackPercentChance, rhs.PowerAttackPercentChance)) return false;
            if (!object.Equals(this.RecoilStaggerBonusToPowerAttack, rhs.RecoilStaggerBonusToPowerAttack)) return false;
            if (!object.Equals(this.UnconsciousBonusToPowerAttack, rhs.UnconsciousBonusToPowerAttack)) return false;
            if (!object.Equals(this.PowerAttackNormal, rhs.PowerAttackNormal)) return false;
            if (!object.Equals(this.PowerAttackForward, rhs.PowerAttackForward)) return false;
            if (!object.Equals(this.PowerAttackBack, rhs.PowerAttackBack)) return false;
            if (!object.Equals(this.PowerAttackLeft, rhs.PowerAttackLeft)) return false;
            if (!object.Equals(this.PowerAttackRight, rhs.PowerAttackRight)) return false;
            if (!object.Equals(this.HoldTimerMin, rhs.HoldTimerMin)) return false;
            if (!object.Equals(this.HoldTimerMax, rhs.HoldTimerMax)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.AcrobaticDodgePercentChance, rhs.AcrobaticDodgePercentChance)) return false;
            if (!object.Equals(this.RangeMultOptimal, rhs.RangeMultOptimal)) return false;
            if (!object.Equals(this.RangeMultMax, rhs.RangeMultMax)) return false;
            if (!object.Equals(this.SwitchDistanceMelee, rhs.SwitchDistanceMelee)) return false;
            if (!object.Equals(this.SwitchDistanceRanged, rhs.SwitchDistanceRanged)) return false;
            if (!object.Equals(this.BuffStandoffDistance, rhs.BuffStandoffDistance)) return false;
            if (!object.Equals(this.RangedStandoffDistance, rhs.RangedStandoffDistance)) return false;
            if (!object.Equals(this.GroupStandoffDistance, rhs.GroupStandoffDistance)) return false;
            if (!object.Equals(this.RushingAttackPercentChance, rhs.RushingAttackPercentChance)) return false;
            if (!object.Equals(this.RushingAttackDistanceMult, rhs.RushingAttackDistanceMult)) return false;
            if (!object.Equals(this.Advanced, rhs.Advanced)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.DodgePercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.LeftRightPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeLeftRightTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeLeftRightTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeForwardTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeForwardTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeBackTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.DodgeBackTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.IdleTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.IdleTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.BlockPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.RecoilStaggerBonusToAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.UnconsciousBonusToAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.HandToHandBonusToAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.RecoilStaggerBonusToPowerAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.UnconsciousBonusToPowerAttack?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackNormal?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackForward?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackBack?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackLeft?.GetHashCode());
            ret = ret.CombineHashCode(this.PowerAttackRight?.GetHashCode());
            ret = ret.CombineHashCode(this.HoldTimerMin?.GetHashCode());
            ret = ret.CombineHashCode(this.HoldTimerMax?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.AcrobaticDodgePercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeMultOptimal?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeMultMax?.GetHashCode());
            ret = ret.CombineHashCode(this.SwitchDistanceMelee?.GetHashCode());
            ret = ret.CombineHashCode(this.SwitchDistanceRanged?.GetHashCode());
            ret = ret.CombineHashCode(this.BuffStandoffDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.RangedStandoffDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.GroupStandoffDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.RushingAttackPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.RushingAttackDistanceMult?.GetHashCode());
            ret = ret.CombineHashCode(this.Advanced?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.DodgePercentChance)) return false;
            if (!eval(this.LeftRightPercentChance)) return false;
            if (!eval(this.DodgeLeftRightTimerMin)) return false;
            if (!eval(this.DodgeLeftRightTimerMax)) return false;
            if (!eval(this.DodgeForwardTimerMin)) return false;
            if (!eval(this.DodgeForwardTimerMax)) return false;
            if (!eval(this.DodgeBackTimerMin)) return false;
            if (!eval(this.DodgeBackTimerMax)) return false;
            if (!eval(this.IdleTimerMin)) return false;
            if (!eval(this.IdleTimerMax)) return false;
            if (!eval(this.BlockPercentChance)) return false;
            if (!eval(this.AttackPercentChance)) return false;
            if (!eval(this.RecoilStaggerBonusToAttack)) return false;
            if (!eval(this.UnconsciousBonusToAttack)) return false;
            if (!eval(this.HandToHandBonusToAttack)) return false;
            if (!eval(this.PowerAttackPercentChance)) return false;
            if (!eval(this.RecoilStaggerBonusToPowerAttack)) return false;
            if (!eval(this.UnconsciousBonusToPowerAttack)) return false;
            if (!eval(this.PowerAttackNormal)) return false;
            if (!eval(this.PowerAttackForward)) return false;
            if (!eval(this.PowerAttackBack)) return false;
            if (!eval(this.PowerAttackLeft)) return false;
            if (!eval(this.PowerAttackRight)) return false;
            if (!eval(this.HoldTimerMin)) return false;
            if (!eval(this.HoldTimerMax)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.AcrobaticDodgePercentChance)) return false;
            if (!eval(this.RangeMultOptimal)) return false;
            if (!eval(this.RangeMultMax)) return false;
            if (!eval(this.SwitchDistanceMelee)) return false;
            if (!eval(this.SwitchDistanceRanged)) return false;
            if (!eval(this.BuffStandoffDistance)) return false;
            if (!eval(this.RangedStandoffDistance)) return false;
            if (!eval(this.GroupStandoffDistance)) return false;
            if (!eval(this.RushingAttackPercentChance)) return false;
            if (!eval(this.RushingAttackDistanceMult)) return false;
            if (Advanced != null)
            {
                if (!eval(this.Advanced.Overall)) return false;
                if (this.Advanced.Specific != null && !this.Advanced.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new CombatStyle_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CombatStyle_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CombatStyle_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.DodgePercentChance = eval(this.DodgePercentChance);
            obj.LeftRightPercentChance = eval(this.LeftRightPercentChance);
            obj.DodgeLeftRightTimerMin = eval(this.DodgeLeftRightTimerMin);
            obj.DodgeLeftRightTimerMax = eval(this.DodgeLeftRightTimerMax);
            obj.DodgeForwardTimerMin = eval(this.DodgeForwardTimerMin);
            obj.DodgeForwardTimerMax = eval(this.DodgeForwardTimerMax);
            obj.DodgeBackTimerMin = eval(this.DodgeBackTimerMin);
            obj.DodgeBackTimerMax = eval(this.DodgeBackTimerMax);
            obj.IdleTimerMin = eval(this.IdleTimerMin);
            obj.IdleTimerMax = eval(this.IdleTimerMax);
            obj.BlockPercentChance = eval(this.BlockPercentChance);
            obj.AttackPercentChance = eval(this.AttackPercentChance);
            obj.RecoilStaggerBonusToAttack = eval(this.RecoilStaggerBonusToAttack);
            obj.UnconsciousBonusToAttack = eval(this.UnconsciousBonusToAttack);
            obj.HandToHandBonusToAttack = eval(this.HandToHandBonusToAttack);
            obj.PowerAttackPercentChance = eval(this.PowerAttackPercentChance);
            obj.RecoilStaggerBonusToPowerAttack = eval(this.RecoilStaggerBonusToPowerAttack);
            obj.UnconsciousBonusToPowerAttack = eval(this.UnconsciousBonusToPowerAttack);
            obj.PowerAttackNormal = eval(this.PowerAttackNormal);
            obj.PowerAttackForward = eval(this.PowerAttackForward);
            obj.PowerAttackBack = eval(this.PowerAttackBack);
            obj.PowerAttackLeft = eval(this.PowerAttackLeft);
            obj.PowerAttackRight = eval(this.PowerAttackRight);
            obj.HoldTimerMin = eval(this.HoldTimerMin);
            obj.HoldTimerMax = eval(this.HoldTimerMax);
            obj.Flags = eval(this.Flags);
            obj.AcrobaticDodgePercentChance = eval(this.AcrobaticDodgePercentChance);
            obj.RangeMultOptimal = eval(this.RangeMultOptimal);
            obj.RangeMultMax = eval(this.RangeMultMax);
            obj.SwitchDistanceMelee = eval(this.SwitchDistanceMelee);
            obj.SwitchDistanceRanged = eval(this.SwitchDistanceRanged);
            obj.BuffStandoffDistance = eval(this.BuffStandoffDistance);
            obj.RangedStandoffDistance = eval(this.RangedStandoffDistance);
            obj.GroupStandoffDistance = eval(this.GroupStandoffDistance);
            obj.RushingAttackPercentChance = eval(this.RushingAttackPercentChance);
            obj.RushingAttackDistanceMult = eval(this.RushingAttackDistanceMult);
            if (this.Advanced != null)
            {
                obj.Advanced = new MaskItem<R, CombatStyleAdvanced_Mask<R>>();
                obj.Advanced.Overall = eval(this.Advanced.Overall);
                if (this.Advanced.Specific != null)
                {
                    obj.Advanced.Specific = this.Advanced.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CombatStyle_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CombatStyle_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CombatStyle_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DodgePercentChance ?? true)
                {
                    fg.AppendLine($"DodgePercentChance => {DodgePercentChance}");
                }
                if (printMask?.LeftRightPercentChance ?? true)
                {
                    fg.AppendLine($"LeftRightPercentChance => {LeftRightPercentChance}");
                }
                if (printMask?.DodgeLeftRightTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeLeftRightTimerMin => {DodgeLeftRightTimerMin}");
                }
                if (printMask?.DodgeLeftRightTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeLeftRightTimerMax => {DodgeLeftRightTimerMax}");
                }
                if (printMask?.DodgeForwardTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeForwardTimerMin => {DodgeForwardTimerMin}");
                }
                if (printMask?.DodgeForwardTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeForwardTimerMax => {DodgeForwardTimerMax}");
                }
                if (printMask?.DodgeBackTimerMin ?? true)
                {
                    fg.AppendLine($"DodgeBackTimerMin => {DodgeBackTimerMin}");
                }
                if (printMask?.DodgeBackTimerMax ?? true)
                {
                    fg.AppendLine($"DodgeBackTimerMax => {DodgeBackTimerMax}");
                }
                if (printMask?.IdleTimerMin ?? true)
                {
                    fg.AppendLine($"IdleTimerMin => {IdleTimerMin}");
                }
                if (printMask?.IdleTimerMax ?? true)
                {
                    fg.AppendLine($"IdleTimerMax => {IdleTimerMax}");
                }
                if (printMask?.BlockPercentChance ?? true)
                {
                    fg.AppendLine($"BlockPercentChance => {BlockPercentChance}");
                }
                if (printMask?.AttackPercentChance ?? true)
                {
                    fg.AppendLine($"AttackPercentChance => {AttackPercentChance}");
                }
                if (printMask?.RecoilStaggerBonusToAttack ?? true)
                {
                    fg.AppendLine($"RecoilStaggerBonusToAttack => {RecoilStaggerBonusToAttack}");
                }
                if (printMask?.UnconsciousBonusToAttack ?? true)
                {
                    fg.AppendLine($"UnconsciousBonusToAttack => {UnconsciousBonusToAttack}");
                }
                if (printMask?.HandToHandBonusToAttack ?? true)
                {
                    fg.AppendLine($"HandToHandBonusToAttack => {HandToHandBonusToAttack}");
                }
                if (printMask?.PowerAttackPercentChance ?? true)
                {
                    fg.AppendLine($"PowerAttackPercentChance => {PowerAttackPercentChance}");
                }
                if (printMask?.RecoilStaggerBonusToPowerAttack ?? true)
                {
                    fg.AppendLine($"RecoilStaggerBonusToPowerAttack => {RecoilStaggerBonusToPowerAttack}");
                }
                if (printMask?.UnconsciousBonusToPowerAttack ?? true)
                {
                    fg.AppendLine($"UnconsciousBonusToPowerAttack => {UnconsciousBonusToPowerAttack}");
                }
                if (printMask?.PowerAttackNormal ?? true)
                {
                    fg.AppendLine($"PowerAttackNormal => {PowerAttackNormal}");
                }
                if (printMask?.PowerAttackForward ?? true)
                {
                    fg.AppendLine($"PowerAttackForward => {PowerAttackForward}");
                }
                if (printMask?.PowerAttackBack ?? true)
                {
                    fg.AppendLine($"PowerAttackBack => {PowerAttackBack}");
                }
                if (printMask?.PowerAttackLeft ?? true)
                {
                    fg.AppendLine($"PowerAttackLeft => {PowerAttackLeft}");
                }
                if (printMask?.PowerAttackRight ?? true)
                {
                    fg.AppendLine($"PowerAttackRight => {PowerAttackRight}");
                }
                if (printMask?.HoldTimerMin ?? true)
                {
                    fg.AppendLine($"HoldTimerMin => {HoldTimerMin}");
                }
                if (printMask?.HoldTimerMax ?? true)
                {
                    fg.AppendLine($"HoldTimerMax => {HoldTimerMax}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.AcrobaticDodgePercentChance ?? true)
                {
                    fg.AppendLine($"AcrobaticDodgePercentChance => {AcrobaticDodgePercentChance}");
                }
                if (printMask?.RangeMultOptimal ?? true)
                {
                    fg.AppendLine($"RangeMultOptimal => {RangeMultOptimal}");
                }
                if (printMask?.RangeMultMax ?? true)
                {
                    fg.AppendLine($"RangeMultMax => {RangeMultMax}");
                }
                if (printMask?.SwitchDistanceMelee ?? true)
                {
                    fg.AppendLine($"SwitchDistanceMelee => {SwitchDistanceMelee}");
                }
                if (printMask?.SwitchDistanceRanged ?? true)
                {
                    fg.AppendLine($"SwitchDistanceRanged => {SwitchDistanceRanged}");
                }
                if (printMask?.BuffStandoffDistance ?? true)
                {
                    fg.AppendLine($"BuffStandoffDistance => {BuffStandoffDistance}");
                }
                if (printMask?.RangedStandoffDistance ?? true)
                {
                    fg.AppendLine($"RangedStandoffDistance => {RangedStandoffDistance}");
                }
                if (printMask?.GroupStandoffDistance ?? true)
                {
                    fg.AppendLine($"GroupStandoffDistance => {GroupStandoffDistance}");
                }
                if (printMask?.RushingAttackPercentChance ?? true)
                {
                    fg.AppendLine($"RushingAttackPercentChance => {RushingAttackPercentChance}");
                }
                if (printMask?.RushingAttackDistanceMult ?? true)
                {
                    fg.AppendLine($"RushingAttackDistanceMult => {RushingAttackDistanceMult}");
                }
                if (printMask?.Advanced?.Overall ?? true)
                {
                    Advanced?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CombatStyle_ErrorMask : MajorRecord_ErrorMask, IErrorMask<CombatStyle_ErrorMask>
    {
        #region Members
        public Exception DodgePercentChance;
        public Exception LeftRightPercentChance;
        public Exception DodgeLeftRightTimerMin;
        public Exception DodgeLeftRightTimerMax;
        public Exception DodgeForwardTimerMin;
        public Exception DodgeForwardTimerMax;
        public Exception DodgeBackTimerMin;
        public Exception DodgeBackTimerMax;
        public Exception IdleTimerMin;
        public Exception IdleTimerMax;
        public Exception BlockPercentChance;
        public Exception AttackPercentChance;
        public Exception RecoilStaggerBonusToAttack;
        public Exception UnconsciousBonusToAttack;
        public Exception HandToHandBonusToAttack;
        public Exception PowerAttackPercentChance;
        public Exception RecoilStaggerBonusToPowerAttack;
        public Exception UnconsciousBonusToPowerAttack;
        public Exception PowerAttackNormal;
        public Exception PowerAttackForward;
        public Exception PowerAttackBack;
        public Exception PowerAttackLeft;
        public Exception PowerAttackRight;
        public Exception HoldTimerMin;
        public Exception HoldTimerMax;
        public Exception Flags;
        public Exception AcrobaticDodgePercentChance;
        public Exception RangeMultOptimal;
        public Exception RangeMultMax;
        public Exception SwitchDistanceMelee;
        public Exception SwitchDistanceRanged;
        public Exception BuffStandoffDistance;
        public Exception RangedStandoffDistance;
        public Exception GroupStandoffDistance;
        public Exception RushingAttackPercentChance;
        public Exception RushingAttackDistanceMult;
        public MaskItem<Exception, CombatStyleAdvanced_ErrorMask> Advanced;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    return DodgePercentChance;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    return LeftRightPercentChance;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    return DodgeLeftRightTimerMin;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    return DodgeLeftRightTimerMax;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    return DodgeForwardTimerMin;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    return DodgeForwardTimerMax;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    return DodgeBackTimerMin;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    return DodgeBackTimerMax;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    return IdleTimerMin;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    return IdleTimerMax;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    return BlockPercentChance;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    return AttackPercentChance;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    return RecoilStaggerBonusToAttack;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    return UnconsciousBonusToAttack;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    return HandToHandBonusToAttack;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    return PowerAttackPercentChance;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    return RecoilStaggerBonusToPowerAttack;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    return UnconsciousBonusToPowerAttack;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    return PowerAttackNormal;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    return PowerAttackForward;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    return PowerAttackBack;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    return PowerAttackLeft;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    return PowerAttackRight;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    return HoldTimerMin;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    return HoldTimerMax;
                case CombatStyle_FieldIndex.Flags:
                    return Flags;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    return AcrobaticDodgePercentChance;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    return RangeMultOptimal;
                case CombatStyle_FieldIndex.RangeMultMax:
                    return RangeMultMax;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    return SwitchDistanceMelee;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    return SwitchDistanceRanged;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    return BuffStandoffDistance;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    return RangedStandoffDistance;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    return GroupStandoffDistance;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    return RushingAttackPercentChance;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    return RushingAttackDistanceMult;
                case CombatStyle_FieldIndex.Advanced:
                    return Advanced;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    this.DodgePercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    this.LeftRightPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    this.DodgeLeftRightTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    this.DodgeLeftRightTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    this.DodgeForwardTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    this.DodgeForwardTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    this.DodgeBackTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    this.DodgeBackTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    this.IdleTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    this.IdleTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    this.BlockPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    this.AttackPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    this.RecoilStaggerBonusToAttack = ex;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    this.UnconsciousBonusToAttack = ex;
                    break;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    this.HandToHandBonusToAttack = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    this.PowerAttackPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    this.RecoilStaggerBonusToPowerAttack = ex;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    this.UnconsciousBonusToPowerAttack = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    this.PowerAttackNormal = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    this.PowerAttackForward = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    this.PowerAttackBack = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    this.PowerAttackLeft = ex;
                    break;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    this.PowerAttackRight = ex;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    this.HoldTimerMin = ex;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    this.HoldTimerMax = ex;
                    break;
                case CombatStyle_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    this.AcrobaticDodgePercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    this.RangeMultOptimal = ex;
                    break;
                case CombatStyle_FieldIndex.RangeMultMax:
                    this.RangeMultMax = ex;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    this.SwitchDistanceMelee = ex;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    this.SwitchDistanceRanged = ex;
                    break;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    this.BuffStandoffDistance = ex;
                    break;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    this.RangedStandoffDistance = ex;
                    break;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    this.GroupStandoffDistance = ex;
                    break;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    this.RushingAttackPercentChance = ex;
                    break;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    this.RushingAttackDistanceMult = ex;
                    break;
                case CombatStyle_FieldIndex.Advanced:
                    this.Advanced = new MaskItem<Exception, CombatStyleAdvanced_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
            switch (enu)
            {
                case CombatStyle_FieldIndex.DodgePercentChance:
                    this.DodgePercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.LeftRightPercentChance:
                    this.LeftRightPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMin:
                    this.DodgeLeftRightTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeLeftRightTimerMax:
                    this.DodgeLeftRightTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMin:
                    this.DodgeForwardTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeForwardTimerMax:
                    this.DodgeForwardTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMin:
                    this.DodgeBackTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.DodgeBackTimerMax:
                    this.DodgeBackTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMin:
                    this.IdleTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.IdleTimerMax:
                    this.IdleTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.BlockPercentChance:
                    this.BlockPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.AttackPercentChance:
                    this.AttackPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToAttack:
                    this.RecoilStaggerBonusToAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToAttack:
                    this.UnconsciousBonusToAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.HandToHandBonusToAttack:
                    this.HandToHandBonusToAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackPercentChance:
                    this.PowerAttackPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RecoilStaggerBonusToPowerAttack:
                    this.RecoilStaggerBonusToPowerAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.UnconsciousBonusToPowerAttack:
                    this.UnconsciousBonusToPowerAttack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackNormal:
                    this.PowerAttackNormal = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackForward:
                    this.PowerAttackForward = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackBack:
                    this.PowerAttackBack = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackLeft:
                    this.PowerAttackLeft = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.PowerAttackRight:
                    this.PowerAttackRight = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMin:
                    this.HoldTimerMin = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.HoldTimerMax:
                    this.HoldTimerMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.AcrobaticDodgePercentChance:
                    this.AcrobaticDodgePercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RangeMultOptimal:
                    this.RangeMultOptimal = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RangeMultMax:
                    this.RangeMultMax = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceMelee:
                    this.SwitchDistanceMelee = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.SwitchDistanceRanged:
                    this.SwitchDistanceRanged = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.BuffStandoffDistance:
                    this.BuffStandoffDistance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RangedStandoffDistance:
                    this.RangedStandoffDistance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.GroupStandoffDistance:
                    this.GroupStandoffDistance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RushingAttackPercentChance:
                    this.RushingAttackPercentChance = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.RushingAttackDistanceMult:
                    this.RushingAttackDistanceMult = (Exception)obj;
                    break;
                case CombatStyle_FieldIndex.Advanced:
                    this.Advanced = (MaskItem<Exception, CombatStyleAdvanced_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (DodgePercentChance != null) return true;
            if (LeftRightPercentChance != null) return true;
            if (DodgeLeftRightTimerMin != null) return true;
            if (DodgeLeftRightTimerMax != null) return true;
            if (DodgeForwardTimerMin != null) return true;
            if (DodgeForwardTimerMax != null) return true;
            if (DodgeBackTimerMin != null) return true;
            if (DodgeBackTimerMax != null) return true;
            if (IdleTimerMin != null) return true;
            if (IdleTimerMax != null) return true;
            if (BlockPercentChance != null) return true;
            if (AttackPercentChance != null) return true;
            if (RecoilStaggerBonusToAttack != null) return true;
            if (UnconsciousBonusToAttack != null) return true;
            if (HandToHandBonusToAttack != null) return true;
            if (PowerAttackPercentChance != null) return true;
            if (RecoilStaggerBonusToPowerAttack != null) return true;
            if (UnconsciousBonusToPowerAttack != null) return true;
            if (PowerAttackNormal != null) return true;
            if (PowerAttackForward != null) return true;
            if (PowerAttackBack != null) return true;
            if (PowerAttackLeft != null) return true;
            if (PowerAttackRight != null) return true;
            if (HoldTimerMin != null) return true;
            if (HoldTimerMax != null) return true;
            if (Flags != null) return true;
            if (AcrobaticDodgePercentChance != null) return true;
            if (RangeMultOptimal != null) return true;
            if (RangeMultMax != null) return true;
            if (SwitchDistanceMelee != null) return true;
            if (SwitchDistanceRanged != null) return true;
            if (BuffStandoffDistance != null) return true;
            if (RangedStandoffDistance != null) return true;
            if (GroupStandoffDistance != null) return true;
            if (RushingAttackPercentChance != null) return true;
            if (RushingAttackDistanceMult != null) return true;
            if (Advanced != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("CombatStyle_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"DodgePercentChance => {DodgePercentChance}");
            fg.AppendLine($"LeftRightPercentChance => {LeftRightPercentChance}");
            fg.AppendLine($"DodgeLeftRightTimerMin => {DodgeLeftRightTimerMin}");
            fg.AppendLine($"DodgeLeftRightTimerMax => {DodgeLeftRightTimerMax}");
            fg.AppendLine($"DodgeForwardTimerMin => {DodgeForwardTimerMin}");
            fg.AppendLine($"DodgeForwardTimerMax => {DodgeForwardTimerMax}");
            fg.AppendLine($"DodgeBackTimerMin => {DodgeBackTimerMin}");
            fg.AppendLine($"DodgeBackTimerMax => {DodgeBackTimerMax}");
            fg.AppendLine($"IdleTimerMin => {IdleTimerMin}");
            fg.AppendLine($"IdleTimerMax => {IdleTimerMax}");
            fg.AppendLine($"BlockPercentChance => {BlockPercentChance}");
            fg.AppendLine($"AttackPercentChance => {AttackPercentChance}");
            fg.AppendLine($"RecoilStaggerBonusToAttack => {RecoilStaggerBonusToAttack}");
            fg.AppendLine($"UnconsciousBonusToAttack => {UnconsciousBonusToAttack}");
            fg.AppendLine($"HandToHandBonusToAttack => {HandToHandBonusToAttack}");
            fg.AppendLine($"PowerAttackPercentChance => {PowerAttackPercentChance}");
            fg.AppendLine($"RecoilStaggerBonusToPowerAttack => {RecoilStaggerBonusToPowerAttack}");
            fg.AppendLine($"UnconsciousBonusToPowerAttack => {UnconsciousBonusToPowerAttack}");
            fg.AppendLine($"PowerAttackNormal => {PowerAttackNormal}");
            fg.AppendLine($"PowerAttackForward => {PowerAttackForward}");
            fg.AppendLine($"PowerAttackBack => {PowerAttackBack}");
            fg.AppendLine($"PowerAttackLeft => {PowerAttackLeft}");
            fg.AppendLine($"PowerAttackRight => {PowerAttackRight}");
            fg.AppendLine($"HoldTimerMin => {HoldTimerMin}");
            fg.AppendLine($"HoldTimerMax => {HoldTimerMax}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"AcrobaticDodgePercentChance => {AcrobaticDodgePercentChance}");
            fg.AppendLine($"RangeMultOptimal => {RangeMultOptimal}");
            fg.AppendLine($"RangeMultMax => {RangeMultMax}");
            fg.AppendLine($"SwitchDistanceMelee => {SwitchDistanceMelee}");
            fg.AppendLine($"SwitchDistanceRanged => {SwitchDistanceRanged}");
            fg.AppendLine($"BuffStandoffDistance => {BuffStandoffDistance}");
            fg.AppendLine($"RangedStandoffDistance => {RangedStandoffDistance}");
            fg.AppendLine($"GroupStandoffDistance => {GroupStandoffDistance}");
            fg.AppendLine($"RushingAttackPercentChance => {RushingAttackPercentChance}");
            fg.AppendLine($"RushingAttackDistanceMult => {RushingAttackDistanceMult}");
            Advanced?.ToString(fg);
        }
        #endregion

        #region Combine
        public CombatStyle_ErrorMask Combine(CombatStyle_ErrorMask rhs)
        {
            var ret = new CombatStyle_ErrorMask();
            ret.DodgePercentChance = this.DodgePercentChance.Combine(rhs.DodgePercentChance);
            ret.LeftRightPercentChance = this.LeftRightPercentChance.Combine(rhs.LeftRightPercentChance);
            ret.DodgeLeftRightTimerMin = this.DodgeLeftRightTimerMin.Combine(rhs.DodgeLeftRightTimerMin);
            ret.DodgeLeftRightTimerMax = this.DodgeLeftRightTimerMax.Combine(rhs.DodgeLeftRightTimerMax);
            ret.DodgeForwardTimerMin = this.DodgeForwardTimerMin.Combine(rhs.DodgeForwardTimerMin);
            ret.DodgeForwardTimerMax = this.DodgeForwardTimerMax.Combine(rhs.DodgeForwardTimerMax);
            ret.DodgeBackTimerMin = this.DodgeBackTimerMin.Combine(rhs.DodgeBackTimerMin);
            ret.DodgeBackTimerMax = this.DodgeBackTimerMax.Combine(rhs.DodgeBackTimerMax);
            ret.IdleTimerMin = this.IdleTimerMin.Combine(rhs.IdleTimerMin);
            ret.IdleTimerMax = this.IdleTimerMax.Combine(rhs.IdleTimerMax);
            ret.BlockPercentChance = this.BlockPercentChance.Combine(rhs.BlockPercentChance);
            ret.AttackPercentChance = this.AttackPercentChance.Combine(rhs.AttackPercentChance);
            ret.RecoilStaggerBonusToAttack = this.RecoilStaggerBonusToAttack.Combine(rhs.RecoilStaggerBonusToAttack);
            ret.UnconsciousBonusToAttack = this.UnconsciousBonusToAttack.Combine(rhs.UnconsciousBonusToAttack);
            ret.HandToHandBonusToAttack = this.HandToHandBonusToAttack.Combine(rhs.HandToHandBonusToAttack);
            ret.PowerAttackPercentChance = this.PowerAttackPercentChance.Combine(rhs.PowerAttackPercentChance);
            ret.RecoilStaggerBonusToPowerAttack = this.RecoilStaggerBonusToPowerAttack.Combine(rhs.RecoilStaggerBonusToPowerAttack);
            ret.UnconsciousBonusToPowerAttack = this.UnconsciousBonusToPowerAttack.Combine(rhs.UnconsciousBonusToPowerAttack);
            ret.PowerAttackNormal = this.PowerAttackNormal.Combine(rhs.PowerAttackNormal);
            ret.PowerAttackForward = this.PowerAttackForward.Combine(rhs.PowerAttackForward);
            ret.PowerAttackBack = this.PowerAttackBack.Combine(rhs.PowerAttackBack);
            ret.PowerAttackLeft = this.PowerAttackLeft.Combine(rhs.PowerAttackLeft);
            ret.PowerAttackRight = this.PowerAttackRight.Combine(rhs.PowerAttackRight);
            ret.HoldTimerMin = this.HoldTimerMin.Combine(rhs.HoldTimerMin);
            ret.HoldTimerMax = this.HoldTimerMax.Combine(rhs.HoldTimerMax);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.AcrobaticDodgePercentChance = this.AcrobaticDodgePercentChance.Combine(rhs.AcrobaticDodgePercentChance);
            ret.RangeMultOptimal = this.RangeMultOptimal.Combine(rhs.RangeMultOptimal);
            ret.RangeMultMax = this.RangeMultMax.Combine(rhs.RangeMultMax);
            ret.SwitchDistanceMelee = this.SwitchDistanceMelee.Combine(rhs.SwitchDistanceMelee);
            ret.SwitchDistanceRanged = this.SwitchDistanceRanged.Combine(rhs.SwitchDistanceRanged);
            ret.BuffStandoffDistance = this.BuffStandoffDistance.Combine(rhs.BuffStandoffDistance);
            ret.RangedStandoffDistance = this.RangedStandoffDistance.Combine(rhs.RangedStandoffDistance);
            ret.GroupStandoffDistance = this.GroupStandoffDistance.Combine(rhs.GroupStandoffDistance);
            ret.RushingAttackPercentChance = this.RushingAttackPercentChance.Combine(rhs.RushingAttackPercentChance);
            ret.RushingAttackDistanceMult = this.RushingAttackDistanceMult.Combine(rhs.RushingAttackDistanceMult);
            ret.Advanced = new MaskItem<Exception, CombatStyleAdvanced_ErrorMask>(this.Advanced.Overall.Combine(rhs.Advanced.Overall), ((IErrorMask<CombatStyleAdvanced_ErrorMask>)this.Advanced.Specific).Combine(rhs.Advanced.Specific));
            return ret;
        }
        public static CombatStyle_ErrorMask Combine(CombatStyle_ErrorMask lhs, CombatStyle_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static CombatStyle_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new CombatStyle_ErrorMask();
        }
        #endregion

    }
    public class CombatStyle_CopyMask : MajorRecord_CopyMask
    {
        public CombatStyle_CopyMask()
        {
        }

        public CombatStyle_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.DodgePercentChance = defaultOn;
            this.LeftRightPercentChance = defaultOn;
            this.DodgeLeftRightTimerMin = defaultOn;
            this.DodgeLeftRightTimerMax = defaultOn;
            this.DodgeForwardTimerMin = defaultOn;
            this.DodgeForwardTimerMax = defaultOn;
            this.DodgeBackTimerMin = defaultOn;
            this.DodgeBackTimerMax = defaultOn;
            this.IdleTimerMin = defaultOn;
            this.IdleTimerMax = defaultOn;
            this.BlockPercentChance = defaultOn;
            this.AttackPercentChance = defaultOn;
            this.RecoilStaggerBonusToAttack = defaultOn;
            this.UnconsciousBonusToAttack = defaultOn;
            this.HandToHandBonusToAttack = defaultOn;
            this.PowerAttackPercentChance = defaultOn;
            this.RecoilStaggerBonusToPowerAttack = defaultOn;
            this.UnconsciousBonusToPowerAttack = defaultOn;
            this.PowerAttackNormal = defaultOn;
            this.PowerAttackForward = defaultOn;
            this.PowerAttackBack = defaultOn;
            this.PowerAttackLeft = defaultOn;
            this.PowerAttackRight = defaultOn;
            this.HoldTimerMin = defaultOn;
            this.HoldTimerMax = defaultOn;
            this.Flags = defaultOn;
            this.AcrobaticDodgePercentChance = defaultOn;
            this.RangeMultOptimal = defaultOn;
            this.RangeMultMax = defaultOn;
            this.SwitchDistanceMelee = defaultOn;
            this.SwitchDistanceRanged = defaultOn;
            this.BuffStandoffDistance = defaultOn;
            this.RangedStandoffDistance = defaultOn;
            this.GroupStandoffDistance = defaultOn;
            this.RushingAttackPercentChance = defaultOn;
            this.RushingAttackDistanceMult = defaultOn;
            this.Advanced = new MaskItem<CopyOption, CombatStyleAdvanced_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool DodgePercentChance;
        public bool LeftRightPercentChance;
        public bool DodgeLeftRightTimerMin;
        public bool DodgeLeftRightTimerMax;
        public bool DodgeForwardTimerMin;
        public bool DodgeForwardTimerMax;
        public bool DodgeBackTimerMin;
        public bool DodgeBackTimerMax;
        public bool IdleTimerMin;
        public bool IdleTimerMax;
        public bool BlockPercentChance;
        public bool AttackPercentChance;
        public bool RecoilStaggerBonusToAttack;
        public bool UnconsciousBonusToAttack;
        public bool HandToHandBonusToAttack;
        public bool PowerAttackPercentChance;
        public bool RecoilStaggerBonusToPowerAttack;
        public bool UnconsciousBonusToPowerAttack;
        public bool PowerAttackNormal;
        public bool PowerAttackForward;
        public bool PowerAttackBack;
        public bool PowerAttackLeft;
        public bool PowerAttackRight;
        public bool HoldTimerMin;
        public bool HoldTimerMax;
        public bool Flags;
        public bool AcrobaticDodgePercentChance;
        public bool RangeMultOptimal;
        public bool RangeMultMax;
        public bool SwitchDistanceMelee;
        public bool SwitchDistanceRanged;
        public bool BuffStandoffDistance;
        public bool RangedStandoffDistance;
        public bool GroupStandoffDistance;
        public bool RushingAttackPercentChance;
        public bool RushingAttackDistanceMult;
        public MaskItem<CopyOption, CombatStyleAdvanced_CopyMask> Advanced;
        #endregion

    }

    public class CombatStyle_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool DodgePercentChance;
        public bool LeftRightPercentChance;
        public bool DodgeLeftRightTimerMin;
        public bool DodgeLeftRightTimerMax;
        public bool DodgeForwardTimerMin;
        public bool DodgeForwardTimerMax;
        public bool DodgeBackTimerMin;
        public bool DodgeBackTimerMax;
        public bool IdleTimerMin;
        public bool IdleTimerMax;
        public bool BlockPercentChance;
        public bool AttackPercentChance;
        public bool RecoilStaggerBonusToAttack;
        public bool UnconsciousBonusToAttack;
        public bool HandToHandBonusToAttack;
        public bool PowerAttackPercentChance;
        public bool RecoilStaggerBonusToPowerAttack;
        public bool UnconsciousBonusToPowerAttack;
        public bool PowerAttackNormal;
        public bool PowerAttackForward;
        public bool PowerAttackBack;
        public bool PowerAttackLeft;
        public bool PowerAttackRight;
        public bool HoldTimerMin;
        public bool HoldTimerMax;
        public bool Flags;
        public bool AcrobaticDodgePercentChance;
        public bool RangeMultOptimal;
        public bool RangeMultMax;
        public bool SwitchDistanceMelee;
        public bool SwitchDistanceRanged;
        public bool BuffStandoffDistance;
        public bool RangedStandoffDistance;
        public bool GroupStandoffDistance;
        public bool RushingAttackPercentChance;
        public bool RushingAttackDistanceMult;
        public MaskItem<bool, CombatStyleAdvanced_TranslationMask> Advanced;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((DodgePercentChance, null));
            ret.Add((LeftRightPercentChance, null));
            ret.Add((DodgeLeftRightTimerMin, null));
            ret.Add((DodgeLeftRightTimerMax, null));
            ret.Add((DodgeForwardTimerMin, null));
            ret.Add((DodgeForwardTimerMax, null));
            ret.Add((DodgeBackTimerMin, null));
            ret.Add((DodgeBackTimerMax, null));
            ret.Add((IdleTimerMin, null));
            ret.Add((IdleTimerMax, null));
            ret.Add((BlockPercentChance, null));
            ret.Add((AttackPercentChance, null));
            ret.Add((RecoilStaggerBonusToAttack, null));
            ret.Add((UnconsciousBonusToAttack, null));
            ret.Add((HandToHandBonusToAttack, null));
            ret.Add((PowerAttackPercentChance, null));
            ret.Add((RecoilStaggerBonusToPowerAttack, null));
            ret.Add((UnconsciousBonusToPowerAttack, null));
            ret.Add((PowerAttackNormal, null));
            ret.Add((PowerAttackForward, null));
            ret.Add((PowerAttackBack, null));
            ret.Add((PowerAttackLeft, null));
            ret.Add((PowerAttackRight, null));
            ret.Add((HoldTimerMin, null));
            ret.Add((HoldTimerMax, null));
            ret.Add((Flags, null));
            ret.Add((AcrobaticDodgePercentChance, null));
            ret.Add((RangeMultOptimal, null));
            ret.Add((RangeMultMax, null));
            ret.Add((SwitchDistanceMelee, null));
            ret.Add((SwitchDistanceRanged, null));
            ret.Add((BuffStandoffDistance, null));
            ret.Add((RangedStandoffDistance, null));
            ret.Add((GroupStandoffDistance, null));
            ret.Add((RushingAttackPercentChance, null));
            ret.Add((RushingAttackDistanceMult, null));
            ret.Add((Advanced?.Overall ?? true, Advanced?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
