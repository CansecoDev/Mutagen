/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ContainerItem : IContainerItem, ILoquiObjectSetter, IEquatable<ContainerItem>
    {
        ILoquiRegistration ILoquiObject.Registration => ContainerItem_Registration.Instance;
        public static ContainerItem_Registration Registration => ContainerItem_Registration.Instance;

        #region Ctor
        public ContainerItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Item
        public FormIDLink<ItemAbstract> Item_Property { get; } = new FormIDLink<ItemAbstract>();
        public ItemAbstract Item { get => Item_Property.Item; set => Item_Property.Item = value; }
        FormIDLink<ItemAbstract> IContainerItemGetter.Item_Property => this.Item_Property;
        #endregion
        #region Count
        protected readonly INotifyingItem<UInt32> _Count = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Count_Property => _Count;
        public UInt32 Count
        {
            get => this._Count.Item;
            set => this._Count.Set(value);
        }
        INotifyingItem<UInt32> IContainerItem.Count_Property => this.Count_Property;
        INotifyingItemGetter<UInt32> IContainerItemGetter.Count_Property => this.Count_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ContainerItemCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ContainerItemCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => ContainerItemCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ContainerItemCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return ContainerItemCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ContainerItem_Mask<bool> printMask = null)
        {
            return ContainerItemCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ContainerItemCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public ContainerItem_Mask<bool> GetHasBeenSetMask()
        {
            return ContainerItemCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ContainerItem rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ContainerItem rhs)
        {
            if (rhs == null) return false;
            if (Item != rhs.Item) return false;
            if (Count != rhs.Count) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Item).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Count).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static ContainerItem Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static ContainerItem Create_XML(
            XElement root,
            out ContainerItem_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static ContainerItem Create_XML(
            XElement root,
            bool doMasks,
            out ContainerItem_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (ContainerItem Object, ContainerItem_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            ContainerItem_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ContainerItem_ErrorMask()) : default(Func<ContainerItem_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static ContainerItem Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static ContainerItem Create_XML(
            string path,
            out ContainerItem_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static ContainerItem Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static ContainerItem Create_XML(
            Stream stream,
            out ContainerItem_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<ContainerItem, ContainerItem_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out ContainerItem_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<ContainerItem, ContainerItem_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out ContainerItem_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out ContainerItem_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out ContainerItem_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (ContainerItem_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out ContainerItem_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out ContainerItem_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ContainerItemCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static ContainerItem Create_XML_Internal(
            XElement root,
            Func<ContainerItem_ErrorMask> errorMask)
        {
            var ret = new ContainerItem();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            ContainerItem item,
            XElement root,
            string name,
            Func<ContainerItem_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Item":
                    item.Item_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)ContainerItem_FieldIndex.Item,
                        errorMask: errorMask));
                    break;
                case "Count":
                    item._Count.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)ContainerItem_FieldIndex.Count,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static ContainerItem Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static ContainerItem Create_Binary(
            MutagenFrame frame,
            out ContainerItem_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static ContainerItem Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out ContainerItem_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (ContainerItem Object, ContainerItem_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ContainerItem_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ContainerItem_ErrorMask()) : default(Func<ContainerItem_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static ContainerItem Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ContainerItem Create_Binary(
            string path,
            out ContainerItem_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static ContainerItem Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ContainerItem Create_Binary(
            Stream stream,
            out ContainerItem_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<ContainerItem, ContainerItem_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out ContainerItem_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<ContainerItem, ContainerItem_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out ContainerItem_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out ContainerItem_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ContainerItem_ErrorMask errorMask)
        {
            errorMask = (ContainerItem_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out ContainerItem_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ContainerItem_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ContainerItemCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static ContainerItem Create_Binary_Internal(
            MutagenFrame frame,
            Func<ContainerItem_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new ContainerItem();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    ContainerItem_Registration.CNTO_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            ContainerItem item,
            MutagenFrame frame,
            Func<ContainerItem_ErrorMask> errorMask)
        {
            item.Item_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)ContainerItem_FieldIndex.Item,
                errorMask: errorMask));
            item._Count.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)ContainerItem_FieldIndex.Count,
                errorMask: errorMask));
        }

        #endregion

        public ContainerItem Copy(
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null)
        {
            return ContainerItem.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ContainerItem Copy(
            IContainerItem item,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null)
        {
            ContainerItem ret;
            if (item.GetType().Equals(typeof(ContainerItem)))
            {
                ret = new ContainerItem();
            }
            else
            {
                ret = (ContainerItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null)
            where CopyType : class, IContainerItem
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(ContainerItem)))
            {
                ret = new ContainerItem() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static ContainerItem Copy_ToLoqui(
            IContainerItemGetter item,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null)
        {
            ContainerItem ret;
            if (item.GetType().Equals(typeof(ContainerItem)))
            {
                ret = new ContainerItem() as ContainerItem;
            }
            else
            {
                ret = (ContainerItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    this.Item_Property.Set(
                        (FormIDLink<ItemAbstract>)obj,
                        cmds);
                    break;
                case ContainerItem_FieldIndex.Count:
                    this._Count.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ContainerItemCommon.Clear(this, cmds);
        }


        public static ContainerItem Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ContainerItem();
            foreach (var pair in fields)
            {
                CopyInInternal_ContainerItem(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ContainerItem(ContainerItem obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ContainerItem_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    obj.Item_Property.Set(
                        (FormIDLink<ItemAbstract>)pair.Value,
                        null);
                    break;
                case ContainerItem_FieldIndex.Count:
                    obj._Count.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ContainerItem obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IContainerItem : IContainerItemGetter, ILoquiClass<IContainerItem, IContainerItemGetter>, ILoquiClass<ContainerItem, IContainerItemGetter>
    {
        new ItemAbstract Item { get; set; }
        new UInt32 Count { get; set; }
        new INotifyingItem<UInt32> Count_Property { get; }

    }

    public interface IContainerItemGetter : ILoquiObject
    {
        #region Item
        ItemAbstract Item { get; }
        FormIDLink<ItemAbstract> Item_Property { get; }

        #endregion
        #region Count
        UInt32 Count { get; }
        INotifyingItemGetter<UInt32> Count_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ContainerItem_FieldIndex
    {
        Item = 0,
        Count = 1,
    }
    #endregion

    #region Registration
    public class ContainerItem_Registration : ILoquiRegistration
    {
        public static readonly ContainerItem_Registration Instance = new ContainerItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 72,
            version: 0);

        public const string GUID = "2cffd274-8e8f-4c07-8b09-679098c41712";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(ContainerItem_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ContainerItem_ErrorMask);

        public static readonly Type ClassType = typeof(ContainerItem);

        public static readonly Type GetterType = typeof(IContainerItemGetter);

        public static readonly Type SetterType = typeof(IContainerItem);

        public static readonly Type CommonType = typeof(ContainerItemCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ContainerItem";

        public const string Name = "ContainerItem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ITEM":
                    return (ushort)ContainerItem_FieldIndex.Item;
                case "COUNT":
                    return (ushort)ContainerItem_FieldIndex.Count;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    return "Item";
                case ContainerItem_FieldIndex.Count:
                    return "Count";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    return typeof(FormIDLink<ItemAbstract>);
                case ContainerItem_FieldIndex.Count:
                    return typeof(UInt32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CNTO_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ContainerItemCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IContainerItem item,
            IContainerItemGetter rhs,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ContainerItemCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IContainerItem item,
            IContainerItemGetter rhs,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ContainerItemCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IContainerItem item,
            IContainerItemGetter rhs,
            IContainerItemGetter def,
            bool doMasks,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            ContainerItem_ErrorMask retErrorMask = null;
            Func<ContainerItem_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new ContainerItem_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IContainerItem item,
            IContainerItemGetter rhs,
            IContainerItemGetter def,
            bool doMasks,
            Func<ContainerItem_ErrorMask> errorMask,
            ContainerItem_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Item ?? true)
            {
                try
                {
                    item.Item_Property.Set(
                        value: rhs.Item,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)ContainerItem_FieldIndex.Item, ex);
                }
            }
            if (copyMask?.Count ?? true)
            {
                try
                {
                    item.Count_Property.Set(
                        value: rhs.Count,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)ContainerItem_FieldIndex.Count, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IContainerItem obj,
            NotifyingFireParameters? cmds = null)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IContainerItem obj,
            NotifyingUnsetParameters? cmds = null)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    obj.Item = default(FormIDLink<ItemAbstract>);
                    break;
                case ContainerItem_FieldIndex.Count:
                    obj.Count = default(UInt32);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IContainerItem obj)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IContainerItemGetter obj)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    return obj.Item;
                case ContainerItem_FieldIndex.Count:
                    return obj.Count;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IContainerItem item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Item = default(FormIDLink<ItemAbstract>);
            item.Count = default(UInt32);
        }

        public static ContainerItem_Mask<bool> GetEqualsMask(
            this IContainerItemGetter item,
            IContainerItemGetter rhs)
        {
            var ret = new ContainerItem_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IContainerItemGetter item,
            IContainerItemGetter rhs,
            ContainerItem_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Item = item.Item == rhs.Item;
            ret.Count = item.Count == rhs.Count;
        }

        public static string ToString(
            this IContainerItemGetter item,
            string name = null,
            ContainerItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IContainerItemGetter item,
            FileGeneration fg,
            string name = null,
            ContainerItem_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ContainerItem)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ContainerItem)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Item ?? true)
                {
                    fg.AppendLine($"Item => {item.Item}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {item.Count}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IContainerItemGetter item,
            ContainerItem_Mask<bool?> checkMask)
        {
            return true;
        }

        public static ContainerItem_Mask<bool> GetHasBeenSetMask(IContainerItemGetter item)
        {
            var ret = new ContainerItem_Mask<bool>();
            ret.Item = true;
            ret.Count = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IContainerItemGetter item,
            bool doMasks,
            out ContainerItem_ErrorMask errorMask,
            string name = null)
        {
            ContainerItem_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ContainerItem_ErrorMask()) : default(Func<ContainerItem_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IContainerItemGetter item,
            Func<ContainerItem_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.ContainerItem"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.ContainerItem");
                    }
                    RawFormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Item),
                        item: item.Item?.FormID,
                        fieldIndex: (int)ContainerItem_FieldIndex.Item,
                        errorMask: errorMask);
                    UInt32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Count),
                        item: item.Count_Property,
                        fieldIndex: (int)ContainerItem_FieldIndex.Count,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ContainerItem item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out ContainerItem_ErrorMask errorMask)
        {
            ContainerItem_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ContainerItem_ErrorMask()) : default(Func<ContainerItem_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            ContainerItem item,
            RecordTypeConverter recordTypeConverter,
            Func<ContainerItem_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: ContainerItem_Registration.CNTO_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            ContainerItem item,
            MutagenWriter writer,
            Func<ContainerItem_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Item_Property,
                fieldIndex: (int)ContainerItem_FieldIndex.Item,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Count_Property,
                fieldIndex: (int)ContainerItem_FieldIndex.Count,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class ContainerItem_Mask<T> : IMask<T>, IEquatable<ContainerItem_Mask<T>>
    {
        #region Ctors
        public ContainerItem_Mask()
        {
        }

        public ContainerItem_Mask(T initialValue)
        {
            this.Item = initialValue;
            this.Count = initialValue;
        }
        #endregion

        #region Members
        public T Item;
        public T Count;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ContainerItem_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ContainerItem_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Item, rhs.Item)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Item?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Item)) return false;
            if (!eval(this.Count)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ContainerItem_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ContainerItem_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ContainerItem_Mask<R> obj, Func<T, R> eval)
        {
            obj.Item = eval(this.Item);
            obj.Count = eval(this.Count);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ContainerItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ContainerItem_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ContainerItem_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Item ?? true)
                {
                    fg.AppendLine($"Item => {Item}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ContainerItem_ErrorMask : IErrorMask, IErrorMask<ContainerItem_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Item;
        public Exception Count;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    this.Item = ex;
                    break;
                case ContainerItem_FieldIndex.Count:
                    this.Count = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    this.Item = (Exception)obj;
                    break;
                case ContainerItem_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Item != null) return true;
            if (Count != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ContainerItem_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Item => {Item}");
            fg.AppendLine($"Count => {Count}");
        }
        #endregion

        #region Combine
        public ContainerItem_ErrorMask Combine(ContainerItem_ErrorMask rhs)
        {
            var ret = new ContainerItem_ErrorMask();
            ret.Item = this.Item.Combine(rhs.Item);
            ret.Count = this.Count.Combine(rhs.Count);
            return ret;
        }
        public static ContainerItem_ErrorMask Combine(ContainerItem_ErrorMask lhs, ContainerItem_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class ContainerItem_CopyMask
    {
        #region Members
        public bool Item;
        public bool Count;
        #endregion

    }
    #endregion




    #endregion

}
