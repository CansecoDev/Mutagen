/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ContainerItem : 
        IContainerItem,
        ILoquiObject<ContainerItem>,
        ILoquiObjectSetter,
        IPropertySupporter<UInt32>,
        IEquatable<ContainerItem>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ContainerItem_Registration.Instance;
        public static ContainerItem_Registration Registration => ContainerItem_Registration.Instance;

        #region Ctor
        public ContainerItem()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Item
        public FormIDLink<ItemAbstract> Item_Property { get; } = new FormIDLink<ItemAbstract>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ItemAbstract Item { get => Item_Property.Item; set => Item_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<ItemAbstract> IContainerItemGetter.Item_Property => this.Item_Property;
        #endregion
        #region Count
        protected UInt32 _Count;
        protected PropertyForwarder<ContainerItem, UInt32> _CountForwarder;
        public INotifyingSetItem<UInt32> Count_Property => _CountForwarder ?? (_CountForwarder = new PropertyForwarder<ContainerItem, UInt32>(this, (int)ContainerItem_FieldIndex.Count));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Count
        {
            get => this._Count;
            set => this.SetCount(value);
        }
        protected void SetCount(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ContainerItem_FieldIndex.Count];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Count == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ContainerItem_FieldIndex.Count] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = Count;
                _Count = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)ContainerItem_FieldIndex.Count,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Count = item;
            }
        }
        protected void UnsetCount()
        {
            _hasBeenSetTracker[(int)ContainerItem_FieldIndex.Count] = false;
            Count = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IContainerItem.Count_Property => this.Count_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IContainerItemGetter.Count_Property => this.Count_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ContainerItemCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ContainerItemCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ContainerItemCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ContainerItemCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<ContainerItem>.GetEqualsMask(ContainerItem rhs) => ContainerItemCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IContainerItemGetter>.GetEqualsMask(IContainerItemGetter rhs) => ContainerItemCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ContainerItemCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ContainerItem_Mask<bool> printMask = null)
        {
            return ContainerItemCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ContainerItemCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public ContainerItem_Mask<bool> GetHasBeenSetMask()
        {
            return ContainerItemCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ContainerItem rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ContainerItem rhs)
        {
            if (rhs == null) return false;
            if (!this.Item_Property.Equals(rhs.Item_Property)) return false;
            if (this.Count != rhs.Count) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Item).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Count).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static ContainerItem Create_Xml(
            XElement root,
            ContainerItem_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ContainerItem Create_Xml(
            XElement root,
            out ContainerItem_ErrorMask errorMask,
            bool doMasks = true,
            ContainerItem_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ContainerItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static ContainerItem Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new ContainerItem();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ContainerItem Create_Xml(
            string path,
            ContainerItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static ContainerItem Create_Xml(
            string path,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ContainerItem Create_Xml(
            Stream stream,
            ContainerItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static ContainerItem Create_Xml(
            Stream stream,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = ContainerItem_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<ContainerItem>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out ContainerItem_ErrorMask errorMask,
            bool doMasks = true,
            ContainerItem_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ContainerItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            ContainerItem_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ContainerItemCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            ContainerItem item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Item":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        property: item.Item_Property,
                        fieldIndex: (int)ContainerItem_FieldIndex.Item,
                        errorMask: errorMask);
                    break;
                case "Count":
                    try
                    {
                        errorMask?.PushIndex((int)ContainerItem_FieldIndex.Count);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 CountParse,
                            errorMask: errorMask))
                        {
                            item.Count = CountParse;
                        }
                        else
                        {
                            item.UnsetCount();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        #region IPropertySupporter UInt32
        protected ObjectCentralizationSubscriptions<UInt32> _UInt32_subscriptions;
        UInt32 IPropertySupporter<UInt32>.Get(int index)
        {
            return GetUInt32(index: index);
        }

        protected UInt32 GetUInt32(int index)
        {
            switch ((ContainerItem_FieldIndex)index)
            {
                case ContainerItem_FieldIndex.Count:
                    return Count;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        void IPropertySupporter<UInt32>.Set(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt32(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ContainerItem_FieldIndex)index)
            {
                case ContainerItem_FieldIndex.Count:
                    SetCount(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        bool IPropertySupporter<UInt32>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<UInt32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ContainerItem_FieldIndex)index)
            {
                case ContainerItem_FieldIndex.Count:
                    _hasBeenSetTracker[index] = false;
                    Count = default(UInt32);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt32_subscriptions == null)
            {
                _UInt32_subscriptions = new ObjectCentralizationSubscriptions<UInt32>();
            }
            _UInt32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt32 IPropertySupporter<UInt32>.DefaultValue(int index)
        {
            return DefaultValueUInt32(index: index);
        }

        protected UInt32 DefaultValueUInt32(int index)
        {
            switch ((ContainerItem_FieldIndex)index)
            {
                case ContainerItem_FieldIndex.Count:
                    return default(UInt32);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ContainerItem_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Item_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static ContainerItem Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ContainerItem Create_Binary(
            MutagenFrame frame,
            out ContainerItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ContainerItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static ContainerItem Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ContainerItem();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(ContainerItem_Registration.CNTO_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ContainerItem Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ContainerItem Create_Binary(
            string path,
            out ContainerItem_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static ContainerItem Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ContainerItem Create_Binary(
            Stream stream,
            out ContainerItem_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ContainerItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ContainerItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out ContainerItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ContainerItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ContainerItemCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            ContainerItem item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                property: item.Item_Property,
                fieldIndex: (int)ContainerItem_FieldIndex.Item,
                errorMask: errorMask);
            try
            {
                errorMask?.PushIndex((int)ContainerItem_FieldIndex.Count);
                if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt32 CountParse,
                    errorMask: errorMask))
                {
                    item.Count = CountParse;
                }
                else
                {
                    item.UnsetCount();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public ContainerItem Copy(
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null)
        {
            return ContainerItem.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ContainerItem Copy(
            IContainerItem item,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null)
        {
            ContainerItem ret;
            if (item.GetType().Equals(typeof(ContainerItem)))
            {
                ret = new ContainerItem();
            }
            else
            {
                ret = (ContainerItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ContainerItem Copy_ToLoqui(
            IContainerItemGetter item,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null)
        {
            ContainerItem ret;
            if (item.GetType().Equals(typeof(ContainerItem)))
            {
                ret = new ContainerItem() as ContainerItem;
            }
            else
            {
                ret = (ContainerItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IContainerItemGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IContainerItemGetter rhs,
            ContainerItem_CopyMask copyMask,
            IContainerItemGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IContainerItemGetter rhs,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ContainerItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = ContainerItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IContainerItemGetter rhs,
            ErrorMaskBuilder errorMask,
            ContainerItem_CopyMask copyMask = null,
            IContainerItemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ContainerItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    this.Item_Property.Set(
                        (FormIDLink<ItemAbstract>)obj,
                        cmds);
                    break;
                case ContainerItem_FieldIndex.Count:
                    this.SetCount(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ContainerItemCommon.Clear(this, cmds);
        }


        public static ContainerItem Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ContainerItem();
            foreach (var pair in fields)
            {
                CopyInInternal_ContainerItem(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ContainerItem(ContainerItem obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ContainerItem_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    obj.Item_Property.Set(
                        (FormIDLink<ItemAbstract>)pair.Value,
                        null);
                    break;
                case ContainerItem_FieldIndex.Count:
                    obj.SetCount(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ContainerItem obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IContainerItem : IContainerItemGetter, ILoquiClass<IContainerItem, IContainerItemGetter>, ILoquiClass<ContainerItem, IContainerItemGetter>
    {
        new ItemAbstract Item { get; set; }
        new UInt32 Count { get; set; }
        new INotifyingItem<UInt32> Count_Property { get; }

    }

    public partial interface IContainerItemGetter : ILoquiObject
    {
        #region Item
        ItemAbstract Item { get; }
        FormIDLink<ItemAbstract> Item_Property { get; }

        #endregion
        #region Count
        UInt32 Count { get; }
        INotifyingItemGetter<UInt32> Count_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ContainerItem_FieldIndex
    {
        Item = 0,
        Count = 1,
    }
    #endregion

    #region Registration
    public class ContainerItem_Registration : ILoquiRegistration
    {
        public static readonly ContainerItem_Registration Instance = new ContainerItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 72,
            version: 0);

        public const string GUID = "2cffd274-8e8f-4c07-8b09-679098c41712";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(ContainerItem_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ContainerItem_ErrorMask);

        public static readonly Type ClassType = typeof(ContainerItem);

        public static readonly Type GetterType = typeof(IContainerItemGetter);

        public static readonly Type SetterType = typeof(IContainerItem);

        public static readonly Type CommonType = typeof(ContainerItemCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ContainerItem";

        public const string Name = "ContainerItem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ITEM":
                    return (ushort)ContainerItem_FieldIndex.Item;
                case "COUNT":
                    return (ushort)ContainerItem_FieldIndex.Count;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    return "Item";
                case ContainerItem_FieldIndex.Count:
                    return "Count";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    return typeof(FormIDLink<ItemAbstract>);
                case ContainerItem_FieldIndex.Count:
                    return typeof(UInt32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CNTO_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ContainerItemCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IContainerItem item,
            IContainerItemGetter rhs,
            IContainerItemGetter def,
            ErrorMaskBuilder errorMask,
            ContainerItem_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Item ?? true)
            {
                errorMask.PushIndex((int)ContainerItem_FieldIndex.Item);
                try
                {
                    item.Item_Property.Set(
                        value: rhs.Item,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Count ?? true)
            {
                errorMask.PushIndex((int)ContainerItem_FieldIndex.Count);
                try
                {
                    item.Count_Property.Set(
                        value: rhs.Count,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IContainerItem obj,
            NotifyingFireParameters cmds = null)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IContainerItem obj,
            NotifyingUnsetParameters cmds = null)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    obj.Item = default(FormIDLink<ItemAbstract>);
                    break;
                case ContainerItem_FieldIndex.Count:
                    obj.Count = default(UInt32);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IContainerItem obj)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                case ContainerItem_FieldIndex.Count:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IContainerItemGetter obj)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    return obj.Item;
                case ContainerItem_FieldIndex.Count:
                    return obj.Count;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IContainerItem item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Item = default(FormIDLink<ItemAbstract>);
            item.Count = default(UInt32);
        }

        public static ContainerItem_Mask<bool> GetEqualsMask(
            this IContainerItemGetter item,
            IContainerItemGetter rhs)
        {
            var ret = new ContainerItem_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IContainerItemGetter item,
            IContainerItemGetter rhs,
            ContainerItem_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Item = item.Item == rhs.Item;
            ret.Count = item.Count == rhs.Count;
        }

        public static string ToString(
            this IContainerItemGetter item,
            string name = null,
            ContainerItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IContainerItemGetter item,
            FileGeneration fg,
            string name = null,
            ContainerItem_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ContainerItem)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ContainerItem)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Item ?? true)
                {
                    fg.AppendLine($"Item => {item.Item_Property}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {item.Count}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IContainerItemGetter item,
            ContainerItem_Mask<bool?> checkMask)
        {
            return true;
        }

        public static ContainerItem_Mask<bool> GetHasBeenSetMask(IContainerItemGetter item)
        {
            var ret = new ContainerItem_Mask<bool>();
            ret.Item = true;
            ret.Count = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IContainerItemGetter item,
            bool doMasks,
            out ContainerItem_ErrorMask errorMask,
            ContainerItem_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ContainerItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IContainerItemGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ContainerItem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ContainerItem");
            }
            if ((translationMask?.GetShouldTranslate((int)ContainerItem_FieldIndex.Item) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Item),
                    item: item.Item?.FormID,
                    fieldIndex: (int)ContainerItem_FieldIndex.Item,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ContainerItem_FieldIndex.Count) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Count),
                    item: item.Count_Property,
                    fieldIndex: (int)ContainerItem_FieldIndex.Count,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ContainerItem item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out ContainerItem_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = ContainerItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            ContainerItem item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ContainerItem_Registration.CNTO_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            ContainerItem item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Item_Property,
                fieldIndex: (int)ContainerItem_FieldIndex.Item,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Count_Property,
                fieldIndex: (int)ContainerItem_FieldIndex.Count,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class ContainerItem_Mask<T> : IMask<T>, IEquatable<ContainerItem_Mask<T>>
    {
        #region Ctors
        public ContainerItem_Mask()
        {
        }

        public ContainerItem_Mask(T initialValue)
        {
            this.Item = initialValue;
            this.Count = initialValue;
        }
        #endregion

        #region Members
        public T Item;
        public T Count;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ContainerItem_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ContainerItem_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Item, rhs.Item)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Item?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Item)) return false;
            if (!eval(this.Count)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ContainerItem_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ContainerItem_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ContainerItem_Mask<R> obj, Func<T, R> eval)
        {
            obj.Item = eval(this.Item);
            obj.Count = eval(this.Count);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ContainerItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ContainerItem_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ContainerItem_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Item ?? true)
                {
                    fg.AppendLine($"Item => {Item}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ContainerItem_ErrorMask : IErrorMask, IErrorMask<ContainerItem_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Item;
        public Exception Count;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    return Item;
                case ContainerItem_FieldIndex.Count:
                    return Count;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    this.Item = ex;
                    break;
                case ContainerItem_FieldIndex.Count:
                    this.Count = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ContainerItem_FieldIndex enu = (ContainerItem_FieldIndex)index;
            switch (enu)
            {
                case ContainerItem_FieldIndex.Item:
                    this.Item = (Exception)obj;
                    break;
                case ContainerItem_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Item != null) return true;
            if (Count != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ContainerItem_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Item => {Item}");
            fg.AppendLine($"Count => {Count}");
        }
        #endregion

        #region Combine
        public ContainerItem_ErrorMask Combine(ContainerItem_ErrorMask rhs)
        {
            var ret = new ContainerItem_ErrorMask();
            ret.Item = this.Item.Combine(rhs.Item);
            ret.Count = this.Count.Combine(rhs.Count);
            return ret;
        }
        public static ContainerItem_ErrorMask Combine(ContainerItem_ErrorMask lhs, ContainerItem_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ContainerItem_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ContainerItem_ErrorMask();
        }
        #endregion

    }
    public class ContainerItem_CopyMask
    {
        #region Members
        public bool Item;
        public bool Count;
        #endregion

    }
    public class ContainerItem_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Item;
        public bool Count;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Item, null));
            ret.Add((Count, null));
        }
    }
    #endregion





    #endregion

}
