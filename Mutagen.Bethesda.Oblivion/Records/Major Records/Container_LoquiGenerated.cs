/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Container :
        OblivionMajorRecord,
        IContainerInternal,
        ILoquiObjectSetter<Container>,
        INamed,
        ILinkSubContainer,
        IEquatable<Container>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Container_Registration.Instance;
        public new static Container_Registration Registration => Container_Registration.Instance;
        protected override object CommonInstance => ContainerCommon.Instance;

        #region Ctor
        protected Container()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Container_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Container_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IContainerGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IContainerGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Container_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Container_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Container_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool IContainerGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, hasBeenSet, (int)Container_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IContainerGetter.Model => this.Model;
        #endregion
        #region Script
        public IFormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Script> IContainer.Script_Property => this.Script_Property;
        IScriptInternalGetter IContainerGetter.Script => this.Script_Property.Item;
        IFormIDSetLinkGetter<IScriptInternalGetter> IContainerGetter.Script_Property => this.Script_Property;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<ContainerItem> _Items = new SourceSetList<ContainerItem>();
        public ISourceSetList<ContainerItem> Items => _Items;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<ContainerItem> IContainer.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IContainerItemGetter> IContainerGetter.Items => _Items;
        #endregion

        #endregion
        #region Flags
        private Container.ContainerFlag _Flags;
        public Container.ContainerFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Weight
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Weight, value, nameof(Weight));
            }
        }
        #endregion
        #region OpenSound
        public IFormIDSetLink<Sound> OpenSound_Property { get; } = new FormIDSetLink<Sound>();
        public Sound OpenSound { get => OpenSound_Property.Item; set => OpenSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Sound> IContainer.OpenSound_Property => this.OpenSound_Property;
        ISoundInternalGetter IContainerGetter.OpenSound => this.OpenSound_Property.Item;
        IFormIDSetLinkGetter<ISoundInternalGetter> IContainerGetter.OpenSound_Property => this.OpenSound_Property;
        #endregion
        #region CloseSound
        public IFormIDSetLink<Sound> CloseSound_Property { get; } = new FormIDSetLink<Sound>();
        public Sound CloseSound { get => CloseSound_Property.Item; set => CloseSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Sound> IContainer.CloseSound_Property => this.CloseSound_Property;
        ISoundInternalGetter IContainerGetter.CloseSound => this.CloseSound_Property.Item;
        IFormIDSetLinkGetter<ISoundInternalGetter> IContainerGetter.CloseSound_Property => this.CloseSound_Property;
        #endregion
        #region DATADataTypeState
        private Container.DATADataType _DATADataTypeState;
        public Container.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        Container.DATADataType IContainerInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        Container.DATADataType IContainerInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IContainerInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ContainerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IContainerInternalGetter rhs)) return false;
            return ((ContainerCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(Container obj)
        {
            return ((ContainerCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((ContainerCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => ContainerXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Container CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Container_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Container CreateFromXml(
            XElement node,
            out Container_ErrorMask errorMask,
            bool doMasks = true,
            Container_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Container_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Container CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Container() : null;
                    break;
                default:
                    break;
            }
            var ret = new Container();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ContainerXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Container CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Container_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Container CreateFromXml(
            string path,
            out Container_ErrorMask errorMask,
            Container_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Container CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Container_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Container CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Container_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Container CreateFromXml(
            Stream stream,
            out Container_ErrorMask errorMask,
            Container_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Container CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Container_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Container item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Container.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Container_FieldIndex)index)
            {
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case Container_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Container_FieldIndex.Items:
                    return Items.HasBeenSet;
                case Container_FieldIndex.OpenSound:
                    return OpenSound_Property.HasBeenSet;
                case Container_FieldIndex.CloseSound:
                    return CloseSound_Property.HasBeenSet;
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Container_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            foreach (var item in Items.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return OpenSound_Property;
            yield return CloseSound_Property;
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            Script_Property.Link(
                modList,
                sourceMod);
            foreach (var item in Items.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            OpenSound_Property.Link(
                modList,
                sourceMod);
            CloseSound_Property.Link(
                modList,
                sourceMod);
        }

        public Container(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Container(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(Container obj, Container rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Container(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => ContainerBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Container CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Container CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Container_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Container_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Container CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Container>(
                record: new Container(),
                frame: frame,
                errorMask: errorMask,
                recType: Container_Registration.CONT_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Container item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Container item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Container_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ContainerItem>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Container_Registration.CNTO_HEADER,
                        item: item.Items,
                        fieldIndex: (int)Container_FieldIndex.Items,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out ContainerItem listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<ContainerItem>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Items);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    if (EnumBinaryTranslation<Container.ContainerFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(1),
                        item: out Container.ContainerFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Container.ContainerFlag);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WeightParse))
                    {
                        item.Weight = WeightParse;
                    }
                    else
                    {
                        item.Weight = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Weight);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.OpenSound_Property);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.OpenSound);
                }
                case 0x4D414E51: // QNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.CloseSound_Property);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.CloseSound);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Container Copy(
            Container_CopyMask copyMask = null,
            Container def = null)
        {
            return Container.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Container Copy(
            Container item,
            Container_CopyMask copyMask = null,
            Container def = null)
        {
            Container ret;
            if (item.GetType().Equals(typeof(Container)))
            {
                ret = new Container();
            }
            else
            {
                ret = (Container)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Container Copy_ToLoqui(
            Container item,
            Container_CopyMask copyMask = null,
            Container def = null)
        {
            Container ret;
            if (item.GetType().Equals(typeof(Container)))
            {
                ret = new Container() as Container;
            }
            else
            {
                ret = (Container)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Container rhs,
            Container_CopyMask copyMask,
            Container def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Container rhs,
            out Container_ErrorMask errorMask,
            Container_CopyMask copyMask = null,
            Container def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ContainerCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Container_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Container rhs,
            ErrorMaskBuilder errorMask,
            Container_CopyMask copyMask = null,
            Container def = null)
        {
            ContainerCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Container_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Container_FieldIndex.Script:
                    this.Script_Property.Set((IFormIDSetLink<Script>)obj);
                    break;
                case Container_FieldIndex.Items:
                    this._Items.SetTo((ISetList<ContainerItem>)obj);
                    break;
                case Container_FieldIndex.Flags:
                    this.Flags = (Container.ContainerFlag)obj;
                    break;
                case Container_FieldIndex.Weight:
                    this.Weight = (Single)obj;
                    break;
                case Container_FieldIndex.OpenSound:
                    this.OpenSound_Property.Set((IFormIDSetLink<Sound>)obj);
                    break;
                case Container_FieldIndex.CloseSound:
                    this.CloseSound_Property.Set((IFormIDSetLink<Sound>)obj);
                    break;
                case Container_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Container.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            ContainerCommon.Instance.Clear(this);
        }

        public new static Container Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Container();
            foreach (var pair in fields)
            {
                CopyInInternal_Container(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Container(Container obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Container_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Container_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Container_FieldIndex.Script:
                    obj.Script_Property.Set((IFormIDSetLink<Script>)pair.Value);
                    break;
                case Container_FieldIndex.Items:
                    obj._Items.SetTo((ISetList<ContainerItem>)pair.Value);
                    break;
                case Container_FieldIndex.Flags:
                    obj.Flags = (Container.ContainerFlag)pair.Value;
                    break;
                case Container_FieldIndex.Weight:
                    obj.Weight = (Single)pair.Value;
                    break;
                case Container_FieldIndex.OpenSound:
                    obj.OpenSound_Property.Set((IFormIDSetLink<Sound>)pair.Value);
                    break;
                case Container_FieldIndex.CloseSound:
                    obj.CloseSound_Property.Set((IFormIDSetLink<Sound>)pair.Value);
                    break;
                case Container_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (Container.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IContainer :
        IContainerInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IContainerInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new ISetList<ContainerItem> Items { get; }
        new Container.ContainerFlag Flags { get; set; }

        new Single Weight { get; set; }

        new Sound OpenSound { get; set; }
        new IFormIDSetLink<Sound> OpenSound_Property { get; }
        new Sound CloseSound { get; set; }
        new IFormIDSetLink<Sound> CloseSound_Property { get; }
        void CopyFieldsFrom(
            Container rhs,
            ErrorMaskBuilder errorMask = null,
            Container_CopyMask copyMask = null,
            Container def = null);
    }

    public partial interface IContainerInternal :
        IOblivionMajorRecordInternal,
        IContainer,
        IContainerInternalGetter
    {
        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Sound OpenSound { get; set; }
        new IFormIDSetLink<Sound> OpenSound_Property { get; }
        new Sound CloseSound { get; set; }
        new IFormIDSetLink<Sound> CloseSound_Property { get; }
        new Container.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IContainerGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IContainerInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Script
        IScriptInternalGetter Script { get; }
        IFormIDSetLinkGetter<IScriptInternalGetter> Script_Property { get; }

        #endregion
        #region Items
        IReadOnlySetList<IContainerItemGetter> Items { get; }
        #endregion
        #region Flags
        Container.ContainerFlag Flags { get; }

        #endregion
        #region Weight
        Single Weight { get; }

        #endregion
        #region OpenSound
        ISoundInternalGetter OpenSound { get; }
        IFormIDSetLinkGetter<ISoundInternalGetter> OpenSound_Property { get; }

        #endregion
        #region CloseSound
        ISoundInternalGetter CloseSound { get; }
        IFormIDSetLinkGetter<ISoundInternalGetter> CloseSound_Property { get; }

        #endregion

    }

    public partial interface IContainerInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IContainerGetter
    {
        #region DATADataTypeState
        Container.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ContainerMixIn
    {
        public static void Clear(this IContainerInternal item)
        {
            ((ContainerCommon)item.CommonInstance).Clear(item: item);
        }

        public static Container_Mask<bool> GetEqualsMask(
            this IContainerInternalGetter item,
            IContainerInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ContainerCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IContainerInternalGetter item,
            string name = null,
            Container_Mask<bool> printMask = null)
        {
            return ((ContainerCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IContainerInternalGetter item,
            FileGeneration fg,
            string name = null,
            Container_Mask<bool> printMask = null)
        {
            ((ContainerCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IContainerInternalGetter item,
            Container_Mask<bool?> checkMask)
        {
            return ((ContainerCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Container_Mask<bool> GetHasBeenSetMask(this IContainerInternalGetter item)
        {
            var ret = new Container_Mask<bool>();
            ((ContainerCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IContainerInternalGetter item,
            IContainerInternalGetter rhs)
        {
            return ((ContainerCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Container_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        Items = 8,
        Flags = 9,
        Weight = 10,
        OpenSound = 11,
        CloseSound = 12,
        DATADataTypeState = 13,
    }
    #endregion

    #region Registration
    public class Container_Registration : ILoquiRegistration
    {
        public static readonly Container_Registration Instance = new Container_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 71,
            version: 0);

        public const string GUID = "066f0f2c-d0c7-4290-84f3-72ed6e07b160";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Container_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Container_ErrorMask);

        public static readonly Type ClassType = typeof(Container);

        public static readonly Type GetterType = typeof(IContainerGetter);

        public static readonly Type InternalGetterType = typeof(IContainerInternalGetter);

        public static readonly Type SetterType = typeof(IContainer);

        public static readonly Type InternalSetterType = typeof(IContainerInternal);

        public static readonly Type CommonType = typeof(ContainerCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Container";

        public const string Name = "Container";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Container_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Container_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Container_FieldIndex.Script;
                case "ITEMS":
                    return (ushort)Container_FieldIndex.Items;
                case "FLAGS":
                    return (ushort)Container_FieldIndex.Flags;
                case "WEIGHT":
                    return (ushort)Container_FieldIndex.Weight;
                case "OPENSOUND":
                    return (ushort)Container_FieldIndex.OpenSound;
                case "CLOSESOUND":
                    return (ushort)Container_FieldIndex.CloseSound;
                case "DATADATATYPESTATE":
                    return (ushort)Container_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Items:
                    return true;
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Items:
                    return true;
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    return "Name";
                case Container_FieldIndex.Model:
                    return "Model";
                case Container_FieldIndex.Script:
                    return "Script";
                case Container_FieldIndex.Items:
                    return "Items";
                case Container_FieldIndex.Flags:
                    return "Flags";
                case Container_FieldIndex.Weight:
                    return "Weight";
                case Container_FieldIndex.OpenSound:
                    return "OpenSound";
                case Container_FieldIndex.CloseSound:
                    return "CloseSound";
                case Container_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    return typeof(String);
                case Container_FieldIndex.Model:
                    return typeof(Model);
                case Container_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Container_FieldIndex.Items:
                    return typeof(ISetList<ContainerItem>);
                case Container_FieldIndex.Flags:
                    return typeof(Container.ContainerFlag);
                case Container_FieldIndex.Weight:
                    return typeof(Single);
                case Container_FieldIndex.OpenSound:
                    return typeof(IFormIDSetLink<Sound>);
                case Container_FieldIndex.CloseSound:
                    return typeof(IFormIDSetLink<Sound>);
                case Container_FieldIndex.DATADataTypeState:
                    return typeof(Container.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ContainerXmlWriteTranslation);
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType QNAM_HEADER = new RecordType("QNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CONT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(ContainerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ContainerCommon : OblivionMajorRecordCommon
    {
        public static readonly ContainerCommon Instance = new ContainerCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Container item,
            Container rhs,
            Container def,
            ErrorMaskBuilder errorMask,
            Container_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetLink(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault<ContainerItem, ContainerItem>(
                        rhs: rhs.Items,
                        def: def?.Items,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (ContainerItem)r;
                                case CopyOption.MakeCopy:
                                    return ContainerItem.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weight ?? true)
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Weight);
                try
                {
                    item.Weight = rhs.Weight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.OpenSound ?? true)
            {
                errorMask?.PushIndex((int)Container_FieldIndex.OpenSound);
                try
                {
                    item.OpenSound_Property.SetLink(
                        rhs: rhs.OpenSound_Property,
                        def: def?.OpenSound_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CloseSound ?? true)
            {
                errorMask?.PushIndex((int)Container_FieldIndex.CloseSound);
                try
                {
                    item.CloseSound_Property.SetLink(
                        rhs: rhs.CloseSound_Property,
                        def: def?.CloseSound_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IContainerInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Model_Unset();
            item.Script_Property.Unset();
            item.Items.Unset();
            item.Flags = default(Container.ContainerFlag);
            item.Weight = default(Single);
            item.OpenSound_Property.Unset();
            item.CloseSound_Property.Unset();
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IContainerInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IContainerInternal)item);
        }

        public Container_Mask<bool> GetEqualsMask(
            IContainerInternalGetter item,
            IContainerInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Container_Mask<bool>();
            ((ContainerCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IContainerInternalGetter item,
            IContainerInternalGetter rhs,
            Container_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.OpenSound = item.OpenSound_Property.FormKey == rhs.OpenSound_Property.FormKey;
            ret.CloseSound = item.CloseSound_Property.FormKey == rhs.CloseSound_Property.FormKey;
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IContainerInternalGetter item,
            string name = null,
            Container_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IContainerInternalGetter item,
            FileGeneration fg,
            string name = null,
            Container_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Container =>");
            }
            else
            {
                fg.AppendLine($"{name} (Container) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IContainerInternalGetter item,
            FileGeneration fg,
            Container_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script_Property}");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendLine($"Weight => {item.Weight}");
            }
            if (printMask?.OpenSound ?? true)
            {
                fg.AppendLine($"OpenSound => {item.OpenSound_Property}");
            }
            if (printMask?.CloseSound ?? true)
            {
                fg.AppendLine($"CloseSound => {item.CloseSound_Property}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IContainerInternalGetter item,
            Container_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            if (checkMask.OpenSound.HasValue && checkMask.OpenSound.Value != item.OpenSound_Property.HasBeenSet) return false;
            if (checkMask.CloseSound.HasValue && checkMask.CloseSound.Value != item.CloseSound_Property.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IContainerInternalGetter item,
            Container_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Script = item.Script_Property.HasBeenSet;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ContainerItem_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.WithIndex().Select((i) => new MaskItemIndexed<bool, ContainerItem_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Flags = true;
            mask.Weight = true;
            mask.OpenSound = item.OpenSound_Property.HasBeenSet;
            mask.CloseSound = item.CloseSound_Property.HasBeenSet;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Container_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Container_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Container_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Container_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Container_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Container_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Container_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Container_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IContainerInternalGetter lhs,
            IContainerInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (lhs.Script_Property.HasBeenSet)
            {
                if (!lhs.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (lhs.Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (lhs.Items.HasBeenSet)
            {
                if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            }
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.OpenSound_Property.HasBeenSet != rhs.OpenSound_Property.HasBeenSet) return false;
            if (lhs.OpenSound_Property.HasBeenSet)
            {
                if (!lhs.OpenSound_Property.Equals(rhs.OpenSound_Property)) return false;
            }
            if (lhs.CloseSound_Property.HasBeenSet != rhs.CloseSound_Property.HasBeenSet) return false;
            if (lhs.CloseSound_Property.HasBeenSet)
            {
                if (!lhs.CloseSound_Property.Equals(rhs.CloseSound_Property)) return false;
            }
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IContainerInternalGetter)lhs,
                rhs: rhs as IContainerInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IContainerInternalGetter)lhs,
                rhs: rhs as IContainerInternalGetter);
        }

        public virtual int GetHashCode(IContainerInternalGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            if (item.Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Items).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Weight).CombineHashCode(ret);
            if (item.OpenSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.OpenSound).CombineHashCode(ret);
            }
            if (item.CloseSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.CloseSound).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IContainerInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IContainerInternalGetter)item);
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ContainerXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ContainerXmlWriteTranslation Instance = new ContainerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IContainerInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Container_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Container_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Container_FieldIndex.Model));
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)Container_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Items.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IContainerItemGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)Container_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Container_FieldIndex.Items),
                    transl: (XElement subNode, IContainerItemGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ContainerItemXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.DATADataTypeState.HasFlag(Container.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Container_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Container.ContainerFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Container_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Container_FieldIndex.Weight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight,
                        fieldIndex: (int)Container_FieldIndex.Weight,
                        errorMask: errorMask);
                }
            }
            if (item.OpenSound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.OpenSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OpenSound),
                    item: item.OpenSound_Property?.FormKey,
                    fieldIndex: (int)Container_FieldIndex.OpenSound,
                    errorMask: errorMask);
            }
            if (item.CloseSound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.CloseSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CloseSound),
                    item: item.CloseSound_Property?.FormKey,
                    fieldIndex: (int)Container_FieldIndex.CloseSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Container_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Container.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Container_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IContainerInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Container");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Container");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IContainerInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IContainerInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IContainerInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ContainerXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static ContainerXmlCreateTranslation Instance = new ContainerXmlCreateTranslation();

        public static void FillPublicXml(
            IContainerInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ContainerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IContainerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Container_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Container_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Container_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)Container_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Items":
                    try
                    {
                        errorMask?.PushIndex((int)Container_FieldIndex.Items);
                        if (ListXmlTranslation<ContainerItem>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ContainerItem>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Container_FieldIndex.Flags);
                        if (EnumXmlTranslation<Container.ContainerFlag>.Instance.Parse(
                            node: node,
                            item: out Container.ContainerFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Container.ContainerFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Container.DATADataType.Has;
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Container_FieldIndex.Weight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WeightParse,
                            errorMask: errorMask))
                        {
                            item.Weight = WeightParse;
                        }
                        else
                        {
                            item.Weight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OpenSound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.OpenSound_Property,
                        fieldIndex: (int)Container_FieldIndex.OpenSound,
                        errorMask: errorMask);
                    break;
                case "CloseSound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.CloseSound_Property,
                        fieldIndex: (int)Container_FieldIndex.CloseSound,
                        errorMask: errorMask);
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Container_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<Container.DATADataType>.Instance.Parse(
                            node: node,
                            item: out Container.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(Container.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class ContainerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IContainerInternalGetter item,
            XElement node,
            out Container_ErrorMask errorMask,
            bool doMasks = true,
            Container_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ContainerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Container_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IContainerInternalGetter item,
            string path,
            out Container_ErrorMask errorMask,
            Container_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IContainerInternalGetter item,
            Stream stream,
            out Container_ErrorMask errorMask,
            Container_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Container_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Container_Mask<T>>
    {
        #region Ctors
        public Container_Mask()
        {
        }

        public Container_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Script = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, ContainerItem_Mask<T>>>>(initialValue, null);
            this.Flags = initialValue;
            this.Weight = initialValue;
            this.OpenSound = initialValue;
            this.CloseSound = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Script;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, ContainerItem_Mask<T>>>> Items;
        public T Flags;
        public T Weight;
        public T OpenSound;
        public T CloseSound;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Container_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Container_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.OpenSound, rhs.OpenSound)) return false;
            if (!object.Equals(this.CloseSound, rhs.CloseSound)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.OpenSound?.GetHashCode());
            ret = ret.CombineHashCode(this.CloseSound?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Script)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.OpenSound)) return false;
            if (!eval(this.CloseSound)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Container_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Container_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Container_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Script = eval(this.Script);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerItem_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItemIndexed<R, ContainerItem_Mask<R>>> l = new List<MaskItemIndexed<R, ContainerItem_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, ContainerItem_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, ContainerItem_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Flags = eval(this.Flags);
            obj.Weight = eval(this.Weight);
            obj.OpenSound = eval(this.OpenSound);
            obj.CloseSound = eval(this.CloseSound);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Items.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Container_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Container_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Container_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.OpenSound ?? true)
                {
                    fg.AppendLine($"OpenSound => {OpenSound}");
                }
                if (printMask?.CloseSound ?? true)
                {
                    fg.AppendLine($"CloseSound => {CloseSound}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Container_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Container_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Script;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ContainerItem_ErrorMask>>> Items;
        public Exception Flags;
        public Exception Weight;
        public Exception OpenSound;
        public Exception CloseSound;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    return Name;
                case Container_FieldIndex.Model:
                    return Model;
                case Container_FieldIndex.Script:
                    return Script;
                case Container_FieldIndex.Items:
                    return Items;
                case Container_FieldIndex.Flags:
                    return Flags;
                case Container_FieldIndex.Weight:
                    return Weight;
                case Container_FieldIndex.OpenSound:
                    return OpenSound;
                case Container_FieldIndex.CloseSound:
                    return CloseSound;
                case Container_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Container_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Container_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Container_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ContainerItem_ErrorMask>>>(ex, null);
                    break;
                case Container_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Container_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Container_FieldIndex.OpenSound:
                    this.OpenSound = ex;
                    break;
                case Container_FieldIndex.CloseSound:
                    this.CloseSound = ex;
                    break;
                case Container_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Container_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Container_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Container_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ContainerItem_ErrorMask>>>)obj;
                    break;
                case Container_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Container_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Container_FieldIndex.OpenSound:
                    this.OpenSound = (Exception)obj;
                    break;
                case Container_FieldIndex.CloseSound:
                    this.CloseSound = (Exception)obj;
                    break;
                case Container_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Script != null) return true;
            if (Items != null) return true;
            if (Flags != null) return true;
            if (Weight != null) return true;
            if (OpenSound != null) return true;
            if (CloseSound != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Container_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"OpenSound => {OpenSound}");
            fg.AppendLine($"CloseSound => {CloseSound}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Container_ErrorMask Combine(Container_ErrorMask rhs)
        {
            var ret = new Container_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ContainerItem_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, ContainerItem_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.OpenSound = this.OpenSound.Combine(rhs.OpenSound);
            ret.CloseSound = this.CloseSound.Combine(rhs.CloseSound);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Container_ErrorMask Combine(Container_ErrorMask lhs, Container_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Container_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Container_ErrorMask();
        }
        #endregion

    }
    public class Container_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Container_CopyMask()
        {
        }

        public Container_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Script = defaultOn;
            this.Items = new MaskItem<CopyOption, ContainerItem_CopyMask>(deepCopyOption, default);
            this.Flags = defaultOn;
            this.Weight = defaultOn;
            this.OpenSound = defaultOn;
            this.CloseSound = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Script;
        public MaskItem<CopyOption, ContainerItem_CopyMask> Items;
        public bool Flags;
        public bool Weight;
        public bool OpenSound;
        public bool CloseSound;
        public bool DATADataTypeState;
        #endregion

    }

    public class Container_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Script;
        public MaskItem<bool, ContainerItem_TranslationMask> Items;
        public bool Flags;
        public bool Weight;
        public bool OpenSound;
        public bool CloseSound;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Container_TranslationMask()
            : base()
        {
        }

        public Container_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Script = defaultOn;
            this.Items = new MaskItem<bool, ContainerItem_TranslationMask>(defaultOn, null);
            this.Flags = defaultOn;
            this.Weight = defaultOn;
            this.OpenSound = defaultOn;
            this.CloseSound = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Script, null));
            ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
            ret.Add((Flags, null));
            ret.Add((Weight, null));
            ret.Add((OpenSound, null));
            ret.Add((CloseSound, null));
            ret.Add((DATADataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ContainerBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ContainerBinaryWriteTranslation Instance = new ContainerBinaryWriteTranslation();

        public static void Write_Embedded(
            IContainerInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IContainerInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Container_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    header: recordTypeConverter.ConvertToCustom(Container_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Items.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IContainerItemGetter>.Instance.Write(
                    writer: writer,
                    items: item.Items,
                    fieldIndex: (int)Container_FieldIndex.Items,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IContainerItemGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((ContainerItemBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.DATADataTypeState.HasFlag(Container.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Container_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Container.ContainerFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight);
                }
            }
            if (item.OpenSound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OpenSound_Property,
                    header: recordTypeConverter.ConvertToCustom(Container_Registration.SNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.CloseSound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CloseSound_Property,
                    header: recordTypeConverter.ConvertToCustom(Container_Registration.QNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            IContainerInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Container_Registration.CONT_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IContainerInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IContainerInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IContainerInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ContainerBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static ContainerBinaryCreateTranslation Instance = new ContainerBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class ContainerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IContainerInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Container_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ContainerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Container_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class ContainerBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IContainerInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Container_Registration.Instance;
        public new static Container_Registration Registration => Container_Registration.Instance;
        protected override object CommonInstance => ContainerCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IContainerInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => ContainerXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => ContainerBinaryWriteTranslation.Instance;

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptInternalGetter> Script_Property => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptInternalGetter>.Empty;
        public IScriptInternalGetter Script => default;
        #endregion
        public IReadOnlySetList<IContainerItemGetter> Items { get; private set; } = EmptySetList<ContainerItemBinaryWrapper>.Instance;
        private int? _DATALocation;
        public Container.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation.Value + 0x0;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Container.ContainerFlag Flags => _Flags_IsSet ? (Container.ContainerFlag)_data.Span.Slice(_FlagsLocation, 1)[0] : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation.Value + 0x1;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WeightLocation, 4)) : default;
        #endregion
        #region OpenSound
        private int? _OpenSoundLocation;
        public bool OpenSound_IsSet => _OpenSoundLocation.HasValue;
        public IFormIDSetLinkGetter<ISoundInternalGetter> OpenSound_Property => _OpenSoundLocation.HasValue ? new FormIDSetLink<ISoundInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OpenSoundLocation.Value, _package.Meta)))) : FormIDSetLink<ISoundInternalGetter>.Empty;
        public ISoundInternalGetter OpenSound => default;
        #endregion
        #region CloseSound
        private int? _CloseSoundLocation;
        public bool CloseSound_IsSet => _CloseSoundLocation.HasValue;
        public IFormIDSetLinkGetter<ISoundInternalGetter> CloseSound_Property => _CloseSoundLocation.HasValue ? new FormIDSetLink<ISoundInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CloseSoundLocation.Value, _package.Meta)))) : FormIDSetLink<ISoundInternalGetter>.Empty;
        public ISoundInternalGetter CloseSound => default;
        #endregion
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected ContainerBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ContainerBinaryWrapper ContainerFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ContainerBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(stream, offset);
            UtilityTranslation.FillSubrecordTypesForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                meta: ret._package.Meta,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    this.Items = BinaryWrapperSetList<ContainerItemBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ContainerItemBinaryWrapper.ContainerItemFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: UtilityTranslation.ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Items);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Container.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Weight);
                }
                case 0x4D414E53: // SNAM
                {
                    _OpenSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.OpenSound);
                }
                case 0x4D414E51: // QNAM
                {
                    _CloseSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.CloseSound);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
    }

    #endregion

    #endregion

}
