/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Container : NamedMajorRecord, IContainer, ILoquiObjectSetter, IEquatable<Container>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Container_Registration.Instance;
        public new static Container_Registration Registration => Container_Registration.Instance;

        #region Ctor
        public Container()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _Model = new NotifyingSetItem<Model>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public INotifyingSetItem<Model> Model_Property => this._Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IContainerGetter.Model => this.Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IContainer.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IContainerGetter.Model_Property => this.Model_Property;
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> IContainerGetter.Script_Property => this.Script_Property;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<ContainerItem> _Items = new NotifyingList<ContainerItem>();
        public INotifyingList<ContainerItem> Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ContainerItem> ItemsEnumerable
        {
            get => _Items;
            set => _Items.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<ContainerItem> IContainer.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<ContainerItem> IContainerGetter.Items => _Items;
        #endregion

        #endregion
        #region Flags
        protected readonly INotifyingItem<Container.ContainerFlag> _Flags = NotifyingItem.Factory<Container.ContainerFlag>();
        public INotifyingItem<Container.ContainerFlag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Container.ContainerFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Container.ContainerFlag> IContainer.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Container.ContainerFlag> IContainerGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Weight
        protected readonly INotifyingItem<Single> _Weight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Weight_Property => _Weight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Weight
        {
            get => this._Weight.Item;
            set => this._Weight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IContainer.Weight_Property => this.Weight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IContainerGetter.Weight_Property => this.Weight_Property;
        #endregion
        #region OpenSound
        public FormIDSetLink<Sound> OpenSound_Property { get; } = new FormIDSetLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Sound OpenSound { get => OpenSound_Property.Item; set => OpenSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Sound> IContainerGetter.OpenSound_Property => this.OpenSound_Property;
        #endregion
        #region CloseSound
        public FormIDSetLink<Sound> CloseSound_Property { get; } = new FormIDSetLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Sound CloseSound { get => CloseSound_Property.Item; set => CloseSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Sound> IContainerGetter.CloseSound_Property => this.CloseSound_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ContainerCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ContainerCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ContainerCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ContainerCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ContainerCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Container_Mask<bool> printMask = null)
        {
            return ContainerCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ContainerCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Container_Mask<bool> GetHasBeenSetMask()
        {
            return ContainerCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Container rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Container rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(Model, rhs.Model)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (Script != rhs.Script) return false;
            }
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!Items.SequenceEqual(rhs.Items)) return false;
            }
            if (Flags != rhs.Flags) return false;
            if (Weight != rhs.Weight) return false;
            if (OpenSound_Property.HasBeenSet != rhs.OpenSound_Property.HasBeenSet) return false;
            if (OpenSound_Property.HasBeenSet)
            {
                if (OpenSound != rhs.OpenSound) return false;
            }
            if (CloseSound_Property.HasBeenSet != rhs.CloseSound_Property.HasBeenSet) return false;
            if (CloseSound_Property.HasBeenSet)
            {
                if (CloseSound != rhs.CloseSound) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            if (OpenSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(OpenSound).CombineHashCode(ret);
            }
            if (CloseSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CloseSound).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Container Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Container Create_XML(
            XElement root,
            out Container_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Container Create_XML(
            XElement root,
            bool doMasks,
            out Container_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Container Object, Container_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Container_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Container_ErrorMask()) : default(Func<Container_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Container Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Container Create_XML(
            string path,
            out Container_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Container Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Container Create_XML(
            Stream stream,
            out Container_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Container, Container_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Container_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Container, Container_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Container_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Container_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Container_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Container_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Container_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Container_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Container_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Container_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ContainerCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Container Create_XML_Internal(
            XElement root,
            Func<Container_ErrorMask> errorMask)
        {
            var ret = new Container();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Container item,
            XElement root,
            string name,
            Func<Container_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Model":
                    item._Model.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Container_FieldIndex.Model,
                        errorMask: errorMask));
                    break;
                case "Script":
                    item.Script_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Container_FieldIndex.Script,
                        errorMask: errorMask));
                    break;
                case "Items":
                    item._Items.SetIfSucceeded(ListXmlTranslation<ContainerItem, MaskItem<Exception, ContainerItem_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Container_FieldIndex.Items,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, ContainerItem_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<ContainerItem, ContainerItem_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<Container.ContainerFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Container_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Weight":
                    item._Weight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Container_FieldIndex.Weight,
                        errorMask: errorMask));
                    break;
                case "OpenSound":
                    item.OpenSound_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Container_FieldIndex.OpenSound,
                        errorMask: errorMask));
                    break;
                case "CloseSound":
                    item.CloseSound_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Container_FieldIndex.CloseSound,
                        errorMask: errorMask));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            foreach (var item in Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return OpenSound_Property;
            yield return CloseSound_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Container Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Container Create_Binary(
            MutagenFrame frame,
            out Container_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Container Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Container_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Container Object, Container_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Container_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Container_ErrorMask()) : default(Func<Container_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Container Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Container Create_Binary(
            string path,
            out Container_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Container Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Container Create_Binary(
            Stream stream,
            out Container_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Container, Container_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Container_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Container, Container_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Container_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Container_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Container_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Container_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Container_ErrorMask errorMask)
        {
            errorMask = (Container_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Container_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Container_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            ContainerCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Container Create_Binary_Internal(
            MutagenFrame frame,
            Func<Container_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Container, Container_ErrorMask, Container_FieldIndex>(
                record: new Container(),
                frame: frame,
                errorMask: errorMask,
                recType: Container_Registration.CONT_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Container item,
            MutagenFrame frame,
            Func<Container_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Container_FieldIndex?> Fill_Binary_RecordTypes(
            Container item,
            MutagenFrame frame,
            Func<Container_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    item._Model.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Container_FieldIndex.Model,
                        errorMask: errorMask));
                    return TryGet<Container_FieldIndex?>.Succeed(Container_FieldIndex.Model);
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Script_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Container_FieldIndex.Script,
                        errorMask: errorMask));
                    return TryGet<Container_FieldIndex?>.Succeed(Container_FieldIndex.Script);
                case "CNTO":
                    var ItemstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<ContainerItem, MaskItem<Exception, ContainerItem_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Container_Registration.CNTO_HEADER,
                        fieldIndex: (int)Container_FieldIndex.Items,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, ContainerItem_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<ContainerItem, ContainerItem_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Items.SetIfSucceeded(ItemstryGet);
                    return TryGet<Container_FieldIndex?>.Succeed(Container_FieldIndex.Items);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Container.ContainerFlag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(1)),
                            fieldIndex: (int)Container_FieldIndex.Flags,
                            errorMask: errorMask));
                        item._Weight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Container_FieldIndex.Weight,
                            errorMask: errorMask));
                    }
                    return TryGet<Container_FieldIndex?>.Succeed(Container_FieldIndex.Weight);
                case "SNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.OpenSound_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Container_FieldIndex.OpenSound,
                        errorMask: errorMask));
                    return TryGet<Container_FieldIndex?>.Succeed(Container_FieldIndex.OpenSound);
                case "QNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.CloseSound_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Container_FieldIndex.CloseSound,
                        errorMask: errorMask));
                    return TryGet<Container_FieldIndex?>.Succeed(Container_FieldIndex.CloseSound);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => ContainerCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Container Copy(
            Container_CopyMask copyMask = null,
            IContainerGetter def = null)
        {
            return Container.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Container Copy(
            IContainer item,
            Container_CopyMask copyMask = null,
            IContainerGetter def = null)
        {
            Container ret;
            if (item.GetType().Equals(typeof(Container)))
            {
                ret = new Container();
            }
            else
            {
                ret = (Container)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Container_CopyMask copyMask = null,
            IContainerGetter def = null)
            where CopyType : class, IContainer
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Container)))
            {
                ret = new Container() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Container Copy_ToLoqui(
            IContainerGetter item,
            Container_CopyMask copyMask = null,
            IContainerGetter def = null)
        {
            Container ret;
            if (item.GetType().Equals(typeof(Container)))
            {
                ret = new Container() as Container;
            }
            else
            {
                ret = (Container)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Container_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case Container_FieldIndex.Items:
                    this._Items.SetTo((IEnumerable<ContainerItem>)obj, cmds);
                    break;
                case Container_FieldIndex.Flags:
                    this._Flags.Set(
                        (Container.ContainerFlag)obj,
                        cmds);
                    break;
                case Container_FieldIndex.Weight:
                    this._Weight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Container_FieldIndex.OpenSound:
                    this.OpenSound_Property.Set(
                        (FormIDSetLink<Sound>)obj,
                        cmds);
                    break;
                case Container_FieldIndex.CloseSound:
                    this.CloseSound_Property.Set(
                        (FormIDSetLink<Sound>)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ContainerCommon.Clear(this, cmds);
        }


        public new static Container Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Container();
            foreach (var pair in fields)
            {
                CopyInInternal_Container(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Container(Container obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Container_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Container_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Container_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case Container_FieldIndex.Items:
                    obj._Items.SetTo((IEnumerable<ContainerItem>)pair.Value, null);
                    break;
                case Container_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Container.ContainerFlag)pair.Value,
                        null);
                    break;
                case Container_FieldIndex.Weight:
                    obj._Weight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Container_FieldIndex.OpenSound:
                    obj.OpenSound_Property.Set(
                        (FormIDSetLink<Sound>)pair.Value,
                        null);
                    break;
                case Container_FieldIndex.CloseSound:
                    obj.CloseSound_Property.Set(
                        (FormIDSetLink<Sound>)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Container obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IContainer : IContainerGetter, INamedMajorRecord, ILoquiClass<IContainer, IContainerGetter>, ILoquiClass<Container, IContainerGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new Script Script { get; set; }
        new INotifyingList<ContainerItem> Items { get; }
        new Container.ContainerFlag Flags { get; set; }
        new INotifyingItem<Container.ContainerFlag> Flags_Property { get; }

        new Single Weight { get; set; }
        new INotifyingItem<Single> Weight_Property { get; }

        new Sound OpenSound { get; set; }
        new Sound CloseSound { get; set; }
    }

    public interface IContainerGetter : INamedMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Items
        INotifyingListGetter<ContainerItem> Items { get; }
        #endregion
        #region Flags
        Container.ContainerFlag Flags { get; }
        INotifyingItemGetter<Container.ContainerFlag> Flags_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        INotifyingItemGetter<Single> Weight_Property { get; }

        #endregion
        #region OpenSound
        Sound OpenSound { get; }
        FormIDSetLink<Sound> OpenSound_Property { get; }

        #endregion
        #region CloseSound
        Sound CloseSound { get; }
        FormIDSetLink<Sound> CloseSound_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Container_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        Items = 8,
        Flags = 9,
        Weight = 10,
        OpenSound = 11,
        CloseSound = 12,
    }
    #endregion

    #region Registration
    public class Container_Registration : ILoquiRegistration
    {
        public static readonly Container_Registration Instance = new Container_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 71,
            version: 0);

        public const string GUID = "066f0f2c-d0c7-4290-84f3-72ed6e07b160";

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Container_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Container_ErrorMask);

        public static readonly Type ClassType = typeof(Container);

        public static readonly Type GetterType = typeof(IContainerGetter);

        public static readonly Type SetterType = typeof(IContainer);

        public static readonly Type CommonType = typeof(ContainerCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Container";

        public const string Name = "Container";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Container_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Container_FieldIndex.Script;
                case "ITEMS":
                    return (ushort)Container_FieldIndex.Items;
                case "FLAGS":
                    return (ushort)Container_FieldIndex.Flags;
                case "WEIGHT":
                    return (ushort)Container_FieldIndex.Weight;
                case "OPENSOUND":
                    return (ushort)Container_FieldIndex.OpenSound;
                case "CLOSESOUND":
                    return (ushort)Container_FieldIndex.CloseSound;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Items:
                    return true;
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Items:
                    return true;
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                    return "Model";
                case Container_FieldIndex.Script:
                    return "Script";
                case Container_FieldIndex.Items:
                    return "Items";
                case Container_FieldIndex.Flags:
                    return "Flags";
                case Container_FieldIndex.Weight:
                    return "Weight";
                case Container_FieldIndex.OpenSound:
                    return "OpenSound";
                case Container_FieldIndex.CloseSound:
                    return "CloseSound";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                    return typeof(Model);
                case Container_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Container_FieldIndex.Items:
                    return typeof(NotifyingList<ContainerItem>);
                case Container_FieldIndex.Flags:
                    return typeof(Container.ContainerFlag);
                case Container_FieldIndex.Weight:
                    return typeof(Single);
                case Container_FieldIndex.OpenSound:
                    return typeof(FormIDSetLink<Sound>);
                case Container_FieldIndex.CloseSound:
                    return typeof(FormIDSetLink<Sound>);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType QNAM_HEADER = new RecordType("QNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CONT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ContainerCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IContainer item,
            IContainerGetter rhs,
            Container_CopyMask copyMask = null,
            IContainerGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            ContainerCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IContainer item,
            IContainerGetter rhs,
            out Container_ErrorMask errorMask,
            Container_CopyMask copyMask = null,
            IContainerGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            ContainerCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IContainer item,
            IContainerGetter rhs,
            IContainerGetter def,
            bool doMasks,
            out Container_ErrorMask errorMask,
            Container_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            Container_ErrorMask retErrorMask = null;
            Func<Container_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Container_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IContainer item,
            IContainerGetter rhs,
            IContainerGetter def,
            bool doMasks,
            Func<Container_ErrorMask> errorMask,
            Container_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Model.Specific == null)
                                            {
                                                baseMask.Model = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.Model.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Container_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.Script ?? true)
            {
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Container_FieldIndex.Script, ex);
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Items.SetToWithDefault(
                        rhs: rhs.Items,
                        def: def?.Items,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ContainerItem);
                                    return ContainerItem.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Container_FieldIndex.Items, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Container_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.Weight ?? true)
            {
                try
                {
                    item.Weight_Property.Set(
                        value: rhs.Weight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Container_FieldIndex.Weight, ex);
                }
            }
            if (copyMask?.OpenSound ?? true)
            {
                try
                {
                    item.OpenSound_Property.SetToWithDefault(
                        rhs: rhs.OpenSound_Property,
                        def: def?.OpenSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Container_FieldIndex.OpenSound, ex);
                }
            }
            if (copyMask?.CloseSound ?? true)
            {
                try
                {
                    item.CloseSound_Property.SetToWithDefault(
                        rhs: rhs.CloseSound_Property,
                        def: def?.CloseSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Container_FieldIndex.CloseSound, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IContainer obj,
            NotifyingFireParameters cmds = null)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Container_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Container_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case Container_FieldIndex.Items:
                    obj.Items.HasBeenSet = on;
                    break;
                case Container_FieldIndex.OpenSound:
                    obj.OpenSound_Property.HasBeenSet = on;
                    break;
                case Container_FieldIndex.CloseSound:
                    obj.CloseSound_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IContainer obj,
            NotifyingUnsetParameters cmds = null)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Container_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case Container_FieldIndex.Items:
                    obj.Items.Unset(cmds);
                    break;
                case Container_FieldIndex.Flags:
                    obj.Flags = default(Container.ContainerFlag);
                    break;
                case Container_FieldIndex.Weight:
                    obj.Weight = default(Single);
                    break;
                case Container_FieldIndex.OpenSound:
                    obj.OpenSound_Property.Unset(cmds);
                    break;
                case Container_FieldIndex.CloseSound:
                    obj.CloseSound_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IContainer obj)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                    return true;
                case Container_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Container_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case Container_FieldIndex.Items:
                    return obj.Items.HasBeenSet;
                case Container_FieldIndex.OpenSound:
                    return obj.OpenSound_Property.HasBeenSet;
                case Container_FieldIndex.CloseSound:
                    return obj.CloseSound_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IContainerGetter obj)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                    return obj.Model;
                case Container_FieldIndex.Script:
                    return obj.Script;
                case Container_FieldIndex.Items:
                    return obj.Items;
                case Container_FieldIndex.Flags:
                    return obj.Flags;
                case Container_FieldIndex.Weight:
                    return obj.Weight;
                case Container_FieldIndex.OpenSound:
                    return obj.OpenSound;
                case Container_FieldIndex.CloseSound:
                    return obj.CloseSound;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IContainer item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Items.Unset(cmds.ToUnsetParams());
            item.Flags = default(Container.ContainerFlag);
            item.Weight = default(Single);
            item.OpenSound_Property.Unset(cmds.ToUnsetParams());
            item.CloseSound_Property.Unset(cmds.ToUnsetParams());
        }

        public static Container_Mask<bool> GetEqualsMask(
            this IContainerGetter item,
            IContainerGetter rhs)
        {
            var ret = new Container_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IContainerGetter item,
            IContainerGetter rhs,
            Container_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            if (item.Items.HasBeenSet == rhs.Items.HasBeenSet)
            {
                if (item.Items.HasBeenSet)
                {
                    ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ContainerItem_Mask<bool>>>>();
                    ret.Items.Specific = item.Items.SelectAgainst<ContainerItem, MaskItem<bool, ContainerItem_Mask<bool>>>(rhs.Items, ((l, r) =>
                    {
                        MaskItem<bool, ContainerItem_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => ContainerItemCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Items.Overall);
                    ret.Items.Overall = ret.Items.Overall && ret.Items.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ContainerItem_Mask<bool>>>>();
                    ret.Items.Overall = true;
                }
            }
            else
            {
                ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ContainerItem_Mask<bool>>>>();
                ret.Items.Overall = false;
            }
            ret.Flags = item.Flags == rhs.Flags;
            ret.Weight = item.Weight == rhs.Weight;
            ret.OpenSound = item.OpenSound_Property.Equals(rhs.OpenSound_Property, (l, r) => l == r);
            ret.CloseSound = item.CloseSound_Property.Equals(rhs.CloseSound_Property, (l, r) => l == r);
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IContainerGetter item,
            string name = null,
            Container_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IContainerGetter item,
            FileGeneration fg,
            string name = null,
            Container_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Container)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Container)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {item.Weight}");
                }
                if (printMask?.OpenSound ?? true)
                {
                    fg.AppendLine($"OpenSound => {item.OpenSound}");
                }
                if (printMask?.CloseSound ?? true)
                {
                    fg.AppendLine($"CloseSound => {item.CloseSound}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IContainerGetter item,
            Container_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model_Property.Item == null || !item.Model_Property.Item.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            if (checkMask.OpenSound.HasValue && checkMask.OpenSound.Value != item.OpenSound_Property.HasBeenSet) return false;
            if (checkMask.CloseSound.HasValue && checkMask.CloseSound.Value != item.CloseSound_Property.HasBeenSet) return false;
            return true;
        }

        public static Container_Mask<bool> GetHasBeenSetMask(IContainerGetter item)
        {
            var ret = new Container_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model_Property.Item));
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ContainerItem_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.Select((i) => new MaskItem<bool, ContainerItem_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Flags = true;
            ret.Weight = true;
            ret.OpenSound = item.OpenSound_Property.HasBeenSet;
            ret.CloseSound = item.CloseSound_Property.HasBeenSet;
            return ret;
        }

        public static Container_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Container_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Container_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Container_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Container_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Container_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Container_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Container_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Container_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Container_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Container_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IContainerGetter item,
            bool doMasks,
            out Container_ErrorMask errorMask,
            string name = null)
        {
            Container_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Container_ErrorMask()) : default(Func<Container_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IContainerGetter item,
            Func<Container_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Container"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Container");
                    }
                    if (item.Model_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Model_Property,
                            name: nameof(item.Model),
                            fieldIndex: (int)Container_FieldIndex.Model,
                            errorMask: errorMask);
                    }
                    if (item.Script_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Script),
                            item: item.Script?.FormID,
                            fieldIndex: (int)Container_FieldIndex.Script,
                            errorMask: errorMask);
                    }
                    if (item.Items.HasBeenSet)
                    {
                        ListXmlTranslation<ContainerItem, MaskItem<Exception, ContainerItem_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Items),
                            item: item.Items,
                            fieldIndex: (int)Container_FieldIndex.Items,
                            errorMask: errorMask,
                            transl: (ContainerItem subItem, bool listDoMasks, out MaskItem<Exception, ContainerItem_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<ContainerItem, ContainerItem_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    EnumXmlTranslation<Container.ContainerFlag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Flags),
                        item: item.Flags_Property,
                        fieldIndex: (int)Container_FieldIndex.Flags,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Weight),
                        item: item.Weight_Property,
                        fieldIndex: (int)Container_FieldIndex.Weight,
                        errorMask: errorMask);
                    if (item.OpenSound_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.OpenSound),
                            item: item.OpenSound?.FormID,
                            fieldIndex: (int)Container_FieldIndex.OpenSound,
                            errorMask: errorMask);
                    }
                    if (item.CloseSound_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.CloseSound),
                            item: item.CloseSound?.FormID,
                            fieldIndex: (int)Container_FieldIndex.CloseSound,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Container item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Container_ErrorMask errorMask)
        {
            Container_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Container_ErrorMask()) : default(Func<Container_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Container item,
            RecordTypeConverter recordTypeConverter,
            Func<Container_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Container_Registration.CONT_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Container item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Container_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Container_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)Container_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Container_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ContainerItem, MaskItem<Exception, ContainerItem_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Items,
                fieldIndex: (int)Container_FieldIndex.Items,
                errorMask: errorMask,
                transl: (ContainerItem subItem, bool listDoMasks, out MaskItem<Exception, ContainerItem_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<ContainerItem, ContainerItem_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            using (HeaderExport.ExportSubRecordHeader(writer, Container_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Container.ContainerFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: new ContentLength(1),
                    fieldIndex: (int)Container_FieldIndex.Flags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight_Property,
                    fieldIndex: (int)Container_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.OpenSound_Property,
                fieldIndex: (int)Container_FieldIndex.OpenSound,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Container_Registration.SNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CloseSound_Property,
                fieldIndex: (int)Container_FieldIndex.CloseSound,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Container_Registration.QNAM_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Container_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Container_Mask<T>>
    {
        #region Ctors
        public Container_Mask()
        {
        }

        public Container_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Script = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItem<T, ContainerItem_Mask<T>>>>(initialValue, null);
            this.Flags = initialValue;
            this.Weight = initialValue;
            this.OpenSound = initialValue;
            this.CloseSound = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Script;
        public MaskItem<T, IEnumerable<MaskItem<T, ContainerItem_Mask<T>>>> Items;
        public T Flags;
        public T Weight;
        public T OpenSound;
        public T CloseSound;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Container_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Container_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.OpenSound, rhs.OpenSound)) return false;
            if (!object.Equals(this.CloseSound, rhs.CloseSound)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.OpenSound?.GetHashCode());
            ret = ret.CombineHashCode(this.CloseSound?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Script)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.OpenSound)) return false;
            if (!eval(this.CloseSound)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Container_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Container_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Container_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Script = eval(this.Script);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItem<R, ContainerItem_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItem<R, ContainerItem_Mask<R>>> l = new List<MaskItem<R, ContainerItem_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific)
                    {
                        MaskItem<R, ContainerItem_Mask<R>> mask = default(MaskItem<R, ContainerItem_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ContainerItem_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Flags = eval(this.Flags);
            obj.Weight = eval(this.Weight);
            obj.OpenSound = eval(this.OpenSound);
            obj.CloseSound = eval(this.CloseSound);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Items.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Container_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Container_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Container_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.OpenSound ?? true)
                {
                    fg.AppendLine($"OpenSound => {OpenSound}");
                }
                if (printMask?.CloseSound ?? true)
                {
                    fg.AppendLine($"CloseSound => {CloseSound}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Container_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Container_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Script;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ContainerItem_ErrorMask>>> Items;
        public Exception Flags;
        public Exception Weight;
        public Exception OpenSound;
        public Exception CloseSound;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Container_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Container_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ContainerItem_ErrorMask>>>(ex, null);
                    break;
                case Container_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Container_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Container_FieldIndex.OpenSound:
                    this.OpenSound = ex;
                    break;
                case Container_FieldIndex.CloseSound:
                    this.CloseSound = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Container_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Container_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ContainerItem_ErrorMask>>>)obj;
                    break;
                case Container_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Container_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Container_FieldIndex.OpenSound:
                    this.OpenSound = (Exception)obj;
                    break;
                case Container_FieldIndex.CloseSound:
                    this.CloseSound = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Script != null) return true;
            if (Items != null) return true;
            if (Flags != null) return true;
            if (Weight != null) return true;
            if (OpenSound != null) return true;
            if (CloseSound != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Container_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"OpenSound => {OpenSound}");
            fg.AppendLine($"CloseSound => {CloseSound}");
        }
        #endregion

        #region Combine
        public Container_ErrorMask Combine(Container_ErrorMask rhs)
        {
            var ret = new Container_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ContainerItem_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, ContainerItem_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.OpenSound = this.OpenSound.Combine(rhs.OpenSound);
            ret.CloseSound = this.CloseSound.Combine(rhs.CloseSound);
            return ret;
        }
        public static Container_ErrorMask Combine(Container_ErrorMask lhs, Container_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Container_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Script;
        public MaskItem<CopyOption, ContainerItem_CopyMask> Items;
        public bool Flags;
        public bool Weight;
        public bool OpenSound;
        public bool CloseSound;
        #endregion

    }
    #endregion




    #endregion

}
