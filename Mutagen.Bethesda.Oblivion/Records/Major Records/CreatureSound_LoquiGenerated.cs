/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CreatureSound : ICreatureSound, ILoquiObjectSetter, IEquatable<CreatureSound>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureSound_Registration.Instance;
        public static CreatureSound_Registration Registration => CreatureSound_Registration.Instance;

        #region Ctor
        public CreatureSound()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SoundType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingSetItem<CreatureSound.CreatureSoundType> _SoundType = NotifyingSetItem.Factory<CreatureSound.CreatureSoundType>(markAsSet: false);
        public INotifyingSetItem<CreatureSound.CreatureSoundType> SoundType_Property => _SoundType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CreatureSound.CreatureSoundType SoundType
        {
            get => this._SoundType.Item;
            set => this._SoundType.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<CreatureSound.CreatureSoundType> ICreatureSound.SoundType_Property => this.SoundType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<CreatureSound.CreatureSoundType> ICreatureSoundGetter.SoundType_Property => this.SoundType_Property;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<SoundItem> _Sounds = new NotifyingList<SoundItem>();
        public INotifyingList<SoundItem> Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<SoundItem> SoundsEnumerable
        {
            get => _Sounds;
            set => _Sounds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<SoundItem> ICreatureSound.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<SoundItem> ICreatureSoundGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => CreatureSoundCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => CreatureSoundCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CreatureSoundCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CreatureSoundCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return CreatureSoundCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            CreatureSound_Mask<bool> printMask = null)
        {
            return CreatureSoundCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CreatureSoundCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public CreatureSound_Mask<bool> GetHasBeenSetMask()
        {
            return CreatureSoundCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CreatureSound rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CreatureSound rhs)
        {
            if (rhs == null) return false;
            if (SoundType_Property.HasBeenSet != rhs.SoundType_Property.HasBeenSet) return false;
            if (SoundType_Property.HasBeenSet)
            {
                if (SoundType != rhs.SoundType) return false;
            }
            if (Sounds.HasBeenSet != rhs.Sounds.HasBeenSet) return false;
            if (Sounds.HasBeenSet)
            {
                if (!Sounds.SequenceEqual(rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (SoundType_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SoundType).CombineHashCode(ret);
            }
            if (Sounds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static CreatureSound Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static CreatureSound Create_XML(
            XElement root,
            out CreatureSound_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static CreatureSound Create_XML(
            XElement root,
            bool doMasks,
            out CreatureSound_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (CreatureSound Object, CreatureSound_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            CreatureSound_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CreatureSound_ErrorMask()) : default(Func<CreatureSound_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static CreatureSound Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static CreatureSound Create_XML(
            string path,
            out CreatureSound_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static CreatureSound Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static CreatureSound Create_XML(
            Stream stream,
            out CreatureSound_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<CreatureSound, CreatureSound_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out CreatureSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<CreatureSound, CreatureSound_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out CreatureSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out CreatureSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out CreatureSound_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (CreatureSound_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out CreatureSound_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out CreatureSound_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            CreatureSoundCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static CreatureSound Create_XML_Internal(
            XElement root,
            Func<CreatureSound_ErrorMask> errorMask)
        {
            var ret = new CreatureSound();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            CreatureSound item,
            XElement root,
            string name,
            Func<CreatureSound_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "SoundType":
                    item._SoundType.SetIfSucceeded(EnumXmlTranslation<CreatureSound.CreatureSoundType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)CreatureSound_FieldIndex.SoundType,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Sounds":
                    item._Sounds.SetIfSucceeded(ListXmlTranslation<SoundItem, MaskItem<Exception, SoundItem_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)CreatureSound_FieldIndex.Sounds,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, SoundItem_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<SoundItem, SoundItem_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static CreatureSound Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static CreatureSound Create_Binary(
            MutagenFrame frame,
            out CreatureSound_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static CreatureSound Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out CreatureSound_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (CreatureSound Object, CreatureSound_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            CreatureSound_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CreatureSound_ErrorMask()) : default(Func<CreatureSound_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static CreatureSound Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static CreatureSound Create_Binary(
            string path,
            out CreatureSound_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static CreatureSound Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static CreatureSound Create_Binary(
            Stream stream,
            out CreatureSound_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<CreatureSound, CreatureSound_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out CreatureSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<CreatureSound, CreatureSound_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out CreatureSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out CreatureSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out CreatureSound_ErrorMask errorMask)
        {
            errorMask = (CreatureSound_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out CreatureSound_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out CreatureSound_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            CreatureSoundCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static CreatureSound Create_Binary_Internal(
            MutagenFrame frame,
            Func<CreatureSound_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new CreatureSound();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    CreatureSound_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            CreatureSound item,
            MutagenFrame frame,
            Func<CreatureSound_ErrorMask> errorMask)
        {
        }

        protected static TryGet<CreatureSound_FieldIndex?> Fill_Binary_RecordTypes(
            CreatureSound item,
            MutagenFrame frame,
            CreatureSound_FieldIndex? lastParsed,
            Func<CreatureSound_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "CSDT":
                    if (lastParsed.HasValue && lastParsed.Value >= CreatureSound_FieldIndex.SoundType) return TryGet<CreatureSound_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._SoundType.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<CreatureSound.CreatureSoundType>.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)CreatureSound_FieldIndex.SoundType,
                        errorMask: errorMask));
                    return TryGet<CreatureSound_FieldIndex?>.Succeed(CreatureSound_FieldIndex.SoundType);
                case "CSDI":
                case "CSDC":
                    if (lastParsed.HasValue && lastParsed.Value >= CreatureSound_FieldIndex.Sounds) return TryGet<CreatureSound_FieldIndex?>.Failure;
                    var SoundstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<SoundItem, MaskItem<Exception, SoundItem_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: SoundItem_Registration.TriggeringRecordTypes,
                        fieldIndex: (int)CreatureSound_FieldIndex.Sounds,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, SoundItem_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<SoundItem, SoundItem_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Sounds.SetIfSucceeded(SoundstryGet);
                    return TryGet<CreatureSound_FieldIndex?>.Succeed(CreatureSound_FieldIndex.Sounds);
                default:
                    return TryGet<CreatureSound_FieldIndex?>.Failure;
            }
        }

        #endregion

        public CreatureSound Copy(
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null)
        {
            return CreatureSound.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CreatureSound Copy(
            ICreatureSound item,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null)
        {
            CreatureSound ret;
            if (item.GetType().Equals(typeof(CreatureSound)))
            {
                ret = new CreatureSound();
            }
            else
            {
                ret = (CreatureSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null)
            where CopyType : class, ICreatureSound
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(CreatureSound)))
            {
                ret = new CreatureSound() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static CreatureSound Copy_ToLoqui(
            ICreatureSoundGetter item,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null)
        {
            CreatureSound ret;
            if (item.GetType().Equals(typeof(CreatureSound)))
            {
                ret = new CreatureSound() as CreatureSound;
            }
            else
            {
                ret = (CreatureSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    this._SoundType.Set(
                        (CreatureSound.CreatureSoundType)obj,
                        cmds);
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    this._Sounds.SetTo((IEnumerable<SoundItem>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CreatureSoundCommon.Clear(this, cmds);
        }


        public static CreatureSound Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CreatureSound();
            foreach (var pair in fields)
            {
                CopyInInternal_CreatureSound(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CreatureSound(CreatureSound obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CreatureSound_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    obj._SoundType.Set(
                        (CreatureSound.CreatureSoundType)pair.Value,
                        null);
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    obj._Sounds.SetTo((IEnumerable<SoundItem>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, CreatureSound obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ICreatureSound : ICreatureSoundGetter, ILoquiClass<ICreatureSound, ICreatureSoundGetter>, ILoquiClass<CreatureSound, ICreatureSoundGetter>
    {
        new CreatureSound.CreatureSoundType SoundType { get; set; }
        new INotifyingSetItem<CreatureSound.CreatureSoundType> SoundType_Property { get; }

        new INotifyingList<SoundItem> Sounds { get; }
    }

    public interface ICreatureSoundGetter : ILoquiObject
    {
        #region SoundType
        CreatureSound.CreatureSoundType SoundType { get; }
        INotifyingSetItemGetter<CreatureSound.CreatureSoundType> SoundType_Property { get; }

        #endregion
        #region Sounds
        INotifyingListGetter<SoundItem> Sounds { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CreatureSound_FieldIndex
    {
        SoundType = 0,
        Sounds = 1,
    }
    #endregion

    #region Registration
    public class CreatureSound_Registration : ILoquiRegistration
    {
        public static readonly CreatureSound_Registration Instance = new CreatureSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 90,
            version: 0);

        public const string GUID = "f3d5081c-a137-4a9e-8dd9-c79a8bf94fc3";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(CreatureSound_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CreatureSound_ErrorMask);

        public static readonly Type ClassType = typeof(CreatureSound);

        public static readonly Type GetterType = typeof(ICreatureSoundGetter);

        public static readonly Type SetterType = typeof(ICreatureSound);

        public static readonly Type CommonType = typeof(CreatureSoundCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CreatureSound";

        public const string Name = "CreatureSound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SOUNDTYPE":
                    return (ushort)CreatureSound_FieldIndex.SoundType;
                case "SOUNDS":
                    return (ushort)CreatureSound_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.Sounds:
                    return true;
                case CreatureSound_FieldIndex.SoundType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.Sounds:
                    return true;
                case CreatureSound_FieldIndex.SoundType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                case CreatureSound_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    return "SoundType";
                case CreatureSound_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                case CreatureSound_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                case CreatureSound_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    return typeof(CreatureSound.CreatureSoundType);
                case CreatureSound_FieldIndex.Sounds:
                    return typeof(NotifyingList<SoundItem>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType CSDT_HEADER = new RecordType("CSDT");
        public static readonly RecordType CSDI_HEADER = new RecordType("CSDI");
        public static readonly RecordType CSDC_HEADER = new RecordType("CSDC");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        CSDT_HEADER,
                        CSDI_HEADER,
                        CSDC_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CreatureSoundCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ICreatureSound item,
            ICreatureSoundGetter rhs,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            CreatureSoundCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ICreatureSound item,
            ICreatureSoundGetter rhs,
            out CreatureSound_ErrorMask errorMask,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            CreatureSoundCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ICreatureSound item,
            ICreatureSoundGetter rhs,
            ICreatureSoundGetter def,
            bool doMasks,
            out CreatureSound_ErrorMask errorMask,
            CreatureSound_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            CreatureSound_ErrorMask retErrorMask = null;
            Func<CreatureSound_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new CreatureSound_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ICreatureSound item,
            ICreatureSoundGetter rhs,
            ICreatureSoundGetter def,
            bool doMasks,
            Func<CreatureSound_ErrorMask> errorMask,
            CreatureSound_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.SoundType ?? true)
            {
                try
                {
                    item.SoundType_Property.SetToWithDefault(
                        rhs: rhs.SoundType_Property,
                        def: def?.SoundType_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CreatureSound_FieldIndex.SoundType, ex);
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Sounds.SetToWithDefault(
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(SoundItem);
                                    return SoundItem.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)CreatureSound_FieldIndex.Sounds, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICreatureSound obj,
            NotifyingFireParameters cmds = null)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    obj.SoundType_Property.HasBeenSet = on;
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    obj.Sounds.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICreatureSound obj,
            NotifyingUnsetParameters cmds = null)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    obj.SoundType_Property.Unset(cmds);
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    obj.Sounds.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICreatureSound obj)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    return obj.SoundType_Property.HasBeenSet;
                case CreatureSound_FieldIndex.Sounds:
                    return obj.Sounds.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ICreatureSoundGetter obj)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    return obj.SoundType;
                case CreatureSound_FieldIndex.Sounds:
                    return obj.Sounds;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ICreatureSound item,
            NotifyingUnsetParameters cmds = null)
        {
            item.SoundType_Property.Unset(cmds.ToUnsetParams());
            item.Sounds.Unset(cmds.ToUnsetParams());
        }

        public static CreatureSound_Mask<bool> GetEqualsMask(
            this ICreatureSoundGetter item,
            ICreatureSoundGetter rhs)
        {
            var ret = new CreatureSound_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICreatureSoundGetter item,
            ICreatureSoundGetter rhs,
            CreatureSound_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.SoundType = item.SoundType_Property.Equals(rhs.SoundType_Property, (l, r) => l == r);
            if (item.Sounds.HasBeenSet == rhs.Sounds.HasBeenSet)
            {
                if (item.Sounds.HasBeenSet)
                {
                    ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, SoundItem_Mask<bool>>>>();
                    ret.Sounds.Specific = item.Sounds.SelectAgainst<SoundItem, MaskItem<bool, SoundItem_Mask<bool>>>(rhs.Sounds, ((l, r) =>
                    {
                        MaskItem<bool, SoundItem_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => SoundItemCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Sounds.Overall);
                    ret.Sounds.Overall = ret.Sounds.Overall && ret.Sounds.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, SoundItem_Mask<bool>>>>();
                    ret.Sounds.Overall = true;
                }
            }
            else
            {
                ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, SoundItem_Mask<bool>>>>();
                ret.Sounds.Overall = false;
            }
        }

        public static string ToString(
            this ICreatureSoundGetter item,
            string name = null,
            CreatureSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICreatureSoundGetter item,
            FileGeneration fg,
            string name = null,
            CreatureSound_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CreatureSound)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CreatureSound)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SoundType ?? true)
                {
                    fg.AppendLine($"SoundType => {item.SoundType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Sounds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICreatureSoundGetter item,
            CreatureSound_Mask<bool?> checkMask)
        {
            if (checkMask.SoundType.HasValue && checkMask.SoundType.Value != item.SoundType_Property.HasBeenSet) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds.HasBeenSet) return false;
            return true;
        }

        public static CreatureSound_Mask<bool> GetHasBeenSetMask(ICreatureSoundGetter item)
        {
            var ret = new CreatureSound_Mask<bool>();
            ret.SoundType = item.SoundType_Property.HasBeenSet;
            ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, SoundItem_Mask<bool>>>>(item.Sounds.HasBeenSet, item.Sounds.Select((i) => new MaskItem<bool, SoundItem_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ICreatureSoundGetter item,
            bool doMasks,
            out CreatureSound_ErrorMask errorMask,
            string name = null)
        {
            CreatureSound_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CreatureSound_ErrorMask()) : default(Func<CreatureSound_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ICreatureSoundGetter item,
            Func<CreatureSound_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.CreatureSound"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.CreatureSound");
                    }
                    if (item.SoundType_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<CreatureSound.CreatureSoundType>.Instance.Write(
                            writer: writer,
                            name: nameof(item.SoundType),
                            item: item.SoundType_Property,
                            fieldIndex: (int)CreatureSound_FieldIndex.SoundType,
                            errorMask: errorMask);
                    }
                    if (item.Sounds.HasBeenSet)
                    {
                        ListXmlTranslation<SoundItem, MaskItem<Exception, SoundItem_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Sounds),
                            item: item.Sounds,
                            fieldIndex: (int)CreatureSound_FieldIndex.Sounds,
                            errorMask: errorMask,
                            transl: (SoundItem subItem, bool listDoMasks, out MaskItem<Exception, SoundItem_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<SoundItem, SoundItem_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            CreatureSound item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out CreatureSound_ErrorMask errorMask)
        {
            CreatureSound_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CreatureSound_ErrorMask()) : default(Func<CreatureSound_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            CreatureSound item,
            RecordTypeConverter recordTypeConverter,
            Func<CreatureSound_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            CreatureSound item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<CreatureSound_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<CreatureSound.CreatureSoundType>.Instance.Write(
                writer,
                item.SoundType_Property,
                length: new ContentLength(4),
                fieldIndex: (int)CreatureSound_FieldIndex.SoundType,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(CreatureSound_Registration.CSDT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<SoundItem, MaskItem<Exception, SoundItem_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Sounds,
                fieldIndex: (int)CreatureSound_FieldIndex.Sounds,
                errorMask: errorMask,
                transl: (SoundItem subItem, bool listDoMasks, out MaskItem<Exception, SoundItem_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<SoundItem, SoundItem_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class CreatureSound_Mask<T> : IMask<T>, IEquatable<CreatureSound_Mask<T>>
    {
        #region Ctors
        public CreatureSound_Mask()
        {
        }

        public CreatureSound_Mask(T initialValue)
        {
            this.SoundType = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItem<T, SoundItem_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T SoundType;
        public MaskItem<T, IEnumerable<MaskItem<T, SoundItem_Mask<T>>>> Sounds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CreatureSound_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CreatureSound_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.SoundType, rhs.SoundType)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.SoundType?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.SoundType)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public CreatureSound_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CreatureSound_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CreatureSound_Mask<R> obj, Func<T, R> eval)
        {
            obj.SoundType = eval(this.SoundType);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItem<R, SoundItem_Mask<R>>>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (Sounds.Specific != null)
                {
                    List<MaskItem<R, SoundItem_Mask<R>>> l = new List<MaskItem<R, SoundItem_Mask<R>>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific)
                    {
                        MaskItem<R, SoundItem_Mask<R>> mask = default(MaskItem<R, SoundItem_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, SoundItem_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Sounds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CreatureSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CreatureSound_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CreatureSound_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SoundType ?? true)
                {
                    fg.AppendLine($"SoundType => {SoundType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds.Overall != null)
                        {
                            fg.AppendLine(Sounds.Overall.ToString());
                        }
                        if (Sounds.Specific != null)
                        {
                            foreach (var subItem in Sounds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CreatureSound_ErrorMask : IErrorMask, IErrorMask<CreatureSound_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception SoundType;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, SoundItem_ErrorMask>>> Sounds;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    this.SoundType = ex;
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SoundItem_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    this.SoundType = (Exception)obj;
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, IEnumerable<MaskItem<Exception, SoundItem_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (SoundType != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CreatureSound_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"SoundType => {SoundType}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds.Overall != null)
                {
                    fg.AppendLine(Sounds.Overall.ToString());
                }
                if (Sounds.Specific != null)
                {
                    foreach (var subItem in Sounds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public CreatureSound_ErrorMask Combine(CreatureSound_ErrorMask rhs)
        {
            var ret = new CreatureSound_ErrorMask();
            ret.SoundType = this.SoundType.Combine(rhs.SoundType);
            ret.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SoundItem_ErrorMask>>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), new List<MaskItem<Exception, SoundItem_ErrorMask>>(this.Sounds.Specific.And(rhs.Sounds.Specific)));
            return ret;
        }
        public static CreatureSound_ErrorMask Combine(CreatureSound_ErrorMask lhs, CreatureSound_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class CreatureSound_CopyMask
    {
        #region Members
        public bool SoundType;
        public MaskItem<CopyOption, SoundItem_CopyMask> Sounds;
        #endregion

    }
    #endregion




    #endregion

}
