/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CreatureSound :
        LoquiNotifyingObject,
        ICreatureSound,
        ILoquiObject<CreatureSound>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<CreatureSound>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureSound_Registration.Instance;
        public static CreatureSound_Registration Registration => CreatureSound_Registration.Instance;

        #region Ctor
        public CreatureSound()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SoundType
        public bool SoundType_IsSet
        {
            get => _hasBeenSetTracker[(int)CreatureSound_FieldIndex.SoundType];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)CreatureSound_FieldIndex.SoundType, nameof(SoundType_IsSet));
        }
        bool ICreatureSoundGetter.SoundType_IsSet => SoundType_IsSet;
        private CreatureSound.CreatureSoundType _SoundType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CreatureSound.CreatureSoundType SoundType
        {
            get => this._SoundType;
            set => SoundType_Set(value);
        }
        CreatureSound.CreatureSoundType ICreatureSoundGetter.SoundType => this.SoundType;
        public void SoundType_Set(
            CreatureSound.CreatureSoundType value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _SoundType, value, _hasBeenSetTracker, markSet, (int)CreatureSound_FieldIndex.SoundType, nameof(SoundType), nameof(SoundType_IsSet));
        }
        public void SoundType_Unset()
        {
            this.SoundType_Set(default(CreatureSound.CreatureSoundType), false);
        }
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<SoundItem> _Sounds = new SourceSetList<SoundItem>();
        public ISourceSetList<SoundItem> Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<SoundItem> SoundsEnumerable
        {
            get => _Sounds.Items;
            set => _Sounds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<SoundItem> ICreatureSound.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<SoundItem> ICreatureSoundGetter.Sounds => _Sounds;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<CreatureSound>.GetEqualsMask(CreatureSound rhs, EqualsMaskHelper.Include include) => CreatureSoundCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ICreatureSoundGetter>.GetEqualsMask(ICreatureSoundGetter rhs, EqualsMaskHelper.Include include) => CreatureSoundCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            CreatureSound_Mask<bool> printMask = null)
        {
            return CreatureSoundCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CreatureSoundCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public CreatureSound_Mask<bool> GetHasBeenSetMask()
        {
            return CreatureSoundCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CreatureSound rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CreatureSound rhs)
        {
            if (rhs == null) return false;
            if (SoundType_IsSet != rhs.SoundType_IsSet) return false;
            if (SoundType_IsSet)
            {
                if (this.SoundType != rhs.SoundType) return false;
            }
            if (Sounds.HasBeenSet != rhs.Sounds.HasBeenSet) return false;
            if (Sounds.HasBeenSet)
            {
                if (!this.Sounds.SequenceEqual(rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (SoundType_IsSet)
            {
                ret = HashHelper.GetHashCode(SoundType).CombineHashCode(ret);
            }
            if (Sounds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlTranslator XmlTranslator => CreatureSoundXmlTranslation.Instance;
        IXmlTranslator IXmlItem.XmlTranslator => this.XmlTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static CreatureSound Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            CreatureSound_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CreatureSound Create_Xml(
            XElement node,
            out CreatureSound_ErrorMask errorMask,
            bool doMasks = true,
            CreatureSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = CreatureSound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CreatureSound Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new CreatureSound() : null;
                    break;
                default:
                    break;
            }
            var ret = new CreatureSound();
            try
            {
                foreach (var elem in node.Elements())
                {
                    CreatureSoundXmlTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static CreatureSound Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            CreatureSound_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CreatureSound Create_Xml(
            string path,
            out CreatureSound_ErrorMask errorMask,
            CreatureSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CreatureSound Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            CreatureSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CreatureSound Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            CreatureSound_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static CreatureSound Create_Xml(
            Stream stream,
            out CreatureSound_ErrorMask errorMask,
            CreatureSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CreatureSound Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            CreatureSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((CreatureSound_FieldIndex)index)
            {
                case CreatureSound_FieldIndex.SoundType:
                    return _hasBeenSetTracker[index];
                case CreatureSound_FieldIndex.Sounds:
                    return Sounds.HasBeenSet;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Sounds.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            foreach (var item in Sounds.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        #endregion

        #region Binary Translation
        protected IBinaryTranslator BinaryTranslator => CreatureSoundBinaryTranslation.Instance;
        IBinaryTranslator IBinaryItem.BinaryTranslator => this.BinaryTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static CreatureSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static CreatureSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out CreatureSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CreatureSound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CreatureSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new CreatureSound();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            return ret;
        }

        #endregion

        protected static void Fill_Binary_Structs(
            CreatureSound item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            CreatureSound item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54445343: // CSDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)CreatureSound_FieldIndex.SoundType) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (EnumBinaryTranslation<CreatureSound.CreatureSoundType>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out CreatureSound.CreatureSoundType SoundTypeParse))
                    {
                        item.SoundType = SoundTypeParse;
                    }
                    else
                    {
                        item.SoundType = default(CreatureSound.CreatureSoundType);
                    }
                    return TryGet<int?>.Succeed((int)CreatureSound_FieldIndex.SoundType);
                }
                case 0x49445343: // CSDI
                case 0x43445343: // CSDC
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)CreatureSound_FieldIndex.Sounds) return TryGet<int?>.Failure;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<SoundItem>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: SoundItem_Registration.TriggeringRecordTypes,
                        item: item.Sounds,
                        fieldIndex: (int)CreatureSound_FieldIndex.Sounds,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out SoundItem listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<SoundItem>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)CreatureSound_FieldIndex.Sounds);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public CreatureSound Copy(
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null)
        {
            return CreatureSound.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CreatureSound Copy(
            ICreatureSound item,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null)
        {
            CreatureSound ret;
            if (item.GetType().Equals(typeof(CreatureSound)))
            {
                ret = new CreatureSound();
            }
            else
            {
                ret = (CreatureSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CreatureSound Copy_ToLoqui(
            ICreatureSoundGetter item,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null)
        {
            CreatureSound ret;
            if (item.GetType().Equals(typeof(CreatureSound)))
            {
                ret = new CreatureSound() as CreatureSound;
            }
            else
            {
                ret = (CreatureSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ICreatureSoundGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ICreatureSoundGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ICreatureSoundGetter rhs,
            CreatureSound_CopyMask copyMask,
            ICreatureSoundGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ICreatureSoundGetter rhs,
            out CreatureSound_ErrorMask errorMask,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CreatureSoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = CreatureSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICreatureSoundGetter rhs,
            ErrorMaskBuilder errorMask,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null)
        {
            CreatureSoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    this.SoundType = (CreatureSound.CreatureSoundType)obj;
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    this._Sounds.SetTo((IEnumerable<SoundItem>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            CreatureSoundCommon.Clear(this);
        }


        public static CreatureSound Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CreatureSound();
            foreach (var pair in fields)
            {
                CopyInInternal_CreatureSound(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CreatureSound(CreatureSound obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CreatureSound_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    obj.SoundType = (CreatureSound.CreatureSoundType)pair.Value;
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    obj._Sounds.SetTo((IEnumerable<SoundItem>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ICreatureSound :
        ICreatureSoundGetter,
        ILoquiClass<ICreatureSound, ICreatureSoundGetter>,
        ILoquiClass<CreatureSound, ICreatureSoundGetter>
    {
        new CreatureSound.CreatureSoundType SoundType { get; set; }
        new bool SoundType_IsSet { get; set; }
        void SoundType_Set(CreatureSound.CreatureSoundType item, bool hasBeenSet = true);
        void SoundType_Unset();

        new ISourceSetList<SoundItem> Sounds { get; }
        void CopyFieldsFrom(
            ICreatureSoundGetter rhs,
            ErrorMaskBuilder errorMask = null,
            CreatureSound_CopyMask copyMask = null,
            ICreatureSoundGetter def = null);
    }

    public partial interface ICreatureSoundGetter :
        ILoquiObject,
        IXmlItem,
        IBinaryItem
    {
        #region SoundType
        CreatureSound.CreatureSoundType SoundType { get; }
        bool SoundType_IsSet { get; }

        #endregion
        #region Sounds
        IObservableSetList<SoundItem> Sounds { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CreatureSound_FieldIndex
    {
        SoundType = 0,
        Sounds = 1,
    }
    #endregion

    #region Registration
    public class CreatureSound_Registration : ILoquiRegistration
    {
        public static readonly CreatureSound_Registration Instance = new CreatureSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 90,
            version: 0);

        public const string GUID = "f3d5081c-a137-4a9e-8dd9-c79a8bf94fc3";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(CreatureSound_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CreatureSound_ErrorMask);

        public static readonly Type ClassType = typeof(CreatureSound);

        public static readonly Type GetterType = typeof(ICreatureSoundGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreatureSound);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(CreatureSoundCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.CreatureSound";

        public const string Name = "CreatureSound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SOUNDTYPE":
                    return (ushort)CreatureSound_FieldIndex.SoundType;
                case "SOUNDS":
                    return (ushort)CreatureSound_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.Sounds:
                    return true;
                case CreatureSound_FieldIndex.SoundType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.Sounds:
                    return true;
                case CreatureSound_FieldIndex.SoundType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                case CreatureSound_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    return "SoundType";
                case CreatureSound_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                case CreatureSound_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                case CreatureSound_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    return typeof(CreatureSound.CreatureSoundType);
                case CreatureSound_FieldIndex.Sounds:
                    return typeof(SourceSetList<SoundItem>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(CreatureSoundXmlTranslation);
        public static readonly RecordType CSDT_HEADER = new RecordType("CSDT");
        public static readonly RecordType CSDI_HEADER = new RecordType("CSDI");
        public static readonly RecordType CSDC_HEADER = new RecordType("CSDC");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        CSDT_HEADER,
                        CSDI_HEADER,
                        CSDC_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryTranslation = typeof(CreatureSoundBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CreatureSoundCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICreatureSound item,
            ICreatureSoundGetter rhs,
            ICreatureSoundGetter def,
            ErrorMaskBuilder errorMask,
            CreatureSound_CopyMask copyMask)
        {
            if (copyMask?.SoundType ?? true)
            {
                errorMask?.PushIndex((int)CreatureSound_FieldIndex.SoundType);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.SoundType,
                        rhsHasBeenSet: rhs.SoundType_IsSet,
                        defItem: def?.SoundType ?? default(CreatureSound.CreatureSoundType),
                        defHasBeenSet: def?.SoundType_IsSet ?? false,
                        outRhsItem: out var rhsSoundTypeItem,
                        outDefItem: out var defSoundTypeItem))
                    {
                        item.SoundType = rhsSoundTypeItem;
                    }
                    else
                    {
                        item.SoundType_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)CreatureSound_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetToWithDefault(
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return SoundItem.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ICreatureSound item)
        {
            item.SoundType_Unset();
            item.Sounds.Unset();
        }

        public static CreatureSound_Mask<bool> GetEqualsMask(
            this ICreatureSoundGetter item,
            ICreatureSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CreatureSound_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ICreatureSoundGetter item,
            ICreatureSoundGetter rhs,
            CreatureSound_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SoundType = item.SoundType_IsSet == rhs.SoundType_IsSet && item.SoundType == rhs.SoundType;
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }

        public static string ToString(
            this ICreatureSoundGetter item,
            string name = null,
            CreatureSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICreatureSoundGetter item,
            FileGeneration fg,
            string name = null,
            CreatureSound_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CreatureSound)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CreatureSound)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SoundType ?? true)
                {
                    fg.AppendLine($"SoundType => {item.SoundType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Sounds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICreatureSoundGetter item,
            CreatureSound_Mask<bool?> checkMask)
        {
            if (checkMask.SoundType.HasValue && checkMask.SoundType.Value != item.SoundType_IsSet) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds.HasBeenSet) return false;
            return true;
        }

        public static CreatureSound_Mask<bool> GetHasBeenSetMask(ICreatureSoundGetter item)
        {
            var ret = new CreatureSound_Mask<bool>();
            ret.SoundType = item.SoundType_IsSet;
            ret.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, SoundItem_Mask<bool>>>>(item.Sounds.HasBeenSet, item.Sounds.WithIndex().Select((i) => new MaskItemIndexed<bool, SoundItem_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class CreatureSoundXmlTranslation : IXmlTranslator
    {
        public readonly static CreatureSoundXmlTranslation Instance = new CreatureSoundXmlTranslation();

        public static void WriteToNode_Xml(
            ICreatureSoundGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.SoundType_IsSet
                && (translationMask?.GetShouldTranslate((int)CreatureSound_FieldIndex.SoundType) ?? true))
            {
                EnumXmlTranslation<CreatureSound.CreatureSoundType>.Instance.Write(
                    node: node,
                    name: nameof(item.SoundType),
                    item: item.SoundType,
                    fieldIndex: (int)CreatureSound_FieldIndex.SoundType,
                    errorMask: errorMask);
            }
            if (item.Sounds.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)CreatureSound_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<SoundItem>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)CreatureSound_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)CreatureSound_FieldIndex.Sounds),
                    transl: (XElement subNode, SoundItem subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        ((SoundItemXmlTranslation)((IXmlItem)subItem).XmlTranslator).Write(
                            item: subItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            ICreatureSound item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CreatureSoundXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            ICreatureSound item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "SoundType":
                    try
                    {
                        errorMask?.PushIndex((int)CreatureSound_FieldIndex.SoundType);
                        if (EnumXmlTranslation<CreatureSound.CreatureSoundType>.Instance.Parse(
                            node: node,
                            item: out CreatureSound.CreatureSoundType SoundTypeParse,
                            errorMask: errorMask))
                        {
                            item.SoundType = SoundTypeParse;
                        }
                        else
                        {
                            item.SoundType = default(CreatureSound.CreatureSoundType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)CreatureSound_FieldIndex.Sounds);
                        if (ListXmlTranslation<SoundItem>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<SoundItem>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        public void Write(
            XElement node,
            ICreatureSoundGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CreatureSound");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CreatureSound");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICreatureSoundGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICreatureSoundGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ICreatureSoundGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    #region Xml Write Mixins
    public static class CreatureSoundXmlTranslationMixIn
    {
        public static void Write_Xml(
            this ICreatureSoundGetter item,
            XElement node,
            out CreatureSound_ErrorMask errorMask,
            bool doMasks = true,
            CreatureSound_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CreatureSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CreatureSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this ICreatureSoundGetter item,
            string path,
            out CreatureSound_ErrorMask errorMask,
            CreatureSound_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ICreatureSoundGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ICreatureSoundGetter item,
            Stream stream,
            out CreatureSound_ErrorMask errorMask,
            CreatureSound_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this ICreatureSoundGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this ICreatureSoundGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((CreatureSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void Write_Xml(
            this ICreatureSoundGetter item,
            XElement node,
            string name = null,
            CreatureSound_TranslationMask translationMask = null)
        {
            ((CreatureSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void Write_Xml(
            this ICreatureSoundGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CreatureSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ICreatureSoundGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CreatureSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class CreatureSound_Mask<T> : IMask<T>, IEquatable<CreatureSound_Mask<T>>
    {
        #region Ctors
        public CreatureSound_Mask()
        {
        }

        public CreatureSound_Mask(T initialValue)
        {
            this.SoundType = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItemIndexed<T, SoundItem_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T SoundType;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, SoundItem_Mask<T>>>> Sounds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CreatureSound_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CreatureSound_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.SoundType, rhs.SoundType)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.SoundType?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.SoundType)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public CreatureSound_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CreatureSound_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CreatureSound_Mask<R> obj, Func<T, R> eval)
        {
            obj.SoundType = eval(this.SoundType);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SoundItem_Mask<R>>>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (Sounds.Specific != null)
                {
                    List<MaskItemIndexed<R, SoundItem_Mask<R>>> l = new List<MaskItemIndexed<R, SoundItem_Mask<R>>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, SoundItem_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, SoundItem_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Sounds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CreatureSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CreatureSound_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CreatureSound_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SoundType ?? true)
                {
                    fg.AppendLine($"SoundType => {SoundType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds.Overall != null)
                        {
                            fg.AppendLine(Sounds.Overall.ToString());
                        }
                        if (Sounds.Specific != null)
                        {
                            foreach (var subItem in Sounds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CreatureSound_ErrorMask : IErrorMask, IErrorMask<CreatureSound_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception SoundType;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, SoundItem_ErrorMask>>> Sounds;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    return SoundType;
                case CreatureSound_FieldIndex.Sounds:
                    return Sounds;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    this.SoundType = ex;
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SoundItem_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
            switch (enu)
            {
                case CreatureSound_FieldIndex.SoundType:
                    this.SoundType = (Exception)obj;
                    break;
                case CreatureSound_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, IEnumerable<MaskItem<Exception, SoundItem_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (SoundType != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CreatureSound_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"SoundType => {SoundType}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds.Overall != null)
                {
                    fg.AppendLine(Sounds.Overall.ToString());
                }
                if (Sounds.Specific != null)
                {
                    foreach (var subItem in Sounds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public CreatureSound_ErrorMask Combine(CreatureSound_ErrorMask rhs)
        {
            var ret = new CreatureSound_ErrorMask();
            ret.SoundType = this.SoundType.Combine(rhs.SoundType);
            ret.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SoundItem_ErrorMask>>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), new List<MaskItem<Exception, SoundItem_ErrorMask>>(this.Sounds.Specific.And(rhs.Sounds.Specific)));
            return ret;
        }
        public static CreatureSound_ErrorMask Combine(CreatureSound_ErrorMask lhs, CreatureSound_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static CreatureSound_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new CreatureSound_ErrorMask();
        }
        #endregion

    }
    public class CreatureSound_CopyMask
    {
        public CreatureSound_CopyMask()
        {
        }

        public CreatureSound_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.SoundType = defaultOn;
            this.Sounds = new MaskItem<CopyOption, SoundItem_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool SoundType;
        public MaskItem<CopyOption, SoundItem_CopyMask> Sounds;
        #endregion

    }

    public class CreatureSound_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool SoundType;
        public MaskItem<bool, SoundItem_TranslationMask> Sounds;
        #endregion

        #region Ctors
        public CreatureSound_TranslationMask()
        {
        }

        public CreatureSound_TranslationMask(bool defaultOn)
        {
            this.SoundType = defaultOn;
            this.Sounds = new MaskItem<bool, SoundItem_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((SoundType, null));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #region Binary Translation
    public partial class CreatureSoundBinaryTranslation : IBinaryTranslator
    {
        public readonly static CreatureSoundBinaryTranslation Instance = new CreatureSoundBinaryTranslation();

        public static void Write_RecordTypes(
            ICreatureSoundGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.SoundType_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CreatureSound.CreatureSoundType>.Instance.Write(
                    writer,
                    item.SoundType,
                    length: 4,
                    header: recordTypeConverter.ConvertToCustom(CreatureSound_Registration.CSDT_HEADER),
                    nullable: false);
            }
            if (item.Sounds.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<SoundItem>.Instance.Write(
                    writer: writer,
                    items: item.Sounds,
                    fieldIndex: (int)CreatureSound_FieldIndex.Sounds,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, SoundItem subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        ((SoundItemBinaryTranslation)((IBinaryItem)subItem).BinaryTranslator).Write(
                            item: subItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                    );
            }
        }

        public void Write(
            MutagenWriter writer,
            ICreatureSoundGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ICreatureSoundGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class CreatureSoundBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this ICreatureSoundGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out CreatureSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CreatureSoundBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = CreatureSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            this ICreatureSoundGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((CreatureSoundBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void Write_Binary(
            this ICreatureSoundGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((CreatureSoundBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
