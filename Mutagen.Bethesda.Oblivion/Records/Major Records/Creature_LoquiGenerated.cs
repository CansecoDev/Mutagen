/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Creature : NamedMajorRecord, ICreature, ILoquiObject<Creature>, ILoquiObjectSetter, IEquatable<Creature>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Creature_Registration.Instance;
        public new static Creature_Registration Registration => Creature_Registration.Instance;

        #region Ctor
        public Creature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Model> _Model = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> Model_Property => this._Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model ICreatureGetter.Model => this.Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> ICreature.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> ICreatureGetter.Model_Property => this.Model_Property;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<ItemEntry> _Items = new NotifyingList<ItemEntry>();
        public INotifyingList<ItemEntry> Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ItemEntry> ItemsEnumerable
        {
            get => _Items;
            set => _Items.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<ItemEntry> ICreature.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<ItemEntry> ICreatureGetter.Items => _Items;
        #endregion

        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDSetLink<Spell>> _Spells = new NotifyingList<FormIDSetLink<Spell>>();
        public INotifyingList<FormIDSetLink<Spell>> Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<Spell>> SpellsEnumerable
        {
            get => _Spells;
            set => _Spells.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDSetLink<Spell>> ICreature.Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDSetLink<Spell>> ICreatureGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Models
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<String> _Models = new NotifyingList<String>();
        public INotifyingList<String> Models => _Models;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<String> ModelsEnumerable
        {
            get => _Models;
            set => _Models.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<String> ICreature.Models => _Models;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<String> ICreatureGetter.Models => _Models;
        #endregion

        #endregion
        #region NIFT
        protected INotifyingSetItem<Byte[]> _NIFT = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> NIFT_Property => _NIFT;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] NIFT
        {
            get => this._NIFT.Item;
            set => this._NIFT.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> ICreature.NIFT_Property => this.NIFT_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> ICreatureGetter.NIFT_Property => this.NIFT_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Creature.CreatureFlag> _Flags = NotifyingItem.Factory<Creature.CreatureFlag>();
        public INotifyingItem<Creature.CreatureFlag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Creature.CreatureFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Creature.CreatureFlag> ICreature.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Creature.CreatureFlag> ICreatureGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region BaseSpellPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt16> _BaseSpellPoints = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> BaseSpellPoints_Property => _BaseSpellPoints;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 BaseSpellPoints
        {
            get => this._BaseSpellPoints.Item;
            set => this._BaseSpellPoints.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> ICreature.BaseSpellPoints_Property => this.BaseSpellPoints_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> ICreatureGetter.BaseSpellPoints_Property => this.BaseSpellPoints_Property;
        #endregion
        #region Fatigue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt16> _Fatigue = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> Fatigue_Property => _Fatigue;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 Fatigue
        {
            get => this._Fatigue.Item;
            set => this._Fatigue.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> ICreature.Fatigue_Property => this.Fatigue_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> ICreatureGetter.Fatigue_Property => this.Fatigue_Property;
        #endregion
        #region BarterGold
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt16> _BarterGold = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> BarterGold_Property => _BarterGold;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 BarterGold
        {
            get => this._BarterGold.Item;
            set => this._BarterGold.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> ICreature.BarterGold_Property => this.BarterGold_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> ICreatureGetter.BarterGold_Property => this.BarterGold_Property;
        #endregion
        #region LevelOffset
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Int16> _LevelOffset = NotifyingItem.Factory<Int16>();
        public INotifyingItem<Int16> LevelOffset_Property => _LevelOffset;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int16 LevelOffset
        {
            get => this._LevelOffset.Item;
            set => this._LevelOffset.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int16> ICreature.LevelOffset_Property => this.LevelOffset_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int16> ICreatureGetter.LevelOffset_Property => this.LevelOffset_Property;
        #endregion
        #region CalcMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt16> _CalcMin = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> CalcMin_Property => _CalcMin;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 CalcMin
        {
            get => this._CalcMin.Item;
            set => this._CalcMin.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> ICreature.CalcMin_Property => this.CalcMin_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> ICreatureGetter.CalcMin_Property => this.CalcMin_Property;
        #endregion
        #region CalcMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt16> _CalcMax = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> CalcMax_Property => _CalcMax;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 CalcMax
        {
            get => this._CalcMax.Item;
            set => this._CalcMax.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> ICreature.CalcMax_Property => this.CalcMax_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> ICreatureGetter.CalcMax_Property => this.CalcMax_Property;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<RankPlacement> _Factions = new NotifyingList<RankPlacement>();
        public INotifyingList<RankPlacement> Factions => _Factions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RankPlacement> FactionsEnumerable
        {
            get => _Factions;
            set => _Factions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<RankPlacement> ICreature.Factions => _Factions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<RankPlacement> ICreatureGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        public FormIDSetLink<ItemAbstract> DeathItem_Property { get; } = new FormIDSetLink<ItemAbstract>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ItemAbstract DeathItem { get => DeathItem_Property.Item; set => DeathItem_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<ItemAbstract> ICreatureGetter.DeathItem_Property => this.DeathItem_Property;
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> ICreatureGetter.Script_Property => this.Script_Property;
        #endregion
        #region Aggression
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Aggression = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Aggression_Property => _Aggression;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Aggression
        {
            get => this._Aggression.Item;
            set => this._Aggression.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Aggression_Property => this.Aggression_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Aggression_Property => this.Aggression_Property;
        #endregion
        #region Confidence
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Confidence = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Confidence_Property => _Confidence;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Confidence
        {
            get => this._Confidence.Item;
            set => this._Confidence.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Confidence_Property => this.Confidence_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Confidence_Property => this.Confidence_Property;
        #endregion
        #region EnergyLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _EnergyLevel = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> EnergyLevel_Property => _EnergyLevel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte EnergyLevel
        {
            get => this._EnergyLevel.Item;
            set => this._EnergyLevel.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.EnergyLevel_Property => this.EnergyLevel_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.EnergyLevel_Property => this.EnergyLevel_Property;
        #endregion
        #region Responsibility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Responsibility = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Responsibility_Property => _Responsibility;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Responsibility
        {
            get => this._Responsibility.Item;
            set => this._Responsibility.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Responsibility_Property => this.Responsibility_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Responsibility_Property => this.Responsibility_Property;
        #endregion
        #region BuySellServices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<NPC.BuySellServiceFlag> _BuySellServices = NotifyingItem.Factory<NPC.BuySellServiceFlag>();
        public INotifyingItem<NPC.BuySellServiceFlag> BuySellServices_Property => _BuySellServices;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NPC.BuySellServiceFlag BuySellServices
        {
            get => this._BuySellServices.Item;
            set => this._BuySellServices.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<NPC.BuySellServiceFlag> ICreature.BuySellServices_Property => this.BuySellServices_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<NPC.BuySellServiceFlag> ICreatureGetter.BuySellServices_Property => this.BuySellServices_Property;
        #endregion
        #region Teaches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Skill> _Teaches = NotifyingItem.Factory<Skill>();
        public INotifyingItem<Skill> Teaches_Property => _Teaches;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Skill Teaches
        {
            get => this._Teaches.Item;
            set => this._Teaches.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Skill> ICreature.Teaches_Property => this.Teaches_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Skill> ICreatureGetter.Teaches_Property => this.Teaches_Property;
        #endregion
        #region MaximumTrainingLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _MaximumTrainingLevel = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> MaximumTrainingLevel_Property => _MaximumTrainingLevel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte MaximumTrainingLevel
        {
            get => this._MaximumTrainingLevel.Item;
            set => this._MaximumTrainingLevel.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.MaximumTrainingLevel_Property => this.MaximumTrainingLevel_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.MaximumTrainingLevel_Property => this.MaximumTrainingLevel_Property;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDSetLink<AIPackage>> _AIPackages = new NotifyingList<FormIDSetLink<AIPackage>>();
        public INotifyingList<FormIDSetLink<AIPackage>> AIPackages => _AIPackages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<AIPackage>> AIPackagesEnumerable
        {
            get => _AIPackages;
            set => _AIPackages.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDSetLink<AIPackage>> ICreature.AIPackages => _AIPackages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDSetLink<AIPackage>> ICreatureGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<String> _Animations = new NotifyingList<String>();
        public INotifyingList<String> Animations => _Animations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<String> AnimationsEnumerable
        {
            get => _Animations;
            set => _Animations.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<String> ICreature.Animations => _Animations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<String> ICreatureGetter.Animations => _Animations;
        #endregion

        #endregion
        #region CreatureType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Creature.CreatureTypeEnum> _CreatureType = NotifyingItem.Factory<Creature.CreatureTypeEnum>();
        public INotifyingItem<Creature.CreatureTypeEnum> CreatureType_Property => _CreatureType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Creature.CreatureTypeEnum CreatureType
        {
            get => this._CreatureType.Item;
            set => this._CreatureType.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Creature.CreatureTypeEnum> ICreature.CreatureType_Property => this.CreatureType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Creature.CreatureTypeEnum> ICreatureGetter.CreatureType_Property => this.CreatureType_Property;
        #endregion
        #region CombatSKill
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _CombatSKill = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> CombatSKill_Property => _CombatSKill;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte CombatSKill
        {
            get => this._CombatSKill.Item;
            set => this._CombatSKill.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.CombatSKill_Property => this.CombatSKill_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.CombatSKill_Property => this.CombatSKill_Property;
        #endregion
        #region MagicSKill
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _MagicSKill = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> MagicSKill_Property => _MagicSKill;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte MagicSKill
        {
            get => this._MagicSKill.Item;
            set => this._MagicSKill.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.MagicSKill_Property => this.MagicSKill_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.MagicSKill_Property => this.MagicSKill_Property;
        #endregion
        #region StealthSKill
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _StealthSKill = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> StealthSKill_Property => _StealthSKill;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte StealthSKill
        {
            get => this._StealthSKill.Item;
            set => this._StealthSKill.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.StealthSKill_Property => this.StealthSKill_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.StealthSKill_Property => this.StealthSKill_Property;
        #endregion
        #region SoulLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<SoulLevel> _SoulLevel = NotifyingItem.Factory<SoulLevel>();
        public INotifyingItem<SoulLevel> SoulLevel_Property => _SoulLevel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SoulLevel SoulLevel
        {
            get => this._SoulLevel.Item;
            set => this._SoulLevel.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<SoulLevel> ICreature.SoulLevel_Property => this.SoulLevel_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<SoulLevel> ICreatureGetter.SoulLevel_Property => this.SoulLevel_Property;
        #endregion
        #region Health
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt32> _Health = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Health_Property => _Health;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Health
        {
            get => this._Health.Item;
            set => this._Health.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> ICreature.Health_Property => this.Health_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> ICreatureGetter.Health_Property => this.Health_Property;
        #endregion
        #region AttackDamage
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<UInt16> _AttackDamage = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> AttackDamage_Property => _AttackDamage;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 AttackDamage
        {
            get => this._AttackDamage.Item;
            set => this._AttackDamage.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> ICreature.AttackDamage_Property => this.AttackDamage_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> ICreatureGetter.AttackDamage_Property => this.AttackDamage_Property;
        #endregion
        #region Strength
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Strength = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Strength_Property => _Strength;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Strength
        {
            get => this._Strength.Item;
            set => this._Strength.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Strength_Property => this.Strength_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Strength_Property => this.Strength_Property;
        #endregion
        #region Intelligence
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Intelligence = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Intelligence_Property => _Intelligence;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Intelligence
        {
            get => this._Intelligence.Item;
            set => this._Intelligence.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Intelligence_Property => this.Intelligence_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Intelligence_Property => this.Intelligence_Property;
        #endregion
        #region Willpower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Willpower = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Willpower_Property => _Willpower;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Willpower
        {
            get => this._Willpower.Item;
            set => this._Willpower.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Willpower_Property => this.Willpower_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Willpower_Property => this.Willpower_Property;
        #endregion
        #region Agility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Agility = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Agility_Property => _Agility;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Agility
        {
            get => this._Agility.Item;
            set => this._Agility.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Agility_Property => this.Agility_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Agility_Property => this.Agility_Property;
        #endregion
        #region Speed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Speed = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Speed_Property => _Speed;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Speed
        {
            get => this._Speed.Item;
            set => this._Speed.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Speed_Property => this.Speed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Speed_Property => this.Speed_Property;
        #endregion
        #region Endurance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Endurance = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Endurance_Property => _Endurance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Endurance
        {
            get => this._Endurance.Item;
            set => this._Endurance.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Endurance_Property => this.Endurance_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Endurance_Property => this.Endurance_Property;
        #endregion
        #region Personality
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Personality = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Personality_Property => _Personality;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Personality
        {
            get => this._Personality.Item;
            set => this._Personality.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Personality_Property => this.Personality_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Personality_Property => this.Personality_Property;
        #endregion
        #region Luck
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Luck = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Luck_Property => _Luck;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Luck
        {
            get => this._Luck.Item;
            set => this._Luck.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ICreature.Luck_Property => this.Luck_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ICreatureGetter.Luck_Property => this.Luck_Property;
        #endregion
        #region AttackReach
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Byte> _AttackReach = NotifyingSetItem.Factory<Byte>(markAsSet: false);
        public INotifyingSetItem<Byte> AttackReach_Property => _AttackReach;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte AttackReach
        {
            get => this._AttackReach.Item;
            set => this._AttackReach.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte> ICreature.AttackReach_Property => this.AttackReach_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte> ICreatureGetter.AttackReach_Property => this.AttackReach_Property;
        #endregion
        #region CombatStyle
        public FormIDSetLink<CombatStyle> CombatStyle_Property { get; } = new FormIDSetLink<CombatStyle>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CombatStyle CombatStyle { get => CombatStyle_Property.Item; set => CombatStyle_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<CombatStyle> ICreatureGetter.CombatStyle_Property => this.CombatStyle_Property;
        #endregion
        #region TurningSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Single> _TurningSpeed = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> TurningSpeed_Property => _TurningSpeed;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single TurningSpeed
        {
            get => this._TurningSpeed.Item;
            set => this._TurningSpeed.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> ICreature.TurningSpeed_Property => this.TurningSpeed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> ICreatureGetter.TurningSpeed_Property => this.TurningSpeed_Property;
        #endregion
        #region BaseScale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Single> _BaseScale = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> BaseScale_Property => _BaseScale;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single BaseScale
        {
            get => this._BaseScale.Item;
            set => this._BaseScale.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> ICreature.BaseScale_Property => this.BaseScale_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> ICreatureGetter.BaseScale_Property => this.BaseScale_Property;
        #endregion
        #region FootWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Single> _FootWeight = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> FootWeight_Property => _FootWeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FootWeight
        {
            get => this._FootWeight.Item;
            set => this._FootWeight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> ICreature.FootWeight_Property => this.FootWeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> ICreatureGetter.FootWeight_Property => this.FootWeight_Property;
        #endregion
        #region BloodSpray
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _BloodSpray = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> BloodSpray_Property => _BloodSpray;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath BloodSpray
        {
            get => this._BloodSpray.Item;
            set => this._BloodSpray.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> ICreature.BloodSpray_Property => this.BloodSpray_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> ICreatureGetter.BloodSpray_Property => this.BloodSpray_Property;
        #endregion
        #region BloodDecal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _BloodDecal = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> BloodDecal_Property => _BloodDecal;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath BloodDecal
        {
            get => this._BloodDecal.Item;
            set => this._BloodDecal.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> ICreature.BloodDecal_Property => this.BloodDecal_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> ICreatureGetter.BloodDecal_Property => this.BloodDecal_Property;
        #endregion
        #region InheritsSoundFrom
        public FormIDSetLink<Creature> InheritsSoundFrom_Property { get; } = new FormIDSetLink<Creature>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Creature InheritsSoundFrom { get => InheritsSoundFrom_Property.Item; set => InheritsSoundFrom_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Creature> ICreatureGetter.InheritsSoundFrom_Property => this.InheritsSoundFrom_Property;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<CreatureSound> _Sounds = new NotifyingList<CreatureSound>();
        public INotifyingList<CreatureSound> Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<CreatureSound> SoundsEnumerable
        {
            get => _Sounds;
            set => _Sounds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<CreatureSound> ICreature.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<CreatureSound> ICreatureGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => CreatureCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => CreatureCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CreatureCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CreatureCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Creature>.GetEqualsMask(Creature rhs) => CreatureCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICreatureGetter>.GetEqualsMask(ICreatureGetter rhs) => CreatureCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return CreatureCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Creature_Mask<bool> printMask = null)
        {
            return CreatureCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            CreatureCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Creature_Mask<bool> GetHasBeenSetMask()
        {
            return CreatureCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Creature rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Creature rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!this.Items.SequenceEqual(rhs.Items)) return false;
            }
            if (Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (Spells.HasBeenSet)
            {
                if (!this.Spells.SequenceEqual(rhs.Spells)) return false;
            }
            if (Models.HasBeenSet != rhs.Models.HasBeenSet) return false;
            if (Models.HasBeenSet)
            {
                if (!this.Models.SequenceEqual(rhs.Models)) return false;
            }
            if (NIFT_Property.HasBeenSet != rhs.NIFT_Property.HasBeenSet) return false;
            if (NIFT_Property.HasBeenSet)
            {
                if (!this.NIFT.EqualsFast(rhs.NIFT)) return false;
            }
            if (this.Flags != rhs.Flags) return false;
            if (this.BaseSpellPoints != rhs.BaseSpellPoints) return false;
            if (this.Fatigue != rhs.Fatigue) return false;
            if (this.BarterGold != rhs.BarterGold) return false;
            if (this.LevelOffset != rhs.LevelOffset) return false;
            if (this.CalcMin != rhs.CalcMin) return false;
            if (this.CalcMax != rhs.CalcMax) return false;
            if (Factions.HasBeenSet != rhs.Factions.HasBeenSet) return false;
            if (Factions.HasBeenSet)
            {
                if (!this.Factions.SequenceEqual(rhs.Factions)) return false;
            }
            if (DeathItem_Property.HasBeenSet != rhs.DeathItem_Property.HasBeenSet) return false;
            if (DeathItem_Property.HasBeenSet)
            {
                if (!this.DeathItem_Property.Equals(rhs.DeathItem_Property)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (this.Aggression != rhs.Aggression) return false;
            if (this.Confidence != rhs.Confidence) return false;
            if (this.EnergyLevel != rhs.EnergyLevel) return false;
            if (this.Responsibility != rhs.Responsibility) return false;
            if (this.BuySellServices != rhs.BuySellServices) return false;
            if (this.Teaches != rhs.Teaches) return false;
            if (this.MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            if (AIPackages.HasBeenSet != rhs.AIPackages.HasBeenSet) return false;
            if (AIPackages.HasBeenSet)
            {
                if (!this.AIPackages.SequenceEqual(rhs.AIPackages)) return false;
            }
            if (Animations.HasBeenSet != rhs.Animations.HasBeenSet) return false;
            if (Animations.HasBeenSet)
            {
                if (!this.Animations.SequenceEqual(rhs.Animations)) return false;
            }
            if (this.CreatureType != rhs.CreatureType) return false;
            if (this.CombatSKill != rhs.CombatSKill) return false;
            if (this.MagicSKill != rhs.MagicSKill) return false;
            if (this.StealthSKill != rhs.StealthSKill) return false;
            if (this.SoulLevel != rhs.SoulLevel) return false;
            if (this.Health != rhs.Health) return false;
            if (this.AttackDamage != rhs.AttackDamage) return false;
            if (this.Strength != rhs.Strength) return false;
            if (this.Intelligence != rhs.Intelligence) return false;
            if (this.Willpower != rhs.Willpower) return false;
            if (this.Agility != rhs.Agility) return false;
            if (this.Speed != rhs.Speed) return false;
            if (this.Endurance != rhs.Endurance) return false;
            if (this.Personality != rhs.Personality) return false;
            if (this.Luck != rhs.Luck) return false;
            if (AttackReach_Property.HasBeenSet != rhs.AttackReach_Property.HasBeenSet) return false;
            if (AttackReach_Property.HasBeenSet)
            {
                if (this.AttackReach != rhs.AttackReach) return false;
            }
            if (CombatStyle_Property.HasBeenSet != rhs.CombatStyle_Property.HasBeenSet) return false;
            if (CombatStyle_Property.HasBeenSet)
            {
                if (!this.CombatStyle_Property.Equals(rhs.CombatStyle_Property)) return false;
            }
            if (TurningSpeed_Property.HasBeenSet != rhs.TurningSpeed_Property.HasBeenSet) return false;
            if (TurningSpeed_Property.HasBeenSet)
            {
                if (!this.TurningSpeed.EqualsWithin(rhs.TurningSpeed)) return false;
            }
            if (BaseScale_Property.HasBeenSet != rhs.BaseScale_Property.HasBeenSet) return false;
            if (BaseScale_Property.HasBeenSet)
            {
                if (!this.BaseScale.EqualsWithin(rhs.BaseScale)) return false;
            }
            if (FootWeight_Property.HasBeenSet != rhs.FootWeight_Property.HasBeenSet) return false;
            if (FootWeight_Property.HasBeenSet)
            {
                if (!this.FootWeight.EqualsWithin(rhs.FootWeight)) return false;
            }
            if (BloodSpray_Property.HasBeenSet != rhs.BloodSpray_Property.HasBeenSet) return false;
            if (BloodSpray_Property.HasBeenSet)
            {
                if (!object.Equals(this.BloodSpray, rhs.BloodSpray)) return false;
            }
            if (BloodDecal_Property.HasBeenSet != rhs.BloodDecal_Property.HasBeenSet) return false;
            if (BloodDecal_Property.HasBeenSet)
            {
                if (!object.Equals(this.BloodDecal, rhs.BloodDecal)) return false;
            }
            if (InheritsSoundFrom_Property.HasBeenSet != rhs.InheritsSoundFrom_Property.HasBeenSet) return false;
            if (InheritsSoundFrom_Property.HasBeenSet)
            {
                if (!this.InheritsSoundFrom_Property.Equals(rhs.InheritsSoundFrom_Property)) return false;
            }
            if (Sounds.HasBeenSet != rhs.Sounds.HasBeenSet) return false;
            if (Sounds.HasBeenSet)
            {
                if (!this.Sounds.SequenceEqual(rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            if (Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            }
            if (Models.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Models).CombineHashCode(ret);
            }
            if (NIFT_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(NIFT).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BaseSpellPoints).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fatigue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BarterGold).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LevelOffset).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CalcMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CalcMax).CombineHashCode(ret);
            if (Factions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Factions).CombineHashCode(ret);
            }
            if (DeathItem_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DeathItem).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Aggression).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Confidence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EnergyLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Responsibility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BuySellServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaximumTrainingLevel).CombineHashCode(ret);
            if (AIPackages.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(AIPackages).CombineHashCode(ret);
            }
            if (Animations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Animations).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(CreatureType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CombatSKill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MagicSKill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(StealthSKill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SoulLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AttackDamage).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Luck).CombineHashCode(ret);
            if (AttackReach_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(AttackReach).CombineHashCode(ret);
            }
            if (CombatStyle_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CombatStyle).CombineHashCode(ret);
            }
            if (TurningSpeed_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TurningSpeed).CombineHashCode(ret);
            }
            if (BaseScale_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BaseScale).CombineHashCode(ret);
            }
            if (FootWeight_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FootWeight).CombineHashCode(ret);
            }
            if (BloodSpray_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BloodSpray).CombineHashCode(ret);
            }
            if (BloodDecal_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BloodDecal).CombineHashCode(ret);
            }
            if (InheritsSoundFrom_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(InheritsSoundFrom).CombineHashCode(ret);
            }
            if (Sounds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Creature Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Creature Create_XML(
            XElement root,
            out Creature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static Creature Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Creature();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Creature Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Creature Create_XML(
            string path,
            out Creature_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Creature Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Creature Create_XML(
            Stream stream,
            out Creature_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Creature>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Creature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Creature>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Creature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Creature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Creature_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Creature_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Creature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Creature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Creature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            CreatureCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Creature item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out var ModelParse,
                            errorMask: errorMask))
                        {
                            item._Model.Item = ModelParse;
                        }
                        else
                        {
                            item._Model.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    ListXmlTranslation<ItemEntry>.Instance.ParseInto(
                        root: root,
                        item: item._Items,
                        fieldIndex: (int)Creature_FieldIndex.Items,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<ItemEntry>.Instance.Parse);
                    break;
                case "Spells":
                    ListXmlTranslation<FormIDSetLink<Spell>>.Instance.ParseInto(
                        root: root,
                        item: item._Spells,
                        fieldIndex: (int)Creature_FieldIndex.Spells,
                        errorMask: errorMask,
                        transl: FormIDXmlTranslation.Instance.Parse);
                    break;
                case "Models":
                    ListXmlTranslation<String>.Instance.ParseInto(
                        root: root,
                        item: item._Models,
                        fieldIndex: (int)Creature_FieldIndex.Models,
                        errorMask: errorMask,
                        transl: StringXmlTranslation.Instance.Parse);
                    break;
                case "NIFT":
                    ByteArrayXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.NIFT,
                        item: item._NIFT,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    EnumXmlTranslation<Creature.CreatureFlag>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Flags,
                        item: item._Flags,
                        errorMask: errorMask);
                    break;
                case "BaseSpellPoints":
                    UInt16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.BaseSpellPoints,
                        item: item._BaseSpellPoints,
                        errorMask: errorMask);
                    break;
                case "Fatigue":
                    UInt16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Fatigue,
                        item: item._Fatigue,
                        errorMask: errorMask);
                    break;
                case "BarterGold":
                    UInt16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.BarterGold,
                        item: item._BarterGold,
                        errorMask: errorMask);
                    break;
                case "LevelOffset":
                    Int16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.LevelOffset,
                        item: item._LevelOffset,
                        errorMask: errorMask);
                    break;
                case "CalcMin":
                    UInt16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.CalcMin,
                        item: item._CalcMin,
                        errorMask: errorMask);
                    break;
                case "CalcMax":
                    UInt16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.CalcMax,
                        item: item._CalcMax,
                        errorMask: errorMask);
                    break;
                case "Factions":
                    ListXmlTranslation<RankPlacement>.Instance.ParseInto(
                        root: root,
                        item: item._Factions,
                        fieldIndex: (int)Creature_FieldIndex.Factions,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<RankPlacement>.Instance.Parse);
                    break;
                case "DeathItem":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.DeathItem,
                        item: item.DeathItem_Property,
                        errorMask: errorMask);
                    break;
                case "Script":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Script,
                        item: item.Script_Property,
                        errorMask: errorMask);
                    break;
                case "Aggression":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Aggression,
                        item: item._Aggression,
                        errorMask: errorMask);
                    break;
                case "Confidence":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Confidence,
                        item: item._Confidence,
                        errorMask: errorMask);
                    break;
                case "EnergyLevel":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.EnergyLevel,
                        item: item._EnergyLevel,
                        errorMask: errorMask);
                    break;
                case "Responsibility":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Responsibility,
                        item: item._Responsibility,
                        errorMask: errorMask);
                    break;
                case "BuySellServices":
                    EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.BuySellServices,
                        item: item._BuySellServices,
                        errorMask: errorMask);
                    break;
                case "Teaches":
                    EnumXmlTranslation<Skill>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Teaches,
                        item: item._Teaches,
                        errorMask: errorMask);
                    break;
                case "MaximumTrainingLevel":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.MaximumTrainingLevel,
                        item: item._MaximumTrainingLevel,
                        errorMask: errorMask);
                    break;
                case "AIPackages":
                    ListXmlTranslation<FormIDSetLink<AIPackage>>.Instance.ParseInto(
                        root: root,
                        item: item._AIPackages,
                        fieldIndex: (int)Creature_FieldIndex.AIPackages,
                        errorMask: errorMask,
                        transl: FormIDXmlTranslation.Instance.Parse);
                    break;
                case "Animations":
                    ListXmlTranslation<String>.Instance.ParseInto(
                        root: root,
                        item: item._Animations,
                        fieldIndex: (int)Creature_FieldIndex.Animations,
                        errorMask: errorMask,
                        transl: StringXmlTranslation.Instance.Parse);
                    break;
                case "CreatureType":
                    EnumXmlTranslation<Creature.CreatureTypeEnum>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.CreatureType,
                        item: item._CreatureType,
                        errorMask: errorMask);
                    break;
                case "CombatSKill":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.CombatSKill,
                        item: item._CombatSKill,
                        errorMask: errorMask);
                    break;
                case "MagicSKill":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.MagicSKill,
                        item: item._MagicSKill,
                        errorMask: errorMask);
                    break;
                case "StealthSKill":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.StealthSKill,
                        item: item._StealthSKill,
                        errorMask: errorMask);
                    break;
                case "SoulLevel":
                    EnumXmlTranslation<SoulLevel>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.SoulLevel,
                        item: item._SoulLevel,
                        errorMask: errorMask);
                    break;
                case "Health":
                    UInt32XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Health,
                        item: item._Health,
                        errorMask: errorMask);
                    break;
                case "AttackDamage":
                    UInt16XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.AttackDamage,
                        item: item._AttackDamage,
                        errorMask: errorMask);
                    break;
                case "Strength":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Strength,
                        item: item._Strength,
                        errorMask: errorMask);
                    break;
                case "Intelligence":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Intelligence,
                        item: item._Intelligence,
                        errorMask: errorMask);
                    break;
                case "Willpower":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Willpower,
                        item: item._Willpower,
                        errorMask: errorMask);
                    break;
                case "Agility":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Agility,
                        item: item._Agility,
                        errorMask: errorMask);
                    break;
                case "Speed":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Speed,
                        item: item._Speed,
                        errorMask: errorMask);
                    break;
                case "Endurance":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Endurance,
                        item: item._Endurance,
                        errorMask: errorMask);
                    break;
                case "Personality":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Personality,
                        item: item._Personality,
                        errorMask: errorMask);
                    break;
                case "Luck":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.Luck,
                        item: item._Luck,
                        errorMask: errorMask);
                    break;
                case "AttackReach":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.AttackReach,
                        item: item._AttackReach,
                        errorMask: errorMask);
                    break;
                case "CombatStyle":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                        item: item.CombatStyle_Property,
                        errorMask: errorMask);
                    break;
                case "TurningSpeed":
                    FloatXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.TurningSpeed,
                        item: item._TurningSpeed,
                        errorMask: errorMask);
                    break;
                case "BaseScale":
                    FloatXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.BaseScale,
                        item: item._BaseScale,
                        errorMask: errorMask);
                    break;
                case "FootWeight":
                    FloatXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.FootWeight,
                        item: item._FootWeight,
                        errorMask: errorMask);
                    break;
                case "BloodSpray":
                    FilePathXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.BloodSpray,
                        item: item._BloodSpray,
                        errorMask: errorMask);
                    break;
                case "BloodDecal":
                    FilePathXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.BloodDecal,
                        item: item._BloodDecal,
                        errorMask: errorMask);
                    break;
                case "InheritsSoundFrom":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                        item: item.InheritsSoundFrom_Property,
                        errorMask: errorMask);
                    break;
                case "Sounds":
                    ListXmlTranslation<CreatureSound>.Instance.ParseInto(
                        root: root,
                        item: item._Sounds,
                        fieldIndex: (int)Creature_FieldIndex.Sounds,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<CreatureSound>.Instance.Parse);
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Creature_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            foreach (var item in Factions.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return DeathItem_Property;
            yield return Script_Property;
            yield return CombatStyle_Property;
            yield return InheritsSoundFrom_Property;
            foreach (var item in Sounds.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Creature Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Creature Create_Binary(
            MutagenFrame frame,
            out Creature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static Creature Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Creature, Creature_FieldIndex>(
                record: new Creature(),
                frame: frame,
                errorMask: errorMask,
                recType: Creature_Registration.CREA_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Creature Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Creature Create_Binary(
            string path,
            out Creature_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Creature Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Creature Create_Binary(
            Stream stream,
            out Creature_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Creature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Creature_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Creature_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            CreatureCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Creature item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Creature_FieldIndex?> Fill_Binary_RecordTypes(
            Creature item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    LoquiBinaryTranslation<Model>.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Creature_FieldIndex.Model,
                        errorMask: errorMask,
                        item: item._Model);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Model);
                case "CNTO":
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Creature_Registration.CNTO_HEADER,
                        item: item._Items,
                        fieldIndex: (int)Creature_FieldIndex.Items,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<ItemEntry>.Instance.Parse);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Items);
                case "SPLO":
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Spell>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Creature_Registration.SPLO_HEADER,
                        item: item._Spells,
                        fieldIndex: (int)Creature_FieldIndex.Spells,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Spells);
                case "NIFZ":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._Models,
                        fieldIndex: (int)Creature_FieldIndex.Models,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out String listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                r,
                                errorMask: listErrMask,
                                item: out listSubItem,
                                parseWhole: false);
                        }
                        );
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Models);
                case "NIFT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.ParseInto(
                        frame.SpawnWithLength(contentLength),
                        item: item._NIFT,
                        fieldIndex: (int)Creature_FieldIndex.NIFT,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.NIFT);
                case "ACBS":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureFlag>.Instance.ParseInto(
                            frame: dataFrame.SpawnWithLength(4),
                            item: item._Flags,
                            fieldIndex: (int)Creature_FieldIndex.Flags,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._BaseSpellPoints,
                            fieldIndex: (int)Creature_FieldIndex.BaseSpellPoints,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Fatigue,
                            fieldIndex: (int)Creature_FieldIndex.Fatigue,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._BarterGold,
                            fieldIndex: (int)Creature_FieldIndex.BarterGold,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._LevelOffset,
                            fieldIndex: (int)Creature_FieldIndex.LevelOffset,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._CalcMin,
                            fieldIndex: (int)Creature_FieldIndex.CalcMin,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._CalcMax,
                            fieldIndex: (int)Creature_FieldIndex.CalcMax,
                            errorMask: errorMask);
                    }
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.CalcMax);
                case "SNAM":
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Creature_Registration.SNAM_HEADER,
                        item: item._Factions,
                        fieldIndex: (int)Creature_FieldIndex.Factions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<RankPlacement>.Instance.Parse);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Factions);
                case "INAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.DeathItem_Property,
                        fieldIndex: (int)Creature_FieldIndex.DeathItem,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.DeathItem);
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Script_Property,
                        fieldIndex: (int)Creature_FieldIndex.Script,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Script);
                case "AIDT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Aggression,
                            fieldIndex: (int)Creature_FieldIndex.Aggression,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Confidence,
                            fieldIndex: (int)Creature_FieldIndex.Confidence,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._EnergyLevel,
                            fieldIndex: (int)Creature_FieldIndex.EnergyLevel,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Responsibility,
                            fieldIndex: (int)Creature_FieldIndex.Responsibility,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.ParseInto(
                            frame: dataFrame.SpawnWithLength(4),
                            item: item._BuySellServices,
                            fieldIndex: (int)Creature_FieldIndex.BuySellServices,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.ParseInto(
                            frame: dataFrame.SpawnWithLength(1),
                            item: item._Teaches,
                            fieldIndex: (int)Creature_FieldIndex.Teaches,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._MaximumTrainingLevel,
                            fieldIndex: (int)Creature_FieldIndex.MaximumTrainingLevel,
                            errorMask: errorMask);
                        dataFrame.SetPosition(dataFrame.Position + 2);
                    }
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.MaximumTrainingLevel);
                case "PKID":
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<AIPackage>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Creature_Registration.PKID_HEADER,
                        item: item._AIPackages,
                        fieldIndex: (int)Creature_FieldIndex.AIPackages,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.AIPackages);
                case "KFFZ":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._Animations,
                        fieldIndex: (int)Creature_FieldIndex.Animations,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out String listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                r,
                                errorMask: listErrMask,
                                item: out listSubItem,
                                parseWhole: false);
                        }
                        );
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Animations);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureTypeEnum>.Instance.ParseInto(
                            frame: dataFrame.SpawnWithLength(1),
                            item: item._CreatureType,
                            fieldIndex: (int)Creature_FieldIndex.CreatureType,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._CombatSKill,
                            fieldIndex: (int)Creature_FieldIndex.CombatSKill,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._MagicSKill,
                            fieldIndex: (int)Creature_FieldIndex.MagicSKill,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._StealthSKill,
                            fieldIndex: (int)Creature_FieldIndex.StealthSKill,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.ParseInto(
                            frame: dataFrame.SpawnWithLength(2),
                            item: item._SoulLevel,
                            fieldIndex: (int)Creature_FieldIndex.SoulLevel,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Health,
                            fieldIndex: (int)Creature_FieldIndex.Health,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._AttackDamage,
                            fieldIndex: (int)Creature_FieldIndex.AttackDamage,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Strength,
                            fieldIndex: (int)Creature_FieldIndex.Strength,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Intelligence,
                            fieldIndex: (int)Creature_FieldIndex.Intelligence,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Willpower,
                            fieldIndex: (int)Creature_FieldIndex.Willpower,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Agility,
                            fieldIndex: (int)Creature_FieldIndex.Agility,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Speed,
                            fieldIndex: (int)Creature_FieldIndex.Speed,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Endurance,
                            fieldIndex: (int)Creature_FieldIndex.Endurance,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Personality,
                            fieldIndex: (int)Creature_FieldIndex.Personality,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Luck,
                            fieldIndex: (int)Creature_FieldIndex.Luck,
                            errorMask: errorMask);
                    }
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Luck);
                case "RNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._AttackReach,
                        fieldIndex: (int)Creature_FieldIndex.AttackReach,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.AttackReach);
                case "ZNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.CombatStyle_Property,
                        fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.CombatStyle);
                case "TNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._TurningSpeed,
                        fieldIndex: (int)Creature_FieldIndex.TurningSpeed,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.TurningSpeed);
                case "BNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._BaseScale,
                        fieldIndex: (int)Creature_FieldIndex.BaseScale,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.BaseScale);
                case "WNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._FootWeight,
                        fieldIndex: (int)Creature_FieldIndex.FootWeight,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.FootWeight);
                case "NAM0":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._BloodSpray,
                        fieldIndex: (int)Creature_FieldIndex.BloodSpray,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.BloodSpray);
                case "NAM1":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._BloodDecal,
                        fieldIndex: (int)Creature_FieldIndex.BloodDecal,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.BloodDecal);
                case "CSCR":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.InheritsSoundFrom_Property,
                        fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                        errorMask: errorMask);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.InheritsSoundFrom);
                case "CSDT":
                case "CSDI":
                case "CSDC":
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<CreatureSound>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: CreatureSound_Registration.TriggeringRecordTypes,
                        item: item._Sounds,
                        fieldIndex: (int)Creature_FieldIndex.Sounds,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<CreatureSound>.Instance.Parse);
                    return TryGet<Creature_FieldIndex?>.Succeed(Creature_FieldIndex.Sounds);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => CreatureCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Creature Copy(
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null)
        {
            return Creature.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Creature Copy(
            ICreature item,
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null)
        {
            Creature ret;
            if (item.GetType().Equals(typeof(Creature)))
            {
                ret = new Creature();
            }
            else
            {
                ret = (Creature)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Creature Copy_ToLoqui(
            ICreatureGetter item,
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null)
        {
            Creature ret;
            if (item.GetType().Equals(typeof(Creature)))
            {
                ret = new Creature() as Creature;
            }
            else
            {
                ret = (Creature)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ICreatureGetter rhs,
            Creature_CopyMask copyMask,
            ICreatureGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICreatureGetter rhs,
            out Creature_ErrorMask errorMask,
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CreatureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICreatureGetter rhs,
            ErrorMaskBuilder errorMask,
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            CreatureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Items:
                    this._Items.SetTo((IEnumerable<ItemEntry>)obj, cmds);
                    break;
                case Creature_FieldIndex.Spells:
                    this._Spells.SetTo((IEnumerable<FormIDSetLink<Spell>>)obj, cmds);
                    break;
                case Creature_FieldIndex.Models:
                    this._Models.SetTo((IEnumerable<String>)obj, cmds);
                    break;
                case Creature_FieldIndex.NIFT:
                    this._NIFT.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Flags:
                    this._Flags.Set(
                        (Creature.CreatureFlag)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    this._BaseSpellPoints.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Fatigue:
                    this._Fatigue.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.BarterGold:
                    this._BarterGold.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.LevelOffset:
                    this._LevelOffset.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.CalcMin:
                    this._CalcMin.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.CalcMax:
                    this._CalcMax.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Factions:
                    this._Factions.SetTo((IEnumerable<RankPlacement>)obj, cmds);
                    break;
                case Creature_FieldIndex.DeathItem:
                    this.DeathItem_Property.Set(
                        (FormIDSetLink<ItemAbstract>)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Aggression:
                    this._Aggression.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Confidence:
                    this._Confidence.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    this._EnergyLevel.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Responsibility:
                    this._Responsibility.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.BuySellServices:
                    this._BuySellServices.Set(
                        (NPC.BuySellServiceFlag)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Teaches:
                    this._Teaches.Set(
                        (Skill)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    this._MaximumTrainingLevel.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.AIPackages:
                    this._AIPackages.SetTo((IEnumerable<FormIDSetLink<AIPackage>>)obj, cmds);
                    break;
                case Creature_FieldIndex.Animations:
                    this._Animations.SetTo((IEnumerable<String>)obj, cmds);
                    break;
                case Creature_FieldIndex.CreatureType:
                    this._CreatureType.Set(
                        (Creature.CreatureTypeEnum)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.CombatSKill:
                    this._CombatSKill.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.MagicSKill:
                    this._MagicSKill.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.StealthSKill:
                    this._StealthSKill.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.SoulLevel:
                    this._SoulLevel.Set(
                        (SoulLevel)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Health:
                    this._Health.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.AttackDamage:
                    this._AttackDamage.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Strength:
                    this._Strength.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Intelligence:
                    this._Intelligence.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Willpower:
                    this._Willpower.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Agility:
                    this._Agility.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Speed:
                    this._Speed.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Endurance:
                    this._Endurance.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Personality:
                    this._Personality.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Luck:
                    this._Luck.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.AttackReach:
                    this._AttackReach.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.CombatStyle:
                    this.CombatStyle_Property.Set(
                        (FormIDSetLink<CombatStyle>)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    this._TurningSpeed.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.BaseScale:
                    this._BaseScale.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.FootWeight:
                    this._FootWeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.BloodSpray:
                    this._BloodSpray.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.BloodDecal:
                    this._BloodDecal.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    this.InheritsSoundFrom_Property.Set(
                        (FormIDSetLink<Creature>)obj,
                        cmds);
                    break;
                case Creature_FieldIndex.Sounds:
                    this._Sounds.SetTo((IEnumerable<CreatureSound>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CreatureCommon.Clear(this, cmds);
        }


        public new static Creature Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Creature();
            foreach (var pair in fields)
            {
                CopyInInternal_Creature(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Creature(Creature obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Creature_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Items:
                    obj._Items.SetTo((IEnumerable<ItemEntry>)pair.Value, null);
                    break;
                case Creature_FieldIndex.Spells:
                    obj._Spells.SetTo((IEnumerable<FormIDSetLink<Spell>>)pair.Value, null);
                    break;
                case Creature_FieldIndex.Models:
                    obj._Models.SetTo((IEnumerable<String>)pair.Value, null);
                    break;
                case Creature_FieldIndex.NIFT:
                    obj._NIFT.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Creature.CreatureFlag)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    obj._BaseSpellPoints.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Fatigue:
                    obj._Fatigue.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.BarterGold:
                    obj._BarterGold.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.LevelOffset:
                    obj._LevelOffset.Set(
                        (Int16)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.CalcMin:
                    obj._CalcMin.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.CalcMax:
                    obj._CalcMax.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Factions:
                    obj._Factions.SetTo((IEnumerable<RankPlacement>)pair.Value, null);
                    break;
                case Creature_FieldIndex.DeathItem:
                    obj.DeathItem_Property.Set(
                        (FormIDSetLink<ItemAbstract>)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Aggression:
                    obj._Aggression.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Confidence:
                    obj._Confidence.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    obj._EnergyLevel.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Responsibility:
                    obj._Responsibility.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.BuySellServices:
                    obj._BuySellServices.Set(
                        (NPC.BuySellServiceFlag)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Teaches:
                    obj._Teaches.Set(
                        (Skill)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    obj._MaximumTrainingLevel.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.AIPackages:
                    obj._AIPackages.SetTo((IEnumerable<FormIDSetLink<AIPackage>>)pair.Value, null);
                    break;
                case Creature_FieldIndex.Animations:
                    obj._Animations.SetTo((IEnumerable<String>)pair.Value, null);
                    break;
                case Creature_FieldIndex.CreatureType:
                    obj._CreatureType.Set(
                        (Creature.CreatureTypeEnum)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.CombatSKill:
                    obj._CombatSKill.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.MagicSKill:
                    obj._MagicSKill.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.StealthSKill:
                    obj._StealthSKill.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.SoulLevel:
                    obj._SoulLevel.Set(
                        (SoulLevel)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Health:
                    obj._Health.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.AttackDamage:
                    obj._AttackDamage.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Strength:
                    obj._Strength.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Intelligence:
                    obj._Intelligence.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Willpower:
                    obj._Willpower.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Agility:
                    obj._Agility.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Speed:
                    obj._Speed.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Endurance:
                    obj._Endurance.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Personality:
                    obj._Personality.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Luck:
                    obj._Luck.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.AttackReach:
                    obj._AttackReach.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.CombatStyle:
                    obj.CombatStyle_Property.Set(
                        (FormIDSetLink<CombatStyle>)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    obj._TurningSpeed.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.BaseScale:
                    obj._BaseScale.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.FootWeight:
                    obj._FootWeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.BloodSpray:
                    obj._BloodSpray.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.BloodDecal:
                    obj._BloodDecal.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    obj.InheritsSoundFrom_Property.Set(
                        (FormIDSetLink<Creature>)pair.Value,
                        null);
                    break;
                case Creature_FieldIndex.Sounds:
                    obj._Sounds.SetTo((IEnumerable<CreatureSound>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Creature obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICreature : ICreatureGetter, INamedMajorRecord, ILoquiClass<ICreature, ICreatureGetter>, ILoquiClass<Creature, ICreatureGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new INotifyingList<ItemEntry> Items { get; }
        new INotifyingList<FormIDSetLink<Spell>> Spells { get; }
        new INotifyingList<String> Models { get; }
        new Byte[] NIFT { get; set; }
        new INotifyingSetItem<Byte[]> NIFT_Property { get; }

        new Creature.CreatureFlag Flags { get; set; }
        new INotifyingItem<Creature.CreatureFlag> Flags_Property { get; }

        new UInt16 BaseSpellPoints { get; set; }
        new INotifyingItem<UInt16> BaseSpellPoints_Property { get; }

        new UInt16 Fatigue { get; set; }
        new INotifyingItem<UInt16> Fatigue_Property { get; }

        new UInt16 BarterGold { get; set; }
        new INotifyingItem<UInt16> BarterGold_Property { get; }

        new Int16 LevelOffset { get; set; }
        new INotifyingItem<Int16> LevelOffset_Property { get; }

        new UInt16 CalcMin { get; set; }
        new INotifyingItem<UInt16> CalcMin_Property { get; }

        new UInt16 CalcMax { get; set; }
        new INotifyingItem<UInt16> CalcMax_Property { get; }

        new INotifyingList<RankPlacement> Factions { get; }
        new ItemAbstract DeathItem { get; set; }
        new Script Script { get; set; }
        new Byte Aggression { get; set; }
        new INotifyingItem<Byte> Aggression_Property { get; }

        new Byte Confidence { get; set; }
        new INotifyingItem<Byte> Confidence_Property { get; }

        new Byte EnergyLevel { get; set; }
        new INotifyingItem<Byte> EnergyLevel_Property { get; }

        new Byte Responsibility { get; set; }
        new INotifyingItem<Byte> Responsibility_Property { get; }

        new NPC.BuySellServiceFlag BuySellServices { get; set; }
        new INotifyingItem<NPC.BuySellServiceFlag> BuySellServices_Property { get; }

        new Skill Teaches { get; set; }
        new INotifyingItem<Skill> Teaches_Property { get; }

        new Byte MaximumTrainingLevel { get; set; }
        new INotifyingItem<Byte> MaximumTrainingLevel_Property { get; }

        new INotifyingList<FormIDSetLink<AIPackage>> AIPackages { get; }
        new INotifyingList<String> Animations { get; }
        new Creature.CreatureTypeEnum CreatureType { get; set; }
        new INotifyingItem<Creature.CreatureTypeEnum> CreatureType_Property { get; }

        new Byte CombatSKill { get; set; }
        new INotifyingItem<Byte> CombatSKill_Property { get; }

        new Byte MagicSKill { get; set; }
        new INotifyingItem<Byte> MagicSKill_Property { get; }

        new Byte StealthSKill { get; set; }
        new INotifyingItem<Byte> StealthSKill_Property { get; }

        new SoulLevel SoulLevel { get; set; }
        new INotifyingItem<SoulLevel> SoulLevel_Property { get; }

        new UInt32 Health { get; set; }
        new INotifyingItem<UInt32> Health_Property { get; }

        new UInt16 AttackDamage { get; set; }
        new INotifyingItem<UInt16> AttackDamage_Property { get; }

        new Byte Strength { get; set; }
        new INotifyingItem<Byte> Strength_Property { get; }

        new Byte Intelligence { get; set; }
        new INotifyingItem<Byte> Intelligence_Property { get; }

        new Byte Willpower { get; set; }
        new INotifyingItem<Byte> Willpower_Property { get; }

        new Byte Agility { get; set; }
        new INotifyingItem<Byte> Agility_Property { get; }

        new Byte Speed { get; set; }
        new INotifyingItem<Byte> Speed_Property { get; }

        new Byte Endurance { get; set; }
        new INotifyingItem<Byte> Endurance_Property { get; }

        new Byte Personality { get; set; }
        new INotifyingItem<Byte> Personality_Property { get; }

        new Byte Luck { get; set; }
        new INotifyingItem<Byte> Luck_Property { get; }

        new Byte AttackReach { get; set; }
        new INotifyingSetItem<Byte> AttackReach_Property { get; }

        new CombatStyle CombatStyle { get; set; }
        new Single TurningSpeed { get; set; }
        new INotifyingSetItem<Single> TurningSpeed_Property { get; }

        new Single BaseScale { get; set; }
        new INotifyingSetItem<Single> BaseScale_Property { get; }

        new Single FootWeight { get; set; }
        new INotifyingSetItem<Single> FootWeight_Property { get; }

        new FilePath BloodSpray { get; set; }
        new INotifyingSetItem<FilePath> BloodSpray_Property { get; }

        new FilePath BloodDecal { get; set; }
        new INotifyingSetItem<FilePath> BloodDecal_Property { get; }

        new Creature InheritsSoundFrom { get; set; }
        new INotifyingList<CreatureSound> Sounds { get; }
    }

    public partial interface ICreatureGetter : INamedMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Items
        INotifyingListGetter<ItemEntry> Items { get; }
        #endregion
        #region Spells
        INotifyingListGetter<FormIDSetLink<Spell>> Spells { get; }
        #endregion
        #region Models
        INotifyingListGetter<String> Models { get; }
        #endregion
        #region NIFT
        Byte[] NIFT { get; }
        INotifyingSetItemGetter<Byte[]> NIFT_Property { get; }

        #endregion
        #region Flags
        Creature.CreatureFlag Flags { get; }
        INotifyingItemGetter<Creature.CreatureFlag> Flags_Property { get; }

        #endregion
        #region BaseSpellPoints
        UInt16 BaseSpellPoints { get; }
        INotifyingItemGetter<UInt16> BaseSpellPoints_Property { get; }

        #endregion
        #region Fatigue
        UInt16 Fatigue { get; }
        INotifyingItemGetter<UInt16> Fatigue_Property { get; }

        #endregion
        #region BarterGold
        UInt16 BarterGold { get; }
        INotifyingItemGetter<UInt16> BarterGold_Property { get; }

        #endregion
        #region LevelOffset
        Int16 LevelOffset { get; }
        INotifyingItemGetter<Int16> LevelOffset_Property { get; }

        #endregion
        #region CalcMin
        UInt16 CalcMin { get; }
        INotifyingItemGetter<UInt16> CalcMin_Property { get; }

        #endregion
        #region CalcMax
        UInt16 CalcMax { get; }
        INotifyingItemGetter<UInt16> CalcMax_Property { get; }

        #endregion
        #region Factions
        INotifyingListGetter<RankPlacement> Factions { get; }
        #endregion
        #region DeathItem
        ItemAbstract DeathItem { get; }
        FormIDSetLink<ItemAbstract> DeathItem_Property { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Aggression
        Byte Aggression { get; }
        INotifyingItemGetter<Byte> Aggression_Property { get; }

        #endregion
        #region Confidence
        Byte Confidence { get; }
        INotifyingItemGetter<Byte> Confidence_Property { get; }

        #endregion
        #region EnergyLevel
        Byte EnergyLevel { get; }
        INotifyingItemGetter<Byte> EnergyLevel_Property { get; }

        #endregion
        #region Responsibility
        Byte Responsibility { get; }
        INotifyingItemGetter<Byte> Responsibility_Property { get; }

        #endregion
        #region BuySellServices
        NPC.BuySellServiceFlag BuySellServices { get; }
        INotifyingItemGetter<NPC.BuySellServiceFlag> BuySellServices_Property { get; }

        #endregion
        #region Teaches
        Skill Teaches { get; }
        INotifyingItemGetter<Skill> Teaches_Property { get; }

        #endregion
        #region MaximumTrainingLevel
        Byte MaximumTrainingLevel { get; }
        INotifyingItemGetter<Byte> MaximumTrainingLevel_Property { get; }

        #endregion
        #region AIPackages
        INotifyingListGetter<FormIDSetLink<AIPackage>> AIPackages { get; }
        #endregion
        #region Animations
        INotifyingListGetter<String> Animations { get; }
        #endregion
        #region CreatureType
        Creature.CreatureTypeEnum CreatureType { get; }
        INotifyingItemGetter<Creature.CreatureTypeEnum> CreatureType_Property { get; }

        #endregion
        #region CombatSKill
        Byte CombatSKill { get; }
        INotifyingItemGetter<Byte> CombatSKill_Property { get; }

        #endregion
        #region MagicSKill
        Byte MagicSKill { get; }
        INotifyingItemGetter<Byte> MagicSKill_Property { get; }

        #endregion
        #region StealthSKill
        Byte StealthSKill { get; }
        INotifyingItemGetter<Byte> StealthSKill_Property { get; }

        #endregion
        #region SoulLevel
        SoulLevel SoulLevel { get; }
        INotifyingItemGetter<SoulLevel> SoulLevel_Property { get; }

        #endregion
        #region Health
        UInt32 Health { get; }
        INotifyingItemGetter<UInt32> Health_Property { get; }

        #endregion
        #region AttackDamage
        UInt16 AttackDamage { get; }
        INotifyingItemGetter<UInt16> AttackDamage_Property { get; }

        #endregion
        #region Strength
        Byte Strength { get; }
        INotifyingItemGetter<Byte> Strength_Property { get; }

        #endregion
        #region Intelligence
        Byte Intelligence { get; }
        INotifyingItemGetter<Byte> Intelligence_Property { get; }

        #endregion
        #region Willpower
        Byte Willpower { get; }
        INotifyingItemGetter<Byte> Willpower_Property { get; }

        #endregion
        #region Agility
        Byte Agility { get; }
        INotifyingItemGetter<Byte> Agility_Property { get; }

        #endregion
        #region Speed
        Byte Speed { get; }
        INotifyingItemGetter<Byte> Speed_Property { get; }

        #endregion
        #region Endurance
        Byte Endurance { get; }
        INotifyingItemGetter<Byte> Endurance_Property { get; }

        #endregion
        #region Personality
        Byte Personality { get; }
        INotifyingItemGetter<Byte> Personality_Property { get; }

        #endregion
        #region Luck
        Byte Luck { get; }
        INotifyingItemGetter<Byte> Luck_Property { get; }

        #endregion
        #region AttackReach
        Byte AttackReach { get; }
        INotifyingSetItemGetter<Byte> AttackReach_Property { get; }

        #endregion
        #region CombatStyle
        CombatStyle CombatStyle { get; }
        FormIDSetLink<CombatStyle> CombatStyle_Property { get; }

        #endregion
        #region TurningSpeed
        Single TurningSpeed { get; }
        INotifyingSetItemGetter<Single> TurningSpeed_Property { get; }

        #endregion
        #region BaseScale
        Single BaseScale { get; }
        INotifyingSetItemGetter<Single> BaseScale_Property { get; }

        #endregion
        #region FootWeight
        Single FootWeight { get; }
        INotifyingSetItemGetter<Single> FootWeight_Property { get; }

        #endregion
        #region BloodSpray
        FilePath BloodSpray { get; }
        INotifyingSetItemGetter<FilePath> BloodSpray_Property { get; }

        #endregion
        #region BloodDecal
        FilePath BloodDecal { get; }
        INotifyingSetItemGetter<FilePath> BloodDecal_Property { get; }

        #endregion
        #region InheritsSoundFrom
        Creature InheritsSoundFrom { get; }
        FormIDSetLink<Creature> InheritsSoundFrom_Property { get; }

        #endregion
        #region Sounds
        INotifyingListGetter<CreatureSound> Sounds { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Creature_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Items = 7,
        Spells = 8,
        Models = 9,
        NIFT = 10,
        Flags = 11,
        BaseSpellPoints = 12,
        Fatigue = 13,
        BarterGold = 14,
        LevelOffset = 15,
        CalcMin = 16,
        CalcMax = 17,
        Factions = 18,
        DeathItem = 19,
        Script = 20,
        Aggression = 21,
        Confidence = 22,
        EnergyLevel = 23,
        Responsibility = 24,
        BuySellServices = 25,
        Teaches = 26,
        MaximumTrainingLevel = 27,
        AIPackages = 28,
        Animations = 29,
        CreatureType = 30,
        CombatSKill = 31,
        MagicSKill = 32,
        StealthSKill = 33,
        SoulLevel = 34,
        Health = 35,
        AttackDamage = 36,
        Strength = 37,
        Intelligence = 38,
        Willpower = 39,
        Agility = 40,
        Speed = 41,
        Endurance = 42,
        Personality = 43,
        Luck = 44,
        AttackReach = 45,
        CombatStyle = 46,
        TurningSpeed = 47,
        BaseScale = 48,
        FootWeight = 49,
        BloodSpray = 50,
        BloodDecal = 51,
        InheritsSoundFrom = 52,
        Sounds = 53,
    }
    #endregion

    #region Registration
    public class Creature_Registration : ILoquiRegistration
    {
        public static readonly Creature_Registration Instance = new Creature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 89,
            version: 0);

        public const string GUID = "9859ec12-21c5-4de8-9caa-404330da8b79";

        public const ushort FieldCount = 48;

        public static readonly Type MaskType = typeof(Creature_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Creature_ErrorMask);

        public static readonly Type ClassType = typeof(Creature);

        public static readonly Type GetterType = typeof(ICreatureGetter);

        public static readonly Type SetterType = typeof(ICreature);

        public static readonly Type CommonType = typeof(CreatureCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Creature";

        public const string Name = "Creature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Creature_FieldIndex.Model;
                case "ITEMS":
                    return (ushort)Creature_FieldIndex.Items;
                case "SPELLS":
                    return (ushort)Creature_FieldIndex.Spells;
                case "MODELS":
                    return (ushort)Creature_FieldIndex.Models;
                case "NIFT":
                    return (ushort)Creature_FieldIndex.NIFT;
                case "FLAGS":
                    return (ushort)Creature_FieldIndex.Flags;
                case "BASESPELLPOINTS":
                    return (ushort)Creature_FieldIndex.BaseSpellPoints;
                case "FATIGUE":
                    return (ushort)Creature_FieldIndex.Fatigue;
                case "BARTERGOLD":
                    return (ushort)Creature_FieldIndex.BarterGold;
                case "LEVELOFFSET":
                    return (ushort)Creature_FieldIndex.LevelOffset;
                case "CALCMIN":
                    return (ushort)Creature_FieldIndex.CalcMin;
                case "CALCMAX":
                    return (ushort)Creature_FieldIndex.CalcMax;
                case "FACTIONS":
                    return (ushort)Creature_FieldIndex.Factions;
                case "DEATHITEM":
                    return (ushort)Creature_FieldIndex.DeathItem;
                case "SCRIPT":
                    return (ushort)Creature_FieldIndex.Script;
                case "AGGRESSION":
                    return (ushort)Creature_FieldIndex.Aggression;
                case "CONFIDENCE":
                    return (ushort)Creature_FieldIndex.Confidence;
                case "ENERGYLEVEL":
                    return (ushort)Creature_FieldIndex.EnergyLevel;
                case "RESPONSIBILITY":
                    return (ushort)Creature_FieldIndex.Responsibility;
                case "BUYSELLSERVICES":
                    return (ushort)Creature_FieldIndex.BuySellServices;
                case "TEACHES":
                    return (ushort)Creature_FieldIndex.Teaches;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)Creature_FieldIndex.MaximumTrainingLevel;
                case "AIPACKAGES":
                    return (ushort)Creature_FieldIndex.AIPackages;
                case "ANIMATIONS":
                    return (ushort)Creature_FieldIndex.Animations;
                case "CREATURETYPE":
                    return (ushort)Creature_FieldIndex.CreatureType;
                case "COMBATSKILL":
                    return (ushort)Creature_FieldIndex.CombatSKill;
                case "MAGICSKILL":
                    return (ushort)Creature_FieldIndex.MagicSKill;
                case "STEALTHSKILL":
                    return (ushort)Creature_FieldIndex.StealthSKill;
                case "SOULLEVEL":
                    return (ushort)Creature_FieldIndex.SoulLevel;
                case "HEALTH":
                    return (ushort)Creature_FieldIndex.Health;
                case "ATTACKDAMAGE":
                    return (ushort)Creature_FieldIndex.AttackDamage;
                case "STRENGTH":
                    return (ushort)Creature_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)Creature_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)Creature_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)Creature_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)Creature_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)Creature_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)Creature_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)Creature_FieldIndex.Luck;
                case "ATTACKREACH":
                    return (ushort)Creature_FieldIndex.AttackReach;
                case "COMBATSTYLE":
                    return (ushort)Creature_FieldIndex.CombatStyle;
                case "TURNINGSPEED":
                    return (ushort)Creature_FieldIndex.TurningSpeed;
                case "BASESCALE":
                    return (ushort)Creature_FieldIndex.BaseScale;
                case "FOOTWEIGHT":
                    return (ushort)Creature_FieldIndex.FootWeight;
                case "BLOODSPRAY":
                    return (ushort)Creature_FieldIndex.BloodSpray;
                case "BLOODDECAL":
                    return (ushort)Creature_FieldIndex.BloodDecal;
                case "INHERITSSOUNDFROM":
                    return (ushort)Creature_FieldIndex.InheritsSoundFrom;
                case "SOUNDS":
                    return (ushort)Creature_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.Sounds:
                    return true;
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSKill:
                case Creature_FieldIndex.MagicSKill:
                case Creature_FieldIndex.StealthSKill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.Sounds:
                    return true;
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSKill:
                case Creature_FieldIndex.MagicSKill:
                case Creature_FieldIndex.StealthSKill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSKill:
                case Creature_FieldIndex.MagicSKill:
                case Creature_FieldIndex.StealthSKill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    return "Model";
                case Creature_FieldIndex.Items:
                    return "Items";
                case Creature_FieldIndex.Spells:
                    return "Spells";
                case Creature_FieldIndex.Models:
                    return "Models";
                case Creature_FieldIndex.NIFT:
                    return "NIFT";
                case Creature_FieldIndex.Flags:
                    return "Flags";
                case Creature_FieldIndex.BaseSpellPoints:
                    return "BaseSpellPoints";
                case Creature_FieldIndex.Fatigue:
                    return "Fatigue";
                case Creature_FieldIndex.BarterGold:
                    return "BarterGold";
                case Creature_FieldIndex.LevelOffset:
                    return "LevelOffset";
                case Creature_FieldIndex.CalcMin:
                    return "CalcMin";
                case Creature_FieldIndex.CalcMax:
                    return "CalcMax";
                case Creature_FieldIndex.Factions:
                    return "Factions";
                case Creature_FieldIndex.DeathItem:
                    return "DeathItem";
                case Creature_FieldIndex.Script:
                    return "Script";
                case Creature_FieldIndex.Aggression:
                    return "Aggression";
                case Creature_FieldIndex.Confidence:
                    return "Confidence";
                case Creature_FieldIndex.EnergyLevel:
                    return "EnergyLevel";
                case Creature_FieldIndex.Responsibility:
                    return "Responsibility";
                case Creature_FieldIndex.BuySellServices:
                    return "BuySellServices";
                case Creature_FieldIndex.Teaches:
                    return "Teaches";
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case Creature_FieldIndex.AIPackages:
                    return "AIPackages";
                case Creature_FieldIndex.Animations:
                    return "Animations";
                case Creature_FieldIndex.CreatureType:
                    return "CreatureType";
                case Creature_FieldIndex.CombatSKill:
                    return "CombatSKill";
                case Creature_FieldIndex.MagicSKill:
                    return "MagicSKill";
                case Creature_FieldIndex.StealthSKill:
                    return "StealthSKill";
                case Creature_FieldIndex.SoulLevel:
                    return "SoulLevel";
                case Creature_FieldIndex.Health:
                    return "Health";
                case Creature_FieldIndex.AttackDamage:
                    return "AttackDamage";
                case Creature_FieldIndex.Strength:
                    return "Strength";
                case Creature_FieldIndex.Intelligence:
                    return "Intelligence";
                case Creature_FieldIndex.Willpower:
                    return "Willpower";
                case Creature_FieldIndex.Agility:
                    return "Agility";
                case Creature_FieldIndex.Speed:
                    return "Speed";
                case Creature_FieldIndex.Endurance:
                    return "Endurance";
                case Creature_FieldIndex.Personality:
                    return "Personality";
                case Creature_FieldIndex.Luck:
                    return "Luck";
                case Creature_FieldIndex.AttackReach:
                    return "AttackReach";
                case Creature_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case Creature_FieldIndex.TurningSpeed:
                    return "TurningSpeed";
                case Creature_FieldIndex.BaseScale:
                    return "BaseScale";
                case Creature_FieldIndex.FootWeight:
                    return "FootWeight";
                case Creature_FieldIndex.BloodSpray:
                    return "BloodSpray";
                case Creature_FieldIndex.BloodDecal:
                    return "BloodDecal";
                case Creature_FieldIndex.InheritsSoundFrom:
                    return "InheritsSoundFrom";
                case Creature_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSKill:
                case Creature_FieldIndex.MagicSKill:
                case Creature_FieldIndex.StealthSKill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSKill:
                case Creature_FieldIndex.MagicSKill:
                case Creature_FieldIndex.StealthSKill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    return typeof(Model);
                case Creature_FieldIndex.Items:
                    return typeof(NotifyingList<ItemEntry>);
                case Creature_FieldIndex.Spells:
                    return typeof(NotifyingList<FormIDSetLink<Spell>>);
                case Creature_FieldIndex.Models:
                    return typeof(NotifyingList<String>);
                case Creature_FieldIndex.NIFT:
                    return typeof(Byte[]);
                case Creature_FieldIndex.Flags:
                    return typeof(Creature.CreatureFlag);
                case Creature_FieldIndex.BaseSpellPoints:
                    return typeof(UInt16);
                case Creature_FieldIndex.Fatigue:
                    return typeof(UInt16);
                case Creature_FieldIndex.BarterGold:
                    return typeof(UInt16);
                case Creature_FieldIndex.LevelOffset:
                    return typeof(Int16);
                case Creature_FieldIndex.CalcMin:
                    return typeof(UInt16);
                case Creature_FieldIndex.CalcMax:
                    return typeof(UInt16);
                case Creature_FieldIndex.Factions:
                    return typeof(NotifyingList<RankPlacement>);
                case Creature_FieldIndex.DeathItem:
                    return typeof(FormIDSetLink<ItemAbstract>);
                case Creature_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Creature_FieldIndex.Aggression:
                    return typeof(Byte);
                case Creature_FieldIndex.Confidence:
                    return typeof(Byte);
                case Creature_FieldIndex.EnergyLevel:
                    return typeof(Byte);
                case Creature_FieldIndex.Responsibility:
                    return typeof(Byte);
                case Creature_FieldIndex.BuySellServices:
                    return typeof(NPC.BuySellServiceFlag);
                case Creature_FieldIndex.Teaches:
                    return typeof(Skill);
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case Creature_FieldIndex.AIPackages:
                    return typeof(NotifyingList<FormIDSetLink<AIPackage>>);
                case Creature_FieldIndex.Animations:
                    return typeof(NotifyingList<String>);
                case Creature_FieldIndex.CreatureType:
                    return typeof(Creature.CreatureTypeEnum);
                case Creature_FieldIndex.CombatSKill:
                    return typeof(Byte);
                case Creature_FieldIndex.MagicSKill:
                    return typeof(Byte);
                case Creature_FieldIndex.StealthSKill:
                    return typeof(Byte);
                case Creature_FieldIndex.SoulLevel:
                    return typeof(SoulLevel);
                case Creature_FieldIndex.Health:
                    return typeof(UInt32);
                case Creature_FieldIndex.AttackDamage:
                    return typeof(UInt16);
                case Creature_FieldIndex.Strength:
                    return typeof(Byte);
                case Creature_FieldIndex.Intelligence:
                    return typeof(Byte);
                case Creature_FieldIndex.Willpower:
                    return typeof(Byte);
                case Creature_FieldIndex.Agility:
                    return typeof(Byte);
                case Creature_FieldIndex.Speed:
                    return typeof(Byte);
                case Creature_FieldIndex.Endurance:
                    return typeof(Byte);
                case Creature_FieldIndex.Personality:
                    return typeof(Byte);
                case Creature_FieldIndex.Luck:
                    return typeof(Byte);
                case Creature_FieldIndex.AttackReach:
                    return typeof(Byte);
                case Creature_FieldIndex.CombatStyle:
                    return typeof(FormIDSetLink<CombatStyle>);
                case Creature_FieldIndex.TurningSpeed:
                    return typeof(Single);
                case Creature_FieldIndex.BaseScale:
                    return typeof(Single);
                case Creature_FieldIndex.FootWeight:
                    return typeof(Single);
                case Creature_FieldIndex.BloodSpray:
                    return typeof(FilePath);
                case Creature_FieldIndex.BloodDecal:
                    return typeof(FilePath);
                case Creature_FieldIndex.InheritsSoundFrom:
                    return typeof(FormIDSetLink<Creature>);
                case Creature_FieldIndex.Sounds:
                    return typeof(NotifyingList<CreatureSound>);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType NIFZ_HEADER = new RecordType("NIFZ");
        public static readonly RecordType NIFT_HEADER = new RecordType("NIFT");
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType PKID_HEADER = new RecordType("PKID");
        public static readonly RecordType KFFZ_HEADER = new RecordType("KFFZ");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType CSCR_HEADER = new RecordType("CSCR");
        public static readonly RecordType CSDT_HEADER = new RecordType("CSDT");
        public static readonly RecordType CSDI_HEADER = new RecordType("CSDI");
        public static readonly RecordType CSDC_HEADER = new RecordType("CSDC");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CREA_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 19;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CreatureCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICreature item,
            ICreatureGetter rhs,
            ICreatureGetter def,
            ErrorMaskBuilder errorMask,
            Creature_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Model);
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault(
                        rhs: rhs.Items,
                        def: def?.Items,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ItemEntry);
                                    return ItemEntry.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Spells);
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Models != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Models);
                try
                {
                    item.Models.SetToWithDefault(
                        rhs.Models,
                        def?.Models,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.NIFT ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.NIFT);
                try
                {
                    item.NIFT_Property.SetToWithDefault(
                        rhs: rhs.NIFT_Property,
                        def: def?.NIFT_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.BaseSpellPoints ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.BaseSpellPoints);
                try
                {
                    item.BaseSpellPoints_Property.Set(
                        value: rhs.BaseSpellPoints,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Fatigue ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Fatigue);
                try
                {
                    item.Fatigue_Property.Set(
                        value: rhs.Fatigue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.BarterGold ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.BarterGold);
                try
                {
                    item.BarterGold_Property.Set(
                        value: rhs.BarterGold,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.LevelOffset ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.LevelOffset);
                try
                {
                    item.LevelOffset_Property.Set(
                        value: rhs.LevelOffset,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.CalcMin ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.CalcMin);
                try
                {
                    item.CalcMin_Property.Set(
                        value: rhs.CalcMin,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.CalcMax ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.CalcMax);
                try
                {
                    item.CalcMax_Property.Set(
                        value: rhs.CalcMax,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Factions.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Factions);
                try
                {
                    item.Factions.SetToWithDefault(
                        rhs: rhs.Factions,
                        def: def?.Factions,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Factions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RankPlacement);
                                    return RankPlacement.Copy(
                                        r,
                                        copyMask?.Factions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Factions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.DeathItem ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.DeathItem);
                try
                {
                    item.DeathItem_Property.SetToWithDefault(
                        rhs: rhs.DeathItem_Property,
                        def: def?.DeathItem_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Aggression ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Aggression);
                try
                {
                    item.Aggression_Property.Set(
                        value: rhs.Aggression,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Confidence ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Confidence);
                try
                {
                    item.Confidence_Property.Set(
                        value: rhs.Confidence,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.EnergyLevel ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.EnergyLevel);
                try
                {
                    item.EnergyLevel_Property.Set(
                        value: rhs.EnergyLevel,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Responsibility ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Responsibility);
                try
                {
                    item.Responsibility_Property.Set(
                        value: rhs.Responsibility,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.BuySellServices ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.BuySellServices);
                try
                {
                    item.BuySellServices_Property.Set(
                        value: rhs.BuySellServices,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Teaches ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Teaches);
                try
                {
                    item.Teaches_Property.Set(
                        value: rhs.Teaches,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MaximumTrainingLevel ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.MaximumTrainingLevel);
                try
                {
                    item.MaximumTrainingLevel_Property.Set(
                        value: rhs.MaximumTrainingLevel,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.AIPackages != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.SetToWithDefault(
                        rhs.AIPackages,
                        def?.AIPackages,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Animations != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Animations);
                try
                {
                    item.Animations.SetToWithDefault(
                        rhs.Animations,
                        def?.Animations,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.CreatureType ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.CreatureType);
                try
                {
                    item.CreatureType_Property.Set(
                        value: rhs.CreatureType,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.CombatSKill ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.CombatSKill);
                try
                {
                    item.CombatSKill_Property.Set(
                        value: rhs.CombatSKill,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MagicSKill ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.MagicSKill);
                try
                {
                    item.MagicSKill_Property.Set(
                        value: rhs.MagicSKill,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.StealthSKill ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.StealthSKill);
                try
                {
                    item.StealthSKill_Property.Set(
                        value: rhs.StealthSKill,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SoulLevel ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.SoulLevel);
                try
                {
                    item.SoulLevel_Property.Set(
                        value: rhs.SoulLevel,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Health ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Health);
                try
                {
                    item.Health_Property.Set(
                        value: rhs.Health,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.AttackDamage ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.AttackDamage);
                try
                {
                    item.AttackDamage_Property.Set(
                        value: rhs.AttackDamage,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Strength ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Strength);
                try
                {
                    item.Strength_Property.Set(
                        value: rhs.Strength,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Intelligence ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Intelligence);
                try
                {
                    item.Intelligence_Property.Set(
                        value: rhs.Intelligence,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Willpower ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Willpower);
                try
                {
                    item.Willpower_Property.Set(
                        value: rhs.Willpower,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Agility ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Agility);
                try
                {
                    item.Agility_Property.Set(
                        value: rhs.Agility,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Speed ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Speed);
                try
                {
                    item.Speed_Property.Set(
                        value: rhs.Speed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Endurance ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Endurance);
                try
                {
                    item.Endurance_Property.Set(
                        value: rhs.Endurance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Personality ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Personality);
                try
                {
                    item.Personality_Property.Set(
                        value: rhs.Personality,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Luck ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Luck);
                try
                {
                    item.Luck_Property.Set(
                        value: rhs.Luck,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.AttackReach ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.AttackReach);
                try
                {
                    item.AttackReach_Property.SetToWithDefault(
                        rhs: rhs.AttackReach_Property,
                        def: def?.AttackReach_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.CombatStyle ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.CombatStyle);
                try
                {
                    item.CombatStyle_Property.SetToWithDefault(
                        rhs: rhs.CombatStyle_Property,
                        def: def?.CombatStyle_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.TurningSpeed ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.TurningSpeed);
                try
                {
                    item.TurningSpeed_Property.SetToWithDefault(
                        rhs: rhs.TurningSpeed_Property,
                        def: def?.TurningSpeed_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.BaseScale ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.BaseScale);
                try
                {
                    item.BaseScale_Property.SetToWithDefault(
                        rhs: rhs.BaseScale_Property,
                        def: def?.BaseScale_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FootWeight ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.FootWeight);
                try
                {
                    item.FootWeight_Property.SetToWithDefault(
                        rhs: rhs.FootWeight_Property,
                        def: def?.FootWeight_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.BloodSpray ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.BloodSpray);
                try
                {
                    item.BloodSpray_Property.SetToWithDefault(
                        rhs: rhs.BloodSpray_Property,
                        def: def?.BloodSpray_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.BloodDecal ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.BloodDecal);
                try
                {
                    item.BloodDecal_Property.SetToWithDefault(
                        rhs: rhs.BloodDecal_Property,
                        def: def?.BloodDecal_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.InheritsSoundFrom ?? true)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.InheritsSoundFrom);
                try
                {
                    item.InheritsSoundFrom_Property.SetToWithDefault(
                        rhs: rhs.InheritsSoundFrom_Property,
                        def: def?.InheritsSoundFrom_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Creature_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetToWithDefault(
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(CreatureSound);
                                    return CreatureSound.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICreature obj,
            NotifyingFireParameters cmds = null)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSKill:
                case Creature_FieldIndex.MagicSKill:
                case Creature_FieldIndex.StealthSKill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Creature_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.Items:
                    obj.Items.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.Spells:
                    obj.Spells.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.Models:
                    obj.Models.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.NIFT:
                    obj.NIFT_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.Factions:
                    obj.Factions.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.DeathItem:
                    obj.DeathItem_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.AIPackages:
                    obj.AIPackages.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.Animations:
                    obj.Animations.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.AttackReach:
                    obj.AttackReach_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.CombatStyle:
                    obj.CombatStyle_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    obj.TurningSpeed_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.BaseScale:
                    obj.BaseScale_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.FootWeight:
                    obj.FootWeight_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.BloodSpray:
                    obj.BloodSpray_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.BloodDecal:
                    obj.BloodDecal_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    obj.InheritsSoundFrom_Property.HasBeenSet = on;
                    break;
                case Creature_FieldIndex.Sounds:
                    obj.Sounds.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICreature obj,
            NotifyingUnsetParameters cmds = null)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.Items:
                    obj.Items.Unset(cmds);
                    break;
                case Creature_FieldIndex.Spells:
                    obj.Spells.Unset(cmds);
                    break;
                case Creature_FieldIndex.Models:
                    obj.Models.Unset(cmds);
                    break;
                case Creature_FieldIndex.NIFT:
                    obj.NIFT_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.Flags:
                    obj.Flags = default(Creature.CreatureFlag);
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    obj.BaseSpellPoints = default(UInt16);
                    break;
                case Creature_FieldIndex.Fatigue:
                    obj.Fatigue = default(UInt16);
                    break;
                case Creature_FieldIndex.BarterGold:
                    obj.BarterGold = default(UInt16);
                    break;
                case Creature_FieldIndex.LevelOffset:
                    obj.LevelOffset = default(Int16);
                    break;
                case Creature_FieldIndex.CalcMin:
                    obj.CalcMin = default(UInt16);
                    break;
                case Creature_FieldIndex.CalcMax:
                    obj.CalcMax = default(UInt16);
                    break;
                case Creature_FieldIndex.Factions:
                    obj.Factions.Unset(cmds);
                    break;
                case Creature_FieldIndex.DeathItem:
                    obj.DeathItem_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.Aggression:
                    obj.Aggression = default(Byte);
                    break;
                case Creature_FieldIndex.Confidence:
                    obj.Confidence = default(Byte);
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    obj.EnergyLevel = default(Byte);
                    break;
                case Creature_FieldIndex.Responsibility:
                    obj.Responsibility = default(Byte);
                    break;
                case Creature_FieldIndex.BuySellServices:
                    obj.BuySellServices = default(NPC.BuySellServiceFlag);
                    break;
                case Creature_FieldIndex.Teaches:
                    obj.Teaches = default(Skill);
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    obj.MaximumTrainingLevel = default(Byte);
                    break;
                case Creature_FieldIndex.AIPackages:
                    obj.AIPackages.Unset(cmds);
                    break;
                case Creature_FieldIndex.Animations:
                    obj.Animations.Unset(cmds);
                    break;
                case Creature_FieldIndex.CreatureType:
                    obj.CreatureType = default(Creature.CreatureTypeEnum);
                    break;
                case Creature_FieldIndex.CombatSKill:
                    obj.CombatSKill = default(Byte);
                    break;
                case Creature_FieldIndex.MagicSKill:
                    obj.MagicSKill = default(Byte);
                    break;
                case Creature_FieldIndex.StealthSKill:
                    obj.StealthSKill = default(Byte);
                    break;
                case Creature_FieldIndex.SoulLevel:
                    obj.SoulLevel = default(SoulLevel);
                    break;
                case Creature_FieldIndex.Health:
                    obj.Health = default(UInt32);
                    break;
                case Creature_FieldIndex.AttackDamage:
                    obj.AttackDamage = default(UInt16);
                    break;
                case Creature_FieldIndex.Strength:
                    obj.Strength = default(Byte);
                    break;
                case Creature_FieldIndex.Intelligence:
                    obj.Intelligence = default(Byte);
                    break;
                case Creature_FieldIndex.Willpower:
                    obj.Willpower = default(Byte);
                    break;
                case Creature_FieldIndex.Agility:
                    obj.Agility = default(Byte);
                    break;
                case Creature_FieldIndex.Speed:
                    obj.Speed = default(Byte);
                    break;
                case Creature_FieldIndex.Endurance:
                    obj.Endurance = default(Byte);
                    break;
                case Creature_FieldIndex.Personality:
                    obj.Personality = default(Byte);
                    break;
                case Creature_FieldIndex.Luck:
                    obj.Luck = default(Byte);
                    break;
                case Creature_FieldIndex.AttackReach:
                    obj.AttackReach_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.CombatStyle:
                    obj.CombatStyle_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    obj.TurningSpeed_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.BaseScale:
                    obj.BaseScale_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.FootWeight:
                    obj.FootWeight_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.BloodSpray:
                    obj.BloodSpray_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.BloodDecal:
                    obj.BloodDecal_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    obj.InheritsSoundFrom_Property.Unset(cmds);
                    break;
                case Creature_FieldIndex.Sounds:
                    obj.Sounds.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICreature obj)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSKill:
                case Creature_FieldIndex.MagicSKill:
                case Creature_FieldIndex.StealthSKill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                    return true;
                case Creature_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Creature_FieldIndex.Items:
                    return obj.Items.HasBeenSet;
                case Creature_FieldIndex.Spells:
                    return obj.Spells.HasBeenSet;
                case Creature_FieldIndex.Models:
                    return obj.Models.HasBeenSet;
                case Creature_FieldIndex.NIFT:
                    return obj.NIFT_Property.HasBeenSet;
                case Creature_FieldIndex.Factions:
                    return obj.Factions.HasBeenSet;
                case Creature_FieldIndex.DeathItem:
                    return obj.DeathItem_Property.HasBeenSet;
                case Creature_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case Creature_FieldIndex.AIPackages:
                    return obj.AIPackages.HasBeenSet;
                case Creature_FieldIndex.Animations:
                    return obj.Animations.HasBeenSet;
                case Creature_FieldIndex.AttackReach:
                    return obj.AttackReach_Property.HasBeenSet;
                case Creature_FieldIndex.CombatStyle:
                    return obj.CombatStyle_Property.HasBeenSet;
                case Creature_FieldIndex.TurningSpeed:
                    return obj.TurningSpeed_Property.HasBeenSet;
                case Creature_FieldIndex.BaseScale:
                    return obj.BaseScale_Property.HasBeenSet;
                case Creature_FieldIndex.FootWeight:
                    return obj.FootWeight_Property.HasBeenSet;
                case Creature_FieldIndex.BloodSpray:
                    return obj.BloodSpray_Property.HasBeenSet;
                case Creature_FieldIndex.BloodDecal:
                    return obj.BloodDecal_Property.HasBeenSet;
                case Creature_FieldIndex.InheritsSoundFrom:
                    return obj.InheritsSoundFrom_Property.HasBeenSet;
                case Creature_FieldIndex.Sounds:
                    return obj.Sounds.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ICreatureGetter obj)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    return obj.Model;
                case Creature_FieldIndex.Items:
                    return obj.Items;
                case Creature_FieldIndex.Spells:
                    return obj.Spells;
                case Creature_FieldIndex.Models:
                    return obj.Models;
                case Creature_FieldIndex.NIFT:
                    return obj.NIFT;
                case Creature_FieldIndex.Flags:
                    return obj.Flags;
                case Creature_FieldIndex.BaseSpellPoints:
                    return obj.BaseSpellPoints;
                case Creature_FieldIndex.Fatigue:
                    return obj.Fatigue;
                case Creature_FieldIndex.BarterGold:
                    return obj.BarterGold;
                case Creature_FieldIndex.LevelOffset:
                    return obj.LevelOffset;
                case Creature_FieldIndex.CalcMin:
                    return obj.CalcMin;
                case Creature_FieldIndex.CalcMax:
                    return obj.CalcMax;
                case Creature_FieldIndex.Factions:
                    return obj.Factions;
                case Creature_FieldIndex.DeathItem:
                    return obj.DeathItem;
                case Creature_FieldIndex.Script:
                    return obj.Script;
                case Creature_FieldIndex.Aggression:
                    return obj.Aggression;
                case Creature_FieldIndex.Confidence:
                    return obj.Confidence;
                case Creature_FieldIndex.EnergyLevel:
                    return obj.EnergyLevel;
                case Creature_FieldIndex.Responsibility:
                    return obj.Responsibility;
                case Creature_FieldIndex.BuySellServices:
                    return obj.BuySellServices;
                case Creature_FieldIndex.Teaches:
                    return obj.Teaches;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return obj.MaximumTrainingLevel;
                case Creature_FieldIndex.AIPackages:
                    return obj.AIPackages;
                case Creature_FieldIndex.Animations:
                    return obj.Animations;
                case Creature_FieldIndex.CreatureType:
                    return obj.CreatureType;
                case Creature_FieldIndex.CombatSKill:
                    return obj.CombatSKill;
                case Creature_FieldIndex.MagicSKill:
                    return obj.MagicSKill;
                case Creature_FieldIndex.StealthSKill:
                    return obj.StealthSKill;
                case Creature_FieldIndex.SoulLevel:
                    return obj.SoulLevel;
                case Creature_FieldIndex.Health:
                    return obj.Health;
                case Creature_FieldIndex.AttackDamage:
                    return obj.AttackDamage;
                case Creature_FieldIndex.Strength:
                    return obj.Strength;
                case Creature_FieldIndex.Intelligence:
                    return obj.Intelligence;
                case Creature_FieldIndex.Willpower:
                    return obj.Willpower;
                case Creature_FieldIndex.Agility:
                    return obj.Agility;
                case Creature_FieldIndex.Speed:
                    return obj.Speed;
                case Creature_FieldIndex.Endurance:
                    return obj.Endurance;
                case Creature_FieldIndex.Personality:
                    return obj.Personality;
                case Creature_FieldIndex.Luck:
                    return obj.Luck;
                case Creature_FieldIndex.AttackReach:
                    return obj.AttackReach;
                case Creature_FieldIndex.CombatStyle:
                    return obj.CombatStyle;
                case Creature_FieldIndex.TurningSpeed:
                    return obj.TurningSpeed;
                case Creature_FieldIndex.BaseScale:
                    return obj.BaseScale;
                case Creature_FieldIndex.FootWeight:
                    return obj.FootWeight;
                case Creature_FieldIndex.BloodSpray:
                    return obj.BloodSpray;
                case Creature_FieldIndex.BloodDecal:
                    return obj.BloodDecal;
                case Creature_FieldIndex.InheritsSoundFrom:
                    return obj.InheritsSoundFrom;
                case Creature_FieldIndex.Sounds:
                    return obj.Sounds;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ICreature item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Items.Unset(cmds.ToUnsetParams());
            item.Spells.Unset(cmds.ToUnsetParams());
            item.Models.Unset(cmds.ToUnsetParams());
            item.NIFT_Property.Unset(cmds.ToUnsetParams());
            item.Flags = default(Creature.CreatureFlag);
            item.BaseSpellPoints = default(UInt16);
            item.Fatigue = default(UInt16);
            item.BarterGold = default(UInt16);
            item.LevelOffset = default(Int16);
            item.CalcMin = default(UInt16);
            item.CalcMax = default(UInt16);
            item.Factions.Unset(cmds.ToUnsetParams());
            item.DeathItem_Property.Unset(cmds.ToUnsetParams());
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Aggression = default(Byte);
            item.Confidence = default(Byte);
            item.EnergyLevel = default(Byte);
            item.Responsibility = default(Byte);
            item.BuySellServices = default(NPC.BuySellServiceFlag);
            item.Teaches = default(Skill);
            item.MaximumTrainingLevel = default(Byte);
            item.AIPackages.Unset(cmds.ToUnsetParams());
            item.Animations.Unset(cmds.ToUnsetParams());
            item.CreatureType = default(Creature.CreatureTypeEnum);
            item.CombatSKill = default(Byte);
            item.MagicSKill = default(Byte);
            item.StealthSKill = default(Byte);
            item.SoulLevel = default(SoulLevel);
            item.Health = default(UInt32);
            item.AttackDamage = default(UInt16);
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
            item.AttackReach_Property.Unset(cmds.ToUnsetParams());
            item.CombatStyle_Property.Unset(cmds.ToUnsetParams());
            item.TurningSpeed_Property.Unset(cmds.ToUnsetParams());
            item.BaseScale_Property.Unset(cmds.ToUnsetParams());
            item.FootWeight_Property.Unset(cmds.ToUnsetParams());
            item.BloodSpray_Property.Unset(cmds.ToUnsetParams());
            item.BloodDecal_Property.Unset(cmds.ToUnsetParams());
            item.InheritsSoundFrom_Property.Unset(cmds.ToUnsetParams());
            item.Sounds.Unset(cmds.ToUnsetParams());
        }

        public static Creature_Mask<bool> GetEqualsMask(
            this ICreatureGetter item,
            ICreatureGetter rhs)
        {
            var ret = new Creature_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICreatureGetter item,
            ICreatureGetter rhs,
            Creature_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            if (item.Items.HasBeenSet == rhs.Items.HasBeenSet)
            {
                if (item.Items.HasBeenSet)
                {
                    ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ItemEntry_Mask<bool>>>>();
                    ret.Items.Specific = item.Items.SelectAgainst<ItemEntry, MaskItem<bool, ItemEntry_Mask<bool>>>(rhs.Items, ((l, r) =>
                    {
                        MaskItem<bool, ItemEntry_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Items.Overall);
                    ret.Items.Overall = ret.Items.Overall && ret.Items.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ItemEntry_Mask<bool>>>>();
                    ret.Items.Overall = true;
                }
            }
            else
            {
                ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ItemEntry_Mask<bool>>>>();
                ret.Items.Overall = false;
            }
            if (item.Spells.HasBeenSet == rhs.Spells.HasBeenSet)
            {
                if (item.Spells.HasBeenSet)
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Specific = item.Spells.SelectAgainst<FormIDSetLink<Spell>, bool>(rhs.Spells, ((l, r) => object.Equals(l, r)), out ret.Spells.Overall);
                    ret.Spells.Overall = ret.Spells.Overall && ret.Spells.Specific.All((b) => b);
                }
                else
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Overall = true;
                }
            }
            else
            {
                ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                ret.Spells.Overall = false;
            }
            if (item.Models.HasBeenSet == rhs.Models.HasBeenSet)
            {
                if (item.Models.HasBeenSet)
                {
                    ret.Models = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Models.Specific = item.Models.SelectAgainst<String, bool>(rhs.Models, ((l, r) => object.Equals(l, r)), out ret.Models.Overall);
                    ret.Models.Overall = ret.Models.Overall && ret.Models.Specific.All((b) => b);
                }
                else
                {
                    ret.Models = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Models.Overall = true;
                }
            }
            else
            {
                ret.Models = new MaskItem<bool, IEnumerable<bool>>();
                ret.Models.Overall = false;
            }
            ret.NIFT = item.NIFT_Property.Equals(rhs.NIFT_Property, (l, r) => l.EqualsFast(r));
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseSpellPoints = item.BaseSpellPoints == rhs.BaseSpellPoints;
            ret.Fatigue = item.Fatigue == rhs.Fatigue;
            ret.BarterGold = item.BarterGold == rhs.BarterGold;
            ret.LevelOffset = item.LevelOffset == rhs.LevelOffset;
            ret.CalcMin = item.CalcMin == rhs.CalcMin;
            ret.CalcMax = item.CalcMax == rhs.CalcMax;
            if (item.Factions.HasBeenSet == rhs.Factions.HasBeenSet)
            {
                if (item.Factions.HasBeenSet)
                {
                    ret.Factions = new MaskItem<bool, IEnumerable<MaskItem<bool, RankPlacement_Mask<bool>>>>();
                    ret.Factions.Specific = item.Factions.SelectAgainst<RankPlacement, MaskItem<bool, RankPlacement_Mask<bool>>>(rhs.Factions, ((l, r) =>
                    {
                        MaskItem<bool, RankPlacement_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Factions.Overall);
                    ret.Factions.Overall = ret.Factions.Overall && ret.Factions.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Factions = new MaskItem<bool, IEnumerable<MaskItem<bool, RankPlacement_Mask<bool>>>>();
                    ret.Factions.Overall = true;
                }
            }
            else
            {
                ret.Factions = new MaskItem<bool, IEnumerable<MaskItem<bool, RankPlacement_Mask<bool>>>>();
                ret.Factions.Overall = false;
            }
            ret.DeathItem = item.DeathItem_Property.Equals(rhs.DeathItem_Property, (l, r) => l == r);
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.BuySellServices = item.BuySellServices == rhs.BuySellServices;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            if (item.AIPackages.HasBeenSet == rhs.AIPackages.HasBeenSet)
            {
                if (item.AIPackages.HasBeenSet)
                {
                    ret.AIPackages = new MaskItem<bool, IEnumerable<bool>>();
                    ret.AIPackages.Specific = item.AIPackages.SelectAgainst<FormIDSetLink<AIPackage>, bool>(rhs.AIPackages, ((l, r) => object.Equals(l, r)), out ret.AIPackages.Overall);
                    ret.AIPackages.Overall = ret.AIPackages.Overall && ret.AIPackages.Specific.All((b) => b);
                }
                else
                {
                    ret.AIPackages = new MaskItem<bool, IEnumerable<bool>>();
                    ret.AIPackages.Overall = true;
                }
            }
            else
            {
                ret.AIPackages = new MaskItem<bool, IEnumerable<bool>>();
                ret.AIPackages.Overall = false;
            }
            if (item.Animations.HasBeenSet == rhs.Animations.HasBeenSet)
            {
                if (item.Animations.HasBeenSet)
                {
                    ret.Animations = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Animations.Specific = item.Animations.SelectAgainst<String, bool>(rhs.Animations, ((l, r) => object.Equals(l, r)), out ret.Animations.Overall);
                    ret.Animations.Overall = ret.Animations.Overall && ret.Animations.Specific.All((b) => b);
                }
                else
                {
                    ret.Animations = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Animations.Overall = true;
                }
            }
            else
            {
                ret.Animations = new MaskItem<bool, IEnumerable<bool>>();
                ret.Animations.Overall = false;
            }
            ret.CreatureType = item.CreatureType == rhs.CreatureType;
            ret.CombatSKill = item.CombatSKill == rhs.CombatSKill;
            ret.MagicSKill = item.MagicSKill == rhs.MagicSKill;
            ret.StealthSKill = item.StealthSKill == rhs.StealthSKill;
            ret.SoulLevel = item.SoulLevel == rhs.SoulLevel;
            ret.Health = item.Health == rhs.Health;
            ret.AttackDamage = item.AttackDamage == rhs.AttackDamage;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
            ret.AttackReach = item.AttackReach_Property.Equals(rhs.AttackReach_Property, (l, r) => l == r);
            ret.CombatStyle = item.CombatStyle_Property.Equals(rhs.CombatStyle_Property, (l, r) => l == r);
            ret.TurningSpeed = item.TurningSpeed_Property.Equals(rhs.TurningSpeed_Property, (l, r) => l == r);
            ret.BaseScale = item.BaseScale_Property.Equals(rhs.BaseScale_Property, (l, r) => l == r);
            ret.FootWeight = item.FootWeight_Property.Equals(rhs.FootWeight_Property, (l, r) => l == r);
            ret.BloodSpray = item.BloodSpray_Property.Equals(rhs.BloodSpray_Property, (l, r) => object.Equals(l, r));
            ret.BloodDecal = item.BloodDecal_Property.Equals(rhs.BloodDecal_Property, (l, r) => object.Equals(l, r));
            ret.InheritsSoundFrom = item.InheritsSoundFrom_Property.Equals(rhs.InheritsSoundFrom_Property, (l, r) => l == r);
            if (item.Sounds.HasBeenSet == rhs.Sounds.HasBeenSet)
            {
                if (item.Sounds.HasBeenSet)
                {
                    ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, CreatureSound_Mask<bool>>>>();
                    ret.Sounds.Specific = item.Sounds.SelectAgainst<CreatureSound, MaskItem<bool, CreatureSound_Mask<bool>>>(rhs.Sounds, ((l, r) =>
                    {
                        MaskItem<bool, CreatureSound_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Sounds.Overall);
                    ret.Sounds.Overall = ret.Sounds.Overall && ret.Sounds.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, CreatureSound_Mask<bool>>>>();
                    ret.Sounds.Overall = true;
                }
            }
            else
            {
                ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, CreatureSound_Mask<bool>>>>();
                ret.Sounds.Overall = false;
            }
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ICreatureGetter item,
            string name = null,
            Creature_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICreatureGetter item,
            FileGeneration fg,
            string name = null,
            Creature_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Creature)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Creature)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Spells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Models?.Overall ?? true)
                {
                    fg.AppendLine("Models =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Models)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.NIFT ?? true)
                {
                    fg.AppendLine($"NIFT => {item.NIFT}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.BaseSpellPoints ?? true)
                {
                    fg.AppendLine($"BaseSpellPoints => {item.BaseSpellPoints}");
                }
                if (printMask?.Fatigue ?? true)
                {
                    fg.AppendLine($"Fatigue => {item.Fatigue}");
                }
                if (printMask?.BarterGold ?? true)
                {
                    fg.AppendLine($"BarterGold => {item.BarterGold}");
                }
                if (printMask?.LevelOffset ?? true)
                {
                    fg.AppendLine($"LevelOffset => {item.LevelOffset}");
                }
                if (printMask?.CalcMin ?? true)
                {
                    fg.AppendLine($"CalcMin => {item.CalcMin}");
                }
                if (printMask?.CalcMax ?? true)
                {
                    fg.AppendLine($"CalcMax => {item.CalcMax}");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Factions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DeathItem ?? true)
                {
                    fg.AppendLine($"DeathItem => {item.DeathItem_Property}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Aggression ?? true)
                {
                    fg.AppendLine($"Aggression => {item.Aggression}");
                }
                if (printMask?.Confidence ?? true)
                {
                    fg.AppendLine($"Confidence => {item.Confidence}");
                }
                if (printMask?.EnergyLevel ?? true)
                {
                    fg.AppendLine($"EnergyLevel => {item.EnergyLevel}");
                }
                if (printMask?.Responsibility ?? true)
                {
                    fg.AppendLine($"Responsibility => {item.Responsibility}");
                }
                if (printMask?.BuySellServices ?? true)
                {
                    fg.AppendLine($"BuySellServices => {item.BuySellServices}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {item.Teaches}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {item.MaximumTrainingLevel}");
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.AIPackages)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Animations?.Overall ?? true)
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Animations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.CreatureType ?? true)
                {
                    fg.AppendLine($"CreatureType => {item.CreatureType}");
                }
                if (printMask?.CombatSKill ?? true)
                {
                    fg.AppendLine($"CombatSKill => {item.CombatSKill}");
                }
                if (printMask?.MagicSKill ?? true)
                {
                    fg.AppendLine($"MagicSKill => {item.MagicSKill}");
                }
                if (printMask?.StealthSKill ?? true)
                {
                    fg.AppendLine($"StealthSKill => {item.StealthSKill}");
                }
                if (printMask?.SoulLevel ?? true)
                {
                    fg.AppendLine($"SoulLevel => {item.SoulLevel}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.AttackDamage ?? true)
                {
                    fg.AppendLine($"AttackDamage => {item.AttackDamage}");
                }
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {item.Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {item.Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {item.Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {item.Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {item.Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {item.Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {item.Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {item.Luck}");
                }
                if (printMask?.AttackReach ?? true)
                {
                    fg.AppendLine($"AttackReach => {item.AttackReach}");
                }
                if (printMask?.CombatStyle ?? true)
                {
                    fg.AppendLine($"CombatStyle => {item.CombatStyle_Property}");
                }
                if (printMask?.TurningSpeed ?? true)
                {
                    fg.AppendLine($"TurningSpeed => {item.TurningSpeed}");
                }
                if (printMask?.BaseScale ?? true)
                {
                    fg.AppendLine($"BaseScale => {item.BaseScale}");
                }
                if (printMask?.FootWeight ?? true)
                {
                    fg.AppendLine($"FootWeight => {item.FootWeight}");
                }
                if (printMask?.BloodSpray ?? true)
                {
                    fg.AppendLine($"BloodSpray => {item.BloodSpray}");
                }
                if (printMask?.BloodDecal ?? true)
                {
                    fg.AppendLine($"BloodDecal => {item.BloodDecal}");
                }
                if (printMask?.InheritsSoundFrom ?? true)
                {
                    fg.AppendLine($"InheritsSoundFrom => {item.InheritsSoundFrom_Property}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Sounds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICreatureGetter item,
            Creature_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Models.Overall.HasValue && checkMask.Models.Overall.Value != item.Models.HasBeenSet) return false;
            if (checkMask.NIFT.HasValue && checkMask.NIFT.Value != item.NIFT_Property.HasBeenSet) return false;
            if (checkMask.Factions.Overall.HasValue && checkMask.Factions.Overall.Value != item.Factions.HasBeenSet) return false;
            if (checkMask.DeathItem.HasValue && checkMask.DeathItem.Value != item.DeathItem_Property.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.AIPackages.Overall.HasValue && checkMask.AIPackages.Overall.Value != item.AIPackages.HasBeenSet) return false;
            if (checkMask.Animations.Overall.HasValue && checkMask.Animations.Overall.Value != item.Animations.HasBeenSet) return false;
            if (checkMask.AttackReach.HasValue && checkMask.AttackReach.Value != item.AttackReach_Property.HasBeenSet) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != item.CombatStyle_Property.HasBeenSet) return false;
            if (checkMask.TurningSpeed.HasValue && checkMask.TurningSpeed.Value != item.TurningSpeed_Property.HasBeenSet) return false;
            if (checkMask.BaseScale.HasValue && checkMask.BaseScale.Value != item.BaseScale_Property.HasBeenSet) return false;
            if (checkMask.FootWeight.HasValue && checkMask.FootWeight.Value != item.FootWeight_Property.HasBeenSet) return false;
            if (checkMask.BloodSpray.HasValue && checkMask.BloodSpray.Value != item.BloodSpray_Property.HasBeenSet) return false;
            if (checkMask.BloodDecal.HasValue && checkMask.BloodDecal.Value != item.BloodDecal_Property.HasBeenSet) return false;
            if (checkMask.InheritsSoundFrom.HasValue && checkMask.InheritsSoundFrom.Value != item.InheritsSoundFrom_Property.HasBeenSet) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds.HasBeenSet) return false;
            return true;
        }

        public static Creature_Mask<bool> GetHasBeenSetMask(ICreatureGetter item)
        {
            var ret = new Creature_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ItemEntry_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.Select((i) => new MaskItem<bool, ItemEntry_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Spells = new MaskItem<bool, IEnumerable<bool>>(item.Spells.HasBeenSet, null);
            ret.Models = new MaskItem<bool, IEnumerable<bool>>(item.Models.HasBeenSet, null);
            ret.NIFT = item.NIFT_Property.HasBeenSet;
            ret.Flags = true;
            ret.BaseSpellPoints = true;
            ret.Fatigue = true;
            ret.BarterGold = true;
            ret.LevelOffset = true;
            ret.CalcMin = true;
            ret.CalcMax = true;
            ret.Factions = new MaskItem<bool, IEnumerable<MaskItem<bool, RankPlacement_Mask<bool>>>>(item.Factions.HasBeenSet, item.Factions.Select((i) => new MaskItem<bool, RankPlacement_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.DeathItem = item.DeathItem_Property.HasBeenSet;
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Aggression = true;
            ret.Confidence = true;
            ret.EnergyLevel = true;
            ret.Responsibility = true;
            ret.BuySellServices = true;
            ret.Teaches = true;
            ret.MaximumTrainingLevel = true;
            ret.AIPackages = new MaskItem<bool, IEnumerable<bool>>(item.AIPackages.HasBeenSet, null);
            ret.Animations = new MaskItem<bool, IEnumerable<bool>>(item.Animations.HasBeenSet, null);
            ret.CreatureType = true;
            ret.CombatSKill = true;
            ret.MagicSKill = true;
            ret.StealthSKill = true;
            ret.SoulLevel = true;
            ret.Health = true;
            ret.AttackDamage = true;
            ret.Strength = true;
            ret.Intelligence = true;
            ret.Willpower = true;
            ret.Agility = true;
            ret.Speed = true;
            ret.Endurance = true;
            ret.Personality = true;
            ret.Luck = true;
            ret.AttackReach = item.AttackReach_Property.HasBeenSet;
            ret.CombatStyle = item.CombatStyle_Property.HasBeenSet;
            ret.TurningSpeed = item.TurningSpeed_Property.HasBeenSet;
            ret.BaseScale = item.BaseScale_Property.HasBeenSet;
            ret.FootWeight = item.FootWeight_Property.HasBeenSet;
            ret.BloodSpray = item.BloodSpray_Property.HasBeenSet;
            ret.BloodDecal = item.BloodDecal_Property.HasBeenSet;
            ret.InheritsSoundFrom = item.InheritsSoundFrom_Property.HasBeenSet;
            ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, CreatureSound_Mask<bool>>>>(item.Sounds.HasBeenSet, item.Sounds.Select((i) => new MaskItem<bool, CreatureSound_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Creature_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Creature_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Creature_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Creature_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Creature_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Creature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ICreatureGetter item,
            bool doMasks,
            out Creature_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            ICreatureGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Creature");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Creature");
            }
            if (item.Model_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model_Property,
                    name: nameof(item.Model),
                    fieldIndex: (int)Creature_FieldIndex.Model,
                    errorMask: errorMask);
            }
            if (item.Items.HasBeenSet)
            {
                ListXmlTranslation<ItemEntry>.Instance.Write(
                    node: elem,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)Creature_FieldIndex.Items,
                    errorMask: errorMask,
                    transl: (XElement subNode, ItemEntry subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<ItemEntry>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Spells.HasBeenSet)
            {
                ListXmlTranslation<FormIDSetLink<Spell>>.Instance.Write(
                    node: elem,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Creature_FieldIndex.Spells,
                    errorMask: errorMask,
                    transl: (XElement subNode, FormIDSetLink<Spell> subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Models.HasBeenSet)
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: elem,
                    name: nameof(item.Models),
                    item: item.Models,
                    fieldIndex: (int)Creature_FieldIndex.Models,
                    errorMask: errorMask,
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.NIFT_Property.HasBeenSet)
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.NIFT),
                    item: item.NIFT_Property,
                    fieldIndex: (int)Creature_FieldIndex.NIFT,
                    errorMask: errorMask);
            }
            EnumXmlTranslation<Creature.CreatureFlag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)Creature_FieldIndex.Flags,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.BaseSpellPoints),
                item: item.BaseSpellPoints_Property,
                fieldIndex: (int)Creature_FieldIndex.BaseSpellPoints,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Fatigue),
                item: item.Fatigue_Property,
                fieldIndex: (int)Creature_FieldIndex.Fatigue,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.BarterGold),
                item: item.BarterGold_Property,
                fieldIndex: (int)Creature_FieldIndex.BarterGold,
                errorMask: errorMask);
            Int16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.LevelOffset),
                item: item.LevelOffset_Property,
                fieldIndex: (int)Creature_FieldIndex.LevelOffset,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.CalcMin),
                item: item.CalcMin_Property,
                fieldIndex: (int)Creature_FieldIndex.CalcMin,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.CalcMax),
                item: item.CalcMax_Property,
                fieldIndex: (int)Creature_FieldIndex.CalcMax,
                errorMask: errorMask);
            if (item.Factions.HasBeenSet)
            {
                ListXmlTranslation<RankPlacement>.Instance.Write(
                    node: elem,
                    name: nameof(item.Factions),
                    item: item.Factions,
                    fieldIndex: (int)Creature_FieldIndex.Factions,
                    errorMask: errorMask,
                    transl: (XElement subNode, RankPlacement subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<RankPlacement>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.DeathItem_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.DeathItem),
                    item: item.DeathItem?.FormID,
                    fieldIndex: (int)Creature_FieldIndex.DeathItem,
                    errorMask: errorMask);
            }
            if (item.Script_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Script),
                    item: item.Script?.FormID,
                    fieldIndex: (int)Creature_FieldIndex.Script,
                    errorMask: errorMask);
            }
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Aggression),
                item: item.Aggression_Property,
                fieldIndex: (int)Creature_FieldIndex.Aggression,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Confidence),
                item: item.Confidence_Property,
                fieldIndex: (int)Creature_FieldIndex.Confidence,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.EnergyLevel),
                item: item.EnergyLevel_Property,
                fieldIndex: (int)Creature_FieldIndex.EnergyLevel,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Responsibility),
                item: item.Responsibility_Property,
                fieldIndex: (int)Creature_FieldIndex.Responsibility,
                errorMask: errorMask);
            EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                node: elem,
                name: nameof(item.BuySellServices),
                item: item.BuySellServices_Property,
                fieldIndex: (int)Creature_FieldIndex.BuySellServices,
                errorMask: errorMask);
            EnumXmlTranslation<Skill>.Instance.Write(
                node: elem,
                name: nameof(item.Teaches),
                item: item.Teaches_Property,
                fieldIndex: (int)Creature_FieldIndex.Teaches,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.MaximumTrainingLevel),
                item: item.MaximumTrainingLevel_Property,
                fieldIndex: (int)Creature_FieldIndex.MaximumTrainingLevel,
                errorMask: errorMask);
            if (item.AIPackages.HasBeenSet)
            {
                ListXmlTranslation<FormIDSetLink<AIPackage>>.Instance.Write(
                    node: elem,
                    name: nameof(item.AIPackages),
                    item: item.AIPackages,
                    fieldIndex: (int)Creature_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    transl: (XElement subNode, FormIDSetLink<AIPackage> subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Animations.HasBeenSet)
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: elem,
                    name: nameof(item.Animations),
                    item: item.Animations,
                    fieldIndex: (int)Creature_FieldIndex.Animations,
                    errorMask: errorMask,
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem,
                            errorMask: listSubMask);
                    }
                    );
            }
            EnumXmlTranslation<Creature.CreatureTypeEnum>.Instance.Write(
                node: elem,
                name: nameof(item.CreatureType),
                item: item.CreatureType_Property,
                fieldIndex: (int)Creature_FieldIndex.CreatureType,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.CombatSKill),
                item: item.CombatSKill_Property,
                fieldIndex: (int)Creature_FieldIndex.CombatSKill,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.MagicSKill),
                item: item.MagicSKill_Property,
                fieldIndex: (int)Creature_FieldIndex.MagicSKill,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.StealthSKill),
                item: item.StealthSKill_Property,
                fieldIndex: (int)Creature_FieldIndex.StealthSKill,
                errorMask: errorMask);
            EnumXmlTranslation<SoulLevel>.Instance.Write(
                node: elem,
                name: nameof(item.SoulLevel),
                item: item.SoulLevel_Property,
                fieldIndex: (int)Creature_FieldIndex.SoulLevel,
                errorMask: errorMask);
            UInt32XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Health),
                item: item.Health_Property,
                fieldIndex: (int)Creature_FieldIndex.Health,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.AttackDamage),
                item: item.AttackDamage_Property,
                fieldIndex: (int)Creature_FieldIndex.AttackDamage,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Strength),
                item: item.Strength_Property,
                fieldIndex: (int)Creature_FieldIndex.Strength,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Intelligence),
                item: item.Intelligence_Property,
                fieldIndex: (int)Creature_FieldIndex.Intelligence,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Willpower),
                item: item.Willpower_Property,
                fieldIndex: (int)Creature_FieldIndex.Willpower,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Agility),
                item: item.Agility_Property,
                fieldIndex: (int)Creature_FieldIndex.Agility,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Speed),
                item: item.Speed_Property,
                fieldIndex: (int)Creature_FieldIndex.Speed,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Endurance),
                item: item.Endurance_Property,
                fieldIndex: (int)Creature_FieldIndex.Endurance,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Personality),
                item: item.Personality_Property,
                fieldIndex: (int)Creature_FieldIndex.Personality,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Luck),
                item: item.Luck_Property,
                fieldIndex: (int)Creature_FieldIndex.Luck,
                errorMask: errorMask);
            if (item.AttackReach_Property.HasBeenSet)
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.AttackReach),
                    item: item.AttackReach_Property,
                    fieldIndex: (int)Creature_FieldIndex.AttackReach,
                    errorMask: errorMask);
            }
            if (item.CombatStyle_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.CombatStyle),
                    item: item.CombatStyle?.FormID,
                    fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                    errorMask: errorMask);
            }
            if (item.TurningSpeed_Property.HasBeenSet)
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.TurningSpeed),
                    item: item.TurningSpeed_Property,
                    fieldIndex: (int)Creature_FieldIndex.TurningSpeed,
                    errorMask: errorMask);
            }
            if (item.BaseScale_Property.HasBeenSet)
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BaseScale),
                    item: item.BaseScale_Property,
                    fieldIndex: (int)Creature_FieldIndex.BaseScale,
                    errorMask: errorMask);
            }
            if (item.FootWeight_Property.HasBeenSet)
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FootWeight),
                    item: item.FootWeight_Property,
                    fieldIndex: (int)Creature_FieldIndex.FootWeight,
                    errorMask: errorMask);
            }
            if (item.BloodSpray_Property.HasBeenSet)
            {
                FilePathXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BloodSpray),
                    item: item.BloodSpray_Property,
                    fieldIndex: (int)Creature_FieldIndex.BloodSpray,
                    errorMask: errorMask);
            }
            if (item.BloodDecal_Property.HasBeenSet)
            {
                FilePathXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BloodDecal),
                    item: item.BloodDecal_Property,
                    fieldIndex: (int)Creature_FieldIndex.BloodDecal,
                    errorMask: errorMask);
            }
            if (item.InheritsSoundFrom_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.InheritsSoundFrom),
                    item: item.InheritsSoundFrom?.FormID,
                    fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                    errorMask: errorMask);
            }
            if (item.Sounds.HasBeenSet)
            {
                ListXmlTranslation<CreatureSound>.Instance.Write(
                    node: elem,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)Creature_FieldIndex.Sounds,
                    errorMask: errorMask,
                    transl: (XElement subNode, CreatureSound subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<CreatureSound>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Creature item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Creature_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Creature item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Creature_Registration.CREA_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Creature item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Creature_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.Write(
                writer: writer,
                items: item.Items,
                fieldIndex: (int)Creature_FieldIndex.Items,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<ItemEntry>.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Spell>>.Instance.WriteListOfRecords(
                writer: writer,
                items: item.Spells,
                fieldIndex: (int)Creature_FieldIndex.Spells,
                recordType: Creature_Registration.SPLO_HEADER,
                errorMask: errorMask,
                transl: FormIDBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Models,
                fieldIndex: (int)Creature_FieldIndex.Models,
                recordType: Creature_Registration.NIFZ_HEADER,
                errorMask: errorMask,
                transl: StringBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NIFT_Property,
                fieldIndex: (int)Creature_FieldIndex.NIFT,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NIFT_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, Creature_Registration.ACBS_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: 4,
                    fieldIndex: (int)Creature_FieldIndex.Flags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BaseSpellPoints_Property,
                    fieldIndex: (int)Creature_FieldIndex.BaseSpellPoints,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Fatigue_Property,
                    fieldIndex: (int)Creature_FieldIndex.Fatigue,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BarterGold_Property,
                    fieldIndex: (int)Creature_FieldIndex.BarterGold,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LevelOffset_Property,
                    fieldIndex: (int)Creature_FieldIndex.LevelOffset,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CalcMin_Property,
                    fieldIndex: (int)Creature_FieldIndex.CalcMin,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CalcMax_Property,
                    fieldIndex: (int)Creature_FieldIndex.CalcMax,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.Write(
                writer: writer,
                items: item.Factions,
                fieldIndex: (int)Creature_FieldIndex.Factions,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<RankPlacement>.Instance.Write);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DeathItem_Property,
                fieldIndex: (int)Creature_FieldIndex.DeathItem,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.INAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)Creature_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.SCRI_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, Creature_Registration.AIDT_HEADER))
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Aggression_Property,
                    fieldIndex: (int)Creature_FieldIndex.Aggression,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Confidence_Property,
                    fieldIndex: (int)Creature_FieldIndex.Confidence,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnergyLevel_Property,
                    fieldIndex: (int)Creature_FieldIndex.EnergyLevel,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Responsibility_Property,
                    fieldIndex: (int)Creature_FieldIndex.Responsibility,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                    writer,
                    item.BuySellServices_Property,
                    length: 4,
                    fieldIndex: (int)Creature_FieldIndex.BuySellServices,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                    writer,
                    item.Teaches_Property,
                    length: 1,
                    fieldIndex: (int)Creature_FieldIndex.Teaches,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaximumTrainingLevel_Property,
                    fieldIndex: (int)Creature_FieldIndex.MaximumTrainingLevel,
                    errorMask: errorMask);
                writer.WriteZeros(2);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<AIPackage>>.Instance.WriteListOfRecords(
                writer: writer,
                items: item.AIPackages,
                fieldIndex: (int)Creature_FieldIndex.AIPackages,
                recordType: Creature_Registration.PKID_HEADER,
                errorMask: errorMask,
                transl: FormIDBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Animations,
                fieldIndex: (int)Creature_FieldIndex.Animations,
                recordType: Creature_Registration.KFFZ_HEADER,
                errorMask: errorMask,
                transl: StringBinaryTranslation.Instance.Write);
            using (HeaderExport.ExportSubRecordHeader(writer, Creature_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureTypeEnum>.Instance.Write(
                    writer,
                    item.CreatureType_Property,
                    length: 1,
                    fieldIndex: (int)Creature_FieldIndex.CreatureType,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CombatSKill_Property,
                    fieldIndex: (int)Creature_FieldIndex.CombatSKill,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MagicSKill_Property,
                    fieldIndex: (int)Creature_FieldIndex.MagicSKill,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.StealthSKill_Property,
                    fieldIndex: (int)Creature_FieldIndex.StealthSKill,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.Write(
                    writer,
                    item.SoulLevel_Property,
                    length: 2,
                    fieldIndex: (int)Creature_FieldIndex.SoulLevel,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Health_Property,
                    fieldIndex: (int)Creature_FieldIndex.Health,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AttackDamage_Property,
                    fieldIndex: (int)Creature_FieldIndex.AttackDamage,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Strength_Property,
                    fieldIndex: (int)Creature_FieldIndex.Strength,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Intelligence_Property,
                    fieldIndex: (int)Creature_FieldIndex.Intelligence,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Willpower_Property,
                    fieldIndex: (int)Creature_FieldIndex.Willpower,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Agility_Property,
                    fieldIndex: (int)Creature_FieldIndex.Agility,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Speed_Property,
                    fieldIndex: (int)Creature_FieldIndex.Speed,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Endurance_Property,
                    fieldIndex: (int)Creature_FieldIndex.Endurance,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Personality_Property,
                    fieldIndex: (int)Creature_FieldIndex.Personality,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Luck_Property,
                    fieldIndex: (int)Creature_FieldIndex.Luck,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackReach_Property,
                fieldIndex: (int)Creature_FieldIndex.AttackReach,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.RNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CombatStyle_Property,
                fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.ZNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TurningSpeed_Property,
                fieldIndex: (int)Creature_FieldIndex.TurningSpeed,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.TNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BaseScale_Property,
                fieldIndex: (int)Creature_FieldIndex.BaseScale,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.BNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FootWeight_Property,
                fieldIndex: (int)Creature_FieldIndex.FootWeight,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.WNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BloodSpray_Property,
                fieldIndex: (int)Creature_FieldIndex.BloodSpray,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NAM0_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BloodDecal_Property,
                fieldIndex: (int)Creature_FieldIndex.BloodDecal,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NAM1_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.InheritsSoundFrom_Property,
                fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.CSCR_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<CreatureSound>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                fieldIndex: (int)Creature_FieldIndex.Sounds,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<CreatureSound>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Creature_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Creature_Mask<T>>
    {
        #region Ctors
        public Creature_Mask()
        {
        }

        public Creature_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Items = new MaskItem<T, IEnumerable<MaskItem<T, ItemEntry_Mask<T>>>>(initialValue, null);
            this.Spells = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Models = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.NIFT = initialValue;
            this.Flags = initialValue;
            this.BaseSpellPoints = initialValue;
            this.Fatigue = initialValue;
            this.BarterGold = initialValue;
            this.LevelOffset = initialValue;
            this.CalcMin = initialValue;
            this.CalcMax = initialValue;
            this.Factions = new MaskItem<T, IEnumerable<MaskItem<T, RankPlacement_Mask<T>>>>(initialValue, null);
            this.DeathItem = initialValue;
            this.Script = initialValue;
            this.Aggression = initialValue;
            this.Confidence = initialValue;
            this.EnergyLevel = initialValue;
            this.Responsibility = initialValue;
            this.BuySellServices = initialValue;
            this.Teaches = initialValue;
            this.MaximumTrainingLevel = initialValue;
            this.AIPackages = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Animations = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.CreatureType = initialValue;
            this.CombatSKill = initialValue;
            this.MagicSKill = initialValue;
            this.StealthSKill = initialValue;
            this.SoulLevel = initialValue;
            this.Health = initialValue;
            this.AttackDamage = initialValue;
            this.Strength = initialValue;
            this.Intelligence = initialValue;
            this.Willpower = initialValue;
            this.Agility = initialValue;
            this.Speed = initialValue;
            this.Endurance = initialValue;
            this.Personality = initialValue;
            this.Luck = initialValue;
            this.AttackReach = initialValue;
            this.CombatStyle = initialValue;
            this.TurningSpeed = initialValue;
            this.BaseScale = initialValue;
            this.FootWeight = initialValue;
            this.BloodSpray = initialValue;
            this.BloodDecal = initialValue;
            this.InheritsSoundFrom = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItem<T, CreatureSound_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, ItemEntry_Mask<T>>>> Items;
        public MaskItem<T, IEnumerable<T>> Spells;
        public MaskItem<T, IEnumerable<T>> Models;
        public T NIFT;
        public T Flags;
        public T BaseSpellPoints;
        public T Fatigue;
        public T BarterGold;
        public T LevelOffset;
        public T CalcMin;
        public T CalcMax;
        public MaskItem<T, IEnumerable<MaskItem<T, RankPlacement_Mask<T>>>> Factions;
        public T DeathItem;
        public T Script;
        public T Aggression;
        public T Confidence;
        public T EnergyLevel;
        public T Responsibility;
        public T BuySellServices;
        public T Teaches;
        public T MaximumTrainingLevel;
        public MaskItem<T, IEnumerable<T>> AIPackages;
        public MaskItem<T, IEnumerable<T>> Animations;
        public T CreatureType;
        public T CombatSKill;
        public T MagicSKill;
        public T StealthSKill;
        public T SoulLevel;
        public T Health;
        public T AttackDamage;
        public T Strength;
        public T Intelligence;
        public T Willpower;
        public T Agility;
        public T Speed;
        public T Endurance;
        public T Personality;
        public T Luck;
        public T AttackReach;
        public T CombatStyle;
        public T TurningSpeed;
        public T BaseScale;
        public T FootWeight;
        public T BloodSpray;
        public T BloodDecal;
        public T InheritsSoundFrom;
        public MaskItem<T, IEnumerable<MaskItem<T, CreatureSound_Mask<T>>>> Sounds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Creature_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Creature_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Models, rhs.Models)) return false;
            if (!object.Equals(this.NIFT, rhs.NIFT)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.BaseSpellPoints, rhs.BaseSpellPoints)) return false;
            if (!object.Equals(this.Fatigue, rhs.Fatigue)) return false;
            if (!object.Equals(this.BarterGold, rhs.BarterGold)) return false;
            if (!object.Equals(this.LevelOffset, rhs.LevelOffset)) return false;
            if (!object.Equals(this.CalcMin, rhs.CalcMin)) return false;
            if (!object.Equals(this.CalcMax, rhs.CalcMax)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
            if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
            if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
            if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
            if (!object.Equals(this.BuySellServices, rhs.BuySellServices)) return false;
            if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
            if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
            if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(this.Animations, rhs.Animations)) return false;
            if (!object.Equals(this.CreatureType, rhs.CreatureType)) return false;
            if (!object.Equals(this.CombatSKill, rhs.CombatSKill)) return false;
            if (!object.Equals(this.MagicSKill, rhs.MagicSKill)) return false;
            if (!object.Equals(this.StealthSKill, rhs.StealthSKill)) return false;
            if (!object.Equals(this.SoulLevel, rhs.SoulLevel)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.AttackDamage, rhs.AttackDamage)) return false;
            if (!object.Equals(this.Strength, rhs.Strength)) return false;
            if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
            if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
            if (!object.Equals(this.Agility, rhs.Agility)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
            if (!object.Equals(this.Personality, rhs.Personality)) return false;
            if (!object.Equals(this.Luck, rhs.Luck)) return false;
            if (!object.Equals(this.AttackReach, rhs.AttackReach)) return false;
            if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
            if (!object.Equals(this.TurningSpeed, rhs.TurningSpeed)) return false;
            if (!object.Equals(this.BaseScale, rhs.BaseScale)) return false;
            if (!object.Equals(this.FootWeight, rhs.FootWeight)) return false;
            if (!object.Equals(this.BloodSpray, rhs.BloodSpray)) return false;
            if (!object.Equals(this.BloodDecal, rhs.BloodDecal)) return false;
            if (!object.Equals(this.InheritsSoundFrom, rhs.InheritsSoundFrom)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Models?.GetHashCode());
            ret = ret.CombineHashCode(this.NIFT?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseSpellPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Fatigue?.GetHashCode());
            ret = ret.CombineHashCode(this.BarterGold?.GetHashCode());
            ret = ret.CombineHashCode(this.LevelOffset?.GetHashCode());
            ret = ret.CombineHashCode(this.CalcMin?.GetHashCode());
            ret = ret.CombineHashCode(this.CalcMax?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            ret = ret.CombineHashCode(this.DeathItem?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Aggression?.GetHashCode());
            ret = ret.CombineHashCode(this.Confidence?.GetHashCode());
            ret = ret.CombineHashCode(this.EnergyLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Responsibility?.GetHashCode());
            ret = ret.CombineHashCode(this.BuySellServices?.GetHashCode());
            ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumTrainingLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.AIPackages?.GetHashCode());
            ret = ret.CombineHashCode(this.Animations?.GetHashCode());
            ret = ret.CombineHashCode(this.CreatureType?.GetHashCode());
            ret = ret.CombineHashCode(this.CombatSKill?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicSKill?.GetHashCode());
            ret = ret.CombineHashCode(this.StealthSKill?.GetHashCode());
            ret = ret.CombineHashCode(this.SoulLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackDamage?.GetHashCode());
            ret = ret.CombineHashCode(this.Strength?.GetHashCode());
            ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
            ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
            ret = ret.CombineHashCode(this.Agility?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
            ret = ret.CombineHashCode(this.Personality?.GetHashCode());
            ret = ret.CombineHashCode(this.Luck?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackReach?.GetHashCode());
            ret = ret.CombineHashCode(this.CombatStyle?.GetHashCode());
            ret = ret.CombineHashCode(this.TurningSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseScale?.GetHashCode());
            ret = ret.CombineHashCode(this.FootWeight?.GetHashCode());
            ret = ret.CombineHashCode(this.BloodSpray?.GetHashCode());
            ret = ret.CombineHashCode(this.BloodDecal?.GetHashCode());
            ret = ret.CombineHashCode(this.InheritsSoundFrom?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null)
                {
                    foreach (var item in this.Spells.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.Models != null)
            {
                if (!eval(this.Models.Overall)) return false;
                if (this.Models.Specific != null)
                {
                    foreach (var item in this.Models.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.NIFT)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.BaseSpellPoints)) return false;
            if (!eval(this.Fatigue)) return false;
            if (!eval(this.BarterGold)) return false;
            if (!eval(this.LevelOffset)) return false;
            if (!eval(this.CalcMin)) return false;
            if (!eval(this.CalcMax)) return false;
            if (this.Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (this.Factions.Specific != null)
                {
                    foreach (var item in this.Factions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.DeathItem)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Aggression)) return false;
            if (!eval(this.Confidence)) return false;
            if (!eval(this.EnergyLevel)) return false;
            if (!eval(this.Responsibility)) return false;
            if (!eval(this.BuySellServices)) return false;
            if (!eval(this.Teaches)) return false;
            if (!eval(this.MaximumTrainingLevel)) return false;
            if (this.AIPackages != null)
            {
                if (!eval(this.AIPackages.Overall)) return false;
                if (this.AIPackages.Specific != null)
                {
                    foreach (var item in this.AIPackages.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.Animations != null)
            {
                if (!eval(this.Animations.Overall)) return false;
                if (this.Animations.Specific != null)
                {
                    foreach (var item in this.Animations.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.CreatureType)) return false;
            if (!eval(this.CombatSKill)) return false;
            if (!eval(this.MagicSKill)) return false;
            if (!eval(this.StealthSKill)) return false;
            if (!eval(this.SoulLevel)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.AttackDamage)) return false;
            if (!eval(this.Strength)) return false;
            if (!eval(this.Intelligence)) return false;
            if (!eval(this.Willpower)) return false;
            if (!eval(this.Agility)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Endurance)) return false;
            if (!eval(this.Personality)) return false;
            if (!eval(this.Luck)) return false;
            if (!eval(this.AttackReach)) return false;
            if (!eval(this.CombatStyle)) return false;
            if (!eval(this.TurningSpeed)) return false;
            if (!eval(this.BaseScale)) return false;
            if (!eval(this.FootWeight)) return false;
            if (!eval(this.BloodSpray)) return false;
            if (!eval(this.BloodDecal)) return false;
            if (!eval(this.InheritsSoundFrom)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Creature_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Creature_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Creature_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItem<R, ItemEntry_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItem<R, ItemEntry_Mask<R>>> l = new List<MaskItem<R, ItemEntry_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific)
                    {
                        MaskItem<R, ItemEntry_Mask<R>> mask = default(MaskItem<R, ItemEntry_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ItemEntry_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<R>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Models != null)
            {
                obj.Models = new MaskItem<R, IEnumerable<R>>();
                obj.Models.Overall = eval(this.Models.Overall);
                if (Models.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Models.Specific = l;
                    foreach (var item in Models.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.NIFT = eval(this.NIFT);
            obj.Flags = eval(this.Flags);
            obj.BaseSpellPoints = eval(this.BaseSpellPoints);
            obj.Fatigue = eval(this.Fatigue);
            obj.BarterGold = eval(this.BarterGold);
            obj.LevelOffset = eval(this.LevelOffset);
            obj.CalcMin = eval(this.CalcMin);
            obj.CalcMax = eval(this.CalcMax);
            if (Factions != null)
            {
                obj.Factions = new MaskItem<R, IEnumerable<MaskItem<R, RankPlacement_Mask<R>>>>();
                obj.Factions.Overall = eval(this.Factions.Overall);
                if (Factions.Specific != null)
                {
                    List<MaskItem<R, RankPlacement_Mask<R>>> l = new List<MaskItem<R, RankPlacement_Mask<R>>>();
                    obj.Factions.Specific = l;
                    foreach (var item in Factions.Specific)
                    {
                        MaskItem<R, RankPlacement_Mask<R>> mask = default(MaskItem<R, RankPlacement_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, RankPlacement_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.DeathItem = eval(this.DeathItem);
            obj.Script = eval(this.Script);
            obj.Aggression = eval(this.Aggression);
            obj.Confidence = eval(this.Confidence);
            obj.EnergyLevel = eval(this.EnergyLevel);
            obj.Responsibility = eval(this.Responsibility);
            obj.BuySellServices = eval(this.BuySellServices);
            obj.Teaches = eval(this.Teaches);
            obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
            if (AIPackages != null)
            {
                obj.AIPackages = new MaskItem<R, IEnumerable<R>>();
                obj.AIPackages.Overall = eval(this.AIPackages.Overall);
                if (AIPackages.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.AIPackages.Specific = l;
                    foreach (var item in AIPackages.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Animations != null)
            {
                obj.Animations = new MaskItem<R, IEnumerable<R>>();
                obj.Animations.Overall = eval(this.Animations.Overall);
                if (Animations.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Animations.Specific = l;
                    foreach (var item in Animations.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.CreatureType = eval(this.CreatureType);
            obj.CombatSKill = eval(this.CombatSKill);
            obj.MagicSKill = eval(this.MagicSKill);
            obj.StealthSKill = eval(this.StealthSKill);
            obj.SoulLevel = eval(this.SoulLevel);
            obj.Health = eval(this.Health);
            obj.AttackDamage = eval(this.AttackDamage);
            obj.Strength = eval(this.Strength);
            obj.Intelligence = eval(this.Intelligence);
            obj.Willpower = eval(this.Willpower);
            obj.Agility = eval(this.Agility);
            obj.Speed = eval(this.Speed);
            obj.Endurance = eval(this.Endurance);
            obj.Personality = eval(this.Personality);
            obj.Luck = eval(this.Luck);
            obj.AttackReach = eval(this.AttackReach);
            obj.CombatStyle = eval(this.CombatStyle);
            obj.TurningSpeed = eval(this.TurningSpeed);
            obj.BaseScale = eval(this.BaseScale);
            obj.FootWeight = eval(this.FootWeight);
            obj.BloodSpray = eval(this.BloodSpray);
            obj.BloodDecal = eval(this.BloodDecal);
            obj.InheritsSoundFrom = eval(this.InheritsSoundFrom);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItem<R, CreatureSound_Mask<R>>>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (Sounds.Specific != null)
                {
                    List<MaskItem<R, CreatureSound_Mask<R>>> l = new List<MaskItem<R, CreatureSound_Mask<R>>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific)
                    {
                        MaskItem<R, CreatureSound_Mask<R>> mask = default(MaskItem<R, CreatureSound_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, CreatureSound_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Items.Specific = null;
            this.Spells.Specific = null;
            this.Models.Specific = null;
            this.Factions.Specific = null;
            this.AIPackages.Specific = null;
            this.Animations.Specific = null;
            this.Sounds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Creature_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Creature_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Creature_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Models?.Overall ?? true)
                {
                    fg.AppendLine("Models =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Models.Overall != null)
                        {
                            fg.AppendLine(Models.Overall.ToString());
                        }
                        if (Models.Specific != null)
                        {
                            foreach (var subItem in Models.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.NIFT ?? true)
                {
                    fg.AppendLine($"NIFT => {NIFT}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.BaseSpellPoints ?? true)
                {
                    fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
                }
                if (printMask?.Fatigue ?? true)
                {
                    fg.AppendLine($"Fatigue => {Fatigue}");
                }
                if (printMask?.BarterGold ?? true)
                {
                    fg.AppendLine($"BarterGold => {BarterGold}");
                }
                if (printMask?.LevelOffset ?? true)
                {
                    fg.AppendLine($"LevelOffset => {LevelOffset}");
                }
                if (printMask?.CalcMin ?? true)
                {
                    fg.AppendLine($"CalcMin => {CalcMin}");
                }
                if (printMask?.CalcMax ?? true)
                {
                    fg.AppendLine($"CalcMax => {CalcMax}");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Factions.Overall != null)
                        {
                            fg.AppendLine(Factions.Overall.ToString());
                        }
                        if (Factions.Specific != null)
                        {
                            foreach (var subItem in Factions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DeathItem ?? true)
                {
                    fg.AppendLine($"DeathItem => {DeathItem}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Aggression ?? true)
                {
                    fg.AppendLine($"Aggression => {Aggression}");
                }
                if (printMask?.Confidence ?? true)
                {
                    fg.AppendLine($"Confidence => {Confidence}");
                }
                if (printMask?.EnergyLevel ?? true)
                {
                    fg.AppendLine($"EnergyLevel => {EnergyLevel}");
                }
                if (printMask?.Responsibility ?? true)
                {
                    fg.AppendLine($"Responsibility => {Responsibility}");
                }
                if (printMask?.BuySellServices ?? true)
                {
                    fg.AppendLine($"BuySellServices => {BuySellServices}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {Teaches}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (AIPackages.Overall != null)
                        {
                            fg.AppendLine(AIPackages.Overall.ToString());
                        }
                        if (AIPackages.Specific != null)
                        {
                            foreach (var subItem in AIPackages.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Animations?.Overall ?? true)
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Animations.Overall != null)
                        {
                            fg.AppendLine(Animations.Overall.ToString());
                        }
                        if (Animations.Specific != null)
                        {
                            foreach (var subItem in Animations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.CreatureType ?? true)
                {
                    fg.AppendLine($"CreatureType => {CreatureType}");
                }
                if (printMask?.CombatSKill ?? true)
                {
                    fg.AppendLine($"CombatSKill => {CombatSKill}");
                }
                if (printMask?.MagicSKill ?? true)
                {
                    fg.AppendLine($"MagicSKill => {MagicSKill}");
                }
                if (printMask?.StealthSKill ?? true)
                {
                    fg.AppendLine($"StealthSKill => {StealthSKill}");
                }
                if (printMask?.SoulLevel ?? true)
                {
                    fg.AppendLine($"SoulLevel => {SoulLevel}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.AttackDamage ?? true)
                {
                    fg.AppendLine($"AttackDamage => {AttackDamage}");
                }
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {Luck}");
                }
                if (printMask?.AttackReach ?? true)
                {
                    fg.AppendLine($"AttackReach => {AttackReach}");
                }
                if (printMask?.CombatStyle ?? true)
                {
                    fg.AppendLine($"CombatStyle => {CombatStyle}");
                }
                if (printMask?.TurningSpeed ?? true)
                {
                    fg.AppendLine($"TurningSpeed => {TurningSpeed}");
                }
                if (printMask?.BaseScale ?? true)
                {
                    fg.AppendLine($"BaseScale => {BaseScale}");
                }
                if (printMask?.FootWeight ?? true)
                {
                    fg.AppendLine($"FootWeight => {FootWeight}");
                }
                if (printMask?.BloodSpray ?? true)
                {
                    fg.AppendLine($"BloodSpray => {BloodSpray}");
                }
                if (printMask?.BloodDecal ?? true)
                {
                    fg.AppendLine($"BloodDecal => {BloodDecal}");
                }
                if (printMask?.InheritsSoundFrom ?? true)
                {
                    fg.AppendLine($"InheritsSoundFrom => {InheritsSoundFrom}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds.Overall != null)
                        {
                            fg.AppendLine(Sounds.Overall.ToString());
                        }
                        if (Sounds.Specific != null)
                        {
                            foreach (var subItem in Sounds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Creature_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Creature_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>> Items;
        public MaskItem<Exception, IEnumerable<Exception>> Spells;
        public MaskItem<Exception, IEnumerable<Exception>> Models;
        public Exception NIFT;
        public Exception Flags;
        public Exception BaseSpellPoints;
        public Exception Fatigue;
        public Exception BarterGold;
        public Exception LevelOffset;
        public Exception CalcMin;
        public Exception CalcMax;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>> Factions;
        public Exception DeathItem;
        public Exception Script;
        public Exception Aggression;
        public Exception Confidence;
        public Exception EnergyLevel;
        public Exception Responsibility;
        public Exception BuySellServices;
        public Exception Teaches;
        public Exception MaximumTrainingLevel;
        public MaskItem<Exception, IEnumerable<Exception>> AIPackages;
        public MaskItem<Exception, IEnumerable<Exception>> Animations;
        public Exception CreatureType;
        public Exception CombatSKill;
        public Exception MagicSKill;
        public Exception StealthSKill;
        public Exception SoulLevel;
        public Exception Health;
        public Exception AttackDamage;
        public Exception Strength;
        public Exception Intelligence;
        public Exception Willpower;
        public Exception Agility;
        public Exception Speed;
        public Exception Endurance;
        public Exception Personality;
        public Exception Luck;
        public Exception AttackReach;
        public Exception CombatStyle;
        public Exception TurningSpeed;
        public Exception BaseScale;
        public Exception FootWeight;
        public Exception BloodSpray;
        public Exception BloodDecal;
        public Exception InheritsSoundFrom;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, CreatureSound_ErrorMask>>> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    return Model;
                case Creature_FieldIndex.Items:
                    return Items;
                case Creature_FieldIndex.Spells:
                    return Spells;
                case Creature_FieldIndex.Models:
                    return Models;
                case Creature_FieldIndex.NIFT:
                    return NIFT;
                case Creature_FieldIndex.Flags:
                    return Flags;
                case Creature_FieldIndex.BaseSpellPoints:
                    return BaseSpellPoints;
                case Creature_FieldIndex.Fatigue:
                    return Fatigue;
                case Creature_FieldIndex.BarterGold:
                    return BarterGold;
                case Creature_FieldIndex.LevelOffset:
                    return LevelOffset;
                case Creature_FieldIndex.CalcMin:
                    return CalcMin;
                case Creature_FieldIndex.CalcMax:
                    return CalcMax;
                case Creature_FieldIndex.Factions:
                    return Factions;
                case Creature_FieldIndex.DeathItem:
                    return DeathItem;
                case Creature_FieldIndex.Script:
                    return Script;
                case Creature_FieldIndex.Aggression:
                    return Aggression;
                case Creature_FieldIndex.Confidence:
                    return Confidence;
                case Creature_FieldIndex.EnergyLevel:
                    return EnergyLevel;
                case Creature_FieldIndex.Responsibility:
                    return Responsibility;
                case Creature_FieldIndex.BuySellServices:
                    return BuySellServices;
                case Creature_FieldIndex.Teaches:
                    return Teaches;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return MaximumTrainingLevel;
                case Creature_FieldIndex.AIPackages:
                    return AIPackages;
                case Creature_FieldIndex.Animations:
                    return Animations;
                case Creature_FieldIndex.CreatureType:
                    return CreatureType;
                case Creature_FieldIndex.CombatSKill:
                    return CombatSKill;
                case Creature_FieldIndex.MagicSKill:
                    return MagicSKill;
                case Creature_FieldIndex.StealthSKill:
                    return StealthSKill;
                case Creature_FieldIndex.SoulLevel:
                    return SoulLevel;
                case Creature_FieldIndex.Health:
                    return Health;
                case Creature_FieldIndex.AttackDamage:
                    return AttackDamage;
                case Creature_FieldIndex.Strength:
                    return Strength;
                case Creature_FieldIndex.Intelligence:
                    return Intelligence;
                case Creature_FieldIndex.Willpower:
                    return Willpower;
                case Creature_FieldIndex.Agility:
                    return Agility;
                case Creature_FieldIndex.Speed:
                    return Speed;
                case Creature_FieldIndex.Endurance:
                    return Endurance;
                case Creature_FieldIndex.Personality:
                    return Personality;
                case Creature_FieldIndex.Luck:
                    return Luck;
                case Creature_FieldIndex.AttackReach:
                    return AttackReach;
                case Creature_FieldIndex.CombatStyle:
                    return CombatStyle;
                case Creature_FieldIndex.TurningSpeed:
                    return TurningSpeed;
                case Creature_FieldIndex.BaseScale:
                    return BaseScale;
                case Creature_FieldIndex.FootWeight:
                    return FootWeight;
                case Creature_FieldIndex.BloodSpray:
                    return BloodSpray;
                case Creature_FieldIndex.BloodDecal:
                    return BloodDecal;
                case Creature_FieldIndex.InheritsSoundFrom:
                    return InheritsSoundFrom;
                case Creature_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Creature_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>(ex, null);
                    break;
                case Creature_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Creature_FieldIndex.Models:
                    this.Models = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Creature_FieldIndex.NIFT:
                    this.NIFT = ex;
                    break;
                case Creature_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = ex;
                    break;
                case Creature_FieldIndex.Fatigue:
                    this.Fatigue = ex;
                    break;
                case Creature_FieldIndex.BarterGold:
                    this.BarterGold = ex;
                    break;
                case Creature_FieldIndex.LevelOffset:
                    this.LevelOffset = ex;
                    break;
                case Creature_FieldIndex.CalcMin:
                    this.CalcMin = ex;
                    break;
                case Creature_FieldIndex.CalcMax:
                    this.CalcMax = ex;
                    break;
                case Creature_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>(ex, null);
                    break;
                case Creature_FieldIndex.DeathItem:
                    this.DeathItem = ex;
                    break;
                case Creature_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Creature_FieldIndex.Aggression:
                    this.Aggression = ex;
                    break;
                case Creature_FieldIndex.Confidence:
                    this.Confidence = ex;
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    this.EnergyLevel = ex;
                    break;
                case Creature_FieldIndex.Responsibility:
                    this.Responsibility = ex;
                    break;
                case Creature_FieldIndex.BuySellServices:
                    this.BuySellServices = ex;
                    break;
                case Creature_FieldIndex.Teaches:
                    this.Teaches = ex;
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = ex;
                    break;
                case Creature_FieldIndex.AIPackages:
                    this.AIPackages = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Creature_FieldIndex.Animations:
                    this.Animations = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Creature_FieldIndex.CreatureType:
                    this.CreatureType = ex;
                    break;
                case Creature_FieldIndex.CombatSKill:
                    this.CombatSKill = ex;
                    break;
                case Creature_FieldIndex.MagicSKill:
                    this.MagicSKill = ex;
                    break;
                case Creature_FieldIndex.StealthSKill:
                    this.StealthSKill = ex;
                    break;
                case Creature_FieldIndex.SoulLevel:
                    this.SoulLevel = ex;
                    break;
                case Creature_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Creature_FieldIndex.AttackDamage:
                    this.AttackDamage = ex;
                    break;
                case Creature_FieldIndex.Strength:
                    this.Strength = ex;
                    break;
                case Creature_FieldIndex.Intelligence:
                    this.Intelligence = ex;
                    break;
                case Creature_FieldIndex.Willpower:
                    this.Willpower = ex;
                    break;
                case Creature_FieldIndex.Agility:
                    this.Agility = ex;
                    break;
                case Creature_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case Creature_FieldIndex.Endurance:
                    this.Endurance = ex;
                    break;
                case Creature_FieldIndex.Personality:
                    this.Personality = ex;
                    break;
                case Creature_FieldIndex.Luck:
                    this.Luck = ex;
                    break;
                case Creature_FieldIndex.AttackReach:
                    this.AttackReach = ex;
                    break;
                case Creature_FieldIndex.CombatStyle:
                    this.CombatStyle = ex;
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    this.TurningSpeed = ex;
                    break;
                case Creature_FieldIndex.BaseScale:
                    this.BaseScale = ex;
                    break;
                case Creature_FieldIndex.FootWeight:
                    this.FootWeight = ex;
                    break;
                case Creature_FieldIndex.BloodSpray:
                    this.BloodSpray = ex;
                    break;
                case Creature_FieldIndex.BloodDecal:
                    this.BloodDecal = ex;
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    this.InheritsSoundFrom = ex;
                    break;
                case Creature_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, CreatureSound_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Creature_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>)obj;
                    break;
                case Creature_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Creature_FieldIndex.Models:
                    this.Models = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Creature_FieldIndex.NIFT:
                    this.NIFT = (Exception)obj;
                    break;
                case Creature_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = (Exception)obj;
                    break;
                case Creature_FieldIndex.Fatigue:
                    this.Fatigue = (Exception)obj;
                    break;
                case Creature_FieldIndex.BarterGold:
                    this.BarterGold = (Exception)obj;
                    break;
                case Creature_FieldIndex.LevelOffset:
                    this.LevelOffset = (Exception)obj;
                    break;
                case Creature_FieldIndex.CalcMin:
                    this.CalcMin = (Exception)obj;
                    break;
                case Creature_FieldIndex.CalcMax:
                    this.CalcMax = (Exception)obj;
                    break;
                case Creature_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>)obj;
                    break;
                case Creature_FieldIndex.DeathItem:
                    this.DeathItem = (Exception)obj;
                    break;
                case Creature_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Creature_FieldIndex.Aggression:
                    this.Aggression = (Exception)obj;
                    break;
                case Creature_FieldIndex.Confidence:
                    this.Confidence = (Exception)obj;
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    this.EnergyLevel = (Exception)obj;
                    break;
                case Creature_FieldIndex.Responsibility:
                    this.Responsibility = (Exception)obj;
                    break;
                case Creature_FieldIndex.BuySellServices:
                    this.BuySellServices = (Exception)obj;
                    break;
                case Creature_FieldIndex.Teaches:
                    this.Teaches = (Exception)obj;
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = (Exception)obj;
                    break;
                case Creature_FieldIndex.AIPackages:
                    this.AIPackages = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Creature_FieldIndex.Animations:
                    this.Animations = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Creature_FieldIndex.CreatureType:
                    this.CreatureType = (Exception)obj;
                    break;
                case Creature_FieldIndex.CombatSKill:
                    this.CombatSKill = (Exception)obj;
                    break;
                case Creature_FieldIndex.MagicSKill:
                    this.MagicSKill = (Exception)obj;
                    break;
                case Creature_FieldIndex.StealthSKill:
                    this.StealthSKill = (Exception)obj;
                    break;
                case Creature_FieldIndex.SoulLevel:
                    this.SoulLevel = (Exception)obj;
                    break;
                case Creature_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Creature_FieldIndex.AttackDamage:
                    this.AttackDamage = (Exception)obj;
                    break;
                case Creature_FieldIndex.Strength:
                    this.Strength = (Exception)obj;
                    break;
                case Creature_FieldIndex.Intelligence:
                    this.Intelligence = (Exception)obj;
                    break;
                case Creature_FieldIndex.Willpower:
                    this.Willpower = (Exception)obj;
                    break;
                case Creature_FieldIndex.Agility:
                    this.Agility = (Exception)obj;
                    break;
                case Creature_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case Creature_FieldIndex.Endurance:
                    this.Endurance = (Exception)obj;
                    break;
                case Creature_FieldIndex.Personality:
                    this.Personality = (Exception)obj;
                    break;
                case Creature_FieldIndex.Luck:
                    this.Luck = (Exception)obj;
                    break;
                case Creature_FieldIndex.AttackReach:
                    this.AttackReach = (Exception)obj;
                    break;
                case Creature_FieldIndex.CombatStyle:
                    this.CombatStyle = (Exception)obj;
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    this.TurningSpeed = (Exception)obj;
                    break;
                case Creature_FieldIndex.BaseScale:
                    this.BaseScale = (Exception)obj;
                    break;
                case Creature_FieldIndex.FootWeight:
                    this.FootWeight = (Exception)obj;
                    break;
                case Creature_FieldIndex.BloodSpray:
                    this.BloodSpray = (Exception)obj;
                    break;
                case Creature_FieldIndex.BloodDecal:
                    this.BloodDecal = (Exception)obj;
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    this.InheritsSoundFrom = (Exception)obj;
                    break;
                case Creature_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, IEnumerable<MaskItem<Exception, CreatureSound_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Items != null) return true;
            if (Spells != null) return true;
            if (Models != null) return true;
            if (NIFT != null) return true;
            if (Flags != null) return true;
            if (BaseSpellPoints != null) return true;
            if (Fatigue != null) return true;
            if (BarterGold != null) return true;
            if (LevelOffset != null) return true;
            if (CalcMin != null) return true;
            if (CalcMax != null) return true;
            if (Factions != null) return true;
            if (DeathItem != null) return true;
            if (Script != null) return true;
            if (Aggression != null) return true;
            if (Confidence != null) return true;
            if (EnergyLevel != null) return true;
            if (Responsibility != null) return true;
            if (BuySellServices != null) return true;
            if (Teaches != null) return true;
            if (MaximumTrainingLevel != null) return true;
            if (AIPackages != null) return true;
            if (Animations != null) return true;
            if (CreatureType != null) return true;
            if (CombatSKill != null) return true;
            if (MagicSKill != null) return true;
            if (StealthSKill != null) return true;
            if (SoulLevel != null) return true;
            if (Health != null) return true;
            if (AttackDamage != null) return true;
            if (Strength != null) return true;
            if (Intelligence != null) return true;
            if (Willpower != null) return true;
            if (Agility != null) return true;
            if (Speed != null) return true;
            if (Endurance != null) return true;
            if (Personality != null) return true;
            if (Luck != null) return true;
            if (AttackReach != null) return true;
            if (CombatStyle != null) return true;
            if (TurningSpeed != null) return true;
            if (BaseScale != null) return true;
            if (FootWeight != null) return true;
            if (BloodSpray != null) return true;
            if (BloodDecal != null) return true;
            if (InheritsSoundFrom != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Creature_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Spells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Spells.Overall != null)
                {
                    fg.AppendLine(Spells.Overall.ToString());
                }
                if (Spells.Specific != null)
                {
                    foreach (var subItem in Spells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Models =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Models.Overall != null)
                {
                    fg.AppendLine(Models.Overall.ToString());
                }
                if (Models.Specific != null)
                {
                    foreach (var subItem in Models.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"NIFT => {NIFT}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
            fg.AppendLine($"Fatigue => {Fatigue}");
            fg.AppendLine($"BarterGold => {BarterGold}");
            fg.AppendLine($"LevelOffset => {LevelOffset}");
            fg.AppendLine($"CalcMin => {CalcMin}");
            fg.AppendLine($"CalcMax => {CalcMax}");
            fg.AppendLine("Factions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Factions.Overall != null)
                {
                    fg.AppendLine(Factions.Overall.ToString());
                }
                if (Factions.Specific != null)
                {
                    foreach (var subItem in Factions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"DeathItem => {DeathItem}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Aggression => {Aggression}");
            fg.AppendLine($"Confidence => {Confidence}");
            fg.AppendLine($"EnergyLevel => {EnergyLevel}");
            fg.AppendLine($"Responsibility => {Responsibility}");
            fg.AppendLine($"BuySellServices => {BuySellServices}");
            fg.AppendLine($"Teaches => {Teaches}");
            fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
            fg.AppendLine("AIPackages =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (AIPackages.Overall != null)
                {
                    fg.AppendLine(AIPackages.Overall.ToString());
                }
                if (AIPackages.Specific != null)
                {
                    foreach (var subItem in AIPackages.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Animations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Animations.Overall != null)
                {
                    fg.AppendLine(Animations.Overall.ToString());
                }
                if (Animations.Specific != null)
                {
                    foreach (var subItem in Animations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"CreatureType => {CreatureType}");
            fg.AppendLine($"CombatSKill => {CombatSKill}");
            fg.AppendLine($"MagicSKill => {MagicSKill}");
            fg.AppendLine($"StealthSKill => {StealthSKill}");
            fg.AppendLine($"SoulLevel => {SoulLevel}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"AttackDamage => {AttackDamage}");
            fg.AppendLine($"Strength => {Strength}");
            fg.AppendLine($"Intelligence => {Intelligence}");
            fg.AppendLine($"Willpower => {Willpower}");
            fg.AppendLine($"Agility => {Agility}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Endurance => {Endurance}");
            fg.AppendLine($"Personality => {Personality}");
            fg.AppendLine($"Luck => {Luck}");
            fg.AppendLine($"AttackReach => {AttackReach}");
            fg.AppendLine($"CombatStyle => {CombatStyle}");
            fg.AppendLine($"TurningSpeed => {TurningSpeed}");
            fg.AppendLine($"BaseScale => {BaseScale}");
            fg.AppendLine($"FootWeight => {FootWeight}");
            fg.AppendLine($"BloodSpray => {BloodSpray}");
            fg.AppendLine($"BloodDecal => {BloodDecal}");
            fg.AppendLine($"InheritsSoundFrom => {InheritsSoundFrom}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds.Overall != null)
                {
                    fg.AppendLine(Sounds.Overall.ToString());
                }
                if (Sounds.Specific != null)
                {
                    foreach (var subItem in Sounds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Creature_ErrorMask Combine(Creature_ErrorMask rhs)
        {
            var ret = new Creature_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, ItemEntry_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            ret.Spells = new MaskItem<Exception, IEnumerable<Exception>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<Exception>(this.Spells.Specific.And(rhs.Spells.Specific)));
            ret.Models = new MaskItem<Exception, IEnumerable<Exception>>(this.Models.Overall.Combine(rhs.Models.Overall), new List<Exception>(this.Models.Specific.And(rhs.Models.Specific)));
            ret.NIFT = this.NIFT.Combine(rhs.NIFT);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.BaseSpellPoints = this.BaseSpellPoints.Combine(rhs.BaseSpellPoints);
            ret.Fatigue = this.Fatigue.Combine(rhs.Fatigue);
            ret.BarterGold = this.BarterGold.Combine(rhs.BarterGold);
            ret.LevelOffset = this.LevelOffset.Combine(rhs.LevelOffset);
            ret.CalcMin = this.CalcMin.Combine(rhs.CalcMin);
            ret.CalcMax = this.CalcMax.Combine(rhs.CalcMax);
            ret.Factions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>(this.Factions.Overall.Combine(rhs.Factions.Overall), new List<MaskItem<Exception, RankPlacement_ErrorMask>>(this.Factions.Specific.And(rhs.Factions.Specific)));
            ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Aggression = this.Aggression.Combine(rhs.Aggression);
            ret.Confidence = this.Confidence.Combine(rhs.Confidence);
            ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
            ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
            ret.BuySellServices = this.BuySellServices.Combine(rhs.BuySellServices);
            ret.Teaches = this.Teaches.Combine(rhs.Teaches);
            ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
            ret.AIPackages = new MaskItem<Exception, IEnumerable<Exception>>(this.AIPackages.Overall.Combine(rhs.AIPackages.Overall), new List<Exception>(this.AIPackages.Specific.And(rhs.AIPackages.Specific)));
            ret.Animations = new MaskItem<Exception, IEnumerable<Exception>>(this.Animations.Overall.Combine(rhs.Animations.Overall), new List<Exception>(this.Animations.Specific.And(rhs.Animations.Specific)));
            ret.CreatureType = this.CreatureType.Combine(rhs.CreatureType);
            ret.CombatSKill = this.CombatSKill.Combine(rhs.CombatSKill);
            ret.MagicSKill = this.MagicSKill.Combine(rhs.MagicSKill);
            ret.StealthSKill = this.StealthSKill.Combine(rhs.StealthSKill);
            ret.SoulLevel = this.SoulLevel.Combine(rhs.SoulLevel);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.AttackDamage = this.AttackDamage.Combine(rhs.AttackDamage);
            ret.Strength = this.Strength.Combine(rhs.Strength);
            ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
            ret.Willpower = this.Willpower.Combine(rhs.Willpower);
            ret.Agility = this.Agility.Combine(rhs.Agility);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Endurance = this.Endurance.Combine(rhs.Endurance);
            ret.Personality = this.Personality.Combine(rhs.Personality);
            ret.Luck = this.Luck.Combine(rhs.Luck);
            ret.AttackReach = this.AttackReach.Combine(rhs.AttackReach);
            ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
            ret.TurningSpeed = this.TurningSpeed.Combine(rhs.TurningSpeed);
            ret.BaseScale = this.BaseScale.Combine(rhs.BaseScale);
            ret.FootWeight = this.FootWeight.Combine(rhs.FootWeight);
            ret.BloodSpray = this.BloodSpray.Combine(rhs.BloodSpray);
            ret.BloodDecal = this.BloodDecal.Combine(rhs.BloodDecal);
            ret.InheritsSoundFrom = this.InheritsSoundFrom.Combine(rhs.InheritsSoundFrom);
            ret.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, CreatureSound_ErrorMask>>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), new List<MaskItem<Exception, CreatureSound_ErrorMask>>(this.Sounds.Specific.And(rhs.Sounds.Specific)));
            return ret;
        }
        public static Creature_ErrorMask Combine(Creature_ErrorMask lhs, Creature_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Creature_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Creature_ErrorMask();
        }
        #endregion

    }
    public class Creature_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public MaskItem<CopyOption, ItemEntry_CopyMask> Items;
        public CopyOption Spells;
        public CopyOption Models;
        public bool NIFT;
        public bool Flags;
        public bool BaseSpellPoints;
        public bool Fatigue;
        public bool BarterGold;
        public bool LevelOffset;
        public bool CalcMin;
        public bool CalcMax;
        public MaskItem<CopyOption, RankPlacement_CopyMask> Factions;
        public bool DeathItem;
        public bool Script;
        public bool Aggression;
        public bool Confidence;
        public bool EnergyLevel;
        public bool Responsibility;
        public bool BuySellServices;
        public bool Teaches;
        public bool MaximumTrainingLevel;
        public CopyOption AIPackages;
        public CopyOption Animations;
        public bool CreatureType;
        public bool CombatSKill;
        public bool MagicSKill;
        public bool StealthSKill;
        public bool SoulLevel;
        public bool Health;
        public bool AttackDamage;
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        public bool AttackReach;
        public bool CombatStyle;
        public bool TurningSpeed;
        public bool BaseScale;
        public bool FootWeight;
        public bool BloodSpray;
        public bool BloodDecal;
        public bool InheritsSoundFrom;
        public MaskItem<CopyOption, CreatureSound_CopyMask> Sounds;
        #endregion

    }
    #endregion




    #endregion

}
