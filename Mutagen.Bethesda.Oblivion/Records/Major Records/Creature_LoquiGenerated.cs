/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Creature : 
        NPCAbstract,
        ICreature,
        ILoquiObject<Creature>,
        ILoquiObjectSetter,
        INamed,
        ILinkSubContainer,
        IEquatable<Creature>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Creature_Registration.Instance;
        public new static Creature_Registration Registration => Creature_Registration.Instance;

        #region Ctor
        protected Creature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool ICreatureGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String ICreatureGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool ICreatureGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model ICreatureGetter.Model => this.Model;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<ItemEntry> _Items = new SourceSetList<ItemEntry>();
        public ISourceSetList<ItemEntry> Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ItemEntry> ItemsEnumerable
        {
            get => _Items.Items;
            set => _Items.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<ItemEntry> ICreature.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<ItemEntry> ICreatureGetter.Items => _Items;
        #endregion

        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FormIDSetLink<SpellAbstract>> _Spells = new SourceSetList<FormIDSetLink<SpellAbstract>>();
        public ISourceSetList<FormIDSetLink<SpellAbstract>> Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<SpellAbstract>> SpellsEnumerable
        {
            get => _Spells.Items;
            set => _Spells.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FormIDSetLink<SpellAbstract>> ICreature.Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FormIDSetLink<SpellAbstract>> ICreatureGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Models
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<String> _Models = new SourceSetList<String>();
        public ISourceSetList<String> Models => _Models;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<String> ModelsEnumerable
        {
            get => _Models.Items;
            set => _Models.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<String> ICreature.Models => _Models;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<String> ICreatureGetter.Models => _Models;
        #endregion

        #endregion
        #region NIFT
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool NIFT_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.NIFT];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.NIFT, nameof(NIFT_IsSet));
        }
        bool ICreatureGetter.NIFT_IsSet => NIFT_IsSet;
        protected Byte[] _NIFT;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] NIFT
        {
            get => this._NIFT;
            set => NIFT_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte[] ICreatureGetter.NIFT => this.NIFT;
        public void NIFT_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _NIFT, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.NIFT, nameof(NIFT), nameof(NIFT_IsSet));
        }
        public void NIFT_Unset()
        {
            this.NIFT_Set(default(Byte[]), false);
        }
        #endregion
        #region Flags
        private Creature.CreatureFlag _Flags;
        public Creature.CreatureFlag Flags
        {
            get => this._Flags;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region BaseSpellPoints
        private UInt16 _BaseSpellPoints;
        public UInt16 BaseSpellPoints
        {
            get => this._BaseSpellPoints;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BaseSpellPoints, value, nameof(BaseSpellPoints));
            }
        }
        #endregion
        #region Fatigue
        private UInt16 _Fatigue;
        public UInt16 Fatigue
        {
            get => this._Fatigue;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Fatigue, value, nameof(Fatigue));
            }
        }
        #endregion
        #region BarterGold
        private UInt16 _BarterGold;
        public UInt16 BarterGold
        {
            get => this._BarterGold;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BarterGold, value, nameof(BarterGold));
            }
        }
        #endregion
        #region LevelOffset
        private Int16 _LevelOffset;
        public Int16 LevelOffset
        {
            get => this._LevelOffset;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._LevelOffset, value, nameof(LevelOffset));
            }
        }
        #endregion
        #region CalcMin
        private UInt16 _CalcMin;
        public UInt16 CalcMin
        {
            get => this._CalcMin;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._CalcMin, value, nameof(CalcMin));
            }
        }
        #endregion
        #region CalcMax
        private UInt16 _CalcMax;
        public UInt16 CalcMax
        {
            get => this._CalcMax;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._CalcMax, value, nameof(CalcMax));
            }
        }
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<RankPlacement> _Factions = new SourceSetList<RankPlacement>();
        public ISourceSetList<RankPlacement> Factions => _Factions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RankPlacement> FactionsEnumerable
        {
            get => _Factions.Items;
            set => _Factions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<RankPlacement> ICreature.Factions => _Factions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<RankPlacement> ICreatureGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        public FormIDSetLink<ItemAbstract> DeathItem_Property { get; } = new FormIDSetLink<ItemAbstract>();
        public ItemAbstract DeathItem { get => DeathItem_Property.Item; set => DeathItem_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<ItemAbstract> ICreatureGetter.DeathItem_Property => this.DeathItem_Property;
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> ICreatureGetter.Script_Property => this.Script_Property;
        #endregion
        #region Aggression
        private Byte _Aggression;
        public Byte Aggression
        {
            get => this._Aggression;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Aggression, value, nameof(Aggression));
            }
        }
        #endregion
        #region Confidence
        private Byte _Confidence;
        public Byte Confidence
        {
            get => this._Confidence;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Confidence, value, nameof(Confidence));
            }
        }
        #endregion
        #region EnergyLevel
        private Byte _EnergyLevel;
        public Byte EnergyLevel
        {
            get => this._EnergyLevel;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._EnergyLevel, value, nameof(EnergyLevel));
            }
        }
        #endregion
        #region Responsibility
        private Byte _Responsibility;
        public Byte Responsibility
        {
            get => this._Responsibility;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Responsibility, value, nameof(Responsibility));
            }
        }
        #endregion
        #region BuySellServices
        private NPC.BuySellServiceFlag _BuySellServices;
        public NPC.BuySellServiceFlag BuySellServices
        {
            get => this._BuySellServices;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BuySellServices, value, nameof(BuySellServices));
            }
        }
        #endregion
        #region Teaches
        private Skill _Teaches;
        public Skill Teaches
        {
            get => this._Teaches;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Teaches, value, nameof(Teaches));
            }
        }
        #endregion
        #region MaximumTrainingLevel
        private Byte _MaximumTrainingLevel;
        public Byte MaximumTrainingLevel
        {
            get => this._MaximumTrainingLevel;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._MaximumTrainingLevel, value, nameof(MaximumTrainingLevel));
            }
        }
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FormIDSetLink<AIPackage>> _AIPackages = new SourceSetList<FormIDSetLink<AIPackage>>();
        public ISourceSetList<FormIDSetLink<AIPackage>> AIPackages => _AIPackages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<AIPackage>> AIPackagesEnumerable
        {
            get => _AIPackages.Items;
            set => _AIPackages.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FormIDSetLink<AIPackage>> ICreature.AIPackages => _AIPackages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FormIDSetLink<AIPackage>> ICreatureGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<String> _Animations = new SourceSetList<String>();
        public ISourceSetList<String> Animations => _Animations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<String> AnimationsEnumerable
        {
            get => _Animations.Items;
            set => _Animations.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<String> ICreature.Animations => _Animations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<String> ICreatureGetter.Animations => _Animations;
        #endregion

        #endregion
        #region CreatureType
        private Creature.CreatureTypeEnum _CreatureType;
        public Creature.CreatureTypeEnum CreatureType
        {
            get => this._CreatureType;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._CreatureType, value, nameof(CreatureType));
            }
        }
        #endregion
        #region CombatSkill
        private Byte _CombatSkill;
        public Byte CombatSkill
        {
            get => this._CombatSkill;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._CombatSkill, value, nameof(CombatSkill));
            }
        }
        #endregion
        #region MagicSkill
        private Byte _MagicSkill;
        public Byte MagicSkill
        {
            get => this._MagicSkill;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MagicSkill, value, nameof(MagicSkill));
            }
        }
        #endregion
        #region StealthSkill
        private Byte _StealthSkill;
        public Byte StealthSkill
        {
            get => this._StealthSkill;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._StealthSkill, value, nameof(StealthSkill));
            }
        }
        #endregion
        #region SoulLevel
        private SoulLevel _SoulLevel;
        public SoulLevel SoulLevel
        {
            get => this._SoulLevel;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._SoulLevel, value, nameof(SoulLevel));
            }
        }
        #endregion
        #region Health
        private UInt32 _Health;
        public UInt32 Health
        {
            get => this._Health;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Health, value, nameof(Health));
            }
        }
        #endregion
        #region AttackDamage
        private UInt16 _AttackDamage;
        public UInt16 AttackDamage
        {
            get => this._AttackDamage;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._AttackDamage, value, nameof(AttackDamage));
            }
        }
        #endregion
        #region Strength
        private Byte _Strength;
        public Byte Strength
        {
            get => this._Strength;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Strength, value, nameof(Strength));
            }
        }
        #endregion
        #region Intelligence
        private Byte _Intelligence;
        public Byte Intelligence
        {
            get => this._Intelligence;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Intelligence, value, nameof(Intelligence));
            }
        }
        #endregion
        #region Willpower
        private Byte _Willpower;
        public Byte Willpower
        {
            get => this._Willpower;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Willpower, value, nameof(Willpower));
            }
        }
        #endregion
        #region Agility
        private Byte _Agility;
        public Byte Agility
        {
            get => this._Agility;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Agility, value, nameof(Agility));
            }
        }
        #endregion
        #region Speed
        private Byte _Speed;
        public Byte Speed
        {
            get => this._Speed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Speed, value, nameof(Speed));
            }
        }
        #endregion
        #region Endurance
        private Byte _Endurance;
        public Byte Endurance
        {
            get => this._Endurance;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Endurance, value, nameof(Endurance));
            }
        }
        #endregion
        #region Personality
        private Byte _Personality;
        public Byte Personality
        {
            get => this._Personality;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Personality, value, nameof(Personality));
            }
        }
        #endregion
        #region Luck
        private Byte _Luck;
        public Byte Luck
        {
            get => this._Luck;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Luck, value, nameof(Luck));
            }
        }
        #endregion
        #region AttackReach
        public bool AttackReach_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.AttackReach];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.AttackReach, nameof(AttackReach_IsSet));
        }
        bool ICreatureGetter.AttackReach_IsSet => AttackReach_IsSet;
        private Byte _AttackReach;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte AttackReach
        {
            get => this._AttackReach;
            set => AttackReach_Set(value);
        }
        Byte ICreatureGetter.AttackReach => this.AttackReach;
        public void AttackReach_Set(
            Byte value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _AttackReach, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.AttackReach, nameof(AttackReach), nameof(AttackReach_IsSet));
        }
        public void AttackReach_Unset()
        {
            this.AttackReach_Set(default(Byte), false);
        }
        #endregion
        #region CombatStyle
        public FormIDSetLink<CombatStyle> CombatStyle_Property { get; } = new FormIDSetLink<CombatStyle>();
        public CombatStyle CombatStyle { get => CombatStyle_Property.Item; set => CombatStyle_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<CombatStyle> ICreatureGetter.CombatStyle_Property => this.CombatStyle_Property;
        #endregion
        #region TurningSpeed
        public bool TurningSpeed_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.TurningSpeed];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.TurningSpeed, nameof(TurningSpeed_IsSet));
        }
        bool ICreatureGetter.TurningSpeed_IsSet => TurningSpeed_IsSet;
        private Single _TurningSpeed;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single TurningSpeed
        {
            get => this._TurningSpeed;
            set => TurningSpeed_Set(value);
        }
        Single ICreatureGetter.TurningSpeed => this.TurningSpeed;
        public void TurningSpeed_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _TurningSpeed, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.TurningSpeed, nameof(TurningSpeed), nameof(TurningSpeed_IsSet));
        }
        public void TurningSpeed_Unset()
        {
            this.TurningSpeed_Set(default(Single), false);
        }
        #endregion
        #region BaseScale
        public bool BaseScale_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.BaseScale];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.BaseScale, nameof(BaseScale_IsSet));
        }
        bool ICreatureGetter.BaseScale_IsSet => BaseScale_IsSet;
        private Single _BaseScale;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single BaseScale
        {
            get => this._BaseScale;
            set => BaseScale_Set(value);
        }
        Single ICreatureGetter.BaseScale => this.BaseScale;
        public void BaseScale_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _BaseScale, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.BaseScale, nameof(BaseScale), nameof(BaseScale_IsSet));
        }
        public void BaseScale_Unset()
        {
            this.BaseScale_Set(default(Single), false);
        }
        #endregion
        #region FootWeight
        public bool FootWeight_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.FootWeight];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.FootWeight, nameof(FootWeight_IsSet));
        }
        bool ICreatureGetter.FootWeight_IsSet => FootWeight_IsSet;
        private Single _FootWeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FootWeight
        {
            get => this._FootWeight;
            set => FootWeight_Set(value);
        }
        Single ICreatureGetter.FootWeight => this.FootWeight;
        public void FootWeight_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _FootWeight, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.FootWeight, nameof(FootWeight), nameof(FootWeight_IsSet));
        }
        public void FootWeight_Unset()
        {
            this.FootWeight_Set(default(Single), false);
        }
        #endregion
        #region BloodSpray
        public bool BloodSpray_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.BloodSpray];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.BloodSpray, nameof(BloodSpray_IsSet));
        }
        bool ICreatureGetter.BloodSpray_IsSet => BloodSpray_IsSet;
        private String _BloodSpray;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String BloodSpray
        {
            get => this._BloodSpray;
            set => BloodSpray_Set(value);
        }
        String ICreatureGetter.BloodSpray => this.BloodSpray;
        public void BloodSpray_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _BloodSpray, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.BloodSpray, nameof(BloodSpray), nameof(BloodSpray_IsSet));
        }
        public void BloodSpray_Unset()
        {
            this.BloodSpray_Set(default(String), false);
        }
        #endregion
        #region BloodDecal
        public bool BloodDecal_IsSet
        {
            get => _hasBeenSetTracker[(int)Creature_FieldIndex.BloodDecal];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Creature_FieldIndex.BloodDecal, nameof(BloodDecal_IsSet));
        }
        bool ICreatureGetter.BloodDecal_IsSet => BloodDecal_IsSet;
        private String _BloodDecal;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String BloodDecal
        {
            get => this._BloodDecal;
            set => BloodDecal_Set(value);
        }
        String ICreatureGetter.BloodDecal => this.BloodDecal;
        public void BloodDecal_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _BloodDecal, value, _hasBeenSetTracker, markSet, (int)Creature_FieldIndex.BloodDecal, nameof(BloodDecal), nameof(BloodDecal_IsSet));
        }
        public void BloodDecal_Unset()
        {
            this.BloodDecal_Set(default(String), false);
        }
        #endregion
        #region InheritsSoundFrom
        public FormIDSetLink<Creature> InheritsSoundFrom_Property { get; } = new FormIDSetLink<Creature>();
        public Creature InheritsSoundFrom { get => InheritsSoundFrom_Property.Item; set => InheritsSoundFrom_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Creature> ICreatureGetter.InheritsSoundFrom_Property => this.InheritsSoundFrom_Property;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<CreatureSound> _Sounds = new SourceSetList<CreatureSound>();
        public ISourceSetList<CreatureSound> Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<CreatureSound> SoundsEnumerable
        {
            get => _Sounds.Items;
            set => _Sounds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<CreatureSound> ICreature.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<CreatureSound> ICreatureGetter.Sounds => _Sounds;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<Creature>.GetEqualsMask(Creature rhs, EqualsMaskHelper.Include include) => CreatureCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ICreatureGetter>.GetEqualsMask(ICreatureGetter rhs, EqualsMaskHelper.Include include) => CreatureCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Creature_Mask<bool> printMask = null)
        {
            return CreatureCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            CreatureCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Creature_Mask<bool> GetHasBeenSetMask()
        {
            return CreatureCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Creature rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Creature rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!string.Equals(this.Name, rhs.Name)) return false;
            }
            if (Model_IsSet != rhs.Model_IsSet) return false;
            if (Model_IsSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!this.Items.SequenceEqual(rhs.Items)) return false;
            }
            if (Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (Spells.HasBeenSet)
            {
                if (!this.Spells.SequenceEqual(rhs.Spells)) return false;
            }
            if (Models.HasBeenSet != rhs.Models.HasBeenSet) return false;
            if (Models.HasBeenSet)
            {
                if (!this.Models.SequenceEqual(rhs.Models)) return false;
            }
            if (NIFT_IsSet != rhs.NIFT_IsSet) return false;
            if (NIFT_IsSet)
            {
                if (!ByteExt.EqualsFast(this.NIFT, rhs.NIFT)) return false;
            }
            if (this.Flags != rhs.Flags) return false;
            if (this.BaseSpellPoints != rhs.BaseSpellPoints) return false;
            if (this.Fatigue != rhs.Fatigue) return false;
            if (this.BarterGold != rhs.BarterGold) return false;
            if (this.LevelOffset != rhs.LevelOffset) return false;
            if (this.CalcMin != rhs.CalcMin) return false;
            if (this.CalcMax != rhs.CalcMax) return false;
            if (Factions.HasBeenSet != rhs.Factions.HasBeenSet) return false;
            if (Factions.HasBeenSet)
            {
                if (!this.Factions.SequenceEqual(rhs.Factions)) return false;
            }
            if (DeathItem_Property.HasBeenSet != rhs.DeathItem_Property.HasBeenSet) return false;
            if (DeathItem_Property.HasBeenSet)
            {
                if (!this.DeathItem_Property.Equals(rhs.DeathItem_Property)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (this.Aggression != rhs.Aggression) return false;
            if (this.Confidence != rhs.Confidence) return false;
            if (this.EnergyLevel != rhs.EnergyLevel) return false;
            if (this.Responsibility != rhs.Responsibility) return false;
            if (this.BuySellServices != rhs.BuySellServices) return false;
            if (this.Teaches != rhs.Teaches) return false;
            if (this.MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            if (AIPackages.HasBeenSet != rhs.AIPackages.HasBeenSet) return false;
            if (AIPackages.HasBeenSet)
            {
                if (!this.AIPackages.SequenceEqual(rhs.AIPackages)) return false;
            }
            if (Animations.HasBeenSet != rhs.Animations.HasBeenSet) return false;
            if (Animations.HasBeenSet)
            {
                if (!this.Animations.SequenceEqual(rhs.Animations)) return false;
            }
            if (this.CreatureType != rhs.CreatureType) return false;
            if (this.CombatSkill != rhs.CombatSkill) return false;
            if (this.MagicSkill != rhs.MagicSkill) return false;
            if (this.StealthSkill != rhs.StealthSkill) return false;
            if (this.SoulLevel != rhs.SoulLevel) return false;
            if (this.Health != rhs.Health) return false;
            if (this.AttackDamage != rhs.AttackDamage) return false;
            if (this.Strength != rhs.Strength) return false;
            if (this.Intelligence != rhs.Intelligence) return false;
            if (this.Willpower != rhs.Willpower) return false;
            if (this.Agility != rhs.Agility) return false;
            if (this.Speed != rhs.Speed) return false;
            if (this.Endurance != rhs.Endurance) return false;
            if (this.Personality != rhs.Personality) return false;
            if (this.Luck != rhs.Luck) return false;
            if (AttackReach_IsSet != rhs.AttackReach_IsSet) return false;
            if (AttackReach_IsSet)
            {
                if (this.AttackReach != rhs.AttackReach) return false;
            }
            if (CombatStyle_Property.HasBeenSet != rhs.CombatStyle_Property.HasBeenSet) return false;
            if (CombatStyle_Property.HasBeenSet)
            {
                if (!this.CombatStyle_Property.Equals(rhs.CombatStyle_Property)) return false;
            }
            if (TurningSpeed_IsSet != rhs.TurningSpeed_IsSet) return false;
            if (TurningSpeed_IsSet)
            {
                if (!this.TurningSpeed.EqualsWithin(rhs.TurningSpeed)) return false;
            }
            if (BaseScale_IsSet != rhs.BaseScale_IsSet) return false;
            if (BaseScale_IsSet)
            {
                if (!this.BaseScale.EqualsWithin(rhs.BaseScale)) return false;
            }
            if (FootWeight_IsSet != rhs.FootWeight_IsSet) return false;
            if (FootWeight_IsSet)
            {
                if (!this.FootWeight.EqualsWithin(rhs.FootWeight)) return false;
            }
            if (BloodSpray_IsSet != rhs.BloodSpray_IsSet) return false;
            if (BloodSpray_IsSet)
            {
                if (!string.Equals(this.BloodSpray, rhs.BloodSpray)) return false;
            }
            if (BloodDecal_IsSet != rhs.BloodDecal_IsSet) return false;
            if (BloodDecal_IsSet)
            {
                if (!string.Equals(this.BloodDecal, rhs.BloodDecal)) return false;
            }
            if (InheritsSoundFrom_Property.HasBeenSet != rhs.InheritsSoundFrom_Property.HasBeenSet) return false;
            if (InheritsSoundFrom_Property.HasBeenSet)
            {
                if (!this.InheritsSoundFrom_Property.Equals(rhs.InheritsSoundFrom_Property)) return false;
            }
            if (Sounds.HasBeenSet != rhs.Sounds.HasBeenSet) return false;
            if (Sounds.HasBeenSet)
            {
                if (!this.Sounds.SequenceEqual(rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Model_IsSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            if (Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            }
            if (Models.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Models).CombineHashCode(ret);
            }
            if (NIFT_IsSet)
            {
                ret = HashHelper.GetHashCode(NIFT).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BaseSpellPoints).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fatigue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BarterGold).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LevelOffset).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CalcMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CalcMax).CombineHashCode(ret);
            if (Factions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Factions).CombineHashCode(ret);
            }
            if (DeathItem_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DeathItem).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Aggression).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Confidence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EnergyLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Responsibility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BuySellServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaximumTrainingLevel).CombineHashCode(ret);
            if (AIPackages.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(AIPackages).CombineHashCode(ret);
            }
            if (Animations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Animations).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(CreatureType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CombatSkill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MagicSkill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(StealthSkill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SoulLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AttackDamage).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Luck).CombineHashCode(ret);
            if (AttackReach_IsSet)
            {
                ret = HashHelper.GetHashCode(AttackReach).CombineHashCode(ret);
            }
            if (CombatStyle_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CombatStyle).CombineHashCode(ret);
            }
            if (TurningSpeed_IsSet)
            {
                ret = HashHelper.GetHashCode(TurningSpeed).CombineHashCode(ret);
            }
            if (BaseScale_IsSet)
            {
                ret = HashHelper.GetHashCode(BaseScale).CombineHashCode(ret);
            }
            if (FootWeight_IsSet)
            {
                ret = HashHelper.GetHashCode(FootWeight).CombineHashCode(ret);
            }
            if (BloodSpray_IsSet)
            {
                ret = HashHelper.GetHashCode(BloodSpray).CombineHashCode(ret);
            }
            if (BloodDecal_IsSet)
            {
                ret = HashHelper.GetHashCode(BloodDecal).CombineHashCode(ret);
            }
            if (InheritsSoundFrom_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(InheritsSoundFrom).CombineHashCode(ret);
            }
            if (Sounds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Creature Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Creature_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Creature Create_Xml(
            XElement node,
            out Creature_ErrorMask errorMask,
            bool doMasks = true,
            Creature_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Creature Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Creature() : null;
                    break;
                default:
                    break;
            }
            var ret = new Creature();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    CreatureCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Creature Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Creature_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Creature Create_Xml(
            string path,
            out Creature_ErrorMask errorMask,
            Creature_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Creature Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Creature_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Creature Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Creature_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Creature Create_Xml(
            Stream stream,
            out Creature_ErrorMask errorMask,
            Creature_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Creature Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Creature_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Creature_ErrorMask errorMask,
            bool doMasks = true,
            Creature_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Creature_ErrorMask errorMask,
            Creature_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Creature_ErrorMask errorMask,
            Creature_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out NPCAbstract_ErrorMask errorMask,
            bool doMasks = true,
            NPCAbstract_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out NPCSpawn_ErrorMask errorMask,
            bool doMasks = true,
            NPCSpawn_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            CreatureCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            Creature item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasACBSDataType":
                    item.ACBSDataTypeState |= Creature.ACBSDataType.Has;
                    break;
                case "HasAIDTDataType":
                    item.AIDTDataTypeState |= Creature.AIDTDataType.Has;
                    break;
                case "HasDATADataType":
                    item.DATADataTypeState |= Creature.DATADataType.Has;
                    break;
                default:
                    NPCAbstract.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Creature_FieldIndex)index)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                    return _hasBeenSetTracker[index];
                case Creature_FieldIndex.Items:
                    return Items.HasBeenSet;
                case Creature_FieldIndex.Spells:
                    return Spells.HasBeenSet;
                case Creature_FieldIndex.Models:
                    return Models.HasBeenSet;
                case Creature_FieldIndex.Factions:
                    return Factions.HasBeenSet;
                case Creature_FieldIndex.DeathItem:
                    return DeathItem_Property.HasBeenSet;
                case Creature_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Creature_FieldIndex.AIPackages:
                    return AIPackages.HasBeenSet;
                case Creature_FieldIndex.Animations:
                    return Animations.HasBeenSet;
                case Creature_FieldIndex.CombatStyle:
                    return CombatStyle_Property.HasBeenSet;
                case Creature_FieldIndex.InheritsSoundFrom:
                    return InheritsSoundFrom_Property.HasBeenSet;
                case Creature_FieldIndex.Sounds:
                    return Sounds.HasBeenSet;
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Creature_Registration.TRIGGERING_RECORD_TYPE;
        public ACBSDataType ACBSDataTypeState;
        [Flags]
        public enum ACBSDataType
        {
            Has = 1
        }
        public AIDTDataType AIDTDataTypeState;
        [Flags]
        public enum AIDTDataType
        {
            Has = 1
        }
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Items.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            foreach (var item in Spells)
            {
                yield return item;
            }
            foreach (var item in Factions.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return DeathItem_Property;
            yield return Script_Property;
            foreach (var item in AIPackages)
            {
                yield return item;
            }
            yield return CombatStyle_Property;
            yield return InheritsSoundFrom_Property;
            foreach (var item in Sounds.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Items.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            foreach (var item in Spells)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            foreach (var item in Factions.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            DeathItem_Property.Link(
                modList,
                sourceMod);
            Script_Property.Link(
                modList,
                sourceMod);
            foreach (var item in AIPackages)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            CombatStyle_Property.Link(
                modList,
                sourceMod);
            InheritsSoundFrom_Property.Link(
                modList,
                sourceMod);
            foreach (var item in Sounds.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public Creature(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(Creature obj, Creature rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Creature(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Creature Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Creature Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Creature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Creature Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Creature>(
                record: new Creature(),
                frame: frame,
                errorMask: errorMask,
                recType: Creature_Registration.CREA_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Creature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out NPCAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out NPCSpawn_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            CreatureCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Creature item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            NPCAbstract.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Creature item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Model);
                }
                case 0x4F544E43: // CNTO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Creature_Registration.CNTO_HEADER,
                        item: item.Items,
                        fieldIndex: (int)Creature_FieldIndex.Items,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out ItemEntry listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<ItemEntry>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Items);
                }
                case 0x4F4C5053: // SPLO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<SpellAbstract>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Creature_Registration.SPLO_HEADER,
                        masterReferences: masterReferences,
                        item: item.Spells,
                        fieldIndex: (int)Creature_FieldIndex.Spells,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormKeyBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Spells);
                }
                case 0x5A46494E: // NIFZ
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Models,
                        fieldIndex: (int)Creature_FieldIndex.Models,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out String listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                r,
                                errorMask: listErrMask,
                                item: out listSubItem,
                                parseWhole: false);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Models);
                }
                case 0x5446494E: // NIFT
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.NIFT);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] NIFTParse,
                            errorMask: errorMask))
                        {
                            item.NIFT = NIFTParse;
                        }
                        else
                        {
                            item.NIFT = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.NIFT);
                }
                case 0x53424341: // ACBS
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.ACBSDataTypeState = ACBSDataType.Has;
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Flags);
                        if (EnumBinaryTranslation<Creature.CreatureFlag>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            item: out Creature.CreatureFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Creature.CreatureFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BaseSpellPoints);
                        if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt16 BaseSpellPointsParse,
                            errorMask: errorMask))
                        {
                            item.BaseSpellPoints = BaseSpellPointsParse;
                        }
                        else
                        {
                            item.BaseSpellPoints = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Fatigue);
                        if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt16 FatigueParse,
                            errorMask: errorMask))
                        {
                            item.Fatigue = FatigueParse;
                        }
                        else
                        {
                            item.Fatigue = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BarterGold);
                        if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt16 BarterGoldParse,
                            errorMask: errorMask))
                        {
                            item.BarterGold = BarterGoldParse;
                        }
                        else
                        {
                            item.BarterGold = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.LevelOffset);
                        if (Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Int16 LevelOffsetParse,
                            errorMask: errorMask))
                        {
                            item.LevelOffset = LevelOffsetParse;
                        }
                        else
                        {
                            item.LevelOffset = default(Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.CalcMin);
                        if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt16 CalcMinParse,
                            errorMask: errorMask))
                        {
                            item.CalcMin = CalcMinParse;
                        }
                        else
                        {
                            item.CalcMin = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.CalcMax);
                        if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt16 CalcMaxParse,
                            errorMask: errorMask))
                        {
                            item.CalcMax = CalcMaxParse;
                        }
                        else
                        {
                            item.CalcMax = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.CalcMax);
                }
                case 0x4D414E53: // SNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Creature_Registration.SNAM_HEADER,
                        item: item.Factions,
                        fieldIndex: (int)Creature_FieldIndex.Factions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out RankPlacement listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<RankPlacement>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.DeathItem_Property,
                        fieldIndex: (int)Creature_FieldIndex.DeathItem,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.DeathItem);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property,
                        fieldIndex: (int)Creature_FieldIndex.Script,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Script);
                }
                case 0x54444941: // AIDT
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.AIDTDataTypeState = AIDTDataType.Has;
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Aggression);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte AggressionParse,
                            errorMask: errorMask))
                        {
                            item.Aggression = AggressionParse;
                        }
                        else
                        {
                            item.Aggression = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Confidence);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte ConfidenceParse,
                            errorMask: errorMask))
                        {
                            item.Confidence = ConfidenceParse;
                        }
                        else
                        {
                            item.Confidence = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.EnergyLevel);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte EnergyLevelParse,
                            errorMask: errorMask))
                        {
                            item.EnergyLevel = EnergyLevelParse;
                        }
                        else
                        {
                            item.EnergyLevel = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Responsibility);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte ResponsibilityParse,
                            errorMask: errorMask))
                        {
                            item.Responsibility = ResponsibilityParse;
                        }
                        else
                        {
                            item.Responsibility = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BuySellServices);
                        if (EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(4),
                            item: out NPC.BuySellServiceFlag BuySellServicesParse,
                            errorMask: errorMask))
                        {
                            item.BuySellServices = BuySellServicesParse;
                        }
                        else
                        {
                            item.BuySellServices = default(NPC.BuySellServiceFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Teaches);
                        if (EnumBinaryTranslation<Skill>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(1),
                            item: out Skill TeachesParse,
                            errorMask: errorMask))
                        {
                            item.Teaches = TeachesParse;
                        }
                        else
                        {
                            item.Teaches = default(Skill);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.MaximumTrainingLevel);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte MaximumTrainingLevelParse,
                            errorMask: errorMask))
                        {
                            item.MaximumTrainingLevel = MaximumTrainingLevelParse;
                        }
                        else
                        {
                            item.MaximumTrainingLevel = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    dataFrame.SetPosition(dataFrame.Position + 2);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.MaximumTrainingLevel);
                }
                case 0x44494B50: // PKID
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<AIPackage>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Creature_Registration.PKID_HEADER,
                        masterReferences: masterReferences,
                        item: item.AIPackages,
                        fieldIndex: (int)Creature_FieldIndex.AIPackages,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormKeyBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Animations,
                        fieldIndex: (int)Creature_FieldIndex.Animations,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out String listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                r,
                                errorMask: listErrMask,
                                item: out listSubItem,
                                parseWhole: false);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Animations);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.CreatureType);
                        if (EnumBinaryTranslation<Creature.CreatureTypeEnum>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(1),
                            item: out Creature.CreatureTypeEnum CreatureTypeParse,
                            errorMask: errorMask))
                        {
                            item.CreatureType = CreatureTypeParse;
                        }
                        else
                        {
                            item.CreatureType = default(Creature.CreatureTypeEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.CombatSkill);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte CombatSkillParse,
                            errorMask: errorMask))
                        {
                            item.CombatSkill = CombatSkillParse;
                        }
                        else
                        {
                            item.CombatSkill = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.MagicSkill);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte MagicSkillParse,
                            errorMask: errorMask))
                        {
                            item.MagicSkill = MagicSkillParse;
                        }
                        else
                        {
                            item.MagicSkill = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.StealthSkill);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte StealthSkillParse,
                            errorMask: errorMask))
                        {
                            item.StealthSkill = StealthSkillParse;
                        }
                        else
                        {
                            item.StealthSkill = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.SoulLevel);
                        if (EnumBinaryTranslation<SoulLevel>.Instance.Parse(
                            frame: dataFrame.SpawnWithLength(2),
                            item: out SoulLevel SoulLevelParse,
                            errorMask: errorMask))
                        {
                            item.SoulLevel = SoulLevelParse;
                        }
                        else
                        {
                            item.SoulLevel = default(SoulLevel);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Health);
                        if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt32 HealthParse,
                            errorMask: errorMask))
                        {
                            item.Health = HealthParse;
                        }
                        else
                        {
                            item.Health = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.AttackDamage);
                        if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out UInt16 AttackDamageParse,
                            errorMask: errorMask))
                        {
                            item.AttackDamage = AttackDamageParse;
                        }
                        else
                        {
                            item.AttackDamage = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Strength);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte StrengthParse,
                            errorMask: errorMask))
                        {
                            item.Strength = StrengthParse;
                        }
                        else
                        {
                            item.Strength = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Intelligence);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte IntelligenceParse,
                            errorMask: errorMask))
                        {
                            item.Intelligence = IntelligenceParse;
                        }
                        else
                        {
                            item.Intelligence = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Willpower);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte WillpowerParse,
                            errorMask: errorMask))
                        {
                            item.Willpower = WillpowerParse;
                        }
                        else
                        {
                            item.Willpower = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Agility);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte AgilityParse,
                            errorMask: errorMask))
                        {
                            item.Agility = AgilityParse;
                        }
                        else
                        {
                            item.Agility = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Speed);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte SpeedParse,
                            errorMask: errorMask))
                        {
                            item.Speed = SpeedParse;
                        }
                        else
                        {
                            item.Speed = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Endurance);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte EnduranceParse,
                            errorMask: errorMask))
                        {
                            item.Endurance = EnduranceParse;
                        }
                        else
                        {
                            item.Endurance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Personality);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte PersonalityParse,
                            errorMask: errorMask))
                        {
                            item.Personality = PersonalityParse;
                        }
                        else
                        {
                            item.Personality = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Luck);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            item: out Byte LuckParse,
                            errorMask: errorMask))
                        {
                            item.Luck = LuckParse;
                        }
                        else
                        {
                            item.Luck = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Luck);
                }
                case 0x4D414E52: // RNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.AttackReach);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte AttackReachParse,
                            errorMask: errorMask))
                        {
                            item.AttackReach = AttackReachParse;
                        }
                        else
                        {
                            item.AttackReach = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AttackReach);
                }
                case 0x4D414E5A: // ZNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.CombatStyle_Property,
                        fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.CombatStyle);
                }
                case 0x4D414E54: // TNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.TurningSpeed);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single TurningSpeedParse,
                            errorMask: errorMask))
                        {
                            item.TurningSpeed = TurningSpeedParse;
                        }
                        else
                        {
                            item.TurningSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.TurningSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BaseScale);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single BaseScaleParse,
                            errorMask: errorMask))
                        {
                            item.BaseScale = BaseScaleParse;
                        }
                        else
                        {
                            item.BaseScale = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BaseScale);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.FootWeight);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single FootWeightParse,
                            errorMask: errorMask))
                        {
                            item.FootWeight = FootWeightParse;
                        }
                        else
                        {
                            item.FootWeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.FootWeight);
                }
                case 0x304D414E: // NAM0
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BloodSpray);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String BloodSprayParse,
                            errorMask: errorMask))
                        {
                            item.BloodSpray = BloodSprayParse;
                        }
                        else
                        {
                            item.BloodSpray = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodSpray);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BloodDecal);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String BloodDecalParse,
                            errorMask: errorMask))
                        {
                            item.BloodDecal = BloodDecalParse;
                        }
                        else
                        {
                            item.BloodDecal = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodDecal);
                }
                case 0x52435343: // CSCR
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.InheritsSoundFrom_Property,
                        fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.InheritsSoundFrom);
                }
                case 0x54445343: // CSDT
                case 0x49445343: // CSDI
                case 0x43445343: // CSDC
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<CreatureSound>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: CreatureSound_Registration.TriggeringRecordTypes,
                        item: item.Sounds,
                        fieldIndex: (int)Creature_FieldIndex.Sounds,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out CreatureSound listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<CreatureSound>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Sounds);
                }
                default:
                    return NPCAbstract.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Creature Copy(
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null)
        {
            return Creature.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Creature Copy(
            ICreature item,
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null)
        {
            Creature ret;
            if (item.GetType().Equals(typeof(Creature)))
            {
                ret = new Creature();
            }
            else
            {
                ret = (Creature)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Creature Copy_ToLoqui(
            ICreatureGetter item,
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null)
        {
            Creature ret;
            if (item.GetType().Equals(typeof(Creature)))
            {
                ret = new Creature() as Creature;
            }
            else
            {
                ret = (Creature)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ICreatureGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ICreatureGetter rhs,
            Creature_CopyMask copyMask,
            ICreatureGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ICreatureGetter rhs,
            out Creature_ErrorMask errorMask,
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CreatureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICreatureGetter rhs,
            ErrorMaskBuilder errorMask,
            Creature_CopyMask copyMask = null,
            ICreatureGetter def = null,
            bool doMasks = true)
        {
            CreatureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Creature_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Creature_FieldIndex.Items:
                    this._Items.SetTo((IEnumerable<ItemEntry>)obj);
                    break;
                case Creature_FieldIndex.Spells:
                    this._Spells.SetTo((IEnumerable<FormIDSetLink<SpellAbstract>>)obj);
                    break;
                case Creature_FieldIndex.Models:
                    this._Models.SetTo((IEnumerable<String>)obj);
                    break;
                case Creature_FieldIndex.NIFT:
                    this.NIFT = (Byte[])obj;
                    break;
                case Creature_FieldIndex.Flags:
                    this.Flags = (Creature.CreatureFlag)obj;
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = (UInt16)obj;
                    break;
                case Creature_FieldIndex.Fatigue:
                    this.Fatigue = (UInt16)obj;
                    break;
                case Creature_FieldIndex.BarterGold:
                    this.BarterGold = (UInt16)obj;
                    break;
                case Creature_FieldIndex.LevelOffset:
                    this.LevelOffset = (Int16)obj;
                    break;
                case Creature_FieldIndex.CalcMin:
                    this.CalcMin = (UInt16)obj;
                    break;
                case Creature_FieldIndex.CalcMax:
                    this.CalcMax = (UInt16)obj;
                    break;
                case Creature_FieldIndex.Factions:
                    this._Factions.SetTo((IEnumerable<RankPlacement>)obj);
                    break;
                case Creature_FieldIndex.DeathItem:
                    this.DeathItem_Property.Set((FormIDSetLink<ItemAbstract>)obj);
                    break;
                case Creature_FieldIndex.Script:
                    this.Script_Property.Set((FormIDSetLink<Script>)obj);
                    break;
                case Creature_FieldIndex.Aggression:
                    this.Aggression = (Byte)obj;
                    break;
                case Creature_FieldIndex.Confidence:
                    this.Confidence = (Byte)obj;
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    this.EnergyLevel = (Byte)obj;
                    break;
                case Creature_FieldIndex.Responsibility:
                    this.Responsibility = (Byte)obj;
                    break;
                case Creature_FieldIndex.BuySellServices:
                    this.BuySellServices = (NPC.BuySellServiceFlag)obj;
                    break;
                case Creature_FieldIndex.Teaches:
                    this.Teaches = (Skill)obj;
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = (Byte)obj;
                    break;
                case Creature_FieldIndex.AIPackages:
                    this._AIPackages.SetTo((IEnumerable<FormIDSetLink<AIPackage>>)obj);
                    break;
                case Creature_FieldIndex.Animations:
                    this._Animations.SetTo((IEnumerable<String>)obj);
                    break;
                case Creature_FieldIndex.CreatureType:
                    this.CreatureType = (Creature.CreatureTypeEnum)obj;
                    break;
                case Creature_FieldIndex.CombatSkill:
                    this.CombatSkill = (Byte)obj;
                    break;
                case Creature_FieldIndex.MagicSkill:
                    this.MagicSkill = (Byte)obj;
                    break;
                case Creature_FieldIndex.StealthSkill:
                    this.StealthSkill = (Byte)obj;
                    break;
                case Creature_FieldIndex.SoulLevel:
                    this.SoulLevel = (SoulLevel)obj;
                    break;
                case Creature_FieldIndex.Health:
                    this.Health = (UInt32)obj;
                    break;
                case Creature_FieldIndex.AttackDamage:
                    this.AttackDamage = (UInt16)obj;
                    break;
                case Creature_FieldIndex.Strength:
                    this.Strength = (Byte)obj;
                    break;
                case Creature_FieldIndex.Intelligence:
                    this.Intelligence = (Byte)obj;
                    break;
                case Creature_FieldIndex.Willpower:
                    this.Willpower = (Byte)obj;
                    break;
                case Creature_FieldIndex.Agility:
                    this.Agility = (Byte)obj;
                    break;
                case Creature_FieldIndex.Speed:
                    this.Speed = (Byte)obj;
                    break;
                case Creature_FieldIndex.Endurance:
                    this.Endurance = (Byte)obj;
                    break;
                case Creature_FieldIndex.Personality:
                    this.Personality = (Byte)obj;
                    break;
                case Creature_FieldIndex.Luck:
                    this.Luck = (Byte)obj;
                    break;
                case Creature_FieldIndex.AttackReach:
                    this.AttackReach = (Byte)obj;
                    break;
                case Creature_FieldIndex.CombatStyle:
                    this.CombatStyle_Property.Set((FormIDSetLink<CombatStyle>)obj);
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    this.TurningSpeed = (Single)obj;
                    break;
                case Creature_FieldIndex.BaseScale:
                    this.BaseScale = (Single)obj;
                    break;
                case Creature_FieldIndex.FootWeight:
                    this.FootWeight = (Single)obj;
                    break;
                case Creature_FieldIndex.BloodSpray:
                    this.BloodSpray = (String)obj;
                    break;
                case Creature_FieldIndex.BloodDecal:
                    this.BloodDecal = (String)obj;
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    this.InheritsSoundFrom_Property.Set((FormIDSetLink<Creature>)obj);
                    break;
                case Creature_FieldIndex.Sounds:
                    this._Sounds.SetTo((IEnumerable<CreatureSound>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            CreatureCommon.Clear(this);
        }


        public new static Creature Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Creature();
            foreach (var pair in fields)
            {
                CopyInInternal_Creature(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Creature(Creature obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Creature_FieldIndex enu))
            {
                CopyInInternal_NPCAbstract(obj, pair);
            }
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Creature_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Creature_FieldIndex.Items:
                    obj._Items.SetTo((IEnumerable<ItemEntry>)pair.Value);
                    break;
                case Creature_FieldIndex.Spells:
                    obj._Spells.SetTo((IEnumerable<FormIDSetLink<SpellAbstract>>)pair.Value);
                    break;
                case Creature_FieldIndex.Models:
                    obj._Models.SetTo((IEnumerable<String>)pair.Value);
                    break;
                case Creature_FieldIndex.NIFT:
                    obj.NIFT = (Byte[])pair.Value;
                    break;
                case Creature_FieldIndex.Flags:
                    obj.Flags = (Creature.CreatureFlag)pair.Value;
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    obj.BaseSpellPoints = (UInt16)pair.Value;
                    break;
                case Creature_FieldIndex.Fatigue:
                    obj.Fatigue = (UInt16)pair.Value;
                    break;
                case Creature_FieldIndex.BarterGold:
                    obj.BarterGold = (UInt16)pair.Value;
                    break;
                case Creature_FieldIndex.LevelOffset:
                    obj.LevelOffset = (Int16)pair.Value;
                    break;
                case Creature_FieldIndex.CalcMin:
                    obj.CalcMin = (UInt16)pair.Value;
                    break;
                case Creature_FieldIndex.CalcMax:
                    obj.CalcMax = (UInt16)pair.Value;
                    break;
                case Creature_FieldIndex.Factions:
                    obj._Factions.SetTo((IEnumerable<RankPlacement>)pair.Value);
                    break;
                case Creature_FieldIndex.DeathItem:
                    obj.DeathItem_Property.Set((FormIDSetLink<ItemAbstract>)pair.Value);
                    break;
                case Creature_FieldIndex.Script:
                    obj.Script_Property.Set((FormIDSetLink<Script>)pair.Value);
                    break;
                case Creature_FieldIndex.Aggression:
                    obj.Aggression = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Confidence:
                    obj.Confidence = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    obj.EnergyLevel = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Responsibility:
                    obj.Responsibility = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.BuySellServices:
                    obj.BuySellServices = (NPC.BuySellServiceFlag)pair.Value;
                    break;
                case Creature_FieldIndex.Teaches:
                    obj.Teaches = (Skill)pair.Value;
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    obj.MaximumTrainingLevel = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.AIPackages:
                    obj._AIPackages.SetTo((IEnumerable<FormIDSetLink<AIPackage>>)pair.Value);
                    break;
                case Creature_FieldIndex.Animations:
                    obj._Animations.SetTo((IEnumerable<String>)pair.Value);
                    break;
                case Creature_FieldIndex.CreatureType:
                    obj.CreatureType = (Creature.CreatureTypeEnum)pair.Value;
                    break;
                case Creature_FieldIndex.CombatSkill:
                    obj.CombatSkill = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.MagicSkill:
                    obj.MagicSkill = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.StealthSkill:
                    obj.StealthSkill = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.SoulLevel:
                    obj.SoulLevel = (SoulLevel)pair.Value;
                    break;
                case Creature_FieldIndex.Health:
                    obj.Health = (UInt32)pair.Value;
                    break;
                case Creature_FieldIndex.AttackDamage:
                    obj.AttackDamage = (UInt16)pair.Value;
                    break;
                case Creature_FieldIndex.Strength:
                    obj.Strength = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Intelligence:
                    obj.Intelligence = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Willpower:
                    obj.Willpower = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Agility:
                    obj.Agility = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Speed:
                    obj.Speed = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Endurance:
                    obj.Endurance = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Personality:
                    obj.Personality = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.Luck:
                    obj.Luck = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.AttackReach:
                    obj.AttackReach = (Byte)pair.Value;
                    break;
                case Creature_FieldIndex.CombatStyle:
                    obj.CombatStyle_Property.Set((FormIDSetLink<CombatStyle>)pair.Value);
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    obj.TurningSpeed = (Single)pair.Value;
                    break;
                case Creature_FieldIndex.BaseScale:
                    obj.BaseScale = (Single)pair.Value;
                    break;
                case Creature_FieldIndex.FootWeight:
                    obj.FootWeight = (Single)pair.Value;
                    break;
                case Creature_FieldIndex.BloodSpray:
                    obj.BloodSpray = (String)pair.Value;
                    break;
                case Creature_FieldIndex.BloodDecal:
                    obj.BloodDecal = (String)pair.Value;
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    obj.InheritsSoundFrom_Property.Set((FormIDSetLink<Creature>)pair.Value);
                    break;
                case Creature_FieldIndex.Sounds:
                    obj._Sounds.SetTo((IEnumerable<CreatureSound>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ICreature : ICreatureGetter, INPCAbstract, ILoquiClass<ICreature, ICreatureGetter>, ILoquiClass<Creature, ICreatureGetter>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model item, bool hasBeenSet = true);
        void Model_Unset();

        new ISourceSetList<ItemEntry> Items { get; }
        new ISourceSetList<FormIDSetLink<SpellAbstract>> Spells { get; }
        new ISourceSetList<String> Models { get; }
        new Byte[] NIFT { get; set; }
        new bool NIFT_IsSet { get; set; }
        void NIFT_Set(Byte[] item, bool hasBeenSet = true);
        void NIFT_Unset();

        new Creature.CreatureFlag Flags { get; set; }

        new UInt16 BaseSpellPoints { get; set; }

        new UInt16 Fatigue { get; set; }

        new UInt16 BarterGold { get; set; }

        new Int16 LevelOffset { get; set; }

        new UInt16 CalcMin { get; set; }

        new UInt16 CalcMax { get; set; }

        new ISourceSetList<RankPlacement> Factions { get; }
        new ItemAbstract DeathItem { get; set; }
        new Script Script { get; set; }
        new Byte Aggression { get; set; }

        new Byte Confidence { get; set; }

        new Byte EnergyLevel { get; set; }

        new Byte Responsibility { get; set; }

        new NPC.BuySellServiceFlag BuySellServices { get; set; }

        new Skill Teaches { get; set; }

        new Byte MaximumTrainingLevel { get; set; }

        new ISourceSetList<FormIDSetLink<AIPackage>> AIPackages { get; }
        new ISourceSetList<String> Animations { get; }
        new Creature.CreatureTypeEnum CreatureType { get; set; }

        new Byte CombatSkill { get; set; }

        new Byte MagicSkill { get; set; }

        new Byte StealthSkill { get; set; }

        new SoulLevel SoulLevel { get; set; }

        new UInt32 Health { get; set; }

        new UInt16 AttackDamage { get; set; }

        new Byte Strength { get; set; }

        new Byte Intelligence { get; set; }

        new Byte Willpower { get; set; }

        new Byte Agility { get; set; }

        new Byte Speed { get; set; }

        new Byte Endurance { get; set; }

        new Byte Personality { get; set; }

        new Byte Luck { get; set; }

        new Byte AttackReach { get; set; }
        new bool AttackReach_IsSet { get; set; }
        void AttackReach_Set(Byte item, bool hasBeenSet = true);
        void AttackReach_Unset();

        new CombatStyle CombatStyle { get; set; }
        new Single TurningSpeed { get; set; }
        new bool TurningSpeed_IsSet { get; set; }
        void TurningSpeed_Set(Single item, bool hasBeenSet = true);
        void TurningSpeed_Unset();

        new Single BaseScale { get; set; }
        new bool BaseScale_IsSet { get; set; }
        void BaseScale_Set(Single item, bool hasBeenSet = true);
        void BaseScale_Unset();

        new Single FootWeight { get; set; }
        new bool FootWeight_IsSet { get; set; }
        void FootWeight_Set(Single item, bool hasBeenSet = true);
        void FootWeight_Unset();

        new String BloodSpray { get; set; }
        new bool BloodSpray_IsSet { get; set; }
        void BloodSpray_Set(String item, bool hasBeenSet = true);
        void BloodSpray_Unset();

        new String BloodDecal { get; set; }
        new bool BloodDecal_IsSet { get; set; }
        void BloodDecal_Set(String item, bool hasBeenSet = true);
        void BloodDecal_Unset();

        new Creature InheritsSoundFrom { get; set; }
        new ISourceSetList<CreatureSound> Sounds { get; }
    }

    public partial interface ICreatureGetter : INPCAbstractGetter
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        Model Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Items
        IObservableSetList<ItemEntry> Items { get; }
        #endregion
        #region Spells
        IObservableSetList<FormIDSetLink<SpellAbstract>> Spells { get; }
        #endregion
        #region Models
        IObservableSetList<String> Models { get; }
        #endregion
        #region NIFT
        Byte[] NIFT { get; }
        bool NIFT_IsSet { get; }

        #endregion
        #region Flags
        Creature.CreatureFlag Flags { get; }

        #endregion
        #region BaseSpellPoints
        UInt16 BaseSpellPoints { get; }

        #endregion
        #region Fatigue
        UInt16 Fatigue { get; }

        #endregion
        #region BarterGold
        UInt16 BarterGold { get; }

        #endregion
        #region LevelOffset
        Int16 LevelOffset { get; }

        #endregion
        #region CalcMin
        UInt16 CalcMin { get; }

        #endregion
        #region CalcMax
        UInt16 CalcMax { get; }

        #endregion
        #region Factions
        IObservableSetList<RankPlacement> Factions { get; }
        #endregion
        #region DeathItem
        ItemAbstract DeathItem { get; }
        FormIDSetLink<ItemAbstract> DeathItem_Property { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Aggression
        Byte Aggression { get; }

        #endregion
        #region Confidence
        Byte Confidence { get; }

        #endregion
        #region EnergyLevel
        Byte EnergyLevel { get; }

        #endregion
        #region Responsibility
        Byte Responsibility { get; }

        #endregion
        #region BuySellServices
        NPC.BuySellServiceFlag BuySellServices { get; }

        #endregion
        #region Teaches
        Skill Teaches { get; }

        #endregion
        #region MaximumTrainingLevel
        Byte MaximumTrainingLevel { get; }

        #endregion
        #region AIPackages
        IObservableSetList<FormIDSetLink<AIPackage>> AIPackages { get; }
        #endregion
        #region Animations
        IObservableSetList<String> Animations { get; }
        #endregion
        #region CreatureType
        Creature.CreatureTypeEnum CreatureType { get; }

        #endregion
        #region CombatSkill
        Byte CombatSkill { get; }

        #endregion
        #region MagicSkill
        Byte MagicSkill { get; }

        #endregion
        #region StealthSkill
        Byte StealthSkill { get; }

        #endregion
        #region SoulLevel
        SoulLevel SoulLevel { get; }

        #endregion
        #region Health
        UInt32 Health { get; }

        #endregion
        #region AttackDamage
        UInt16 AttackDamage { get; }

        #endregion
        #region Strength
        Byte Strength { get; }

        #endregion
        #region Intelligence
        Byte Intelligence { get; }

        #endregion
        #region Willpower
        Byte Willpower { get; }

        #endregion
        #region Agility
        Byte Agility { get; }

        #endregion
        #region Speed
        Byte Speed { get; }

        #endregion
        #region Endurance
        Byte Endurance { get; }

        #endregion
        #region Personality
        Byte Personality { get; }

        #endregion
        #region Luck
        Byte Luck { get; }

        #endregion
        #region AttackReach
        Byte AttackReach { get; }
        bool AttackReach_IsSet { get; }

        #endregion
        #region CombatStyle
        CombatStyle CombatStyle { get; }
        FormIDSetLink<CombatStyle> CombatStyle_Property { get; }

        #endregion
        #region TurningSpeed
        Single TurningSpeed { get; }
        bool TurningSpeed_IsSet { get; }

        #endregion
        #region BaseScale
        Single BaseScale { get; }
        bool BaseScale_IsSet { get; }

        #endregion
        #region FootWeight
        Single FootWeight { get; }
        bool FootWeight_IsSet { get; }

        #endregion
        #region BloodSpray
        String BloodSpray { get; }
        bool BloodSpray_IsSet { get; }

        #endregion
        #region BloodDecal
        String BloodDecal { get; }
        bool BloodDecal_IsSet { get; }

        #endregion
        #region InheritsSoundFrom
        Creature InheritsSoundFrom { get; }
        FormIDSetLink<Creature> InheritsSoundFrom_Property { get; }

        #endregion
        #region Sounds
        IObservableSetList<CreatureSound> Sounds { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Creature_FieldIndex
    {
        FormKey = 0,
        Version = 1,
        EditorID = 2,
        RecordType = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Items = 7,
        Spells = 8,
        Models = 9,
        NIFT = 10,
        Flags = 11,
        BaseSpellPoints = 12,
        Fatigue = 13,
        BarterGold = 14,
        LevelOffset = 15,
        CalcMin = 16,
        CalcMax = 17,
        Factions = 18,
        DeathItem = 19,
        Script = 20,
        Aggression = 21,
        Confidence = 22,
        EnergyLevel = 23,
        Responsibility = 24,
        BuySellServices = 25,
        Teaches = 26,
        MaximumTrainingLevel = 27,
        AIPackages = 28,
        Animations = 29,
        CreatureType = 30,
        CombatSkill = 31,
        MagicSkill = 32,
        StealthSkill = 33,
        SoulLevel = 34,
        Health = 35,
        AttackDamage = 36,
        Strength = 37,
        Intelligence = 38,
        Willpower = 39,
        Agility = 40,
        Speed = 41,
        Endurance = 42,
        Personality = 43,
        Luck = 44,
        AttackReach = 45,
        CombatStyle = 46,
        TurningSpeed = 47,
        BaseScale = 48,
        FootWeight = 49,
        BloodSpray = 50,
        BloodDecal = 51,
        InheritsSoundFrom = 52,
        Sounds = 53,
    }
    #endregion

    #region Registration
    public class Creature_Registration : ILoquiRegistration
    {
        public static readonly Creature_Registration Instance = new Creature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 89,
            version: 0);

        public const string GUID = "9859ec12-21c5-4de8-9caa-404330da8b79";

        public const ushort AdditionalFieldCount = 49;

        public const ushort FieldCount = 54;

        public static readonly Type MaskType = typeof(Creature_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Creature_ErrorMask);

        public static readonly Type ClassType = typeof(Creature);

        public static readonly Type GetterType = typeof(ICreatureGetter);

        public static readonly Type SetterType = typeof(ICreature);

        public static readonly Type CommonType = typeof(CreatureCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Creature";

        public const string Name = "Creature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Creature_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Creature_FieldIndex.Model;
                case "ITEMS":
                    return (ushort)Creature_FieldIndex.Items;
                case "SPELLS":
                    return (ushort)Creature_FieldIndex.Spells;
                case "MODELS":
                    return (ushort)Creature_FieldIndex.Models;
                case "NIFT":
                    return (ushort)Creature_FieldIndex.NIFT;
                case "FLAGS":
                    return (ushort)Creature_FieldIndex.Flags;
                case "BASESPELLPOINTS":
                    return (ushort)Creature_FieldIndex.BaseSpellPoints;
                case "FATIGUE":
                    return (ushort)Creature_FieldIndex.Fatigue;
                case "BARTERGOLD":
                    return (ushort)Creature_FieldIndex.BarterGold;
                case "LEVELOFFSET":
                    return (ushort)Creature_FieldIndex.LevelOffset;
                case "CALCMIN":
                    return (ushort)Creature_FieldIndex.CalcMin;
                case "CALCMAX":
                    return (ushort)Creature_FieldIndex.CalcMax;
                case "FACTIONS":
                    return (ushort)Creature_FieldIndex.Factions;
                case "DEATHITEM":
                    return (ushort)Creature_FieldIndex.DeathItem;
                case "SCRIPT":
                    return (ushort)Creature_FieldIndex.Script;
                case "AGGRESSION":
                    return (ushort)Creature_FieldIndex.Aggression;
                case "CONFIDENCE":
                    return (ushort)Creature_FieldIndex.Confidence;
                case "ENERGYLEVEL":
                    return (ushort)Creature_FieldIndex.EnergyLevel;
                case "RESPONSIBILITY":
                    return (ushort)Creature_FieldIndex.Responsibility;
                case "BUYSELLSERVICES":
                    return (ushort)Creature_FieldIndex.BuySellServices;
                case "TEACHES":
                    return (ushort)Creature_FieldIndex.Teaches;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)Creature_FieldIndex.MaximumTrainingLevel;
                case "AIPACKAGES":
                    return (ushort)Creature_FieldIndex.AIPackages;
                case "ANIMATIONS":
                    return (ushort)Creature_FieldIndex.Animations;
                case "CREATURETYPE":
                    return (ushort)Creature_FieldIndex.CreatureType;
                case "COMBATSKILL":
                    return (ushort)Creature_FieldIndex.CombatSkill;
                case "MAGICSKILL":
                    return (ushort)Creature_FieldIndex.MagicSkill;
                case "STEALTHSKILL":
                    return (ushort)Creature_FieldIndex.StealthSkill;
                case "SOULLEVEL":
                    return (ushort)Creature_FieldIndex.SoulLevel;
                case "HEALTH":
                    return (ushort)Creature_FieldIndex.Health;
                case "ATTACKDAMAGE":
                    return (ushort)Creature_FieldIndex.AttackDamage;
                case "STRENGTH":
                    return (ushort)Creature_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)Creature_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)Creature_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)Creature_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)Creature_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)Creature_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)Creature_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)Creature_FieldIndex.Luck;
                case "ATTACKREACH":
                    return (ushort)Creature_FieldIndex.AttackReach;
                case "COMBATSTYLE":
                    return (ushort)Creature_FieldIndex.CombatStyle;
                case "TURNINGSPEED":
                    return (ushort)Creature_FieldIndex.TurningSpeed;
                case "BASESCALE":
                    return (ushort)Creature_FieldIndex.BaseScale;
                case "FOOTWEIGHT":
                    return (ushort)Creature_FieldIndex.FootWeight;
                case "BLOODSPRAY":
                    return (ushort)Creature_FieldIndex.BloodSpray;
                case "BLOODDECAL":
                    return (ushort)Creature_FieldIndex.BloodDecal;
                case "INHERITSSOUNDFROM":
                    return (ushort)Creature_FieldIndex.InheritsSoundFrom;
                case "SOUNDS":
                    return (ushort)Creature_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.Sounds:
                    return true;
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.Sounds:
                    return true;
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    return "Name";
                case Creature_FieldIndex.Model:
                    return "Model";
                case Creature_FieldIndex.Items:
                    return "Items";
                case Creature_FieldIndex.Spells:
                    return "Spells";
                case Creature_FieldIndex.Models:
                    return "Models";
                case Creature_FieldIndex.NIFT:
                    return "NIFT";
                case Creature_FieldIndex.Flags:
                    return "Flags";
                case Creature_FieldIndex.BaseSpellPoints:
                    return "BaseSpellPoints";
                case Creature_FieldIndex.Fatigue:
                    return "Fatigue";
                case Creature_FieldIndex.BarterGold:
                    return "BarterGold";
                case Creature_FieldIndex.LevelOffset:
                    return "LevelOffset";
                case Creature_FieldIndex.CalcMin:
                    return "CalcMin";
                case Creature_FieldIndex.CalcMax:
                    return "CalcMax";
                case Creature_FieldIndex.Factions:
                    return "Factions";
                case Creature_FieldIndex.DeathItem:
                    return "DeathItem";
                case Creature_FieldIndex.Script:
                    return "Script";
                case Creature_FieldIndex.Aggression:
                    return "Aggression";
                case Creature_FieldIndex.Confidence:
                    return "Confidence";
                case Creature_FieldIndex.EnergyLevel:
                    return "EnergyLevel";
                case Creature_FieldIndex.Responsibility:
                    return "Responsibility";
                case Creature_FieldIndex.BuySellServices:
                    return "BuySellServices";
                case Creature_FieldIndex.Teaches:
                    return "Teaches";
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case Creature_FieldIndex.AIPackages:
                    return "AIPackages";
                case Creature_FieldIndex.Animations:
                    return "Animations";
                case Creature_FieldIndex.CreatureType:
                    return "CreatureType";
                case Creature_FieldIndex.CombatSkill:
                    return "CombatSkill";
                case Creature_FieldIndex.MagicSkill:
                    return "MagicSkill";
                case Creature_FieldIndex.StealthSkill:
                    return "StealthSkill";
                case Creature_FieldIndex.SoulLevel:
                    return "SoulLevel";
                case Creature_FieldIndex.Health:
                    return "Health";
                case Creature_FieldIndex.AttackDamage:
                    return "AttackDamage";
                case Creature_FieldIndex.Strength:
                    return "Strength";
                case Creature_FieldIndex.Intelligence:
                    return "Intelligence";
                case Creature_FieldIndex.Willpower:
                    return "Willpower";
                case Creature_FieldIndex.Agility:
                    return "Agility";
                case Creature_FieldIndex.Speed:
                    return "Speed";
                case Creature_FieldIndex.Endurance:
                    return "Endurance";
                case Creature_FieldIndex.Personality:
                    return "Personality";
                case Creature_FieldIndex.Luck:
                    return "Luck";
                case Creature_FieldIndex.AttackReach:
                    return "AttackReach";
                case Creature_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case Creature_FieldIndex.TurningSpeed:
                    return "TurningSpeed";
                case Creature_FieldIndex.BaseScale:
                    return "BaseScale";
                case Creature_FieldIndex.FootWeight:
                    return "FootWeight";
                case Creature_FieldIndex.BloodSpray:
                    return "BloodSpray";
                case Creature_FieldIndex.BloodDecal:
                    return "BloodDecal";
                case Creature_FieldIndex.InheritsSoundFrom:
                    return "InheritsSoundFrom";
                case Creature_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return NPCAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return NPCAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return NPCAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    return typeof(String);
                case Creature_FieldIndex.Model:
                    return typeof(Model);
                case Creature_FieldIndex.Items:
                    return typeof(SourceSetList<ItemEntry>);
                case Creature_FieldIndex.Spells:
                    return typeof(SourceSetList<FormIDSetLink<SpellAbstract>>);
                case Creature_FieldIndex.Models:
                    return typeof(SourceSetList<String>);
                case Creature_FieldIndex.NIFT:
                    return typeof(Byte[]);
                case Creature_FieldIndex.Flags:
                    return typeof(Creature.CreatureFlag);
                case Creature_FieldIndex.BaseSpellPoints:
                    return typeof(UInt16);
                case Creature_FieldIndex.Fatigue:
                    return typeof(UInt16);
                case Creature_FieldIndex.BarterGold:
                    return typeof(UInt16);
                case Creature_FieldIndex.LevelOffset:
                    return typeof(Int16);
                case Creature_FieldIndex.CalcMin:
                    return typeof(UInt16);
                case Creature_FieldIndex.CalcMax:
                    return typeof(UInt16);
                case Creature_FieldIndex.Factions:
                    return typeof(SourceSetList<RankPlacement>);
                case Creature_FieldIndex.DeathItem:
                    return typeof(FormIDSetLink<ItemAbstract>);
                case Creature_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Creature_FieldIndex.Aggression:
                    return typeof(Byte);
                case Creature_FieldIndex.Confidence:
                    return typeof(Byte);
                case Creature_FieldIndex.EnergyLevel:
                    return typeof(Byte);
                case Creature_FieldIndex.Responsibility:
                    return typeof(Byte);
                case Creature_FieldIndex.BuySellServices:
                    return typeof(NPC.BuySellServiceFlag);
                case Creature_FieldIndex.Teaches:
                    return typeof(Skill);
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case Creature_FieldIndex.AIPackages:
                    return typeof(SourceSetList<FormIDSetLink<AIPackage>>);
                case Creature_FieldIndex.Animations:
                    return typeof(SourceSetList<String>);
                case Creature_FieldIndex.CreatureType:
                    return typeof(Creature.CreatureTypeEnum);
                case Creature_FieldIndex.CombatSkill:
                    return typeof(Byte);
                case Creature_FieldIndex.MagicSkill:
                    return typeof(Byte);
                case Creature_FieldIndex.StealthSkill:
                    return typeof(Byte);
                case Creature_FieldIndex.SoulLevel:
                    return typeof(SoulLevel);
                case Creature_FieldIndex.Health:
                    return typeof(UInt32);
                case Creature_FieldIndex.AttackDamage:
                    return typeof(UInt16);
                case Creature_FieldIndex.Strength:
                    return typeof(Byte);
                case Creature_FieldIndex.Intelligence:
                    return typeof(Byte);
                case Creature_FieldIndex.Willpower:
                    return typeof(Byte);
                case Creature_FieldIndex.Agility:
                    return typeof(Byte);
                case Creature_FieldIndex.Speed:
                    return typeof(Byte);
                case Creature_FieldIndex.Endurance:
                    return typeof(Byte);
                case Creature_FieldIndex.Personality:
                    return typeof(Byte);
                case Creature_FieldIndex.Luck:
                    return typeof(Byte);
                case Creature_FieldIndex.AttackReach:
                    return typeof(Byte);
                case Creature_FieldIndex.CombatStyle:
                    return typeof(FormIDSetLink<CombatStyle>);
                case Creature_FieldIndex.TurningSpeed:
                    return typeof(Single);
                case Creature_FieldIndex.BaseScale:
                    return typeof(Single);
                case Creature_FieldIndex.FootWeight:
                    return typeof(Single);
                case Creature_FieldIndex.BloodSpray:
                    return typeof(String);
                case Creature_FieldIndex.BloodDecal:
                    return typeof(String);
                case Creature_FieldIndex.InheritsSoundFrom:
                    return typeof(FormIDSetLink<Creature>);
                case Creature_FieldIndex.Sounds:
                    return typeof(SourceSetList<CreatureSound>);
                default:
                    return NPCAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType NIFZ_HEADER = new RecordType("NIFZ");
        public static readonly RecordType NIFT_HEADER = new RecordType("NIFT");
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType PKID_HEADER = new RecordType("PKID");
        public static readonly RecordType KFFZ_HEADER = new RecordType("KFFZ");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType CSCR_HEADER = new RecordType("CSCR");
        public static readonly RecordType CSDT_HEADER = new RecordType("CSDT");
        public static readonly RecordType CSDI_HEADER = new RecordType("CSDI");
        public static readonly RecordType CSDC_HEADER = new RecordType("CSDC");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CREA_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 20;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CreatureCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICreature item,
            ICreatureGetter rhs,
            ICreatureGetter def,
            ErrorMaskBuilder errorMask,
            Creature_CopyMask copyMask)
        {
            NPCAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Model = rhsModelItem;
                                break;
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            item: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault(
                        rhs: rhs.Items,
                        def: def?.Items,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return ItemEntry.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Spells);
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Models != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Models);
                try
                {
                    item.Models.SetToWithDefault(
                        rhs.Models,
                        def?.Models);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.NIFT ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.NIFT);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.NIFT,
                        rhsHasBeenSet: rhs.NIFT_IsSet,
                        defItem: def?.NIFT ?? default(Byte[]),
                        defHasBeenSet: def?.NIFT_IsSet ?? false,
                        outRhsItem: out var rhsNIFTItem,
                        outDefItem: out var defNIFTItem))
                    {
                        item.NIFT = rhsNIFTItem;
                    }
                    else
                    {
                        item.NIFT_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BaseSpellPoints ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.BaseSpellPoints);
                try
                {
                    item.BaseSpellPoints = rhs.BaseSpellPoints;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fatigue ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Fatigue);
                try
                {
                    item.Fatigue = rhs.Fatigue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BarterGold ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.BarterGold);
                try
                {
                    item.BarterGold = rhs.BarterGold;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LevelOffset ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.LevelOffset);
                try
                {
                    item.LevelOffset = rhs.LevelOffset;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CalcMin ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.CalcMin);
                try
                {
                    item.CalcMin = rhs.CalcMin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CalcMax ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.CalcMax);
                try
                {
                    item.CalcMax = rhs.CalcMax;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Factions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Factions);
                try
                {
                    item.Factions.SetToWithDefault(
                        rhs: rhs.Factions,
                        def: def?.Factions,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Factions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return RankPlacement.Copy(
                                        r,
                                        copyMask?.Factions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Factions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DeathItem ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.DeathItem);
                try
                {
                    item.DeathItem_Property.SetLink(
                        rhs: rhs.DeathItem_Property,
                        def: def?.DeathItem_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetLink(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Aggression ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Aggression);
                try
                {
                    item.Aggression = rhs.Aggression;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Confidence ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Confidence);
                try
                {
                    item.Confidence = rhs.Confidence;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EnergyLevel ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.EnergyLevel);
                try
                {
                    item.EnergyLevel = rhs.EnergyLevel;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Responsibility ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Responsibility);
                try
                {
                    item.Responsibility = rhs.Responsibility;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BuySellServices ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.BuySellServices);
                try
                {
                    item.BuySellServices = rhs.BuySellServices;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Teaches ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Teaches);
                try
                {
                    item.Teaches = rhs.Teaches;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaximumTrainingLevel ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.MaximumTrainingLevel);
                try
                {
                    item.MaximumTrainingLevel = rhs.MaximumTrainingLevel;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AIPackages != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.SetToWithDefault(
                        rhs.AIPackages,
                        def?.AIPackages);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Animations != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Animations);
                try
                {
                    item.Animations.SetToWithDefault(
                        rhs.Animations,
                        def?.Animations);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CreatureType ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.CreatureType);
                try
                {
                    item.CreatureType = rhs.CreatureType;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CombatSkill ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.CombatSkill);
                try
                {
                    item.CombatSkill = rhs.CombatSkill;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MagicSkill ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.MagicSkill);
                try
                {
                    item.MagicSkill = rhs.MagicSkill;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.StealthSkill ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.StealthSkill);
                try
                {
                    item.StealthSkill = rhs.StealthSkill;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SoulLevel ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.SoulLevel);
                try
                {
                    item.SoulLevel = rhs.SoulLevel;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Health ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Health);
                try
                {
                    item.Health = rhs.Health;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AttackDamage ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.AttackDamage);
                try
                {
                    item.AttackDamage = rhs.AttackDamage;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Strength ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Strength);
                try
                {
                    item.Strength = rhs.Strength;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Intelligence ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Intelligence);
                try
                {
                    item.Intelligence = rhs.Intelligence;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Willpower ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Willpower);
                try
                {
                    item.Willpower = rhs.Willpower;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Agility ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Agility);
                try
                {
                    item.Agility = rhs.Agility;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Speed ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Speed);
                try
                {
                    item.Speed = rhs.Speed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Endurance ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Endurance);
                try
                {
                    item.Endurance = rhs.Endurance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Personality ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Personality);
                try
                {
                    item.Personality = rhs.Personality;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Luck ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Luck);
                try
                {
                    item.Luck = rhs.Luck;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AttackReach ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.AttackReach);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.AttackReach,
                        rhsHasBeenSet: rhs.AttackReach_IsSet,
                        defItem: def?.AttackReach ?? default(Byte),
                        defHasBeenSet: def?.AttackReach_IsSet ?? false,
                        outRhsItem: out var rhsAttackReachItem,
                        outDefItem: out var defAttackReachItem))
                    {
                        item.AttackReach = rhsAttackReachItem;
                    }
                    else
                    {
                        item.AttackReach_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CombatStyle ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.CombatStyle);
                try
                {
                    item.CombatStyle_Property.SetLink(
                        rhs: rhs.CombatStyle_Property,
                        def: def?.CombatStyle_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TurningSpeed ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.TurningSpeed);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.TurningSpeed,
                        rhsHasBeenSet: rhs.TurningSpeed_IsSet,
                        defItem: def?.TurningSpeed ?? default(Single),
                        defHasBeenSet: def?.TurningSpeed_IsSet ?? false,
                        outRhsItem: out var rhsTurningSpeedItem,
                        outDefItem: out var defTurningSpeedItem))
                    {
                        item.TurningSpeed = rhsTurningSpeedItem;
                    }
                    else
                    {
                        item.TurningSpeed_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BaseScale ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.BaseScale);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.BaseScale,
                        rhsHasBeenSet: rhs.BaseScale_IsSet,
                        defItem: def?.BaseScale ?? default(Single),
                        defHasBeenSet: def?.BaseScale_IsSet ?? false,
                        outRhsItem: out var rhsBaseScaleItem,
                        outDefItem: out var defBaseScaleItem))
                    {
                        item.BaseScale = rhsBaseScaleItem;
                    }
                    else
                    {
                        item.BaseScale_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FootWeight ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.FootWeight);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FootWeight,
                        rhsHasBeenSet: rhs.FootWeight_IsSet,
                        defItem: def?.FootWeight ?? default(Single),
                        defHasBeenSet: def?.FootWeight_IsSet ?? false,
                        outRhsItem: out var rhsFootWeightItem,
                        outDefItem: out var defFootWeightItem))
                    {
                        item.FootWeight = rhsFootWeightItem;
                    }
                    else
                    {
                        item.FootWeight_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BloodSpray ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.BloodSpray);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.BloodSpray,
                        rhsHasBeenSet: rhs.BloodSpray_IsSet,
                        defItem: def?.BloodSpray ?? default(String),
                        defHasBeenSet: def?.BloodSpray_IsSet ?? false,
                        outRhsItem: out var rhsBloodSprayItem,
                        outDefItem: out var defBloodSprayItem))
                    {
                        item.BloodSpray = rhsBloodSprayItem;
                    }
                    else
                    {
                        item.BloodSpray_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BloodDecal ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.BloodDecal);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.BloodDecal,
                        rhsHasBeenSet: rhs.BloodDecal_IsSet,
                        defItem: def?.BloodDecal ?? default(String),
                        defHasBeenSet: def?.BloodDecal_IsSet ?? false,
                        outRhsItem: out var rhsBloodDecalItem,
                        outDefItem: out var defBloodDecalItem))
                    {
                        item.BloodDecal = rhsBloodDecalItem;
                    }
                    else
                    {
                        item.BloodDecal_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.InheritsSoundFrom ?? true)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.InheritsSoundFrom);
                try
                {
                    item.InheritsSoundFrom_Property.SetLink(
                        rhs: rhs.InheritsSoundFrom_Property,
                        def: def?.InheritsSoundFrom_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetToWithDefault(
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return CreatureSound.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ICreature item)
        {
            item.Name_Unset();
            item.Model_Unset();
            item.Items.Unset();
            item.Spells.Unset();
            item.Models.Unset();
            item.NIFT_Unset();
            item.Flags = default(Creature.CreatureFlag);
            item.BaseSpellPoints = default(UInt16);
            item.Fatigue = default(UInt16);
            item.BarterGold = default(UInt16);
            item.LevelOffset = default(Int16);
            item.CalcMin = default(UInt16);
            item.CalcMax = default(UInt16);
            item.Factions.Unset();
            item.DeathItem_Property.Unset();
            item.Script_Property.Unset();
            item.Aggression = default(Byte);
            item.Confidence = default(Byte);
            item.EnergyLevel = default(Byte);
            item.Responsibility = default(Byte);
            item.BuySellServices = default(NPC.BuySellServiceFlag);
            item.Teaches = default(Skill);
            item.MaximumTrainingLevel = default(Byte);
            item.AIPackages.Unset();
            item.Animations.Unset();
            item.CreatureType = default(Creature.CreatureTypeEnum);
            item.CombatSkill = default(Byte);
            item.MagicSkill = default(Byte);
            item.StealthSkill = default(Byte);
            item.SoulLevel = default(SoulLevel);
            item.Health = default(UInt32);
            item.AttackDamage = default(UInt16);
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
            item.AttackReach_Unset();
            item.CombatStyle_Property.Unset();
            item.TurningSpeed_Unset();
            item.BaseScale_Unset();
            item.FootWeight_Unset();
            item.BloodSpray_Unset();
            item.BloodDecal_Unset();
            item.InheritsSoundFrom_Property.Unset();
            item.Sounds.Unset();
        }

        public static Creature_Mask<bool> GetEqualsMask(
            this ICreatureGetter item,
            ICreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Creature_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ICreatureGetter item,
            ICreatureGetter rhs,
            Creature_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Models = item.Models.CollectionEqualsHelper(
                rhs.Models,
                (l, r) => string.Equals(l, r),
                include);
            ret.NIFT = item.NIFT_IsSet == rhs.NIFT_IsSet && ByteExt.EqualsFast(item.NIFT, rhs.NIFT);
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseSpellPoints = item.BaseSpellPoints == rhs.BaseSpellPoints;
            ret.Fatigue = item.Fatigue == rhs.Fatigue;
            ret.BarterGold = item.BarterGold == rhs.BarterGold;
            ret.LevelOffset = item.LevelOffset == rhs.LevelOffset;
            ret.CalcMin = item.CalcMin == rhs.CalcMin;
            ret.CalcMax = item.CalcMax == rhs.CalcMax;
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = item.DeathItem_Property.FormKey == rhs.DeathItem_Property.FormKey;
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.BuySellServices = item.BuySellServices == rhs.BuySellServices;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            ret.AIPackages = item.AIPackages.CollectionEqualsHelper(
                rhs.AIPackages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => string.Equals(l, r),
                include);
            ret.CreatureType = item.CreatureType == rhs.CreatureType;
            ret.CombatSkill = item.CombatSkill == rhs.CombatSkill;
            ret.MagicSkill = item.MagicSkill == rhs.MagicSkill;
            ret.StealthSkill = item.StealthSkill == rhs.StealthSkill;
            ret.SoulLevel = item.SoulLevel == rhs.SoulLevel;
            ret.Health = item.Health == rhs.Health;
            ret.AttackDamage = item.AttackDamage == rhs.AttackDamage;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
            ret.AttackReach = item.AttackReach_IsSet == rhs.AttackReach_IsSet && item.AttackReach == rhs.AttackReach;
            ret.CombatStyle = item.CombatStyle_Property.FormKey == rhs.CombatStyle_Property.FormKey;
            ret.TurningSpeed = item.TurningSpeed_IsSet == rhs.TurningSpeed_IsSet && item.TurningSpeed.EqualsWithin(rhs.TurningSpeed);
            ret.BaseScale = item.BaseScale_IsSet == rhs.BaseScale_IsSet && item.BaseScale.EqualsWithin(rhs.BaseScale);
            ret.FootWeight = item.FootWeight_IsSet == rhs.FootWeight_IsSet && item.FootWeight.EqualsWithin(rhs.FootWeight);
            ret.BloodSpray = item.BloodSpray_IsSet == rhs.BloodSpray_IsSet && string.Equals(item.BloodSpray, rhs.BloodSpray);
            ret.BloodDecal = item.BloodDecal_IsSet == rhs.BloodDecal_IsSet && string.Equals(item.BloodDecal, rhs.BloodDecal);
            ret.InheritsSoundFrom = item.InheritsSoundFrom_Property.FormKey == rhs.InheritsSoundFrom_Property.FormKey;
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            NPCAbstractCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ICreatureGetter item,
            string name = null,
            Creature_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICreatureGetter item,
            FileGeneration fg,
            string name = null,
            Creature_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Creature)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Creature)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Spells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Models?.Overall ?? true)
                {
                    fg.AppendLine("Models =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Models)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.NIFT ?? true)
                {
                    fg.AppendLine($"NIFT => {item.NIFT}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.BaseSpellPoints ?? true)
                {
                    fg.AppendLine($"BaseSpellPoints => {item.BaseSpellPoints}");
                }
                if (printMask?.Fatigue ?? true)
                {
                    fg.AppendLine($"Fatigue => {item.Fatigue}");
                }
                if (printMask?.BarterGold ?? true)
                {
                    fg.AppendLine($"BarterGold => {item.BarterGold}");
                }
                if (printMask?.LevelOffset ?? true)
                {
                    fg.AppendLine($"LevelOffset => {item.LevelOffset}");
                }
                if (printMask?.CalcMin ?? true)
                {
                    fg.AppendLine($"CalcMin => {item.CalcMin}");
                }
                if (printMask?.CalcMax ?? true)
                {
                    fg.AppendLine($"CalcMax => {item.CalcMax}");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Factions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DeathItem ?? true)
                {
                    fg.AppendLine($"DeathItem => {item.DeathItem_Property}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Aggression ?? true)
                {
                    fg.AppendLine($"Aggression => {item.Aggression}");
                }
                if (printMask?.Confidence ?? true)
                {
                    fg.AppendLine($"Confidence => {item.Confidence}");
                }
                if (printMask?.EnergyLevel ?? true)
                {
                    fg.AppendLine($"EnergyLevel => {item.EnergyLevel}");
                }
                if (printMask?.Responsibility ?? true)
                {
                    fg.AppendLine($"Responsibility => {item.Responsibility}");
                }
                if (printMask?.BuySellServices ?? true)
                {
                    fg.AppendLine($"BuySellServices => {item.BuySellServices}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {item.Teaches}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {item.MaximumTrainingLevel}");
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.AIPackages)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Animations?.Overall ?? true)
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Animations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.CreatureType ?? true)
                {
                    fg.AppendLine($"CreatureType => {item.CreatureType}");
                }
                if (printMask?.CombatSkill ?? true)
                {
                    fg.AppendLine($"CombatSkill => {item.CombatSkill}");
                }
                if (printMask?.MagicSkill ?? true)
                {
                    fg.AppendLine($"MagicSkill => {item.MagicSkill}");
                }
                if (printMask?.StealthSkill ?? true)
                {
                    fg.AppendLine($"StealthSkill => {item.StealthSkill}");
                }
                if (printMask?.SoulLevel ?? true)
                {
                    fg.AppendLine($"SoulLevel => {item.SoulLevel}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.AttackDamage ?? true)
                {
                    fg.AppendLine($"AttackDamage => {item.AttackDamage}");
                }
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {item.Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {item.Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {item.Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {item.Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {item.Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {item.Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {item.Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {item.Luck}");
                }
                if (printMask?.AttackReach ?? true)
                {
                    fg.AppendLine($"AttackReach => {item.AttackReach}");
                }
                if (printMask?.CombatStyle ?? true)
                {
                    fg.AppendLine($"CombatStyle => {item.CombatStyle_Property}");
                }
                if (printMask?.TurningSpeed ?? true)
                {
                    fg.AppendLine($"TurningSpeed => {item.TurningSpeed}");
                }
                if (printMask?.BaseScale ?? true)
                {
                    fg.AppendLine($"BaseScale => {item.BaseScale}");
                }
                if (printMask?.FootWeight ?? true)
                {
                    fg.AppendLine($"FootWeight => {item.FootWeight}");
                }
                if (printMask?.BloodSpray ?? true)
                {
                    fg.AppendLine($"BloodSpray => {item.BloodSpray}");
                }
                if (printMask?.BloodDecal ?? true)
                {
                    fg.AppendLine($"BloodDecal => {item.BloodDecal}");
                }
                if (printMask?.InheritsSoundFrom ?? true)
                {
                    fg.AppendLine($"InheritsSoundFrom => {item.InheritsSoundFrom_Property}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Sounds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICreatureGetter item,
            Creature_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Models.Overall.HasValue && checkMask.Models.Overall.Value != item.Models.HasBeenSet) return false;
            if (checkMask.NIFT.HasValue && checkMask.NIFT.Value != item.NIFT_IsSet) return false;
            if (checkMask.Factions.Overall.HasValue && checkMask.Factions.Overall.Value != item.Factions.HasBeenSet) return false;
            if (checkMask.DeathItem.HasValue && checkMask.DeathItem.Value != item.DeathItem_Property.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.AIPackages.Overall.HasValue && checkMask.AIPackages.Overall.Value != item.AIPackages.HasBeenSet) return false;
            if (checkMask.Animations.Overall.HasValue && checkMask.Animations.Overall.Value != item.Animations.HasBeenSet) return false;
            if (checkMask.AttackReach.HasValue && checkMask.AttackReach.Value != item.AttackReach_IsSet) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != item.CombatStyle_Property.HasBeenSet) return false;
            if (checkMask.TurningSpeed.HasValue && checkMask.TurningSpeed.Value != item.TurningSpeed_IsSet) return false;
            if (checkMask.BaseScale.HasValue && checkMask.BaseScale.Value != item.BaseScale_IsSet) return false;
            if (checkMask.FootWeight.HasValue && checkMask.FootWeight.Value != item.FootWeight_IsSet) return false;
            if (checkMask.BloodSpray.HasValue && checkMask.BloodSpray.Value != item.BloodSpray_IsSet) return false;
            if (checkMask.BloodDecal.HasValue && checkMask.BloodDecal.Value != item.BloodDecal_IsSet) return false;
            if (checkMask.InheritsSoundFrom.HasValue && checkMask.InheritsSoundFrom.Value != item.InheritsSoundFrom_Property.HasBeenSet) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds.HasBeenSet) return false;
            return true;
        }

        public static Creature_Mask<bool> GetHasBeenSetMask(ICreatureGetter item)
        {
            var ret = new Creature_Mask<bool>();
            ret.Name = item.Name_IsSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ItemEntry_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.WithIndex().Select((i) => new MaskItemIndexed<bool, ItemEntry_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            ret.Spells = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Spells.HasBeenSet, null);
            ret.Models = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Models.HasBeenSet, null);
            ret.NIFT = item.NIFT_IsSet;
            ret.Flags = true;
            ret.BaseSpellPoints = true;
            ret.Fatigue = true;
            ret.BarterGold = true;
            ret.LevelOffset = true;
            ret.CalcMin = true;
            ret.CalcMax = true;
            ret.Factions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RankPlacement_Mask<bool>>>>(item.Factions.HasBeenSet, item.Factions.WithIndex().Select((i) => new MaskItemIndexed<bool, RankPlacement_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            ret.DeathItem = item.DeathItem_Property.HasBeenSet;
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Aggression = true;
            ret.Confidence = true;
            ret.EnergyLevel = true;
            ret.Responsibility = true;
            ret.BuySellServices = true;
            ret.Teaches = true;
            ret.MaximumTrainingLevel = true;
            ret.AIPackages = new MaskItem<bool, IEnumerable<(int, bool)>>(item.AIPackages.HasBeenSet, null);
            ret.Animations = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Animations.HasBeenSet, null);
            ret.CreatureType = true;
            ret.CombatSkill = true;
            ret.MagicSkill = true;
            ret.StealthSkill = true;
            ret.SoulLevel = true;
            ret.Health = true;
            ret.AttackDamage = true;
            ret.Strength = true;
            ret.Intelligence = true;
            ret.Willpower = true;
            ret.Agility = true;
            ret.Speed = true;
            ret.Endurance = true;
            ret.Personality = true;
            ret.Luck = true;
            ret.AttackReach = item.AttackReach_IsSet;
            ret.CombatStyle = item.CombatStyle_Property.HasBeenSet;
            ret.TurningSpeed = item.TurningSpeed_IsSet;
            ret.BaseScale = item.BaseScale_IsSet;
            ret.FootWeight = item.FootWeight_IsSet;
            ret.BloodSpray = item.BloodSpray_IsSet;
            ret.BloodDecal = item.BloodDecal_IsSet;
            ret.InheritsSoundFrom = item.InheritsSoundFrom_Property.HasBeenSet;
            ret.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, CreatureSound_Mask<bool>>>>(item.Sounds.HasBeenSet, item.Sounds.WithIndex().Select((i) => new MaskItemIndexed<bool, CreatureSound_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        public static Creature_FieldIndex? ConvertFieldIndex(NPCAbstract_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Creature_FieldIndex ConvertFieldIndex(NPCAbstract_FieldIndex index)
        {
            switch (index)
            {
                case NPCAbstract_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.RecordType:
                    return (Creature_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Creature_FieldIndex? ConvertFieldIndex(NPCSpawn_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Creature_FieldIndex ConvertFieldIndex(NPCSpawn_FieldIndex index)
        {
            switch (index)
            {
                case NPCSpawn_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.RecordType:
                    return (Creature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Creature_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Creature_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.RecordType:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Creature_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Creature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Creature item,
            bool doMasks,
            out Creature_ErrorMask errorMask,
            Creature_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Creature item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Creature");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Creature");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this Creature item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            NPCAbstractCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Creature_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Model) ?? true))
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: node,
                    item: item.Model,
                    name: nameof(item.Model),
                    fieldIndex: (int)Creature_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Model));
            }
            if (item.Items.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<ItemEntry>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)Creature_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Items),
                    transl: (XElement subNode, ItemEntry subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<ItemEntry>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Spells.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<FormIDSetLink<SpellAbstract>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Creature_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Spells),
                    transl: (XElement subNode, FormIDSetLink<SpellAbstract> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Models.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Models) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Models),
                    item: item.Models,
                    fieldIndex: (int)Creature_FieldIndex.Models,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Models),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.NIFT_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.NIFT) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NIFT),
                    item: item.NIFT,
                    fieldIndex: (int)Creature_FieldIndex.NIFT,
                    errorMask: errorMask);
            }
            if (item.ACBSDataTypeState.HasFlag(Creature.ACBSDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Creature.CreatureFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Creature_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseSpellPoints) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BaseSpellPoints),
                        item: item.BaseSpellPoints,
                        fieldIndex: (int)Creature_FieldIndex.BaseSpellPoints,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Fatigue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fatigue),
                        item: item.Fatigue,
                        fieldIndex: (int)Creature_FieldIndex.Fatigue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BarterGold) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BarterGold),
                        item: item.BarterGold,
                        fieldIndex: (int)Creature_FieldIndex.BarterGold,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.LevelOffset) ?? true))
                {
                    Int16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LevelOffset),
                        item: item.LevelOffset,
                        fieldIndex: (int)Creature_FieldIndex.LevelOffset,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CalcMin) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CalcMin),
                        item: item.CalcMin,
                        fieldIndex: (int)Creature_FieldIndex.CalcMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CalcMax) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CalcMax),
                        item: item.CalcMax,
                        fieldIndex: (int)Creature_FieldIndex.CalcMax,
                        errorMask: errorMask);
                }
            }
            if (item.Factions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Factions) ?? true))
            {
                ListXmlTranslation<RankPlacement>.Instance.Write(
                    node: node,
                    name: nameof(item.Factions),
                    item: item.Factions,
                    fieldIndex: (int)Creature_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Factions),
                    transl: (XElement subNode, RankPlacement subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<RankPlacement>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.DeathItem_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.DeathItem) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeathItem),
                    item: item.DeathItem_Property?.FormKey,
                    fieldIndex: (int)Creature_FieldIndex.DeathItem,
                    errorMask: errorMask);
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)Creature_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.AIDTDataTypeState.HasFlag(Creature.AIDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Aggression) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Aggression),
                        item: item.Aggression,
                        fieldIndex: (int)Creature_FieldIndex.Aggression,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Confidence) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Confidence),
                        item: item.Confidence,
                        fieldIndex: (int)Creature_FieldIndex.Confidence,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.EnergyLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EnergyLevel),
                        item: item.EnergyLevel,
                        fieldIndex: (int)Creature_FieldIndex.EnergyLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Responsibility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Responsibility),
                        item: item.Responsibility,
                        fieldIndex: (int)Creature_FieldIndex.Responsibility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BuySellServices) ?? true))
                {
                    EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.BuySellServices),
                        item: item.BuySellServices,
                        fieldIndex: (int)Creature_FieldIndex.BuySellServices,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Teaches) ?? true))
                {
                    EnumXmlTranslation<Skill>.Instance.Write(
                        node: node,
                        name: nameof(item.Teaches),
                        item: item.Teaches,
                        fieldIndex: (int)Creature_FieldIndex.Teaches,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.MaximumTrainingLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaximumTrainingLevel),
                        item: item.MaximumTrainingLevel,
                        fieldIndex: (int)Creature_FieldIndex.MaximumTrainingLevel,
                        errorMask: errorMask);
                }
            }
            if (item.AIPackages.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AIPackages) ?? true))
            {
                ListXmlTranslation<FormIDSetLink<AIPackage>>.Instance.Write(
                    node: node,
                    name: nameof(item.AIPackages),
                    item: item.AIPackages,
                    fieldIndex: (int)Creature_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.AIPackages),
                    transl: (XElement subNode, FormIDSetLink<AIPackage> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Animations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Animations) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Animations),
                    item: item.Animations,
                    fieldIndex: (int)Creature_FieldIndex.Animations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Animations),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.DATADataTypeState.HasFlag(Creature.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CreatureType) ?? true))
                {
                    EnumXmlTranslation<Creature.CreatureTypeEnum>.Instance.Write(
                        node: node,
                        name: nameof(item.CreatureType),
                        item: item.CreatureType,
                        fieldIndex: (int)Creature_FieldIndex.CreatureType,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatSkill) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CombatSkill),
                        item: item.CombatSkill,
                        fieldIndex: (int)Creature_FieldIndex.CombatSkill,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.MagicSkill) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MagicSkill),
                        item: item.MagicSkill,
                        fieldIndex: (int)Creature_FieldIndex.MagicSkill,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.StealthSkill) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.StealthSkill),
                        item: item.StealthSkill,
                        fieldIndex: (int)Creature_FieldIndex.StealthSkill,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.SoulLevel) ?? true))
                {
                    EnumXmlTranslation<SoulLevel>.Instance.Write(
                        node: node,
                        name: nameof(item.SoulLevel),
                        item: item.SoulLevel,
                        fieldIndex: (int)Creature_FieldIndex.SoulLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Health) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Health),
                        item: item.Health,
                        fieldIndex: (int)Creature_FieldIndex.Health,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackDamage) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.AttackDamage),
                        item: item.AttackDamage,
                        fieldIndex: (int)Creature_FieldIndex.AttackDamage,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Strength) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Strength),
                        item: item.Strength,
                        fieldIndex: (int)Creature_FieldIndex.Strength,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Intelligence) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Intelligence),
                        item: item.Intelligence,
                        fieldIndex: (int)Creature_FieldIndex.Intelligence,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Willpower) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Willpower),
                        item: item.Willpower,
                        fieldIndex: (int)Creature_FieldIndex.Willpower,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Agility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Agility),
                        item: item.Agility,
                        fieldIndex: (int)Creature_FieldIndex.Agility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Speed) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Speed),
                        item: item.Speed,
                        fieldIndex: (int)Creature_FieldIndex.Speed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Endurance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Endurance),
                        item: item.Endurance,
                        fieldIndex: (int)Creature_FieldIndex.Endurance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Personality) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Personality),
                        item: item.Personality,
                        fieldIndex: (int)Creature_FieldIndex.Personality,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Luck) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Luck),
                        item: item.Luck,
                        fieldIndex: (int)Creature_FieldIndex.Luck,
                        errorMask: errorMask);
                }
            }
            if (item.AttackReach_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackReach) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackReach),
                    item: item.AttackReach,
                    fieldIndex: (int)Creature_FieldIndex.AttackReach,
                    errorMask: errorMask);
            }
            if (item.CombatStyle_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatStyle) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CombatStyle),
                    item: item.CombatStyle_Property?.FormKey,
                    fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                    errorMask: errorMask);
            }
            if (item.TurningSpeed_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.TurningSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TurningSpeed),
                    item: item.TurningSpeed,
                    fieldIndex: (int)Creature_FieldIndex.TurningSpeed,
                    errorMask: errorMask);
            }
            if (item.BaseScale_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseScale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseScale),
                    item: item.BaseScale,
                    fieldIndex: (int)Creature_FieldIndex.BaseScale,
                    errorMask: errorMask);
            }
            if (item.FootWeight_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.FootWeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FootWeight),
                    item: item.FootWeight,
                    fieldIndex: (int)Creature_FieldIndex.FootWeight,
                    errorMask: errorMask);
            }
            if (item.BloodSpray_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodSpray) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BloodSpray),
                    item: item.BloodSpray,
                    fieldIndex: (int)Creature_FieldIndex.BloodSpray,
                    errorMask: errorMask);
            }
            if (item.BloodDecal_IsSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodDecal) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BloodDecal),
                    item: item.BloodDecal,
                    fieldIndex: (int)Creature_FieldIndex.BloodDecal,
                    errorMask: errorMask);
            }
            if (item.InheritsSoundFrom_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.InheritsSoundFrom) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.InheritsSoundFrom),
                    item: item.InheritsSoundFrom_Property?.FormKey,
                    fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                    errorMask: errorMask);
            }
            if (item.Sounds.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<CreatureSound>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)Creature_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Sounds),
                    transl: (XElement subNode, CreatureSound subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<CreatureSound>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this Creature item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CreatureCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Creature item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Items);
                        if (ListXmlTranslation<ItemEntry>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ItemEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Spells);
                        if (ListXmlTranslation<FormIDSetLink<SpellAbstract>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Models":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Models);
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var ModelsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Models.SetTo(ModelsItem);
                        }
                        else
                        {
                            item.Models.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NIFT":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.NIFT);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] NIFTParse,
                            errorMask: errorMask))
                        {
                            item.NIFT = NIFTParse;
                        }
                        else
                        {
                            item.NIFT = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Flags);
                        if (EnumXmlTranslation<Creature.CreatureFlag>.Instance.Parse(
                            node: node,
                            item: out Creature.CreatureFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Creature.CreatureFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.ACBSDataTypeState |= Creature.ACBSDataType.Has;
                    break;
                case "BaseSpellPoints":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BaseSpellPoints);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 BaseSpellPointsParse,
                            errorMask: errorMask))
                        {
                            item.BaseSpellPoints = BaseSpellPointsParse;
                        }
                        else
                        {
                            item.BaseSpellPoints = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fatigue":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Fatigue);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 FatigueParse,
                            errorMask: errorMask))
                        {
                            item.Fatigue = FatigueParse;
                        }
                        else
                        {
                            item.Fatigue = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BarterGold":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BarterGold);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 BarterGoldParse,
                            errorMask: errorMask))
                        {
                            item.BarterGold = BarterGoldParse;
                        }
                        else
                        {
                            item.BarterGold = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LevelOffset":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.LevelOffset);
                        if (Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int16 LevelOffsetParse,
                            errorMask: errorMask))
                        {
                            item.LevelOffset = LevelOffsetParse;
                        }
                        else
                        {
                            item.LevelOffset = default(Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMin":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.CalcMin);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 CalcMinParse,
                            errorMask: errorMask))
                        {
                            item.CalcMin = CalcMinParse;
                        }
                        else
                        {
                            item.CalcMin = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMax":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.CalcMax);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 CalcMaxParse,
                            errorMask: errorMask))
                        {
                            item.CalcMax = CalcMaxParse;
                        }
                        else
                        {
                            item.CalcMax = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Factions);
                        if (ListXmlTranslation<RankPlacement>.Instance.Parse(
                            node: node,
                            enumer: out var FactionsItem,
                            transl: LoquiXmlTranslation<RankPlacement>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Factions.SetTo(FactionsItem);
                        }
                        else
                        {
                            item.Factions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeathItem":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.DeathItem_Property,
                        fieldIndex: (int)Creature_FieldIndex.DeathItem,
                        errorMask: errorMask);
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)Creature_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Aggression":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Aggression);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AggressionParse,
                            errorMask: errorMask))
                        {
                            item.Aggression = AggressionParse;
                        }
                        else
                        {
                            item.Aggression = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.AIDTDataTypeState |= Creature.AIDTDataType.Has;
                    break;
                case "Confidence":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Confidence);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ConfidenceParse,
                            errorMask: errorMask))
                        {
                            item.Confidence = ConfidenceParse;
                        }
                        else
                        {
                            item.Confidence = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnergyLevel":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.EnergyLevel);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte EnergyLevelParse,
                            errorMask: errorMask))
                        {
                            item.EnergyLevel = EnergyLevelParse;
                        }
                        else
                        {
                            item.EnergyLevel = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responsibility":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Responsibility);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ResponsibilityParse,
                            errorMask: errorMask))
                        {
                            item.Responsibility = ResponsibilityParse;
                        }
                        else
                        {
                            item.Responsibility = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BuySellServices":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BuySellServices);
                        if (EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Parse(
                            node: node,
                            item: out NPC.BuySellServiceFlag BuySellServicesParse,
                            errorMask: errorMask))
                        {
                            item.BuySellServices = BuySellServicesParse;
                        }
                        else
                        {
                            item.BuySellServices = default(NPC.BuySellServiceFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Teaches":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Teaches);
                        if (EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            item: out Skill TeachesParse,
                            errorMask: errorMask))
                        {
                            item.Teaches = TeachesParse;
                        }
                        else
                        {
                            item.Teaches = default(Skill);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumTrainingLevel":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.MaximumTrainingLevel);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MaximumTrainingLevelParse,
                            errorMask: errorMask))
                        {
                            item.MaximumTrainingLevel = MaximumTrainingLevelParse;
                        }
                        else
                        {
                            item.MaximumTrainingLevel = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIPackages":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.AIPackages);
                        if (ListXmlTranslation<FormIDSetLink<AIPackage>>.Instance.Parse(
                            node: node,
                            enumer: out var AIPackagesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.AIPackages.SetTo(AIPackagesItem);
                        }
                        else
                        {
                            item.AIPackages.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Animations":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Animations);
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var AnimationsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Animations.SetTo(AnimationsItem);
                        }
                        else
                        {
                            item.Animations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CreatureType":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.CreatureType);
                        if (EnumXmlTranslation<Creature.CreatureTypeEnum>.Instance.Parse(
                            node: node,
                            item: out Creature.CreatureTypeEnum CreatureTypeParse,
                            errorMask: errorMask))
                        {
                            item.CreatureType = CreatureTypeParse;
                        }
                        else
                        {
                            item.CreatureType = default(Creature.CreatureTypeEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Creature.DATADataType.Has;
                    break;
                case "CombatSkill":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.CombatSkill);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte CombatSkillParse,
                            errorMask: errorMask))
                        {
                            item.CombatSkill = CombatSkillParse;
                        }
                        else
                        {
                            item.CombatSkill = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicSkill":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.MagicSkill);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MagicSkillParse,
                            errorMask: errorMask))
                        {
                            item.MagicSkill = MagicSkillParse;
                        }
                        else
                        {
                            item.MagicSkill = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StealthSkill":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.StealthSkill);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte StealthSkillParse,
                            errorMask: errorMask))
                        {
                            item.StealthSkill = StealthSkillParse;
                        }
                        else
                        {
                            item.StealthSkill = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoulLevel":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.SoulLevel);
                        if (EnumXmlTranslation<SoulLevel>.Instance.Parse(
                            node: node,
                            item: out SoulLevel SoulLevelParse,
                            errorMask: errorMask))
                        {
                            item.SoulLevel = SoulLevelParse;
                        }
                        else
                        {
                            item.SoulLevel = default(SoulLevel);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Health);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 HealthParse,
                            errorMask: errorMask))
                        {
                            item.Health = HealthParse;
                        }
                        else
                        {
                            item.Health = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackDamage":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.AttackDamage);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 AttackDamageParse,
                            errorMask: errorMask))
                        {
                            item.AttackDamage = AttackDamageParse;
                        }
                        else
                        {
                            item.AttackDamage = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Strength":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Strength);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte StrengthParse,
                            errorMask: errorMask))
                        {
                            item.Strength = StrengthParse;
                        }
                        else
                        {
                            item.Strength = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Intelligence":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Intelligence);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte IntelligenceParse,
                            errorMask: errorMask))
                        {
                            item.Intelligence = IntelligenceParse;
                        }
                        else
                        {
                            item.Intelligence = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Willpower":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Willpower);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte WillpowerParse,
                            errorMask: errorMask))
                        {
                            item.Willpower = WillpowerParse;
                        }
                        else
                        {
                            item.Willpower = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Agility":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Agility);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AgilityParse,
                            errorMask: errorMask))
                        {
                            item.Agility = AgilityParse;
                        }
                        else
                        {
                            item.Agility = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Speed);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SpeedParse,
                            errorMask: errorMask))
                        {
                            item.Speed = SpeedParse;
                        }
                        else
                        {
                            item.Speed = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Endurance":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Endurance);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte EnduranceParse,
                            errorMask: errorMask))
                        {
                            item.Endurance = EnduranceParse;
                        }
                        else
                        {
                            item.Endurance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Personality":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Personality);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte PersonalityParse,
                            errorMask: errorMask))
                        {
                            item.Personality = PersonalityParse;
                        }
                        else
                        {
                            item.Personality = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Luck":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Luck);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte LuckParse,
                            errorMask: errorMask))
                        {
                            item.Luck = LuckParse;
                        }
                        else
                        {
                            item.Luck = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackReach":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.AttackReach);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AttackReachParse,
                            errorMask: errorMask))
                        {
                            item.AttackReach = AttackReachParse;
                        }
                        else
                        {
                            item.AttackReach = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyle":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.CombatStyle_Property,
                        fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                        errorMask: errorMask);
                    break;
                case "TurningSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.TurningSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single TurningSpeedParse,
                            errorMask: errorMask))
                        {
                            item.TurningSpeed = TurningSpeedParse;
                        }
                        else
                        {
                            item.TurningSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseScale":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BaseScale);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single BaseScaleParse,
                            errorMask: errorMask))
                        {
                            item.BaseScale = BaseScaleParse;
                        }
                        else
                        {
                            item.BaseScale = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FootWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.FootWeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FootWeightParse,
                            errorMask: errorMask))
                        {
                            item.FootWeight = FootWeightParse;
                        }
                        else
                        {
                            item.FootWeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BloodSpray":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BloodSpray);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String BloodSprayParse,
                            errorMask: errorMask))
                        {
                            item.BloodSpray = BloodSprayParse;
                        }
                        else
                        {
                            item.BloodSpray = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BloodDecal":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.BloodDecal);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String BloodDecalParse,
                            errorMask: errorMask))
                        {
                            item.BloodDecal = BloodDecalParse;
                        }
                        else
                        {
                            item.BloodDecal = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InheritsSoundFrom":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.InheritsSoundFrom_Property,
                        fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                        errorMask: errorMask);
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)Creature_FieldIndex.Sounds);
                        if (ListXmlTranslation<CreatureSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<CreatureSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    NPCAbstractCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Creature item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Creature_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Creature_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Creature item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Creature_Registration.CREA_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Creature item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)Creature_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                LoquiBinaryTranslation<Model>.Instance.Write(
                    writer: writer,
                    item: item.Model,
                    fieldIndex: (int)Creature_FieldIndex.Model,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.Items.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.Write(
                    writer: writer,
                    items: item.Items,
                    fieldIndex: (int)Creature_FieldIndex.Items,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, ItemEntry subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<ItemEntry>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.Spells.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<SpellAbstract>>.Instance.Write(
                    writer: writer,
                    items: item.Spells,
                    fieldIndex: (int)Creature_FieldIndex.Spells,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, FormIDSetLink<SpellAbstract> subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            header: recordTypeConverter.ConvertToCustom(Creature_Registration.SPLO_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.Models.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                    writer: writer,
                    items: item.Models,
                    fieldIndex: (int)Creature_FieldIndex.Models,
                    recordType: Creature_Registration.NIFZ_HEADER,
                    errorMask: errorMask,
                    transl: StringBinaryTranslation.Instance.Write);
            }
            if (item.NIFT_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.NIFT,
                    fieldIndex: (int)Creature_FieldIndex.NIFT,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.NIFT_HEADER),
                    nullable: false);
            }
            if (item.ACBSDataTypeState.HasFlag(Creature.ACBSDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Creature_Registration.ACBS_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4,
                        fieldIndex: (int)Creature_FieldIndex.Flags,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BaseSpellPoints,
                        fieldIndex: (int)Creature_FieldIndex.BaseSpellPoints,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fatigue,
                        fieldIndex: (int)Creature_FieldIndex.Fatigue,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BarterGold,
                        fieldIndex: (int)Creature_FieldIndex.BarterGold,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LevelOffset,
                        fieldIndex: (int)Creature_FieldIndex.LevelOffset,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.CalcMin,
                        fieldIndex: (int)Creature_FieldIndex.CalcMin,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.CalcMax,
                        fieldIndex: (int)Creature_FieldIndex.CalcMax,
                        errorMask: errorMask);
                }
            }
            if (item.Factions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.Write(
                    writer: writer,
                    items: item.Factions,
                    fieldIndex: (int)Creature_FieldIndex.Factions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, RankPlacement subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<RankPlacement>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.DeathItem_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DeathItem_Property,
                    fieldIndex: (int)Creature_FieldIndex.DeathItem,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.INAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    fieldIndex: (int)Creature_FieldIndex.Script,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.AIDTDataTypeState.HasFlag(Creature.AIDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Creature_Registration.AIDT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Aggression,
                        fieldIndex: (int)Creature_FieldIndex.Aggression,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Confidence,
                        fieldIndex: (int)Creature_FieldIndex.Confidence,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EnergyLevel,
                        fieldIndex: (int)Creature_FieldIndex.EnergyLevel,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Responsibility,
                        fieldIndex: (int)Creature_FieldIndex.Responsibility,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        writer,
                        item.BuySellServices,
                        length: 4,
                        fieldIndex: (int)Creature_FieldIndex.BuySellServices,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                        writer,
                        item.Teaches,
                        length: 1,
                        fieldIndex: (int)Creature_FieldIndex.Teaches,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MaximumTrainingLevel,
                        fieldIndex: (int)Creature_FieldIndex.MaximumTrainingLevel,
                        errorMask: errorMask);
                    writer.WriteZeros(2);
                }
            }
            if (item.AIPackages.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<AIPackage>>.Instance.Write(
                    writer: writer,
                    items: item.AIPackages,
                    fieldIndex: (int)Creature_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, FormIDSetLink<AIPackage> subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            header: recordTypeConverter.ConvertToCustom(Creature_Registration.PKID_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.Animations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                    writer: writer,
                    items: item.Animations,
                    fieldIndex: (int)Creature_FieldIndex.Animations,
                    recordType: Creature_Registration.KFFZ_HEADER,
                    errorMask: errorMask,
                    transl: StringBinaryTranslation.Instance.Write);
            }
            if (item.DATADataTypeState.HasFlag(Creature.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Creature_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureTypeEnum>.Instance.Write(
                        writer,
                        item.CreatureType,
                        length: 1,
                        fieldIndex: (int)Creature_FieldIndex.CreatureType,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.CombatSkill,
                        fieldIndex: (int)Creature_FieldIndex.CombatSkill,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MagicSkill,
                        fieldIndex: (int)Creature_FieldIndex.MagicSkill,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.StealthSkill,
                        fieldIndex: (int)Creature_FieldIndex.StealthSkill,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.Write(
                        writer,
                        item.SoulLevel,
                        length: 2,
                        fieldIndex: (int)Creature_FieldIndex.SoulLevel,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Health,
                        fieldIndex: (int)Creature_FieldIndex.Health,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.AttackDamage,
                        fieldIndex: (int)Creature_FieldIndex.AttackDamage,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Strength,
                        fieldIndex: (int)Creature_FieldIndex.Strength,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Intelligence,
                        fieldIndex: (int)Creature_FieldIndex.Intelligence,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Willpower,
                        fieldIndex: (int)Creature_FieldIndex.Willpower,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Agility,
                        fieldIndex: (int)Creature_FieldIndex.Agility,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Speed,
                        fieldIndex: (int)Creature_FieldIndex.Speed,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Endurance,
                        fieldIndex: (int)Creature_FieldIndex.Endurance,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Personality,
                        fieldIndex: (int)Creature_FieldIndex.Personality,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Luck,
                        fieldIndex: (int)Creature_FieldIndex.Luck,
                        errorMask: errorMask);
                }
            }
            if (item.AttackReach_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AttackReach,
                    fieldIndex: (int)Creature_FieldIndex.AttackReach,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.RNAM_HEADER),
                    nullable: false);
            }
            if (item.CombatStyle_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CombatStyle_Property,
                    fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.ZNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.TurningSpeed_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TurningSpeed,
                    fieldIndex: (int)Creature_FieldIndex.TurningSpeed,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.TNAM_HEADER),
                    nullable: false);
            }
            if (item.BaseScale_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BaseScale,
                    fieldIndex: (int)Creature_FieldIndex.BaseScale,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.BNAM_HEADER),
                    nullable: false);
            }
            if (item.FootWeight_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FootWeight,
                    fieldIndex: (int)Creature_FieldIndex.FootWeight,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.WNAM_HEADER),
                    nullable: false);
            }
            if (item.BloodSpray_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BloodSpray,
                    fieldIndex: (int)Creature_FieldIndex.BloodSpray,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.NAM0_HEADER),
                    nullable: false);
            }
            if (item.BloodDecal_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BloodDecal,
                    fieldIndex: (int)Creature_FieldIndex.BloodDecal,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.NAM1_HEADER),
                    nullable: false);
            }
            if (item.InheritsSoundFrom_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.InheritsSoundFrom_Property,
                    fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Creature_Registration.CSCR_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Sounds.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<CreatureSound>.Instance.Write(
                    writer: writer,
                    items: item.Sounds,
                    fieldIndex: (int)Creature_FieldIndex.Sounds,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, CreatureSound subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<CreatureSound>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Creature_Mask<T> : NPCAbstract_Mask<T>, IMask<T>, IEquatable<Creature_Mask<T>>
    {
        #region Ctors
        public Creature_Mask()
        {
        }

        public Creature_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, ItemEntry_Mask<T>>>>(initialValue, null);
            this.Spells = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Models = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.NIFT = initialValue;
            this.Flags = initialValue;
            this.BaseSpellPoints = initialValue;
            this.Fatigue = initialValue;
            this.BarterGold = initialValue;
            this.LevelOffset = initialValue;
            this.CalcMin = initialValue;
            this.CalcMax = initialValue;
            this.Factions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RankPlacement_Mask<T>>>>(initialValue, null);
            this.DeathItem = initialValue;
            this.Script = initialValue;
            this.Aggression = initialValue;
            this.Confidence = initialValue;
            this.EnergyLevel = initialValue;
            this.Responsibility = initialValue;
            this.BuySellServices = initialValue;
            this.Teaches = initialValue;
            this.MaximumTrainingLevel = initialValue;
            this.AIPackages = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Animations = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.CreatureType = initialValue;
            this.CombatSkill = initialValue;
            this.MagicSkill = initialValue;
            this.StealthSkill = initialValue;
            this.SoulLevel = initialValue;
            this.Health = initialValue;
            this.AttackDamage = initialValue;
            this.Strength = initialValue;
            this.Intelligence = initialValue;
            this.Willpower = initialValue;
            this.Agility = initialValue;
            this.Speed = initialValue;
            this.Endurance = initialValue;
            this.Personality = initialValue;
            this.Luck = initialValue;
            this.AttackReach = initialValue;
            this.CombatStyle = initialValue;
            this.TurningSpeed = initialValue;
            this.BaseScale = initialValue;
            this.FootWeight = initialValue;
            this.BloodSpray = initialValue;
            this.BloodDecal = initialValue;
            this.InheritsSoundFrom = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItemIndexed<T, CreatureSound_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, ItemEntry_Mask<T>>>> Items;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Spells;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Models;
        public T NIFT;
        public T Flags;
        public T BaseSpellPoints;
        public T Fatigue;
        public T BarterGold;
        public T LevelOffset;
        public T CalcMin;
        public T CalcMax;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RankPlacement_Mask<T>>>> Factions;
        public T DeathItem;
        public T Script;
        public T Aggression;
        public T Confidence;
        public T EnergyLevel;
        public T Responsibility;
        public T BuySellServices;
        public T Teaches;
        public T MaximumTrainingLevel;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> AIPackages;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Animations;
        public T CreatureType;
        public T CombatSkill;
        public T MagicSkill;
        public T StealthSkill;
        public T SoulLevel;
        public T Health;
        public T AttackDamage;
        public T Strength;
        public T Intelligence;
        public T Willpower;
        public T Agility;
        public T Speed;
        public T Endurance;
        public T Personality;
        public T Luck;
        public T AttackReach;
        public T CombatStyle;
        public T TurningSpeed;
        public T BaseScale;
        public T FootWeight;
        public T BloodSpray;
        public T BloodDecal;
        public T InheritsSoundFrom;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, CreatureSound_Mask<T>>>> Sounds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Creature_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Creature_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Models, rhs.Models)) return false;
            if (!object.Equals(this.NIFT, rhs.NIFT)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.BaseSpellPoints, rhs.BaseSpellPoints)) return false;
            if (!object.Equals(this.Fatigue, rhs.Fatigue)) return false;
            if (!object.Equals(this.BarterGold, rhs.BarterGold)) return false;
            if (!object.Equals(this.LevelOffset, rhs.LevelOffset)) return false;
            if (!object.Equals(this.CalcMin, rhs.CalcMin)) return false;
            if (!object.Equals(this.CalcMax, rhs.CalcMax)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
            if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
            if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
            if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
            if (!object.Equals(this.BuySellServices, rhs.BuySellServices)) return false;
            if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
            if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
            if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(this.Animations, rhs.Animations)) return false;
            if (!object.Equals(this.CreatureType, rhs.CreatureType)) return false;
            if (!object.Equals(this.CombatSkill, rhs.CombatSkill)) return false;
            if (!object.Equals(this.MagicSkill, rhs.MagicSkill)) return false;
            if (!object.Equals(this.StealthSkill, rhs.StealthSkill)) return false;
            if (!object.Equals(this.SoulLevel, rhs.SoulLevel)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.AttackDamage, rhs.AttackDamage)) return false;
            if (!object.Equals(this.Strength, rhs.Strength)) return false;
            if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
            if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
            if (!object.Equals(this.Agility, rhs.Agility)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
            if (!object.Equals(this.Personality, rhs.Personality)) return false;
            if (!object.Equals(this.Luck, rhs.Luck)) return false;
            if (!object.Equals(this.AttackReach, rhs.AttackReach)) return false;
            if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
            if (!object.Equals(this.TurningSpeed, rhs.TurningSpeed)) return false;
            if (!object.Equals(this.BaseScale, rhs.BaseScale)) return false;
            if (!object.Equals(this.FootWeight, rhs.FootWeight)) return false;
            if (!object.Equals(this.BloodSpray, rhs.BloodSpray)) return false;
            if (!object.Equals(this.BloodDecal, rhs.BloodDecal)) return false;
            if (!object.Equals(this.InheritsSoundFrom, rhs.InheritsSoundFrom)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Models?.GetHashCode());
            ret = ret.CombineHashCode(this.NIFT?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseSpellPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Fatigue?.GetHashCode());
            ret = ret.CombineHashCode(this.BarterGold?.GetHashCode());
            ret = ret.CombineHashCode(this.LevelOffset?.GetHashCode());
            ret = ret.CombineHashCode(this.CalcMin?.GetHashCode());
            ret = ret.CombineHashCode(this.CalcMax?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            ret = ret.CombineHashCode(this.DeathItem?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Aggression?.GetHashCode());
            ret = ret.CombineHashCode(this.Confidence?.GetHashCode());
            ret = ret.CombineHashCode(this.EnergyLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Responsibility?.GetHashCode());
            ret = ret.CombineHashCode(this.BuySellServices?.GetHashCode());
            ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumTrainingLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.AIPackages?.GetHashCode());
            ret = ret.CombineHashCode(this.Animations?.GetHashCode());
            ret = ret.CombineHashCode(this.CreatureType?.GetHashCode());
            ret = ret.CombineHashCode(this.CombatSkill?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicSkill?.GetHashCode());
            ret = ret.CombineHashCode(this.StealthSkill?.GetHashCode());
            ret = ret.CombineHashCode(this.SoulLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackDamage?.GetHashCode());
            ret = ret.CombineHashCode(this.Strength?.GetHashCode());
            ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
            ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
            ret = ret.CombineHashCode(this.Agility?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
            ret = ret.CombineHashCode(this.Personality?.GetHashCode());
            ret = ret.CombineHashCode(this.Luck?.GetHashCode());
            ret = ret.CombineHashCode(this.AttackReach?.GetHashCode());
            ret = ret.CombineHashCode(this.CombatStyle?.GetHashCode());
            ret = ret.CombineHashCode(this.TurningSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseScale?.GetHashCode());
            ret = ret.CombineHashCode(this.FootWeight?.GetHashCode());
            ret = ret.CombineHashCode(this.BloodSpray?.GetHashCode());
            ret = ret.CombineHashCode(this.BloodDecal?.GetHashCode());
            ret = ret.CombineHashCode(this.InheritsSoundFrom?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null)
                {
                    foreach (var item in this.Spells.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (this.Models != null)
            {
                if (!eval(this.Models.Overall)) return false;
                if (this.Models.Specific != null)
                {
                    foreach (var item in this.Models.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.NIFT)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.BaseSpellPoints)) return false;
            if (!eval(this.Fatigue)) return false;
            if (!eval(this.BarterGold)) return false;
            if (!eval(this.LevelOffset)) return false;
            if (!eval(this.CalcMin)) return false;
            if (!eval(this.CalcMax)) return false;
            if (this.Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (this.Factions.Specific != null)
                {
                    foreach (var item in this.Factions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.DeathItem)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Aggression)) return false;
            if (!eval(this.Confidence)) return false;
            if (!eval(this.EnergyLevel)) return false;
            if (!eval(this.Responsibility)) return false;
            if (!eval(this.BuySellServices)) return false;
            if (!eval(this.Teaches)) return false;
            if (!eval(this.MaximumTrainingLevel)) return false;
            if (this.AIPackages != null)
            {
                if (!eval(this.AIPackages.Overall)) return false;
                if (this.AIPackages.Specific != null)
                {
                    foreach (var item in this.AIPackages.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (this.Animations != null)
            {
                if (!eval(this.Animations.Overall)) return false;
                if (this.Animations.Specific != null)
                {
                    foreach (var item in this.Animations.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.CreatureType)) return false;
            if (!eval(this.CombatSkill)) return false;
            if (!eval(this.MagicSkill)) return false;
            if (!eval(this.StealthSkill)) return false;
            if (!eval(this.SoulLevel)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.AttackDamage)) return false;
            if (!eval(this.Strength)) return false;
            if (!eval(this.Intelligence)) return false;
            if (!eval(this.Willpower)) return false;
            if (!eval(this.Agility)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Endurance)) return false;
            if (!eval(this.Personality)) return false;
            if (!eval(this.Luck)) return false;
            if (!eval(this.AttackReach)) return false;
            if (!eval(this.CombatStyle)) return false;
            if (!eval(this.TurningSpeed)) return false;
            if (!eval(this.BaseScale)) return false;
            if (!eval(this.FootWeight)) return false;
            if (!eval(this.BloodSpray)) return false;
            if (!eval(this.BloodDecal)) return false;
            if (!eval(this.InheritsSoundFrom)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Creature_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Creature_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Creature_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemEntry_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItemIndexed<R, ItemEntry_Mask<R>>> l = new List<MaskItemIndexed<R, ItemEntry_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, ItemEntry_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, ItemEntry_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (Models != null)
            {
                obj.Models = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Models.Overall = eval(this.Models.Overall);
                if (Models.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Models.Specific = l;
                    foreach (var item in Models.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.NIFT = eval(this.NIFT);
            obj.Flags = eval(this.Flags);
            obj.BaseSpellPoints = eval(this.BaseSpellPoints);
            obj.Fatigue = eval(this.Fatigue);
            obj.BarterGold = eval(this.BarterGold);
            obj.LevelOffset = eval(this.LevelOffset);
            obj.CalcMin = eval(this.CalcMin);
            obj.CalcMax = eval(this.CalcMax);
            if (Factions != null)
            {
                obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement_Mask<R>>>>();
                obj.Factions.Overall = eval(this.Factions.Overall);
                if (Factions.Specific != null)
                {
                    List<MaskItemIndexed<R, RankPlacement_Mask<R>>> l = new List<MaskItemIndexed<R, RankPlacement_Mask<R>>>();
                    obj.Factions.Specific = l;
                    foreach (var item in Factions.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RankPlacement_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RankPlacement_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.DeathItem = eval(this.DeathItem);
            obj.Script = eval(this.Script);
            obj.Aggression = eval(this.Aggression);
            obj.Confidence = eval(this.Confidence);
            obj.EnergyLevel = eval(this.EnergyLevel);
            obj.Responsibility = eval(this.Responsibility);
            obj.BuySellServices = eval(this.BuySellServices);
            obj.Teaches = eval(this.Teaches);
            obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
            if (AIPackages != null)
            {
                obj.AIPackages = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.AIPackages.Overall = eval(this.AIPackages.Overall);
                if (AIPackages.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.AIPackages.Specific = l;
                    foreach (var item in AIPackages.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (Animations != null)
            {
                obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Animations.Overall = eval(this.Animations.Overall);
                if (Animations.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Animations.Specific = l;
                    foreach (var item in Animations.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.CreatureType = eval(this.CreatureType);
            obj.CombatSkill = eval(this.CombatSkill);
            obj.MagicSkill = eval(this.MagicSkill);
            obj.StealthSkill = eval(this.StealthSkill);
            obj.SoulLevel = eval(this.SoulLevel);
            obj.Health = eval(this.Health);
            obj.AttackDamage = eval(this.AttackDamage);
            obj.Strength = eval(this.Strength);
            obj.Intelligence = eval(this.Intelligence);
            obj.Willpower = eval(this.Willpower);
            obj.Agility = eval(this.Agility);
            obj.Speed = eval(this.Speed);
            obj.Endurance = eval(this.Endurance);
            obj.Personality = eval(this.Personality);
            obj.Luck = eval(this.Luck);
            obj.AttackReach = eval(this.AttackReach);
            obj.CombatStyle = eval(this.CombatStyle);
            obj.TurningSpeed = eval(this.TurningSpeed);
            obj.BaseScale = eval(this.BaseScale);
            obj.FootWeight = eval(this.FootWeight);
            obj.BloodSpray = eval(this.BloodSpray);
            obj.BloodDecal = eval(this.BloodDecal);
            obj.InheritsSoundFrom = eval(this.InheritsSoundFrom);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CreatureSound_Mask<R>>>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (Sounds.Specific != null)
                {
                    List<MaskItemIndexed<R, CreatureSound_Mask<R>>> l = new List<MaskItemIndexed<R, CreatureSound_Mask<R>>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, CreatureSound_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, CreatureSound_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Items.Specific = null;
            this.Spells.Specific = null;
            this.Models.Specific = null;
            this.Factions.Specific = null;
            this.AIPackages.Specific = null;
            this.Animations.Specific = null;
            this.Sounds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Creature_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Creature_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Creature_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Models?.Overall ?? true)
                {
                    fg.AppendLine("Models =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Models.Overall != null)
                        {
                            fg.AppendLine(Models.Overall.ToString());
                        }
                        if (Models.Specific != null)
                        {
                            foreach (var subItem in Models.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.NIFT ?? true)
                {
                    fg.AppendLine($"NIFT => {NIFT}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.BaseSpellPoints ?? true)
                {
                    fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
                }
                if (printMask?.Fatigue ?? true)
                {
                    fg.AppendLine($"Fatigue => {Fatigue}");
                }
                if (printMask?.BarterGold ?? true)
                {
                    fg.AppendLine($"BarterGold => {BarterGold}");
                }
                if (printMask?.LevelOffset ?? true)
                {
                    fg.AppendLine($"LevelOffset => {LevelOffset}");
                }
                if (printMask?.CalcMin ?? true)
                {
                    fg.AppendLine($"CalcMin => {CalcMin}");
                }
                if (printMask?.CalcMax ?? true)
                {
                    fg.AppendLine($"CalcMax => {CalcMax}");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Factions.Overall != null)
                        {
                            fg.AppendLine(Factions.Overall.ToString());
                        }
                        if (Factions.Specific != null)
                        {
                            foreach (var subItem in Factions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DeathItem ?? true)
                {
                    fg.AppendLine($"DeathItem => {DeathItem}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Aggression ?? true)
                {
                    fg.AppendLine($"Aggression => {Aggression}");
                }
                if (printMask?.Confidence ?? true)
                {
                    fg.AppendLine($"Confidence => {Confidence}");
                }
                if (printMask?.EnergyLevel ?? true)
                {
                    fg.AppendLine($"EnergyLevel => {EnergyLevel}");
                }
                if (printMask?.Responsibility ?? true)
                {
                    fg.AppendLine($"Responsibility => {Responsibility}");
                }
                if (printMask?.BuySellServices ?? true)
                {
                    fg.AppendLine($"BuySellServices => {BuySellServices}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {Teaches}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (AIPackages.Overall != null)
                        {
                            fg.AppendLine(AIPackages.Overall.ToString());
                        }
                        if (AIPackages.Specific != null)
                        {
                            foreach (var subItem in AIPackages.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Animations?.Overall ?? true)
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Animations.Overall != null)
                        {
                            fg.AppendLine(Animations.Overall.ToString());
                        }
                        if (Animations.Specific != null)
                        {
                            foreach (var subItem in Animations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.CreatureType ?? true)
                {
                    fg.AppendLine($"CreatureType => {CreatureType}");
                }
                if (printMask?.CombatSkill ?? true)
                {
                    fg.AppendLine($"CombatSkill => {CombatSkill}");
                }
                if (printMask?.MagicSkill ?? true)
                {
                    fg.AppendLine($"MagicSkill => {MagicSkill}");
                }
                if (printMask?.StealthSkill ?? true)
                {
                    fg.AppendLine($"StealthSkill => {StealthSkill}");
                }
                if (printMask?.SoulLevel ?? true)
                {
                    fg.AppendLine($"SoulLevel => {SoulLevel}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.AttackDamage ?? true)
                {
                    fg.AppendLine($"AttackDamage => {AttackDamage}");
                }
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {Luck}");
                }
                if (printMask?.AttackReach ?? true)
                {
                    fg.AppendLine($"AttackReach => {AttackReach}");
                }
                if (printMask?.CombatStyle ?? true)
                {
                    fg.AppendLine($"CombatStyle => {CombatStyle}");
                }
                if (printMask?.TurningSpeed ?? true)
                {
                    fg.AppendLine($"TurningSpeed => {TurningSpeed}");
                }
                if (printMask?.BaseScale ?? true)
                {
                    fg.AppendLine($"BaseScale => {BaseScale}");
                }
                if (printMask?.FootWeight ?? true)
                {
                    fg.AppendLine($"FootWeight => {FootWeight}");
                }
                if (printMask?.BloodSpray ?? true)
                {
                    fg.AppendLine($"BloodSpray => {BloodSpray}");
                }
                if (printMask?.BloodDecal ?? true)
                {
                    fg.AppendLine($"BloodDecal => {BloodDecal}");
                }
                if (printMask?.InheritsSoundFrom ?? true)
                {
                    fg.AppendLine($"InheritsSoundFrom => {InheritsSoundFrom}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds.Overall != null)
                        {
                            fg.AppendLine(Sounds.Overall.ToString());
                        }
                        if (Sounds.Specific != null)
                        {
                            foreach (var subItem in Sounds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Creature_ErrorMask : NPCAbstract_ErrorMask, IErrorMask<Creature_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>> Items;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Spells;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Models;
        public Exception NIFT;
        public Exception Flags;
        public Exception BaseSpellPoints;
        public Exception Fatigue;
        public Exception BarterGold;
        public Exception LevelOffset;
        public Exception CalcMin;
        public Exception CalcMax;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>> Factions;
        public Exception DeathItem;
        public Exception Script;
        public Exception Aggression;
        public Exception Confidence;
        public Exception EnergyLevel;
        public Exception Responsibility;
        public Exception BuySellServices;
        public Exception Teaches;
        public Exception MaximumTrainingLevel;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> AIPackages;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Animations;
        public Exception CreatureType;
        public Exception CombatSkill;
        public Exception MagicSkill;
        public Exception StealthSkill;
        public Exception SoulLevel;
        public Exception Health;
        public Exception AttackDamage;
        public Exception Strength;
        public Exception Intelligence;
        public Exception Willpower;
        public Exception Agility;
        public Exception Speed;
        public Exception Endurance;
        public Exception Personality;
        public Exception Luck;
        public Exception AttackReach;
        public Exception CombatStyle;
        public Exception TurningSpeed;
        public Exception BaseScale;
        public Exception FootWeight;
        public Exception BloodSpray;
        public Exception BloodDecal;
        public Exception InheritsSoundFrom;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, CreatureSound_ErrorMask>>> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    return Name;
                case Creature_FieldIndex.Model:
                    return Model;
                case Creature_FieldIndex.Items:
                    return Items;
                case Creature_FieldIndex.Spells:
                    return Spells;
                case Creature_FieldIndex.Models:
                    return Models;
                case Creature_FieldIndex.NIFT:
                    return NIFT;
                case Creature_FieldIndex.Flags:
                    return Flags;
                case Creature_FieldIndex.BaseSpellPoints:
                    return BaseSpellPoints;
                case Creature_FieldIndex.Fatigue:
                    return Fatigue;
                case Creature_FieldIndex.BarterGold:
                    return BarterGold;
                case Creature_FieldIndex.LevelOffset:
                    return LevelOffset;
                case Creature_FieldIndex.CalcMin:
                    return CalcMin;
                case Creature_FieldIndex.CalcMax:
                    return CalcMax;
                case Creature_FieldIndex.Factions:
                    return Factions;
                case Creature_FieldIndex.DeathItem:
                    return DeathItem;
                case Creature_FieldIndex.Script:
                    return Script;
                case Creature_FieldIndex.Aggression:
                    return Aggression;
                case Creature_FieldIndex.Confidence:
                    return Confidence;
                case Creature_FieldIndex.EnergyLevel:
                    return EnergyLevel;
                case Creature_FieldIndex.Responsibility:
                    return Responsibility;
                case Creature_FieldIndex.BuySellServices:
                    return BuySellServices;
                case Creature_FieldIndex.Teaches:
                    return Teaches;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return MaximumTrainingLevel;
                case Creature_FieldIndex.AIPackages:
                    return AIPackages;
                case Creature_FieldIndex.Animations:
                    return Animations;
                case Creature_FieldIndex.CreatureType:
                    return CreatureType;
                case Creature_FieldIndex.CombatSkill:
                    return CombatSkill;
                case Creature_FieldIndex.MagicSkill:
                    return MagicSkill;
                case Creature_FieldIndex.StealthSkill:
                    return StealthSkill;
                case Creature_FieldIndex.SoulLevel:
                    return SoulLevel;
                case Creature_FieldIndex.Health:
                    return Health;
                case Creature_FieldIndex.AttackDamage:
                    return AttackDamage;
                case Creature_FieldIndex.Strength:
                    return Strength;
                case Creature_FieldIndex.Intelligence:
                    return Intelligence;
                case Creature_FieldIndex.Willpower:
                    return Willpower;
                case Creature_FieldIndex.Agility:
                    return Agility;
                case Creature_FieldIndex.Speed:
                    return Speed;
                case Creature_FieldIndex.Endurance:
                    return Endurance;
                case Creature_FieldIndex.Personality:
                    return Personality;
                case Creature_FieldIndex.Luck:
                    return Luck;
                case Creature_FieldIndex.AttackReach:
                    return AttackReach;
                case Creature_FieldIndex.CombatStyle:
                    return CombatStyle;
                case Creature_FieldIndex.TurningSpeed:
                    return TurningSpeed;
                case Creature_FieldIndex.BaseScale:
                    return BaseScale;
                case Creature_FieldIndex.FootWeight:
                    return FootWeight;
                case Creature_FieldIndex.BloodSpray:
                    return BloodSpray;
                case Creature_FieldIndex.BloodDecal:
                    return BloodDecal;
                case Creature_FieldIndex.InheritsSoundFrom:
                    return InheritsSoundFrom;
                case Creature_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Creature_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Creature_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>(ex, null);
                    break;
                case Creature_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Creature_FieldIndex.Models:
                    this.Models = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Creature_FieldIndex.NIFT:
                    this.NIFT = ex;
                    break;
                case Creature_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = ex;
                    break;
                case Creature_FieldIndex.Fatigue:
                    this.Fatigue = ex;
                    break;
                case Creature_FieldIndex.BarterGold:
                    this.BarterGold = ex;
                    break;
                case Creature_FieldIndex.LevelOffset:
                    this.LevelOffset = ex;
                    break;
                case Creature_FieldIndex.CalcMin:
                    this.CalcMin = ex;
                    break;
                case Creature_FieldIndex.CalcMax:
                    this.CalcMax = ex;
                    break;
                case Creature_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>(ex, null);
                    break;
                case Creature_FieldIndex.DeathItem:
                    this.DeathItem = ex;
                    break;
                case Creature_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Creature_FieldIndex.Aggression:
                    this.Aggression = ex;
                    break;
                case Creature_FieldIndex.Confidence:
                    this.Confidence = ex;
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    this.EnergyLevel = ex;
                    break;
                case Creature_FieldIndex.Responsibility:
                    this.Responsibility = ex;
                    break;
                case Creature_FieldIndex.BuySellServices:
                    this.BuySellServices = ex;
                    break;
                case Creature_FieldIndex.Teaches:
                    this.Teaches = ex;
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = ex;
                    break;
                case Creature_FieldIndex.AIPackages:
                    this.AIPackages = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Creature_FieldIndex.Animations:
                    this.Animations = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Creature_FieldIndex.CreatureType:
                    this.CreatureType = ex;
                    break;
                case Creature_FieldIndex.CombatSkill:
                    this.CombatSkill = ex;
                    break;
                case Creature_FieldIndex.MagicSkill:
                    this.MagicSkill = ex;
                    break;
                case Creature_FieldIndex.StealthSkill:
                    this.StealthSkill = ex;
                    break;
                case Creature_FieldIndex.SoulLevel:
                    this.SoulLevel = ex;
                    break;
                case Creature_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Creature_FieldIndex.AttackDamage:
                    this.AttackDamage = ex;
                    break;
                case Creature_FieldIndex.Strength:
                    this.Strength = ex;
                    break;
                case Creature_FieldIndex.Intelligence:
                    this.Intelligence = ex;
                    break;
                case Creature_FieldIndex.Willpower:
                    this.Willpower = ex;
                    break;
                case Creature_FieldIndex.Agility:
                    this.Agility = ex;
                    break;
                case Creature_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case Creature_FieldIndex.Endurance:
                    this.Endurance = ex;
                    break;
                case Creature_FieldIndex.Personality:
                    this.Personality = ex;
                    break;
                case Creature_FieldIndex.Luck:
                    this.Luck = ex;
                    break;
                case Creature_FieldIndex.AttackReach:
                    this.AttackReach = ex;
                    break;
                case Creature_FieldIndex.CombatStyle:
                    this.CombatStyle = ex;
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    this.TurningSpeed = ex;
                    break;
                case Creature_FieldIndex.BaseScale:
                    this.BaseScale = ex;
                    break;
                case Creature_FieldIndex.FootWeight:
                    this.FootWeight = ex;
                    break;
                case Creature_FieldIndex.BloodSpray:
                    this.BloodSpray = ex;
                    break;
                case Creature_FieldIndex.BloodDecal:
                    this.BloodDecal = ex;
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    this.InheritsSoundFrom = ex;
                    break;
                case Creature_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, CreatureSound_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Creature_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Creature_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>)obj;
                    break;
                case Creature_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Creature_FieldIndex.Models:
                    this.Models = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Creature_FieldIndex.NIFT:
                    this.NIFT = (Exception)obj;
                    break;
                case Creature_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Creature_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = (Exception)obj;
                    break;
                case Creature_FieldIndex.Fatigue:
                    this.Fatigue = (Exception)obj;
                    break;
                case Creature_FieldIndex.BarterGold:
                    this.BarterGold = (Exception)obj;
                    break;
                case Creature_FieldIndex.LevelOffset:
                    this.LevelOffset = (Exception)obj;
                    break;
                case Creature_FieldIndex.CalcMin:
                    this.CalcMin = (Exception)obj;
                    break;
                case Creature_FieldIndex.CalcMax:
                    this.CalcMax = (Exception)obj;
                    break;
                case Creature_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>)obj;
                    break;
                case Creature_FieldIndex.DeathItem:
                    this.DeathItem = (Exception)obj;
                    break;
                case Creature_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Creature_FieldIndex.Aggression:
                    this.Aggression = (Exception)obj;
                    break;
                case Creature_FieldIndex.Confidence:
                    this.Confidence = (Exception)obj;
                    break;
                case Creature_FieldIndex.EnergyLevel:
                    this.EnergyLevel = (Exception)obj;
                    break;
                case Creature_FieldIndex.Responsibility:
                    this.Responsibility = (Exception)obj;
                    break;
                case Creature_FieldIndex.BuySellServices:
                    this.BuySellServices = (Exception)obj;
                    break;
                case Creature_FieldIndex.Teaches:
                    this.Teaches = (Exception)obj;
                    break;
                case Creature_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = (Exception)obj;
                    break;
                case Creature_FieldIndex.AIPackages:
                    this.AIPackages = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Creature_FieldIndex.Animations:
                    this.Animations = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Creature_FieldIndex.CreatureType:
                    this.CreatureType = (Exception)obj;
                    break;
                case Creature_FieldIndex.CombatSkill:
                    this.CombatSkill = (Exception)obj;
                    break;
                case Creature_FieldIndex.MagicSkill:
                    this.MagicSkill = (Exception)obj;
                    break;
                case Creature_FieldIndex.StealthSkill:
                    this.StealthSkill = (Exception)obj;
                    break;
                case Creature_FieldIndex.SoulLevel:
                    this.SoulLevel = (Exception)obj;
                    break;
                case Creature_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Creature_FieldIndex.AttackDamage:
                    this.AttackDamage = (Exception)obj;
                    break;
                case Creature_FieldIndex.Strength:
                    this.Strength = (Exception)obj;
                    break;
                case Creature_FieldIndex.Intelligence:
                    this.Intelligence = (Exception)obj;
                    break;
                case Creature_FieldIndex.Willpower:
                    this.Willpower = (Exception)obj;
                    break;
                case Creature_FieldIndex.Agility:
                    this.Agility = (Exception)obj;
                    break;
                case Creature_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case Creature_FieldIndex.Endurance:
                    this.Endurance = (Exception)obj;
                    break;
                case Creature_FieldIndex.Personality:
                    this.Personality = (Exception)obj;
                    break;
                case Creature_FieldIndex.Luck:
                    this.Luck = (Exception)obj;
                    break;
                case Creature_FieldIndex.AttackReach:
                    this.AttackReach = (Exception)obj;
                    break;
                case Creature_FieldIndex.CombatStyle:
                    this.CombatStyle = (Exception)obj;
                    break;
                case Creature_FieldIndex.TurningSpeed:
                    this.TurningSpeed = (Exception)obj;
                    break;
                case Creature_FieldIndex.BaseScale:
                    this.BaseScale = (Exception)obj;
                    break;
                case Creature_FieldIndex.FootWeight:
                    this.FootWeight = (Exception)obj;
                    break;
                case Creature_FieldIndex.BloodSpray:
                    this.BloodSpray = (Exception)obj;
                    break;
                case Creature_FieldIndex.BloodDecal:
                    this.BloodDecal = (Exception)obj;
                    break;
                case Creature_FieldIndex.InheritsSoundFrom:
                    this.InheritsSoundFrom = (Exception)obj;
                    break;
                case Creature_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, IEnumerable<MaskItem<Exception, CreatureSound_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Items != null) return true;
            if (Spells != null) return true;
            if (Models != null) return true;
            if (NIFT != null) return true;
            if (Flags != null) return true;
            if (BaseSpellPoints != null) return true;
            if (Fatigue != null) return true;
            if (BarterGold != null) return true;
            if (LevelOffset != null) return true;
            if (CalcMin != null) return true;
            if (CalcMax != null) return true;
            if (Factions != null) return true;
            if (DeathItem != null) return true;
            if (Script != null) return true;
            if (Aggression != null) return true;
            if (Confidence != null) return true;
            if (EnergyLevel != null) return true;
            if (Responsibility != null) return true;
            if (BuySellServices != null) return true;
            if (Teaches != null) return true;
            if (MaximumTrainingLevel != null) return true;
            if (AIPackages != null) return true;
            if (Animations != null) return true;
            if (CreatureType != null) return true;
            if (CombatSkill != null) return true;
            if (MagicSkill != null) return true;
            if (StealthSkill != null) return true;
            if (SoulLevel != null) return true;
            if (Health != null) return true;
            if (AttackDamage != null) return true;
            if (Strength != null) return true;
            if (Intelligence != null) return true;
            if (Willpower != null) return true;
            if (Agility != null) return true;
            if (Speed != null) return true;
            if (Endurance != null) return true;
            if (Personality != null) return true;
            if (Luck != null) return true;
            if (AttackReach != null) return true;
            if (CombatStyle != null) return true;
            if (TurningSpeed != null) return true;
            if (BaseScale != null) return true;
            if (FootWeight != null) return true;
            if (BloodSpray != null) return true;
            if (BloodDecal != null) return true;
            if (InheritsSoundFrom != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Creature_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Spells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Spells.Overall != null)
                {
                    fg.AppendLine(Spells.Overall.ToString());
                }
                if (Spells.Specific != null)
                {
                    foreach (var subItem in Spells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Models =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Models.Overall != null)
                {
                    fg.AppendLine(Models.Overall.ToString());
                }
                if (Models.Specific != null)
                {
                    foreach (var subItem in Models.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"NIFT => {NIFT}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
            fg.AppendLine($"Fatigue => {Fatigue}");
            fg.AppendLine($"BarterGold => {BarterGold}");
            fg.AppendLine($"LevelOffset => {LevelOffset}");
            fg.AppendLine($"CalcMin => {CalcMin}");
            fg.AppendLine($"CalcMax => {CalcMax}");
            fg.AppendLine("Factions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Factions.Overall != null)
                {
                    fg.AppendLine(Factions.Overall.ToString());
                }
                if (Factions.Specific != null)
                {
                    foreach (var subItem in Factions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"DeathItem => {DeathItem}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Aggression => {Aggression}");
            fg.AppendLine($"Confidence => {Confidence}");
            fg.AppendLine($"EnergyLevel => {EnergyLevel}");
            fg.AppendLine($"Responsibility => {Responsibility}");
            fg.AppendLine($"BuySellServices => {BuySellServices}");
            fg.AppendLine($"Teaches => {Teaches}");
            fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
            fg.AppendLine("AIPackages =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (AIPackages.Overall != null)
                {
                    fg.AppendLine(AIPackages.Overall.ToString());
                }
                if (AIPackages.Specific != null)
                {
                    foreach (var subItem in AIPackages.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Animations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Animations.Overall != null)
                {
                    fg.AppendLine(Animations.Overall.ToString());
                }
                if (Animations.Specific != null)
                {
                    foreach (var subItem in Animations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"CreatureType => {CreatureType}");
            fg.AppendLine($"CombatSkill => {CombatSkill}");
            fg.AppendLine($"MagicSkill => {MagicSkill}");
            fg.AppendLine($"StealthSkill => {StealthSkill}");
            fg.AppendLine($"SoulLevel => {SoulLevel}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"AttackDamage => {AttackDamage}");
            fg.AppendLine($"Strength => {Strength}");
            fg.AppendLine($"Intelligence => {Intelligence}");
            fg.AppendLine($"Willpower => {Willpower}");
            fg.AppendLine($"Agility => {Agility}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Endurance => {Endurance}");
            fg.AppendLine($"Personality => {Personality}");
            fg.AppendLine($"Luck => {Luck}");
            fg.AppendLine($"AttackReach => {AttackReach}");
            fg.AppendLine($"CombatStyle => {CombatStyle}");
            fg.AppendLine($"TurningSpeed => {TurningSpeed}");
            fg.AppendLine($"BaseScale => {BaseScale}");
            fg.AppendLine($"FootWeight => {FootWeight}");
            fg.AppendLine($"BloodSpray => {BloodSpray}");
            fg.AppendLine($"BloodDecal => {BloodDecal}");
            fg.AppendLine($"InheritsSoundFrom => {InheritsSoundFrom}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds.Overall != null)
                {
                    fg.AppendLine(Sounds.Overall.ToString());
                }
                if (Sounds.Specific != null)
                {
                    foreach (var subItem in Sounds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Creature_ErrorMask Combine(Creature_ErrorMask rhs)
        {
            var ret = new Creature_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, ItemEntry_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            ret.Spells = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<(int Index, Exception Value)>(this.Spells.Specific.And(rhs.Spells.Specific)));
            ret.Models = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Models.Overall.Combine(rhs.Models.Overall), new List<(int Index, Exception Value)>(this.Models.Specific.And(rhs.Models.Specific)));
            ret.NIFT = this.NIFT.Combine(rhs.NIFT);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.BaseSpellPoints = this.BaseSpellPoints.Combine(rhs.BaseSpellPoints);
            ret.Fatigue = this.Fatigue.Combine(rhs.Fatigue);
            ret.BarterGold = this.BarterGold.Combine(rhs.BarterGold);
            ret.LevelOffset = this.LevelOffset.Combine(rhs.LevelOffset);
            ret.CalcMin = this.CalcMin.Combine(rhs.CalcMin);
            ret.CalcMax = this.CalcMax.Combine(rhs.CalcMax);
            ret.Factions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>(this.Factions.Overall.Combine(rhs.Factions.Overall), new List<MaskItem<Exception, RankPlacement_ErrorMask>>(this.Factions.Specific.And(rhs.Factions.Specific)));
            ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Aggression = this.Aggression.Combine(rhs.Aggression);
            ret.Confidence = this.Confidence.Combine(rhs.Confidence);
            ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
            ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
            ret.BuySellServices = this.BuySellServices.Combine(rhs.BuySellServices);
            ret.Teaches = this.Teaches.Combine(rhs.Teaches);
            ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
            ret.AIPackages = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.AIPackages.Overall.Combine(rhs.AIPackages.Overall), new List<(int Index, Exception Value)>(this.AIPackages.Specific.And(rhs.AIPackages.Specific)));
            ret.Animations = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Animations.Overall.Combine(rhs.Animations.Overall), new List<(int Index, Exception Value)>(this.Animations.Specific.And(rhs.Animations.Specific)));
            ret.CreatureType = this.CreatureType.Combine(rhs.CreatureType);
            ret.CombatSkill = this.CombatSkill.Combine(rhs.CombatSkill);
            ret.MagicSkill = this.MagicSkill.Combine(rhs.MagicSkill);
            ret.StealthSkill = this.StealthSkill.Combine(rhs.StealthSkill);
            ret.SoulLevel = this.SoulLevel.Combine(rhs.SoulLevel);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.AttackDamage = this.AttackDamage.Combine(rhs.AttackDamage);
            ret.Strength = this.Strength.Combine(rhs.Strength);
            ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
            ret.Willpower = this.Willpower.Combine(rhs.Willpower);
            ret.Agility = this.Agility.Combine(rhs.Agility);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Endurance = this.Endurance.Combine(rhs.Endurance);
            ret.Personality = this.Personality.Combine(rhs.Personality);
            ret.Luck = this.Luck.Combine(rhs.Luck);
            ret.AttackReach = this.AttackReach.Combine(rhs.AttackReach);
            ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
            ret.TurningSpeed = this.TurningSpeed.Combine(rhs.TurningSpeed);
            ret.BaseScale = this.BaseScale.Combine(rhs.BaseScale);
            ret.FootWeight = this.FootWeight.Combine(rhs.FootWeight);
            ret.BloodSpray = this.BloodSpray.Combine(rhs.BloodSpray);
            ret.BloodDecal = this.BloodDecal.Combine(rhs.BloodDecal);
            ret.InheritsSoundFrom = this.InheritsSoundFrom.Combine(rhs.InheritsSoundFrom);
            ret.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, CreatureSound_ErrorMask>>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), new List<MaskItem<Exception, CreatureSound_ErrorMask>>(this.Sounds.Specific.And(rhs.Sounds.Specific)));
            return ret;
        }
        public static Creature_ErrorMask Combine(Creature_ErrorMask lhs, Creature_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Creature_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Creature_ErrorMask();
        }
        #endregion

    }
    public class Creature_CopyMask : NPCAbstract_CopyMask
    {
        public Creature_CopyMask()
        {
        }

        public Creature_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Items = new MaskItem<CopyOption, ItemEntry_CopyMask>(deepCopyOption, default);
            this.Spells = deepCopyOption;
            this.Models = deepCopyOption;
            this.NIFT = defaultOn;
            this.Flags = defaultOn;
            this.BaseSpellPoints = defaultOn;
            this.Fatigue = defaultOn;
            this.BarterGold = defaultOn;
            this.LevelOffset = defaultOn;
            this.CalcMin = defaultOn;
            this.CalcMax = defaultOn;
            this.Factions = new MaskItem<CopyOption, RankPlacement_CopyMask>(deepCopyOption, default);
            this.DeathItem = defaultOn;
            this.Script = defaultOn;
            this.Aggression = defaultOn;
            this.Confidence = defaultOn;
            this.EnergyLevel = defaultOn;
            this.Responsibility = defaultOn;
            this.BuySellServices = defaultOn;
            this.Teaches = defaultOn;
            this.MaximumTrainingLevel = defaultOn;
            this.AIPackages = deepCopyOption;
            this.Animations = deepCopyOption;
            this.CreatureType = defaultOn;
            this.CombatSkill = defaultOn;
            this.MagicSkill = defaultOn;
            this.StealthSkill = defaultOn;
            this.SoulLevel = defaultOn;
            this.Health = defaultOn;
            this.AttackDamage = defaultOn;
            this.Strength = defaultOn;
            this.Intelligence = defaultOn;
            this.Willpower = defaultOn;
            this.Agility = defaultOn;
            this.Speed = defaultOn;
            this.Endurance = defaultOn;
            this.Personality = defaultOn;
            this.Luck = defaultOn;
            this.AttackReach = defaultOn;
            this.CombatStyle = defaultOn;
            this.TurningSpeed = defaultOn;
            this.BaseScale = defaultOn;
            this.FootWeight = defaultOn;
            this.BloodSpray = defaultOn;
            this.BloodDecal = defaultOn;
            this.InheritsSoundFrom = defaultOn;
            this.Sounds = new MaskItem<CopyOption, CreatureSound_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public MaskItem<CopyOption, ItemEntry_CopyMask> Items;
        public CopyOption Spells;
        public CopyOption Models;
        public bool NIFT;
        public bool Flags;
        public bool BaseSpellPoints;
        public bool Fatigue;
        public bool BarterGold;
        public bool LevelOffset;
        public bool CalcMin;
        public bool CalcMax;
        public MaskItem<CopyOption, RankPlacement_CopyMask> Factions;
        public bool DeathItem;
        public bool Script;
        public bool Aggression;
        public bool Confidence;
        public bool EnergyLevel;
        public bool Responsibility;
        public bool BuySellServices;
        public bool Teaches;
        public bool MaximumTrainingLevel;
        public CopyOption AIPackages;
        public CopyOption Animations;
        public bool CreatureType;
        public bool CombatSkill;
        public bool MagicSkill;
        public bool StealthSkill;
        public bool SoulLevel;
        public bool Health;
        public bool AttackDamage;
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        public bool AttackReach;
        public bool CombatStyle;
        public bool TurningSpeed;
        public bool BaseScale;
        public bool FootWeight;
        public bool BloodSpray;
        public bool BloodDecal;
        public bool InheritsSoundFrom;
        public MaskItem<CopyOption, CreatureSound_CopyMask> Sounds;
        #endregion

    }

    public class Creature_TranslationMask : NPCAbstract_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public MaskItem<bool, ItemEntry_TranslationMask> Items;
        public bool Spells;
        public bool Models;
        public bool NIFT;
        public bool Flags;
        public bool BaseSpellPoints;
        public bool Fatigue;
        public bool BarterGold;
        public bool LevelOffset;
        public bool CalcMin;
        public bool CalcMax;
        public MaskItem<bool, RankPlacement_TranslationMask> Factions;
        public bool DeathItem;
        public bool Script;
        public bool Aggression;
        public bool Confidence;
        public bool EnergyLevel;
        public bool Responsibility;
        public bool BuySellServices;
        public bool Teaches;
        public bool MaximumTrainingLevel;
        public bool AIPackages;
        public bool Animations;
        public bool CreatureType;
        public bool CombatSkill;
        public bool MagicSkill;
        public bool StealthSkill;
        public bool SoulLevel;
        public bool Health;
        public bool AttackDamage;
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        public bool AttackReach;
        public bool CombatStyle;
        public bool TurningSpeed;
        public bool BaseScale;
        public bool FootWeight;
        public bool BloodSpray;
        public bool BloodDecal;
        public bool InheritsSoundFrom;
        public MaskItem<bool, CreatureSound_TranslationMask> Sounds;
        #endregion

        #region Ctors
        public Creature_TranslationMask()
            : base()
        {
        }

        public Creature_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Items = new MaskItem<bool, ItemEntry_TranslationMask>(defaultOn, null);
            this.Spells = defaultOn;
            this.Models = defaultOn;
            this.NIFT = defaultOn;
            this.Flags = defaultOn;
            this.BaseSpellPoints = defaultOn;
            this.Fatigue = defaultOn;
            this.BarterGold = defaultOn;
            this.LevelOffset = defaultOn;
            this.CalcMin = defaultOn;
            this.CalcMax = defaultOn;
            this.Factions = new MaskItem<bool, RankPlacement_TranslationMask>(defaultOn, null);
            this.DeathItem = defaultOn;
            this.Script = defaultOn;
            this.Aggression = defaultOn;
            this.Confidence = defaultOn;
            this.EnergyLevel = defaultOn;
            this.Responsibility = defaultOn;
            this.BuySellServices = defaultOn;
            this.Teaches = defaultOn;
            this.MaximumTrainingLevel = defaultOn;
            this.AIPackages = defaultOn;
            this.Animations = defaultOn;
            this.CreatureType = defaultOn;
            this.CombatSkill = defaultOn;
            this.MagicSkill = defaultOn;
            this.StealthSkill = defaultOn;
            this.SoulLevel = defaultOn;
            this.Health = defaultOn;
            this.AttackDamage = defaultOn;
            this.Strength = defaultOn;
            this.Intelligence = defaultOn;
            this.Willpower = defaultOn;
            this.Agility = defaultOn;
            this.Speed = defaultOn;
            this.Endurance = defaultOn;
            this.Personality = defaultOn;
            this.Luck = defaultOn;
            this.AttackReach = defaultOn;
            this.CombatStyle = defaultOn;
            this.TurningSpeed = defaultOn;
            this.BaseScale = defaultOn;
            this.FootWeight = defaultOn;
            this.BloodSpray = defaultOn;
            this.BloodDecal = defaultOn;
            this.InheritsSoundFrom = defaultOn;
            this.Sounds = new MaskItem<bool, CreatureSound_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
            ret.Add((Spells, null));
            ret.Add((Models, null));
            ret.Add((NIFT, null));
            ret.Add((Flags, null));
            ret.Add((BaseSpellPoints, null));
            ret.Add((Fatigue, null));
            ret.Add((BarterGold, null));
            ret.Add((LevelOffset, null));
            ret.Add((CalcMin, null));
            ret.Add((CalcMax, null));
            ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
            ret.Add((DeathItem, null));
            ret.Add((Script, null));
            ret.Add((Aggression, null));
            ret.Add((Confidence, null));
            ret.Add((EnergyLevel, null));
            ret.Add((Responsibility, null));
            ret.Add((BuySellServices, null));
            ret.Add((Teaches, null));
            ret.Add((MaximumTrainingLevel, null));
            ret.Add((AIPackages, null));
            ret.Add((Animations, null));
            ret.Add((CreatureType, null));
            ret.Add((CombatSkill, null));
            ret.Add((MagicSkill, null));
            ret.Add((StealthSkill, null));
            ret.Add((SoulLevel, null));
            ret.Add((Health, null));
            ret.Add((AttackDamage, null));
            ret.Add((Strength, null));
            ret.Add((Intelligence, null));
            ret.Add((Willpower, null));
            ret.Add((Agility, null));
            ret.Add((Speed, null));
            ret.Add((Endurance, null));
            ret.Add((Personality, null));
            ret.Add((Luck, null));
            ret.Add((AttackReach, null));
            ret.Add((CombatStyle, null));
            ret.Add((TurningSpeed, null));
            ret.Add((BaseScale, null));
            ret.Add((FootWeight, null));
            ret.Add((BloodSpray, null));
            ret.Add((BloodDecal, null));
            ret.Add((InheritsSoundFrom, null));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
