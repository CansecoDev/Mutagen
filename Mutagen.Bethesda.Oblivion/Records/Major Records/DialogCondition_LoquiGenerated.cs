/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogCondition : 
        IDialogCondition,
        ILoquiObject<DialogCondition>,
        ILoquiObjectSetter,
        IPropertySupporter<CompareOperator>,
        IPropertySupporter<DialogCondition.Flag>,
        IPropertySupporter<Byte[]>,
        IPropertySupporter<Single>,
        IPropertySupporter<Function>,
        IPropertySupporter<Int32>,
        IEquatable<DialogCondition>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogCondition_Registration.Instance;
        public static DialogCondition_Registration Registration => DialogCondition_Registration.Instance;

        #region Ctor
        public DialogCondition()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CompareOperator
        protected CompareOperator _CompareOperator;
        protected PropertyForwarder<DialogCondition, CompareOperator> _CompareOperatorForwarder;
        public INotifyingSetItem<CompareOperator> CompareOperator_Property => _CompareOperatorForwarder ?? (_CompareOperatorForwarder = new PropertyForwarder<DialogCondition, CompareOperator>(this, (int)DialogCondition_FieldIndex.CompareOperator));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CompareOperator CompareOperator
        {
            get => this._CompareOperator;
            set => this.SetCompareOperator(value);
        }
        protected void SetCompareOperator(
            CompareOperator item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogCondition_FieldIndex.CompareOperator];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && CompareOperator == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogCondition_FieldIndex.CompareOperator] = hasBeenSet;
            }
            if (_CompareOperator_subscriptions != null)
            {
                var tmp = CompareOperator;
                _CompareOperator = item;
                _CompareOperator_subscriptions.FireSubscriptions(
                    index: (int)DialogCondition_FieldIndex.CompareOperator,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _CompareOperator = item;
            }
        }
        protected void UnsetCompareOperator()
        {
            _hasBeenSetTracker[(int)DialogCondition_FieldIndex.CompareOperator] = false;
            CompareOperator = default(CompareOperator);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<CompareOperator> IDialogCondition.CompareOperator_Property => this.CompareOperator_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<CompareOperator> IDialogConditionGetter.CompareOperator_Property => this.CompareOperator_Property;
        #endregion
        #region Flags
        protected DialogCondition.Flag _Flags;
        protected PropertyForwarder<DialogCondition, DialogCondition.Flag> _FlagsForwarder;
        public INotifyingSetItem<DialogCondition.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<DialogCondition, DialogCondition.Flag>(this, (int)DialogCondition_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DialogCondition.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            DialogCondition.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Flags] = hasBeenSet;
            }
            if (_DialogConditionFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _DialogConditionFlag_subscriptions.FireSubscriptions(
                    index: (int)DialogCondition_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Flags] = false;
            Flags = default(DialogCondition.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<DialogCondition.Flag> IDialogCondition.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<DialogCondition.Flag> IDialogConditionGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Fluff
        protected Byte[] _Fluff;
        protected PropertyForwarder<DialogCondition, Byte[]> _FluffForwarder;
        public INotifyingSetItem<Byte[]> Fluff_Property => _FluffForwarder ?? (_FluffForwarder = new PropertyForwarder<DialogCondition, Byte[]>(this, (int)DialogCondition_FieldIndex.Fluff));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff
        {
            get => this._Fluff;
            set => this.SetFluff(value);
        }
        protected void SetFluff(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Fluff];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Fluff, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Fluff] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = Fluff;
                _Fluff = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)DialogCondition_FieldIndex.Fluff,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Fluff = item;
            }
        }
        protected void UnsetFluff()
        {
            _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Fluff] = false;
            Fluff = default(Byte[]);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IDialogCondition.Fluff_Property => this.Fluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IDialogConditionGetter.Fluff_Property => this.Fluff_Property;
        #endregion
        #region ComparisonValue
        protected Single _ComparisonValue;
        protected PropertyForwarder<DialogCondition, Single> _ComparisonValueForwarder;
        public INotifyingSetItem<Single> ComparisonValue_Property => _ComparisonValueForwarder ?? (_ComparisonValueForwarder = new PropertyForwarder<DialogCondition, Single>(this, (int)DialogCondition_FieldIndex.ComparisonValue));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single ComparisonValue
        {
            get => this._ComparisonValue;
            set => this.SetComparisonValue(value);
        }
        protected void SetComparisonValue(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogCondition_FieldIndex.ComparisonValue];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ComparisonValue == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogCondition_FieldIndex.ComparisonValue] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = ComparisonValue;
                _ComparisonValue = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)DialogCondition_FieldIndex.ComparisonValue,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ComparisonValue = item;
            }
        }
        protected void UnsetComparisonValue()
        {
            _hasBeenSetTracker[(int)DialogCondition_FieldIndex.ComparisonValue] = false;
            ComparisonValue = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IDialogCondition.ComparisonValue_Property => this.ComparisonValue_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IDialogConditionGetter.ComparisonValue_Property => this.ComparisonValue_Property;
        #endregion
        #region Function
        protected Function _Function;
        protected PropertyForwarder<DialogCondition, Function> _FunctionForwarder;
        public INotifyingSetItem<Function> Function_Property => _FunctionForwarder ?? (_FunctionForwarder = new PropertyForwarder<DialogCondition, Function>(this, (int)DialogCondition_FieldIndex.Function));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Function Function
        {
            get => this._Function;
            set => this.SetFunction(value);
        }
        protected void SetFunction(
            Function item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Function];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Function == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Function] = hasBeenSet;
            }
            if (_Function_subscriptions != null)
            {
                var tmp = Function;
                _Function = item;
                _Function_subscriptions.FireSubscriptions(
                    index: (int)DialogCondition_FieldIndex.Function,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Function = item;
            }
        }
        protected void UnsetFunction()
        {
            _hasBeenSetTracker[(int)DialogCondition_FieldIndex.Function] = false;
            Function = default(Function);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Function> IDialogCondition.Function_Property => this.Function_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Function> IDialogConditionGetter.Function_Property => this.Function_Property;
        #endregion
        #region FirstParameter
        protected Int32 _FirstParameter;
        protected PropertyForwarder<DialogCondition, Int32> _FirstParameterForwarder;
        public INotifyingSetItem<Int32> FirstParameter_Property => _FirstParameterForwarder ?? (_FirstParameterForwarder = new PropertyForwarder<DialogCondition, Int32>(this, (int)DialogCondition_FieldIndex.FirstParameter));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FirstParameter
        {
            get => this._FirstParameter;
            set => this.SetFirstParameter(value);
        }
        protected void SetFirstParameter(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogCondition_FieldIndex.FirstParameter];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && FirstParameter == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogCondition_FieldIndex.FirstParameter] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = FirstParameter;
                _FirstParameter = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)DialogCondition_FieldIndex.FirstParameter,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FirstParameter = item;
            }
        }
        protected void UnsetFirstParameter()
        {
            _hasBeenSetTracker[(int)DialogCondition_FieldIndex.FirstParameter] = false;
            FirstParameter = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> IDialogCondition.FirstParameter_Property => this.FirstParameter_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> IDialogConditionGetter.FirstParameter_Property => this.FirstParameter_Property;
        #endregion
        #region SecondParameter
        protected Int32 _SecondParameter;
        protected PropertyForwarder<DialogCondition, Int32> _SecondParameterForwarder;
        public INotifyingSetItem<Int32> SecondParameter_Property => _SecondParameterForwarder ?? (_SecondParameterForwarder = new PropertyForwarder<DialogCondition, Int32>(this, (int)DialogCondition_FieldIndex.SecondParameter));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 SecondParameter
        {
            get => this._SecondParameter;
            set => this.SetSecondParameter(value);
        }
        protected void SetSecondParameter(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogCondition_FieldIndex.SecondParameter];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && SecondParameter == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogCondition_FieldIndex.SecondParameter] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = SecondParameter;
                _SecondParameter = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)DialogCondition_FieldIndex.SecondParameter,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _SecondParameter = item;
            }
        }
        protected void UnsetSecondParameter()
        {
            _hasBeenSetTracker[(int)DialogCondition_FieldIndex.SecondParameter] = false;
            SecondParameter = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> IDialogCondition.SecondParameter_Property => this.SecondParameter_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> IDialogConditionGetter.SecondParameter_Property => this.SecondParameter_Property;
        #endregion
        #region ThirdParameter
        protected Int32 _ThirdParameter;
        protected PropertyForwarder<DialogCondition, Int32> _ThirdParameterForwarder;
        public INotifyingSetItem<Int32> ThirdParameter_Property => _ThirdParameterForwarder ?? (_ThirdParameterForwarder = new PropertyForwarder<DialogCondition, Int32>(this, (int)DialogCondition_FieldIndex.ThirdParameter));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 ThirdParameter
        {
            get => this._ThirdParameter;
            set => this.SetThirdParameter(value);
        }
        protected void SetThirdParameter(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogCondition_FieldIndex.ThirdParameter];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ThirdParameter == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogCondition_FieldIndex.ThirdParameter] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = ThirdParameter;
                _ThirdParameter = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)DialogCondition_FieldIndex.ThirdParameter,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ThirdParameter = item;
            }
        }
        protected void UnsetThirdParameter()
        {
            _hasBeenSetTracker[(int)DialogCondition_FieldIndex.ThirdParameter] = false;
            ThirdParameter = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> IDialogCondition.ThirdParameter_Property => this.ThirdParameter_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> IDialogConditionGetter.ThirdParameter_Property => this.ThirdParameter_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => DialogConditionCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => DialogConditionCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => DialogConditionCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            DialogConditionCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<DialogCondition>.GetEqualsMask(DialogCondition rhs) => DialogConditionCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IDialogConditionGetter>.GetEqualsMask(IDialogConditionGetter rhs) => DialogConditionCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return DialogConditionCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            DialogCondition_Mask<bool> printMask = null)
        {
            return DialogConditionCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            DialogConditionCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public DialogCondition_Mask<bool> GetHasBeenSetMask()
        {
            return DialogConditionCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is DialogCondition rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogCondition rhs)
        {
            if (rhs == null) return false;
            if (this.CompareOperator != rhs.CompareOperator) return false;
            if (this.Flags != rhs.Flags) return false;
            if (!this.Fluff.EqualsFast(rhs.Fluff)) return false;
            if (!this.ComparisonValue.EqualsWithin(rhs.ComparisonValue)) return false;
            if (this.Function != rhs.Function) return false;
            if (this.FirstParameter != rhs.FirstParameter) return false;
            if (this.SecondParameter != rhs.SecondParameter) return false;
            if (this.ThirdParameter != rhs.ThirdParameter) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(CompareOperator).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ComparisonValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Function).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FirstParameter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SecondParameter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ThirdParameter).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static DialogCondition Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static DialogCondition Create_XML(
            XElement root,
            out DialogCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = DialogCondition_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static DialogCondition Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new DialogCondition();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DialogCondition Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static DialogCondition Create_XML(
            string path,
            out DialogCondition_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static DialogCondition Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static DialogCondition Create_XML(
            Stream stream,
            out DialogCondition_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<DialogCondition>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out DialogCondition_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<DialogCondition>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = DialogCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out DialogCondition_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out DialogCondition_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out DialogCondition_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = DialogCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out DialogCondition_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out DialogCondition_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            DialogConditionCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            DialogCondition item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "CompareOperator":
                    try
                    {
                        errorMask?.PushIndex((int)DialogCondition_FieldIndex.CompareOperator);
                        if (EnumXmlTranslation<CompareOperator>.Instance.Parse(
                            root: root,
                            item: out CompareOperator CompareOperatorParse,
                            errorMask: errorMask))
                        {
                            item.CompareOperator = CompareOperatorParse;
                        }
                        else
                        {
                            item.UnsetCompareOperator();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)DialogCondition_FieldIndex.Flags);
                        if (EnumXmlTranslation<DialogCondition.Flag>.Instance.Parse(
                            root: root,
                            item: out DialogCondition.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)DialogCondition_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.UnsetFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ComparisonValue":
                    try
                    {
                        errorMask?.PushIndex((int)DialogCondition_FieldIndex.ComparisonValue);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ComparisonValueParse,
                            errorMask: errorMask))
                        {
                            item.ComparisonValue = ComparisonValueParse;
                        }
                        else
                        {
                            item.UnsetComparisonValue();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Function":
                    try
                    {
                        errorMask?.PushIndex((int)DialogCondition_FieldIndex.Function);
                        if (EnumXmlTranslation<Function>.Instance.Parse(
                            root: root,
                            item: out Function FunctionParse,
                            errorMask: errorMask))
                        {
                            item.Function = FunctionParse;
                        }
                        else
                        {
                            item.UnsetFunction();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FirstParameter":
                    try
                    {
                        errorMask?.PushIndex((int)DialogCondition_FieldIndex.FirstParameter);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 FirstParameterParse,
                            errorMask: errorMask))
                        {
                            item.FirstParameter = FirstParameterParse;
                        }
                        else
                        {
                            item.UnsetFirstParameter();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondParameter":
                    try
                    {
                        errorMask?.PushIndex((int)DialogCondition_FieldIndex.SecondParameter);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 SecondParameterParse,
                            errorMask: errorMask))
                        {
                            item.SecondParameter = SecondParameterParse;
                        }
                        else
                        {
                            item.UnsetSecondParameter();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThirdParameter":
                    try
                    {
                        errorMask?.PushIndex((int)DialogCondition_FieldIndex.ThirdParameter);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 ThirdParameterParse,
                            errorMask: errorMask))
                        {
                            item.ThirdParameter = ThirdParameterParse;
                        }
                        else
                        {
                            item.UnsetThirdParameter();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        #region IPropertySupporter CompareOperator
        protected ObjectCentralizationSubscriptions<CompareOperator> _CompareOperator_subscriptions;
        CompareOperator IPropertySupporter<CompareOperator>.Get(int index)
        {
            return GetCompareOperator(index: index);
        }

        protected CompareOperator GetCompareOperator(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    return CompareOperator;
                default:
                    throw new ArgumentException($"Unknown index for field type CompareOperator: {index}");
            }
        }

        void IPropertySupporter<CompareOperator>.Set(
            int index,
            CompareOperator item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetCompareOperator(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetCompareOperator(
            int index,
            CompareOperator item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    SetCompareOperator(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type CompareOperator: {index}");
            }
        }

        bool IPropertySupporter<CompareOperator>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<CompareOperator>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<CompareOperator>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetCompareOperator(
                index: index,
                cmds: cmds);
        }

        protected void UnsetCompareOperator(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    _hasBeenSetTracker[index] = false;
                    CompareOperator = default(CompareOperator);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type CompareOperator: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<CompareOperator>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<CompareOperator> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_CompareOperator_subscriptions == null)
            {
                _CompareOperator_subscriptions = new ObjectCentralizationSubscriptions<CompareOperator>();
            }
            _CompareOperator_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<CompareOperator>.Unsubscribe(
            int index,
            object owner)
        {
            _CompareOperator_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<CompareOperator>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        CompareOperator IPropertySupporter<CompareOperator>.DefaultValue(int index)
        {
            return DefaultValueCompareOperator(index: index);
        }

        protected CompareOperator DefaultValueCompareOperator(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    return default(CompareOperator);
                default:
                    throw new ArgumentException($"Unknown index for field type CompareOperator: {index}");
            }
        }

        #endregion

        #region IPropertySupporter DialogCondition.Flag
        protected ObjectCentralizationSubscriptions<DialogCondition.Flag> _DialogConditionFlag_subscriptions;
        DialogCondition.Flag IPropertySupporter<DialogCondition.Flag>.Get(int index)
        {
            return GetDialogConditionFlag(index: index);
        }

        protected DialogCondition.Flag GetDialogConditionFlag(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogCondition.Flag: {index}");
            }
        }

        void IPropertySupporter<DialogCondition.Flag>.Set(
            int index,
            DialogCondition.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetDialogConditionFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetDialogConditionFlag(
            int index,
            DialogCondition.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogCondition.Flag: {index}");
            }
        }

        bool IPropertySupporter<DialogCondition.Flag>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<DialogCondition.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<DialogCondition.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetDialogConditionFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetDialogConditionFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Flags:
                    _hasBeenSetTracker[index] = false;
                    Flags = default(DialogCondition.Flag);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogCondition.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DialogCondition.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<DialogCondition.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_DialogConditionFlag_subscriptions == null)
            {
                _DialogConditionFlag_subscriptions = new ObjectCentralizationSubscriptions<DialogCondition.Flag>();
            }
            _DialogConditionFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DialogCondition.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _DialogConditionFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<DialogCondition.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        DialogCondition.Flag IPropertySupporter<DialogCondition.Flag>.DefaultValue(int index)
        {
            return DefaultValueDialogConditionFlag(index: index);
        }

        protected DialogCondition.Flag DefaultValueDialogConditionFlag(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Flags:
                    return default(DialogCondition.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type DialogCondition.Flag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte[]
        protected ObjectCentralizationSubscriptions<Byte[]> _ByteArr_subscriptions;
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected Byte[] GetByteArr(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Fluff:
                    return Fluff;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Fluff:
                    SetFluff(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Fluff:
                    _hasBeenSetTracker[index] = false;
                    Fluff = default(Byte[]);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected Byte[] DefaultValueByteArr(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Fluff:
                    return default(Byte[]);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.ComparisonValue:
                    return ComparisonValue;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.ComparisonValue:
                    SetComparisonValue(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.ComparisonValue:
                    _hasBeenSetTracker[index] = false;
                    ComparisonValue = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.ComparisonValue:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Function
        protected ObjectCentralizationSubscriptions<Function> _Function_subscriptions;
        Function IPropertySupporter<Function>.Get(int index)
        {
            return GetFunction(index: index);
        }

        protected Function GetFunction(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Function:
                    return Function;
                default:
                    throw new ArgumentException($"Unknown index for field type Function: {index}");
            }
        }

        void IPropertySupporter<Function>.Set(
            int index,
            Function item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetFunction(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetFunction(
            int index,
            Function item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Function:
                    SetFunction(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Function: {index}");
            }
        }

        bool IPropertySupporter<Function>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Function>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Function>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetFunction(
                index: index,
                cmds: cmds);
        }

        protected void UnsetFunction(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Function:
                    _hasBeenSetTracker[index] = false;
                    Function = default(Function);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Function: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Function>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Function> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Function_subscriptions == null)
            {
                _Function_subscriptions = new ObjectCentralizationSubscriptions<Function>();
            }
            _Function_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Function>.Unsubscribe(
            int index,
            object owner)
        {
            _Function_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Function>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Function IPropertySupporter<Function>.DefaultValue(int index)
        {
            return DefaultValueFunction(index: index);
        }

        protected Function DefaultValueFunction(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.Function:
                    return default(Function);
                default:
                    throw new ArgumentException($"Unknown index for field type Function: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Int32
        protected ObjectCentralizationSubscriptions<Int32> _Int32_subscriptions;
        Int32 IPropertySupporter<Int32>.Get(int index)
        {
            return GetInt32(index: index);
        }

        protected Int32 GetInt32(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.FirstParameter:
                    return FirstParameter;
                case DialogCondition_FieldIndex.SecondParameter:
                    return SecondParameter;
                case DialogCondition_FieldIndex.ThirdParameter:
                    return ThirdParameter;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        void IPropertySupporter<Int32>.Set(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetInt32(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.FirstParameter:
                    SetFirstParameter(item, hasBeenSet, cmds);
                    break;
                case DialogCondition_FieldIndex.SecondParameter:
                    SetSecondParameter(item, hasBeenSet, cmds);
                    break;
                case DialogCondition_FieldIndex.ThirdParameter:
                    SetThirdParameter(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        bool IPropertySupporter<Int32>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Int32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Int32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.FirstParameter:
                    _hasBeenSetTracker[index] = false;
                    FirstParameter = default(Int32);
                    break;
                case DialogCondition_FieldIndex.SecondParameter:
                    _hasBeenSetTracker[index] = false;
                    SecondParameter = default(Int32);
                    break;
                case DialogCondition_FieldIndex.ThirdParameter:
                    _hasBeenSetTracker[index] = false;
                    ThirdParameter = default(Int32);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Int32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Int32_subscriptions == null)
            {
                _Int32_subscriptions = new ObjectCentralizationSubscriptions<Int32>();
            }
            _Int32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Unsubscribe(
            int index,
            object owner)
        {
            _Int32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Int32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Int32 IPropertySupporter<Int32>.DefaultValue(int index)
        {
            return DefaultValueInt32(index: index);
        }

        protected Int32 DefaultValueInt32(int index)
        {
            switch ((DialogCondition_FieldIndex)index)
            {
                case DialogCondition_FieldIndex.FirstParameter:
                case DialogCondition_FieldIndex.SecondParameter:
                case DialogCondition_FieldIndex.ThirdParameter:
                    return default(Int32);
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = DialogCondition_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static DialogCondition Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static DialogCondition Create_Binary(
            MutagenFrame frame,
            out DialogCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogCondition_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static DialogCondition Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new DialogCondition();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(DialogCondition_Registration.CTDA_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DialogCondition Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static DialogCondition Create_Binary(
            string path,
            out DialogCondition_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static DialogCondition Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static DialogCondition Create_Binary(
            Stream stream,
            out DialogCondition_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out DialogCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out DialogCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out DialogCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            DialogConditionCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_CompareOperator_Custom(
            MutagenFrame frame,
            DialogCondition item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_CompareOperator_Custom(
            MutagenWriter writer,
            DialogCondition item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_CompareOperator(
            MutagenWriter writer,
            DialogCondition item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_CompareOperator_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        static partial void FillBinary_Flags_Custom(
            MutagenFrame frame,
            DialogCondition item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_Flags_Custom(
            MutagenWriter writer,
            DialogCondition item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_Flags(
            MutagenWriter writer,
            DialogCondition item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_Flags_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            DialogCondition item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_CompareOperator_Custom(
                frame: frame,
                item: item,
                errorMask: errorMask);
            FillBinary_Flags_Custom(
                frame: frame,
                item: item,
                errorMask: errorMask);
            try
            {
                errorMask?.PushIndex((int)DialogCondition_FieldIndex.Fluff);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out Byte[] FluffParse,
                    errorMask: errorMask))
                {
                    item.Fluff = FluffParse;
                }
                else
                {
                    item.UnsetFluff();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)DialogCondition_FieldIndex.ComparisonValue);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single ComparisonValueParse,
                    errorMask: errorMask))
                {
                    item.ComparisonValue = ComparisonValueParse;
                }
                else
                {
                    item.UnsetComparisonValue();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)DialogCondition_FieldIndex.Function);
                if (EnumBinaryTranslation<Function>.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out Function FunctionParse,
                    errorMask: errorMask))
                {
                    item.Function = FunctionParse;
                }
                else
                {
                    item.UnsetFunction();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)DialogCondition_FieldIndex.FirstParameter);
                if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Int32 FirstParameterParse,
                    errorMask: errorMask))
                {
                    item.FirstParameter = FirstParameterParse;
                }
                else
                {
                    item.UnsetFirstParameter();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)DialogCondition_FieldIndex.SecondParameter);
                if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Int32 SecondParameterParse,
                    errorMask: errorMask))
                {
                    item.SecondParameter = SecondParameterParse;
                }
                else
                {
                    item.UnsetSecondParameter();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)DialogCondition_FieldIndex.ThirdParameter);
                if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Int32 ThirdParameterParse,
                    errorMask: errorMask))
                {
                    item.ThirdParameter = ThirdParameterParse;
                }
                else
                {
                    item.UnsetThirdParameter();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public DialogCondition Copy(
            DialogCondition_CopyMask copyMask = null,
            IDialogConditionGetter def = null)
        {
            return DialogCondition.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static DialogCondition Copy(
            IDialogCondition item,
            DialogCondition_CopyMask copyMask = null,
            IDialogConditionGetter def = null)
        {
            DialogCondition ret;
            if (item.GetType().Equals(typeof(DialogCondition)))
            {
                ret = new DialogCondition();
            }
            else
            {
                ret = (DialogCondition)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static DialogCondition Copy_ToLoqui(
            IDialogConditionGetter item,
            DialogCondition_CopyMask copyMask = null,
            IDialogConditionGetter def = null)
        {
            DialogCondition ret;
            if (item.GetType().Equals(typeof(DialogCondition)))
            {
                ret = new DialogCondition() as DialogCondition;
            }
            else
            {
                ret = (DialogCondition)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IDialogConditionGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDialogConditionGetter rhs,
            DialogCondition_CopyMask copyMask,
            IDialogConditionGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDialogConditionGetter rhs,
            out DialogCondition_ErrorMask errorMask,
            DialogCondition_CopyMask copyMask = null,
            IDialogConditionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogConditionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = DialogCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IDialogConditionGetter rhs,
            ErrorMaskBuilder errorMask,
            DialogCondition_CopyMask copyMask = null,
            IDialogConditionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            DialogConditionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    this.SetCompareOperator(
                        (CompareOperator)obj,
                        cmds: cmds);
                    break;
                case DialogCondition_FieldIndex.Flags:
                    this.SetFlags(
                        (DialogCondition.Flag)obj,
                        cmds: cmds);
                    break;
                case DialogCondition_FieldIndex.Fluff:
                    this.SetFluff(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case DialogCondition_FieldIndex.ComparisonValue:
                    this.SetComparisonValue(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case DialogCondition_FieldIndex.Function:
                    this.SetFunction(
                        (Function)obj,
                        cmds: cmds);
                    break;
                case DialogCondition_FieldIndex.FirstParameter:
                    this.SetFirstParameter(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case DialogCondition_FieldIndex.SecondParameter:
                    this.SetSecondParameter(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case DialogCondition_FieldIndex.ThirdParameter:
                    this.SetThirdParameter(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            DialogConditionCommon.Clear(this, cmds);
        }


        public static DialogCondition Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new DialogCondition();
            foreach (var pair in fields)
            {
                CopyInInternal_DialogCondition(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_DialogCondition(DialogCondition obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out DialogCondition_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    obj.SetCompareOperator(
                        (CompareOperator)pair.Value,
                        cmds: null);
                    break;
                case DialogCondition_FieldIndex.Flags:
                    obj.SetFlags(
                        (DialogCondition.Flag)pair.Value,
                        cmds: null);
                    break;
                case DialogCondition_FieldIndex.Fluff:
                    obj.SetFluff(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case DialogCondition_FieldIndex.ComparisonValue:
                    obj.SetComparisonValue(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case DialogCondition_FieldIndex.Function:
                    obj.SetFunction(
                        (Function)pair.Value,
                        cmds: null);
                    break;
                case DialogCondition_FieldIndex.FirstParameter:
                    obj.SetFirstParameter(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case DialogCondition_FieldIndex.SecondParameter:
                    obj.SetSecondParameter(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case DialogCondition_FieldIndex.ThirdParameter:
                    obj.SetThirdParameter(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, DialogCondition obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogCondition : IDialogConditionGetter, ILoquiClass<IDialogCondition, IDialogConditionGetter>, ILoquiClass<DialogCondition, IDialogConditionGetter>
    {
        new CompareOperator CompareOperator { get; set; }
        new INotifyingItem<CompareOperator> CompareOperator_Property { get; }

        new DialogCondition.Flag Flags { get; set; }
        new INotifyingItem<DialogCondition.Flag> Flags_Property { get; }

        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

        new Single ComparisonValue { get; set; }
        new INotifyingItem<Single> ComparisonValue_Property { get; }

        new Function Function { get; set; }
        new INotifyingItem<Function> Function_Property { get; }

        new Int32 FirstParameter { get; set; }
        new INotifyingItem<Int32> FirstParameter_Property { get; }

        new Int32 SecondParameter { get; set; }
        new INotifyingItem<Int32> SecondParameter_Property { get; }

        new Int32 ThirdParameter { get; set; }
        new INotifyingItem<Int32> ThirdParameter_Property { get; }

    }

    public partial interface IDialogConditionGetter : ILoquiObject
    {
        #region CompareOperator
        CompareOperator CompareOperator { get; }
        INotifyingItemGetter<CompareOperator> CompareOperator_Property { get; }

        #endregion
        #region Flags
        DialogCondition.Flag Flags { get; }
        INotifyingItemGetter<DialogCondition.Flag> Flags_Property { get; }

        #endregion
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region ComparisonValue
        Single ComparisonValue { get; }
        INotifyingItemGetter<Single> ComparisonValue_Property { get; }

        #endregion
        #region Function
        Function Function { get; }
        INotifyingItemGetter<Function> Function_Property { get; }

        #endregion
        #region FirstParameter
        Int32 FirstParameter { get; }
        INotifyingItemGetter<Int32> FirstParameter_Property { get; }

        #endregion
        #region SecondParameter
        Int32 SecondParameter { get; }
        INotifyingItemGetter<Int32> SecondParameter_Property { get; }

        #endregion
        #region ThirdParameter
        Int32 ThirdParameter { get; }
        INotifyingItemGetter<Int32> ThirdParameter_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogCondition_FieldIndex
    {
        CompareOperator = 0,
        Flags = 1,
        Fluff = 2,
        ComparisonValue = 3,
        Function = 4,
        FirstParameter = 5,
        SecondParameter = 6,
        ThirdParameter = 7,
    }
    #endregion

    #region Registration
    public class DialogCondition_Registration : ILoquiRegistration
    {
        public static readonly DialogCondition_Registration Instance = new DialogCondition_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 151,
            version: 0);

        public const string GUID = "d744c161-2c6d-42a0-ada5-4cef3c179f12";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(DialogCondition_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogCondition_ErrorMask);

        public static readonly Type ClassType = typeof(DialogCondition);

        public static readonly Type GetterType = typeof(IDialogConditionGetter);

        public static readonly Type SetterType = typeof(IDialogCondition);

        public static readonly Type CommonType = typeof(DialogConditionCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogCondition";

        public const string Name = "DialogCondition";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "COMPAREOPERATOR":
                    return (ushort)DialogCondition_FieldIndex.CompareOperator;
                case "FLAGS":
                    return (ushort)DialogCondition_FieldIndex.Flags;
                case "FLUFF":
                    return (ushort)DialogCondition_FieldIndex.Fluff;
                case "COMPARISONVALUE":
                    return (ushort)DialogCondition_FieldIndex.ComparisonValue;
                case "FUNCTION":
                    return (ushort)DialogCondition_FieldIndex.Function;
                case "FIRSTPARAMETER":
                    return (ushort)DialogCondition_FieldIndex.FirstParameter;
                case "SECONDPARAMETER":
                    return (ushort)DialogCondition_FieldIndex.SecondParameter;
                case "THIRDPARAMETER":
                    return (ushort)DialogCondition_FieldIndex.ThirdParameter;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                case DialogCondition_FieldIndex.Flags:
                case DialogCondition_FieldIndex.Fluff:
                case DialogCondition_FieldIndex.ComparisonValue:
                case DialogCondition_FieldIndex.Function:
                case DialogCondition_FieldIndex.FirstParameter:
                case DialogCondition_FieldIndex.SecondParameter:
                case DialogCondition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                case DialogCondition_FieldIndex.Flags:
                case DialogCondition_FieldIndex.Fluff:
                case DialogCondition_FieldIndex.ComparisonValue:
                case DialogCondition_FieldIndex.Function:
                case DialogCondition_FieldIndex.FirstParameter:
                case DialogCondition_FieldIndex.SecondParameter:
                case DialogCondition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                case DialogCondition_FieldIndex.Flags:
                case DialogCondition_FieldIndex.Fluff:
                case DialogCondition_FieldIndex.ComparisonValue:
                case DialogCondition_FieldIndex.Function:
                case DialogCondition_FieldIndex.FirstParameter:
                case DialogCondition_FieldIndex.SecondParameter:
                case DialogCondition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    return "CompareOperator";
                case DialogCondition_FieldIndex.Flags:
                    return "Flags";
                case DialogCondition_FieldIndex.Fluff:
                    return "Fluff";
                case DialogCondition_FieldIndex.ComparisonValue:
                    return "ComparisonValue";
                case DialogCondition_FieldIndex.Function:
                    return "Function";
                case DialogCondition_FieldIndex.FirstParameter:
                    return "FirstParameter";
                case DialogCondition_FieldIndex.SecondParameter:
                    return "SecondParameter";
                case DialogCondition_FieldIndex.ThirdParameter:
                    return "ThirdParameter";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                case DialogCondition_FieldIndex.Flags:
                case DialogCondition_FieldIndex.Fluff:
                case DialogCondition_FieldIndex.ComparisonValue:
                case DialogCondition_FieldIndex.Function:
                case DialogCondition_FieldIndex.FirstParameter:
                case DialogCondition_FieldIndex.SecondParameter:
                case DialogCondition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                case DialogCondition_FieldIndex.Flags:
                case DialogCondition_FieldIndex.Fluff:
                case DialogCondition_FieldIndex.ComparisonValue:
                case DialogCondition_FieldIndex.Function:
                case DialogCondition_FieldIndex.FirstParameter:
                case DialogCondition_FieldIndex.SecondParameter:
                case DialogCondition_FieldIndex.ThirdParameter:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    return typeof(CompareOperator);
                case DialogCondition_FieldIndex.Flags:
                    return typeof(DialogCondition.Flag);
                case DialogCondition_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case DialogCondition_FieldIndex.ComparisonValue:
                    return typeof(Single);
                case DialogCondition_FieldIndex.Function:
                    return typeof(Function);
                case DialogCondition_FieldIndex.FirstParameter:
                    return typeof(Int32);
                case DialogCondition_FieldIndex.SecondParameter:
                    return typeof(Int32);
                case DialogCondition_FieldIndex.ThirdParameter:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CTDA_HEADER;
        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class DialogConditionCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IDialogCondition item,
            IDialogConditionGetter rhs,
            IDialogConditionGetter def,
            ErrorMaskBuilder errorMask,
            DialogCondition_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.CompareOperator ?? true)
            {
                errorMask.PushIndex((int)DialogCondition_FieldIndex.CompareOperator);
                try
                {
                    item.CompareOperator_Property.Set(
                        value: rhs.CompareOperator,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)DialogCondition_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                errorMask.PushIndex((int)DialogCondition_FieldIndex.Fluff);
                try
                {
                    item.Fluff_Property.Set(
                        value: rhs.Fluff,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.ComparisonValue ?? true)
            {
                errorMask.PushIndex((int)DialogCondition_FieldIndex.ComparisonValue);
                try
                {
                    item.ComparisonValue_Property.Set(
                        value: rhs.ComparisonValue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Function ?? true)
            {
                errorMask.PushIndex((int)DialogCondition_FieldIndex.Function);
                try
                {
                    item.Function_Property.Set(
                        value: rhs.Function,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FirstParameter ?? true)
            {
                errorMask.PushIndex((int)DialogCondition_FieldIndex.FirstParameter);
                try
                {
                    item.FirstParameter_Property.Set(
                        value: rhs.FirstParameter,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SecondParameter ?? true)
            {
                errorMask.PushIndex((int)DialogCondition_FieldIndex.SecondParameter);
                try
                {
                    item.SecondParameter_Property.Set(
                        value: rhs.SecondParameter,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.ThirdParameter ?? true)
            {
                errorMask.PushIndex((int)DialogCondition_FieldIndex.ThirdParameter);
                try
                {
                    item.ThirdParameter_Property.Set(
                        value: rhs.ThirdParameter,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IDialogCondition obj,
            NotifyingFireParameters cmds = null)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                case DialogCondition_FieldIndex.Flags:
                case DialogCondition_FieldIndex.Fluff:
                case DialogCondition_FieldIndex.ComparisonValue:
                case DialogCondition_FieldIndex.Function:
                case DialogCondition_FieldIndex.FirstParameter:
                case DialogCondition_FieldIndex.SecondParameter:
                case DialogCondition_FieldIndex.ThirdParameter:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IDialogCondition obj,
            NotifyingUnsetParameters cmds = null)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    obj.CompareOperator = default(CompareOperator);
                    break;
                case DialogCondition_FieldIndex.Flags:
                    obj.Flags = default(DialogCondition.Flag);
                    break;
                case DialogCondition_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case DialogCondition_FieldIndex.ComparisonValue:
                    obj.ComparisonValue = default(Single);
                    break;
                case DialogCondition_FieldIndex.Function:
                    obj.Function = default(Function);
                    break;
                case DialogCondition_FieldIndex.FirstParameter:
                    obj.FirstParameter = default(Int32);
                    break;
                case DialogCondition_FieldIndex.SecondParameter:
                    obj.SecondParameter = default(Int32);
                    break;
                case DialogCondition_FieldIndex.ThirdParameter:
                    obj.ThirdParameter = default(Int32);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IDialogCondition obj)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                case DialogCondition_FieldIndex.Flags:
                case DialogCondition_FieldIndex.Fluff:
                case DialogCondition_FieldIndex.ComparisonValue:
                case DialogCondition_FieldIndex.Function:
                case DialogCondition_FieldIndex.FirstParameter:
                case DialogCondition_FieldIndex.SecondParameter:
                case DialogCondition_FieldIndex.ThirdParameter:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IDialogConditionGetter obj)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    return obj.CompareOperator;
                case DialogCondition_FieldIndex.Flags:
                    return obj.Flags;
                case DialogCondition_FieldIndex.Fluff:
                    return obj.Fluff;
                case DialogCondition_FieldIndex.ComparisonValue:
                    return obj.ComparisonValue;
                case DialogCondition_FieldIndex.Function:
                    return obj.Function;
                case DialogCondition_FieldIndex.FirstParameter:
                    return obj.FirstParameter;
                case DialogCondition_FieldIndex.SecondParameter:
                    return obj.SecondParameter;
                case DialogCondition_FieldIndex.ThirdParameter:
                    return obj.ThirdParameter;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IDialogCondition item,
            NotifyingUnsetParameters cmds = null)
        {
            item.CompareOperator = default(CompareOperator);
            item.Flags = default(DialogCondition.Flag);
            item.Fluff = default(Byte[]);
            item.ComparisonValue = default(Single);
            item.Function = default(Function);
            item.FirstParameter = default(Int32);
            item.SecondParameter = default(Int32);
            item.ThirdParameter = default(Int32);
        }

        public static DialogCondition_Mask<bool> GetEqualsMask(
            this IDialogConditionGetter item,
            IDialogConditionGetter rhs)
        {
            var ret = new DialogCondition_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IDialogConditionGetter item,
            IDialogConditionGetter rhs,
            DialogCondition_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.CompareOperator = item.CompareOperator == rhs.CompareOperator;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            ret.ComparisonValue = item.ComparisonValue == rhs.ComparisonValue;
            ret.Function = item.Function == rhs.Function;
            ret.FirstParameter = item.FirstParameter == rhs.FirstParameter;
            ret.SecondParameter = item.SecondParameter == rhs.SecondParameter;
            ret.ThirdParameter = item.ThirdParameter == rhs.ThirdParameter;
        }

        public static string ToString(
            this IDialogConditionGetter item,
            string name = null,
            DialogCondition_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IDialogConditionGetter item,
            FileGeneration fg,
            string name = null,
            DialogCondition_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(DialogCondition)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(DialogCondition)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.CompareOperator ?? true)
                {
                    fg.AppendLine($"CompareOperator => {item.CompareOperator}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.ComparisonValue ?? true)
                {
                    fg.AppendLine($"ComparisonValue => {item.ComparisonValue}");
                }
                if (printMask?.Function ?? true)
                {
                    fg.AppendLine($"Function => {item.Function}");
                }
                if (printMask?.FirstParameter ?? true)
                {
                    fg.AppendLine($"FirstParameter => {item.FirstParameter}");
                }
                if (printMask?.SecondParameter ?? true)
                {
                    fg.AppendLine($"SecondParameter => {item.SecondParameter}");
                }
                if (printMask?.ThirdParameter ?? true)
                {
                    fg.AppendLine($"ThirdParameter => {item.ThirdParameter}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IDialogConditionGetter item,
            DialogCondition_Mask<bool?> checkMask)
        {
            return true;
        }

        public static DialogCondition_Mask<bool> GetHasBeenSetMask(IDialogConditionGetter item)
        {
            var ret = new DialogCondition_Mask<bool>();
            ret.CompareOperator = true;
            ret.Flags = true;
            ret.Fluff = true;
            ret.ComparisonValue = true;
            ret.Function = true;
            ret.FirstParameter = true;
            ret.SecondParameter = true;
            ret.ThirdParameter = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IDialogConditionGetter item,
            bool doMasks,
            out DialogCondition_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = DialogCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IDialogConditionGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogCondition");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogCondition");
            }
            EnumXmlTranslation<CompareOperator>.Instance.Write(
                node: elem,
                name: nameof(item.CompareOperator),
                item: item.CompareOperator_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.CompareOperator,
                errorMask: errorMask);
            EnumXmlTranslation<DialogCondition.Flag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.Flags,
                errorMask: errorMask);
            ByteArrayXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Fluff),
                item: item.Fluff_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.Fluff,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.ComparisonValue),
                item: item.ComparisonValue_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.ComparisonValue,
                errorMask: errorMask);
            EnumXmlTranslation<Function>.Instance.Write(
                node: elem,
                name: nameof(item.Function),
                item: item.Function_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.Function,
                errorMask: errorMask);
            Int32XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.FirstParameter),
                item: item.FirstParameter_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.FirstParameter,
                errorMask: errorMask);
            Int32XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.SecondParameter),
                item: item.SecondParameter_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.SecondParameter,
                errorMask: errorMask);
            Int32XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.ThirdParameter),
                item: item.ThirdParameter_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.ThirdParameter,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            DialogCondition item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out DialogCondition_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = DialogCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            DialogCondition item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: DialogCondition_Registration.CTDA_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            DialogCondition item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            DialogCondition.WriteBinary_CompareOperator(
                writer: writer,
                item: item,
                errorMask: errorMask);
            DialogCondition.WriteBinary_Flags(
                writer: writer,
                item: item,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.Fluff,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ComparisonValue_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.ComparisonValue,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Function>.Instance.Write(
                writer,
                item.Function_Property,
                length: 4,
                fieldIndex: (int)DialogCondition_FieldIndex.Function,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FirstParameter_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.FirstParameter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SecondParameter_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.SecondParameter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ThirdParameter_Property,
                fieldIndex: (int)DialogCondition_FieldIndex.ThirdParameter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class DialogCondition_Mask<T> : IMask<T>, IEquatable<DialogCondition_Mask<T>>
    {
        #region Ctors
        public DialogCondition_Mask()
        {
        }

        public DialogCondition_Mask(T initialValue)
        {
            this.CompareOperator = initialValue;
            this.Flags = initialValue;
            this.Fluff = initialValue;
            this.ComparisonValue = initialValue;
            this.Function = initialValue;
            this.FirstParameter = initialValue;
            this.SecondParameter = initialValue;
            this.ThirdParameter = initialValue;
        }
        #endregion

        #region Members
        public T CompareOperator;
        public T Flags;
        public T Fluff;
        public T ComparisonValue;
        public T Function;
        public T FirstParameter;
        public T SecondParameter;
        public T ThirdParameter;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DialogCondition_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogCondition_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.CompareOperator, rhs.CompareOperator)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.ComparisonValue, rhs.ComparisonValue)) return false;
            if (!object.Equals(this.Function, rhs.Function)) return false;
            if (!object.Equals(this.FirstParameter, rhs.FirstParameter)) return false;
            if (!object.Equals(this.SecondParameter, rhs.SecondParameter)) return false;
            if (!object.Equals(this.ThirdParameter, rhs.ThirdParameter)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.CompareOperator?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.ComparisonValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Function?.GetHashCode());
            ret = ret.CombineHashCode(this.FirstParameter?.GetHashCode());
            ret = ret.CombineHashCode(this.SecondParameter?.GetHashCode());
            ret = ret.CombineHashCode(this.ThirdParameter?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.CompareOperator)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Fluff)) return false;
            if (!eval(this.ComparisonValue)) return false;
            if (!eval(this.Function)) return false;
            if (!eval(this.FirstParameter)) return false;
            if (!eval(this.SecondParameter)) return false;
            if (!eval(this.ThirdParameter)) return false;
            return true;
        }
        #endregion

        #region Translate
        public DialogCondition_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DialogCondition_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DialogCondition_Mask<R> obj, Func<T, R> eval)
        {
            obj.CompareOperator = eval(this.CompareOperator);
            obj.Flags = eval(this.Flags);
            obj.Fluff = eval(this.Fluff);
            obj.ComparisonValue = eval(this.ComparisonValue);
            obj.Function = eval(this.Function);
            obj.FirstParameter = eval(this.FirstParameter);
            obj.SecondParameter = eval(this.SecondParameter);
            obj.ThirdParameter = eval(this.ThirdParameter);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DialogCondition_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DialogCondition_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(DialogCondition_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.CompareOperator ?? true)
                {
                    fg.AppendLine($"CompareOperator => {CompareOperator}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.ComparisonValue ?? true)
                {
                    fg.AppendLine($"ComparisonValue => {ComparisonValue}");
                }
                if (printMask?.Function ?? true)
                {
                    fg.AppendLine($"Function => {Function}");
                }
                if (printMask?.FirstParameter ?? true)
                {
                    fg.AppendLine($"FirstParameter => {FirstParameter}");
                }
                if (printMask?.SecondParameter ?? true)
                {
                    fg.AppendLine($"SecondParameter => {SecondParameter}");
                }
                if (printMask?.ThirdParameter ?? true)
                {
                    fg.AppendLine($"ThirdParameter => {ThirdParameter}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DialogCondition_ErrorMask : IErrorMask, IErrorMask<DialogCondition_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception CompareOperator;
        public Exception Flags;
        public Exception Fluff;
        public Exception ComparisonValue;
        public Exception Function;
        public Exception FirstParameter;
        public Exception SecondParameter;
        public Exception ThirdParameter;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    return CompareOperator;
                case DialogCondition_FieldIndex.Flags:
                    return Flags;
                case DialogCondition_FieldIndex.Fluff:
                    return Fluff;
                case DialogCondition_FieldIndex.ComparisonValue:
                    return ComparisonValue;
                case DialogCondition_FieldIndex.Function:
                    return Function;
                case DialogCondition_FieldIndex.FirstParameter:
                    return FirstParameter;
                case DialogCondition_FieldIndex.SecondParameter:
                    return SecondParameter;
                case DialogCondition_FieldIndex.ThirdParameter:
                    return ThirdParameter;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    this.CompareOperator = ex;
                    break;
                case DialogCondition_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case DialogCondition_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case DialogCondition_FieldIndex.ComparisonValue:
                    this.ComparisonValue = ex;
                    break;
                case DialogCondition_FieldIndex.Function:
                    this.Function = ex;
                    break;
                case DialogCondition_FieldIndex.FirstParameter:
                    this.FirstParameter = ex;
                    break;
                case DialogCondition_FieldIndex.SecondParameter:
                    this.SecondParameter = ex;
                    break;
                case DialogCondition_FieldIndex.ThirdParameter:
                    this.ThirdParameter = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            DialogCondition_FieldIndex enu = (DialogCondition_FieldIndex)index;
            switch (enu)
            {
                case DialogCondition_FieldIndex.CompareOperator:
                    this.CompareOperator = (Exception)obj;
                    break;
                case DialogCondition_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case DialogCondition_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case DialogCondition_FieldIndex.ComparisonValue:
                    this.ComparisonValue = (Exception)obj;
                    break;
                case DialogCondition_FieldIndex.Function:
                    this.Function = (Exception)obj;
                    break;
                case DialogCondition_FieldIndex.FirstParameter:
                    this.FirstParameter = (Exception)obj;
                    break;
                case DialogCondition_FieldIndex.SecondParameter:
                    this.SecondParameter = (Exception)obj;
                    break;
                case DialogCondition_FieldIndex.ThirdParameter:
                    this.ThirdParameter = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (CompareOperator != null) return true;
            if (Flags != null) return true;
            if (Fluff != null) return true;
            if (ComparisonValue != null) return true;
            if (Function != null) return true;
            if (FirstParameter != null) return true;
            if (SecondParameter != null) return true;
            if (ThirdParameter != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("DialogCondition_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"CompareOperator => {CompareOperator}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"ComparisonValue => {ComparisonValue}");
            fg.AppendLine($"Function => {Function}");
            fg.AppendLine($"FirstParameter => {FirstParameter}");
            fg.AppendLine($"SecondParameter => {SecondParameter}");
            fg.AppendLine($"ThirdParameter => {ThirdParameter}");
        }
        #endregion

        #region Combine
        public DialogCondition_ErrorMask Combine(DialogCondition_ErrorMask rhs)
        {
            var ret = new DialogCondition_ErrorMask();
            ret.CompareOperator = this.CompareOperator.Combine(rhs.CompareOperator);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.ComparisonValue = this.ComparisonValue.Combine(rhs.ComparisonValue);
            ret.Function = this.Function.Combine(rhs.Function);
            ret.FirstParameter = this.FirstParameter.Combine(rhs.FirstParameter);
            ret.SecondParameter = this.SecondParameter.Combine(rhs.SecondParameter);
            ret.ThirdParameter = this.ThirdParameter.Combine(rhs.ThirdParameter);
            return ret;
        }
        public static DialogCondition_ErrorMask Combine(DialogCondition_ErrorMask lhs, DialogCondition_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static DialogCondition_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new DialogCondition_ErrorMask();
        }
        #endregion

    }
    public class DialogCondition_CopyMask
    {
        #region Members
        public bool CompareOperator;
        public bool Flags;
        public bool Fluff;
        public bool ComparisonValue;
        public bool Function;
        public bool FirstParameter;
        public bool SecondParameter;
        public bool ThirdParameter;
        #endregion

    }
    #endregion





    #endregion

}
