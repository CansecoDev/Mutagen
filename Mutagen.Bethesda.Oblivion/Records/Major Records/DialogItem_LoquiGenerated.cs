/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogItem : 
        MajorRecord,
        IDialogItem,
        ILoquiObject<DialogItem>,
        ILoquiObjectSetter,
        IPropertySupporter<DialogType>,
        IPropertySupporter<DialogItem.Flag>,
        IPropertySupporter<ScriptFields>,
        IEquatable<DialogItem>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogItem_Registration.Instance;
        public new static DialogItem_Registration Registration => DialogItem_Registration.Instance;

        #region Ctor
        public DialogItem()
        {
            _hasBeenSetTracker[(int)DialogItem_FieldIndex.Script] = true;
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DialogType
        protected DialogType _DialogType;
        protected PropertyForwarder<DialogItem, DialogType> _DialogTypeForwarder;
        public INotifyingSetItem<DialogType> DialogType_Property => _DialogTypeForwarder ?? (_DialogTypeForwarder = new PropertyForwarder<DialogItem, DialogType>(this, (int)DialogItem_FieldIndex.DialogType));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DialogType DialogType
        {
            get => this._DialogType;
            set => this.SetDialogType(value);
        }
        protected void SetDialogType(
            DialogType item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogItem_FieldIndex.DialogType];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && DialogType == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogItem_FieldIndex.DialogType] = hasBeenSet;
            }
            if (_DialogType_subscriptions != null)
            {
                var tmp = DialogType;
                _DialogType = item;
                _DialogType_subscriptions.FireSubscriptions(
                    index: (int)DialogItem_FieldIndex.DialogType,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _DialogType = item;
            }
        }
        protected void UnsetDialogType()
        {
            _hasBeenSetTracker[(int)DialogItem_FieldIndex.DialogType] = false;
            DialogType = default(DialogType);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<DialogType> IDialogItem.DialogType_Property => this.DialogType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<DialogType> IDialogItemGetter.DialogType_Property => this.DialogType_Property;
        #endregion
        #region Flags
        protected DialogItem.Flag _Flags;
        protected PropertyForwarder<DialogItem, DialogItem.Flag> _FlagsForwarder;
        public INotifyingSetItem<DialogItem.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<DialogItem, DialogItem.Flag>(this, (int)DialogItem_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DialogItem.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            DialogItem.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogItem_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogItem_FieldIndex.Flags] = hasBeenSet;
            }
            if (_DialogItemFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _DialogItemFlag_subscriptions.FireSubscriptions(
                    index: (int)DialogItem_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)DialogItem_FieldIndex.Flags] = false;
            Flags = default(DialogItem.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<DialogItem.Flag> IDialogItem.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<DialogItem.Flag> IDialogItemGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Quest
        public FormIDSetLink<Quest> Quest_Property { get; } = new FormIDSetLink<Quest>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Quest Quest { get => Quest_Property.Item; set => Quest_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Quest> IDialogItemGetter.Quest_Property => this.Quest_Property;
        #endregion
        #region PreviousTopic
        public FormIDSetLink<DialogItem> PreviousTopic_Property { get; } = new FormIDSetLink<DialogItem>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DialogItem PreviousTopic { get => PreviousTopic_Property.Item; set => PreviousTopic_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<DialogItem> IDialogItemGetter.PreviousTopic_Property => this.PreviousTopic_Property;
        #endregion
        #region Topics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDSetLink<DialogTopic>> _Topics = new NotifyingList<FormIDSetLink<DialogTopic>>();
        public INotifyingList<FormIDSetLink<DialogTopic>> Topics => _Topics;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<DialogTopic>> TopicsEnumerable
        {
            get => _Topics;
            set => _Topics.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDSetLink<DialogTopic>> IDialogItem.Topics => _Topics;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDSetLink<DialogTopic>> IDialogItemGetter.Topics => _Topics;
        #endregion

        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<DialogResponse> _Responses = new NotifyingList<DialogResponse>();
        public INotifyingList<DialogResponse> Responses => _Responses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<DialogResponse> ResponsesEnumerable
        {
            get => _Responses;
            set => _Responses.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<DialogResponse> IDialogItem.Responses => _Responses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<DialogResponse> IDialogItemGetter.Responses => _Responses;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Condition> _Conditions = new NotifyingList<Condition>();
        public INotifyingList<Condition> Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Condition> ConditionsEnumerable
        {
            get => _Conditions;
            set => _Conditions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Condition> IDialogItem.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Condition> IDialogItemGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Choices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDSetLink<DialogTopic>> _Choices = new NotifyingList<FormIDSetLink<DialogTopic>>();
        public INotifyingList<FormIDSetLink<DialogTopic>> Choices => _Choices;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<DialogTopic>> ChoicesEnumerable
        {
            get => _Choices;
            set => _Choices.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDSetLink<DialogTopic>> IDialogItem.Choices => _Choices;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDSetLink<DialogTopic>> IDialogItemGetter.Choices => _Choices;
        #endregion

        #endregion
        #region LinkFrom
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDSetLink<DialogTopic>> _LinkFrom = new NotifyingList<FormIDSetLink<DialogTopic>>();
        public INotifyingList<FormIDSetLink<DialogTopic>> LinkFrom => _LinkFrom;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<DialogTopic>> LinkFromEnumerable
        {
            get => _LinkFrom;
            set => _LinkFrom.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDSetLink<DialogTopic>> IDialogItem.LinkFrom => _LinkFrom;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDSetLink<DialogTopic>> IDialogItemGetter.LinkFrom => _LinkFrom;
        #endregion

        #endregion
        #region Script
        protected readonly ScriptFields _Script = new ScriptFields();
        protected PropertyForwarder<DialogItem, ScriptFields> _ScriptForwarder;
        public INotifyingSetItemGetter<ScriptFields> Script_Property => _ScriptForwarder ?? (_ScriptForwarder = new PropertyForwarder<DialogItem, ScriptFields>(this, (int)DialogItem_FieldIndex.Script));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptFields Script
        {
            get => this._Script;
            protected set => this.SetScript(value);
        }
        protected void SetScript(
            ScriptFields item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            this._Script.CopyFieldsFrom(
                rhs: item,
                def: null,
                cmds: null,
                copyMask: null,
                doMasks: false,
                errorMask: out var errMask);
        }
        protected void UnsetScript()
        {
            _hasBeenSetTracker[(int)DialogItem_FieldIndex.Script] = false;
            Script = default(ScriptFields);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<ScriptFields> IDialogItemGetter.Script_Property => this.Script_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => DialogItemCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => DialogItemCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => DialogItemCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            DialogItemCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<DialogItem>.GetEqualsMask(DialogItem rhs) => DialogItemCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IDialogItemGetter>.GetEqualsMask(IDialogItemGetter rhs) => DialogItemCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return DialogItemCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            DialogItem_Mask<bool> printMask = null)
        {
            return DialogItemCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            DialogItemCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new DialogItem_Mask<bool> GetHasBeenSetMask()
        {
            return DialogItemCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is DialogItem rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogItem rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.DialogType != rhs.DialogType) return false;
            if (this.Flags != rhs.Flags) return false;
            if (Quest_Property.HasBeenSet != rhs.Quest_Property.HasBeenSet) return false;
            if (Quest_Property.HasBeenSet)
            {
                if (!this.Quest_Property.Equals(rhs.Quest_Property)) return false;
            }
            if (PreviousTopic_Property.HasBeenSet != rhs.PreviousTopic_Property.HasBeenSet) return false;
            if (PreviousTopic_Property.HasBeenSet)
            {
                if (!this.PreviousTopic_Property.Equals(rhs.PreviousTopic_Property)) return false;
            }
            if (Topics.HasBeenSet != rhs.Topics.HasBeenSet) return false;
            if (Topics.HasBeenSet)
            {
                if (!this.Topics.SequenceEqual(rhs.Topics)) return false;
            }
            if (Responses.HasBeenSet != rhs.Responses.HasBeenSet) return false;
            if (Responses.HasBeenSet)
            {
                if (!this.Responses.SequenceEqual(rhs.Responses)) return false;
            }
            if (Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (Conditions.HasBeenSet)
            {
                if (!this.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (Choices.HasBeenSet != rhs.Choices.HasBeenSet) return false;
            if (Choices.HasBeenSet)
            {
                if (!this.Choices.SequenceEqual(rhs.Choices)) return false;
            }
            if (LinkFrom.HasBeenSet != rhs.LinkFrom.HasBeenSet) return false;
            if (LinkFrom.HasBeenSet)
            {
                if (!this.LinkFrom.SequenceEqual(rhs.LinkFrom)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!object.Equals(this.Script, rhs.Script)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(DialogType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (Quest_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Quest).CombineHashCode(ret);
            }
            if (PreviousTopic_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(PreviousTopic).CombineHashCode(ret);
            }
            if (Topics.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Topics).CombineHashCode(ret);
            }
            if (Responses.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Responses).CombineHashCode(ret);
            }
            if (Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Conditions).CombineHashCode(ret);
            }
            if (Choices.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Choices).CombineHashCode(ret);
            }
            if (LinkFrom.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(LinkFrom).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static DialogItem Create_Xml(
            XElement root,
            DialogItem_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogItem Create_Xml(
            XElement root,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true,
            DialogItem_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DialogItem Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new DialogItem();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DialogItem Create_Xml(
            string path,
            DialogItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static DialogItem Create_Xml(
            string path,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogItem Create_Xml(
            Stream stream,
            DialogItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static DialogItem Create_Xml(
            Stream stream,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<DialogItem>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true,
            DialogItem_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            DialogItemCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            DialogItem item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "DialogType":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.DialogType);
                        if (EnumXmlTranslation<DialogType>.Instance.Parse(
                            root: root,
                            item: out DialogType DialogTypeParse,
                            errorMask: errorMask))
                        {
                            item.DialogType = DialogTypeParse;
                        }
                        else
                        {
                            item.UnsetDialogType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Flags);
                        if (EnumXmlTranslation<DialogItem.Flag>.Instance.Parse(
                            root: root,
                            item: out DialogItem.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Quest":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        property: item.Quest_Property,
                        fieldIndex: (int)DialogItem_FieldIndex.Quest,
                        errorMask: errorMask);
                    break;
                case "PreviousTopic":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        property: item.PreviousTopic_Property,
                        fieldIndex: (int)DialogItem_FieldIndex.PreviousTopic,
                        errorMask: errorMask);
                    break;
                case "Topics":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Topics);
                        if (ListXmlTranslation<FormIDSetLink<DialogTopic>>.Instance.Parse(
                            root: root,
                            enumer: out var TopicsItem,
                            transl: FormIDXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Topics.SetTo(TopicsItem);
                        }
                        else
                        {
                            item.Topics.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responses":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Responses);
                        if (ListXmlTranslation<DialogResponse>.Instance.Parse(
                            root: root,
                            enumer: out var ResponsesItem,
                            transl: LoquiXmlTranslation<DialogResponse>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Responses.SetTo(ResponsesItem);
                        }
                        else
                        {
                            item.Responses.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            root: root,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Choices":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Choices);
                        if (ListXmlTranslation<FormIDSetLink<DialogTopic>>.Instance.Parse(
                            root: root,
                            enumer: out var ChoicesItem,
                            transl: FormIDXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Choices.SetTo(ChoicesItem);
                        }
                        else
                        {
                            item.Choices.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LinkFrom":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.LinkFrom);
                        if (ListXmlTranslation<FormIDSetLink<DialogTopic>>.Instance.Parse(
                            root: root,
                            enumer: out var LinkFromItem,
                            transl: FormIDXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LinkFrom.SetTo(LinkFromItem);
                        }
                        else
                        {
                            item.LinkFrom.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Script);
                        item.Script.CopyFieldsFrom(
                            rhs: ScriptFields.Create_Xml(
                                root: root,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Script:
                    return _hasBeenSetTracker[index];
                case DialogItem_FieldIndex.Quest:
                    return Quest_Property.HasBeenSet;
                case DialogItem_FieldIndex.PreviousTopic:
                    return PreviousTopic_Property.HasBeenSet;
                case DialogItem_FieldIndex.Topics:
                    return Topics.HasBeenSet;
                case DialogItem_FieldIndex.Choices:
                    return Choices.HasBeenSet;
                case DialogItem_FieldIndex.LinkFrom:
                    return LinkFrom.HasBeenSet;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter DialogType
        protected ObjectCentralizationSubscriptions<DialogType> _DialogType_subscriptions;
        DialogType IPropertySupporter<DialogType>.Get(int index)
        {
            return GetDialogType(index: index);
        }

        protected DialogType GetDialogType(int index)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.DialogType:
                    return DialogType;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogType: {index}");
            }
        }

        void IPropertySupporter<DialogType>.Set(
            int index,
            DialogType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetDialogType(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetDialogType(
            int index,
            DialogType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.DialogType:
                    SetDialogType(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogType: {index}");
            }
        }

        bool IPropertySupporter<DialogType>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<DialogType>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<DialogType>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetDialogType(
                index: index,
                cmds: cmds);
        }

        protected void UnsetDialogType(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.DialogType:
                    SetDialogType(
                        item: default(DialogType),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogType: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DialogType>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<DialogType> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_DialogType_subscriptions == null)
            {
                _DialogType_subscriptions = new ObjectCentralizationSubscriptions<DialogType>();
            }
            _DialogType_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DialogType>.Unsubscribe(
            int index,
            object owner)
        {
            _DialogType_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<DialogType>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        DialogType IPropertySupporter<DialogType>.DefaultValue(int index)
        {
            return DefaultValueDialogType(index: index);
        }

        protected DialogType DefaultValueDialogType(int index)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.DialogType:
                    return default(DialogType);
                default:
                    throw new ArgumentException($"Unknown index for field type DialogType: {index}");
            }
        }

        #endregion

        #region IPropertySupporter DialogItem.Flag
        protected ObjectCentralizationSubscriptions<DialogItem.Flag> _DialogItemFlag_subscriptions;
        DialogItem.Flag IPropertySupporter<DialogItem.Flag>.Get(int index)
        {
            return GetDialogItemFlag(index: index);
        }

        protected DialogItem.Flag GetDialogItemFlag(int index)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogItem.Flag: {index}");
            }
        }

        void IPropertySupporter<DialogItem.Flag>.Set(
            int index,
            DialogItem.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetDialogItemFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetDialogItemFlag(
            int index,
            DialogItem.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogItem.Flag: {index}");
            }
        }

        bool IPropertySupporter<DialogItem.Flag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<DialogItem.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<DialogItem.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetDialogItemFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetDialogItemFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Flags:
                    SetFlags(
                        item: default(DialogItem.Flag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DialogItem.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DialogItem.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<DialogItem.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_DialogItemFlag_subscriptions == null)
            {
                _DialogItemFlag_subscriptions = new ObjectCentralizationSubscriptions<DialogItem.Flag>();
            }
            _DialogItemFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DialogItem.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _DialogItemFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<DialogItem.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        DialogItem.Flag IPropertySupporter<DialogItem.Flag>.DefaultValue(int index)
        {
            return DefaultValueDialogItemFlag(index: index);
        }

        protected DialogItem.Flag DefaultValueDialogItemFlag(int index)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Flags:
                    return default(DialogItem.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type DialogItem.Flag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter ScriptFields
        protected ObjectCentralizationSubscriptions<ScriptFields> _ScriptFields_subscriptions;
        ScriptFields IPropertySupporter<ScriptFields>.Get(int index)
        {
            return GetScriptFields(index: index);
        }

        protected ScriptFields GetScriptFields(int index)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Script:
                    return Script;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields: {index}");
            }
        }

        void IPropertySupporter<ScriptFields>.Set(
            int index,
            ScriptFields item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetScriptFields(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetScriptFields(
            int index,
            ScriptFields item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Script:
                    SetScript(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields: {index}");
            }
        }

        bool IPropertySupporter<ScriptFields>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<ScriptFields>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ScriptFields>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetScriptFields(
                index: index,
                cmds: cmds);
        }

        protected void UnsetScriptFields(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Script:
                    SetScript(
                        item: default(ScriptFields),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptFields>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ScriptFields> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ScriptFields_subscriptions == null)
            {
                _ScriptFields_subscriptions = new ObjectCentralizationSubscriptions<ScriptFields>();
            }
            _ScriptFields_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptFields>.Unsubscribe(
            int index,
            object owner)
        {
            _ScriptFields_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ScriptFields>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ScriptFields IPropertySupporter<ScriptFields>.DefaultValue(int index)
        {
            return DefaultValueScriptFields(index: index);
        }

        protected ScriptFields DefaultValueScriptFields(int index)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Script:
                    return default(ScriptFields);
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = DialogItem_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Quest_Property;
            yield return PreviousTopic_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static DialogItem Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static DialogItem Create_Binary(
            MutagenFrame frame,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DialogItem Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<DialogItem>(
                record: new DialogItem(),
                frame: frame,
                errorMask: errorMask,
                recType: DialogItem_Registration.INFO_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static DialogItem Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static DialogItem Create_Binary(
            string path,
            out DialogItem_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static DialogItem Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static DialogItem Create_Binary(
            Stream stream,
            out DialogItem_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            DialogItemCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            DialogItem item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            DialogItem item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)DialogItem_FieldIndex.DialogType);
                            if (EnumBinaryTranslation<DialogType>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(2),
                                item: out DialogType DialogTypeParse,
                                errorMask: errorMask))
                            {
                                item.DialogType = DialogTypeParse;
                            }
                            else
                            {
                                item.UnsetDialogType();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break0;
                            return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.DialogType);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)DialogItem_FieldIndex.Flags);
                            if (EnumBinaryTranslation<DialogItem.Flag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(1),
                                item: out DialogItem.Flag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.UnsetFlags();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Flags);
                case 0x49545351: // QSTI
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        property: item.Quest_Property,
                        fieldIndex: (int)DialogItem_FieldIndex.Quest,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Quest);
                case 0x4D414E50: // PNAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        property: item.PreviousTopic_Property,
                        fieldIndex: (int)DialogItem_FieldIndex.PreviousTopic,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.PreviousTopic);
                case 0x454D414E: // NAME
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<DialogTopic>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogItem_Registration.NAME_HEADER,
                        item: item.Topics,
                        fieldIndex: (int)DialogItem_FieldIndex.Topics,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Topics);
                case 0x54445254: // TRDT
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<DialogResponse>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogItem_Registration.TRDT_HEADER,
                        item: item.Responses,
                        fieldIndex: (int)DialogItem_FieldIndex.Responses,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<DialogResponse>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Responses);
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)DialogItem_FieldIndex.Conditions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<Condition>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Conditions);
                case 0x544C4354: // TCLT
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<DialogTopic>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogItem_Registration.TCLT_HEADER,
                        item: item.Choices,
                        fieldIndex: (int)DialogItem_FieldIndex.Choices,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Choices);
                case 0x464C4354: // TCLF
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<DialogTopic>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogItem_Registration.TCLF_HEADER,
                        item: item.LinkFrom,
                        fieldIndex: (int)DialogItem_FieldIndex.LinkFrom,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.LinkFrom);
                case 0x52484353: // SCHR
                case 0x41444353: // SCDA
                case 0x58544353: // SCTX
                case 0x44534C53: // SLSD
                case 0x52564353: // SCVR
                case 0x56524353: // SCRV
                case 0x4F524353: // SCRO
                    using (errorMask.PushIndex((int)DialogItem_FieldIndex.Script))
                    {
                        var tmpScript = ScriptFields.Create_Binary(
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: null);
                        item.Script.CopyFieldsFrom(
                            rhs: tmpScript,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Script);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public DialogItem Copy(
            DialogItem_CopyMask copyMask = null,
            IDialogItemGetter def = null)
        {
            return DialogItem.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static DialogItem Copy(
            IDialogItem item,
            DialogItem_CopyMask copyMask = null,
            IDialogItemGetter def = null)
        {
            DialogItem ret;
            if (item.GetType().Equals(typeof(DialogItem)))
            {
                ret = new DialogItem();
            }
            else
            {
                ret = (DialogItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static DialogItem Copy_ToLoqui(
            IDialogItemGetter item,
            DialogItem_CopyMask copyMask = null,
            IDialogItemGetter def = null)
        {
            DialogItem ret;
            if (item.GetType().Equals(typeof(DialogItem)))
            {
                ret = new DialogItem() as DialogItem;
            }
            else
            {
                ret = (DialogItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IDialogItemGetter rhs,
            DialogItem_CopyMask copyMask,
            IDialogItemGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDialogItemGetter rhs,
            out DialogItem_ErrorMask errorMask,
            DialogItem_CopyMask copyMask = null,
            IDialogItemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IDialogItemGetter rhs,
            ErrorMaskBuilder errorMask,
            DialogItem_CopyMask copyMask = null,
            IDialogItemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            DialogItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    this.SetDialogType(
                        (DialogType)obj,
                        cmds: cmds);
                    break;
                case DialogItem_FieldIndex.Flags:
                    this.SetFlags(
                        (DialogItem.Flag)obj,
                        cmds: cmds);
                    break;
                case DialogItem_FieldIndex.Quest:
                    this.Quest_Property.Set(
                        (FormIDSetLink<Quest>)obj,
                        cmds);
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    this.PreviousTopic_Property.Set(
                        (FormIDSetLink<DialogItem>)obj,
                        cmds);
                    break;
                case DialogItem_FieldIndex.Topics:
                    this._Topics.SetTo((IEnumerable<FormIDSetLink<DialogTopic>>)obj, cmds);
                    break;
                case DialogItem_FieldIndex.Responses:
                    this._Responses.SetTo((IEnumerable<DialogResponse>)obj, cmds);
                    break;
                case DialogItem_FieldIndex.Conditions:
                    this._Conditions.SetTo((IEnumerable<Condition>)obj, cmds);
                    break;
                case DialogItem_FieldIndex.Choices:
                    this._Choices.SetTo((IEnumerable<FormIDSetLink<DialogTopic>>)obj, cmds);
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    this._LinkFrom.SetTo((IEnumerable<FormIDSetLink<DialogTopic>>)obj, cmds);
                    break;
                case DialogItem_FieldIndex.Script:
                    this.Script.CopyFieldsFrom(rhs: (ScriptFields)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            DialogItemCommon.Clear(this, cmds);
        }


        public new static DialogItem Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new DialogItem();
            foreach (var pair in fields)
            {
                CopyInInternal_DialogItem(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_DialogItem(DialogItem obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out DialogItem_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    obj.SetDialogType(
                        (DialogType)pair.Value,
                        cmds: null);
                    break;
                case DialogItem_FieldIndex.Flags:
                    obj.SetFlags(
                        (DialogItem.Flag)pair.Value,
                        cmds: null);
                    break;
                case DialogItem_FieldIndex.Quest:
                    obj.Quest_Property.Set(
                        (FormIDSetLink<Quest>)pair.Value,
                        null);
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    obj.PreviousTopic_Property.Set(
                        (FormIDSetLink<DialogItem>)pair.Value,
                        null);
                    break;
                case DialogItem_FieldIndex.Topics:
                    obj._Topics.SetTo((IEnumerable<FormIDSetLink<DialogTopic>>)pair.Value, null);
                    break;
                case DialogItem_FieldIndex.Responses:
                    obj._Responses.SetTo((IEnumerable<DialogResponse>)pair.Value, null);
                    break;
                case DialogItem_FieldIndex.Conditions:
                    obj._Conditions.SetTo((IEnumerable<Condition>)pair.Value, null);
                    break;
                case DialogItem_FieldIndex.Choices:
                    obj._Choices.SetTo((IEnumerable<FormIDSetLink<DialogTopic>>)pair.Value, null);
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    obj._LinkFrom.SetTo((IEnumerable<FormIDSetLink<DialogTopic>>)pair.Value, null);
                    break;
                case DialogItem_FieldIndex.Script:
                    obj.Script.CopyFieldsFrom(rhs: (ScriptFields)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, DialogItem obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogItem : IDialogItemGetter, IMajorRecord, ILoquiClass<IDialogItem, IDialogItemGetter>, ILoquiClass<DialogItem, IDialogItemGetter>
    {
        new DialogType DialogType { get; set; }
        new INotifyingItem<DialogType> DialogType_Property { get; }

        new DialogItem.Flag Flags { get; set; }
        new INotifyingItem<DialogItem.Flag> Flags_Property { get; }

        new Quest Quest { get; set; }
        new DialogItem PreviousTopic { get; set; }
        new INotifyingList<FormIDSetLink<DialogTopic>> Topics { get; }
        new INotifyingList<DialogResponse> Responses { get; }
        new INotifyingList<Condition> Conditions { get; }
        new INotifyingList<FormIDSetLink<DialogTopic>> Choices { get; }
        new INotifyingList<FormIDSetLink<DialogTopic>> LinkFrom { get; }
    }

    public partial interface IDialogItemGetter : IMajorRecordGetter
    {
        #region DialogType
        DialogType DialogType { get; }
        INotifyingItemGetter<DialogType> DialogType_Property { get; }

        #endregion
        #region Flags
        DialogItem.Flag Flags { get; }
        INotifyingItemGetter<DialogItem.Flag> Flags_Property { get; }

        #endregion
        #region Quest
        Quest Quest { get; }
        FormIDSetLink<Quest> Quest_Property { get; }

        #endregion
        #region PreviousTopic
        DialogItem PreviousTopic { get; }
        FormIDSetLink<DialogItem> PreviousTopic_Property { get; }

        #endregion
        #region Topics
        INotifyingListGetter<FormIDSetLink<DialogTopic>> Topics { get; }
        #endregion
        #region Responses
        INotifyingListGetter<DialogResponse> Responses { get; }
        #endregion
        #region Conditions
        INotifyingListGetter<Condition> Conditions { get; }
        #endregion
        #region Choices
        INotifyingListGetter<FormIDSetLink<DialogTopic>> Choices { get; }
        #endregion
        #region LinkFrom
        INotifyingListGetter<FormIDSetLink<DialogTopic>> LinkFrom { get; }
        #endregion
        #region Script
        ScriptFields Script { get; }
        INotifyingSetItemGetter<ScriptFields> Script_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogItem_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        DialogType = 5,
        Flags = 6,
        Quest = 7,
        PreviousTopic = 8,
        Topics = 9,
        Responses = 10,
        Conditions = 11,
        Choices = 12,
        LinkFrom = 13,
        Script = 14,
    }
    #endregion

    #region Registration
    public class DialogItem_Registration : ILoquiRegistration
    {
        public static readonly DialogItem_Registration Instance = new DialogItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 149,
            version: 0);

        public const string GUID = "2d9149e0-aa5e-4b4e-8bef-93b32f602f3b";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(DialogItem_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogItem_ErrorMask);

        public static readonly Type ClassType = typeof(DialogItem);

        public static readonly Type GetterType = typeof(IDialogItemGetter);

        public static readonly Type SetterType = typeof(IDialogItem);

        public static readonly Type CommonType = typeof(DialogItemCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogItem";

        public const string Name = "DialogItem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DIALOGTYPE":
                    return (ushort)DialogItem_FieldIndex.DialogType;
                case "FLAGS":
                    return (ushort)DialogItem_FieldIndex.Flags;
                case "QUEST":
                    return (ushort)DialogItem_FieldIndex.Quest;
                case "PREVIOUSTOPIC":
                    return (ushort)DialogItem_FieldIndex.PreviousTopic;
                case "TOPICS":
                    return (ushort)DialogItem_FieldIndex.Topics;
                case "RESPONSES":
                    return (ushort)DialogItem_FieldIndex.Responses;
                case "CONDITIONS":
                    return (ushort)DialogItem_FieldIndex.Conditions;
                case "CHOICES":
                    return (ushort)DialogItem_FieldIndex.Choices;
                case "LINKFROM":
                    return (ushort)DialogItem_FieldIndex.LinkFrom;
                case "SCRIPT":
                    return (ushort)DialogItem_FieldIndex.Script;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return true;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Script:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    return "DialogType";
                case DialogItem_FieldIndex.Flags:
                    return "Flags";
                case DialogItem_FieldIndex.Quest:
                    return "Quest";
                case DialogItem_FieldIndex.PreviousTopic:
                    return "PreviousTopic";
                case DialogItem_FieldIndex.Topics:
                    return "Topics";
                case DialogItem_FieldIndex.Responses:
                    return "Responses";
                case DialogItem_FieldIndex.Conditions:
                    return "Conditions";
                case DialogItem_FieldIndex.Choices:
                    return "Choices";
                case DialogItem_FieldIndex.LinkFrom:
                    return "LinkFrom";
                case DialogItem_FieldIndex.Script:
                    return "Script";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                case DialogItem_FieldIndex.Script:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    return typeof(DialogType);
                case DialogItem_FieldIndex.Flags:
                    return typeof(DialogItem.Flag);
                case DialogItem_FieldIndex.Quest:
                    return typeof(FormIDSetLink<Quest>);
                case DialogItem_FieldIndex.PreviousTopic:
                    return typeof(FormIDSetLink<DialogItem>);
                case DialogItem_FieldIndex.Topics:
                    return typeof(NotifyingList<FormIDSetLink<DialogTopic>>);
                case DialogItem_FieldIndex.Responses:
                    return typeof(NotifyingList<DialogResponse>);
                case DialogItem_FieldIndex.Conditions:
                    return typeof(NotifyingList<Condition>);
                case DialogItem_FieldIndex.Choices:
                    return typeof(NotifyingList<FormIDSetLink<DialogTopic>>);
                case DialogItem_FieldIndex.LinkFrom:
                    return typeof(NotifyingList<FormIDSetLink<DialogTopic>>);
                case DialogItem_FieldIndex.Script:
                    return typeof(ScriptFields);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType QSTI_HEADER = new RecordType("QSTI");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType TRDT_HEADER = new RecordType("TRDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType TCLT_HEADER = new RecordType("TCLT");
        public static readonly RecordType TCLF_HEADER = new RecordType("TCLF");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCDA_HEADER = new RecordType("SCDA");
        public static readonly RecordType SCTX_HEADER = new RecordType("SCTX");
        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCVR_HEADER = new RecordType("SCVR");
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = INFO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 8;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class DialogItemCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IDialogItem item,
            IDialogItemGetter rhs,
            IDialogItemGetter def,
            ErrorMaskBuilder errorMask,
            DialogItem_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.DialogType ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.DialogType);
                try
                {
                    item.DialogType_Property.Set(
                        value: rhs.DialogType,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Quest ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Quest);
                try
                {
                    item.Quest_Property.SetToWithDefault(
                        rhs: rhs.Quest_Property,
                        def: def?.Quest_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PreviousTopic ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.PreviousTopic);
                try
                {
                    item.PreviousTopic_Property.SetToWithDefault(
                        rhs: rhs.PreviousTopic_Property,
                        def: def?.PreviousTopic_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Topics != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Topics);
                try
                {
                    item.Topics.SetToWithDefault(
                        rhs.Topics,
                        def?.Topics,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Responses.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Responses);
                try
                {
                    item.Responses.SetToWithDefault(
                        rhs: rhs.Responses,
                        def: def?.Responses,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Responses.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(DialogResponse);
                                    return DialogResponse.Copy(
                                        r,
                                        copyMask?.Responses?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Responses.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Condition);
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Choices != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Choices);
                try
                {
                    item.Choices.SetToWithDefault(
                        rhs.Choices,
                        def?.Choices,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LinkFrom != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.LinkFrom);
                try
                {
                    item.LinkFrom.SetToWithDefault(
                        rhs.LinkFrom,
                        def?.LinkFrom,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script.Overall ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Script);
                try
                {
                    ScriptFieldsCommon.CopyFieldsFrom(
                        item: item.Script,
                        rhs: rhs.Script,
                        def: def?.Script,
                        errorMask: errorMask,
                        copyMask: copyMask?.Script.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IDialogItem obj,
            NotifyingFireParameters cmds = null)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case DialogItem_FieldIndex.Script:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case DialogItem_FieldIndex.Quest:
                    obj.Quest_Property.HasBeenSet = on;
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    obj.PreviousTopic_Property.HasBeenSet = on;
                    break;
                case DialogItem_FieldIndex.Topics:
                    obj.Topics.HasBeenSet = on;
                    break;
                case DialogItem_FieldIndex.Responses:
                    obj.Responses.HasBeenSet = on;
                    break;
                case DialogItem_FieldIndex.Conditions:
                    obj.Conditions.HasBeenSet = on;
                    break;
                case DialogItem_FieldIndex.Choices:
                    obj.Choices.HasBeenSet = on;
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    obj.LinkFrom.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IDialogItem obj,
            NotifyingUnsetParameters cmds = null)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    obj.DialogType = default(DialogType);
                    break;
                case DialogItem_FieldIndex.Flags:
                    obj.Flags = default(DialogItem.Flag);
                    break;
                case DialogItem_FieldIndex.Quest:
                    obj.Quest_Property.Unset(cmds);
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    obj.PreviousTopic_Property.Unset(cmds);
                    break;
                case DialogItem_FieldIndex.Topics:
                    obj.Topics.Unset(cmds);
                    break;
                case DialogItem_FieldIndex.Responses:
                    obj.Responses.Unset(cmds);
                    break;
                case DialogItem_FieldIndex.Conditions:
                    obj.Conditions.Unset(cmds);
                    break;
                case DialogItem_FieldIndex.Choices:
                    obj.Choices.Unset(cmds);
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    obj.LinkFrom.Unset(cmds);
                    break;
                case DialogItem_FieldIndex.Script:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IDialogItem obj)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                    return true;
                case DialogItem_FieldIndex.Quest:
                    return obj.Quest_Property.HasBeenSet;
                case DialogItem_FieldIndex.PreviousTopic:
                    return obj.PreviousTopic_Property.HasBeenSet;
                case DialogItem_FieldIndex.Topics:
                    return obj.Topics.HasBeenSet;
                case DialogItem_FieldIndex.Responses:
                    return obj.Responses.HasBeenSet;
                case DialogItem_FieldIndex.Conditions:
                    return obj.Conditions.HasBeenSet;
                case DialogItem_FieldIndex.Choices:
                    return obj.Choices.HasBeenSet;
                case DialogItem_FieldIndex.LinkFrom:
                    return obj.LinkFrom.HasBeenSet;
                case DialogItem_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IDialogItemGetter obj)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    return obj.DialogType;
                case DialogItem_FieldIndex.Flags:
                    return obj.Flags;
                case DialogItem_FieldIndex.Quest:
                    return obj.Quest;
                case DialogItem_FieldIndex.PreviousTopic:
                    return obj.PreviousTopic;
                case DialogItem_FieldIndex.Topics:
                    return obj.Topics;
                case DialogItem_FieldIndex.Responses:
                    return obj.Responses;
                case DialogItem_FieldIndex.Conditions:
                    return obj.Conditions;
                case DialogItem_FieldIndex.Choices:
                    return obj.Choices;
                case DialogItem_FieldIndex.LinkFrom:
                    return obj.LinkFrom;
                case DialogItem_FieldIndex.Script:
                    return obj.Script;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IDialogItem item,
            NotifyingUnsetParameters cmds = null)
        {
            item.DialogType = default(DialogType);
            item.Flags = default(DialogItem.Flag);
            item.Quest_Property.Unset(cmds.ToUnsetParams());
            item.PreviousTopic_Property.Unset(cmds.ToUnsetParams());
            item.Topics.Unset(cmds.ToUnsetParams());
            item.Responses.Unset(cmds.ToUnsetParams());
            item.Conditions.Unset(cmds.ToUnsetParams());
            item.Choices.Unset(cmds.ToUnsetParams());
            item.LinkFrom.Unset(cmds.ToUnsetParams());
        }

        public static DialogItem_Mask<bool> GetEqualsMask(
            this IDialogItemGetter item,
            IDialogItemGetter rhs)
        {
            var ret = new DialogItem_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IDialogItemGetter item,
            IDialogItemGetter rhs,
            DialogItem_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.DialogType = item.DialogType == rhs.DialogType;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Quest = item.Quest_Property.Equals(rhs.Quest_Property, (l, r) => l == r);
            ret.PreviousTopic = item.PreviousTopic_Property.Equals(rhs.PreviousTopic_Property, (l, r) => l == r);
            if (item.Topics.HasBeenSet == rhs.Topics.HasBeenSet)
            {
                if (item.Topics.HasBeenSet)
                {
                    ret.Topics = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Topics.Specific = item.Topics.SelectAgainst<FormIDSetLink<DialogTopic>, bool>(rhs.Topics, ((l, r) => object.Equals(l, r)), out ret.Topics.Overall);
                    ret.Topics.Overall = ret.Topics.Overall && ret.Topics.Specific.All((b) => b);
                }
                else
                {
                    ret.Topics = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Topics.Overall = true;
                }
            }
            else
            {
                ret.Topics = new MaskItem<bool, IEnumerable<bool>>();
                ret.Topics.Overall = false;
            }
            if (item.Responses.HasBeenSet == rhs.Responses.HasBeenSet)
            {
                if (item.Responses.HasBeenSet)
                {
                    ret.Responses = new MaskItem<bool, IEnumerable<MaskItem<bool, DialogResponse_Mask<bool>>>>();
                    ret.Responses.Specific = item.Responses.SelectAgainst<DialogResponse, MaskItem<bool, DialogResponse_Mask<bool>>>(rhs.Responses, ((l, r) =>
                    {
                        MaskItem<bool, DialogResponse_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Responses.Overall);
                    ret.Responses.Overall = ret.Responses.Overall && ret.Responses.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Responses = new MaskItem<bool, IEnumerable<MaskItem<bool, DialogResponse_Mask<bool>>>>();
                    ret.Responses.Overall = true;
                }
            }
            else
            {
                ret.Responses = new MaskItem<bool, IEnumerable<MaskItem<bool, DialogResponse_Mask<bool>>>>();
                ret.Responses.Overall = false;
            }
            if (item.Conditions.HasBeenSet == rhs.Conditions.HasBeenSet)
            {
                if (item.Conditions.HasBeenSet)
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Specific = item.Conditions.SelectAgainst<Condition, MaskItem<bool, Condition_Mask<bool>>>(rhs.Conditions, ((l, r) =>
                    {
                        MaskItem<bool, Condition_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Conditions.Overall);
                    ret.Conditions.Overall = ret.Conditions.Overall && ret.Conditions.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Overall = true;
                }
            }
            else
            {
                ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                ret.Conditions.Overall = false;
            }
            if (item.Choices.HasBeenSet == rhs.Choices.HasBeenSet)
            {
                if (item.Choices.HasBeenSet)
                {
                    ret.Choices = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Choices.Specific = item.Choices.SelectAgainst<FormIDSetLink<DialogTopic>, bool>(rhs.Choices, ((l, r) => object.Equals(l, r)), out ret.Choices.Overall);
                    ret.Choices.Overall = ret.Choices.Overall && ret.Choices.Specific.All((b) => b);
                }
                else
                {
                    ret.Choices = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Choices.Overall = true;
                }
            }
            else
            {
                ret.Choices = new MaskItem<bool, IEnumerable<bool>>();
                ret.Choices.Overall = false;
            }
            if (item.LinkFrom.HasBeenSet == rhs.LinkFrom.HasBeenSet)
            {
                if (item.LinkFrom.HasBeenSet)
                {
                    ret.LinkFrom = new MaskItem<bool, IEnumerable<bool>>();
                    ret.LinkFrom.Specific = item.LinkFrom.SelectAgainst<FormIDSetLink<DialogTopic>, bool>(rhs.LinkFrom, ((l, r) => object.Equals(l, r)), out ret.LinkFrom.Overall);
                    ret.LinkFrom.Overall = ret.LinkFrom.Overall && ret.LinkFrom.Specific.All((b) => b);
                }
                else
                {
                    ret.LinkFrom = new MaskItem<bool, IEnumerable<bool>>();
                    ret.LinkFrom.Overall = true;
                }
            }
            else
            {
                ret.LinkFrom = new MaskItem<bool, IEnumerable<bool>>();
                ret.LinkFrom.Overall = false;
            }
            ret.Script = item.Script_Property.LoquiEqualsHelper(rhs.Script_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IDialogItemGetter item,
            string name = null,
            DialogItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IDialogItemGetter item,
            FileGeneration fg,
            string name = null,
            DialogItem_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(DialogItem)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(DialogItem)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DialogType ?? true)
                {
                    fg.AppendLine($"DialogType => {item.DialogType}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Quest ?? true)
                {
                    fg.AppendLine($"Quest => {item.Quest_Property}");
                }
                if (printMask?.PreviousTopic ?? true)
                {
                    fg.AppendLine($"PreviousTopic => {item.PreviousTopic_Property}");
                }
                if (printMask?.Topics?.Overall ?? true)
                {
                    fg.AppendLine("Topics =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Topics)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Responses?.Overall ?? true)
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Responses)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Conditions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Choices?.Overall ?? true)
                {
                    fg.AppendLine("Choices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Choices)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LinkFrom?.Overall ?? true)
                {
                    fg.AppendLine("LinkFrom =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.LinkFrom)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Script?.Overall ?? true)
                {
                    item.Script?.ToString(fg, "Script");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IDialogItemGetter item,
            DialogItem_Mask<bool?> checkMask)
        {
            if (checkMask.Quest.HasValue && checkMask.Quest.Value != item.Quest_Property.HasBeenSet) return false;
            if (checkMask.PreviousTopic.HasValue && checkMask.PreviousTopic.Value != item.PreviousTopic_Property.HasBeenSet) return false;
            if (checkMask.Topics.Overall.HasValue && checkMask.Topics.Overall.Value != item.Topics.HasBeenSet) return false;
            if (checkMask.Responses.Overall.HasValue && checkMask.Responses.Overall.Value != item.Responses.HasBeenSet) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            if (checkMask.Choices.Overall.HasValue && checkMask.Choices.Overall.Value != item.Choices.HasBeenSet) return false;
            if (checkMask.LinkFrom.Overall.HasValue && checkMask.LinkFrom.Overall.Value != item.LinkFrom.HasBeenSet) return false;
            if (checkMask.Script.Overall.HasValue && checkMask.Script.Overall.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Script.Specific != null && (item.Script == null || !item.Script.HasBeenSet(checkMask.Script.Specific))) return false;
            return true;
        }

        public static DialogItem_Mask<bool> GetHasBeenSetMask(IDialogItemGetter item)
        {
            var ret = new DialogItem_Mask<bool>();
            ret.DialogType = true;
            ret.Flags = true;
            ret.Quest = item.Quest_Property.HasBeenSet;
            ret.PreviousTopic = item.PreviousTopic_Property.HasBeenSet;
            ret.Topics = new MaskItem<bool, IEnumerable<bool>>(item.Topics.HasBeenSet, null);
            ret.Responses = new MaskItem<bool, IEnumerable<MaskItem<bool, DialogResponse_Mask<bool>>>>(item.Responses.HasBeenSet, item.Responses.Select((i) => new MaskItem<bool, DialogResponse_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.Select((i) => new MaskItem<bool, Condition_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Choices = new MaskItem<bool, IEnumerable<bool>>(item.Choices.HasBeenSet, null);
            ret.LinkFrom = new MaskItem<bool, IEnumerable<bool>>(item.LinkFrom.HasBeenSet, null);
            ret.Script = new MaskItem<bool, ScriptFields_Mask<bool>>(item.Script_Property.HasBeenSet, ScriptFieldsCommon.GetHasBeenSetMask(item.Script));
            return ret;
        }

        public static DialogItem_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static DialogItem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (DialogItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            DialogItem item,
            bool doMasks,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            DialogItem item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogItem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogItem");
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.DialogType) ?? true))
            {
                EnumXmlTranslation<DialogType>.Instance.Write(
                    node: elem,
                    name: nameof(item.DialogType),
                    item: item.DialogType_Property,
                    fieldIndex: (int)DialogItem_FieldIndex.DialogType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<DialogItem.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)DialogItem_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Quest_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Quest) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Quest),
                    item: item.Quest_Property?.FormID,
                    fieldIndex: (int)DialogItem_FieldIndex.Quest,
                    errorMask: errorMask);
            }
            if (item.PreviousTopic_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.PreviousTopic) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.PreviousTopic),
                    item: item.PreviousTopic_Property?.FormID,
                    fieldIndex: (int)DialogItem_FieldIndex.PreviousTopic,
                    errorMask: errorMask);
            }
            if (item.Topics.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Topics) ?? true))
            {
                ListXmlTranslation<FormIDSetLink<DialogTopic>>.Instance.Write(
                    node: elem,
                    name: nameof(item.Topics),
                    item: item.Topics,
                    fieldIndex: (int)DialogItem_FieldIndex.Topics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Topics),
                    transl: (XElement subNode, FormIDSetLink<DialogTopic> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Responses.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Responses) ?? true))
            {
                ListXmlTranslation<DialogResponse>.Instance.Write(
                    node: elem,
                    name: nameof(item.Responses),
                    item: item.Responses,
                    fieldIndex: (int)DialogItem_FieldIndex.Responses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Responses),
                    transl: (XElement subNode, DialogResponse subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<DialogResponse>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<Condition>.Instance.Write(
                    node: elem,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)DialogItem_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Conditions),
                    transl: (XElement subNode, Condition subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Condition>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Choices.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Choices) ?? true))
            {
                ListXmlTranslation<FormIDSetLink<DialogTopic>>.Instance.Write(
                    node: elem,
                    name: nameof(item.Choices),
                    item: item.Choices,
                    fieldIndex: (int)DialogItem_FieldIndex.Choices,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Choices),
                    transl: (XElement subNode, FormIDSetLink<DialogTopic> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.LinkFrom.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.LinkFrom) ?? true))
            {
                ListXmlTranslation<FormIDSetLink<DialogTopic>>.Instance.Write(
                    node: elem,
                    name: nameof(item.LinkFrom),
                    item: item.LinkFrom,
                    fieldIndex: (int)DialogItem_FieldIndex.LinkFrom,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.LinkFrom),
                    transl: (XElement subNode, FormIDSetLink<DialogTopic> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Script) ?? true))
            {
                LoquiXmlTranslation<ScriptFields>.Instance.Write(
                    node: elem,
                    item: item.Script_Property,
                    name: nameof(item.Script),
                    fieldIndex: (int)DialogItem_FieldIndex.Script,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            DialogItem item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out DialogItem_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            DialogItem item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: DialogItem_Registration.INFO_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            DialogItem item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            if (item.DATADataTypeState.HasFlag(DialogItem.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(DialogItem_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogType>.Instance.Write(
                        writer,
                        item.DialogType_Property,
                        length: 2,
                        fieldIndex: (int)DialogItem_FieldIndex.DialogType,
                        errorMask: errorMask);
                    if (!item.DATADataTypeState.HasFlag(DialogItem.DATADataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogItem.Flag>.Instance.Write(
                            writer,
                            item.Flags_Property,
                            length: 1,
                            fieldIndex: (int)DialogItem_FieldIndex.Flags,
                            errorMask: errorMask);
                    }
                }
            }
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Quest_Property,
                fieldIndex: (int)DialogItem_FieldIndex.Quest,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.QSTI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.PreviousTopic_Property,
                fieldIndex: (int)DialogItem_FieldIndex.PreviousTopic,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.PNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<DialogTopic>>.Instance.WriteListOfRecords(
                writer: writer,
                items: item.Topics,
                fieldIndex: (int)DialogItem_FieldIndex.Topics,
                recordType: DialogItem_Registration.NAME_HEADER,
                errorMask: errorMask,
                transl: FormIDBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<DialogResponse>.Instance.Write(
                writer: writer,
                items: item.Responses,
                fieldIndex: (int)DialogItem_FieldIndex.Responses,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<DialogResponse>.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                fieldIndex: (int)DialogItem_FieldIndex.Conditions,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<Condition>.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<DialogTopic>>.Instance.WriteListOfRecords(
                writer: writer,
                items: item.Choices,
                fieldIndex: (int)DialogItem_FieldIndex.Choices,
                recordType: DialogItem_Registration.TCLT_HEADER,
                errorMask: errorMask,
                transl: FormIDBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<DialogTopic>>.Instance.WriteListOfRecords(
                writer: writer,
                items: item.LinkFrom,
                fieldIndex: (int)DialogItem_FieldIndex.LinkFrom,
                recordType: DialogItem_Registration.TCLF_HEADER,
                errorMask: errorMask,
                transl: FormIDBinaryTranslation.Instance.Write);
            LoquiBinaryTranslation<ScriptFields>.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)DialogItem_FieldIndex.Script,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class DialogItem_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<DialogItem_Mask<T>>
    {
        #region Ctors
        public DialogItem_Mask()
        {
        }

        public DialogItem_Mask(T initialValue)
        {
            this.DialogType = initialValue;
            this.Flags = initialValue;
            this.Quest = initialValue;
            this.PreviousTopic = initialValue;
            this.Topics = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Responses = new MaskItem<T, IEnumerable<MaskItem<T, DialogResponse_Mask<T>>>>(initialValue, null);
            this.Conditions = new MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>>(initialValue, null);
            this.Choices = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.LinkFrom = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Script = new MaskItem<T, ScriptFields_Mask<T>>(initialValue, new ScriptFields_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T DialogType;
        public T Flags;
        public T Quest;
        public T PreviousTopic;
        public MaskItem<T, IEnumerable<T>> Topics;
        public MaskItem<T, IEnumerable<MaskItem<T, DialogResponse_Mask<T>>>> Responses;
        public MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>> Conditions;
        public MaskItem<T, IEnumerable<T>> Choices;
        public MaskItem<T, IEnumerable<T>> LinkFrom;
        public MaskItem<T, ScriptFields_Mask<T>> Script { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DialogItem_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogItem_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.DialogType, rhs.DialogType)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Quest, rhs.Quest)) return false;
            if (!object.Equals(this.PreviousTopic, rhs.PreviousTopic)) return false;
            if (!object.Equals(this.Topics, rhs.Topics)) return false;
            if (!object.Equals(this.Responses, rhs.Responses)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.Choices, rhs.Choices)) return false;
            if (!object.Equals(this.LinkFrom, rhs.LinkFrom)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.DialogType?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Quest?.GetHashCode());
            ret = ret.CombineHashCode(this.PreviousTopic?.GetHashCode());
            ret = ret.CombineHashCode(this.Topics?.GetHashCode());
            ret = ret.CombineHashCode(this.Responses?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.Choices?.GetHashCode());
            ret = ret.CombineHashCode(this.LinkFrom?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.DialogType)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Quest)) return false;
            if (!eval(this.PreviousTopic)) return false;
            if (this.Topics != null)
            {
                if (!eval(this.Topics.Overall)) return false;
                if (this.Topics.Specific != null)
                {
                    foreach (var item in this.Topics.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.Responses != null)
            {
                if (!eval(this.Responses.Overall)) return false;
                if (this.Responses.Specific != null)
                {
                    foreach (var item in this.Responses.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Choices != null)
            {
                if (!eval(this.Choices.Overall)) return false;
                if (this.Choices.Specific != null)
                {
                    foreach (var item in this.Choices.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.LinkFrom != null)
            {
                if (!eval(this.LinkFrom.Overall)) return false;
                if (this.LinkFrom.Specific != null)
                {
                    foreach (var item in this.LinkFrom.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (Script != null)
            {
                if (!eval(this.Script.Overall)) return false;
                if (this.Script.Specific != null && !this.Script.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new DialogItem_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DialogItem_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DialogItem_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.DialogType = eval(this.DialogType);
            obj.Flags = eval(this.Flags);
            obj.Quest = eval(this.Quest);
            obj.PreviousTopic = eval(this.PreviousTopic);
            if (Topics != null)
            {
                obj.Topics = new MaskItem<R, IEnumerable<R>>();
                obj.Topics.Overall = eval(this.Topics.Overall);
                if (Topics.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Topics.Specific = l;
                    foreach (var item in Topics.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Responses != null)
            {
                obj.Responses = new MaskItem<R, IEnumerable<MaskItem<R, DialogResponse_Mask<R>>>>();
                obj.Responses.Overall = eval(this.Responses.Overall);
                if (Responses.Specific != null)
                {
                    List<MaskItem<R, DialogResponse_Mask<R>>> l = new List<MaskItem<R, DialogResponse_Mask<R>>>();
                    obj.Responses.Specific = l;
                    foreach (var item in Responses.Specific)
                    {
                        MaskItem<R, DialogResponse_Mask<R>> mask = default(MaskItem<R, DialogResponse_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, DialogResponse_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItem<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItem<R, Condition_Mask<R>>> l = new List<MaskItem<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific)
                    {
                        MaskItem<R, Condition_Mask<R>> mask = default(MaskItem<R, Condition_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Condition_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Choices != null)
            {
                obj.Choices = new MaskItem<R, IEnumerable<R>>();
                obj.Choices.Overall = eval(this.Choices.Overall);
                if (Choices.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Choices.Specific = l;
                    foreach (var item in Choices.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (LinkFrom != null)
            {
                obj.LinkFrom = new MaskItem<R, IEnumerable<R>>();
                obj.LinkFrom.Overall = eval(this.LinkFrom.Overall);
                if (LinkFrom.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.LinkFrom.Specific = l;
                    foreach (var item in LinkFrom.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (this.Script != null)
            {
                obj.Script = new MaskItem<R, ScriptFields_Mask<R>>();
                obj.Script.Overall = eval(this.Script.Overall);
                if (this.Script.Specific != null)
                {
                    obj.Script.Specific = this.Script.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Topics.Specific = null;
            this.Responses.Specific = null;
            this.Conditions.Specific = null;
            this.Choices.Specific = null;
            this.LinkFrom.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DialogItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DialogItem_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(DialogItem_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DialogType ?? true)
                {
                    fg.AppendLine($"DialogType => {DialogType}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Quest ?? true)
                {
                    fg.AppendLine($"Quest => {Quest}");
                }
                if (printMask?.PreviousTopic ?? true)
                {
                    fg.AppendLine($"PreviousTopic => {PreviousTopic}");
                }
                if (printMask?.Topics?.Overall ?? true)
                {
                    fg.AppendLine("Topics =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Topics.Overall != null)
                        {
                            fg.AppendLine(Topics.Overall.ToString());
                        }
                        if (Topics.Specific != null)
                        {
                            foreach (var subItem in Topics.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Responses?.Overall ?? true)
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Responses.Overall != null)
                        {
                            fg.AppendLine(Responses.Overall.ToString());
                        }
                        if (Responses.Specific != null)
                        {
                            foreach (var subItem in Responses.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Choices?.Overall ?? true)
                {
                    fg.AppendLine("Choices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Choices.Overall != null)
                        {
                            fg.AppendLine(Choices.Overall.ToString());
                        }
                        if (Choices.Specific != null)
                        {
                            foreach (var subItem in Choices.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LinkFrom?.Overall ?? true)
                {
                    fg.AppendLine("LinkFrom =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (LinkFrom.Overall != null)
                        {
                            fg.AppendLine(LinkFrom.Overall.ToString());
                        }
                        if (LinkFrom.Specific != null)
                        {
                            foreach (var subItem in LinkFrom.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Script?.Overall ?? true)
                {
                    Script?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DialogItem_ErrorMask : MajorRecord_ErrorMask, IErrorMask<DialogItem_ErrorMask>
    {
        #region Members
        public Exception DialogType;
        public Exception Flags;
        public Exception Quest;
        public Exception PreviousTopic;
        public MaskItem<Exception, IEnumerable<Exception>> Topics;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogResponse_ErrorMask>>> Responses;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public MaskItem<Exception, IEnumerable<Exception>> Choices;
        public MaskItem<Exception, IEnumerable<Exception>> LinkFrom;
        public MaskItem<Exception, ScriptFields_ErrorMask> Script;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    return DialogType;
                case DialogItem_FieldIndex.Flags:
                    return Flags;
                case DialogItem_FieldIndex.Quest:
                    return Quest;
                case DialogItem_FieldIndex.PreviousTopic:
                    return PreviousTopic;
                case DialogItem_FieldIndex.Topics:
                    return Topics;
                case DialogItem_FieldIndex.Responses:
                    return Responses;
                case DialogItem_FieldIndex.Conditions:
                    return Conditions;
                case DialogItem_FieldIndex.Choices:
                    return Choices;
                case DialogItem_FieldIndex.LinkFrom:
                    return LinkFrom;
                case DialogItem_FieldIndex.Script:
                    return Script;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    this.DialogType = ex;
                    break;
                case DialogItem_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case DialogItem_FieldIndex.Quest:
                    this.Quest = ex;
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    this.PreviousTopic = ex;
                    break;
                case DialogItem_FieldIndex.Topics:
                    this.Topics = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case DialogItem_FieldIndex.Responses:
                    this.Responses = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogResponse_ErrorMask>>>(ex, null);
                    break;
                case DialogItem_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case DialogItem_FieldIndex.Choices:
                    this.Choices = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    this.LinkFrom = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case DialogItem_FieldIndex.Script:
                    this.Script = new MaskItem<Exception, ScriptFields_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    this.DialogType = (Exception)obj;
                    break;
                case DialogItem_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case DialogItem_FieldIndex.Quest:
                    this.Quest = (Exception)obj;
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    this.PreviousTopic = (Exception)obj;
                    break;
                case DialogItem_FieldIndex.Topics:
                    this.Topics = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case DialogItem_FieldIndex.Responses:
                    this.Responses = (MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogResponse_ErrorMask>>>)obj;
                    break;
                case DialogItem_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case DialogItem_FieldIndex.Choices:
                    this.Choices = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    this.LinkFrom = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case DialogItem_FieldIndex.Script:
                    this.Script = (MaskItem<Exception, ScriptFields_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (DialogType != null) return true;
            if (Flags != null) return true;
            if (Quest != null) return true;
            if (PreviousTopic != null) return true;
            if (Topics != null) return true;
            if (Responses != null) return true;
            if (Conditions != null) return true;
            if (Choices != null) return true;
            if (LinkFrom != null) return true;
            if (Script != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("DialogItem_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"DialogType => {DialogType}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Quest => {Quest}");
            fg.AppendLine($"PreviousTopic => {PreviousTopic}");
            fg.AppendLine("Topics =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Topics.Overall != null)
                {
                    fg.AppendLine(Topics.Overall.ToString());
                }
                if (Topics.Specific != null)
                {
                    foreach (var subItem in Topics.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Responses =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Responses.Overall != null)
                {
                    fg.AppendLine(Responses.Overall.ToString());
                }
                if (Responses.Specific != null)
                {
                    foreach (var subItem in Responses.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Choices =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Choices.Overall != null)
                {
                    fg.AppendLine(Choices.Overall.ToString());
                }
                if (Choices.Specific != null)
                {
                    foreach (var subItem in Choices.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("LinkFrom =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (LinkFrom.Overall != null)
                {
                    fg.AppendLine(LinkFrom.Overall.ToString());
                }
                if (LinkFrom.Specific != null)
                {
                    foreach (var subItem in LinkFrom.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            Script?.ToString(fg);
        }
        #endregion

        #region Combine
        public DialogItem_ErrorMask Combine(DialogItem_ErrorMask rhs)
        {
            var ret = new DialogItem_ErrorMask();
            ret.DialogType = this.DialogType.Combine(rhs.DialogType);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Quest = this.Quest.Combine(rhs.Quest);
            ret.PreviousTopic = this.PreviousTopic.Combine(rhs.PreviousTopic);
            ret.Topics = new MaskItem<Exception, IEnumerable<Exception>>(this.Topics.Overall.Combine(rhs.Topics.Overall), new List<Exception>(this.Topics.Specific.And(rhs.Topics.Specific)));
            ret.Responses = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogResponse_ErrorMask>>>(this.Responses.Overall.Combine(rhs.Responses.Overall), new List<MaskItem<Exception, DialogResponse_ErrorMask>>(this.Responses.Specific.And(rhs.Responses.Specific)));
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.Choices = new MaskItem<Exception, IEnumerable<Exception>>(this.Choices.Overall.Combine(rhs.Choices.Overall), new List<Exception>(this.Choices.Specific.And(rhs.Choices.Specific)));
            ret.LinkFrom = new MaskItem<Exception, IEnumerable<Exception>>(this.LinkFrom.Overall.Combine(rhs.LinkFrom.Overall), new List<Exception>(this.LinkFrom.Specific.And(rhs.LinkFrom.Specific)));
            ret.Script = new MaskItem<Exception, ScriptFields_ErrorMask>(this.Script.Overall.Combine(rhs.Script.Overall), ((IErrorMask<ScriptFields_ErrorMask>)this.Script.Specific).Combine(rhs.Script.Specific));
            return ret;
        }
        public static DialogItem_ErrorMask Combine(DialogItem_ErrorMask lhs, DialogItem_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static DialogItem_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new DialogItem_ErrorMask();
        }
        #endregion

    }
    public class DialogItem_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool DialogType;
        public bool Flags;
        public bool Quest;
        public bool PreviousTopic;
        public CopyOption Topics;
        public MaskItem<CopyOption, DialogResponse_CopyMask> Responses;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        public CopyOption Choices;
        public CopyOption LinkFrom;
        public MaskItem<bool, ScriptFields_CopyMask> Script;
        #endregion

    }
    public class DialogItem_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool DialogType;
        public bool Flags;
        public bool Quest;
        public bool PreviousTopic;
        public bool Topics;
        public MaskItem<bool, DialogResponse_TranslationMask> Responses;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public bool Choices;
        public bool LinkFrom;
        public MaskItem<bool, ScriptFields_TranslationMask> Script;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((DialogType, null));
            ret.Add((Flags, null));
            ret.Add((Quest, null));
            ret.Add((PreviousTopic, null));
            ret.Add((Topics, null));
            ret.Add((Responses?.Overall ?? true, Responses?.Specific?.GetCrystal()));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((Choices, null));
            ret.Add((LinkFrom, null));
            ret.Add((Script?.Overall ?? true, Script?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
