/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogItem :
        OblivionMajorRecord,
        IDialogItemInternal,
        ILoquiObjectSetter<DialogItem>,
        ILinkSubContainer,
        IEquatable<DialogItem>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogItem_Registration.Instance;
        public new static DialogItem_Registration Registration => DialogItem_Registration.Instance;
        protected override object CommonInstance => DialogItemCommon.Instance;

        #region Ctor
        protected DialogItem()
        {
            _hasBeenSetTracker[(int)DialogItem_FieldIndex.Script] = true;
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DialogType
        private DialogType _DialogType;
        public DialogType DialogType
        {
            get => this._DialogType;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._DialogType, value, nameof(DialogType));
            }
        }
        #endregion
        #region Flags
        private DialogItem.Flag _Flags;
        public DialogItem.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Quest
        public IFormIDSetLink<Quest> Quest_Property { get; } = new FormIDSetLink<Quest>();
        public Quest Quest { get => Quest_Property.Item; set => Quest_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Quest> IDialogItem.Quest_Property => this.Quest_Property;
        IQuestInternalGetter IDialogItemGetter.Quest => this.Quest_Property.Item;
        IFormIDSetLinkGetter<IQuestInternalGetter> IDialogItemGetter.Quest_Property => this.Quest_Property;
        #endregion
        #region PreviousTopic
        public IFormIDSetLink<DialogItem> PreviousTopic_Property { get; } = new FormIDSetLink<DialogItem>();
        public DialogItem PreviousTopic { get => PreviousTopic_Property.Item; set => PreviousTopic_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<DialogItem> IDialogItem.PreviousTopic_Property => this.PreviousTopic_Property;
        IDialogItemInternalGetter IDialogItemGetter.PreviousTopic => this.PreviousTopic_Property.Item;
        IFormIDSetLinkGetter<IDialogItemInternalGetter> IDialogItemGetter.PreviousTopic_Property => this.PreviousTopic_Property;
        #endregion
        #region Topics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDLink<DialogTopic>> _Topics = new SourceSetList<IFormIDLink<DialogTopic>>();
        public ISourceSetList<IFormIDLink<DialogTopic>> Topics => _Topics;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<DialogTopic>> IDialogItem.Topics => _Topics;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> IDialogItemGetter.Topics => _Topics;
        #endregion

        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<DialogResponse> _Responses = new SourceSetList<DialogResponse>();
        public ISourceSetList<DialogResponse> Responses => _Responses;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<DialogResponse> IDialogItem.Responses => _Responses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IDialogResponseInternalGetter> IDialogItemGetter.Responses => _Responses;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Condition> _Conditions = new SourceSetList<Condition>();
        public ISourceSetList<Condition> Conditions => _Conditions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Condition> IDialogItem.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IConditionGetter> IDialogItemGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Choices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDLink<DialogTopic>> _Choices = new SourceSetList<IFormIDLink<DialogTopic>>();
        public ISourceSetList<IFormIDLink<DialogTopic>> Choices => _Choices;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<DialogTopic>> IDialogItem.Choices => _Choices;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> IDialogItemGetter.Choices => _Choices;
        #endregion

        #endregion
        #region LinkFrom
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDLink<DialogTopic>> _LinkFrom = new SourceSetList<IFormIDLink<DialogTopic>>();
        public ISourceSetList<IFormIDLink<DialogTopic>> LinkFrom => _LinkFrom;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<DialogTopic>> IDialogItem.LinkFrom => _LinkFrom;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> IDialogItemGetter.LinkFrom => _LinkFrom;
        #endregion

        #endregion
        #region Script
        private readonly ScriptFields _Script_Object = new ScriptFields();
        public bool Script_IsSet => true;
        bool IDialogItemGetter.Script_IsSet => Script_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptFields Script => _Script_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFieldsGetter IDialogItemGetter.Script => this.Script;
        #endregion
        #region DATADataTypeState
        private DialogItem.DATADataType _DATADataTypeState;
        public DialogItem.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        DialogItem.DATADataType IDialogItemInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        DialogItem.DATADataType IDialogItemInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogItemInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            DialogItemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IDialogItemInternalGetter rhs)) return false;
            return ((DialogItemCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(DialogItem obj)
        {
            return ((DialogItemCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogItemCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => DialogItemXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static DialogItem CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            DialogItem_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogItem CreateFromXml(
            XElement node,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true,
            DialogItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static DialogItem CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new DialogItem() : null;
                    break;
                default:
                    break;
            }
            var ret = new DialogItem();
            try
            {
                ret.DATADataTypeState |= DialogItem.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    DialogItemXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DialogItem CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            DialogItem_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static DialogItem CreateFromXml(
            string path,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogItem CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            DialogItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DialogItem CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            DialogItem_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static DialogItem CreateFromXml(
            Stream stream,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogItem CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            DialogItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            DialogItem item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= DialogItem.DATADataType.Has;
                    break;
                case "Script":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Script);
                        item.Script.CopyFieldsFrom(
                            rhs: ScriptFields.CreateFromXml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask),
                            def: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((DialogItem_FieldIndex)index)
            {
                case DialogItem_FieldIndex.Script:
                    return _hasBeenSetTracker[index];
                case DialogItem_FieldIndex.Quest:
                    return Quest_Property.HasBeenSet;
                case DialogItem_FieldIndex.PreviousTopic:
                    return PreviousTopic_Property.HasBeenSet;
                case DialogItem_FieldIndex.Topics:
                    return Topics.HasBeenSet;
                case DialogItem_FieldIndex.Responses:
                    return Responses.HasBeenSet;
                case DialogItem_FieldIndex.Conditions:
                    return Conditions.HasBeenSet;
                case DialogItem_FieldIndex.Choices:
                    return Choices.HasBeenSet;
                case DialogItem_FieldIndex.LinkFrom:
                    return LinkFrom.HasBeenSet;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = DialogItem_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Quest_Property;
            yield return PreviousTopic_Property;
            foreach (var item in Topics)
            {
                yield return item;
            }
            foreach (var item in Choices)
            {
                yield return item;
            }
            foreach (var item in LinkFrom)
            {
                yield return item;
            }
            if (Script is ILinkSubContainer ScriptlinkCont)
            {
                foreach (var item in ScriptlinkCont.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            Quest_Property.Link(
                modList,
                sourceMod);
            PreviousTopic_Property.Link(
                modList,
                sourceMod);
            foreach (var item in Topics)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            foreach (var item in Choices)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            foreach (var item in LinkFrom)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            if (Script is ILinkSubContainer ScriptlinkCont)
            {
                ScriptlinkCont?.Link(
                    modList,
                    sourceMod);
            }
        }

        public DialogItem(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public DialogItem(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => DialogItemBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static DialogItem CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static DialogItem CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static DialogItem CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<DialogItem>(
                record: new DialogItem(),
                frame: frame,
                errorMask: errorMask,
                recType: DialogItem_Registration.INFO_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            DialogItem item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            DialogItem item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    if (EnumBinaryTranslation<DialogType>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(2),
                        item: out DialogType DialogTypeParse))
                    {
                        item.DialogType = DialogTypeParse;
                    }
                    else
                    {
                        item.DialogType = default(DialogType);
                    }
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= DATADataType.Break0;
                        return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.DialogType);
                    }
                    if (EnumBinaryTranslation<DialogItem.Flag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(1),
                        item: out DialogItem.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(DialogItem.Flag);
                    }
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Flags);
                }
                case 0x49545351: // QSTI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Quest_Property);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Quest);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.PreviousTopic_Property);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.PreviousTopic);
                }
                case 0x454D414E: // NAME
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<DialogTopic>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogItem_Registration.NAME_HEADER,
                        masterReferences: masterReferences,
                        item: item.Topics,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Topics);
                }
                case 0x54445254: // TRDT
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<DialogResponse>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogItem_Registration.TRDT_HEADER,
                        item: item.Responses,
                        fieldIndex: (int)DialogItem_FieldIndex.Responses,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out DialogResponse listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<DialogResponse>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Responses);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)DialogItem_FieldIndex.Conditions,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Condition listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Conditions);
                }
                case 0x544C4354: // TCLT
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<DialogTopic>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogItem_Registration.TCLT_HEADER,
                        masterReferences: masterReferences,
                        item: item.Choices,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Choices);
                }
                case 0x464C4354: // TCLF
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<DialogTopic>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogItem_Registration.TCLF_HEADER,
                        masterReferences: masterReferences,
                        item: item.LinkFrom,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.LinkFrom);
                }
                case 0x52484353: // SCHR
                case 0x44484353: // SCHD
                {
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Script);
                        var tmpScript = ScriptFields.CreateFromBinary(
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                        item.Script.CopyFieldsFrom(
                            rhs: tmpScript,
                            def: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Script);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public DialogItem Copy(
            DialogItem_CopyMask copyMask = null,
            DialogItem def = null)
        {
            return DialogItem.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static DialogItem Copy(
            DialogItem item,
            DialogItem_CopyMask copyMask = null,
            DialogItem def = null)
        {
            DialogItem ret;
            if (item.GetType().Equals(typeof(DialogItem)))
            {
                ret = new DialogItem();
            }
            else
            {
                ret = (DialogItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static DialogItem Copy_ToLoqui(
            DialogItem item,
            DialogItem_CopyMask copyMask = null,
            DialogItem def = null)
        {
            DialogItem ret;
            if (item.GetType().Equals(typeof(DialogItem)))
            {
                ret = new DialogItem() as DialogItem;
            }
            else
            {
                ret = (DialogItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            DialogItem rhs,
            DialogItem_CopyMask copyMask,
            DialogItem def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            DialogItem rhs,
            out DialogItem_ErrorMask errorMask,
            DialogItem_CopyMask copyMask = null,
            DialogItem def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            DialogItem rhs,
            ErrorMaskBuilder errorMask,
            DialogItem_CopyMask copyMask = null,
            DialogItem def = null)
        {
            DialogItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    this.DialogType = (DialogType)obj;
                    break;
                case DialogItem_FieldIndex.Flags:
                    this.Flags = (DialogItem.Flag)obj;
                    break;
                case DialogItem_FieldIndex.Quest:
                    this.Quest_Property.Set((IFormIDSetLink<Quest>)obj);
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    this.PreviousTopic_Property.Set((IFormIDSetLink<DialogItem>)obj);
                    break;
                case DialogItem_FieldIndex.Topics:
                    this._Topics.SetTo((ISetList<IFormIDLink<DialogTopic>>)obj);
                    break;
                case DialogItem_FieldIndex.Responses:
                    this._Responses.SetTo((ISetList<DialogResponse>)obj);
                    break;
                case DialogItem_FieldIndex.Conditions:
                    this._Conditions.SetTo((ISetList<Condition>)obj);
                    break;
                case DialogItem_FieldIndex.Choices:
                    this._Choices.SetTo((ISetList<IFormIDLink<DialogTopic>>)obj);
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    this._LinkFrom.SetTo((ISetList<IFormIDLink<DialogTopic>>)obj);
                    break;
                case DialogItem_FieldIndex.Script:
                    this.Script.CopyFieldsFrom(rhs: (ScriptFields)obj);
                    break;
                case DialogItem_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (DialogItem.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            DialogItemCommon.Instance.Clear(this);
        }

        public new static DialogItem Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new DialogItem();
            foreach (var pair in fields)
            {
                CopyInInternal_DialogItem(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_DialogItem(DialogItem obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out DialogItem_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    obj.DialogType = (DialogType)pair.Value;
                    break;
                case DialogItem_FieldIndex.Flags:
                    obj.Flags = (DialogItem.Flag)pair.Value;
                    break;
                case DialogItem_FieldIndex.Quest:
                    obj.Quest_Property.Set((IFormIDSetLink<Quest>)pair.Value);
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    obj.PreviousTopic_Property.Set((IFormIDSetLink<DialogItem>)pair.Value);
                    break;
                case DialogItem_FieldIndex.Topics:
                    obj._Topics.SetTo((ISetList<IFormIDLink<DialogTopic>>)pair.Value);
                    break;
                case DialogItem_FieldIndex.Responses:
                    obj._Responses.SetTo((ISetList<DialogResponse>)pair.Value);
                    break;
                case DialogItem_FieldIndex.Conditions:
                    obj._Conditions.SetTo((ISetList<Condition>)pair.Value);
                    break;
                case DialogItem_FieldIndex.Choices:
                    obj._Choices.SetTo((ISetList<IFormIDLink<DialogTopic>>)pair.Value);
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    obj._LinkFrom.SetTo((ISetList<IFormIDLink<DialogTopic>>)pair.Value);
                    break;
                case DialogItem_FieldIndex.Script:
                    obj.Script.CopyFieldsFrom(rhs: (ScriptFields)pair.Value);
                    break;
                case DialogItem_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (DialogItem.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IDialogItem :
        IDialogItemInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IDialogItemInternal>
    {
        new DialogType DialogType { get; set; }

        new DialogItem.Flag Flags { get; set; }

        new Quest Quest { get; set; }
        new IFormIDSetLink<Quest> Quest_Property { get; }
        new DialogItem PreviousTopic { get; set; }
        new IFormIDSetLink<DialogItem> PreviousTopic_Property { get; }
        new ISetList<IFormIDLink<DialogTopic>> Topics { get; }
        new ISetList<DialogResponse> Responses { get; }
        new ISetList<Condition> Conditions { get; }
        new ISetList<IFormIDLink<DialogTopic>> Choices { get; }
        new ISetList<IFormIDLink<DialogTopic>> LinkFrom { get; }
        new ScriptFields Script { get; }
        void CopyFieldsFrom(
            DialogItem rhs,
            ErrorMaskBuilder errorMask = null,
            DialogItem_CopyMask copyMask = null,
            DialogItem def = null);
    }

    public partial interface IDialogItemInternal :
        IOblivionMajorRecordInternal,
        IDialogItem,
        IDialogItemInternalGetter
    {
        new Quest Quest { get; set; }
        new IFormIDSetLink<Quest> Quest_Property { get; }
        new DialogItem PreviousTopic { get; set; }
        new IFormIDSetLink<DialogItem> PreviousTopic_Property { get; }
        new ScriptFields Script { get; }
        new DialogItem.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IDialogItemGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IDialogItemInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region DialogType
        DialogType DialogType { get; }

        #endregion
        #region Flags
        DialogItem.Flag Flags { get; }

        #endregion
        #region Quest
        IQuestInternalGetter Quest { get; }
        IFormIDSetLinkGetter<IQuestInternalGetter> Quest_Property { get; }

        #endregion
        #region PreviousTopic
        IDialogItemInternalGetter PreviousTopic { get; }
        IFormIDSetLinkGetter<IDialogItemInternalGetter> PreviousTopic_Property { get; }

        #endregion
        #region Topics
        IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> Topics { get; }
        #endregion
        #region Responses
        IReadOnlySetList<IDialogResponseInternalGetter> Responses { get; }
        #endregion
        #region Conditions
        IReadOnlySetList<IConditionGetter> Conditions { get; }
        #endregion
        #region Choices
        IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> Choices { get; }
        #endregion
        #region LinkFrom
        IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> LinkFrom { get; }
        #endregion
        #region Script
        IScriptFieldsGetter Script { get; }
        bool Script_IsSet { get; }

        #endregion

    }

    public partial interface IDialogItemInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IDialogItemGetter
    {
        #region DATADataTypeState
        DialogItem.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class DialogItemMixIn
    {
        public static void Clear(this IDialogItemInternal item)
        {
            ((DialogItemCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static DialogItem_Mask<bool> GetEqualsMask(
            this IDialogItemInternalGetter item,
            IDialogItemInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogItemCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogItemInternalGetter item,
            string name = null,
            DialogItem_Mask<bool> printMask = null)
        {
            return ((DialogItemCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogItemInternalGetter item,
            FileGeneration fg,
            string name = null,
            DialogItem_Mask<bool> printMask = null)
        {
            ((DialogItemCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDialogItemInternalGetter item,
            DialogItem_Mask<bool?> checkMask)
        {
            return ((DialogItemCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DialogItem_Mask<bool> GetHasBeenSetMask(this IDialogItemInternalGetter item)
        {
            var ret = new DialogItem_Mask<bool>();
            ((DialogItemCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDialogItemInternalGetter item,
            IDialogItemInternalGetter rhs)
        {
            return ((DialogItemCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogItem_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        DialogType = 5,
        Flags = 6,
        Quest = 7,
        PreviousTopic = 8,
        Topics = 9,
        Responses = 10,
        Conditions = 11,
        Choices = 12,
        LinkFrom = 13,
        Script = 14,
        DATADataTypeState = 15,
    }
    #endregion

    #region Registration
    public class DialogItem_Registration : ILoquiRegistration
    {
        public static readonly DialogItem_Registration Instance = new DialogItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 149,
            version: 0);

        public const string GUID = "2d9149e0-aa5e-4b4e-8bef-93b32f602f3b";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(DialogItem_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogItem_ErrorMask);

        public static readonly Type ClassType = typeof(DialogItem);

        public static readonly Type GetterType = typeof(IDialogItemGetter);

        public static readonly Type InternalGetterType = typeof(IDialogItemInternalGetter);

        public static readonly Type SetterType = typeof(IDialogItem);

        public static readonly Type InternalSetterType = typeof(IDialogItemInternal);

        public static readonly Type CommonType = typeof(DialogItemCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogItem";

        public const string Name = "DialogItem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DIALOGTYPE":
                    return (ushort)DialogItem_FieldIndex.DialogType;
                case "FLAGS":
                    return (ushort)DialogItem_FieldIndex.Flags;
                case "QUEST":
                    return (ushort)DialogItem_FieldIndex.Quest;
                case "PREVIOUSTOPIC":
                    return (ushort)DialogItem_FieldIndex.PreviousTopic;
                case "TOPICS":
                    return (ushort)DialogItem_FieldIndex.Topics;
                case "RESPONSES":
                    return (ushort)DialogItem_FieldIndex.Responses;
                case "CONDITIONS":
                    return (ushort)DialogItem_FieldIndex.Conditions;
                case "CHOICES":
                    return (ushort)DialogItem_FieldIndex.Choices;
                case "LINKFROM":
                    return (ushort)DialogItem_FieldIndex.LinkFrom;
                case "SCRIPT":
                    return (ushort)DialogItem_FieldIndex.Script;
                case "DATADATATYPESTATE":
                    return (ushort)DialogItem_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return true;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Script:
                case DialogItem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                case DialogItem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                case DialogItem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    return "DialogType";
                case DialogItem_FieldIndex.Flags:
                    return "Flags";
                case DialogItem_FieldIndex.Quest:
                    return "Quest";
                case DialogItem_FieldIndex.PreviousTopic:
                    return "PreviousTopic";
                case DialogItem_FieldIndex.Topics:
                    return "Topics";
                case DialogItem_FieldIndex.Responses:
                    return "Responses";
                case DialogItem_FieldIndex.Conditions:
                    return "Conditions";
                case DialogItem_FieldIndex.Choices:
                    return "Choices";
                case DialogItem_FieldIndex.LinkFrom:
                    return "LinkFrom";
                case DialogItem_FieldIndex.Script:
                    return "Script";
                case DialogItem_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                case DialogItem_FieldIndex.Script:
                case DialogItem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.DialogType:
                case DialogItem_FieldIndex.Flags:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                case DialogItem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    return typeof(DialogType);
                case DialogItem_FieldIndex.Flags:
                    return typeof(DialogItem.Flag);
                case DialogItem_FieldIndex.Quest:
                    return typeof(IFormIDSetLink<Quest>);
                case DialogItem_FieldIndex.PreviousTopic:
                    return typeof(IFormIDSetLink<DialogItem>);
                case DialogItem_FieldIndex.Topics:
                    return typeof(ISetList<IFormIDLink<DialogTopic>>);
                case DialogItem_FieldIndex.Responses:
                    return typeof(ISetList<DialogResponse>);
                case DialogItem_FieldIndex.Conditions:
                    return typeof(ISetList<Condition>);
                case DialogItem_FieldIndex.Choices:
                    return typeof(ISetList<IFormIDLink<DialogTopic>>);
                case DialogItem_FieldIndex.LinkFrom:
                    return typeof(ISetList<IFormIDLink<DialogTopic>>);
                case DialogItem_FieldIndex.Script:
                    return typeof(ScriptFields);
                case DialogItem_FieldIndex.DATADataTypeState:
                    return typeof(DialogItem.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DialogItemXmlWriteTranslation);
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType QSTI_HEADER = new RecordType("QSTI");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType TRDT_HEADER = new RecordType("TRDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType TCLT_HEADER = new RecordType("TCLT");
        public static readonly RecordType TCLF_HEADER = new RecordType("TCLF");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCHD_HEADER = new RecordType("SCHD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = INFO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 8;
        public static readonly Type BinaryWriteTranslation = typeof(DialogItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogItemCommon : OblivionMajorRecordCommon
    {
        public static readonly DialogItemCommon Instance = new DialogItemCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            DialogItem item,
            DialogItem rhs,
            DialogItem def,
            ErrorMaskBuilder errorMask,
            DialogItem_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.DialogType ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.DialogType);
                try
                {
                    item.DialogType = rhs.DialogType;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Quest ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Quest);
                try
                {
                    item.Quest_Property.SetLink(
                        rhs: rhs.Quest_Property,
                        def: def?.Quest_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PreviousTopic ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.PreviousTopic);
                try
                {
                    item.PreviousTopic_Property.SetLink(
                        rhs: rhs.PreviousTopic_Property,
                        def: def?.PreviousTopic_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Topics != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Topics);
                try
                {
                    item.Topics.SetToWithDefault(
                        rhs.Topics,
                        def?.Topics);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Responses.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Responses);
                try
                {
                    item.Responses.SetToWithDefault<DialogResponse, DialogResponse>(
                        rhs: rhs.Responses,
                        def: def?.Responses,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Responses.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (DialogResponse)r;
                                case CopyOption.MakeCopy:
                                    return DialogResponse.Copy(
                                        r,
                                        copyMask?.Responses?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Responses.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault<Condition, Condition>(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (Condition)r;
                                case CopyOption.MakeCopy:
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Choices != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Choices);
                try
                {
                    item.Choices.SetToWithDefault(
                        rhs.Choices,
                        def?.Choices);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LinkFrom != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.LinkFrom);
                try
                {
                    item.LinkFrom.SetToWithDefault(
                        rhs.LinkFrom,
                        def?.LinkFrom);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script.Overall ?? true)
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Script);
                try
                {
                    ScriptFieldsCommon.CopyFieldsFrom(
                        item: item.Script,
                        rhs: rhs.Script,
                        def: def?.Script,
                        errorMask: errorMask,
                        copyMask: copyMask?.Script.Specific);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IDialogItemInternal item)
        {
            ClearPartial();
            item.DialogType = default(DialogType);
            item.Flags = default(DialogItem.Flag);
            item.Quest_Property.Unset();
            item.PreviousTopic_Property.Unset();
            item.Topics.Unset();
            item.Responses.Unset();
            item.Conditions.Unset();
            item.Choices.Unset();
            item.LinkFrom.Unset();
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IDialogItemInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogItemInternal)item);
        }

        public DialogItem_Mask<bool> GetEqualsMask(
            IDialogItemInternalGetter item,
            IDialogItemInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogItem_Mask<bool>();
            ((DialogItemCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IDialogItemInternalGetter item,
            IDialogItemInternalGetter rhs,
            DialogItem_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DialogType = item.DialogType == rhs.DialogType;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Quest = item.Quest_Property.FormKey == rhs.Quest_Property.FormKey;
            ret.PreviousTopic = item.PreviousTopic_Property.FormKey == rhs.PreviousTopic_Property.FormKey;
            ret.Topics = item.Topics.CollectionEqualsHelper(
                rhs.Topics,
                (l, r) => object.Equals(l, r),
                include);
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Choices = item.Choices.CollectionEqualsHelper(
                rhs.Choices,
                (l, r) => object.Equals(l, r),
                include);
            ret.LinkFrom = item.LinkFrom.CollectionEqualsHelper(
                rhs.LinkFrom,
                (l, r) => object.Equals(l, r),
                include);
            ret.Script = EqualsMaskHelper.EqualsHelper(
                item.Script_IsSet,
                rhs.Script_IsSet,
                item.Script,
                rhs.Script,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IDialogItemInternalGetter item,
            string name = null,
            DialogItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IDialogItemInternalGetter item,
            FileGeneration fg,
            string name = null,
            DialogItem_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogItem =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogItem) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IDialogItemInternalGetter item,
            FileGeneration fg,
            DialogItem_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.DialogType ?? true)
            {
                fg.AppendLine($"DialogType => {item.DialogType}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Quest ?? true)
            {
                fg.AppendLine($"Quest => {item.Quest_Property}");
            }
            if (printMask?.PreviousTopic ?? true)
            {
                fg.AppendLine($"PreviousTopic => {item.PreviousTopic_Property}");
            }
            if (printMask?.Topics?.Overall ?? true)
            {
                fg.AppendLine("Topics =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Topics)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                fg.AppendLine("Responses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Responses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Choices?.Overall ?? true)
            {
                fg.AppendLine("Choices =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Choices)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LinkFrom?.Overall ?? true)
            {
                fg.AppendLine("LinkFrom =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkFrom)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Script?.Overall ?? true)
            {
                item.Script?.ToString(fg, "Script");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IDialogItemInternalGetter item,
            DialogItem_Mask<bool?> checkMask)
        {
            if (checkMask.Quest.HasValue && checkMask.Quest.Value != item.Quest_Property.HasBeenSet) return false;
            if (checkMask.PreviousTopic.HasValue && checkMask.PreviousTopic.Value != item.PreviousTopic_Property.HasBeenSet) return false;
            if (checkMask.Topics.Overall.HasValue && checkMask.Topics.Overall.Value != item.Topics.HasBeenSet) return false;
            if (checkMask.Responses.Overall.HasValue && checkMask.Responses.Overall.Value != item.Responses.HasBeenSet) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            if (checkMask.Choices.Overall.HasValue && checkMask.Choices.Overall.Value != item.Choices.HasBeenSet) return false;
            if (checkMask.LinkFrom.Overall.HasValue && checkMask.LinkFrom.Overall.Value != item.LinkFrom.HasBeenSet) return false;
            if (checkMask.Script.Overall.HasValue && checkMask.Script.Overall.Value != item.Script_IsSet) return false;
            if (checkMask.Script.Specific != null && (item.Script == null || !item.Script.HasBeenSet(checkMask.Script.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IDialogItemInternalGetter item,
            DialogItem_Mask<bool> mask)
        {
            mask.DialogType = true;
            mask.Flags = true;
            mask.Quest = item.Quest_Property.HasBeenSet;
            mask.PreviousTopic = item.PreviousTopic_Property.HasBeenSet;
            mask.Topics = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Topics.HasBeenSet, null);
            mask.Responses = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, DialogResponse_Mask<bool>>>>(item.Responses.HasBeenSet, item.Responses.WithIndex().Select((i) => new MaskItemIndexed<bool, DialogResponse_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Choices = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Choices.HasBeenSet, null);
            mask.LinkFrom = new MaskItem<bool, IEnumerable<(int, bool)>>(item.LinkFrom.HasBeenSet, null);
            mask.Script = new MaskItem<bool, ScriptFields_Mask<bool>>(item.Script_IsSet, item.Script.GetHasBeenSetMask());
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static DialogItem_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (DialogItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static DialogItem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IDialogItemInternalGetter lhs,
            IDialogItemInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.DialogType != rhs.DialogType) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Quest_Property.HasBeenSet != rhs.Quest_Property.HasBeenSet) return false;
            if (lhs.Quest_Property.HasBeenSet)
            {
                if (!lhs.Quest_Property.Equals(rhs.Quest_Property)) return false;
            }
            if (lhs.PreviousTopic_Property.HasBeenSet != rhs.PreviousTopic_Property.HasBeenSet) return false;
            if (lhs.PreviousTopic_Property.HasBeenSet)
            {
                if (!lhs.PreviousTopic_Property.Equals(rhs.PreviousTopic_Property)) return false;
            }
            if (lhs.Topics.HasBeenSet != rhs.Topics.HasBeenSet) return false;
            if (lhs.Topics.HasBeenSet)
            {
                if (!lhs.Topics.SequenceEqual(rhs.Topics)) return false;
            }
            if (lhs.Responses.HasBeenSet != rhs.Responses.HasBeenSet) return false;
            if (lhs.Responses.HasBeenSet)
            {
                if (!lhs.Responses.SequenceEqual(rhs.Responses)) return false;
            }
            if (lhs.Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (lhs.Conditions.HasBeenSet)
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (lhs.Choices.HasBeenSet != rhs.Choices.HasBeenSet) return false;
            if (lhs.Choices.HasBeenSet)
            {
                if (!lhs.Choices.SequenceEqual(rhs.Choices)) return false;
            }
            if (lhs.LinkFrom.HasBeenSet != rhs.LinkFrom.HasBeenSet) return false;
            if (lhs.LinkFrom.HasBeenSet)
            {
                if (!lhs.LinkFrom.SequenceEqual(rhs.LinkFrom)) return false;
            }
            if (lhs.Script_IsSet != rhs.Script_IsSet) return false;
            if (lhs.Script_IsSet)
            {
                if (!object.Equals(lhs.Script, rhs.Script)) return false;
            }
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IDialogItemInternalGetter)lhs,
                rhs: rhs as IDialogItemInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IDialogItemInternalGetter)lhs,
                rhs: rhs as IDialogItemInternalGetter);
        }

        public virtual int GetHashCode(IDialogItemInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.DialogType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            if (item.Quest_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Quest).CombineHashCode(ret);
            }
            if (item.PreviousTopic_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.PreviousTopic).CombineHashCode(ret);
            }
            if (item.Topics.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Topics).CombineHashCode(ret);
            }
            if (item.Responses.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Responses).CombineHashCode(ret);
            }
            if (item.Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            }
            if (item.Choices.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Choices).CombineHashCode(ret);
            }
            if (item.LinkFrom.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.LinkFrom).CombineHashCode(ret);
            }
            if (item.Script_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IDialogItemInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IDialogItemInternalGetter)item);
        }

        #endregion


        #region Mutagen
        partial void PostDuplicate(DialogItem obj, DialogItem rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new DialogItem(getNextFormKey());
            ret.CopyFieldsFrom((DialogItem)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (DialogItem)item, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

    }
    #endregion

}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogItemXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static DialogItemXmlWriteTranslation Instance = new DialogItemXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDialogItemInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.DATADataTypeState.HasFlag(DialogItem.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.DialogType) ?? true))
                {
                    EnumXmlTranslation<DialogType>.Instance.Write(
                        node: node,
                        name: nameof(item.DialogType),
                        item: item.DialogType,
                        fieldIndex: (int)DialogItem_FieldIndex.DialogType,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(DialogItem.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Flags) ?? true))
                    {
                        EnumXmlTranslation<DialogItem.Flag>.Instance.Write(
                            node: node,
                            name: nameof(item.Flags),
                            item: item.Flags,
                            fieldIndex: (int)DialogItem_FieldIndex.Flags,
                            errorMask: errorMask);
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
            if (item.Quest_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Quest) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Quest),
                    item: item.Quest_Property?.FormKey,
                    fieldIndex: (int)DialogItem_FieldIndex.Quest,
                    errorMask: errorMask);
            }
            if (item.PreviousTopic_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.PreviousTopic) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PreviousTopic),
                    item: item.PreviousTopic_Property?.FormKey,
                    fieldIndex: (int)DialogItem_FieldIndex.PreviousTopic,
                    errorMask: errorMask);
            }
            if (item.Topics.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Topics) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Topics),
                    item: item.Topics,
                    fieldIndex: (int)DialogItem_FieldIndex.Topics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Topics),
                    transl: (XElement subNode, IFormIDLinkGetter<IDialogTopicInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Responses.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Responses) ?? true))
            {
                ListXmlTranslation<IDialogResponseInternalGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Responses),
                    item: item.Responses,
                    fieldIndex: (int)DialogItem_FieldIndex.Responses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Responses),
                    transl: (XElement subNode, IDialogResponseInternalGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((DialogResponseXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)DialogItem_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Choices.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Choices) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Choices),
                    item: item.Choices,
                    fieldIndex: (int)DialogItem_FieldIndex.Choices,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Choices),
                    transl: (XElement subNode, IFormIDLinkGetter<IDialogTopicInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.LinkFrom.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.LinkFrom) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.LinkFrom),
                    item: item.LinkFrom,
                    fieldIndex: (int)DialogItem_FieldIndex.LinkFrom,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.LinkFrom),
                    transl: (XElement subNode, IFormIDLinkGetter<IDialogTopicInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Script_IsSet
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Script) ?? true))
            {
                var loquiItem = item.Script;
                ((ScriptFieldsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Script),
                    fieldIndex: (int)DialogItem_FieldIndex.Script,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Script));
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<DialogItem.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)DialogItem_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDialogItemInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogItem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogItem");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDialogItemInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDialogItemInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDialogItemInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class DialogItemXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static DialogItemXmlCreateTranslation Instance = new DialogItemXmlCreateTranslation();

        public static void FillPublicXml(
            IDialogItemInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogItemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDialogItemInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "DialogType":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.DialogType);
                        if (EnumXmlTranslation<DialogType>.Instance.Parse(
                            node: node,
                            item: out DialogType DialogTypeParse,
                            errorMask: errorMask))
                        {
                            item.DialogType = DialogTypeParse;
                        }
                        else
                        {
                            item.DialogType = default(DialogType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= DialogItem.DATADataType.Has;
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Flags);
                        if (EnumXmlTranslation<DialogItem.Flag>.Instance.Parse(
                            node: node,
                            item: out DialogItem.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(DialogItem.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~DialogItem.DATADataType.Break0;
                    break;
                case "Quest":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Quest_Property,
                        fieldIndex: (int)DialogItem_FieldIndex.Quest,
                        errorMask: errorMask);
                    break;
                case "PreviousTopic":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.PreviousTopic_Property,
                        fieldIndex: (int)DialogItem_FieldIndex.PreviousTopic,
                        errorMask: errorMask);
                    break;
                case "Topics":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Topics);
                        if (ListXmlTranslation<IFormIDLink<DialogTopic>>.Instance.Parse(
                            node: node,
                            enumer: out var TopicsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Topics.SetTo(TopicsItem);
                        }
                        else
                        {
                            item.Topics.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responses":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Responses);
                        if (ListXmlTranslation<DialogResponse>.Instance.Parse(
                            node: node,
                            enumer: out var ResponsesItem,
                            transl: LoquiXmlTranslation<DialogResponse>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Responses.SetTo(ResponsesItem);
                        }
                        else
                        {
                            item.Responses.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Choices":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.Choices);
                        if (ListXmlTranslation<IFormIDLink<DialogTopic>>.Instance.Parse(
                            node: node,
                            enumer: out var ChoicesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Choices.SetTo(ChoicesItem);
                        }
                        else
                        {
                            item.Choices.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LinkFrom":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.LinkFrom);
                        if (ListXmlTranslation<IFormIDLink<DialogTopic>>.Instance.Parse(
                            node: node,
                            enumer: out var LinkFromItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LinkFrom.SetTo(LinkFromItem);
                        }
                        else
                        {
                            item.LinkFrom.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)DialogItem_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<DialogItem.DATADataType>.Instance.Parse(
                            node: node,
                            item: out DialogItem.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(DialogItem.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class DialogItemXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDialogItemInternalGetter item,
            XElement node,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true,
            DialogItem_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DialogItemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDialogItemInternalGetter item,
            string path,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogItemInternalGetter item,
            Stream stream,
            out DialogItem_ErrorMask errorMask,
            DialogItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class DialogItem_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<DialogItem_Mask<T>>
    {
        #region Ctors
        public DialogItem_Mask()
        {
        }

        public DialogItem_Mask(T initialValue)
        {
            this.DialogType = initialValue;
            this.Flags = initialValue;
            this.Quest = initialValue;
            this.PreviousTopic = initialValue;
            this.Topics = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Responses = new MaskItem<T, IEnumerable<MaskItemIndexed<T, DialogResponse_Mask<T>>>>(initialValue, null);
            this.Conditions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>>(initialValue, null);
            this.Choices = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.LinkFrom = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Script = new MaskItem<T, ScriptFields_Mask<T>>(initialValue, new ScriptFields_Mask<T>(initialValue));
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T DialogType;
        public T Flags;
        public T Quest;
        public T PreviousTopic;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Topics;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, DialogResponse_Mask<T>>>> Responses;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>> Conditions;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Choices;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> LinkFrom;
        public MaskItem<T, ScriptFields_Mask<T>> Script { get; set; }
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DialogItem_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogItem_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.DialogType, rhs.DialogType)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Quest, rhs.Quest)) return false;
            if (!object.Equals(this.PreviousTopic, rhs.PreviousTopic)) return false;
            if (!object.Equals(this.Topics, rhs.Topics)) return false;
            if (!object.Equals(this.Responses, rhs.Responses)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.Choices, rhs.Choices)) return false;
            if (!object.Equals(this.LinkFrom, rhs.LinkFrom)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.DialogType?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Quest?.GetHashCode());
            ret = ret.CombineHashCode(this.PreviousTopic?.GetHashCode());
            ret = ret.CombineHashCode(this.Topics?.GetHashCode());
            ret = ret.CombineHashCode(this.Responses?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.Choices?.GetHashCode());
            ret = ret.CombineHashCode(this.LinkFrom?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.DialogType)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Quest)) return false;
            if (!eval(this.PreviousTopic)) return false;
            if (this.Topics != null)
            {
                if (!eval(this.Topics.Overall)) return false;
                if (this.Topics.Specific != null)
                {
                    foreach (var item in this.Topics.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (this.Responses != null)
            {
                if (!eval(this.Responses.Overall)) return false;
                if (this.Responses.Specific != null)
                {
                    foreach (var item in this.Responses.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Choices != null)
            {
                if (!eval(this.Choices.Overall)) return false;
                if (this.Choices.Specific != null)
                {
                    foreach (var item in this.Choices.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (this.LinkFrom != null)
            {
                if (!eval(this.LinkFrom.Overall)) return false;
                if (this.LinkFrom.Specific != null)
                {
                    foreach (var item in this.LinkFrom.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (Script != null)
            {
                if (!eval(this.Script.Overall)) return false;
                if (this.Script.Specific != null && !this.Script.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new DialogItem_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DialogItem_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DialogItem_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.DialogType = eval(this.DialogType);
            obj.Flags = eval(this.Flags);
            obj.Quest = eval(this.Quest);
            obj.PreviousTopic = eval(this.PreviousTopic);
            if (Topics != null)
            {
                obj.Topics = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Topics.Overall = eval(this.Topics.Overall);
                if (Topics.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Topics.Specific = l;
                    foreach (var item in Topics.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (Responses != null)
            {
                obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponse_Mask<R>>>>();
                obj.Responses.Overall = eval(this.Responses.Overall);
                if (Responses.Specific != null)
                {
                    List<MaskItemIndexed<R, DialogResponse_Mask<R>>> l = new List<MaskItemIndexed<R, DialogResponse_Mask<R>>>();
                    obj.Responses.Specific = l;
                    foreach (var item in Responses.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, DialogResponse_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, DialogResponse_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItemIndexed<R, Condition_Mask<R>>> l = new List<MaskItemIndexed<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Condition_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Condition_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Choices != null)
            {
                obj.Choices = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Choices.Overall = eval(this.Choices.Overall);
                if (Choices.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Choices.Specific = l;
                    foreach (var item in Choices.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (LinkFrom != null)
            {
                obj.LinkFrom = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.LinkFrom.Overall = eval(this.LinkFrom.Overall);
                if (LinkFrom.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.LinkFrom.Specific = l;
                    foreach (var item in LinkFrom.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (this.Script != null)
            {
                obj.Script = new MaskItem<R, ScriptFields_Mask<R>>();
                obj.Script.Overall = eval(this.Script.Overall);
                if (this.Script.Specific != null)
                {
                    obj.Script.Specific = this.Script.Specific.Translate(eval);
                }
            }
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Topics.Specific = null;
            this.Responses.Specific = null;
            this.Conditions.Specific = null;
            this.Choices.Specific = null;
            this.LinkFrom.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DialogItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DialogItem_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(DialogItem_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DialogType ?? true)
                {
                    fg.AppendLine($"DialogType => {DialogType}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Quest ?? true)
                {
                    fg.AppendLine($"Quest => {Quest}");
                }
                if (printMask?.PreviousTopic ?? true)
                {
                    fg.AppendLine($"PreviousTopic => {PreviousTopic}");
                }
                if (printMask?.Topics?.Overall ?? true)
                {
                    fg.AppendLine("Topics =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Topics.Overall != null)
                        {
                            fg.AppendLine(Topics.Overall.ToString());
                        }
                        if (Topics.Specific != null)
                        {
                            foreach (var subItem in Topics.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Responses?.Overall ?? true)
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Responses.Overall != null)
                        {
                            fg.AppendLine(Responses.Overall.ToString());
                        }
                        if (Responses.Specific != null)
                        {
                            foreach (var subItem in Responses.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Choices?.Overall ?? true)
                {
                    fg.AppendLine("Choices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Choices.Overall != null)
                        {
                            fg.AppendLine(Choices.Overall.ToString());
                        }
                        if (Choices.Specific != null)
                        {
                            foreach (var subItem in Choices.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LinkFrom?.Overall ?? true)
                {
                    fg.AppendLine("LinkFrom =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (LinkFrom.Overall != null)
                        {
                            fg.AppendLine(LinkFrom.Overall.ToString());
                        }
                        if (LinkFrom.Specific != null)
                        {
                            foreach (var subItem in LinkFrom.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Script?.Overall ?? true)
                {
                    Script?.ToString(fg);
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DialogItem_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<DialogItem_ErrorMask>
    {
        #region Members
        public Exception DialogType;
        public Exception Flags;
        public Exception Quest;
        public Exception PreviousTopic;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Topics;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogResponse_ErrorMask>>> Responses;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Choices;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> LinkFrom;
        public MaskItem<Exception, ScriptFields_ErrorMask> Script;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    return DialogType;
                case DialogItem_FieldIndex.Flags:
                    return Flags;
                case DialogItem_FieldIndex.Quest:
                    return Quest;
                case DialogItem_FieldIndex.PreviousTopic:
                    return PreviousTopic;
                case DialogItem_FieldIndex.Topics:
                    return Topics;
                case DialogItem_FieldIndex.Responses:
                    return Responses;
                case DialogItem_FieldIndex.Conditions:
                    return Conditions;
                case DialogItem_FieldIndex.Choices:
                    return Choices;
                case DialogItem_FieldIndex.LinkFrom:
                    return LinkFrom;
                case DialogItem_FieldIndex.Script:
                    return Script;
                case DialogItem_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    this.DialogType = ex;
                    break;
                case DialogItem_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case DialogItem_FieldIndex.Quest:
                    this.Quest = ex;
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    this.PreviousTopic = ex;
                    break;
                case DialogItem_FieldIndex.Topics:
                    this.Topics = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case DialogItem_FieldIndex.Responses:
                    this.Responses = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogResponse_ErrorMask>>>(ex, null);
                    break;
                case DialogItem_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case DialogItem_FieldIndex.Choices:
                    this.Choices = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    this.LinkFrom = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case DialogItem_FieldIndex.Script:
                    this.Script = new MaskItem<Exception, ScriptFields_ErrorMask>(ex, null);
                    break;
                case DialogItem_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.DialogType:
                    this.DialogType = (Exception)obj;
                    break;
                case DialogItem_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case DialogItem_FieldIndex.Quest:
                    this.Quest = (Exception)obj;
                    break;
                case DialogItem_FieldIndex.PreviousTopic:
                    this.PreviousTopic = (Exception)obj;
                    break;
                case DialogItem_FieldIndex.Topics:
                    this.Topics = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case DialogItem_FieldIndex.Responses:
                    this.Responses = (MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogResponse_ErrorMask>>>)obj;
                    break;
                case DialogItem_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case DialogItem_FieldIndex.Choices:
                    this.Choices = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case DialogItem_FieldIndex.LinkFrom:
                    this.LinkFrom = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case DialogItem_FieldIndex.Script:
                    this.Script = (MaskItem<Exception, ScriptFields_ErrorMask>)obj;
                    break;
                case DialogItem_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (DialogType != null) return true;
            if (Flags != null) return true;
            if (Quest != null) return true;
            if (PreviousTopic != null) return true;
            if (Topics != null) return true;
            if (Responses != null) return true;
            if (Conditions != null) return true;
            if (Choices != null) return true;
            if (LinkFrom != null) return true;
            if (Script != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("DialogItem_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"DialogType => {DialogType}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Quest => {Quest}");
            fg.AppendLine($"PreviousTopic => {PreviousTopic}");
            fg.AppendLine("Topics =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Topics.Overall != null)
                {
                    fg.AppendLine(Topics.Overall.ToString());
                }
                if (Topics.Specific != null)
                {
                    foreach (var subItem in Topics.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Responses =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Responses.Overall != null)
                {
                    fg.AppendLine(Responses.Overall.ToString());
                }
                if (Responses.Specific != null)
                {
                    foreach (var subItem in Responses.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Choices =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Choices.Overall != null)
                {
                    fg.AppendLine(Choices.Overall.ToString());
                }
                if (Choices.Specific != null)
                {
                    foreach (var subItem in Choices.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("LinkFrom =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (LinkFrom.Overall != null)
                {
                    fg.AppendLine(LinkFrom.Overall.ToString());
                }
                if (LinkFrom.Specific != null)
                {
                    foreach (var subItem in LinkFrom.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            Script?.ToString(fg);
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public DialogItem_ErrorMask Combine(DialogItem_ErrorMask rhs)
        {
            var ret = new DialogItem_ErrorMask();
            ret.DialogType = this.DialogType.Combine(rhs.DialogType);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Quest = this.Quest.Combine(rhs.Quest);
            ret.PreviousTopic = this.PreviousTopic.Combine(rhs.PreviousTopic);
            ret.Topics = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Topics.Overall.Combine(rhs.Topics.Overall), new List<(int Index, Exception Value)>(this.Topics.Specific.And(rhs.Topics.Specific)));
            ret.Responses = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogResponse_ErrorMask>>>(this.Responses.Overall.Combine(rhs.Responses.Overall), new List<MaskItem<Exception, DialogResponse_ErrorMask>>(this.Responses.Specific.And(rhs.Responses.Specific)));
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.Choices = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Choices.Overall.Combine(rhs.Choices.Overall), new List<(int Index, Exception Value)>(this.Choices.Specific.And(rhs.Choices.Specific)));
            ret.LinkFrom = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.LinkFrom.Overall.Combine(rhs.LinkFrom.Overall), new List<(int Index, Exception Value)>(this.LinkFrom.Specific.And(rhs.LinkFrom.Specific)));
            ret.Script = new MaskItem<Exception, ScriptFields_ErrorMask>(this.Script.Overall.Combine(rhs.Script.Overall), ((IErrorMask<ScriptFields_ErrorMask>)this.Script.Specific).Combine(rhs.Script.Specific));
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static DialogItem_ErrorMask Combine(DialogItem_ErrorMask lhs, DialogItem_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static DialogItem_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new DialogItem_ErrorMask();
        }
        #endregion

    }
    public class DialogItem_CopyMask : OblivionMajorRecord_CopyMask
    {
        public DialogItem_CopyMask()
        {
        }

        public DialogItem_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.DialogType = defaultOn;
            this.Flags = defaultOn;
            this.Quest = defaultOn;
            this.PreviousTopic = defaultOn;
            this.Topics = deepCopyOption;
            this.Responses = new MaskItem<CopyOption, DialogResponse_CopyMask>(deepCopyOption, default);
            this.Conditions = new MaskItem<CopyOption, Condition_CopyMask>(deepCopyOption, default);
            this.Choices = deepCopyOption;
            this.LinkFrom = deepCopyOption;
            this.Script = new MaskItem<bool, ScriptFields_CopyMask>(defaultOn, default);
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool DialogType;
        public bool Flags;
        public bool Quest;
        public bool PreviousTopic;
        public CopyOption Topics;
        public MaskItem<CopyOption, DialogResponse_CopyMask> Responses;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        public CopyOption Choices;
        public CopyOption LinkFrom;
        public MaskItem<bool, ScriptFields_CopyMask> Script;
        public bool DATADataTypeState;
        #endregion

    }

    public class DialogItem_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool DialogType;
        public bool Flags;
        public bool Quest;
        public bool PreviousTopic;
        public bool Topics;
        public MaskItem<bool, DialogResponse_TranslationMask> Responses;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public bool Choices;
        public bool LinkFrom;
        public MaskItem<bool, ScriptFields_TranslationMask> Script;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public DialogItem_TranslationMask()
            : base()
        {
        }

        public DialogItem_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.DialogType = defaultOn;
            this.Flags = defaultOn;
            this.Quest = defaultOn;
            this.PreviousTopic = defaultOn;
            this.Topics = defaultOn;
            this.Responses = new MaskItem<bool, DialogResponse_TranslationMask>(defaultOn, null);
            this.Conditions = new MaskItem<bool, Condition_TranslationMask>(defaultOn, null);
            this.Choices = defaultOn;
            this.LinkFrom = defaultOn;
            this.Script = new MaskItem<bool, ScriptFields_TranslationMask>(defaultOn, null);
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((DialogType, null));
            ret.Add((Flags, null));
            ret.Add((Quest, null));
            ret.Add((PreviousTopic, null));
            ret.Add((Topics, null));
            ret.Add((Responses?.Overall ?? true, Responses?.Specific?.GetCrystal()));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((Choices, null));
            ret.Add((LinkFrom, null));
            ret.Add((Script?.Overall ?? true, Script?.Specific?.GetCrystal()));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogItemBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogItemBinaryWriteTranslation Instance = new DialogItemBinaryWriteTranslation();

        public static void Write_Embedded(
            IDialogItemInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IDialogItemInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.DATADataTypeState.HasFlag(DialogItem.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(DialogItem_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogType>.Instance.Write(
                        writer,
                        item.DialogType,
                        length: 2);
                    if (!item.DATADataTypeState.HasFlag(DialogItem.DATADataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogItem.Flag>.Instance.Write(
                            writer,
                            item.Flags,
                            length: 1);
                    }
                }
            }
            if (item.Quest_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Quest_Property,
                    header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.QSTI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.PreviousTopic_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PreviousTopic_Property,
                    header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.PNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Topics.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Topics,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IDialogTopicInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.NAME_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    });
            }
            if (item.Responses.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IDialogResponseInternalGetter>.Instance.Write(
                    writer: writer,
                    items: item.Responses,
                    fieldIndex: (int)DialogItem_FieldIndex.Responses,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IDialogResponseInternalGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((DialogResponseBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.Conditions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                    writer: writer,
                    items: item.Conditions,
                    fieldIndex: (int)DialogItem_FieldIndex.Conditions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IConditionGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.Choices.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Choices,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IDialogTopicInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.TCLT_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    });
            }
            if (item.LinkFrom.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.LinkFrom,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IDialogTopicInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.TCLF_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    });
            }
            if (item.Script_IsSet)
            {
                var loquiItem = item.Script;
                ((ScriptFieldsBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            IDialogItemInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: DialogItem_Registration.INFO_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IDialogItemInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IDialogItemInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IDialogItemInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class DialogItemBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogItemBinaryCreateTranslation Instance = new DialogItemBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DialogItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogItemInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out DialogItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DialogItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogItem_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogItemBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IDialogItemInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogItem_Registration.Instance;
        public new static DialogItem_Registration Registration => DialogItem_Registration.Instance;
        protected override object CommonInstance => DialogItemCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogItemInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => DialogItemXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => DialogItemBinaryWriteTranslation.Instance;

        private int? _DATALocation;
        public DialogItem.DATADataType DATADataTypeState { get; private set; }
        #region DialogType
        private int _DialogTypeLocation => _DATALocation.Value + 0x0;
        private bool _DialogType_IsSet => _DATALocation.HasValue;
        public DialogType DialogType => _DialogType_IsSet ? (DialogType)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_DialogTypeLocation, 2)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation.Value + 0x2;
        private bool _Flags_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(DialogItem.DATADataType.Break0);
        public DialogItem.Flag Flags => _Flags_IsSet ? (DialogItem.Flag)_data.Span.Slice(_FlagsLocation, 1)[0] : default;
        #endregion
        #region Quest
        private int? _QuestLocation;
        public bool Quest_IsSet => _QuestLocation.HasValue;
        public IFormIDSetLinkGetter<IQuestInternalGetter> Quest_Property => _QuestLocation.HasValue ? new FormIDSetLink<IQuestInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _QuestLocation.Value, _package.Meta)))) : FormIDSetLink<IQuestInternalGetter>.Empty;
        public IQuestInternalGetter Quest => default;
        #endregion
        #region PreviousTopic
        private int? _PreviousTopicLocation;
        public bool PreviousTopic_IsSet => _PreviousTopicLocation.HasValue;
        public IFormIDSetLinkGetter<IDialogItemInternalGetter> PreviousTopic_Property => _PreviousTopicLocation.HasValue ? new FormIDSetLink<IDialogItemInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PreviousTopicLocation.Value, _package.Meta)))) : FormIDSetLink<IDialogItemInternalGetter>.Empty;
        public IDialogItemInternalGetter PreviousTopic => default;
        #endregion
        public IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> Topics { get; private set; } = EmptySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance;
        public IReadOnlySetList<IDialogResponseInternalGetter> Responses { get; private set; } = EmptySetList<DialogResponseBinaryWrapper>.Instance;
        public IReadOnlySetList<IConditionGetter> Conditions { get; private set; } = EmptySetList<ConditionBinaryWrapper>.Instance;
        public IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> Choices { get; private set; } = EmptySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance;
        public IReadOnlySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>> LinkFrom { get; private set; } = EmptySetList<IFormIDLinkGetter<IDialogTopicInternalGetter>>.Instance;
        #region Script
        private IScriptFieldsGetter _Script;
        public IScriptFieldsGetter Script => _Script ?? new ScriptFields();
        public bool Script_IsSet => Script != null;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected DialogItemBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static DialogItemBinaryWrapper DialogItemFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new DialogItemBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = DialogItem.DATADataType.Has;
                    var subLen = _package.Meta.SubRecord(_data.Slice((stream.Position - offset))).RecordLength;
                    if (subLen <= 0x2)
                    {
                        this.DATADataTypeState |= DialogItem.DATADataType.Break0;
                    }
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Flags);
                }
                case 0x49545351: // QSTI
                {
                    _QuestLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Quest);
                }
                case 0x4D414E50: // PNAM
                {
                    _PreviousTopicLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.PreviousTopic);
                }
                case 0x454D414E: // NAME
                {
                    this.Topics = BinaryWrapperSetList<IFormIDLinkGetter<IDialogTopicInternalGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormIDLink<IDialogTopicInternalGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Topics);
                }
                case 0x54445254: // TRDT
                {
                    this.Responses = this.ParseRepeatedTypelessSubrecord<DialogResponseBinaryWrapper>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: DialogItem_Registration.TRDT_HEADER,
                        factory:  DialogResponseBinaryWrapper.DialogResponseFactory);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Responses);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    this.Conditions = BinaryWrapperSetList<ConditionBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ConditionBinaryWrapper.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Conditions);
                }
                case 0x544C4354: // TCLT
                {
                    this.Choices = BinaryWrapperSetList<IFormIDLinkGetter<IDialogTopicInternalGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormIDLink<IDialogTopicInternalGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Choices);
                }
                case 0x464C4354: // TCLF
                {
                    this.LinkFrom = BinaryWrapperSetList<IFormIDLinkGetter<IDialogTopicInternalGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormIDLink<IDialogTopicInternalGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.LinkFrom);
                }
                case 0x52484353: // SCHR
                case 0x44484353: // SCHD
                {
                    this._Script = ScriptFieldsBinaryWrapper.ScriptFieldsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Script);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

