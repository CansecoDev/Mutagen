/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogResponse :
        LoquiNotifyingObject,
        IDialogResponseInternal,
        ILoquiObjectSetter<DialogResponse>,
        IEquatable<DialogResponse>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static DialogResponse_Registration Registration => DialogResponse_Registration.Instance;
        protected object CommonInstance => DialogResponseCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public DialogResponse()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Emotion
        private EmotionType _Emotion;
        public EmotionType Emotion
        {
            get => this._Emotion;
            set
            {
                this.TRDTDataTypeState |= TRDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Emotion, value, nameof(Emotion));
            }
        }
        #endregion
        #region EmotionValue
        private Int32 _EmotionValue;
        public Int32 EmotionValue
        {
            get => this._EmotionValue;
            set
            {
                this.TRDTDataTypeState |= TRDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._EmotionValue, value, nameof(EmotionValue));
            }
        }
        #endregion
        #region Fluff1
        private Byte[] _Fluff1 = new byte[4];
        public Byte[] Fluff1
        {
            get => _Fluff1;
            set
            {
                this._Fluff1 = value;
                if (value == null)
                {
                    this._Fluff1 = new byte[4];
                }
            }
        }
        #endregion
        #region ResponseNumber
        private Byte _ResponseNumber;
        public Byte ResponseNumber
        {
            get => this._ResponseNumber;
            set
            {
                this.TRDTDataTypeState |= TRDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._ResponseNumber, value, nameof(ResponseNumber));
            }
        }
        #endregion
        #region Fluff2
        private Byte[] _Fluff2 = new byte[3];
        public Byte[] Fluff2
        {
            get => _Fluff2;
            set
            {
                this._Fluff2 = value;
                if (value == null)
                {
                    this._Fluff2 = new byte[3];
                }
            }
        }
        #endregion
        #region ResponseText
        public bool ResponseText_IsSet
        {
            get => _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ResponseText];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)DialogResponse_FieldIndex.ResponseText, nameof(ResponseText_IsSet));
        }
        bool IDialogResponseGetter.ResponseText_IsSet => ResponseText_IsSet;
        private String _ResponseText;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ResponseText
        {
            get => this._ResponseText;
            set => ResponseText_Set(value);
        }
        String IDialogResponseGetter.ResponseText => this.ResponseText;
        public void ResponseText_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _ResponseText, value, _hasBeenSetTracker, markSet, (int)DialogResponse_FieldIndex.ResponseText, nameof(ResponseText), nameof(ResponseText_IsSet));
        }
        public void ResponseText_Unset()
        {
            this.ResponseText_Set(default(String), false);
        }
        #endregion
        #region ActorNotes
        public bool ActorNotes_IsSet
        {
            get => _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ActorNotes];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)DialogResponse_FieldIndex.ActorNotes, nameof(ActorNotes_IsSet));
        }
        bool IDialogResponseGetter.ActorNotes_IsSet => ActorNotes_IsSet;
        private String _ActorNotes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ActorNotes
        {
            get => this._ActorNotes;
            set => ActorNotes_Set(value);
        }
        String IDialogResponseGetter.ActorNotes => this.ActorNotes;
        public void ActorNotes_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _ActorNotes, value, _hasBeenSetTracker, markSet, (int)DialogResponse_FieldIndex.ActorNotes, nameof(ActorNotes), nameof(ActorNotes_IsSet));
        }
        public void ActorNotes_Unset()
        {
            this.ActorNotes_Set(default(String), false);
        }
        #endregion
        #region TRDTDataTypeState
        private DialogResponse.TRDTDataType _TRDTDataTypeState;
        public DialogResponse.TRDTDataType TRDTDataTypeState
        {
            get => this._TRDTDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._TRDTDataTypeState, value, nameof(TRDTDataTypeState));
        }
        DialogResponse.TRDTDataType IDialogResponseInternal.TRDTDataTypeState
        {
            get => this.TRDTDataTypeState;
            set => this.TRDTDataTypeState = value;
        }
        DialogResponse.TRDTDataType IDialogResponseInternalGetter.TRDTDataTypeState
        {
            get => this.TRDTDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogResponseInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            DialogResponseMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is DialogResponse rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogResponse rhs)
        {
            if (rhs == null) return false;
            if (this.Emotion != rhs.Emotion) return false;
            if (this.EmotionValue != rhs.EmotionValue) return false;
            if (!ByteExt.EqualsFast(this.Fluff1, rhs.Fluff1)) return false;
            if (this.ResponseNumber != rhs.ResponseNumber) return false;
            if (!ByteExt.EqualsFast(this.Fluff2, rhs.Fluff2)) return false;
            if (ResponseText_IsSet != rhs.ResponseText_IsSet) return false;
            if (ResponseText_IsSet)
            {
                if (!string.Equals(this.ResponseText, rhs.ResponseText)) return false;
            }
            if (ActorNotes_IsSet != rhs.ActorNotes_IsSet) return false;
            if (ActorNotes_IsSet)
            {
                if (!string.Equals(this.ActorNotes, rhs.ActorNotes)) return false;
            }
            if (this.TRDTDataTypeState != rhs.TRDTDataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Emotion).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EmotionValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ResponseNumber).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff2).CombineHashCode(ret);
            if (ResponseText_IsSet)
            {
                ret = HashHelper.GetHashCode(ResponseText).CombineHashCode(ret);
            }
            if (ActorNotes_IsSet)
            {
                ret = HashHelper.GetHashCode(ActorNotes).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(TRDTDataTypeState).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlWriteTranslator XmlWriteTranslator => DialogResponseXmlWriteTranslation.Instance;
        IXmlWriteTranslator IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static DialogResponse CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            DialogResponse_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogResponse CreateFromXml(
            XElement node,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true,
            DialogResponse_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DialogResponse CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new DialogResponse() : null;
                    break;
                default:
                    break;
            }
            var ret = new DialogResponse();
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogResponseXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DialogResponse CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            DialogResponse_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static DialogResponse CreateFromXml(
            string path,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogResponse CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            DialogResponse_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DialogResponse CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            DialogResponse_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static DialogResponse CreateFromXml(
            Stream stream,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogResponse CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            DialogResponse_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                    return _hasBeenSetTracker[index];
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = DialogResponse_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum TRDTDataType
        {
            Has = 1
        }
        #endregion

        #region Binary Translation
        protected IBinaryWriteTranslator BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        IBinaryWriteTranslator IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static DialogResponse CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static DialogResponse CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DialogResponse CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new DialogResponse();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            DialogResponse item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            DialogResponse item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54445254: // TRDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)DialogResponse_FieldIndex.Fluff2) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.TRDTDataTypeState = TRDTDataType.Has;
                    }
                    if (EnumBinaryTranslation<EmotionType>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out EmotionType EmotionParse))
                    {
                        item.Emotion = EmotionParse;
                    }
                    else
                    {
                        item.Emotion = default(EmotionType);
                    }
                    item.EmotionValue = dataFrame.ReadInt32();
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Byte[] Fluff1Parse))
                    {
                        item.Fluff1 = Fluff1Parse;
                    }
                    else
                    {
                        item.Fluff1 = default(Byte[]);
                    }
                    item.ResponseNumber = dataFrame.ReadUInt8();
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(3),
                        item: out Byte[] Fluff2Parse))
                    {
                        item.Fluff2 = Fluff2Parse;
                    }
                    else
                    {
                        item.Fluff2 = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)DialogResponse_FieldIndex.Fluff2);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String ResponseTextParse))
                    {
                        item.ResponseText = ResponseTextParse;
                    }
                    else
                    {
                        item.ResponseText = default(String);
                    }
                    return TryGet<int?>.Succeed((int)DialogResponse_FieldIndex.ResponseText);
                }
                case 0x324D414E: // NAM2
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String ActorNotesParse))
                    {
                        item.ActorNotes = ActorNotesParse;
                    }
                    else
                    {
                        item.ActorNotes = default(String);
                    }
                    return TryGet<int?>.Succeed((int)DialogResponse_FieldIndex.ActorNotes);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public DialogResponse Copy(
            DialogResponse_CopyMask copyMask = null,
            DialogResponse def = null)
        {
            return DialogResponse.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static DialogResponse Copy(
            DialogResponse item,
            DialogResponse_CopyMask copyMask = null,
            DialogResponse def = null)
        {
            DialogResponse ret;
            if (item.GetType().Equals(typeof(DialogResponse)))
            {
                ret = new DialogResponse();
            }
            else
            {
                ret = (DialogResponse)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static DialogResponse Copy_ToLoqui(
            DialogResponse item,
            DialogResponse_CopyMask copyMask = null,
            DialogResponse def = null)
        {
            DialogResponse ret;
            if (item.GetType().Equals(typeof(DialogResponse)))
            {
                ret = new DialogResponse() as DialogResponse;
            }
            else
            {
                ret = (DialogResponse)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(DialogResponse rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            DialogResponse rhs,
            DialogResponse_CopyMask copyMask,
            DialogResponse def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            DialogResponse rhs,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_CopyMask copyMask = null,
            DialogResponse def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponseCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            DialogResponse rhs,
            ErrorMaskBuilder errorMask,
            DialogResponse_CopyMask copyMask = null,
            DialogResponse def = null)
        {
            DialogResponseCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    this.Emotion = (EmotionType)obj;
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    this.EmotionValue = (Int32)obj;
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    this.Fluff1 = (Byte[])obj;
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    this.ResponseNumber = (Byte)obj;
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    this.Fluff2 = (Byte[])obj;
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    this.ResponseText = (String)obj;
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    this.ActorNotes = (String)obj;
                    break;
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    this.TRDTDataTypeState = (DialogResponse.TRDTDataType)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            DialogResponseCommon.Instance.Clear(this);
        }

        public static DialogResponse Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new DialogResponse();
            foreach (var pair in fields)
            {
                CopyInInternal_DialogResponse(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_DialogResponse(DialogResponse obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out DialogResponse_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    obj.Emotion = (EmotionType)pair.Value;
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    obj.EmotionValue = (Int32)pair.Value;
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    obj.Fluff1 = (Byte[])pair.Value;
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    obj.ResponseNumber = (Byte)pair.Value;
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    obj.Fluff2 = (Byte[])pair.Value;
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    obj.ResponseText = (String)pair.Value;
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    obj.ActorNotes = (String)pair.Value;
                    break;
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    obj.TRDTDataTypeState = (DialogResponse.TRDTDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IDialogResponse :
        IDialogResponseGetter,
        ILoquiObjectSetter<IDialogResponseInternal>
    {
        new EmotionType Emotion { get; set; }

        new Int32 EmotionValue { get; set; }

        new Byte[] Fluff1 { get; set; }

        new Byte ResponseNumber { get; set; }

        new Byte[] Fluff2 { get; set; }

        new String ResponseText { get; set; }
        new bool ResponseText_IsSet { get; set; }
        void ResponseText_Set(String value, bool hasBeenSet = true);
        void ResponseText_Unset();

        new String ActorNotes { get; set; }
        new bool ActorNotes_IsSet { get; set; }
        void ActorNotes_Set(String value, bool hasBeenSet = true);
        void ActorNotes_Unset();

        void CopyFieldsFrom(
            DialogResponse rhs,
            ErrorMaskBuilder errorMask = null,
            DialogResponse_CopyMask copyMask = null,
            DialogResponse def = null);
    }

    public partial interface IDialogResponseInternal :
        IDialogResponse,
        IDialogResponseInternalGetter
    {
        new DialogResponse.TRDTDataType TRDTDataTypeState { get; set; }

    }

    public partial interface IDialogResponseGetter :
        ILoquiObject,
        ILoquiObject<IDialogResponseInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Emotion
        EmotionType Emotion { get; }

        #endregion
        #region EmotionValue
        Int32 EmotionValue { get; }

        #endregion
        #region Fluff1
        Byte[] Fluff1 { get; }

        #endregion
        #region ResponseNumber
        Byte ResponseNumber { get; }

        #endregion
        #region Fluff2
        Byte[] Fluff2 { get; }

        #endregion
        #region ResponseText
        String ResponseText { get; }
        bool ResponseText_IsSet { get; }

        #endregion
        #region ActorNotes
        String ActorNotes { get; }
        bool ActorNotes_IsSet { get; }

        #endregion

    }

    public partial interface IDialogResponseInternalGetter : IDialogResponseGetter
    {
        #region TRDTDataTypeState
        DialogResponse.TRDTDataType TRDTDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class DialogResponseMixIn
    {
        public static void Clear(this IDialogResponseInternal item)
        {
            ((DialogResponseCommon)item.CommonInstance).Clear(item: item);
        }

        public static DialogResponse_Mask<bool> GetEqualsMask(
            this IDialogResponseInternalGetter item,
            IDialogResponseInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponseCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogResponseInternalGetter item,
            string name = null,
            DialogResponse_Mask<bool> printMask = null)
        {
            return ((DialogResponseCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogResponseInternalGetter item,
            FileGeneration fg,
            string name = null,
            DialogResponse_Mask<bool> printMask = null)
        {
            ((DialogResponseCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDialogResponseInternalGetter item,
            DialogResponse_Mask<bool?> checkMask)
        {
            return ((DialogResponseCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DialogResponse_Mask<bool> GetHasBeenSetMask(this IDialogResponseInternalGetter item)
        {
            var ret = new DialogResponse_Mask<bool>();
            ((DialogResponseCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogResponse_FieldIndex
    {
        Emotion = 0,
        EmotionValue = 1,
        Fluff1 = 2,
        ResponseNumber = 3,
        Fluff2 = 4,
        ResponseText = 5,
        ActorNotes = 6,
        TRDTDataTypeState = 7,
    }
    #endregion

    #region Registration
    public class DialogResponse_Registration : ILoquiRegistration
    {
        public static readonly DialogResponse_Registration Instance = new DialogResponse_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 150,
            version: 0);

        public const string GUID = "d8438f70-ccc0-4bc8-876d-11134cdabd97";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(DialogResponse_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponse_ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponse);

        public static readonly Type GetterType = typeof(IDialogResponseGetter);

        public static readonly Type InternalGetterType = typeof(IDialogResponseInternalGetter);

        public static readonly Type SetterType = typeof(IDialogResponse);

        public static readonly Type InternalSetterType = typeof(IDialogResponseInternal);

        public static readonly Type CommonType = typeof(DialogResponseCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogResponse";

        public const string Name = "DialogResponse";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "EMOTION":
                    return (ushort)DialogResponse_FieldIndex.Emotion;
                case "EMOTIONVALUE":
                    return (ushort)DialogResponse_FieldIndex.EmotionValue;
                case "FLUFF1":
                    return (ushort)DialogResponse_FieldIndex.Fluff1;
                case "RESPONSENUMBER":
                    return (ushort)DialogResponse_FieldIndex.ResponseNumber;
                case "FLUFF2":
                    return (ushort)DialogResponse_FieldIndex.Fluff2;
                case "RESPONSETEXT":
                    return (ushort)DialogResponse_FieldIndex.ResponseText;
                case "ACTORNOTES":
                    return (ushort)DialogResponse_FieldIndex.ActorNotes;
                case "TRDTDATATYPESTATE":
                    return (ushort)DialogResponse_FieldIndex.TRDTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return "Emotion";
                case DialogResponse_FieldIndex.EmotionValue:
                    return "EmotionValue";
                case DialogResponse_FieldIndex.Fluff1:
                    return "Fluff1";
                case DialogResponse_FieldIndex.ResponseNumber:
                    return "ResponseNumber";
                case DialogResponse_FieldIndex.Fluff2:
                    return "Fluff2";
                case DialogResponse_FieldIndex.ResponseText:
                    return "ResponseText";
                case DialogResponse_FieldIndex.ActorNotes:
                    return "ActorNotes";
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return "TRDTDataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return typeof(EmotionType);
                case DialogResponse_FieldIndex.EmotionValue:
                    return typeof(Int32);
                case DialogResponse_FieldIndex.Fluff1:
                    return typeof(Byte[]);
                case DialogResponse_FieldIndex.ResponseNumber:
                    return typeof(Byte);
                case DialogResponse_FieldIndex.Fluff2:
                    return typeof(Byte[]);
                case DialogResponse_FieldIndex.ResponseText:
                    return typeof(String);
                case DialogResponse_FieldIndex.ActorNotes:
                    return typeof(String);
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return typeof(DialogResponse.TRDTDataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(DialogResponseXmlWriteTranslation);
        public static readonly RecordType TRDT_HEADER = new RecordType("TRDT");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TRDT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryTranslation = typeof(DialogResponseBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogResponseCommon
    {
        public static readonly DialogResponseCommon Instance = new DialogResponseCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            DialogResponse item,
            DialogResponse rhs,
            DialogResponse def,
            ErrorMaskBuilder errorMask,
            DialogResponse_CopyMask copyMask)
        {
            if (copyMask?.Emotion ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.Emotion);
                try
                {
                    item.Emotion = rhs.Emotion;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EmotionValue ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.EmotionValue);
                try
                {
                    item.EmotionValue = rhs.EmotionValue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff1 ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff1);
                try
                {
                    item.Fluff1 = rhs.Fluff1;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ResponseNumber ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseNumber);
                try
                {
                    item.ResponseNumber = rhs.ResponseNumber;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff2 ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff2);
                try
                {
                    item.Fluff2 = rhs.Fluff2;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ResponseText ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseText);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ResponseText,
                        rhsHasBeenSet: rhs.ResponseText_IsSet,
                        defItem: def?.ResponseText ?? default(String),
                        defHasBeenSet: def?.ResponseText_IsSet ?? false,
                        outRhsItem: out var rhsResponseTextItem,
                        outDefItem: out var defResponseTextItem))
                    {
                        item.ResponseText = rhsResponseTextItem;
                    }
                    else
                    {
                        item.ResponseText_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ActorNotes ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.ActorNotes);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ActorNotes,
                        rhsHasBeenSet: rhs.ActorNotes_IsSet,
                        defItem: def?.ActorNotes ?? default(String),
                        defHasBeenSet: def?.ActorNotes_IsSet ?? false,
                        outRhsItem: out var rhsActorNotesItem,
                        outDefItem: out var defActorNotesItem))
                    {
                        item.ActorNotes = rhsActorNotesItem;
                    }
                    else
                    {
                        item.ActorNotes_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IDialogResponseInternal item)
        {
            ClearPartial();
            item.Emotion = default(EmotionType);
            item.EmotionValue = default(Int32);
            item.Fluff1 = default(Byte[]);
            item.ResponseNumber = default(Byte);
            item.Fluff2 = default(Byte[]);
            item.ResponseText_Unset();
            item.ActorNotes_Unset();
        }

        public DialogResponse_Mask<bool> GetEqualsMask(
            IDialogResponseInternalGetter item,
            IDialogResponseInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponse_Mask<bool>();
            ((DialogResponseCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IDialogResponseInternalGetter item,
            IDialogResponseInternalGetter rhs,
            DialogResponse_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Emotion = item.Emotion == rhs.Emotion;
            ret.EmotionValue = item.EmotionValue == rhs.EmotionValue;
            ret.Fluff1 = ByteExt.EqualsFast(item.Fluff1, rhs.Fluff1);
            ret.ResponseNumber = item.ResponseNumber == rhs.ResponseNumber;
            ret.Fluff2 = ByteExt.EqualsFast(item.Fluff2, rhs.Fluff2);
            ret.ResponseText = item.ResponseText_IsSet == rhs.ResponseText_IsSet && string.Equals(item.ResponseText, rhs.ResponseText);
            ret.ActorNotes = item.ActorNotes_IsSet == rhs.ActorNotes_IsSet && string.Equals(item.ActorNotes, rhs.ActorNotes);
        }

        public string ToString(
            IDialogResponseInternalGetter item,
            string name = null,
            DialogResponse_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IDialogResponseInternalGetter item,
            FileGeneration fg,
            string name = null,
            DialogResponse_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogResponse =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogResponse) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IDialogResponseInternalGetter item,
            FileGeneration fg,
            DialogResponse_Mask<bool> printMask = null)
        {
            if (printMask?.Emotion ?? true)
            {
                fg.AppendLine($"Emotion => {item.Emotion}");
            }
            if (printMask?.EmotionValue ?? true)
            {
                fg.AppendLine($"EmotionValue => {item.EmotionValue}");
            }
            if (printMask?.Fluff1 ?? true)
            {
                fg.AppendLine($"Fluff1 => {item.Fluff1}");
            }
            if (printMask?.ResponseNumber ?? true)
            {
                fg.AppendLine($"ResponseNumber => {item.ResponseNumber}");
            }
            if (printMask?.Fluff2 ?? true)
            {
                fg.AppendLine($"Fluff2 => {item.Fluff2}");
            }
            if (printMask?.ResponseText ?? true)
            {
                fg.AppendLine($"ResponseText => {item.ResponseText}");
            }
            if (printMask?.ActorNotes ?? true)
            {
                fg.AppendLine($"ActorNotes => {item.ActorNotes}");
            }
            if (printMask?.TRDTDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IDialogResponseInternalGetter item,
            DialogResponse_Mask<bool?> checkMask)
        {
            if (checkMask.ResponseText.HasValue && checkMask.ResponseText.Value != item.ResponseText_IsSet) return false;
            if (checkMask.ActorNotes.HasValue && checkMask.ActorNotes.Value != item.ActorNotes_IsSet) return false;
            return true;
        }

        public void FillHasBeenSetMask(
            IDialogResponseInternalGetter item,
            DialogResponse_Mask<bool> mask)
        {
            mask.Emotion = true;
            mask.EmotionValue = true;
            mask.Fluff1 = true;
            mask.ResponseNumber = true;
            mask.Fluff2 = true;
            mask.ResponseText = item.ResponseText_IsSet;
            mask.ActorNotes = item.ActorNotes_IsSet;
            mask.TRDTDataTypeState = true;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class DialogResponseXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static DialogResponseXmlWriteTranslation Instance = new DialogResponseXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDialogResponseInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.TRDTDataTypeState.HasFlag(DialogResponse.TRDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
                {
                    EnumXmlTranslation<EmotionType>.Instance.Write(
                        node: node,
                        name: nameof(item.Emotion),
                        item: item.Emotion,
                        fieldIndex: (int)DialogResponse_FieldIndex.Emotion,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.EmotionValue) ?? true))
                {
                    Int32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EmotionValue),
                        item: item.EmotionValue,
                        fieldIndex: (int)DialogResponse_FieldIndex.EmotionValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Fluff1) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff1),
                        item: item.Fluff1,
                        fieldIndex: (int)DialogResponse_FieldIndex.Fluff1,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseNumber) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ResponseNumber),
                        item: item.ResponseNumber,
                        fieldIndex: (int)DialogResponse_FieldIndex.ResponseNumber,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Fluff2) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff2),
                        item: item.Fluff2,
                        fieldIndex: (int)DialogResponse_FieldIndex.Fluff2,
                        errorMask: errorMask);
                }
            }
            if (item.ResponseText_IsSet
                && (translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ResponseText),
                    item: item.ResponseText,
                    fieldIndex: (int)DialogResponse_FieldIndex.ResponseText,
                    errorMask: errorMask);
            }
            if (item.ActorNotes_IsSet
                && (translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ActorNotes) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ActorNotes),
                    item: item.ActorNotes,
                    fieldIndex: (int)DialogResponse_FieldIndex.ActorNotes,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TRDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<DialogResponse.TRDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.TRDTDataTypeState),
                    item: item.TRDTDataTypeState,
                    fieldIndex: (int)DialogResponse_FieldIndex.TRDTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDialogResponseInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogResponse");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogResponse");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDialogResponseInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IDialogResponseInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IDialogResponseInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class DialogResponseXmlCreateTranslation
    {
        public readonly static DialogResponseXmlCreateTranslation Instance = new DialogResponseXmlCreateTranslation();

        public static void FillPublicXml(
            IDialogResponseInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogResponseXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDialogResponseInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Emotion":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.Emotion);
                        if (EnumXmlTranslation<EmotionType>.Instance.Parse(
                            node: node,
                            item: out EmotionType EmotionParse,
                            errorMask: errorMask))
                        {
                            item.Emotion = EmotionParse;
                        }
                        else
                        {
                            item.Emotion = default(EmotionType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.TRDTDataTypeState |= DialogResponse.TRDTDataType.Has;
                    break;
                case "EmotionValue":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.EmotionValue);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 EmotionValueParse,
                            errorMask: errorMask))
                        {
                            item.EmotionValue = EmotionValueParse;
                        }
                        else
                        {
                            item.EmotionValue = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff1":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff1);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] Fluff1Parse,
                            errorMask: errorMask))
                        {
                            item.Fluff1 = Fluff1Parse;
                        }
                        else
                        {
                            item.Fluff1 = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResponseNumber":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseNumber);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ResponseNumberParse,
                            errorMask: errorMask))
                        {
                            item.ResponseNumber = ResponseNumberParse;
                        }
                        else
                        {
                            item.ResponseNumber = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff2":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff2);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] Fluff2Parse,
                            errorMask: errorMask))
                        {
                            item.Fluff2 = Fluff2Parse;
                        }
                        else
                        {
                            item.Fluff2 = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResponseText":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseText);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String ResponseTextParse,
                            errorMask: errorMask))
                        {
                            item.ResponseText = ResponseTextParse;
                        }
                        else
                        {
                            item.ResponseText = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActorNotes":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.ActorNotes);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String ActorNotesParse,
                            errorMask: errorMask))
                        {
                            item.ActorNotes = ActorNotesParse;
                        }
                        else
                        {
                            item.ActorNotes = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TRDTDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.TRDTDataTypeState);
                        if (EnumXmlTranslation<DialogResponse.TRDTDataType>.Instance.Parse(
                            node: node,
                            item: out DialogResponse.TRDTDataType TRDTDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.TRDTDataTypeState = TRDTDataTypeStateParse;
                        }
                        else
                        {
                            item.TRDTDataTypeState = default(DialogResponse.TRDTDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class DialogResponseXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            XElement node,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true,
            DialogResponse_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DialogResponseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            string path,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            Stream stream,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((DialogResponseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            XElement node,
            string name = null,
            DialogResponse_TranslationMask translationMask = null)
        {
            ((DialogResponseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((DialogResponseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogResponseInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((DialogResponseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class DialogResponse_Mask<T> : IMask<T>, IEquatable<DialogResponse_Mask<T>>
    {
        #region Ctors
        public DialogResponse_Mask()
        {
        }

        public DialogResponse_Mask(T initialValue)
        {
            this.Emotion = initialValue;
            this.EmotionValue = initialValue;
            this.Fluff1 = initialValue;
            this.ResponseNumber = initialValue;
            this.Fluff2 = initialValue;
            this.ResponseText = initialValue;
            this.ActorNotes = initialValue;
            this.TRDTDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Emotion;
        public T EmotionValue;
        public T Fluff1;
        public T ResponseNumber;
        public T Fluff2;
        public T ResponseText;
        public T ActorNotes;
        public T TRDTDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DialogResponse_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogResponse_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Emotion, rhs.Emotion)) return false;
            if (!object.Equals(this.EmotionValue, rhs.EmotionValue)) return false;
            if (!object.Equals(this.Fluff1, rhs.Fluff1)) return false;
            if (!object.Equals(this.ResponseNumber, rhs.ResponseNumber)) return false;
            if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
            if (!object.Equals(this.ResponseText, rhs.ResponseText)) return false;
            if (!object.Equals(this.ActorNotes, rhs.ActorNotes)) return false;
            if (!object.Equals(this.TRDTDataTypeState, rhs.TRDTDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Emotion?.GetHashCode());
            ret = ret.CombineHashCode(this.EmotionValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff1?.GetHashCode());
            ret = ret.CombineHashCode(this.ResponseNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff2?.GetHashCode());
            ret = ret.CombineHashCode(this.ResponseText?.GetHashCode());
            ret = ret.CombineHashCode(this.ActorNotes?.GetHashCode());
            ret = ret.CombineHashCode(this.TRDTDataTypeState?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Emotion)) return false;
            if (!eval(this.EmotionValue)) return false;
            if (!eval(this.Fluff1)) return false;
            if (!eval(this.ResponseNumber)) return false;
            if (!eval(this.Fluff2)) return false;
            if (!eval(this.ResponseText)) return false;
            if (!eval(this.ActorNotes)) return false;
            if (!eval(this.TRDTDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public DialogResponse_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DialogResponse_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DialogResponse_Mask<R> obj, Func<T, R> eval)
        {
            obj.Emotion = eval(this.Emotion);
            obj.EmotionValue = eval(this.EmotionValue);
            obj.Fluff1 = eval(this.Fluff1);
            obj.ResponseNumber = eval(this.ResponseNumber);
            obj.Fluff2 = eval(this.Fluff2);
            obj.ResponseText = eval(this.ResponseText);
            obj.ActorNotes = eval(this.ActorNotes);
            obj.TRDTDataTypeState = eval(this.TRDTDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DialogResponse_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DialogResponse_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(DialogResponse_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Emotion ?? true)
                {
                    fg.AppendLine($"Emotion => {Emotion}");
                }
                if (printMask?.EmotionValue ?? true)
                {
                    fg.AppendLine($"EmotionValue => {EmotionValue}");
                }
                if (printMask?.Fluff1 ?? true)
                {
                    fg.AppendLine($"Fluff1 => {Fluff1}");
                }
                if (printMask?.ResponseNumber ?? true)
                {
                    fg.AppendLine($"ResponseNumber => {ResponseNumber}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {Fluff2}");
                }
                if (printMask?.ResponseText ?? true)
                {
                    fg.AppendLine($"ResponseText => {ResponseText}");
                }
                if (printMask?.ActorNotes ?? true)
                {
                    fg.AppendLine($"ActorNotes => {ActorNotes}");
                }
                if (printMask?.TRDTDataTypeState ?? true)
                {
                    fg.AppendLine($"TRDTDataTypeState => {TRDTDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DialogResponse_ErrorMask : IErrorMask, IErrorMask<DialogResponse_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Emotion;
        public Exception EmotionValue;
        public Exception Fluff1;
        public Exception ResponseNumber;
        public Exception Fluff2;
        public Exception ResponseText;
        public Exception ActorNotes;
        public Exception TRDTDataTypeState;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return Emotion;
                case DialogResponse_FieldIndex.EmotionValue:
                    return EmotionValue;
                case DialogResponse_FieldIndex.Fluff1:
                    return Fluff1;
                case DialogResponse_FieldIndex.ResponseNumber:
                    return ResponseNumber;
                case DialogResponse_FieldIndex.Fluff2:
                    return Fluff2;
                case DialogResponse_FieldIndex.ResponseText:
                    return ResponseText;
                case DialogResponse_FieldIndex.ActorNotes:
                    return ActorNotes;
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    return TRDTDataTypeState;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    this.Emotion = ex;
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    this.EmotionValue = ex;
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    this.Fluff1 = ex;
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    this.ResponseNumber = ex;
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    this.Fluff2 = ex;
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    this.ResponseText = ex;
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    this.ActorNotes = ex;
                    break;
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    this.TRDTDataTypeState = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    this.Emotion = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    this.EmotionValue = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    this.Fluff1 = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    this.ResponseNumber = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    this.Fluff2 = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    this.ResponseText = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    this.ActorNotes = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.TRDTDataTypeState:
                    this.TRDTDataTypeState = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Emotion != null) return true;
            if (EmotionValue != null) return true;
            if (Fluff1 != null) return true;
            if (ResponseNumber != null) return true;
            if (Fluff2 != null) return true;
            if (ResponseText != null) return true;
            if (ActorNotes != null) return true;
            if (TRDTDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("DialogResponse_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Emotion => {Emotion}");
            fg.AppendLine($"EmotionValue => {EmotionValue}");
            fg.AppendLine($"Fluff1 => {Fluff1}");
            fg.AppendLine($"ResponseNumber => {ResponseNumber}");
            fg.AppendLine($"Fluff2 => {Fluff2}");
            fg.AppendLine($"ResponseText => {ResponseText}");
            fg.AppendLine($"ActorNotes => {ActorNotes}");
            fg.AppendLine($"TRDTDataTypeState => {TRDTDataTypeState}");
        }
        #endregion

        #region Combine
        public DialogResponse_ErrorMask Combine(DialogResponse_ErrorMask rhs)
        {
            var ret = new DialogResponse_ErrorMask();
            ret.Emotion = this.Emotion.Combine(rhs.Emotion);
            ret.EmotionValue = this.EmotionValue.Combine(rhs.EmotionValue);
            ret.Fluff1 = this.Fluff1.Combine(rhs.Fluff1);
            ret.ResponseNumber = this.ResponseNumber.Combine(rhs.ResponseNumber);
            ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
            ret.ResponseText = this.ResponseText.Combine(rhs.ResponseText);
            ret.ActorNotes = this.ActorNotes.Combine(rhs.ActorNotes);
            ret.TRDTDataTypeState = this.TRDTDataTypeState.Combine(rhs.TRDTDataTypeState);
            return ret;
        }
        public static DialogResponse_ErrorMask Combine(DialogResponse_ErrorMask lhs, DialogResponse_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static DialogResponse_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new DialogResponse_ErrorMask();
        }
        #endregion

    }
    public class DialogResponse_CopyMask
    {
        public DialogResponse_CopyMask()
        {
        }

        public DialogResponse_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Emotion = defaultOn;
            this.EmotionValue = defaultOn;
            this.Fluff1 = defaultOn;
            this.ResponseNumber = defaultOn;
            this.Fluff2 = defaultOn;
            this.ResponseText = defaultOn;
            this.ActorNotes = defaultOn;
            this.TRDTDataTypeState = defaultOn;
        }

        #region Members
        public bool Emotion;
        public bool EmotionValue;
        public bool Fluff1;
        public bool ResponseNumber;
        public bool Fluff2;
        public bool ResponseText;
        public bool ActorNotes;
        public bool TRDTDataTypeState;
        #endregion

    }

    public class DialogResponse_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Emotion;
        public bool EmotionValue;
        public bool Fluff1;
        public bool ResponseNumber;
        public bool Fluff2;
        public bool ResponseText;
        public bool ActorNotes;
        public bool TRDTDataTypeState;
        #endregion

        #region Ctors
        public DialogResponse_TranslationMask()
        {
        }

        public DialogResponse_TranslationMask(bool defaultOn)
        {
            this.Emotion = defaultOn;
            this.EmotionValue = defaultOn;
            this.Fluff1 = defaultOn;
            this.ResponseNumber = defaultOn;
            this.Fluff2 = defaultOn;
            this.ResponseText = defaultOn;
            this.ActorNotes = defaultOn;
            this.TRDTDataTypeState = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Emotion, null));
            ret.Add((EmotionValue, null));
            ret.Add((Fluff1, null));
            ret.Add((ResponseNumber, null));
            ret.Add((Fluff2, null));
            ret.Add((ResponseText, null));
            ret.Add((ActorNotes, null));
            ret.Add((TRDTDataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class DialogResponseBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static DialogResponseBinaryWriteTranslation Instance = new DialogResponseBinaryWriteTranslation();

        public static void Write_Embedded(
            IDialogResponseInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
        }

        public static void Write_RecordTypes(
            IDialogResponseInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.TRDTDataTypeState.HasFlag(DialogResponse.TRDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(DialogResponse_Registration.TRDT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EmotionType>.Instance.Write(
                        writer,
                        item.Emotion,
                        length: 4);
                    writer.Write(item.EmotionValue);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff1);
                    writer.Write(item.ResponseNumber);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff2);
                }
            }
            if (item.ResponseText_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ResponseText,
                    header: recordTypeConverter.ConvertToCustom(DialogResponse_Registration.NAM1_HEADER),
                    nullable: false);
            }
            if (item.ActorNotes_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ActorNotes,
                    header: recordTypeConverter.ConvertToCustom(DialogResponse_Registration.NAM2_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponseInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IDialogResponseInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class DialogResponseBinaryCreateTranslation
    {
        public readonly static DialogResponseBinaryCreateTranslation Instance = new DialogResponseBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class DialogResponseBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogResponseInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DialogResponseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IDialogResponseInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((DialogResponseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IDialogResponseInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((DialogResponseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
