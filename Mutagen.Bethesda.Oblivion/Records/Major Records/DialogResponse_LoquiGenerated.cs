/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogResponse : 
        ReactiveObject,
        IDialogResponse,
        ILoquiObject<DialogResponse>,
        ILoquiObjectSetter,
        IPropertySupporter<EmotionType>,
        IPropertySupporter<Int32>,
        IPropertySupporter<Byte[]>,
        IPropertySupporter<Byte>,
        IPropertySupporter<String>,
        IEquatable<DialogResponse>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static DialogResponse_Registration Registration => DialogResponse_Registration.Instance;

        #region Ctor
        public DialogResponse()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Emotion
        protected EmotionType _Emotion;
        protected PropertyForwarder<DialogResponse, EmotionType> _EmotionForwarder;
        public INotifyingSetItem<EmotionType> Emotion_Property => _EmotionForwarder ?? (_EmotionForwarder = new PropertyForwarder<DialogResponse, EmotionType>(this, (int)DialogResponse_FieldIndex.Emotion));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public EmotionType Emotion
        {
            get => this._Emotion;
            set => this.SetEmotion(value);
        }
        protected void SetEmotion(
            EmotionType item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogResponse_FieldIndex.Emotion];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Emotion == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogResponse_FieldIndex.Emotion] = hasBeenSet;
            }
            if (_EmotionType_subscriptions != null)
            {
                var tmp = Emotion;
                _Emotion = item;
                _EmotionType_subscriptions.FireSubscriptions(
                    index: (int)DialogResponse_FieldIndex.Emotion,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Emotion = item;
            }
        }
        protected void UnsetEmotion()
        {
            _hasBeenSetTracker[(int)DialogResponse_FieldIndex.Emotion] = false;
            Emotion = default(EmotionType);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<EmotionType> IDialogResponse.Emotion_Property => this.Emotion_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<EmotionType> IDialogResponseGetter.Emotion_Property => this.Emotion_Property;
        #endregion
        #region EmotionValue
        protected Int32 _EmotionValue;
        protected PropertyForwarder<DialogResponse, Int32> _EmotionValueForwarder;
        public INotifyingSetItem<Int32> EmotionValue_Property => _EmotionValueForwarder ?? (_EmotionValueForwarder = new PropertyForwarder<DialogResponse, Int32>(this, (int)DialogResponse_FieldIndex.EmotionValue));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 EmotionValue
        {
            get => this._EmotionValue;
            set => this.SetEmotionValue(value);
        }
        protected void SetEmotionValue(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogResponse_FieldIndex.EmotionValue];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && EmotionValue == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogResponse_FieldIndex.EmotionValue] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = EmotionValue;
                _EmotionValue = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)DialogResponse_FieldIndex.EmotionValue,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _EmotionValue = item;
            }
        }
        protected void UnsetEmotionValue()
        {
            _hasBeenSetTracker[(int)DialogResponse_FieldIndex.EmotionValue] = false;
            EmotionValue = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> IDialogResponse.EmotionValue_Property => this.EmotionValue_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> IDialogResponseGetter.EmotionValue_Property => this.EmotionValue_Property;
        #endregion
        #region Fluff1
        protected Byte[] _Fluff1 = new byte[4];
        protected PropertyForwarder<DialogResponse, Byte[]> _Fluff1Forwarder;
        public INotifyingSetItem<Byte[]> Fluff1_Property => _Fluff1Forwarder ?? (_Fluff1Forwarder = new PropertyForwarder<DialogResponse, Byte[]>(this, (int)DialogResponse_FieldIndex.Fluff1));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff1
        {
            get => this._Fluff1;
            set => this.SetFluff1(value);
        }
        protected void SetFluff1(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            if (item == null)
            {
                item = new byte[4];
            }
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogResponse_FieldIndex.Fluff1];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Fluff1, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogResponse_FieldIndex.Fluff1] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = Fluff1;
                _Fluff1 = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)DialogResponse_FieldIndex.Fluff1,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Fluff1 = item;
            }
        }
        protected void UnsetFluff1()
        {
            SetFluff1(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IDialogResponse.Fluff1_Property => this.Fluff1_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IDialogResponseGetter.Fluff1_Property => this.Fluff1_Property;
        #endregion
        #region ResponseNumber
        protected Byte _ResponseNumber;
        protected PropertyForwarder<DialogResponse, Byte> _ResponseNumberForwarder;
        public INotifyingSetItem<Byte> ResponseNumber_Property => _ResponseNumberForwarder ?? (_ResponseNumberForwarder = new PropertyForwarder<DialogResponse, Byte>(this, (int)DialogResponse_FieldIndex.ResponseNumber));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte ResponseNumber
        {
            get => this._ResponseNumber;
            set => this.SetResponseNumber(value);
        }
        protected void SetResponseNumber(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ResponseNumber];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ResponseNumber == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ResponseNumber] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = ResponseNumber;
                _ResponseNumber = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)DialogResponse_FieldIndex.ResponseNumber,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ResponseNumber = item;
            }
        }
        protected void UnsetResponseNumber()
        {
            _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ResponseNumber] = false;
            ResponseNumber = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IDialogResponse.ResponseNumber_Property => this.ResponseNumber_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IDialogResponseGetter.ResponseNumber_Property => this.ResponseNumber_Property;
        #endregion
        #region Fluff2
        protected Byte[] _Fluff2 = new byte[3];
        protected PropertyForwarder<DialogResponse, Byte[]> _Fluff2Forwarder;
        public INotifyingSetItem<Byte[]> Fluff2_Property => _Fluff2Forwarder ?? (_Fluff2Forwarder = new PropertyForwarder<DialogResponse, Byte[]>(this, (int)DialogResponse_FieldIndex.Fluff2));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff2
        {
            get => this._Fluff2;
            set => this.SetFluff2(value);
        }
        protected void SetFluff2(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            if (item == null)
            {
                item = new byte[3];
            }
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogResponse_FieldIndex.Fluff2];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Fluff2, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogResponse_FieldIndex.Fluff2] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = Fluff2;
                _Fluff2 = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)DialogResponse_FieldIndex.Fluff2,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Fluff2 = item;
            }
        }
        protected void UnsetFluff2()
        {
            SetFluff2(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IDialogResponse.Fluff2_Property => this.Fluff2_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IDialogResponseGetter.Fluff2_Property => this.Fluff2_Property;
        #endregion
        #region ResponseText
        protected String _ResponseText;
        protected PropertyForwarder<DialogResponse, String> _ResponseTextForwarder;
        public INotifyingSetItem<String> ResponseText_Property => _ResponseTextForwarder ?? (_ResponseTextForwarder = new PropertyForwarder<DialogResponse, String>(this, (int)DialogResponse_FieldIndex.ResponseText));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ResponseText
        {
            get => this._ResponseText;
            set => this.SetResponseText(value);
        }
        protected void SetResponseText(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ResponseText];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ResponseText == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ResponseText] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = ResponseText;
                _ResponseText = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)DialogResponse_FieldIndex.ResponseText,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ResponseText = item;
            }
        }
        protected void UnsetResponseText()
        {
            _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ResponseText] = false;
            ResponseText = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IDialogResponse.ResponseText_Property => this.ResponseText_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IDialogResponseGetter.ResponseText_Property => this.ResponseText_Property;
        #endregion
        #region ActorNotes
        protected String _ActorNotes;
        protected PropertyForwarder<DialogResponse, String> _ActorNotesForwarder;
        public INotifyingSetItem<String> ActorNotes_Property => _ActorNotesForwarder ?? (_ActorNotesForwarder = new PropertyForwarder<DialogResponse, String>(this, (int)DialogResponse_FieldIndex.ActorNotes));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ActorNotes
        {
            get => this._ActorNotes;
            set => this.SetActorNotes(value);
        }
        protected void SetActorNotes(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ActorNotes];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ActorNotes == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ActorNotes] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = ActorNotes;
                _ActorNotes = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)DialogResponse_FieldIndex.ActorNotes,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ActorNotes = item;
            }
        }
        protected void UnsetActorNotes()
        {
            _hasBeenSetTracker[(int)DialogResponse_FieldIndex.ActorNotes] = false;
            ActorNotes = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IDialogResponse.ActorNotes_Property => this.ActorNotes_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IDialogResponseGetter.ActorNotes_Property => this.ActorNotes_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => DialogResponseCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => DialogResponseCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => DialogResponseCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            DialogResponseCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<DialogResponse>.GetEqualsMask(DialogResponse rhs) => DialogResponseCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IDialogResponseGetter>.GetEqualsMask(IDialogResponseGetter rhs) => DialogResponseCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return DialogResponseCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            DialogResponse_Mask<bool> printMask = null)
        {
            return DialogResponseCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            DialogResponseCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public DialogResponse_Mask<bool> GetHasBeenSetMask()
        {
            return DialogResponseCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is DialogResponse rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogResponse rhs)
        {
            if (rhs == null) return false;
            if (this.Emotion != rhs.Emotion) return false;
            if (this.EmotionValue != rhs.EmotionValue) return false;
            if (!this.Fluff1.EqualsFast(rhs.Fluff1)) return false;
            if (this.ResponseNumber != rhs.ResponseNumber) return false;
            if (!this.Fluff2.EqualsFast(rhs.Fluff2)) return false;
            if (ResponseText_Property.HasBeenSet != rhs.ResponseText_Property.HasBeenSet) return false;
            if (ResponseText_Property.HasBeenSet)
            {
                if (!object.Equals(this.ResponseText, rhs.ResponseText)) return false;
            }
            if (ActorNotes_Property.HasBeenSet != rhs.ActorNotes_Property.HasBeenSet) return false;
            if (ActorNotes_Property.HasBeenSet)
            {
                if (!object.Equals(this.ActorNotes, rhs.ActorNotes)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Emotion).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EmotionValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ResponseNumber).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff2).CombineHashCode(ret);
            if (ResponseText_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ResponseText).CombineHashCode(ret);
            }
            if (ActorNotes_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ActorNotes).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static DialogResponse Create_Xml(
            XElement root,
            DialogResponse_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogResponse Create_Xml(
            XElement root,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true,
            DialogResponse_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DialogResponse Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new DialogResponse();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DialogResponse Create_Xml(
            string path,
            DialogResponse_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static DialogResponse Create_Xml(
            string path,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogResponse Create_Xml(
            Stream stream,
            DialogResponse_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static DialogResponse Create_Xml(
            Stream stream,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<DialogResponse>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true,
            DialogResponse_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            DialogResponse_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            DialogResponseCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            DialogResponse item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Emotion":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.Emotion);
                        if (EnumXmlTranslation<EmotionType>.Instance.Parse(
                            root: root,
                            item: out EmotionType EmotionParse,
                            errorMask: errorMask))
                        {
                            item.Emotion = EmotionParse;
                        }
                        else
                        {
                            item.UnsetEmotion();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EmotionValue":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.EmotionValue);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 EmotionValueParse,
                            errorMask: errorMask))
                        {
                            item.EmotionValue = EmotionValueParse;
                        }
                        else
                        {
                            item.UnsetEmotionValue();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff1":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff1);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] Fluff1Parse,
                            errorMask: errorMask))
                        {
                            item.Fluff1 = Fluff1Parse;
                        }
                        else
                        {
                            item.UnsetFluff1();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResponseNumber":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseNumber);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte ResponseNumberParse,
                            errorMask: errorMask))
                        {
                            item.ResponseNumber = ResponseNumberParse;
                        }
                        else
                        {
                            item.UnsetResponseNumber();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff2":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff2);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] Fluff2Parse,
                            errorMask: errorMask))
                        {
                            item.Fluff2 = Fluff2Parse;
                        }
                        else
                        {
                            item.UnsetFluff2();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResponseText":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseText);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String ResponseTextParse,
                            errorMask: errorMask))
                        {
                            item.ResponseText = ResponseTextParse;
                        }
                        else
                        {
                            item.UnsetResponseText();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActorNotes":
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.ActorNotes);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String ActorNotesParse,
                            errorMask: errorMask))
                        {
                            item.ActorNotes = ActorNotesParse;
                        }
                        else
                        {
                            item.UnsetActorNotes();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                    return _hasBeenSetTracker[index];
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter EmotionType
        protected ObjectCentralizationSubscriptions<EmotionType> _EmotionType_subscriptions;
        EmotionType IPropertySupporter<EmotionType>.Get(int index)
        {
            return GetEmotionType(index: index);
        }

        protected EmotionType GetEmotionType(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return Emotion;
                default:
                    throw new ArgumentException($"Unknown index for field type EmotionType: {index}");
            }
        }

        void IPropertySupporter<EmotionType>.Set(
            int index,
            EmotionType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetEmotionType(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetEmotionType(
            int index,
            EmotionType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.Emotion:
                    SetEmotion(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type EmotionType: {index}");
            }
        }

        bool IPropertySupporter<EmotionType>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<EmotionType>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<EmotionType>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetEmotionType(
                index: index,
                cmds: cmds);
        }

        protected void UnsetEmotionType(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.Emotion:
                    SetEmotion(
                        item: default(EmotionType),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type EmotionType: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<EmotionType>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<EmotionType> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_EmotionType_subscriptions == null)
            {
                _EmotionType_subscriptions = new ObjectCentralizationSubscriptions<EmotionType>();
            }
            _EmotionType_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<EmotionType>.Unsubscribe(
            int index,
            object owner)
        {
            _EmotionType_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<EmotionType>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        EmotionType IPropertySupporter<EmotionType>.DefaultValue(int index)
        {
            return DefaultValueEmotionType(index: index);
        }

        protected EmotionType DefaultValueEmotionType(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return default(EmotionType);
                default:
                    throw new ArgumentException($"Unknown index for field type EmotionType: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Int32
        protected ObjectCentralizationSubscriptions<Int32> _Int32_subscriptions;
        Int32 IPropertySupporter<Int32>.Get(int index)
        {
            return GetInt32(index: index);
        }

        protected Int32 GetInt32(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.EmotionValue:
                    return EmotionValue;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        void IPropertySupporter<Int32>.Set(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetInt32(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.EmotionValue:
                    SetEmotionValue(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        bool IPropertySupporter<Int32>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Int32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Int32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.EmotionValue:
                    SetEmotionValue(
                        item: default(Int32),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Int32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Int32_subscriptions == null)
            {
                _Int32_subscriptions = new ObjectCentralizationSubscriptions<Int32>();
            }
            _Int32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Unsubscribe(
            int index,
            object owner)
        {
            _Int32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Int32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Int32 IPropertySupporter<Int32>.DefaultValue(int index)
        {
            return DefaultValueInt32(index: index);
        }

        protected Int32 DefaultValueInt32(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.EmotionValue:
                    return default(Int32);
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte[]
        protected ObjectCentralizationSubscriptions<Byte[]> _ByteArr_subscriptions;
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected Byte[] GetByteArr(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.Fluff1:
                    return Fluff1;
                case DialogResponse_FieldIndex.Fluff2:
                    return Fluff2;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.Fluff1:
                    SetFluff1(item, hasBeenSet, cmds);
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    SetFluff2(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.Fluff1:
                    SetFluff1(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    SetFluff2(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected Byte[] DefaultValueByteArr(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.Fluff2:
                    return default(Byte[]);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseNumber:
                    return ResponseNumber;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseNumber:
                    SetResponseNumber(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseNumber:
                    SetResponseNumber(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseNumber:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region IPropertySupporter String
        protected ObjectCentralizationSubscriptions<String> _String_subscriptions;
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected String GetString(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseText:
                    return ResponseText;
                case DialogResponse_FieldIndex.ActorNotes:
                    return ActorNotes;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseText:
                    SetResponseText(item, hasBeenSet, cmds);
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    SetActorNotes(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseText:
                    SetResponseText(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    SetActorNotes(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected String DefaultValueString(int index)
        {
            switch ((DialogResponse_FieldIndex)index)
            {
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                    return default(String);
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = DialogResponse_Registration.TRIGGERING_RECORD_TYPE;
        public TRDTDataType TRDTDataTypeState;
        [Flags]
        public enum TRDTDataType
        {
            Has = 1
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static DialogResponse Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static DialogResponse Create_Binary(
            MutagenFrame frame,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DialogResponse Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new DialogResponse();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DialogResponse Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static DialogResponse Create_Binary(
            string path,
            out DialogResponse_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static DialogResponse Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static DialogResponse Create_Binary(
            Stream stream,
            out DialogResponse_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out DialogResponse_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            DialogResponseCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            DialogResponse item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            DialogResponse item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x54445254: // TRDT
                    if (lastParsed.HasValue && lastParsed.Value >= (int)DialogResponse_FieldIndex.Fluff2) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.TRDTDataTypeState = TRDTDataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)DialogResponse_FieldIndex.Emotion);
                            if (EnumBinaryTranslation<EmotionType>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EmotionType EmotionParse,
                                errorMask: errorMask))
                            {
                                item.Emotion = EmotionParse;
                            }
                            else
                            {
                                item.UnsetEmotion();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)DialogResponse_FieldIndex.EmotionValue);
                            if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Int32 EmotionValueParse,
                                errorMask: errorMask))
                            {
                                item.EmotionValue = EmotionValueParse;
                            }
                            else
                            {
                                item.UnsetEmotionValue();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff1);
                            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Byte[] Fluff1Parse,
                                errorMask: errorMask))
                            {
                                item.Fluff1 = Fluff1Parse;
                            }
                            else
                            {
                                item.UnsetFluff1();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseNumber);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte ResponseNumberParse,
                                errorMask: errorMask))
                            {
                                item.ResponseNumber = ResponseNumberParse;
                            }
                            else
                            {
                                item.UnsetResponseNumber();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff2);
                            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(3),
                                item: out Byte[] Fluff2Parse,
                                errorMask: errorMask))
                            {
                                item.Fluff2 = Fluff2Parse;
                            }
                            else
                            {
                                item.UnsetFluff2();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)DialogResponse_FieldIndex.Fluff2);
                case 0x314D414E: // NAM1
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseText);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String ResponseTextParse,
                            errorMask: errorMask))
                        {
                            item.ResponseText = ResponseTextParse;
                        }
                        else
                        {
                            item.UnsetResponseText();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)DialogResponse_FieldIndex.ResponseText);
                case 0x324D414E: // NAM2
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)DialogResponse_FieldIndex.ActorNotes);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String ActorNotesParse,
                            errorMask: errorMask))
                        {
                            item.ActorNotes = ActorNotesParse;
                        }
                        else
                        {
                            item.UnsetActorNotes();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)DialogResponse_FieldIndex.ActorNotes);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public DialogResponse Copy(
            DialogResponse_CopyMask copyMask = null,
            IDialogResponseGetter def = null)
        {
            return DialogResponse.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static DialogResponse Copy(
            IDialogResponse item,
            DialogResponse_CopyMask copyMask = null,
            IDialogResponseGetter def = null)
        {
            DialogResponse ret;
            if (item.GetType().Equals(typeof(DialogResponse)))
            {
                ret = new DialogResponse();
            }
            else
            {
                ret = (DialogResponse)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static DialogResponse Copy_ToLoqui(
            IDialogResponseGetter item,
            DialogResponse_CopyMask copyMask = null,
            IDialogResponseGetter def = null)
        {
            DialogResponse ret;
            if (item.GetType().Equals(typeof(DialogResponse)))
            {
                ret = new DialogResponse() as DialogResponse;
            }
            else
            {
                ret = (DialogResponse)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IDialogResponseGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDialogResponseGetter rhs,
            DialogResponse_CopyMask copyMask,
            IDialogResponseGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDialogResponseGetter rhs,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_CopyMask copyMask = null,
            IDialogResponseGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponseCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IDialogResponseGetter rhs,
            ErrorMaskBuilder errorMask,
            DialogResponse_CopyMask copyMask = null,
            IDialogResponseGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            DialogResponseCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    this.SetEmotion(
                        (EmotionType)obj,
                        cmds: cmds);
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    this.SetEmotionValue(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    this.SetFluff1(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    this.SetResponseNumber(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    this.SetFluff2(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    this.SetResponseText(
                        (String)obj,
                        cmds: cmds);
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    this.SetActorNotes(
                        (String)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            DialogResponseCommon.Clear(this, cmds);
        }


        public static DialogResponse Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new DialogResponse();
            foreach (var pair in fields)
            {
                CopyInInternal_DialogResponse(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_DialogResponse(DialogResponse obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out DialogResponse_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    obj.SetEmotion(
                        (EmotionType)pair.Value,
                        cmds: null);
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    obj.SetEmotionValue(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    obj.SetFluff1(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    obj.SetResponseNumber(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    obj.SetFluff2(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    obj.SetResponseText(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    obj.SetActorNotes(
                        (String)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, DialogResponse obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponse : IDialogResponseGetter, ILoquiClass<IDialogResponse, IDialogResponseGetter>, ILoquiClass<DialogResponse, IDialogResponseGetter>
    {
        new EmotionType Emotion { get; set; }
        new INotifyingItem<EmotionType> Emotion_Property { get; }

        new Int32 EmotionValue { get; set; }
        new INotifyingItem<Int32> EmotionValue_Property { get; }

        new Byte[] Fluff1 { get; set; }
        new INotifyingItem<Byte[]> Fluff1_Property { get; }

        new Byte ResponseNumber { get; set; }
        new INotifyingItem<Byte> ResponseNumber_Property { get; }

        new Byte[] Fluff2 { get; set; }
        new INotifyingItem<Byte[]> Fluff2_Property { get; }

        new String ResponseText { get; set; }
        new INotifyingSetItem<String> ResponseText_Property { get; }

        new String ActorNotes { get; set; }
        new INotifyingSetItem<String> ActorNotes_Property { get; }

    }

    public partial interface IDialogResponseGetter : ILoquiObject
    {
        #region Emotion
        EmotionType Emotion { get; }
        INotifyingItemGetter<EmotionType> Emotion_Property { get; }

        #endregion
        #region EmotionValue
        Int32 EmotionValue { get; }
        INotifyingItemGetter<Int32> EmotionValue_Property { get; }

        #endregion
        #region Fluff1
        Byte[] Fluff1 { get; }
        INotifyingItemGetter<Byte[]> Fluff1_Property { get; }

        #endregion
        #region ResponseNumber
        Byte ResponseNumber { get; }
        INotifyingItemGetter<Byte> ResponseNumber_Property { get; }

        #endregion
        #region Fluff2
        Byte[] Fluff2 { get; }
        INotifyingItemGetter<Byte[]> Fluff2_Property { get; }

        #endregion
        #region ResponseText
        String ResponseText { get; }
        INotifyingSetItemGetter<String> ResponseText_Property { get; }

        #endregion
        #region ActorNotes
        String ActorNotes { get; }
        INotifyingSetItemGetter<String> ActorNotes_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogResponse_FieldIndex
    {
        Emotion = 0,
        EmotionValue = 1,
        Fluff1 = 2,
        ResponseNumber = 3,
        Fluff2 = 4,
        ResponseText = 5,
        ActorNotes = 6,
    }
    #endregion

    #region Registration
    public class DialogResponse_Registration : ILoquiRegistration
    {
        public static readonly DialogResponse_Registration Instance = new DialogResponse_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 150,
            version: 0);

        public const string GUID = "d8438f70-ccc0-4bc8-876d-11134cdabd97";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(DialogResponse_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponse_ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponse);

        public static readonly Type GetterType = typeof(IDialogResponseGetter);

        public static readonly Type SetterType = typeof(IDialogResponse);

        public static readonly Type CommonType = typeof(DialogResponseCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogResponse";

        public const string Name = "DialogResponse";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "EMOTION":
                    return (ushort)DialogResponse_FieldIndex.Emotion;
                case "EMOTIONVALUE":
                    return (ushort)DialogResponse_FieldIndex.EmotionValue;
                case "FLUFF1":
                    return (ushort)DialogResponse_FieldIndex.Fluff1;
                case "RESPONSENUMBER":
                    return (ushort)DialogResponse_FieldIndex.ResponseNumber;
                case "FLUFF2":
                    return (ushort)DialogResponse_FieldIndex.Fluff2;
                case "RESPONSETEXT":
                    return (ushort)DialogResponse_FieldIndex.ResponseText;
                case "ACTORNOTES":
                    return (ushort)DialogResponse_FieldIndex.ActorNotes;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return "Emotion";
                case DialogResponse_FieldIndex.EmotionValue:
                    return "EmotionValue";
                case DialogResponse_FieldIndex.Fluff1:
                    return "Fluff1";
                case DialogResponse_FieldIndex.ResponseNumber:
                    return "ResponseNumber";
                case DialogResponse_FieldIndex.Fluff2:
                    return "Fluff2";
                case DialogResponse_FieldIndex.ResponseText:
                    return "ResponseText";
                case DialogResponse_FieldIndex.ActorNotes:
                    return "ActorNotes";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                case DialogResponse_FieldIndex.ResponseText:
                case DialogResponse_FieldIndex.ActorNotes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return typeof(EmotionType);
                case DialogResponse_FieldIndex.EmotionValue:
                    return typeof(Int32);
                case DialogResponse_FieldIndex.Fluff1:
                    return typeof(Byte[]);
                case DialogResponse_FieldIndex.ResponseNumber:
                    return typeof(Byte);
                case DialogResponse_FieldIndex.Fluff2:
                    return typeof(Byte[]);
                case DialogResponse_FieldIndex.ResponseText:
                    return typeof(String);
                case DialogResponse_FieldIndex.ActorNotes:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType TRDT_HEADER = new RecordType("TRDT");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TRDT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class DialogResponseCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            IDialogResponseGetter def,
            ErrorMaskBuilder errorMask,
            DialogResponse_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Emotion ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.Emotion);
                try
                {
                    item.Emotion_Property.Set(
                        value: rhs.Emotion,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EmotionValue ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.EmotionValue);
                try
                {
                    item.EmotionValue_Property.Set(
                        value: rhs.EmotionValue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff1 ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff1);
                try
                {
                    item.Fluff1_Property.Set(
                        value: rhs.Fluff1,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ResponseNumber ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseNumber);
                try
                {
                    item.ResponseNumber_Property.Set(
                        value: rhs.ResponseNumber,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff2 ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.Fluff2);
                try
                {
                    item.Fluff2_Property.Set(
                        value: rhs.Fluff2,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ResponseText ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.ResponseText);
                try
                {
                    item.ResponseText_Property.SetToWithDefault(
                        rhs: rhs.ResponseText_Property,
                        def: def?.ResponseText_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ActorNotes ?? true)
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.ActorNotes);
                try
                {
                    item.ActorNotes_Property.SetToWithDefault(
                        rhs: rhs.ActorNotes_Property,
                        def: def?.ActorNotes_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IDialogResponse obj,
            NotifyingFireParameters cmds = null)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case DialogResponse_FieldIndex.ResponseText:
                    obj.ResponseText_Property.HasBeenSet = on;
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    obj.ActorNotes_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IDialogResponse obj,
            NotifyingUnsetParameters cmds = null)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    obj.Emotion = default(EmotionType);
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    obj.EmotionValue = default(Int32);
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    obj.Fluff1 = default(Byte[]);
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    obj.ResponseNumber = default(Byte);
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    obj.Fluff2 = default(Byte[]);
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    obj.ResponseText_Property.Unset(cmds);
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    obj.ActorNotes_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IDialogResponse obj)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                case DialogResponse_FieldIndex.EmotionValue:
                case DialogResponse_FieldIndex.Fluff1:
                case DialogResponse_FieldIndex.ResponseNumber:
                case DialogResponse_FieldIndex.Fluff2:
                    return true;
                case DialogResponse_FieldIndex.ResponseText:
                    return obj.ResponseText_Property.HasBeenSet;
                case DialogResponse_FieldIndex.ActorNotes:
                    return obj.ActorNotes_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IDialogResponseGetter obj)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return obj.Emotion;
                case DialogResponse_FieldIndex.EmotionValue:
                    return obj.EmotionValue;
                case DialogResponse_FieldIndex.Fluff1:
                    return obj.Fluff1;
                case DialogResponse_FieldIndex.ResponseNumber:
                    return obj.ResponseNumber;
                case DialogResponse_FieldIndex.Fluff2:
                    return obj.Fluff2;
                case DialogResponse_FieldIndex.ResponseText:
                    return obj.ResponseText;
                case DialogResponse_FieldIndex.ActorNotes:
                    return obj.ActorNotes;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IDialogResponse item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Emotion = default(EmotionType);
            item.EmotionValue = default(Int32);
            item.Fluff1 = default(Byte[]);
            item.ResponseNumber = default(Byte);
            item.Fluff2 = default(Byte[]);
            item.ResponseText_Property.Unset(cmds.ToUnsetParams());
            item.ActorNotes_Property.Unset(cmds.ToUnsetParams());
        }

        public static DialogResponse_Mask<bool> GetEqualsMask(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs)
        {
            var ret = new DialogResponse_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Emotion = item.Emotion == rhs.Emotion;
            ret.EmotionValue = item.EmotionValue == rhs.EmotionValue;
            ret.Fluff1 = item.Fluff1.EqualsFast(rhs.Fluff1);
            ret.ResponseNumber = item.ResponseNumber == rhs.ResponseNumber;
            ret.Fluff2 = item.Fluff2.EqualsFast(rhs.Fluff2);
            ret.ResponseText = item.ResponseText_Property.Equals(rhs.ResponseText_Property, (l, r) => object.Equals(l, r));
            ret.ActorNotes = item.ActorNotes_Property.Equals(rhs.ActorNotes_Property, (l, r) => object.Equals(l, r));
        }

        public static string ToString(
            this IDialogResponseGetter item,
            string name = null,
            DialogResponse_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IDialogResponseGetter item,
            FileGeneration fg,
            string name = null,
            DialogResponse_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(DialogResponse)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(DialogResponse)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Emotion ?? true)
                {
                    fg.AppendLine($"Emotion => {item.Emotion}");
                }
                if (printMask?.EmotionValue ?? true)
                {
                    fg.AppendLine($"EmotionValue => {item.EmotionValue}");
                }
                if (printMask?.Fluff1 ?? true)
                {
                    fg.AppendLine($"Fluff1 => {item.Fluff1}");
                }
                if (printMask?.ResponseNumber ?? true)
                {
                    fg.AppendLine($"ResponseNumber => {item.ResponseNumber}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {item.Fluff2}");
                }
                if (printMask?.ResponseText ?? true)
                {
                    fg.AppendLine($"ResponseText => {item.ResponseText}");
                }
                if (printMask?.ActorNotes ?? true)
                {
                    fg.AppendLine($"ActorNotes => {item.ActorNotes}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IDialogResponseGetter item,
            DialogResponse_Mask<bool?> checkMask)
        {
            if (checkMask.ResponseText.HasValue && checkMask.ResponseText.Value != item.ResponseText_Property.HasBeenSet) return false;
            if (checkMask.ActorNotes.HasValue && checkMask.ActorNotes.Value != item.ActorNotes_Property.HasBeenSet) return false;
            return true;
        }

        public static DialogResponse_Mask<bool> GetHasBeenSetMask(IDialogResponseGetter item)
        {
            var ret = new DialogResponse_Mask<bool>();
            ret.Emotion = true;
            ret.EmotionValue = true;
            ret.Fluff1 = true;
            ret.ResponseNumber = true;
            ret.Fluff2 = true;
            ret.ResponseText = item.ResponseText_Property.HasBeenSet;
            ret.ActorNotes = item.ActorNotes_Property.HasBeenSet;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            DialogResponse item,
            bool doMasks,
            out DialogResponse_ErrorMask errorMask,
            DialogResponse_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            DialogResponse item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogResponse");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogResponse");
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                EnumXmlTranslation<EmotionType>.Instance.Write(
                    node: elem,
                    name: nameof(item.Emotion),
                    item: item.Emotion_Property,
                    fieldIndex: (int)DialogResponse_FieldIndex.Emotion,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.EmotionValue) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.EmotionValue),
                    item: item.EmotionValue_Property,
                    fieldIndex: (int)DialogResponse_FieldIndex.EmotionValue,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Fluff1) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Fluff1),
                    item: item.Fluff1_Property,
                    fieldIndex: (int)DialogResponse_FieldIndex.Fluff1,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseNumber) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ResponseNumber),
                    item: item.ResponseNumber_Property,
                    fieldIndex: (int)DialogResponse_FieldIndex.ResponseNumber,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Fluff2) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Fluff2),
                    item: item.Fluff2_Property,
                    fieldIndex: (int)DialogResponse_FieldIndex.Fluff2,
                    errorMask: errorMask);
            }
            if (item.ResponseText_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ResponseText),
                    item: item.ResponseText_Property,
                    fieldIndex: (int)DialogResponse_FieldIndex.ResponseText,
                    errorMask: errorMask);
            }
            if (item.ActorNotes_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ActorNotes) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ActorNotes),
                    item: item.ActorNotes_Property,
                    fieldIndex: (int)DialogResponse_FieldIndex.ActorNotes,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            DialogResponse item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out DialogResponse_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = DialogResponse_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            DialogResponse item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            DialogResponse item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            if (item.TRDTDataTypeState.HasFlag(DialogResponse.TRDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(DialogResponse_Registration.TRDT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EmotionType>.Instance.Write(
                        writer,
                        item.Emotion_Property,
                        length: 4,
                        fieldIndex: (int)DialogResponse_FieldIndex.Emotion,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EmotionValue_Property,
                        fieldIndex: (int)DialogResponse_FieldIndex.EmotionValue,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff1_Property,
                        fieldIndex: (int)DialogResponse_FieldIndex.Fluff1,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ResponseNumber_Property,
                        fieldIndex: (int)DialogResponse_FieldIndex.ResponseNumber,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff2_Property,
                        fieldIndex: (int)DialogResponse_FieldIndex.Fluff2,
                        errorMask: errorMask);
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ResponseText_Property,
                fieldIndex: (int)DialogResponse_FieldIndex.ResponseText,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(DialogResponse_Registration.NAM1_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ActorNotes_Property,
                fieldIndex: (int)DialogResponse_FieldIndex.ActorNotes,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(DialogResponse_Registration.NAM2_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class DialogResponse_Mask<T> : IMask<T>, IEquatable<DialogResponse_Mask<T>>
    {
        #region Ctors
        public DialogResponse_Mask()
        {
        }

        public DialogResponse_Mask(T initialValue)
        {
            this.Emotion = initialValue;
            this.EmotionValue = initialValue;
            this.Fluff1 = initialValue;
            this.ResponseNumber = initialValue;
            this.Fluff2 = initialValue;
            this.ResponseText = initialValue;
            this.ActorNotes = initialValue;
        }
        #endregion

        #region Members
        public T Emotion;
        public T EmotionValue;
        public T Fluff1;
        public T ResponseNumber;
        public T Fluff2;
        public T ResponseText;
        public T ActorNotes;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DialogResponse_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogResponse_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Emotion, rhs.Emotion)) return false;
            if (!object.Equals(this.EmotionValue, rhs.EmotionValue)) return false;
            if (!object.Equals(this.Fluff1, rhs.Fluff1)) return false;
            if (!object.Equals(this.ResponseNumber, rhs.ResponseNumber)) return false;
            if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
            if (!object.Equals(this.ResponseText, rhs.ResponseText)) return false;
            if (!object.Equals(this.ActorNotes, rhs.ActorNotes)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Emotion?.GetHashCode());
            ret = ret.CombineHashCode(this.EmotionValue?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff1?.GetHashCode());
            ret = ret.CombineHashCode(this.ResponseNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff2?.GetHashCode());
            ret = ret.CombineHashCode(this.ResponseText?.GetHashCode());
            ret = ret.CombineHashCode(this.ActorNotes?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Emotion)) return false;
            if (!eval(this.EmotionValue)) return false;
            if (!eval(this.Fluff1)) return false;
            if (!eval(this.ResponseNumber)) return false;
            if (!eval(this.Fluff2)) return false;
            if (!eval(this.ResponseText)) return false;
            if (!eval(this.ActorNotes)) return false;
            return true;
        }
        #endregion

        #region Translate
        public DialogResponse_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DialogResponse_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DialogResponse_Mask<R> obj, Func<T, R> eval)
        {
            obj.Emotion = eval(this.Emotion);
            obj.EmotionValue = eval(this.EmotionValue);
            obj.Fluff1 = eval(this.Fluff1);
            obj.ResponseNumber = eval(this.ResponseNumber);
            obj.Fluff2 = eval(this.Fluff2);
            obj.ResponseText = eval(this.ResponseText);
            obj.ActorNotes = eval(this.ActorNotes);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DialogResponse_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DialogResponse_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(DialogResponse_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Emotion ?? true)
                {
                    fg.AppendLine($"Emotion => {Emotion}");
                }
                if (printMask?.EmotionValue ?? true)
                {
                    fg.AppendLine($"EmotionValue => {EmotionValue}");
                }
                if (printMask?.Fluff1 ?? true)
                {
                    fg.AppendLine($"Fluff1 => {Fluff1}");
                }
                if (printMask?.ResponseNumber ?? true)
                {
                    fg.AppendLine($"ResponseNumber => {ResponseNumber}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {Fluff2}");
                }
                if (printMask?.ResponseText ?? true)
                {
                    fg.AppendLine($"ResponseText => {ResponseText}");
                }
                if (printMask?.ActorNotes ?? true)
                {
                    fg.AppendLine($"ActorNotes => {ActorNotes}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DialogResponse_ErrorMask : IErrorMask, IErrorMask<DialogResponse_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Emotion;
        public Exception EmotionValue;
        public Exception Fluff1;
        public Exception ResponseNumber;
        public Exception Fluff2;
        public Exception ResponseText;
        public Exception ActorNotes;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    return Emotion;
                case DialogResponse_FieldIndex.EmotionValue:
                    return EmotionValue;
                case DialogResponse_FieldIndex.Fluff1:
                    return Fluff1;
                case DialogResponse_FieldIndex.ResponseNumber:
                    return ResponseNumber;
                case DialogResponse_FieldIndex.Fluff2:
                    return Fluff2;
                case DialogResponse_FieldIndex.ResponseText:
                    return ResponseText;
                case DialogResponse_FieldIndex.ActorNotes:
                    return ActorNotes;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    this.Emotion = ex;
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    this.EmotionValue = ex;
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    this.Fluff1 = ex;
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    this.ResponseNumber = ex;
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    this.Fluff2 = ex;
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    this.ResponseText = ex;
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    this.ActorNotes = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
            switch (enu)
            {
                case DialogResponse_FieldIndex.Emotion:
                    this.Emotion = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.EmotionValue:
                    this.EmotionValue = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.Fluff1:
                    this.Fluff1 = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.ResponseNumber:
                    this.ResponseNumber = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.Fluff2:
                    this.Fluff2 = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.ResponseText:
                    this.ResponseText = (Exception)obj;
                    break;
                case DialogResponse_FieldIndex.ActorNotes:
                    this.ActorNotes = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Emotion != null) return true;
            if (EmotionValue != null) return true;
            if (Fluff1 != null) return true;
            if (ResponseNumber != null) return true;
            if (Fluff2 != null) return true;
            if (ResponseText != null) return true;
            if (ActorNotes != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("DialogResponse_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Emotion => {Emotion}");
            fg.AppendLine($"EmotionValue => {EmotionValue}");
            fg.AppendLine($"Fluff1 => {Fluff1}");
            fg.AppendLine($"ResponseNumber => {ResponseNumber}");
            fg.AppendLine($"Fluff2 => {Fluff2}");
            fg.AppendLine($"ResponseText => {ResponseText}");
            fg.AppendLine($"ActorNotes => {ActorNotes}");
        }
        #endregion

        #region Combine
        public DialogResponse_ErrorMask Combine(DialogResponse_ErrorMask rhs)
        {
            var ret = new DialogResponse_ErrorMask();
            ret.Emotion = this.Emotion.Combine(rhs.Emotion);
            ret.EmotionValue = this.EmotionValue.Combine(rhs.EmotionValue);
            ret.Fluff1 = this.Fluff1.Combine(rhs.Fluff1);
            ret.ResponseNumber = this.ResponseNumber.Combine(rhs.ResponseNumber);
            ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
            ret.ResponseText = this.ResponseText.Combine(rhs.ResponseText);
            ret.ActorNotes = this.ActorNotes.Combine(rhs.ActorNotes);
            return ret;
        }
        public static DialogResponse_ErrorMask Combine(DialogResponse_ErrorMask lhs, DialogResponse_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static DialogResponse_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new DialogResponse_ErrorMask();
        }
        #endregion

    }
    public class DialogResponse_CopyMask
    {
        #region Members
        public bool Emotion;
        public bool EmotionValue;
        public bool Fluff1;
        public bool ResponseNumber;
        public bool Fluff2;
        public bool ResponseText;
        public bool ActorNotes;
        #endregion

    }
    public class DialogResponse_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Emotion;
        public bool EmotionValue;
        public bool Fluff1;
        public bool ResponseNumber;
        public bool Fluff2;
        public bool ResponseText;
        public bool ActorNotes;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Emotion, null));
            ret.Add((EmotionValue, null));
            ret.Add((Fluff1, null));
            ret.Add((ResponseNumber, null));
            ret.Add((Fluff2, null));
            ret.Add((ResponseText, null));
            ret.Add((ActorNotes, null));
        }
    }
    #endregion

    #endregion

}
