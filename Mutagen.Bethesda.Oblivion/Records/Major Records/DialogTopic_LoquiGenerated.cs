/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogTopic : 
        OblivionMajorRecord,
        IDialogTopic,
        ILoquiObject<DialogTopic>,
        ILoquiObjectSetter,
        INamed,
        ILinkSubContainer,
        IEquatable<DialogTopic>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static DialogTopic_Registration Registration => DialogTopic_Registration.Instance;

        #region Ctor
        protected DialogTopic()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FormIDSetLink<Quest>> _Quests = new SourceSetList<FormIDSetLink<Quest>>();
        public ISourceSetList<FormIDSetLink<Quest>> Quests => _Quests;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<Quest>> QuestsEnumerable
        {
            get => _Quests.Items;
            set => _Quests.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FormIDSetLink<Quest>> IDialogTopic.Quests => _Quests;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FormIDSetLink<Quest>> IDialogTopicGetter.Quests => _Quests;
        #endregion

        #endregion
        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)DialogTopic_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)DialogTopic_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IDialogTopicGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IDialogTopicGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)DialogTopic_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region DialogType
        public bool DialogType_IsSet
        {
            get => _hasBeenSetTracker[(int)DialogTopic_FieldIndex.DialogType];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)DialogTopic_FieldIndex.DialogType, nameof(DialogType_IsSet));
        }
        bool IDialogTopicGetter.DialogType_IsSet => DialogType_IsSet;
        private DialogType _DialogType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DialogType DialogType
        {
            get => this._DialogType;
            set => DialogType_Set(value);
        }
        DialogType IDialogTopicGetter.DialogType => this.DialogType;
        public void DialogType_Set(
            DialogType value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _DialogType, value, _hasBeenSetTracker, markSet, (int)DialogTopic_FieldIndex.DialogType, nameof(DialogType), nameof(DialogType_IsSet));
        }
        public void DialogType_Unset()
        {
            this.DialogType_Set(default(DialogType), false);
        }
        #endregion
        #region Timestamp
        private Byte[] _Timestamp = new byte[4];
        public Byte[] Timestamp
        {
            get => _Timestamp;
            set
            {
                this._Timestamp = value;
                if (value == null)
                {
                    this._Timestamp = new byte[4];
                }
            }
        }
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<DialogItem> _Items = new SourceSetList<DialogItem>();
        public ISourceSetList<DialogItem> Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<DialogItem> ItemsEnumerable
        {
            get => _Items.Items;
            set => _Items.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<DialogItem> IDialogTopic.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<DialogItem> IDialogTopicGetter.Items => _Items;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<DialogTopic>.GetEqualsMask(DialogTopic rhs, EqualsMaskHelper.Include include) => DialogTopicCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IDialogTopicGetter>.GetEqualsMask(IDialogTopicGetter rhs, EqualsMaskHelper.Include include) => DialogTopicCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            DialogTopic_Mask<bool> printMask = null)
        {
            return DialogTopicCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            DialogTopicCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new DialogTopic_Mask<bool> GetHasBeenSetMask()
        {
            return DialogTopicCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is DialogTopic rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogTopic rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Quests.HasBeenSet != rhs.Quests.HasBeenSet) return false;
            if (Quests.HasBeenSet)
            {
                if (!this.Quests.SequenceEqual(rhs.Quests)) return false;
            }
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (DialogType_IsSet != rhs.DialogType_IsSet) return false;
            if (DialogType_IsSet)
            {
                if (this.DialogType != rhs.DialogType) return false;
            }
            if (!this.Timestamp.EqualsFast(rhs.Timestamp)) return false;
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!this.Items.SequenceEqual(rhs.Items)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Quests.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Quests).CombineHashCode(ret);
            }
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (DialogType_IsSet)
            {
                ret = HashHelper.GetHashCode(DialogType).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Timestamp).CombineHashCode(ret);
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static DialogTopic Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            DialogTopic_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogTopic Create_Xml(
            XElement node,
            out DialogTopic_ErrorMask errorMask,
            bool doMasks = true,
            DialogTopic_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static DialogTopic Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new DialogTopic() : null;
                    break;
                default:
                    break;
            }
            var ret = new DialogTopic();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    DialogTopicCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DialogTopic Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            DialogTopic_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static DialogTopic Create_Xml(
            string path,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogTopic Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            DialogTopic_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DialogTopic Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            DialogTopic_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static DialogTopic Create_Xml(
            Stream stream,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogTopic Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            DialogTopic_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out DialogTopic_ErrorMask errorMask,
            bool doMasks = true,
            DialogTopic_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            DialogTopicCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            DialogTopic item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((DialogTopic_FieldIndex)index)
            {
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                    return _hasBeenSetTracker[index];
                case DialogTopic_FieldIndex.Quests:
                    return Quests.HasBeenSet;
                case DialogTopic_FieldIndex.Items:
                    return Items.HasBeenSet;
                case DialogTopic_FieldIndex.Timestamp:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = DialogTopic_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Quests)
            {
                yield return item;
            }
            foreach (var item in Items.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            foreach (var item in Quests)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            foreach (var item in Items.Items)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
        }

        public DialogTopic(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(DialogTopic obj, DialogTopic rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new DialogTopic(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static DialogTopic Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static DialogTopic Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out DialogTopic_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static DialogTopic Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = UtilityTranslation.MajorRecordParse<DialogTopic>(
                record: new DialogTopic(),
                frame: frame,
                errorMask: errorMask,
                recType: DialogTopic_Registration.DIAL_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            try
            {
                CustomBinaryEnd_Import(
                    frame: frame,
                    obj: ret,
                    masterReferences: masterReferences,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out DialogTopic_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            DialogTopicCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            DialogTopic item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            DialogTopic item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x49545351: // QSTI
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Quest>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: DialogTopic_Registration.QSTI_HEADER,
                        masterReferences: masterReferences,
                        item: item.Quests,
                        fieldIndex: (int)DialogTopic_FieldIndex.Quests,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormKeyBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Quests);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Name);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.DialogType);
                        if (EnumBinaryTranslation<DialogType>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out DialogType DialogTypeParse,
                            errorMask: errorMask))
                        {
                            item.DialogType = DialogTypeParse;
                        }
                        else
                        {
                            item.DialogType = default(DialogType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.DialogType);
                }
                default:
                    return OblivionMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        static partial void CustomBinaryEnd_Import(
            MutagenFrame frame,
            DialogTopic obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);
        static partial void CustomBinaryEnd_Export(
            MutagenWriter writer,
            DialogTopic obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);
        public static void CustomBinaryEnd_ExportInternal(
            MutagenWriter writer,
            DialogTopic obj,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            CustomBinaryEnd_Export(
                writer: writer,
                obj: obj,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        #endregion

        public DialogTopic Copy(
            DialogTopic_CopyMask copyMask = null,
            IDialogTopicGetter def = null)
        {
            return DialogTopic.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static DialogTopic Copy(
            IDialogTopic item,
            DialogTopic_CopyMask copyMask = null,
            IDialogTopicGetter def = null)
        {
            DialogTopic ret;
            if (item.GetType().Equals(typeof(DialogTopic)))
            {
                ret = new DialogTopic();
            }
            else
            {
                ret = (DialogTopic)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static DialogTopic Copy_ToLoqui(
            IDialogTopicGetter item,
            DialogTopic_CopyMask copyMask = null,
            IDialogTopicGetter def = null)
        {
            DialogTopic ret;
            if (item.GetType().Equals(typeof(DialogTopic)))
            {
                ret = new DialogTopic() as DialogTopic;
            }
            else
            {
                ret = (DialogTopic)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IDialogTopicGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDialogTopicGetter rhs,
            DialogTopic_CopyMask copyMask,
            IDialogTopicGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDialogTopicGetter rhs,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_CopyMask copyMask = null,
            IDialogTopicGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogTopicCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IDialogTopicGetter rhs,
            ErrorMaskBuilder errorMask,
            DialogTopic_CopyMask copyMask = null,
            IDialogTopicGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            DialogTopicCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    this._Quests.SetTo((IEnumerable<FormIDSetLink<Quest>>)obj);
                    break;
                case DialogTopic_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case DialogTopic_FieldIndex.DialogType:
                    this.DialogType = (DialogType)obj;
                    break;
                case DialogTopic_FieldIndex.Timestamp:
                    this.Timestamp = (Byte[])obj;
                    break;
                case DialogTopic_FieldIndex.Items:
                    this._Items.SetTo((IEnumerable<DialogItem>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            DialogTopicCommon.Clear(this, cmds);
        }


        public new static DialogTopic Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new DialogTopic();
            foreach (var pair in fields)
            {
                CopyInInternal_DialogTopic(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_DialogTopic(DialogTopic obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out DialogTopic_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    obj._Quests.SetTo((IEnumerable<FormIDSetLink<Quest>>)pair.Value);
                    break;
                case DialogTopic_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case DialogTopic_FieldIndex.DialogType:
                    obj.DialogType = (DialogType)pair.Value;
                    break;
                case DialogTopic_FieldIndex.Timestamp:
                    obj.Timestamp = (Byte[])pair.Value;
                    break;
                case DialogTopic_FieldIndex.Items:
                    obj._Items.SetTo((IEnumerable<DialogItem>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IDialogTopic : IDialogTopicGetter, IOblivionMajorRecord, ILoquiClass<IDialogTopic, IDialogTopicGetter>, ILoquiClass<DialogTopic, IDialogTopicGetter>
    {
        new ISourceSetList<FormIDSetLink<Quest>> Quests { get; }
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new DialogType DialogType { get; set; }
        new bool DialogType_IsSet { get; set; }
        void DialogType_Set(DialogType item, bool hasBeenSet = true);
        void DialogType_Unset();

        new Byte[] Timestamp { get; set; }

        new ISourceSetList<DialogItem> Items { get; }
    }

    public partial interface IDialogTopicGetter : IOblivionMajorRecordGetter
    {
        #region Quests
        IObservableSetList<FormIDSetLink<Quest>> Quests { get; }
        #endregion
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region DialogType
        DialogType DialogType { get; }
        bool DialogType_IsSet { get; }

        #endregion
        #region Timestamp
        Byte[] Timestamp { get; }

        #endregion
        #region Items
        IObservableSetList<DialogItem> Items { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogTopic_FieldIndex
    {
        FormKey = 0,
        Version = 1,
        EditorID = 2,
        RecordType = 3,
        OblivionMajorRecordFlags = 4,
        Quests = 5,
        Name = 6,
        DialogType = 7,
        Timestamp = 8,
        Items = 9,
    }
    #endregion

    #region Registration
    public class DialogTopic_Registration : ILoquiRegistration
    {
        public static readonly DialogTopic_Registration Instance = new DialogTopic_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 147,
            version: 0);

        public const string GUID = "64f03683-28fd-43e3-8141-da8e95a52f89";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(DialogTopic_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogTopic_ErrorMask);

        public static readonly Type ClassType = typeof(DialogTopic);

        public static readonly Type GetterType = typeof(IDialogTopicGetter);

        public static readonly Type SetterType = typeof(IDialogTopic);

        public static readonly Type CommonType = typeof(DialogTopicCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogTopic";

        public const string Name = "DialogTopic";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "QUESTS":
                    return (ushort)DialogTopic_FieldIndex.Quests;
                case "NAME":
                    return (ushort)DialogTopic_FieldIndex.Name;
                case "DIALOGTYPE":
                    return (ushort)DialogTopic_FieldIndex.DialogType;
                case "TIMESTAMP":
                    return (ushort)DialogTopic_FieldIndex.Timestamp;
                case "ITEMS":
                    return (ushort)DialogTopic_FieldIndex.Items;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Items:
                    return true;
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Items:
                    return true;
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Items:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    return "Quests";
                case DialogTopic_FieldIndex.Name:
                    return "Name";
                case DialogTopic_FieldIndex.DialogType:
                    return "DialogType";
                case DialogTopic_FieldIndex.Timestamp:
                    return "Timestamp";
                case DialogTopic_FieldIndex.Items:
                    return "Items";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Items:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.DialogType:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Items:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    return typeof(SourceSetList<FormIDSetLink<Quest>>);
                case DialogTopic_FieldIndex.Name:
                    return typeof(String);
                case DialogTopic_FieldIndex.DialogType:
                    return typeof(DialogType);
                case DialogTopic_FieldIndex.Timestamp:
                    return typeof(Byte[]);
                case DialogTopic_FieldIndex.Items:
                    return typeof(SourceSetList<DialogItem>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType QSTI_HEADER = new RecordType("QSTI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DIAL_HEADER;
        public const int NumStructFields = 1;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class DialogTopicCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IDialogTopic item,
            IDialogTopicGetter rhs,
            IDialogTopicGetter def,
            ErrorMaskBuilder errorMask,
            DialogTopic_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Quests != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Quests);
                try
                {
                    item.Quests.SetToWithDefault(
                        rhs.Quests,
                        def?.Quests);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DialogType ?? true)
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.DialogType);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.DialogType,
                        rhsHasBeenSet: rhs.DialogType_IsSet,
                        defItem: def?.DialogType ?? default(DialogType),
                        defHasBeenSet: def?.DialogType_IsSet ?? false,
                        outRhsItem: out var rhsDialogTypeItem,
                        outDefItem: out var defDialogTypeItem))
                    {
                        item.DialogType = rhsDialogTypeItem;
                    }
                    else
                    {
                        item.DialogType_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Timestamp ?? true)
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Timestamp);
                try
                {
                    item.Timestamp = rhs.Timestamp;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault(
                        rhs: rhs.Items,
                        def: def?.Items,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return DialogItem.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(
            IDialogTopic item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Quests.Unset();
            item.Name_Unset();
            item.DialogType_Unset();
            item.Timestamp = default(Byte[]);
            item.Items.Unset();
        }

        public static DialogTopic_Mask<bool> GetEqualsMask(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogTopic_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            DialogTopic_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Quests = item.Quests.CollectionEqualsHelper(
                rhs.Quests,
                (l, r) => object.Equals(l, r),
                include);
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && object.Equals(item.Name, rhs.Name);
            ret.DialogType = item.DialogType_IsSet == rhs.DialogType_IsSet && item.DialogType == rhs.DialogType;
            ret.Timestamp = item.Timestamp.EqualsFast(rhs.Timestamp);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            OblivionMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IDialogTopicGetter item,
            string name = null,
            DialogTopic_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IDialogTopicGetter item,
            FileGeneration fg,
            string name = null,
            DialogTopic_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(DialogTopic)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(DialogTopic)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Quests?.Overall ?? true)
                {
                    fg.AppendLine("Quests =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Quests)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.DialogType ?? true)
                {
                    fg.AppendLine($"DialogType => {item.DialogType}");
                }
                if (printMask?.Timestamp ?? true)
                {
                    fg.AppendLine($"Timestamp => {item.Timestamp}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IDialogTopicGetter item,
            DialogTopic_Mask<bool?> checkMask)
        {
            if (checkMask.Quests.Overall.HasValue && checkMask.Quests.Overall.Value != item.Quests.HasBeenSet) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.DialogType.HasValue && checkMask.DialogType.Value != item.DialogType_IsSet) return false;
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            return true;
        }

        public static DialogTopic_Mask<bool> GetHasBeenSetMask(IDialogTopicGetter item)
        {
            var ret = new DialogTopic_Mask<bool>();
            ret.Quests = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Quests.HasBeenSet, null);
            ret.Name = item.Name_IsSet;
            ret.DialogType = item.DialogType_IsSet;
            ret.Timestamp = true;
            ret.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, DialogItem_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.WithIndex().Select((i) => new MaskItemIndexed<bool, DialogItem_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        public static DialogTopic_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static DialogTopic_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.RecordType:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static DialogTopic_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static DialogTopic_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            DialogTopic item,
            bool doMasks,
            out DialogTopic_ErrorMask errorMask,
            DialogTopic_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            DialogTopic item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogTopic");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogTopic");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this DialogTopic item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Quests.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Quests) ?? true))
            {
                ListXmlTranslation<FormIDSetLink<Quest>>.Instance.Write(
                    node: node,
                    name: nameof(item.Quests),
                    item: item.Quests,
                    fieldIndex: (int)DialogTopic_FieldIndex.Quests,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogTopic_FieldIndex.Quests),
                    transl: (XElement subNode, FormIDSetLink<Quest> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)DialogTopic_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.DialogType_IsSet
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.DialogType) ?? true))
            {
                EnumXmlTranslation<DialogType>.Instance.Write(
                    node: node,
                    name: nameof(item.DialogType),
                    item: item.DialogType,
                    fieldIndex: (int)DialogTopic_FieldIndex.DialogType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Timestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Timestamp),
                    item: item.Timestamp,
                    fieldIndex: (int)DialogTopic_FieldIndex.Timestamp,
                    errorMask: errorMask);
            }
            if (item.Items.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<DialogItem>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)DialogTopic_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogTopic_FieldIndex.Items),
                    transl: (XElement subNode, DialogItem subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<DialogItem>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this DialogTopic item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogTopicCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this DialogTopic item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Quests":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Quests);
                        if (ListXmlTranslation<FormIDSetLink<Quest>>.Instance.Parse(
                            node: node,
                            enumer: out var QuestsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Quests.SetTo(QuestsItem);
                        }
                        else
                        {
                            item.Quests.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DialogType":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.DialogType);
                        if (EnumXmlTranslation<DialogType>.Instance.Parse(
                            node: node,
                            item: out DialogType DialogTypeParse,
                            errorMask: errorMask))
                        {
                            item.DialogType = DialogTypeParse;
                        }
                        else
                        {
                            item.DialogType = default(DialogType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Timestamp":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Timestamp);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] TimestampParse,
                            errorMask: errorMask))
                        {
                            item.Timestamp = TimestampParse;
                        }
                        else
                        {
                            item.Timestamp = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    try
                    {
                        errorMask?.PushIndex((int)DialogTopic_FieldIndex.Items);
                        if (ListXmlTranslation<DialogItem>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<DialogItem>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            DialogTopic item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out DialogTopic_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = DialogTopic_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            DialogTopic item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: DialogTopic_Registration.DIAL_HEADER,
                type: ObjectType.Record))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            DialogTopic.CustomBinaryEnd_ExportInternal(
                writer: writer,
                obj: item,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_Embedded(
            DialogTopic item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordCommon.Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_Binary_RecordTypes(
            DialogTopic item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Quests.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Quest>>.Instance.Write(
                    writer: writer,
                    items: item.Quests,
                    fieldIndex: (int)DialogTopic_FieldIndex.Quests,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, FormIDSetLink<Quest> subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.QSTI_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)DialogTopic_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.DialogType_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogType>.Instance.Write(
                    writer,
                    item.DialogType,
                    length: 1,
                    fieldIndex: (int)DialogTopic_FieldIndex.DialogType,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.DATA_HEADER),
                    nullable: false);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class DialogTopic_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<DialogTopic_Mask<T>>
    {
        #region Ctors
        public DialogTopic_Mask()
        {
        }

        public DialogTopic_Mask(T initialValue)
        {
            this.Quests = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Name = initialValue;
            this.DialogType = initialValue;
            this.Timestamp = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, DialogItem_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Quests;
        public T Name;
        public T DialogType;
        public T Timestamp;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, DialogItem_Mask<T>>>> Items;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DialogTopic_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DialogTopic_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Quests, rhs.Quests)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.DialogType, rhs.DialogType)) return false;
            if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Quests?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.DialogType?.GetHashCode());
            ret = ret.CombineHashCode(this.Timestamp?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Quests != null)
            {
                if (!eval(this.Quests.Overall)) return false;
                if (this.Quests.Specific != null)
                {
                    foreach (var item in this.Quests.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.Name)) return false;
            if (!eval(this.DialogType)) return false;
            if (!eval(this.Timestamp)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new DialogTopic_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DialogTopic_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DialogTopic_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Quests != null)
            {
                obj.Quests = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Quests.Overall = eval(this.Quests.Overall);
                if (Quests.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Quests.Specific = l;
                    foreach (var item in Quests.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.Name = eval(this.Name);
            obj.DialogType = eval(this.DialogType);
            obj.Timestamp = eval(this.Timestamp);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogItem_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItemIndexed<R, DialogItem_Mask<R>>> l = new List<MaskItemIndexed<R, DialogItem_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, DialogItem_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, DialogItem_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Quests.Specific = null;
            this.Items.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DialogTopic_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DialogTopic_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(DialogTopic_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Quests?.Overall ?? true)
                {
                    fg.AppendLine("Quests =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Quests.Overall != null)
                        {
                            fg.AppendLine(Quests.Overall.ToString());
                        }
                        if (Quests.Specific != null)
                        {
                            foreach (var subItem in Quests.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.DialogType ?? true)
                {
                    fg.AppendLine($"DialogType => {DialogType}");
                }
                if (printMask?.Timestamp ?? true)
                {
                    fg.AppendLine($"Timestamp => {Timestamp}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DialogTopic_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<DialogTopic_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Quests;
        public Exception Name;
        public Exception DialogType;
        public Exception Timestamp;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogItem_ErrorMask>>> Items;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    return Quests;
                case DialogTopic_FieldIndex.Name:
                    return Name;
                case DialogTopic_FieldIndex.DialogType:
                    return DialogType;
                case DialogTopic_FieldIndex.Timestamp:
                    return Timestamp;
                case DialogTopic_FieldIndex.Items:
                    return Items;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    this.Quests = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case DialogTopic_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case DialogTopic_FieldIndex.DialogType:
                    this.DialogType = ex;
                    break;
                case DialogTopic_FieldIndex.Timestamp:
                    this.Timestamp = ex;
                    break;
                case DialogTopic_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogItem_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Quests:
                    this.Quests = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case DialogTopic_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case DialogTopic_FieldIndex.DialogType:
                    this.DialogType = (Exception)obj;
                    break;
                case DialogTopic_FieldIndex.Timestamp:
                    this.Timestamp = (Exception)obj;
                    break;
                case DialogTopic_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogItem_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Quests != null) return true;
            if (Name != null) return true;
            if (DialogType != null) return true;
            if (Timestamp != null) return true;
            if (Items != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("DialogTopic_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Quests =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Quests.Overall != null)
                {
                    fg.AppendLine(Quests.Overall.ToString());
                }
                if (Quests.Specific != null)
                {
                    foreach (var subItem in Quests.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"DialogType => {DialogType}");
            fg.AppendLine($"Timestamp => {Timestamp}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public DialogTopic_ErrorMask Combine(DialogTopic_ErrorMask rhs)
        {
            var ret = new DialogTopic_ErrorMask();
            ret.Quests = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Quests.Overall.Combine(rhs.Quests.Overall), new List<(int Index, Exception Value)>(this.Quests.Specific.And(rhs.Quests.Specific)));
            ret.Name = this.Name.Combine(rhs.Name);
            ret.DialogType = this.DialogType.Combine(rhs.DialogType);
            ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DialogItem_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, DialogItem_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            return ret;
        }
        public static DialogTopic_ErrorMask Combine(DialogTopic_ErrorMask lhs, DialogTopic_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static DialogTopic_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new DialogTopic_ErrorMask();
        }
        #endregion

    }
    public class DialogTopic_CopyMask : OblivionMajorRecord_CopyMask
    {
        public DialogTopic_CopyMask()
        {
        }

        public DialogTopic_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Quests = deepCopyOption;
            this.Name = defaultOn;
            this.DialogType = defaultOn;
            this.Timestamp = defaultOn;
            this.Items = new MaskItem<CopyOption, DialogItem_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public CopyOption Quests;
        public bool Name;
        public bool DialogType;
        public bool Timestamp;
        public MaskItem<CopyOption, DialogItem_CopyMask> Items;
        #endregion

    }

    public class DialogTopic_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Quests;
        public bool Name;
        public bool DialogType;
        public bool Timestamp;
        public MaskItem<bool, DialogItem_TranslationMask> Items;
        #endregion

        #region Ctors
        public DialogTopic_TranslationMask()
            : base()
        {
        }

        public DialogTopic_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Quests = defaultOn;
            this.Name = defaultOn;
            this.DialogType = defaultOn;
            this.Timestamp = defaultOn;
            this.Items = new MaskItem<bool, DialogItem_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Quests, null));
            ret.Add((Name, null));
            ret.Add((DialogType, null));
            ret.Add((Timestamp, null));
            ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
