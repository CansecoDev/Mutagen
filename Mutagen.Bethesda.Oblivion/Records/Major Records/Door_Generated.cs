/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Door :
        OblivionMajorRecord,
        IDoorInternal,
        ILoquiObjectSetter<Door>,
        IEquatable<IDoorGetter>
    {
        #region Ctor
        protected Door()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDoorGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IDoorGetter.Model => this.Model;
        #endregion
        #region Script
        public FormLinkNullable<IScriptGetter> Script { get; set; } = new FormLinkNullable<IScriptGetter>();
        #endregion
        #region OpenSound
        public FormLinkNullable<ISoundGetter> OpenSound { get; set; } = new FormLinkNullable<ISoundGetter>();
        #endregion
        #region CloseSound
        public FormLinkNullable<ISoundGetter> CloseSound { get; set; } = new FormLinkNullable<ISoundGetter>();
        #endregion
        #region LoopSound
        public FormLinkNullable<ISoundGetter> LoopSound { get; set; } = new FormLinkNullable<ISoundGetter>();
        #endregion
        #region Flags
        public Door.DoorFlag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Door.DoorFlag? IDoorGetter.Flags => this.Flags;
        #endregion
        #region RandomTeleportDestinations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IPlaceGetter>> _RandomTeleportDestinations = new ExtendedList<IFormLink<IPlaceGetter>>();
        public ExtendedList<IFormLink<IPlaceGetter>> RandomTeleportDestinations
        {
            get => this._RandomTeleportDestinations;
            protected set => this._RandomTeleportDestinations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IPlaceGetter>> IDoorGetter.RandomTeleportDestinations => _RandomTeleportDestinations;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DoorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDoorGetter rhs)) return false;
            return ((DoorCommon)((IDoorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDoorGetter? obj)
        {
            return ((DoorCommon)((IDoorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DoorCommon)((IDoorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Script = initialValue;
                this.OpenSound = initialValue;
                this.CloseSound = initialValue;
                this.LoopSound = initialValue;
                this.Flags = initialValue;
                this.RandomTeleportDestinations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Script,
                TItem OpenSound,
                TItem CloseSound,
                TItem LoopSound,
                TItem Flags,
                TItem RandomTeleportDestinations)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Script = Script;
                this.OpenSound = OpenSound;
                this.CloseSound = CloseSound;
                this.LoopSound = LoopSound;
                this.Flags = Flags;
                this.RandomTeleportDestinations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RandomTeleportDestinations, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Script;
            public TItem OpenSound;
            public TItem CloseSound;
            public TItem LoopSound;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RandomTeleportDestinations;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.OpenSound, rhs.OpenSound)) return false;
                if (!object.Equals(this.CloseSound, rhs.CloseSound)) return false;
                if (!object.Equals(this.LoopSound, rhs.LoopSound)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.RandomTeleportDestinations, rhs.RandomTeleportDestinations)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Script);
                hash.Add(this.OpenSound);
                hash.Add(this.CloseSound);
                hash.Add(this.LoopSound);
                hash.Add(this.Flags);
                hash.Add(this.RandomTeleportDestinations);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Script)) return false;
                if (!eval(this.OpenSound)) return false;
                if (!eval(this.CloseSound)) return false;
                if (!eval(this.LoopSound)) return false;
                if (!eval(this.Flags)) return false;
                if (this.RandomTeleportDestinations != null)
                {
                    if (!eval(this.RandomTeleportDestinations.Overall)) return false;
                    if (this.RandomTeleportDestinations.Specific != null)
                    {
                        foreach (var item in this.RandomTeleportDestinations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Script)) return true;
                if (eval(this.OpenSound)) return true;
                if (eval(this.CloseSound)) return true;
                if (eval(this.LoopSound)) return true;
                if (eval(this.Flags)) return true;
                if (this.RandomTeleportDestinations != null)
                {
                    if (eval(this.RandomTeleportDestinations.Overall)) return true;
                    if (this.RandomTeleportDestinations.Specific != null)
                    {
                        foreach (var item in this.RandomTeleportDestinations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Door.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Script = eval(this.Script);
                obj.OpenSound = eval(this.OpenSound);
                obj.CloseSound = eval(this.CloseSound);
                obj.LoopSound = eval(this.LoopSound);
                obj.Flags = eval(this.Flags);
                if (RandomTeleportDestinations != null)
                {
                    obj.RandomTeleportDestinations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RandomTeleportDestinations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RandomTeleportDestinations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RandomTeleportDestinations.Specific = l;
                        foreach (var item in RandomTeleportDestinations.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Door.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Door.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Door.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.OpenSound ?? true)
                    {
                        fg.AppendItem(OpenSound, "OpenSound");
                    }
                    if (printMask?.CloseSound ?? true)
                    {
                        fg.AppendItem(CloseSound, "CloseSound");
                    }
                    if (printMask?.LoopSound ?? true)
                    {
                        fg.AppendItem(LoopSound, "LoopSound");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.RandomTeleportDestinations?.Overall ?? true)
                        && RandomTeleportDestinations.TryGet(out var RandomTeleportDestinationsItem))
                    {
                        fg.AppendLine("RandomTeleportDestinations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RandomTeleportDestinationsItem.Overall);
                            if (RandomTeleportDestinationsItem.Specific != null)
                            {
                                foreach (var subItem in RandomTeleportDestinationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Script;
            public Exception? OpenSound;
            public Exception? CloseSound;
            public Exception? LoopSound;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RandomTeleportDestinations;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Door_FieldIndex enu = (Door_FieldIndex)index;
                switch (enu)
                {
                    case Door_FieldIndex.Name:
                        return Name;
                    case Door_FieldIndex.Model:
                        return Model;
                    case Door_FieldIndex.Script:
                        return Script;
                    case Door_FieldIndex.OpenSound:
                        return OpenSound;
                    case Door_FieldIndex.CloseSound:
                        return CloseSound;
                    case Door_FieldIndex.LoopSound:
                        return LoopSound;
                    case Door_FieldIndex.Flags:
                        return Flags;
                    case Door_FieldIndex.RandomTeleportDestinations:
                        return RandomTeleportDestinations;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Door_FieldIndex enu = (Door_FieldIndex)index;
                switch (enu)
                {
                    case Door_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Door_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Door_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Door_FieldIndex.OpenSound:
                        this.OpenSound = ex;
                        break;
                    case Door_FieldIndex.CloseSound:
                        this.CloseSound = ex;
                        break;
                    case Door_FieldIndex.LoopSound:
                        this.LoopSound = ex;
                        break;
                    case Door_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Door_FieldIndex.RandomTeleportDestinations:
                        this.RandomTeleportDestinations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Door_FieldIndex enu = (Door_FieldIndex)index;
                switch (enu)
                {
                    case Door_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Door_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Door_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Door_FieldIndex.OpenSound:
                        this.OpenSound = (Exception?)obj;
                        break;
                    case Door_FieldIndex.CloseSound:
                        this.CloseSound = (Exception?)obj;
                        break;
                    case Door_FieldIndex.LoopSound:
                        this.LoopSound = (Exception?)obj;
                        break;
                    case Door_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Door_FieldIndex.RandomTeleportDestinations:
                        this.RandomTeleportDestinations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Script != null) return true;
                if (OpenSound != null) return true;
                if (CloseSound != null) return true;
                if (LoopSound != null) return true;
                if (Flags != null) return true;
                if (RandomTeleportDestinations != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(Script, "Script");
                fg.AppendItem(OpenSound, "OpenSound");
                fg.AppendItem(CloseSound, "CloseSound");
                fg.AppendItem(LoopSound, "LoopSound");
                fg.AppendItem(Flags, "Flags");
                if (RandomTeleportDestinations.TryGet(out var RandomTeleportDestinationsItem))
                {
                    fg.AppendLine("RandomTeleportDestinations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RandomTeleportDestinationsItem.Overall);
                        if (RandomTeleportDestinationsItem.Specific != null)
                        {
                            foreach (var subItem in RandomTeleportDestinationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Script = this.Script.Combine(rhs.Script);
                ret.OpenSound = this.OpenSound.Combine(rhs.OpenSound);
                ret.CloseSound = this.CloseSound.Combine(rhs.CloseSound);
                ret.LoopSound = this.LoopSound.Combine(rhs.LoopSound);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.RandomTeleportDestinations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RandomTeleportDestinations?.Overall, rhs.RandomTeleportDestinations?.Overall), ExceptionExt.Combine(this.RandomTeleportDestinations?.Specific, rhs.RandomTeleportDestinations?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public Model.TranslationMask? Model;
            public bool Script;
            public bool OpenSound;
            public bool CloseSound;
            public bool LoopSound;
            public bool Flags;
            public bool RandomTeleportDestinations;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Script = defaultOn;
                this.OpenSound = defaultOn;
                this.CloseSound = defaultOn;
                this.LoopSound = defaultOn;
                this.Flags = defaultOn;
                this.RandomTeleportDestinations = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Script, null));
                ret.Add((OpenSound, null));
                ret.Add((CloseSound, null));
                ret.Add((LoopSound, null));
                ret.Add((Flags, null));
                ret.Add((RandomTeleportDestinations, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Door_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DoorCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => DoorCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DoorCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DoorCommon.Instance.RemapLinks(this, mapping);
        public Door(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Door(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Door(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DoorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DoorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Door CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Door();
            ((DoorSetterCommon)((IDoorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Door item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DoorSetterCommon)((IDoorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Door GetNew()
        {
            return new Door();
        }

    }
    #endregion

    #region Interface
    public partial interface IDoor :
        IDoorGetter,
        IOblivionMajorRecord,
        INamed,
        ILoquiObjectSetter<IDoorInternal>,
        ILinkedFormKeyContainer
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new FormLinkNullable<IScriptGetter> Script { get; set; }
        new FormLinkNullable<ISoundGetter> OpenSound { get; set; }
        new FormLinkNullable<ISoundGetter> CloseSound { get; set; }
        new FormLinkNullable<ISoundGetter> LoopSound { get; set; }
        new Door.DoorFlag? Flags { get; set; }
        new ExtendedList<IFormLink<IPlaceGetter>> RandomTeleportDestinations { get; }
    }

    public partial interface IDoorInternal :
        IOblivionMajorRecordInternal,
        IDoor,
        IDoorGetter
    {
    }

    public partial interface IDoorGetter :
        IOblivionMajorRecordGetter,
        INamedGetter,
        ILoquiObject<IDoorGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Door_Registration.Instance;
        String? Name { get; }
        IModelGetter? Model { get; }
        FormLinkNullable<IScriptGetter> Script { get; }
        FormLinkNullable<ISoundGetter> OpenSound { get; }
        FormLinkNullable<ISoundGetter> CloseSound { get; }
        FormLinkNullable<ISoundGetter> LoopSound { get; }
        Door.DoorFlag? Flags { get; }
        IReadOnlyList<IFormLink<IPlaceGetter>> RandomTeleportDestinations { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DoorMixIn
    {
        public static void Clear(this IDoorInternal item)
        {
            ((DoorSetterCommon)((IDoorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Door.Mask<bool> GetEqualsMask(
            this IDoorGetter item,
            IDoorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDoorGetter item,
            string? name = null,
            Door.Mask<bool>? printMask = null)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDoorGetter item,
            FileGeneration fg,
            string? name = null,
            Door.Mask<bool>? printMask = null)
        {
            ((DoorCommon)((IDoorGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDoorGetter item,
            IDoorGetter rhs)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDoorInternal lhs,
            IDoorGetter rhs,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DoorSetterTranslationCommon)((IDoorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Door.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDoorInternal lhs,
            IDoorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DoorSetterTranslationCommon)((IDoorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            Door.TranslationMask? copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDoorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DoorSetterCommon)((IDoorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Door_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        OpenSound = 8,
        CloseSound = 9,
        LoopSound = 10,
        Flags = 11,
        RandomTeleportDestinations = 12,
    }
    #endregion

    #region Registration
    public partial class Door_Registration : ILoquiRegistration
    {
        public static readonly Door_Registration Instance = new Door_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 74,
            version: 0);

        public const string GUID = "2430f9e3-8270-4b86-b1e2-03757c4a0f93";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Door.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Door.ErrorMask);

        public static readonly Type ClassType = typeof(Door);

        public static readonly Type GetterType = typeof(IDoorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDoor);

        public static readonly Type? InternalSetterType = typeof(IDoorInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Door";

        public const string Name = "Door";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DOOR;
        public static readonly Type BinaryWriteTranslation = typeof(DoorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DoorSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly DoorSetterCommon Instance = new DoorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDoorInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Script = FormLinkNullable<IScriptGetter>.Null;
            item.OpenSound = FormLinkNullable<ISoundGetter>.Null;
            item.CloseSound = FormLinkNullable<ISoundGetter>.Null;
            item.LoopSound = FormLinkNullable<ISoundGetter>.Null;
            item.Flags = default;
            item.RandomTeleportDestinations.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IDoorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDoorInternal)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDoorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDoorInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DoorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DoorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Door)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Door)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DoorCommon : OblivionMajorRecordCommon
    {
        public new static readonly DoorCommon Instance = new DoorCommon();

        public Door.Mask<bool> GetEqualsMask(
            IDoorGetter item,
            IDoorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Door.Mask<bool>(false);
            ((DoorCommon)((IDoorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDoorGetter item,
            IDoorGetter rhs,
            Door.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Script = item.Script.Equals(rhs.Script);
            ret.OpenSound = item.OpenSound.Equals(rhs.OpenSound);
            ret.CloseSound = item.CloseSound.Equals(rhs.CloseSound);
            ret.LoopSound = item.LoopSound.Equals(rhs.LoopSound);
            ret.Flags = item.Flags == rhs.Flags;
            ret.RandomTeleportDestinations = item.RandomTeleportDestinations.CollectionEqualsHelper(
                rhs.RandomTeleportDestinations,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDoorGetter item,
            string? name = null,
            Door.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDoorGetter item,
            FileGeneration fg,
            string? name = null,
            Door.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Door =>");
            }
            else
            {
                fg.AppendLine($"{name} (Door) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDoorGetter item,
            FileGeneration fg,
            Door.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendItem(item.Script.FormKey, "Script");
            }
            if (printMask?.OpenSound ?? true)
            {
                fg.AppendItem(item.OpenSound.FormKey, "OpenSound");
            }
            if (printMask?.CloseSound ?? true)
            {
                fg.AppendItem(item.CloseSound.FormKey, "CloseSound");
            }
            if (printMask?.LoopSound ?? true)
            {
                fg.AppendItem(item.LoopSound.FormKey, "LoopSound");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.RandomTeleportDestinations?.Overall ?? true)
            {
                fg.AppendLine("RandomTeleportDestinations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RandomTeleportDestinations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Door_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Door_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Door_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Door_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDoorGetter? lhs,
            IDoorGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.OpenSound.Equals(rhs.OpenSound)) return false;
            if (!lhs.CloseSound.Equals(rhs.CloseSound)) return false;
            if (!lhs.LoopSound.Equals(rhs.LoopSound)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.RandomTeleportDestinations.SequenceEqualNullable(rhs.RandomTeleportDestinations)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDoorGetter?)lhs,
                rhs: rhs as IDoorGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDoorGetter?)lhs,
                rhs: rhs as IDoorGetter);
        }
        
        public virtual int GetHashCode(IDoorGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Script);
            hash.Add(item.OpenSound);
            hash.Add(item.CloseSound);
            hash.Add(item.LoopSound);
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.RandomTeleportDestinations);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IDoorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDoorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Door.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IDoorGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Script.FormKey.TryGet(out var ScriptKey))
            {
                yield return ScriptKey;
            }
            if (obj.OpenSound.FormKey.TryGet(out var OpenSoundKey))
            {
                yield return OpenSoundKey;
            }
            if (obj.CloseSound.FormKey.TryGet(out var CloseSoundKey))
            {
                yield return CloseSoundKey;
            }
            if (obj.LoopSound.FormKey.TryGet(out var LoopSoundKey))
            {
                yield return LoopSoundKey;
            }
            foreach (var item in obj.RandomTeleportDestinations.Select(f => f.FormKey))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IDoorGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Door obj, Door rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Door(getNextFormKey());
            ret.DeepCopyIn((Door)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Door)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class DoorSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly DoorSetterTranslationCommon Instance = new DoorSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDoorInternal item,
            IDoorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDoor item,
            IDoorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Door_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Script) ?? true))
            {
                item.Script = new FormLinkNullable<IScriptGetter>(rhs.Script.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.OpenSound) ?? true))
            {
                item.OpenSound = new FormLinkNullable<ISoundGetter>(rhs.OpenSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.CloseSound) ?? true))
            {
                item.CloseSound = new FormLinkNullable<ISoundGetter>(rhs.CloseSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.LoopSound) ?? true))
            {
                item.LoopSound = new FormLinkNullable<ISoundGetter>(rhs.LoopSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.RandomTeleportDestinations) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.RandomTeleportDestinations);
                try
                {
                    item.RandomTeleportDestinations.SetTo(
                        rhs.RandomTeleportDestinations
                        .Select(r => (IFormLink<IPlaceGetter>)new FormLink<IPlaceGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDoorInternal)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDoor)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDoorInternal)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDoor)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Door DeepCopy(
            IDoorGetter item,
            Door.TranslationMask? copyMask = null)
        {
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()!).GetNew();
            ((DoorSetterTranslationCommon)((IDoorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Door DeepCopy(
            IDoorGetter item,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()!).GetNew();
            ((DoorSetterTranslationCommon)((IDoorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Door.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Door DeepCopy(
            IDoorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()!).GetNew();
            ((DoorSetterTranslationCommon)((IDoorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Door
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Door_Registration.Instance;
        public new static Door_Registration Registration => Door_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DoorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DoorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DoorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DoorBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DoorBinaryWriteTranslation Instance = new DoorBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IDoorGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SCRI));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OpenSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CloseSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LoopSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BNAM));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Door.DoorFlag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IPlaceGetter>>.Instance.Write(
                writer: writer,
                items: item.RandomTeleportDestinations,
                transl: (MutagenWriter subWriter, IFormLink<IPlaceGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM));
                });
        }

        public void Write(
            MutagenWriter writer,
            IDoorGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.DOOR),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDoorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDoorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDoorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DoorBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static DoorBinaryCreateTranslation Instance = new DoorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.DOOR;
        public static void FillBinaryStructs(
            IDoorInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IDoorInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Door_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Door_FieldIndex.Model;
                }
                case RecordTypeInts.SCRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Door_FieldIndex.Script;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OpenSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Door_FieldIndex.OpenSound;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CloseSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Door_FieldIndex.CloseSound;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LoopSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Door_FieldIndex.LoopSound;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Door.DoorFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Door_FieldIndex.Flags;
                }
                case RecordTypeInts.TNAM:
                {
                    item.RandomTeleportDestinations.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IPlaceGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Door_FieldIndex.RandomTeleportDestinations;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DoorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DoorBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IDoorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Door_Registration.Instance;
        public new static Door_Registration Registration => Door_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DoorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DoorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DoorCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => DoorCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DoorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DoorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Script
        private int? _ScriptLocation;
        public FormLinkNullable<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ScriptLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IScriptGetter>.Null;
        #endregion
        #region OpenSound
        private int? _OpenSoundLocation;
        public FormLinkNullable<ISoundGetter> OpenSound => _OpenSoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _OpenSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region CloseSound
        private int? _CloseSoundLocation;
        public FormLinkNullable<ISoundGetter> CloseSound => _CloseSoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CloseSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region LoopSound
        private int? _LoopSoundLocation;
        public FormLinkNullable<ISoundGetter> LoopSound => _LoopSoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LoopSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Door.DoorFlag? Flags => _FlagsLocation.HasValue ? (Door.DoorFlag)HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(Door.DoorFlag?);
        #endregion
        public IReadOnlyList<IFormLink<IPlaceGetter>> RandomTeleportDestinations { get; private set; } = ListExt.Empty<IFormLink<IPlaceGetter>>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DoorBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DoorBinaryOverlay DoorFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new DoorBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DoorBinaryOverlay DoorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DoorFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Door_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Door_FieldIndex.Model;
                }
                case RecordTypeInts.SCRI:
                {
                    _ScriptLocation = (stream.Position - offset);
                    return (int)Door_FieldIndex.Script;
                }
                case RecordTypeInts.SNAM:
                {
                    _OpenSoundLocation = (stream.Position - offset);
                    return (int)Door_FieldIndex.OpenSound;
                }
                case RecordTypeInts.ANAM:
                {
                    _CloseSoundLocation = (stream.Position - offset);
                    return (int)Door_FieldIndex.CloseSound;
                }
                case RecordTypeInts.BNAM:
                {
                    _LoopSoundLocation = (stream.Position - offset);
                    return (int)Door_FieldIndex.LoopSound;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Door_FieldIndex.Flags;
                }
                case RecordTypeInts.TNAM:
                {
                    this.RandomTeleportDestinations = BinaryOverlayList.FactoryByArray<IFormLink<IPlaceGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IPlaceGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)Door_FieldIndex.RandomTeleportDestinations;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DoorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDoorGetter rhs)) return false;
            return ((DoorCommon)((IDoorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDoorGetter? obj)
        {
            return ((DoorCommon)((IDoorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DoorCommon)((IDoorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

