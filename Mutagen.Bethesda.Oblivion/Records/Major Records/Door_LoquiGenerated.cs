/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Door : 
        MajorRecord,
        IDoor,
        ILoquiObject<Door>,
        ILoquiObjectSetter,
        INamed,
        IEquatable<Door>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Door_Registration.Instance;
        public new static Door_Registration Registration => Door_Registration.Instance;

        #region Ctor
        public Door()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Door_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Door_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IDoorGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IDoorGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Door_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Door_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Door_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool IDoorGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Model, value, _hasBeenSetTracker, markSet, (int)Door_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IDoorGetter.Model => this.Model;
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> IDoorGetter.Script_Property => this.Script_Property;
        #endregion
        #region OpenSound
        public FormIDSetLink<Sound> OpenSound_Property { get; } = new FormIDSetLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Sound OpenSound { get => OpenSound_Property.Item; set => OpenSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Sound> IDoorGetter.OpenSound_Property => this.OpenSound_Property;
        #endregion
        #region CloseSound
        public FormIDSetLink<Sound> CloseSound_Property { get; } = new FormIDSetLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Sound CloseSound { get => CloseSound_Property.Item; set => CloseSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Sound> IDoorGetter.CloseSound_Property => this.CloseSound_Property;
        #endregion
        #region LoopSound
        public FormIDSetLink<Sound> LoopSound_Property { get; } = new FormIDSetLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Sound LoopSound { get => LoopSound_Property.Item; set => LoopSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Sound> IDoorGetter.LoopSound_Property => this.LoopSound_Property;
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Door_FieldIndex.Flags];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Door_FieldIndex.Flags, nameof(Flags_IsSet));
        }
        bool IDoorGetter.Flags_IsSet => Flags_IsSet;
        private Door.DoorFlag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Door.DoorFlag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Door.DoorFlag IDoorGetter.Flags => this.Flags;
        public void Flags_Set(
            Door.DoorFlag value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Flags, value, _hasBeenSetTracker, markSet, (int)Door_FieldIndex.Flags, nameof(Flags), nameof(Flags_IsSet));
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Door.DoorFlag), false);
        }
        #endregion
        #region RandomTeleportDestinations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FormIDSetLink<Worldspace>> _RandomTeleportDestinations = new SourceSetList<FormIDSetLink<Worldspace>>();
        public ISourceSetList<FormIDSetLink<Worldspace>> RandomTeleportDestinations => _RandomTeleportDestinations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<Worldspace>> RandomTeleportDestinationsEnumerable
        {
            get => _RandomTeleportDestinations.Items;
            set => _RandomTeleportDestinations.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FormIDSetLink<Worldspace>> IDoor.RandomTeleportDestinations => _RandomTeleportDestinations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FormIDSetLink<Worldspace>> IDoorGetter.RandomTeleportDestinations => _RandomTeleportDestinations;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => DoorCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => DoorCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => DoorCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            DoorCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Door>.GetEqualsMask(Door rhs) => DoorCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IDoorGetter>.GetEqualsMask(IDoorGetter rhs) => DoorCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return DoorCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Door_Mask<bool> printMask = null)
        {
            return DoorCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            DoorCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Door_Mask<bool> GetHasBeenSetMask()
        {
            return DoorCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Door rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Door rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Model_IsSet != rhs.Model_IsSet) return false;
            if (Model_IsSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (OpenSound_Property.HasBeenSet != rhs.OpenSound_Property.HasBeenSet) return false;
            if (OpenSound_Property.HasBeenSet)
            {
                if (!this.OpenSound_Property.Equals(rhs.OpenSound_Property)) return false;
            }
            if (CloseSound_Property.HasBeenSet != rhs.CloseSound_Property.HasBeenSet) return false;
            if (CloseSound_Property.HasBeenSet)
            {
                if (!this.CloseSound_Property.Equals(rhs.CloseSound_Property)) return false;
            }
            if (LoopSound_Property.HasBeenSet != rhs.LoopSound_Property.HasBeenSet) return false;
            if (LoopSound_Property.HasBeenSet)
            {
                if (!this.LoopSound_Property.Equals(rhs.LoopSound_Property)) return false;
            }
            if (Flags_IsSet != rhs.Flags_IsSet) return false;
            if (Flags_IsSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (RandomTeleportDestinations.HasBeenSet != rhs.RandomTeleportDestinations.HasBeenSet) return false;
            if (RandomTeleportDestinations.HasBeenSet)
            {
                if (!this.RandomTeleportDestinations.SequenceEqual(rhs.RandomTeleportDestinations)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Model_IsSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (OpenSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(OpenSound).CombineHashCode(ret);
            }
            if (CloseSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CloseSound).CombineHashCode(ret);
            }
            if (LoopSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(LoopSound).CombineHashCode(ret);
            }
            if (Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (RandomTeleportDestinations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RandomTeleportDestinations).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Door Create_Xml(
            XElement root,
            Door_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Door Create_Xml(
            XElement root,
            out Door_ErrorMask errorMask,
            bool doMasks = true,
            Door_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Door Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Door();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Door Create_Xml(
            string path,
            Door_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Door Create_Xml(
            string path,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Door Create_Xml(
            Stream stream,
            Door_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Door Create_Xml(
            Stream stream,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Door>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Door_ErrorMask errorMask,
            bool doMasks = true,
            Door_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            DoorCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Door item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Script_Property,
                        fieldIndex: (int)Door_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "OpenSound":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.OpenSound_Property,
                        fieldIndex: (int)Door_FieldIndex.OpenSound,
                        errorMask: errorMask);
                    break;
                case "CloseSound":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.CloseSound_Property,
                        fieldIndex: (int)Door_FieldIndex.CloseSound,
                        errorMask: errorMask);
                    break;
                case "LoopSound":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.LoopSound_Property,
                        fieldIndex: (int)Door_FieldIndex.LoopSound,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Flags);
                        if (EnumXmlTranslation<Door.DoorFlag>.Instance.Parse(
                            root: root,
                            item: out Door.DoorFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Door.DoorFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RandomTeleportDestinations":
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.RandomTeleportDestinations);
                        if (ListXmlTranslation<FormIDSetLink<Worldspace>>.Instance.Parse(
                            root: root,
                            enumer: out var RandomTeleportDestinationsItem,
                            transl: FormIDXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.RandomTeleportDestinations.SetTo(RandomTeleportDestinationsItem);
                        }
                        else
                        {
                            item.RandomTeleportDestinations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Door_FieldIndex)index)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Flags:
                    return _hasBeenSetTracker[index];
                case Door_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Door_FieldIndex.OpenSound:
                    return OpenSound_Property.HasBeenSet;
                case Door_FieldIndex.CloseSound:
                    return CloseSound_Property.HasBeenSet;
                case Door_FieldIndex.LoopSound:
                    return LoopSound_Property.HasBeenSet;
                case Door_FieldIndex.RandomTeleportDestinations:
                    return RandomTeleportDestinations.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Door_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return OpenSound_Property;
            yield return CloseSound_Property;
            yield return LoopSound_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Door Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Door Create_Binary(
            MutagenFrame frame,
            out Door_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Door Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Door>(
                record: new Door(),
                frame: frame,
                errorMask: errorMask,
                recType: Door_Registration.DOOR_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Door Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Door Create_Binary(
            string path,
            out Door_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Door Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Door Create_Binary(
            Stream stream,
            out Door_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Door_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Door_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Door_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            DoorCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Door item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Door item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Name);
                case 0x4C444F4D: // MODL
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Model);
                case 0x49524353: // SCRI
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Script_Property,
                        fieldIndex: (int)Door_FieldIndex.Script,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Script);
                case 0x4D414E53: // SNAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.OpenSound_Property,
                        fieldIndex: (int)Door_FieldIndex.OpenSound,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.OpenSound);
                case 0x4D414E41: // ANAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.CloseSound_Property,
                        fieldIndex: (int)Door_FieldIndex.CloseSound,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.CloseSound);
                case 0x4D414E42: // BNAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.LoopSound_Property,
                        fieldIndex: (int)Door_FieldIndex.LoopSound,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.LoopSound);
                case 0x4D414E46: // FNAM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Door_FieldIndex.Flags);
                        if (EnumBinaryTranslation<Door.DoorFlag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Door.DoorFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Door.DoorFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Flags);
                case 0x4D414E54: // TNAM
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Worldspace>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Door_Registration.TNAM_HEADER,
                        item: item.RandomTeleportDestinations,
                        fieldIndex: (int)Door_FieldIndex.RandomTeleportDestinations,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.RandomTeleportDestinations);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Door Copy(
            Door_CopyMask copyMask = null,
            IDoorGetter def = null)
        {
            return Door.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Door Copy(
            IDoor item,
            Door_CopyMask copyMask = null,
            IDoorGetter def = null)
        {
            Door ret;
            if (item.GetType().Equals(typeof(Door)))
            {
                ret = new Door();
            }
            else
            {
                ret = (Door)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Door Copy_ToLoqui(
            IDoorGetter item,
            Door_CopyMask copyMask = null,
            IDoorGetter def = null)
        {
            Door ret;
            if (item.GetType().Equals(typeof(Door)))
            {
                ret = new Door() as Door;
            }
            else
            {
                ret = (Door)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IDoorGetter rhs,
            Door_CopyMask copyMask,
            IDoorGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDoorGetter rhs,
            out Door_ErrorMask errorMask,
            Door_CopyMask copyMask = null,
            IDoorGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DoorCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IDoorGetter rhs,
            ErrorMaskBuilder errorMask,
            Door_CopyMask copyMask = null,
            IDoorGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            DoorCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Door_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Door_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case Door_FieldIndex.OpenSound:
                    this.OpenSound_Property.Set(
                        (FormIDSetLink<Sound>)obj,
                        cmds);
                    break;
                case Door_FieldIndex.CloseSound:
                    this.CloseSound_Property.Set(
                        (FormIDSetLink<Sound>)obj,
                        cmds);
                    break;
                case Door_FieldIndex.LoopSound:
                    this.LoopSound_Property.Set(
                        (FormIDSetLink<Sound>)obj,
                        cmds);
                    break;
                case Door_FieldIndex.Flags:
                    this.Flags = (Door.DoorFlag)obj;
                    break;
                case Door_FieldIndex.RandomTeleportDestinations:
                    this._RandomTeleportDestinations.SetTo((IEnumerable<FormIDSetLink<Worldspace>>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            DoorCommon.Clear(this, cmds);
        }


        public new static Door Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Door();
            foreach (var pair in fields)
            {
                CopyInInternal_Door(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Door(Door obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Door_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Door_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Door_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case Door_FieldIndex.OpenSound:
                    obj.OpenSound_Property.Set(
                        (FormIDSetLink<Sound>)pair.Value,
                        null);
                    break;
                case Door_FieldIndex.CloseSound:
                    obj.CloseSound_Property.Set(
                        (FormIDSetLink<Sound>)pair.Value,
                        null);
                    break;
                case Door_FieldIndex.LoopSound:
                    obj.LoopSound_Property.Set(
                        (FormIDSetLink<Sound>)pair.Value,
                        null);
                    break;
                case Door_FieldIndex.Flags:
                    obj.Flags = (Door.DoorFlag)pair.Value;
                    break;
                case Door_FieldIndex.RandomTeleportDestinations:
                    obj._RandomTeleportDestinations.SetTo((IEnumerable<FormIDSetLink<Worldspace>>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Door obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IDoor : IDoorGetter, IMajorRecord, ILoquiClass<IDoor, IDoorGetter>, ILoquiClass<Door, IDoorGetter>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model item, bool hasBeenSet = true);
        void Model_Unset();

        new Script Script { get; set; }
        new Sound OpenSound { get; set; }
        new Sound CloseSound { get; set; }
        new Sound LoopSound { get; set; }
        new Door.DoorFlag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Door.DoorFlag item, bool hasBeenSet = true);
        void Flags_Unset();

        new ISourceSetList<FormIDSetLink<Worldspace>> RandomTeleportDestinations { get; }
    }

    public partial interface IDoorGetter : IMajorRecordGetter
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        Model Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region OpenSound
        Sound OpenSound { get; }
        FormIDSetLink<Sound> OpenSound_Property { get; }

        #endregion
        #region CloseSound
        Sound CloseSound { get; }
        FormIDSetLink<Sound> CloseSound_Property { get; }

        #endregion
        #region LoopSound
        Sound LoopSound { get; }
        FormIDSetLink<Sound> LoopSound_Property { get; }

        #endregion
        #region Flags
        Door.DoorFlag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region RandomTeleportDestinations
        IObservableSetList<FormIDSetLink<Worldspace>> RandomTeleportDestinations { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Door_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        OpenSound = 8,
        CloseSound = 9,
        LoopSound = 10,
        Flags = 11,
        RandomTeleportDestinations = 12,
    }
    #endregion

    #region Registration
    public class Door_Registration : ILoquiRegistration
    {
        public static readonly Door_Registration Instance = new Door_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 74,
            version: 0);

        public const string GUID = "2430f9e3-8270-4b86-b1e2-03757c4a0f93";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Door_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Door_ErrorMask);

        public static readonly Type ClassType = typeof(Door);

        public static readonly Type GetterType = typeof(IDoorGetter);

        public static readonly Type SetterType = typeof(IDoor);

        public static readonly Type CommonType = typeof(DoorCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Door";

        public const string Name = "Door";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Door_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Door_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Door_FieldIndex.Script;
                case "OPENSOUND":
                    return (ushort)Door_FieldIndex.OpenSound;
                case "CLOSESOUND":
                    return (ushort)Door_FieldIndex.CloseSound;
                case "LOOPSOUND":
                    return (ushort)Door_FieldIndex.LoopSound;
                case "FLAGS":
                    return (ushort)Door_FieldIndex.Flags;
                case "RANDOMTELEPORTDESTINATIONS":
                    return (ushort)Door_FieldIndex.RandomTeleportDestinations;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.RandomTeleportDestinations:
                    return true;
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Model:
                    return true;
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return "Name";
                case Door_FieldIndex.Model:
                    return "Model";
                case Door_FieldIndex.Script:
                    return "Script";
                case Door_FieldIndex.OpenSound:
                    return "OpenSound";
                case Door_FieldIndex.CloseSound:
                    return "CloseSound";
                case Door_FieldIndex.LoopSound:
                    return "LoopSound";
                case Door_FieldIndex.Flags:
                    return "Flags";
                case Door_FieldIndex.RandomTeleportDestinations:
                    return "RandomTeleportDestinations";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return typeof(String);
                case Door_FieldIndex.Model:
                    return typeof(Model);
                case Door_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Door_FieldIndex.OpenSound:
                    return typeof(FormIDSetLink<Sound>);
                case Door_FieldIndex.CloseSound:
                    return typeof(FormIDSetLink<Sound>);
                case Door_FieldIndex.LoopSound:
                    return typeof(FormIDSetLink<Sound>);
                case Door_FieldIndex.Flags:
                    return typeof(Door.DoorFlag);
                case Door_FieldIndex.RandomTeleportDestinations:
                    return typeof(NotifyingList<FormIDSetLink<Worldspace>>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DOOR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 8;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class DoorCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IDoor item,
            IDoorGetter rhs,
            IDoorGetter def,
            ErrorMaskBuilder errorMask,
            Door_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Model = rhsModelItem;
                                break;
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_IsSet = false;
                        item.Model = default(Model);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.OpenSound ?? true)
            {
                errorMask?.PushIndex((int)Door_FieldIndex.OpenSound);
                try
                {
                    item.OpenSound_Property.SetToWithDefault(
                        rhs: rhs.OpenSound_Property,
                        def: def?.OpenSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CloseSound ?? true)
            {
                errorMask?.PushIndex((int)Door_FieldIndex.CloseSound);
                try
                {
                    item.CloseSound_Property.SetToWithDefault(
                        rhs: rhs.CloseSound_Property,
                        def: def?.CloseSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LoopSound ?? true)
            {
                errorMask?.PushIndex((int)Door_FieldIndex.LoopSound);
                try
                {
                    item.LoopSound_Property.SetToWithDefault(
                        rhs: rhs.LoopSound_Property,
                        def: def?.LoopSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(Door.DoorFlag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RandomTeleportDestinations != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Door_FieldIndex.RandomTeleportDestinations);
                try
                {
                    item.RandomTeleportDestinations.SetToWithDefault(
                        rhs.RandomTeleportDestinations,
                        def?.RandomTeleportDestinations);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IDoor obj,
            NotifyingFireParameters cmds = null)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    obj.Name_IsSet = on;
                    break;
                case Door_FieldIndex.Model:
                    obj.Model_IsSet = on;
                    break;
                case Door_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case Door_FieldIndex.OpenSound:
                    obj.OpenSound_Property.HasBeenSet = on;
                    break;
                case Door_FieldIndex.CloseSound:
                    obj.CloseSound_Property.HasBeenSet = on;
                    break;
                case Door_FieldIndex.LoopSound:
                    obj.LoopSound_Property.HasBeenSet = on;
                    break;
                case Door_FieldIndex.Flags:
                    obj.Flags_IsSet = on;
                    break;
                case Door_FieldIndex.RandomTeleportDestinations:
                    obj.RandomTeleportDestinations.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IDoor obj,
            NotifyingUnsetParameters cmds = null)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    obj.Name_Unset();
                    break;
                case Door_FieldIndex.Model:
                    obj.Model_Unset();
                    break;
                case Door_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds.ToUnsetParams());
                    break;
                case Door_FieldIndex.OpenSound:
                    obj.OpenSound_Property.Unset(cmds.ToUnsetParams());
                    break;
                case Door_FieldIndex.CloseSound:
                    obj.CloseSound_Property.Unset(cmds.ToUnsetParams());
                    break;
                case Door_FieldIndex.LoopSound:
                    obj.LoopSound_Property.Unset(cmds.ToUnsetParams());
                    break;
                case Door_FieldIndex.Flags:
                    obj.Flags_Unset();
                    break;
                case Door_FieldIndex.RandomTeleportDestinations:
                    obj.RandomTeleportDestinations.Unset();
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IDoor obj)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return obj.Name_IsSet;
                case Door_FieldIndex.Model:
                    return obj.Model_IsSet;
                case Door_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case Door_FieldIndex.OpenSound:
                    return obj.OpenSound_Property.HasBeenSet;
                case Door_FieldIndex.CloseSound:
                    return obj.CloseSound_Property.HasBeenSet;
                case Door_FieldIndex.LoopSound:
                    return obj.LoopSound_Property.HasBeenSet;
                case Door_FieldIndex.Flags:
                    return obj.Flags_IsSet;
                case Door_FieldIndex.RandomTeleportDestinations:
                    return obj.RandomTeleportDestinations.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IDoorGetter obj)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return obj.Name;
                case Door_FieldIndex.Model:
                    return obj.Model;
                case Door_FieldIndex.Script:
                    return obj.Script;
                case Door_FieldIndex.OpenSound:
                    return obj.OpenSound;
                case Door_FieldIndex.CloseSound:
                    return obj.CloseSound;
                case Door_FieldIndex.LoopSound:
                    return obj.LoopSound;
                case Door_FieldIndex.Flags:
                    return obj.Flags;
                case Door_FieldIndex.RandomTeleportDestinations:
                    return obj.RandomTeleportDestinations;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IDoor item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Unset();
            item.Model_Unset();
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.OpenSound_Property.Unset(cmds.ToUnsetParams());
            item.CloseSound_Property.Unset(cmds.ToUnsetParams());
            item.LoopSound_Property.Unset(cmds.ToUnsetParams());
            item.Flags_Unset();
            item.RandomTeleportDestinations.Unset();
        }

        public static Door_Mask<bool> GetEqualsMask(
            this IDoorGetter item,
            IDoorGetter rhs)
        {
            var ret = new Door_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IDoorGetter item,
            IDoorGetter rhs,
            Door_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && object.Equals(item.Name, rhs.Name);
            ret.Model = IHasBeenSetExt.LoquiEqualsHelper(item.Model_IsSet, rhs.Model_IsSet, item.Model, rhs.Model, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.OpenSound = item.OpenSound_Property.Equals(rhs.OpenSound_Property, (l, r) => l == r);
            ret.CloseSound = item.CloseSound_Property.Equals(rhs.CloseSound_Property, (l, r) => l == r);
            ret.LoopSound = item.LoopSound_Property.Equals(rhs.LoopSound_Property, (l, r) => l == r);
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            if (item.RandomTeleportDestinations.HasBeenSet == rhs.RandomTeleportDestinations.HasBeenSet)
            {
                if (item.RandomTeleportDestinations.HasBeenSet)
                {
                    ret.RandomTeleportDestinations = new MaskItem<bool, IEnumerable<bool>>();
                    ret.RandomTeleportDestinations.Specific = item.RandomTeleportDestinations.SelectAgainst<FormIDSetLink<Worldspace>, bool>(rhs.RandomTeleportDestinations, ((l, r) => object.Equals(l, r)), out ret.RandomTeleportDestinations.Overall);
                    ret.RandomTeleportDestinations.Overall = ret.RandomTeleportDestinations.Overall && ret.RandomTeleportDestinations.Specific.All((b) => b);
                }
                else
                {
                    ret.RandomTeleportDestinations = new MaskItem<bool, IEnumerable<bool>>();
                    ret.RandomTeleportDestinations.Overall = true;
                }
            }
            else
            {
                ret.RandomTeleportDestinations = new MaskItem<bool, IEnumerable<bool>>();
                ret.RandomTeleportDestinations.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IDoorGetter item,
            string name = null,
            Door_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IDoorGetter item,
            FileGeneration fg,
            string name = null,
            Door_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Door)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Door)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.OpenSound ?? true)
                {
                    fg.AppendLine($"OpenSound => {item.OpenSound_Property}");
                }
                if (printMask?.CloseSound ?? true)
                {
                    fg.AppendLine($"CloseSound => {item.CloseSound_Property}");
                }
                if (printMask?.LoopSound ?? true)
                {
                    fg.AppendLine($"LoopSound => {item.LoopSound_Property}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.RandomTeleportDestinations?.Overall ?? true)
                {
                    fg.AppendLine("RandomTeleportDestinations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.RandomTeleportDestinations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IDoorGetter item,
            Door_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.OpenSound.HasValue && checkMask.OpenSound.Value != item.OpenSound_Property.HasBeenSet) return false;
            if (checkMask.CloseSound.HasValue && checkMask.CloseSound.Value != item.CloseSound_Property.HasBeenSet) return false;
            if (checkMask.LoopSound.HasValue && checkMask.LoopSound.Value != item.LoopSound_Property.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.RandomTeleportDestinations.Overall.HasValue && checkMask.RandomTeleportDestinations.Overall.Value != item.RandomTeleportDestinations.HasBeenSet) return false;
            return true;
        }

        public static Door_Mask<bool> GetHasBeenSetMask(IDoorGetter item)
        {
            var ret = new Door_Mask<bool>();
            ret.Name = item.Name_IsSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Script = item.Script_Property.HasBeenSet;
            ret.OpenSound = item.OpenSound_Property.HasBeenSet;
            ret.CloseSound = item.CloseSound_Property.HasBeenSet;
            ret.LoopSound = item.LoopSound_Property.HasBeenSet;
            ret.Flags = item.Flags_IsSet;
            ret.RandomTeleportDestinations = new MaskItem<bool, IEnumerable<bool>>(item.RandomTeleportDestinations.HasBeenSet, null);
            return ret;
        }

        public static Door_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Door_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Door_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Door item,
            bool doMasks,
            out Door_ErrorMask errorMask,
            Door_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Door item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Door");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Door");
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Door_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Model) ?? true))
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model,
                    name: nameof(item.Model),
                    fieldIndex: (int)Door_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.Model));
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Script) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormID,
                    fieldIndex: (int)Door_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.OpenSound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.OpenSound) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.OpenSound),
                    item: item.OpenSound_Property?.FormID,
                    fieldIndex: (int)Door_FieldIndex.OpenSound,
                    errorMask: errorMask);
            }
            if (item.CloseSound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.CloseSound) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.CloseSound),
                    item: item.CloseSound_Property?.FormID,
                    fieldIndex: (int)Door_FieldIndex.CloseSound,
                    errorMask: errorMask);
            }
            if (item.LoopSound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.LoopSound) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.LoopSound),
                    item: item.LoopSound_Property?.FormID,
                    fieldIndex: (int)Door_FieldIndex.LoopSound,
                    errorMask: errorMask);
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Door.DoorFlag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Door_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.RandomTeleportDestinations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.RandomTeleportDestinations) ?? true))
            {
                ListXmlTranslation<FormIDSetLink<Worldspace>>.Instance.Write(
                    node: elem,
                    name: nameof(item.RandomTeleportDestinations),
                    item: item.RandomTeleportDestinations,
                    fieldIndex: (int)Door_FieldIndex.RandomTeleportDestinations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.RandomTeleportDestinations),
                    transl: (XElement subNode, FormIDSetLink<Worldspace> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Door item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Door_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Door_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Door item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Door_Registration.DOOR_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Door item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)Door_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                LoquiBinaryTranslation<Model>.Instance.Write(
                    writer: writer,
                    item: item.Model,
                    fieldIndex: (int)Door_FieldIndex.Model,
                    errorMask: errorMask);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    fieldIndex: (int)Door_FieldIndex.Script,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.SCRI_HEADER),
                    nullable: false);
            }
            if (item.OpenSound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OpenSound_Property,
                    fieldIndex: (int)Door_FieldIndex.OpenSound,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.SNAM_HEADER),
                    nullable: false);
            }
            if (item.CloseSound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CloseSound_Property,
                    fieldIndex: (int)Door_FieldIndex.CloseSound,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.ANAM_HEADER),
                    nullable: false);
            }
            if (item.LoopSound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LoopSound_Property,
                    fieldIndex: (int)Door_FieldIndex.LoopSound,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.BNAM_HEADER),
                    nullable: false);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Door.DoorFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    fieldIndex: (int)Door_FieldIndex.Flags,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Door_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.RandomTeleportDestinations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Worldspace>>.Instance.WriteListOfRecords(
                    writer: writer,
                    items: item.RandomTeleportDestinations,
                    fieldIndex: (int)Door_FieldIndex.RandomTeleportDestinations,
                    recordType: Door_Registration.TNAM_HEADER,
                    errorMask: errorMask,
                    transl: FormIDBinaryTranslation.Instance.Write);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Door_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Door_Mask<T>>
    {
        #region Ctors
        public Door_Mask()
        {
        }

        public Door_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Script = initialValue;
            this.OpenSound = initialValue;
            this.CloseSound = initialValue;
            this.LoopSound = initialValue;
            this.Flags = initialValue;
            this.RandomTeleportDestinations = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Script;
        public T OpenSound;
        public T CloseSound;
        public T LoopSound;
        public T Flags;
        public MaskItem<T, IEnumerable<T>> RandomTeleportDestinations;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Door_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Door_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.OpenSound, rhs.OpenSound)) return false;
            if (!object.Equals(this.CloseSound, rhs.CloseSound)) return false;
            if (!object.Equals(this.LoopSound, rhs.LoopSound)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.RandomTeleportDestinations, rhs.RandomTeleportDestinations)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.OpenSound?.GetHashCode());
            ret = ret.CombineHashCode(this.CloseSound?.GetHashCode());
            ret = ret.CombineHashCode(this.LoopSound?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.RandomTeleportDestinations?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Script)) return false;
            if (!eval(this.OpenSound)) return false;
            if (!eval(this.CloseSound)) return false;
            if (!eval(this.LoopSound)) return false;
            if (!eval(this.Flags)) return false;
            if (this.RandomTeleportDestinations != null)
            {
                if (!eval(this.RandomTeleportDestinations.Overall)) return false;
                if (this.RandomTeleportDestinations.Specific != null)
                {
                    foreach (var item in this.RandomTeleportDestinations.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Door_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Door_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Door_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Script = eval(this.Script);
            obj.OpenSound = eval(this.OpenSound);
            obj.CloseSound = eval(this.CloseSound);
            obj.LoopSound = eval(this.LoopSound);
            obj.Flags = eval(this.Flags);
            if (RandomTeleportDestinations != null)
            {
                obj.RandomTeleportDestinations = new MaskItem<R, IEnumerable<R>>();
                obj.RandomTeleportDestinations.Overall = eval(this.RandomTeleportDestinations.Overall);
                if (RandomTeleportDestinations.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.RandomTeleportDestinations.Specific = l;
                    foreach (var item in RandomTeleportDestinations.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.RandomTeleportDestinations.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Door_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Door_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Door_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.OpenSound ?? true)
                {
                    fg.AppendLine($"OpenSound => {OpenSound}");
                }
                if (printMask?.CloseSound ?? true)
                {
                    fg.AppendLine($"CloseSound => {CloseSound}");
                }
                if (printMask?.LoopSound ?? true)
                {
                    fg.AppendLine($"LoopSound => {LoopSound}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.RandomTeleportDestinations?.Overall ?? true)
                {
                    fg.AppendLine("RandomTeleportDestinations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RandomTeleportDestinations.Overall != null)
                        {
                            fg.AppendLine(RandomTeleportDestinations.Overall.ToString());
                        }
                        if (RandomTeleportDestinations.Specific != null)
                        {
                            foreach (var subItem in RandomTeleportDestinations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Door_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Door_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Script;
        public Exception OpenSound;
        public Exception CloseSound;
        public Exception LoopSound;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<Exception>> RandomTeleportDestinations;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return Name;
                case Door_FieldIndex.Model:
                    return Model;
                case Door_FieldIndex.Script:
                    return Script;
                case Door_FieldIndex.OpenSound:
                    return OpenSound;
                case Door_FieldIndex.CloseSound:
                    return CloseSound;
                case Door_FieldIndex.LoopSound:
                    return LoopSound;
                case Door_FieldIndex.Flags:
                    return Flags;
                case Door_FieldIndex.RandomTeleportDestinations:
                    return RandomTeleportDestinations;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Door_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Door_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Door_FieldIndex.OpenSound:
                    this.OpenSound = ex;
                    break;
                case Door_FieldIndex.CloseSound:
                    this.CloseSound = ex;
                    break;
                case Door_FieldIndex.LoopSound:
                    this.LoopSound = ex;
                    break;
                case Door_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Door_FieldIndex.RandomTeleportDestinations:
                    this.RandomTeleportDestinations = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Door_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Door_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Door_FieldIndex.OpenSound:
                    this.OpenSound = (Exception)obj;
                    break;
                case Door_FieldIndex.CloseSound:
                    this.CloseSound = (Exception)obj;
                    break;
                case Door_FieldIndex.LoopSound:
                    this.LoopSound = (Exception)obj;
                    break;
                case Door_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Door_FieldIndex.RandomTeleportDestinations:
                    this.RandomTeleportDestinations = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Script != null) return true;
            if (OpenSound != null) return true;
            if (CloseSound != null) return true;
            if (LoopSound != null) return true;
            if (Flags != null) return true;
            if (RandomTeleportDestinations != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Door_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"OpenSound => {OpenSound}");
            fg.AppendLine($"CloseSound => {CloseSound}");
            fg.AppendLine($"LoopSound => {LoopSound}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("RandomTeleportDestinations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RandomTeleportDestinations.Overall != null)
                {
                    fg.AppendLine(RandomTeleportDestinations.Overall.ToString());
                }
                if (RandomTeleportDestinations.Specific != null)
                {
                    foreach (var subItem in RandomTeleportDestinations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Door_ErrorMask Combine(Door_ErrorMask rhs)
        {
            var ret = new Door_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.OpenSound = this.OpenSound.Combine(rhs.OpenSound);
            ret.CloseSound = this.CloseSound.Combine(rhs.CloseSound);
            ret.LoopSound = this.LoopSound.Combine(rhs.LoopSound);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.RandomTeleportDestinations = new MaskItem<Exception, IEnumerable<Exception>>(this.RandomTeleportDestinations.Overall.Combine(rhs.RandomTeleportDestinations.Overall), new List<Exception>(this.RandomTeleportDestinations.Specific.And(rhs.RandomTeleportDestinations.Specific)));
            return ret;
        }
        public static Door_ErrorMask Combine(Door_ErrorMask lhs, Door_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Door_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Door_ErrorMask();
        }
        #endregion

    }
    public class Door_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Script;
        public bool OpenSound;
        public bool CloseSound;
        public bool LoopSound;
        public bool Flags;
        public CopyOption RandomTeleportDestinations;
        #endregion

    }
    public class Door_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Script;
        public bool OpenSound;
        public bool CloseSound;
        public bool LoopSound;
        public bool Flags;
        public bool RandomTeleportDestinations;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Script, null));
            ret.Add((OpenSound, null));
            ret.Add((CloseSound, null));
            ret.Add((LoopSound, null));
            ret.Add((Flags, null));
            ret.Add((RandomTeleportDestinations, null));
        }
    }
    #endregion

    #endregion

}
