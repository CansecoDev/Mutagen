/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class EffectShaderData :
        IEffectShaderData,
        ILoquiObjectSetter<EffectShaderData>,
        IEquatable<EffectShaderData>,
        IEqualsMask
    {
        #region Ctor
        public EffectShaderData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public EffectShaderData.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region Flags
        public EffectShader.Flag Flags { get; set; } = default;
        #endregion
        #region MembraneShaderSourceBlendMode
        public EffectShader.SourceBlendMode MembraneShaderSourceBlendMode { get; set; } = default;
        #endregion
        #region MembraneShaderBlendOperation
        public EffectShader.BlendOperation MembraneShaderBlendOperation { get; set; } = default;
        #endregion
        #region MembraneShaderZTestFunction
        public EffectShader.ZTestFunction MembraneShaderZTestFunction { get; set; } = default;
        #endregion
        #region FillTextureEffectColor
        public Color FillTextureEffectColor { get; set; } = default;
        #endregion
        #region FillTextureEffectAlphaFadeInTime
        public Single FillTextureEffectAlphaFadeInTime { get; set; } = default;
        #endregion
        #region FillTextureEffectFullAlphaTime
        public Single FillTextureEffectFullAlphaTime { get; set; } = default;
        #endregion
        #region FillTextureEffectAlphaFadeOutTime
        public Single FillTextureEffectAlphaFadeOutTime { get; set; } = default;
        #endregion
        #region FillTextureEffectPersistentAlphaRatio
        public Single FillTextureEffectPersistentAlphaRatio { get; set; } = default;
        #endregion
        #region FillTextureEffectAlphaPulseAmplitude
        public Single FillTextureEffectAlphaPulseAmplitude { get; set; } = default;
        #endregion
        #region FillTextureEffectAlphaPulseFrequency
        public Single FillTextureEffectAlphaPulseFrequency { get; set; } = default;
        #endregion
        #region FillTextureEffectTextureAnimationSpeedU
        public Single FillTextureEffectTextureAnimationSpeedU { get; set; } = default;
        #endregion
        #region FillTextureEffectTextureAnimationSpeedV
        public Single FillTextureEffectTextureAnimationSpeedV { get; set; } = default;
        #endregion
        #region EdgeEffectFallOff
        public Single EdgeEffectFallOff { get; set; } = default;
        #endregion
        #region EdgeEffectColor
        public Color EdgeEffectColor { get; set; } = default;
        #endregion
        #region EdgeEffectAlphaFadeInTime
        public Single EdgeEffectAlphaFadeInTime { get; set; } = default;
        #endregion
        #region EdgeEffectFullAlphaTime
        public Single EdgeEffectFullAlphaTime { get; set; } = default;
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        public Single EdgeEffectAlphaFadeOutTime { get; set; } = default;
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        public Single EdgeEffectPersistentAlphaRatio { get; set; } = default;
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        public Single EdgeEffectAlphaPulseAmplitude { get; set; } = default;
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        public Single EdgeEffectAlphaPulseFrequency { get; set; } = default;
        #endregion
        #region FillTextureEffectFullAlphaRatio
        public Single FillTextureEffectFullAlphaRatio { get; set; } = default;
        #endregion
        #region EdgeEffectFullAlphaRatio
        public Single EdgeEffectFullAlphaRatio { get; set; } = default;
        #endregion
        #region MembraneShaderDestBlendMode
        public EffectShader.SourceBlendMode MembraneShaderDestBlendMode { get; set; } = default;
        #endregion
        #region ParticleShaderSourceBlendMode
        public EffectShader.SourceBlendMode ParticleShaderSourceBlendMode { get; set; } = default;
        #endregion
        #region ParticleShaderBlendOperation
        public EffectShader.BlendOperation ParticleShaderBlendOperation { get; set; } = default;
        #endregion
        #region ParticleShaderZTestFunction
        public EffectShader.ZTestFunction ParticleShaderZTestFunction { get; set; } = default;
        #endregion
        #region ParticleShaderDestBlendMode
        public EffectShader.SourceBlendMode ParticleShaderDestBlendMode { get; set; } = default;
        #endregion
        #region ParticleShaderParticleBirthRampUpTime
        public Single ParticleShaderParticleBirthRampUpTime { get; set; } = default;
        #endregion
        #region ParticleShaderFullParticleBirthTime
        public Single ParticleShaderFullParticleBirthTime { get; set; } = default;
        #endregion
        #region ParticleShaderParticleBirthRampDownTime
        public Single ParticleShaderParticleBirthRampDownTime { get; set; } = default;
        #endregion
        #region ParticleShaderFullParticleBirthRatio
        public Single ParticleShaderFullParticleBirthRatio { get; set; } = default;
        #endregion
        #region ParticleShaderPersistentParticleBirthRatio
        public Single ParticleShaderPersistentParticleBirthRatio { get; set; } = default;
        #endregion
        #region ParticleShaderParticleLifetime
        public Single ParticleShaderParticleLifetime { get; set; } = default;
        #endregion
        #region ParticleShaderParticleLifetimePlusMinus
        public Single ParticleShaderParticleLifetimePlusMinus { get; set; } = default;
        #endregion
        #region ParticleShaderInitialSpeedAlongNormal
        public Single ParticleShaderInitialSpeedAlongNormal { get; set; } = default;
        #endregion
        #region ParticleShaderAccelerationAlongNormal
        public Single ParticleShaderAccelerationAlongNormal { get; set; } = default;
        #endregion
        #region ParticleShaderInitialVelocity1
        public Single ParticleShaderInitialVelocity1 { get; set; } = default;
        #endregion
        #region ParticleShaderInitialVelocity2
        public Single ParticleShaderInitialVelocity2 { get; set; } = default;
        #endregion
        #region ParticleShaderInitialVelocity3
        public Single ParticleShaderInitialVelocity3 { get; set; } = default;
        #endregion
        #region ParticleShaderAcceleration1
        public Single ParticleShaderAcceleration1 { get; set; } = default;
        #endregion
        #region ParticleShaderAcceleration2
        public Single ParticleShaderAcceleration2 { get; set; } = default;
        #endregion
        #region ParticleShaderAcceleration3
        public Single ParticleShaderAcceleration3 { get; set; } = default;
        #endregion
        #region ParticleShaderScaleKey1
        public Single ParticleShaderScaleKey1 { get; set; } = default;
        #endregion
        #region ParticleShaderScaleKey2
        public Single ParticleShaderScaleKey2 { get; set; } = default;
        #endregion
        #region ParticleShaderScaleKey1Time
        public Single ParticleShaderScaleKey1Time { get; set; } = default;
        #endregion
        #region ParticleShaderScaleKey2Time
        public Single ParticleShaderScaleKey2Time { get; set; } = default;
        #endregion
        #region ColorKey1Color
        public Color ColorKey1Color { get; set; } = default;
        #endregion
        #region ColorKey2Color
        public Color ColorKey2Color { get; set; } = default;
        #endregion
        #region ColorKey3Color
        public Color ColorKey3Color { get; set; } = default;
        #endregion
        #region ColorKey1ColorAlpha
        public Single ColorKey1ColorAlpha { get; set; } = default;
        #endregion
        #region ColorKey2ColorAlpha
        public Single ColorKey2ColorAlpha { get; set; } = default;
        #endregion
        #region ColorKey3ColorAlpha
        public Single ColorKey3ColorAlpha { get; set; } = default;
        #endregion
        #region ColorKey1ColorKeyTime
        public Single ColorKey1ColorKeyTime { get; set; } = default;
        #endregion
        #region ColorKey2ColorKeyTime
        public Single ColorKey2ColorKeyTime { get; set; } = default;
        #endregion
        #region ColorKey3ColorKeyTime
        public Single ColorKey3ColorKeyTime { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EffectShaderDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IEffectShaderDataGetter rhs)) return false;
            return ((EffectShaderDataCommon)((IEffectShaderDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(EffectShaderData? obj)
        {
            return ((EffectShaderDataCommon)((IEffectShaderDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((EffectShaderDataCommon)((IEffectShaderDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => EffectShaderDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EffectShaderDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static EffectShaderData CreateFromXml(
            XElement node,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static EffectShaderData CreateFromXml(
            XElement node,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShaderData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static EffectShaderData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new EffectShaderData();
            ((EffectShaderDataSetterCommon)((IEffectShaderDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static EffectShaderData CreateFromXml(
            string path,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static EffectShaderData CreateFromXml(
            string path,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EffectShaderData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static EffectShaderData CreateFromXml(
            Stream stream,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static EffectShaderData CreateFromXml(
            Stream stream,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EffectShaderData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Flags = initialValue;
                this.MembraneShaderSourceBlendMode = initialValue;
                this.MembraneShaderBlendOperation = initialValue;
                this.MembraneShaderZTestFunction = initialValue;
                this.FillTextureEffectColor = initialValue;
                this.FillTextureEffectAlphaFadeInTime = initialValue;
                this.FillTextureEffectFullAlphaTime = initialValue;
                this.FillTextureEffectAlphaFadeOutTime = initialValue;
                this.FillTextureEffectPersistentAlphaRatio = initialValue;
                this.FillTextureEffectAlphaPulseAmplitude = initialValue;
                this.FillTextureEffectAlphaPulseFrequency = initialValue;
                this.FillTextureEffectTextureAnimationSpeedU = initialValue;
                this.FillTextureEffectTextureAnimationSpeedV = initialValue;
                this.EdgeEffectFallOff = initialValue;
                this.EdgeEffectColor = initialValue;
                this.EdgeEffectAlphaFadeInTime = initialValue;
                this.EdgeEffectFullAlphaTime = initialValue;
                this.EdgeEffectAlphaFadeOutTime = initialValue;
                this.EdgeEffectPersistentAlphaRatio = initialValue;
                this.EdgeEffectAlphaPulseAmplitude = initialValue;
                this.EdgeEffectAlphaPulseFrequency = initialValue;
                this.FillTextureEffectFullAlphaRatio = initialValue;
                this.EdgeEffectFullAlphaRatio = initialValue;
                this.MembraneShaderDestBlendMode = initialValue;
                this.ParticleShaderSourceBlendMode = initialValue;
                this.ParticleShaderBlendOperation = initialValue;
                this.ParticleShaderZTestFunction = initialValue;
                this.ParticleShaderDestBlendMode = initialValue;
                this.ParticleShaderParticleBirthRampUpTime = initialValue;
                this.ParticleShaderFullParticleBirthTime = initialValue;
                this.ParticleShaderParticleBirthRampDownTime = initialValue;
                this.ParticleShaderFullParticleBirthRatio = initialValue;
                this.ParticleShaderPersistentParticleBirthRatio = initialValue;
                this.ParticleShaderParticleLifetime = initialValue;
                this.ParticleShaderParticleLifetimePlusMinus = initialValue;
                this.ParticleShaderInitialSpeedAlongNormal = initialValue;
                this.ParticleShaderAccelerationAlongNormal = initialValue;
                this.ParticleShaderInitialVelocity1 = initialValue;
                this.ParticleShaderInitialVelocity2 = initialValue;
                this.ParticleShaderInitialVelocity3 = initialValue;
                this.ParticleShaderAcceleration1 = initialValue;
                this.ParticleShaderAcceleration2 = initialValue;
                this.ParticleShaderAcceleration3 = initialValue;
                this.ParticleShaderScaleKey1 = initialValue;
                this.ParticleShaderScaleKey2 = initialValue;
                this.ParticleShaderScaleKey1Time = initialValue;
                this.ParticleShaderScaleKey2Time = initialValue;
                this.ColorKey1Color = initialValue;
                this.ColorKey2Color = initialValue;
                this.ColorKey3Color = initialValue;
                this.ColorKey1ColorAlpha = initialValue;
                this.ColorKey2ColorAlpha = initialValue;
                this.ColorKey3ColorAlpha = initialValue;
                this.ColorKey1ColorKeyTime = initialValue;
                this.ColorKey2ColorKeyTime = initialValue;
                this.ColorKey3ColorKeyTime = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Flags,
                TItem MembraneShaderSourceBlendMode,
                TItem MembraneShaderBlendOperation,
                TItem MembraneShaderZTestFunction,
                TItem FillTextureEffectColor,
                TItem FillTextureEffectAlphaFadeInTime,
                TItem FillTextureEffectFullAlphaTime,
                TItem FillTextureEffectAlphaFadeOutTime,
                TItem FillTextureEffectPersistentAlphaRatio,
                TItem FillTextureEffectAlphaPulseAmplitude,
                TItem FillTextureEffectAlphaPulseFrequency,
                TItem FillTextureEffectTextureAnimationSpeedU,
                TItem FillTextureEffectTextureAnimationSpeedV,
                TItem EdgeEffectFallOff,
                TItem EdgeEffectColor,
                TItem EdgeEffectAlphaFadeInTime,
                TItem EdgeEffectFullAlphaTime,
                TItem EdgeEffectAlphaFadeOutTime,
                TItem EdgeEffectPersistentAlphaRatio,
                TItem EdgeEffectAlphaPulseAmplitude,
                TItem EdgeEffectAlphaPulseFrequency,
                TItem FillTextureEffectFullAlphaRatio,
                TItem EdgeEffectFullAlphaRatio,
                TItem MembraneShaderDestBlendMode,
                TItem ParticleShaderSourceBlendMode,
                TItem ParticleShaderBlendOperation,
                TItem ParticleShaderZTestFunction,
                TItem ParticleShaderDestBlendMode,
                TItem ParticleShaderParticleBirthRampUpTime,
                TItem ParticleShaderFullParticleBirthTime,
                TItem ParticleShaderParticleBirthRampDownTime,
                TItem ParticleShaderFullParticleBirthRatio,
                TItem ParticleShaderPersistentParticleBirthRatio,
                TItem ParticleShaderParticleLifetime,
                TItem ParticleShaderParticleLifetimePlusMinus,
                TItem ParticleShaderInitialSpeedAlongNormal,
                TItem ParticleShaderAccelerationAlongNormal,
                TItem ParticleShaderInitialVelocity1,
                TItem ParticleShaderInitialVelocity2,
                TItem ParticleShaderInitialVelocity3,
                TItem ParticleShaderAcceleration1,
                TItem ParticleShaderAcceleration2,
                TItem ParticleShaderAcceleration3,
                TItem ParticleShaderScaleKey1,
                TItem ParticleShaderScaleKey2,
                TItem ParticleShaderScaleKey1Time,
                TItem ParticleShaderScaleKey2Time,
                TItem ColorKey1Color,
                TItem ColorKey2Color,
                TItem ColorKey3Color,
                TItem ColorKey1ColorAlpha,
                TItem ColorKey2ColorAlpha,
                TItem ColorKey3ColorAlpha,
                TItem ColorKey1ColorKeyTime,
                TItem ColorKey2ColorKeyTime,
                TItem ColorKey3ColorKeyTime)
            {
                this.Versioning = Versioning;
                this.Flags = Flags;
                this.MembraneShaderSourceBlendMode = MembraneShaderSourceBlendMode;
                this.MembraneShaderBlendOperation = MembraneShaderBlendOperation;
                this.MembraneShaderZTestFunction = MembraneShaderZTestFunction;
                this.FillTextureEffectColor = FillTextureEffectColor;
                this.FillTextureEffectAlphaFadeInTime = FillTextureEffectAlphaFadeInTime;
                this.FillTextureEffectFullAlphaTime = FillTextureEffectFullAlphaTime;
                this.FillTextureEffectAlphaFadeOutTime = FillTextureEffectAlphaFadeOutTime;
                this.FillTextureEffectPersistentAlphaRatio = FillTextureEffectPersistentAlphaRatio;
                this.FillTextureEffectAlphaPulseAmplitude = FillTextureEffectAlphaPulseAmplitude;
                this.FillTextureEffectAlphaPulseFrequency = FillTextureEffectAlphaPulseFrequency;
                this.FillTextureEffectTextureAnimationSpeedU = FillTextureEffectTextureAnimationSpeedU;
                this.FillTextureEffectTextureAnimationSpeedV = FillTextureEffectTextureAnimationSpeedV;
                this.EdgeEffectFallOff = EdgeEffectFallOff;
                this.EdgeEffectColor = EdgeEffectColor;
                this.EdgeEffectAlphaFadeInTime = EdgeEffectAlphaFadeInTime;
                this.EdgeEffectFullAlphaTime = EdgeEffectFullAlphaTime;
                this.EdgeEffectAlphaFadeOutTime = EdgeEffectAlphaFadeOutTime;
                this.EdgeEffectPersistentAlphaRatio = EdgeEffectPersistentAlphaRatio;
                this.EdgeEffectAlphaPulseAmplitude = EdgeEffectAlphaPulseAmplitude;
                this.EdgeEffectAlphaPulseFrequency = EdgeEffectAlphaPulseFrequency;
                this.FillTextureEffectFullAlphaRatio = FillTextureEffectFullAlphaRatio;
                this.EdgeEffectFullAlphaRatio = EdgeEffectFullAlphaRatio;
                this.MembraneShaderDestBlendMode = MembraneShaderDestBlendMode;
                this.ParticleShaderSourceBlendMode = ParticleShaderSourceBlendMode;
                this.ParticleShaderBlendOperation = ParticleShaderBlendOperation;
                this.ParticleShaderZTestFunction = ParticleShaderZTestFunction;
                this.ParticleShaderDestBlendMode = ParticleShaderDestBlendMode;
                this.ParticleShaderParticleBirthRampUpTime = ParticleShaderParticleBirthRampUpTime;
                this.ParticleShaderFullParticleBirthTime = ParticleShaderFullParticleBirthTime;
                this.ParticleShaderParticleBirthRampDownTime = ParticleShaderParticleBirthRampDownTime;
                this.ParticleShaderFullParticleBirthRatio = ParticleShaderFullParticleBirthRatio;
                this.ParticleShaderPersistentParticleBirthRatio = ParticleShaderPersistentParticleBirthRatio;
                this.ParticleShaderParticleLifetime = ParticleShaderParticleLifetime;
                this.ParticleShaderParticleLifetimePlusMinus = ParticleShaderParticleLifetimePlusMinus;
                this.ParticleShaderInitialSpeedAlongNormal = ParticleShaderInitialSpeedAlongNormal;
                this.ParticleShaderAccelerationAlongNormal = ParticleShaderAccelerationAlongNormal;
                this.ParticleShaderInitialVelocity1 = ParticleShaderInitialVelocity1;
                this.ParticleShaderInitialVelocity2 = ParticleShaderInitialVelocity2;
                this.ParticleShaderInitialVelocity3 = ParticleShaderInitialVelocity3;
                this.ParticleShaderAcceleration1 = ParticleShaderAcceleration1;
                this.ParticleShaderAcceleration2 = ParticleShaderAcceleration2;
                this.ParticleShaderAcceleration3 = ParticleShaderAcceleration3;
                this.ParticleShaderScaleKey1 = ParticleShaderScaleKey1;
                this.ParticleShaderScaleKey2 = ParticleShaderScaleKey2;
                this.ParticleShaderScaleKey1Time = ParticleShaderScaleKey1Time;
                this.ParticleShaderScaleKey2Time = ParticleShaderScaleKey2Time;
                this.ColorKey1Color = ColorKey1Color;
                this.ColorKey2Color = ColorKey2Color;
                this.ColorKey3Color = ColorKey3Color;
                this.ColorKey1ColorAlpha = ColorKey1ColorAlpha;
                this.ColorKey2ColorAlpha = ColorKey2ColorAlpha;
                this.ColorKey3ColorAlpha = ColorKey3ColorAlpha;
                this.ColorKey1ColorKeyTime = ColorKey1ColorKeyTime;
                this.ColorKey2ColorKeyTime = ColorKey2ColorKeyTime;
                this.ColorKey3ColorKeyTime = ColorKey3ColorKeyTime;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Flags;
            public TItem MembraneShaderSourceBlendMode;
            public TItem MembraneShaderBlendOperation;
            public TItem MembraneShaderZTestFunction;
            public TItem FillTextureEffectColor;
            public TItem FillTextureEffectAlphaFadeInTime;
            public TItem FillTextureEffectFullAlphaTime;
            public TItem FillTextureEffectAlphaFadeOutTime;
            public TItem FillTextureEffectPersistentAlphaRatio;
            public TItem FillTextureEffectAlphaPulseAmplitude;
            public TItem FillTextureEffectAlphaPulseFrequency;
            public TItem FillTextureEffectTextureAnimationSpeedU;
            public TItem FillTextureEffectTextureAnimationSpeedV;
            public TItem EdgeEffectFallOff;
            public TItem EdgeEffectColor;
            public TItem EdgeEffectAlphaFadeInTime;
            public TItem EdgeEffectFullAlphaTime;
            public TItem EdgeEffectAlphaFadeOutTime;
            public TItem EdgeEffectPersistentAlphaRatio;
            public TItem EdgeEffectAlphaPulseAmplitude;
            public TItem EdgeEffectAlphaPulseFrequency;
            public TItem FillTextureEffectFullAlphaRatio;
            public TItem EdgeEffectFullAlphaRatio;
            public TItem MembraneShaderDestBlendMode;
            public TItem ParticleShaderSourceBlendMode;
            public TItem ParticleShaderBlendOperation;
            public TItem ParticleShaderZTestFunction;
            public TItem ParticleShaderDestBlendMode;
            public TItem ParticleShaderParticleBirthRampUpTime;
            public TItem ParticleShaderFullParticleBirthTime;
            public TItem ParticleShaderParticleBirthRampDownTime;
            public TItem ParticleShaderFullParticleBirthRatio;
            public TItem ParticleShaderPersistentParticleBirthRatio;
            public TItem ParticleShaderParticleLifetime;
            public TItem ParticleShaderParticleLifetimePlusMinus;
            public TItem ParticleShaderInitialSpeedAlongNormal;
            public TItem ParticleShaderAccelerationAlongNormal;
            public TItem ParticleShaderInitialVelocity1;
            public TItem ParticleShaderInitialVelocity2;
            public TItem ParticleShaderInitialVelocity3;
            public TItem ParticleShaderAcceleration1;
            public TItem ParticleShaderAcceleration2;
            public TItem ParticleShaderAcceleration3;
            public TItem ParticleShaderScaleKey1;
            public TItem ParticleShaderScaleKey2;
            public TItem ParticleShaderScaleKey1Time;
            public TItem ParticleShaderScaleKey2Time;
            public TItem ColorKey1Color;
            public TItem ColorKey2Color;
            public TItem ColorKey3Color;
            public TItem ColorKey1ColorAlpha;
            public TItem ColorKey2ColorAlpha;
            public TItem ColorKey3ColorAlpha;
            public TItem ColorKey1ColorKeyTime;
            public TItem ColorKey2ColorKeyTime;
            public TItem ColorKey3ColorKeyTime;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MembraneShaderSourceBlendMode, rhs.MembraneShaderSourceBlendMode)) return false;
                if (!object.Equals(this.MembraneShaderBlendOperation, rhs.MembraneShaderBlendOperation)) return false;
                if (!object.Equals(this.MembraneShaderZTestFunction, rhs.MembraneShaderZTestFunction)) return false;
                if (!object.Equals(this.FillTextureEffectColor, rhs.FillTextureEffectColor)) return false;
                if (!object.Equals(this.FillTextureEffectAlphaFadeInTime, rhs.FillTextureEffectAlphaFadeInTime)) return false;
                if (!object.Equals(this.FillTextureEffectFullAlphaTime, rhs.FillTextureEffectFullAlphaTime)) return false;
                if (!object.Equals(this.FillTextureEffectAlphaFadeOutTime, rhs.FillTextureEffectAlphaFadeOutTime)) return false;
                if (!object.Equals(this.FillTextureEffectPersistentAlphaRatio, rhs.FillTextureEffectPersistentAlphaRatio)) return false;
                if (!object.Equals(this.FillTextureEffectAlphaPulseAmplitude, rhs.FillTextureEffectAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.FillTextureEffectAlphaPulseFrequency, rhs.FillTextureEffectAlphaPulseFrequency)) return false;
                if (!object.Equals(this.FillTextureEffectTextureAnimationSpeedU, rhs.FillTextureEffectTextureAnimationSpeedU)) return false;
                if (!object.Equals(this.FillTextureEffectTextureAnimationSpeedV, rhs.FillTextureEffectTextureAnimationSpeedV)) return false;
                if (!object.Equals(this.EdgeEffectFallOff, rhs.EdgeEffectFallOff)) return false;
                if (!object.Equals(this.EdgeEffectColor, rhs.EdgeEffectColor)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeInTime, rhs.EdgeEffectAlphaFadeInTime)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaTime, rhs.EdgeEffectFullAlphaTime)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeOutTime, rhs.EdgeEffectAlphaFadeOutTime)) return false;
                if (!object.Equals(this.EdgeEffectPersistentAlphaRatio, rhs.EdgeEffectPersistentAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseAmplitude, rhs.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseFrequency, rhs.EdgeEffectAlphaPulseFrequency)) return false;
                if (!object.Equals(this.FillTextureEffectFullAlphaRatio, rhs.FillTextureEffectFullAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaRatio, rhs.EdgeEffectFullAlphaRatio)) return false;
                if (!object.Equals(this.MembraneShaderDestBlendMode, rhs.MembraneShaderDestBlendMode)) return false;
                if (!object.Equals(this.ParticleShaderSourceBlendMode, rhs.ParticleShaderSourceBlendMode)) return false;
                if (!object.Equals(this.ParticleShaderBlendOperation, rhs.ParticleShaderBlendOperation)) return false;
                if (!object.Equals(this.ParticleShaderZTestFunction, rhs.ParticleShaderZTestFunction)) return false;
                if (!object.Equals(this.ParticleShaderDestBlendMode, rhs.ParticleShaderDestBlendMode)) return false;
                if (!object.Equals(this.ParticleShaderParticleBirthRampUpTime, rhs.ParticleShaderParticleBirthRampUpTime)) return false;
                if (!object.Equals(this.ParticleShaderFullParticleBirthTime, rhs.ParticleShaderFullParticleBirthTime)) return false;
                if (!object.Equals(this.ParticleShaderParticleBirthRampDownTime, rhs.ParticleShaderParticleBirthRampDownTime)) return false;
                if (!object.Equals(this.ParticleShaderFullParticleBirthRatio, rhs.ParticleShaderFullParticleBirthRatio)) return false;
                if (!object.Equals(this.ParticleShaderPersistentParticleBirthRatio, rhs.ParticleShaderPersistentParticleBirthRatio)) return false;
                if (!object.Equals(this.ParticleShaderParticleLifetime, rhs.ParticleShaderParticleLifetime)) return false;
                if (!object.Equals(this.ParticleShaderParticleLifetimePlusMinus, rhs.ParticleShaderParticleLifetimePlusMinus)) return false;
                if (!object.Equals(this.ParticleShaderInitialSpeedAlongNormal, rhs.ParticleShaderInitialSpeedAlongNormal)) return false;
                if (!object.Equals(this.ParticleShaderAccelerationAlongNormal, rhs.ParticleShaderAccelerationAlongNormal)) return false;
                if (!object.Equals(this.ParticleShaderInitialVelocity1, rhs.ParticleShaderInitialVelocity1)) return false;
                if (!object.Equals(this.ParticleShaderInitialVelocity2, rhs.ParticleShaderInitialVelocity2)) return false;
                if (!object.Equals(this.ParticleShaderInitialVelocity3, rhs.ParticleShaderInitialVelocity3)) return false;
                if (!object.Equals(this.ParticleShaderAcceleration1, rhs.ParticleShaderAcceleration1)) return false;
                if (!object.Equals(this.ParticleShaderAcceleration2, rhs.ParticleShaderAcceleration2)) return false;
                if (!object.Equals(this.ParticleShaderAcceleration3, rhs.ParticleShaderAcceleration3)) return false;
                if (!object.Equals(this.ParticleShaderScaleKey1, rhs.ParticleShaderScaleKey1)) return false;
                if (!object.Equals(this.ParticleShaderScaleKey2, rhs.ParticleShaderScaleKey2)) return false;
                if (!object.Equals(this.ParticleShaderScaleKey1Time, rhs.ParticleShaderScaleKey1Time)) return false;
                if (!object.Equals(this.ParticleShaderScaleKey2Time, rhs.ParticleShaderScaleKey2Time)) return false;
                if (!object.Equals(this.ColorKey1Color, rhs.ColorKey1Color)) return false;
                if (!object.Equals(this.ColorKey2Color, rhs.ColorKey2Color)) return false;
                if (!object.Equals(this.ColorKey3Color, rhs.ColorKey3Color)) return false;
                if (!object.Equals(this.ColorKey1ColorAlpha, rhs.ColorKey1ColorAlpha)) return false;
                if (!object.Equals(this.ColorKey2ColorAlpha, rhs.ColorKey2ColorAlpha)) return false;
                if (!object.Equals(this.ColorKey3ColorAlpha, rhs.ColorKey3ColorAlpha)) return false;
                if (!object.Equals(this.ColorKey1ColorKeyTime, rhs.ColorKey1ColorKeyTime)) return false;
                if (!object.Equals(this.ColorKey2ColorKeyTime, rhs.ColorKey2ColorKeyTime)) return false;
                if (!object.Equals(this.ColorKey3ColorKeyTime, rhs.ColorKey3ColorKeyTime)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Flags);
                hash.Add(this.MembraneShaderSourceBlendMode);
                hash.Add(this.MembraneShaderBlendOperation);
                hash.Add(this.MembraneShaderZTestFunction);
                hash.Add(this.FillTextureEffectColor);
                hash.Add(this.FillTextureEffectAlphaFadeInTime);
                hash.Add(this.FillTextureEffectFullAlphaTime);
                hash.Add(this.FillTextureEffectAlphaFadeOutTime);
                hash.Add(this.FillTextureEffectPersistentAlphaRatio);
                hash.Add(this.FillTextureEffectAlphaPulseAmplitude);
                hash.Add(this.FillTextureEffectAlphaPulseFrequency);
                hash.Add(this.FillTextureEffectTextureAnimationSpeedU);
                hash.Add(this.FillTextureEffectTextureAnimationSpeedV);
                hash.Add(this.EdgeEffectFallOff);
                hash.Add(this.EdgeEffectColor);
                hash.Add(this.EdgeEffectAlphaFadeInTime);
                hash.Add(this.EdgeEffectFullAlphaTime);
                hash.Add(this.EdgeEffectAlphaFadeOutTime);
                hash.Add(this.EdgeEffectPersistentAlphaRatio);
                hash.Add(this.EdgeEffectAlphaPulseAmplitude);
                hash.Add(this.EdgeEffectAlphaPulseFrequency);
                hash.Add(this.FillTextureEffectFullAlphaRatio);
                hash.Add(this.EdgeEffectFullAlphaRatio);
                hash.Add(this.MembraneShaderDestBlendMode);
                hash.Add(this.ParticleShaderSourceBlendMode);
                hash.Add(this.ParticleShaderBlendOperation);
                hash.Add(this.ParticleShaderZTestFunction);
                hash.Add(this.ParticleShaderDestBlendMode);
                hash.Add(this.ParticleShaderParticleBirthRampUpTime);
                hash.Add(this.ParticleShaderFullParticleBirthTime);
                hash.Add(this.ParticleShaderParticleBirthRampDownTime);
                hash.Add(this.ParticleShaderFullParticleBirthRatio);
                hash.Add(this.ParticleShaderPersistentParticleBirthRatio);
                hash.Add(this.ParticleShaderParticleLifetime);
                hash.Add(this.ParticleShaderParticleLifetimePlusMinus);
                hash.Add(this.ParticleShaderInitialSpeedAlongNormal);
                hash.Add(this.ParticleShaderAccelerationAlongNormal);
                hash.Add(this.ParticleShaderInitialVelocity1);
                hash.Add(this.ParticleShaderInitialVelocity2);
                hash.Add(this.ParticleShaderInitialVelocity3);
                hash.Add(this.ParticleShaderAcceleration1);
                hash.Add(this.ParticleShaderAcceleration2);
                hash.Add(this.ParticleShaderAcceleration3);
                hash.Add(this.ParticleShaderScaleKey1);
                hash.Add(this.ParticleShaderScaleKey2);
                hash.Add(this.ParticleShaderScaleKey1Time);
                hash.Add(this.ParticleShaderScaleKey2Time);
                hash.Add(this.ColorKey1Color);
                hash.Add(this.ColorKey2Color);
                hash.Add(this.ColorKey3Color);
                hash.Add(this.ColorKey1ColorAlpha);
                hash.Add(this.ColorKey2ColorAlpha);
                hash.Add(this.ColorKey3ColorAlpha);
                hash.Add(this.ColorKey1ColorKeyTime);
                hash.Add(this.ColorKey2ColorKeyTime);
                hash.Add(this.ColorKey3ColorKeyTime);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.MembraneShaderSourceBlendMode)) return false;
                if (!eval(this.MembraneShaderBlendOperation)) return false;
                if (!eval(this.MembraneShaderZTestFunction)) return false;
                if (!eval(this.FillTextureEffectColor)) return false;
                if (!eval(this.FillTextureEffectAlphaFadeInTime)) return false;
                if (!eval(this.FillTextureEffectFullAlphaTime)) return false;
                if (!eval(this.FillTextureEffectAlphaFadeOutTime)) return false;
                if (!eval(this.FillTextureEffectPersistentAlphaRatio)) return false;
                if (!eval(this.FillTextureEffectAlphaPulseAmplitude)) return false;
                if (!eval(this.FillTextureEffectAlphaPulseFrequency)) return false;
                if (!eval(this.FillTextureEffectTextureAnimationSpeedU)) return false;
                if (!eval(this.FillTextureEffectTextureAnimationSpeedV)) return false;
                if (!eval(this.EdgeEffectFallOff)) return false;
                if (!eval(this.EdgeEffectColor)) return false;
                if (!eval(this.EdgeEffectAlphaFadeInTime)) return false;
                if (!eval(this.EdgeEffectFullAlphaTime)) return false;
                if (!eval(this.EdgeEffectAlphaFadeOutTime)) return false;
                if (!eval(this.EdgeEffectPersistentAlphaRatio)) return false;
                if (!eval(this.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!eval(this.EdgeEffectAlphaPulseFrequency)) return false;
                if (!eval(this.FillTextureEffectFullAlphaRatio)) return false;
                if (!eval(this.EdgeEffectFullAlphaRatio)) return false;
                if (!eval(this.MembraneShaderDestBlendMode)) return false;
                if (!eval(this.ParticleShaderSourceBlendMode)) return false;
                if (!eval(this.ParticleShaderBlendOperation)) return false;
                if (!eval(this.ParticleShaderZTestFunction)) return false;
                if (!eval(this.ParticleShaderDestBlendMode)) return false;
                if (!eval(this.ParticleShaderParticleBirthRampUpTime)) return false;
                if (!eval(this.ParticleShaderFullParticleBirthTime)) return false;
                if (!eval(this.ParticleShaderParticleBirthRampDownTime)) return false;
                if (!eval(this.ParticleShaderFullParticleBirthRatio)) return false;
                if (!eval(this.ParticleShaderPersistentParticleBirthRatio)) return false;
                if (!eval(this.ParticleShaderParticleLifetime)) return false;
                if (!eval(this.ParticleShaderParticleLifetimePlusMinus)) return false;
                if (!eval(this.ParticleShaderInitialSpeedAlongNormal)) return false;
                if (!eval(this.ParticleShaderAccelerationAlongNormal)) return false;
                if (!eval(this.ParticleShaderInitialVelocity1)) return false;
                if (!eval(this.ParticleShaderInitialVelocity2)) return false;
                if (!eval(this.ParticleShaderInitialVelocity3)) return false;
                if (!eval(this.ParticleShaderAcceleration1)) return false;
                if (!eval(this.ParticleShaderAcceleration2)) return false;
                if (!eval(this.ParticleShaderAcceleration3)) return false;
                if (!eval(this.ParticleShaderScaleKey1)) return false;
                if (!eval(this.ParticleShaderScaleKey2)) return false;
                if (!eval(this.ParticleShaderScaleKey1Time)) return false;
                if (!eval(this.ParticleShaderScaleKey2Time)) return false;
                if (!eval(this.ColorKey1Color)) return false;
                if (!eval(this.ColorKey2Color)) return false;
                if (!eval(this.ColorKey3Color)) return false;
                if (!eval(this.ColorKey1ColorAlpha)) return false;
                if (!eval(this.ColorKey2ColorAlpha)) return false;
                if (!eval(this.ColorKey3ColorAlpha)) return false;
                if (!eval(this.ColorKey1ColorKeyTime)) return false;
                if (!eval(this.ColorKey2ColorKeyTime)) return false;
                if (!eval(this.ColorKey3ColorKeyTime)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.MembraneShaderSourceBlendMode)) return true;
                if (eval(this.MembraneShaderBlendOperation)) return true;
                if (eval(this.MembraneShaderZTestFunction)) return true;
                if (eval(this.FillTextureEffectColor)) return true;
                if (eval(this.FillTextureEffectAlphaFadeInTime)) return true;
                if (eval(this.FillTextureEffectFullAlphaTime)) return true;
                if (eval(this.FillTextureEffectAlphaFadeOutTime)) return true;
                if (eval(this.FillTextureEffectPersistentAlphaRatio)) return true;
                if (eval(this.FillTextureEffectAlphaPulseAmplitude)) return true;
                if (eval(this.FillTextureEffectAlphaPulseFrequency)) return true;
                if (eval(this.FillTextureEffectTextureAnimationSpeedU)) return true;
                if (eval(this.FillTextureEffectTextureAnimationSpeedV)) return true;
                if (eval(this.EdgeEffectFallOff)) return true;
                if (eval(this.EdgeEffectColor)) return true;
                if (eval(this.EdgeEffectAlphaFadeInTime)) return true;
                if (eval(this.EdgeEffectFullAlphaTime)) return true;
                if (eval(this.EdgeEffectAlphaFadeOutTime)) return true;
                if (eval(this.EdgeEffectPersistentAlphaRatio)) return true;
                if (eval(this.EdgeEffectAlphaPulseAmplitude)) return true;
                if (eval(this.EdgeEffectAlphaPulseFrequency)) return true;
                if (eval(this.FillTextureEffectFullAlphaRatio)) return true;
                if (eval(this.EdgeEffectFullAlphaRatio)) return true;
                if (eval(this.MembraneShaderDestBlendMode)) return true;
                if (eval(this.ParticleShaderSourceBlendMode)) return true;
                if (eval(this.ParticleShaderBlendOperation)) return true;
                if (eval(this.ParticleShaderZTestFunction)) return true;
                if (eval(this.ParticleShaderDestBlendMode)) return true;
                if (eval(this.ParticleShaderParticleBirthRampUpTime)) return true;
                if (eval(this.ParticleShaderFullParticleBirthTime)) return true;
                if (eval(this.ParticleShaderParticleBirthRampDownTime)) return true;
                if (eval(this.ParticleShaderFullParticleBirthRatio)) return true;
                if (eval(this.ParticleShaderPersistentParticleBirthRatio)) return true;
                if (eval(this.ParticleShaderParticleLifetime)) return true;
                if (eval(this.ParticleShaderParticleLifetimePlusMinus)) return true;
                if (eval(this.ParticleShaderInitialSpeedAlongNormal)) return true;
                if (eval(this.ParticleShaderAccelerationAlongNormal)) return true;
                if (eval(this.ParticleShaderInitialVelocity1)) return true;
                if (eval(this.ParticleShaderInitialVelocity2)) return true;
                if (eval(this.ParticleShaderInitialVelocity3)) return true;
                if (eval(this.ParticleShaderAcceleration1)) return true;
                if (eval(this.ParticleShaderAcceleration2)) return true;
                if (eval(this.ParticleShaderAcceleration3)) return true;
                if (eval(this.ParticleShaderScaleKey1)) return true;
                if (eval(this.ParticleShaderScaleKey2)) return true;
                if (eval(this.ParticleShaderScaleKey1Time)) return true;
                if (eval(this.ParticleShaderScaleKey2Time)) return true;
                if (eval(this.ColorKey1Color)) return true;
                if (eval(this.ColorKey2Color)) return true;
                if (eval(this.ColorKey3Color)) return true;
                if (eval(this.ColorKey1ColorAlpha)) return true;
                if (eval(this.ColorKey2ColorAlpha)) return true;
                if (eval(this.ColorKey3ColorAlpha)) return true;
                if (eval(this.ColorKey1ColorKeyTime)) return true;
                if (eval(this.ColorKey2ColorKeyTime)) return true;
                if (eval(this.ColorKey3ColorKeyTime)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new EffectShaderData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Flags = eval(this.Flags);
                obj.MembraneShaderSourceBlendMode = eval(this.MembraneShaderSourceBlendMode);
                obj.MembraneShaderBlendOperation = eval(this.MembraneShaderBlendOperation);
                obj.MembraneShaderZTestFunction = eval(this.MembraneShaderZTestFunction);
                obj.FillTextureEffectColor = eval(this.FillTextureEffectColor);
                obj.FillTextureEffectAlphaFadeInTime = eval(this.FillTextureEffectAlphaFadeInTime);
                obj.FillTextureEffectFullAlphaTime = eval(this.FillTextureEffectFullAlphaTime);
                obj.FillTextureEffectAlphaFadeOutTime = eval(this.FillTextureEffectAlphaFadeOutTime);
                obj.FillTextureEffectPersistentAlphaRatio = eval(this.FillTextureEffectPersistentAlphaRatio);
                obj.FillTextureEffectAlphaPulseAmplitude = eval(this.FillTextureEffectAlphaPulseAmplitude);
                obj.FillTextureEffectAlphaPulseFrequency = eval(this.FillTextureEffectAlphaPulseFrequency);
                obj.FillTextureEffectTextureAnimationSpeedU = eval(this.FillTextureEffectTextureAnimationSpeedU);
                obj.FillTextureEffectTextureAnimationSpeedV = eval(this.FillTextureEffectTextureAnimationSpeedV);
                obj.EdgeEffectFallOff = eval(this.EdgeEffectFallOff);
                obj.EdgeEffectColor = eval(this.EdgeEffectColor);
                obj.EdgeEffectAlphaFadeInTime = eval(this.EdgeEffectAlphaFadeInTime);
                obj.EdgeEffectFullAlphaTime = eval(this.EdgeEffectFullAlphaTime);
                obj.EdgeEffectAlphaFadeOutTime = eval(this.EdgeEffectAlphaFadeOutTime);
                obj.EdgeEffectPersistentAlphaRatio = eval(this.EdgeEffectPersistentAlphaRatio);
                obj.EdgeEffectAlphaPulseAmplitude = eval(this.EdgeEffectAlphaPulseAmplitude);
                obj.EdgeEffectAlphaPulseFrequency = eval(this.EdgeEffectAlphaPulseFrequency);
                obj.FillTextureEffectFullAlphaRatio = eval(this.FillTextureEffectFullAlphaRatio);
                obj.EdgeEffectFullAlphaRatio = eval(this.EdgeEffectFullAlphaRatio);
                obj.MembraneShaderDestBlendMode = eval(this.MembraneShaderDestBlendMode);
                obj.ParticleShaderSourceBlendMode = eval(this.ParticleShaderSourceBlendMode);
                obj.ParticleShaderBlendOperation = eval(this.ParticleShaderBlendOperation);
                obj.ParticleShaderZTestFunction = eval(this.ParticleShaderZTestFunction);
                obj.ParticleShaderDestBlendMode = eval(this.ParticleShaderDestBlendMode);
                obj.ParticleShaderParticleBirthRampUpTime = eval(this.ParticleShaderParticleBirthRampUpTime);
                obj.ParticleShaderFullParticleBirthTime = eval(this.ParticleShaderFullParticleBirthTime);
                obj.ParticleShaderParticleBirthRampDownTime = eval(this.ParticleShaderParticleBirthRampDownTime);
                obj.ParticleShaderFullParticleBirthRatio = eval(this.ParticleShaderFullParticleBirthRatio);
                obj.ParticleShaderPersistentParticleBirthRatio = eval(this.ParticleShaderPersistentParticleBirthRatio);
                obj.ParticleShaderParticleLifetime = eval(this.ParticleShaderParticleLifetime);
                obj.ParticleShaderParticleLifetimePlusMinus = eval(this.ParticleShaderParticleLifetimePlusMinus);
                obj.ParticleShaderInitialSpeedAlongNormal = eval(this.ParticleShaderInitialSpeedAlongNormal);
                obj.ParticleShaderAccelerationAlongNormal = eval(this.ParticleShaderAccelerationAlongNormal);
                obj.ParticleShaderInitialVelocity1 = eval(this.ParticleShaderInitialVelocity1);
                obj.ParticleShaderInitialVelocity2 = eval(this.ParticleShaderInitialVelocity2);
                obj.ParticleShaderInitialVelocity3 = eval(this.ParticleShaderInitialVelocity3);
                obj.ParticleShaderAcceleration1 = eval(this.ParticleShaderAcceleration1);
                obj.ParticleShaderAcceleration2 = eval(this.ParticleShaderAcceleration2);
                obj.ParticleShaderAcceleration3 = eval(this.ParticleShaderAcceleration3);
                obj.ParticleShaderScaleKey1 = eval(this.ParticleShaderScaleKey1);
                obj.ParticleShaderScaleKey2 = eval(this.ParticleShaderScaleKey2);
                obj.ParticleShaderScaleKey1Time = eval(this.ParticleShaderScaleKey1Time);
                obj.ParticleShaderScaleKey2Time = eval(this.ParticleShaderScaleKey2Time);
                obj.ColorKey1Color = eval(this.ColorKey1Color);
                obj.ColorKey2Color = eval(this.ColorKey2Color);
                obj.ColorKey3Color = eval(this.ColorKey3Color);
                obj.ColorKey1ColorAlpha = eval(this.ColorKey1ColorAlpha);
                obj.ColorKey2ColorAlpha = eval(this.ColorKey2ColorAlpha);
                obj.ColorKey3ColorAlpha = eval(this.ColorKey3ColorAlpha);
                obj.ColorKey1ColorKeyTime = eval(this.ColorKey1ColorKeyTime);
                obj.ColorKey2ColorKeyTime = eval(this.ColorKey2ColorKeyTime);
                obj.ColorKey3ColorKeyTime = eval(this.ColorKey3ColorKeyTime);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(EffectShaderData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, EffectShaderData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(EffectShaderData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MembraneShaderSourceBlendMode ?? true)
                    {
                        fg.AppendItem(MembraneShaderSourceBlendMode, "MembraneShaderSourceBlendMode");
                    }
                    if (printMask?.MembraneShaderBlendOperation ?? true)
                    {
                        fg.AppendItem(MembraneShaderBlendOperation, "MembraneShaderBlendOperation");
                    }
                    if (printMask?.MembraneShaderZTestFunction ?? true)
                    {
                        fg.AppendItem(MembraneShaderZTestFunction, "MembraneShaderZTestFunction");
                    }
                    if (printMask?.FillTextureEffectColor ?? true)
                    {
                        fg.AppendItem(FillTextureEffectColor, "FillTextureEffectColor");
                    }
                    if (printMask?.FillTextureEffectAlphaFadeInTime ?? true)
                    {
                        fg.AppendItem(FillTextureEffectAlphaFadeInTime, "FillTextureEffectAlphaFadeInTime");
                    }
                    if (printMask?.FillTextureEffectFullAlphaTime ?? true)
                    {
                        fg.AppendItem(FillTextureEffectFullAlphaTime, "FillTextureEffectFullAlphaTime");
                    }
                    if (printMask?.FillTextureEffectAlphaFadeOutTime ?? true)
                    {
                        fg.AppendItem(FillTextureEffectAlphaFadeOutTime, "FillTextureEffectAlphaFadeOutTime");
                    }
                    if (printMask?.FillTextureEffectPersistentAlphaRatio ?? true)
                    {
                        fg.AppendItem(FillTextureEffectPersistentAlphaRatio, "FillTextureEffectPersistentAlphaRatio");
                    }
                    if (printMask?.FillTextureEffectAlphaPulseAmplitude ?? true)
                    {
                        fg.AppendItem(FillTextureEffectAlphaPulseAmplitude, "FillTextureEffectAlphaPulseAmplitude");
                    }
                    if (printMask?.FillTextureEffectAlphaPulseFrequency ?? true)
                    {
                        fg.AppendItem(FillTextureEffectAlphaPulseFrequency, "FillTextureEffectAlphaPulseFrequency");
                    }
                    if (printMask?.FillTextureEffectTextureAnimationSpeedU ?? true)
                    {
                        fg.AppendItem(FillTextureEffectTextureAnimationSpeedU, "FillTextureEffectTextureAnimationSpeedU");
                    }
                    if (printMask?.FillTextureEffectTextureAnimationSpeedV ?? true)
                    {
                        fg.AppendItem(FillTextureEffectTextureAnimationSpeedV, "FillTextureEffectTextureAnimationSpeedV");
                    }
                    if (printMask?.EdgeEffectFallOff ?? true)
                    {
                        fg.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                    }
                    if (printMask?.EdgeEffectColor ?? true)
                    {
                        fg.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                    }
                    if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
                    {
                        fg.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                    }
                    if (printMask?.EdgeEffectFullAlphaTime ?? true)
                    {
                        fg.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                    }
                    if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
                    {
                        fg.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                    }
                    if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
                    {
                        fg.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                    }
                    if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
                    {
                        fg.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                    }
                    if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
                    {
                        fg.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                    }
                    if (printMask?.FillTextureEffectFullAlphaRatio ?? true)
                    {
                        fg.AppendItem(FillTextureEffectFullAlphaRatio, "FillTextureEffectFullAlphaRatio");
                    }
                    if (printMask?.EdgeEffectFullAlphaRatio ?? true)
                    {
                        fg.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                    }
                    if (printMask?.MembraneShaderDestBlendMode ?? true)
                    {
                        fg.AppendItem(MembraneShaderDestBlendMode, "MembraneShaderDestBlendMode");
                    }
                    if (printMask?.ParticleShaderSourceBlendMode ?? true)
                    {
                        fg.AppendItem(ParticleShaderSourceBlendMode, "ParticleShaderSourceBlendMode");
                    }
                    if (printMask?.ParticleShaderBlendOperation ?? true)
                    {
                        fg.AppendItem(ParticleShaderBlendOperation, "ParticleShaderBlendOperation");
                    }
                    if (printMask?.ParticleShaderZTestFunction ?? true)
                    {
                        fg.AppendItem(ParticleShaderZTestFunction, "ParticleShaderZTestFunction");
                    }
                    if (printMask?.ParticleShaderDestBlendMode ?? true)
                    {
                        fg.AppendItem(ParticleShaderDestBlendMode, "ParticleShaderDestBlendMode");
                    }
                    if (printMask?.ParticleShaderParticleBirthRampUpTime ?? true)
                    {
                        fg.AppendItem(ParticleShaderParticleBirthRampUpTime, "ParticleShaderParticleBirthRampUpTime");
                    }
                    if (printMask?.ParticleShaderFullParticleBirthTime ?? true)
                    {
                        fg.AppendItem(ParticleShaderFullParticleBirthTime, "ParticleShaderFullParticleBirthTime");
                    }
                    if (printMask?.ParticleShaderParticleBirthRampDownTime ?? true)
                    {
                        fg.AppendItem(ParticleShaderParticleBirthRampDownTime, "ParticleShaderParticleBirthRampDownTime");
                    }
                    if (printMask?.ParticleShaderFullParticleBirthRatio ?? true)
                    {
                        fg.AppendItem(ParticleShaderFullParticleBirthRatio, "ParticleShaderFullParticleBirthRatio");
                    }
                    if (printMask?.ParticleShaderPersistentParticleBirthRatio ?? true)
                    {
                        fg.AppendItem(ParticleShaderPersistentParticleBirthRatio, "ParticleShaderPersistentParticleBirthRatio");
                    }
                    if (printMask?.ParticleShaderParticleLifetime ?? true)
                    {
                        fg.AppendItem(ParticleShaderParticleLifetime, "ParticleShaderParticleLifetime");
                    }
                    if (printMask?.ParticleShaderParticleLifetimePlusMinus ?? true)
                    {
                        fg.AppendItem(ParticleShaderParticleLifetimePlusMinus, "ParticleShaderParticleLifetimePlusMinus");
                    }
                    if (printMask?.ParticleShaderInitialSpeedAlongNormal ?? true)
                    {
                        fg.AppendItem(ParticleShaderInitialSpeedAlongNormal, "ParticleShaderInitialSpeedAlongNormal");
                    }
                    if (printMask?.ParticleShaderAccelerationAlongNormal ?? true)
                    {
                        fg.AppendItem(ParticleShaderAccelerationAlongNormal, "ParticleShaderAccelerationAlongNormal");
                    }
                    if (printMask?.ParticleShaderInitialVelocity1 ?? true)
                    {
                        fg.AppendItem(ParticleShaderInitialVelocity1, "ParticleShaderInitialVelocity1");
                    }
                    if (printMask?.ParticleShaderInitialVelocity2 ?? true)
                    {
                        fg.AppendItem(ParticleShaderInitialVelocity2, "ParticleShaderInitialVelocity2");
                    }
                    if (printMask?.ParticleShaderInitialVelocity3 ?? true)
                    {
                        fg.AppendItem(ParticleShaderInitialVelocity3, "ParticleShaderInitialVelocity3");
                    }
                    if (printMask?.ParticleShaderAcceleration1 ?? true)
                    {
                        fg.AppendItem(ParticleShaderAcceleration1, "ParticleShaderAcceleration1");
                    }
                    if (printMask?.ParticleShaderAcceleration2 ?? true)
                    {
                        fg.AppendItem(ParticleShaderAcceleration2, "ParticleShaderAcceleration2");
                    }
                    if (printMask?.ParticleShaderAcceleration3 ?? true)
                    {
                        fg.AppendItem(ParticleShaderAcceleration3, "ParticleShaderAcceleration3");
                    }
                    if (printMask?.ParticleShaderScaleKey1 ?? true)
                    {
                        fg.AppendItem(ParticleShaderScaleKey1, "ParticleShaderScaleKey1");
                    }
                    if (printMask?.ParticleShaderScaleKey2 ?? true)
                    {
                        fg.AppendItem(ParticleShaderScaleKey2, "ParticleShaderScaleKey2");
                    }
                    if (printMask?.ParticleShaderScaleKey1Time ?? true)
                    {
                        fg.AppendItem(ParticleShaderScaleKey1Time, "ParticleShaderScaleKey1Time");
                    }
                    if (printMask?.ParticleShaderScaleKey2Time ?? true)
                    {
                        fg.AppendItem(ParticleShaderScaleKey2Time, "ParticleShaderScaleKey2Time");
                    }
                    if (printMask?.ColorKey1Color ?? true)
                    {
                        fg.AppendItem(ColorKey1Color, "ColorKey1Color");
                    }
                    if (printMask?.ColorKey2Color ?? true)
                    {
                        fg.AppendItem(ColorKey2Color, "ColorKey2Color");
                    }
                    if (printMask?.ColorKey3Color ?? true)
                    {
                        fg.AppendItem(ColorKey3Color, "ColorKey3Color");
                    }
                    if (printMask?.ColorKey1ColorAlpha ?? true)
                    {
                        fg.AppendItem(ColorKey1ColorAlpha, "ColorKey1ColorAlpha");
                    }
                    if (printMask?.ColorKey2ColorAlpha ?? true)
                    {
                        fg.AppendItem(ColorKey2ColorAlpha, "ColorKey2ColorAlpha");
                    }
                    if (printMask?.ColorKey3ColorAlpha ?? true)
                    {
                        fg.AppendItem(ColorKey3ColorAlpha, "ColorKey3ColorAlpha");
                    }
                    if (printMask?.ColorKey1ColorKeyTime ?? true)
                    {
                        fg.AppendItem(ColorKey1ColorKeyTime, "ColorKey1ColorKeyTime");
                    }
                    if (printMask?.ColorKey2ColorKeyTime ?? true)
                    {
                        fg.AppendItem(ColorKey2ColorKeyTime, "ColorKey2ColorKeyTime");
                    }
                    if (printMask?.ColorKey3ColorKeyTime ?? true)
                    {
                        fg.AppendItem(ColorKey3ColorKeyTime, "ColorKey3ColorKeyTime");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Flags;
            public Exception? MembraneShaderSourceBlendMode;
            public Exception? MembraneShaderBlendOperation;
            public Exception? MembraneShaderZTestFunction;
            public Exception? FillTextureEffectColor;
            public Exception? FillTextureEffectAlphaFadeInTime;
            public Exception? FillTextureEffectFullAlphaTime;
            public Exception? FillTextureEffectAlphaFadeOutTime;
            public Exception? FillTextureEffectPersistentAlphaRatio;
            public Exception? FillTextureEffectAlphaPulseAmplitude;
            public Exception? FillTextureEffectAlphaPulseFrequency;
            public Exception? FillTextureEffectTextureAnimationSpeedU;
            public Exception? FillTextureEffectTextureAnimationSpeedV;
            public Exception? EdgeEffectFallOff;
            public Exception? EdgeEffectColor;
            public Exception? EdgeEffectAlphaFadeInTime;
            public Exception? EdgeEffectFullAlphaTime;
            public Exception? EdgeEffectAlphaFadeOutTime;
            public Exception? EdgeEffectPersistentAlphaRatio;
            public Exception? EdgeEffectAlphaPulseAmplitude;
            public Exception? EdgeEffectAlphaPulseFrequency;
            public Exception? FillTextureEffectFullAlphaRatio;
            public Exception? EdgeEffectFullAlphaRatio;
            public Exception? MembraneShaderDestBlendMode;
            public Exception? ParticleShaderSourceBlendMode;
            public Exception? ParticleShaderBlendOperation;
            public Exception? ParticleShaderZTestFunction;
            public Exception? ParticleShaderDestBlendMode;
            public Exception? ParticleShaderParticleBirthRampUpTime;
            public Exception? ParticleShaderFullParticleBirthTime;
            public Exception? ParticleShaderParticleBirthRampDownTime;
            public Exception? ParticleShaderFullParticleBirthRatio;
            public Exception? ParticleShaderPersistentParticleBirthRatio;
            public Exception? ParticleShaderParticleLifetime;
            public Exception? ParticleShaderParticleLifetimePlusMinus;
            public Exception? ParticleShaderInitialSpeedAlongNormal;
            public Exception? ParticleShaderAccelerationAlongNormal;
            public Exception? ParticleShaderInitialVelocity1;
            public Exception? ParticleShaderInitialVelocity2;
            public Exception? ParticleShaderInitialVelocity3;
            public Exception? ParticleShaderAcceleration1;
            public Exception? ParticleShaderAcceleration2;
            public Exception? ParticleShaderAcceleration3;
            public Exception? ParticleShaderScaleKey1;
            public Exception? ParticleShaderScaleKey2;
            public Exception? ParticleShaderScaleKey1Time;
            public Exception? ParticleShaderScaleKey2Time;
            public Exception? ColorKey1Color;
            public Exception? ColorKey2Color;
            public Exception? ColorKey3Color;
            public Exception? ColorKey1ColorAlpha;
            public Exception? ColorKey2ColorAlpha;
            public Exception? ColorKey3ColorAlpha;
            public Exception? ColorKey1ColorKeyTime;
            public Exception? ColorKey2ColorKeyTime;
            public Exception? ColorKey3ColorKeyTime;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
                switch (enu)
                {
                    case EffectShaderData_FieldIndex.Versioning:
                        return Versioning;
                    case EffectShaderData_FieldIndex.Flags:
                        return Flags;
                    case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                        return MembraneShaderSourceBlendMode;
                    case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                        return MembraneShaderBlendOperation;
                    case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                        return MembraneShaderZTestFunction;
                    case EffectShaderData_FieldIndex.FillTextureEffectColor:
                        return FillTextureEffectColor;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                        return FillTextureEffectAlphaFadeInTime;
                    case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                        return FillTextureEffectFullAlphaTime;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                        return FillTextureEffectAlphaFadeOutTime;
                    case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                        return FillTextureEffectPersistentAlphaRatio;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                        return FillTextureEffectAlphaPulseAmplitude;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                        return FillTextureEffectAlphaPulseFrequency;
                    case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                        return FillTextureEffectTextureAnimationSpeedU;
                    case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                        return FillTextureEffectTextureAnimationSpeedV;
                    case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                        return EdgeEffectFallOff;
                    case EffectShaderData_FieldIndex.EdgeEffectColor:
                        return EdgeEffectColor;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                        return EdgeEffectAlphaFadeInTime;
                    case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                        return EdgeEffectFullAlphaTime;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        return EdgeEffectAlphaFadeOutTime;
                    case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        return EdgeEffectPersistentAlphaRatio;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        return EdgeEffectAlphaPulseAmplitude;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        return EdgeEffectAlphaPulseFrequency;
                    case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                        return FillTextureEffectFullAlphaRatio;
                    case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                        return EdgeEffectFullAlphaRatio;
                    case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                        return MembraneShaderDestBlendMode;
                    case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                        return ParticleShaderSourceBlendMode;
                    case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                        return ParticleShaderBlendOperation;
                    case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                        return ParticleShaderZTestFunction;
                    case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                        return ParticleShaderDestBlendMode;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                        return ParticleShaderParticleBirthRampUpTime;
                    case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                        return ParticleShaderFullParticleBirthTime;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                        return ParticleShaderParticleBirthRampDownTime;
                    case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                        return ParticleShaderFullParticleBirthRatio;
                    case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                        return ParticleShaderPersistentParticleBirthRatio;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                        return ParticleShaderParticleLifetime;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                        return ParticleShaderParticleLifetimePlusMinus;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                        return ParticleShaderInitialSpeedAlongNormal;
                    case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                        return ParticleShaderAccelerationAlongNormal;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                        return ParticleShaderInitialVelocity1;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                        return ParticleShaderInitialVelocity2;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                        return ParticleShaderInitialVelocity3;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                        return ParticleShaderAcceleration1;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                        return ParticleShaderAcceleration2;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                        return ParticleShaderAcceleration3;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                        return ParticleShaderScaleKey1;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                        return ParticleShaderScaleKey2;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                        return ParticleShaderScaleKey1Time;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                        return ParticleShaderScaleKey2Time;
                    case EffectShaderData_FieldIndex.ColorKey1Color:
                        return ColorKey1Color;
                    case EffectShaderData_FieldIndex.ColorKey2Color:
                        return ColorKey2Color;
                    case EffectShaderData_FieldIndex.ColorKey3Color:
                        return ColorKey3Color;
                    case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                        return ColorKey1ColorAlpha;
                    case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                        return ColorKey2ColorAlpha;
                    case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                        return ColorKey3ColorAlpha;
                    case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                        return ColorKey1ColorKeyTime;
                    case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                        return ColorKey2ColorKeyTime;
                    case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                        return ColorKey3ColorKeyTime;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
                switch (enu)
                {
                    case EffectShaderData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case EffectShaderData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                        this.MembraneShaderSourceBlendMode = ex;
                        break;
                    case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                        this.MembraneShaderBlendOperation = ex;
                        break;
                    case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                        this.MembraneShaderZTestFunction = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectColor:
                        this.FillTextureEffectColor = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                        this.FillTextureEffectAlphaFadeInTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                        this.FillTextureEffectFullAlphaTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                        this.FillTextureEffectAlphaFadeOutTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                        this.FillTextureEffectPersistentAlphaRatio = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                        this.FillTextureEffectAlphaPulseAmplitude = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                        this.FillTextureEffectAlphaPulseFrequency = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                        this.FillTextureEffectTextureAnimationSpeedU = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                        this.FillTextureEffectTextureAnimationSpeedV = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = ex;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                        this.FillTextureEffectFullAlphaRatio = ex;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = ex;
                        break;
                    case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                        this.MembraneShaderDestBlendMode = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                        this.ParticleShaderSourceBlendMode = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                        this.ParticleShaderBlendOperation = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                        this.ParticleShaderZTestFunction = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                        this.ParticleShaderDestBlendMode = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                        this.ParticleShaderParticleBirthRampUpTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                        this.ParticleShaderFullParticleBirthTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                        this.ParticleShaderParticleBirthRampDownTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                        this.ParticleShaderFullParticleBirthRatio = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                        this.ParticleShaderPersistentParticleBirthRatio = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                        this.ParticleShaderParticleLifetime = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                        this.ParticleShaderParticleLifetimePlusMinus = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                        this.ParticleShaderInitialSpeedAlongNormal = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                        this.ParticleShaderAccelerationAlongNormal = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                        this.ParticleShaderInitialVelocity1 = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                        this.ParticleShaderInitialVelocity2 = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                        this.ParticleShaderInitialVelocity3 = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                        this.ParticleShaderAcceleration1 = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                        this.ParticleShaderAcceleration2 = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                        this.ParticleShaderAcceleration3 = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                        this.ParticleShaderScaleKey1 = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                        this.ParticleShaderScaleKey2 = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                        this.ParticleShaderScaleKey1Time = ex;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                        this.ParticleShaderScaleKey2Time = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey1Color:
                        this.ColorKey1Color = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey2Color:
                        this.ColorKey2Color = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey3Color:
                        this.ColorKey3Color = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                        this.ColorKey1ColorAlpha = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                        this.ColorKey2ColorAlpha = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                        this.ColorKey3ColorAlpha = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                        this.ColorKey1ColorKeyTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                        this.ColorKey2ColorKeyTime = ex;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                        this.ColorKey3ColorKeyTime = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
                switch (enu)
                {
                    case EffectShaderData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                        this.MembraneShaderSourceBlendMode = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                        this.MembraneShaderBlendOperation = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                        this.MembraneShaderZTestFunction = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectColor:
                        this.FillTextureEffectColor = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                        this.FillTextureEffectAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                        this.FillTextureEffectFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                        this.FillTextureEffectAlphaFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                        this.FillTextureEffectPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                        this.FillTextureEffectAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                        this.FillTextureEffectAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                        this.FillTextureEffectTextureAnimationSpeedU = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                        this.FillTextureEffectTextureAnimationSpeedV = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                        this.FillTextureEffectFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                        this.MembraneShaderDestBlendMode = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                        this.ParticleShaderSourceBlendMode = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                        this.ParticleShaderBlendOperation = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                        this.ParticleShaderZTestFunction = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                        this.ParticleShaderDestBlendMode = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                        this.ParticleShaderParticleBirthRampUpTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                        this.ParticleShaderFullParticleBirthTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                        this.ParticleShaderParticleBirthRampDownTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                        this.ParticleShaderFullParticleBirthRatio = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                        this.ParticleShaderPersistentParticleBirthRatio = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                        this.ParticleShaderParticleLifetime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                        this.ParticleShaderParticleLifetimePlusMinus = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                        this.ParticleShaderInitialSpeedAlongNormal = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                        this.ParticleShaderAccelerationAlongNormal = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                        this.ParticleShaderInitialVelocity1 = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                        this.ParticleShaderInitialVelocity2 = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                        this.ParticleShaderInitialVelocity3 = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                        this.ParticleShaderAcceleration1 = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                        this.ParticleShaderAcceleration2 = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                        this.ParticleShaderAcceleration3 = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                        this.ParticleShaderScaleKey1 = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                        this.ParticleShaderScaleKey2 = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                        this.ParticleShaderScaleKey1Time = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                        this.ParticleShaderScaleKey2Time = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey1Color:
                        this.ColorKey1Color = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey2Color:
                        this.ColorKey2Color = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey3Color:
                        this.ColorKey3Color = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                        this.ColorKey1ColorAlpha = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                        this.ColorKey2ColorAlpha = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                        this.ColorKey3ColorAlpha = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                        this.ColorKey1ColorKeyTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                        this.ColorKey2ColorKeyTime = (Exception?)obj;
                        break;
                    case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                        this.ColorKey3ColorKeyTime = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Flags != null) return true;
                if (MembraneShaderSourceBlendMode != null) return true;
                if (MembraneShaderBlendOperation != null) return true;
                if (MembraneShaderZTestFunction != null) return true;
                if (FillTextureEffectColor != null) return true;
                if (FillTextureEffectAlphaFadeInTime != null) return true;
                if (FillTextureEffectFullAlphaTime != null) return true;
                if (FillTextureEffectAlphaFadeOutTime != null) return true;
                if (FillTextureEffectPersistentAlphaRatio != null) return true;
                if (FillTextureEffectAlphaPulseAmplitude != null) return true;
                if (FillTextureEffectAlphaPulseFrequency != null) return true;
                if (FillTextureEffectTextureAnimationSpeedU != null) return true;
                if (FillTextureEffectTextureAnimationSpeedV != null) return true;
                if (EdgeEffectFallOff != null) return true;
                if (EdgeEffectColor != null) return true;
                if (EdgeEffectAlphaFadeInTime != null) return true;
                if (EdgeEffectFullAlphaTime != null) return true;
                if (EdgeEffectAlphaFadeOutTime != null) return true;
                if (EdgeEffectPersistentAlphaRatio != null) return true;
                if (EdgeEffectAlphaPulseAmplitude != null) return true;
                if (EdgeEffectAlphaPulseFrequency != null) return true;
                if (FillTextureEffectFullAlphaRatio != null) return true;
                if (EdgeEffectFullAlphaRatio != null) return true;
                if (MembraneShaderDestBlendMode != null) return true;
                if (ParticleShaderSourceBlendMode != null) return true;
                if (ParticleShaderBlendOperation != null) return true;
                if (ParticleShaderZTestFunction != null) return true;
                if (ParticleShaderDestBlendMode != null) return true;
                if (ParticleShaderParticleBirthRampUpTime != null) return true;
                if (ParticleShaderFullParticleBirthTime != null) return true;
                if (ParticleShaderParticleBirthRampDownTime != null) return true;
                if (ParticleShaderFullParticleBirthRatio != null) return true;
                if (ParticleShaderPersistentParticleBirthRatio != null) return true;
                if (ParticleShaderParticleLifetime != null) return true;
                if (ParticleShaderParticleLifetimePlusMinus != null) return true;
                if (ParticleShaderInitialSpeedAlongNormal != null) return true;
                if (ParticleShaderAccelerationAlongNormal != null) return true;
                if (ParticleShaderInitialVelocity1 != null) return true;
                if (ParticleShaderInitialVelocity2 != null) return true;
                if (ParticleShaderInitialVelocity3 != null) return true;
                if (ParticleShaderAcceleration1 != null) return true;
                if (ParticleShaderAcceleration2 != null) return true;
                if (ParticleShaderAcceleration3 != null) return true;
                if (ParticleShaderScaleKey1 != null) return true;
                if (ParticleShaderScaleKey2 != null) return true;
                if (ParticleShaderScaleKey1Time != null) return true;
                if (ParticleShaderScaleKey2Time != null) return true;
                if (ColorKey1Color != null) return true;
                if (ColorKey2Color != null) return true;
                if (ColorKey3Color != null) return true;
                if (ColorKey1ColorAlpha != null) return true;
                if (ColorKey2ColorAlpha != null) return true;
                if (ColorKey3ColorAlpha != null) return true;
                if (ColorKey1ColorKeyTime != null) return true;
                if (ColorKey2ColorKeyTime != null) return true;
                if (ColorKey3ColorKeyTime != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(MembraneShaderSourceBlendMode, "MembraneShaderSourceBlendMode");
                fg.AppendItem(MembraneShaderBlendOperation, "MembraneShaderBlendOperation");
                fg.AppendItem(MembraneShaderZTestFunction, "MembraneShaderZTestFunction");
                fg.AppendItem(FillTextureEffectColor, "FillTextureEffectColor");
                fg.AppendItem(FillTextureEffectAlphaFadeInTime, "FillTextureEffectAlphaFadeInTime");
                fg.AppendItem(FillTextureEffectFullAlphaTime, "FillTextureEffectFullAlphaTime");
                fg.AppendItem(FillTextureEffectAlphaFadeOutTime, "FillTextureEffectAlphaFadeOutTime");
                fg.AppendItem(FillTextureEffectPersistentAlphaRatio, "FillTextureEffectPersistentAlphaRatio");
                fg.AppendItem(FillTextureEffectAlphaPulseAmplitude, "FillTextureEffectAlphaPulseAmplitude");
                fg.AppendItem(FillTextureEffectAlphaPulseFrequency, "FillTextureEffectAlphaPulseFrequency");
                fg.AppendItem(FillTextureEffectTextureAnimationSpeedU, "FillTextureEffectTextureAnimationSpeedU");
                fg.AppendItem(FillTextureEffectTextureAnimationSpeedV, "FillTextureEffectTextureAnimationSpeedV");
                fg.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                fg.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                fg.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                fg.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                fg.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                fg.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                fg.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                fg.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                fg.AppendItem(FillTextureEffectFullAlphaRatio, "FillTextureEffectFullAlphaRatio");
                fg.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                fg.AppendItem(MembraneShaderDestBlendMode, "MembraneShaderDestBlendMode");
                fg.AppendItem(ParticleShaderSourceBlendMode, "ParticleShaderSourceBlendMode");
                fg.AppendItem(ParticleShaderBlendOperation, "ParticleShaderBlendOperation");
                fg.AppendItem(ParticleShaderZTestFunction, "ParticleShaderZTestFunction");
                fg.AppendItem(ParticleShaderDestBlendMode, "ParticleShaderDestBlendMode");
                fg.AppendItem(ParticleShaderParticleBirthRampUpTime, "ParticleShaderParticleBirthRampUpTime");
                fg.AppendItem(ParticleShaderFullParticleBirthTime, "ParticleShaderFullParticleBirthTime");
                fg.AppendItem(ParticleShaderParticleBirthRampDownTime, "ParticleShaderParticleBirthRampDownTime");
                fg.AppendItem(ParticleShaderFullParticleBirthRatio, "ParticleShaderFullParticleBirthRatio");
                fg.AppendItem(ParticleShaderPersistentParticleBirthRatio, "ParticleShaderPersistentParticleBirthRatio");
                fg.AppendItem(ParticleShaderParticleLifetime, "ParticleShaderParticleLifetime");
                fg.AppendItem(ParticleShaderParticleLifetimePlusMinus, "ParticleShaderParticleLifetimePlusMinus");
                fg.AppendItem(ParticleShaderInitialSpeedAlongNormal, "ParticleShaderInitialSpeedAlongNormal");
                fg.AppendItem(ParticleShaderAccelerationAlongNormal, "ParticleShaderAccelerationAlongNormal");
                fg.AppendItem(ParticleShaderInitialVelocity1, "ParticleShaderInitialVelocity1");
                fg.AppendItem(ParticleShaderInitialVelocity2, "ParticleShaderInitialVelocity2");
                fg.AppendItem(ParticleShaderInitialVelocity3, "ParticleShaderInitialVelocity3");
                fg.AppendItem(ParticleShaderAcceleration1, "ParticleShaderAcceleration1");
                fg.AppendItem(ParticleShaderAcceleration2, "ParticleShaderAcceleration2");
                fg.AppendItem(ParticleShaderAcceleration3, "ParticleShaderAcceleration3");
                fg.AppendItem(ParticleShaderScaleKey1, "ParticleShaderScaleKey1");
                fg.AppendItem(ParticleShaderScaleKey2, "ParticleShaderScaleKey2");
                fg.AppendItem(ParticleShaderScaleKey1Time, "ParticleShaderScaleKey1Time");
                fg.AppendItem(ParticleShaderScaleKey2Time, "ParticleShaderScaleKey2Time");
                fg.AppendItem(ColorKey1Color, "ColorKey1Color");
                fg.AppendItem(ColorKey2Color, "ColorKey2Color");
                fg.AppendItem(ColorKey3Color, "ColorKey3Color");
                fg.AppendItem(ColorKey1ColorAlpha, "ColorKey1ColorAlpha");
                fg.AppendItem(ColorKey2ColorAlpha, "ColorKey2ColorAlpha");
                fg.AppendItem(ColorKey3ColorAlpha, "ColorKey3ColorAlpha");
                fg.AppendItem(ColorKey1ColorKeyTime, "ColorKey1ColorKeyTime");
                fg.AppendItem(ColorKey2ColorKeyTime, "ColorKey2ColorKeyTime");
                fg.AppendItem(ColorKey3ColorKeyTime, "ColorKey3ColorKeyTime");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MembraneShaderSourceBlendMode = this.MembraneShaderSourceBlendMode.Combine(rhs.MembraneShaderSourceBlendMode);
                ret.MembraneShaderBlendOperation = this.MembraneShaderBlendOperation.Combine(rhs.MembraneShaderBlendOperation);
                ret.MembraneShaderZTestFunction = this.MembraneShaderZTestFunction.Combine(rhs.MembraneShaderZTestFunction);
                ret.FillTextureEffectColor = this.FillTextureEffectColor.Combine(rhs.FillTextureEffectColor);
                ret.FillTextureEffectAlphaFadeInTime = this.FillTextureEffectAlphaFadeInTime.Combine(rhs.FillTextureEffectAlphaFadeInTime);
                ret.FillTextureEffectFullAlphaTime = this.FillTextureEffectFullAlphaTime.Combine(rhs.FillTextureEffectFullAlphaTime);
                ret.FillTextureEffectAlphaFadeOutTime = this.FillTextureEffectAlphaFadeOutTime.Combine(rhs.FillTextureEffectAlphaFadeOutTime);
                ret.FillTextureEffectPersistentAlphaRatio = this.FillTextureEffectPersistentAlphaRatio.Combine(rhs.FillTextureEffectPersistentAlphaRatio);
                ret.FillTextureEffectAlphaPulseAmplitude = this.FillTextureEffectAlphaPulseAmplitude.Combine(rhs.FillTextureEffectAlphaPulseAmplitude);
                ret.FillTextureEffectAlphaPulseFrequency = this.FillTextureEffectAlphaPulseFrequency.Combine(rhs.FillTextureEffectAlphaPulseFrequency);
                ret.FillTextureEffectTextureAnimationSpeedU = this.FillTextureEffectTextureAnimationSpeedU.Combine(rhs.FillTextureEffectTextureAnimationSpeedU);
                ret.FillTextureEffectTextureAnimationSpeedV = this.FillTextureEffectTextureAnimationSpeedV.Combine(rhs.FillTextureEffectTextureAnimationSpeedV);
                ret.EdgeEffectFallOff = this.EdgeEffectFallOff.Combine(rhs.EdgeEffectFallOff);
                ret.EdgeEffectColor = this.EdgeEffectColor.Combine(rhs.EdgeEffectColor);
                ret.EdgeEffectAlphaFadeInTime = this.EdgeEffectAlphaFadeInTime.Combine(rhs.EdgeEffectAlphaFadeInTime);
                ret.EdgeEffectFullAlphaTime = this.EdgeEffectFullAlphaTime.Combine(rhs.EdgeEffectFullAlphaTime);
                ret.EdgeEffectAlphaFadeOutTime = this.EdgeEffectAlphaFadeOutTime.Combine(rhs.EdgeEffectAlphaFadeOutTime);
                ret.EdgeEffectPersistentAlphaRatio = this.EdgeEffectPersistentAlphaRatio.Combine(rhs.EdgeEffectPersistentAlphaRatio);
                ret.EdgeEffectAlphaPulseAmplitude = this.EdgeEffectAlphaPulseAmplitude.Combine(rhs.EdgeEffectAlphaPulseAmplitude);
                ret.EdgeEffectAlphaPulseFrequency = this.EdgeEffectAlphaPulseFrequency.Combine(rhs.EdgeEffectAlphaPulseFrequency);
                ret.FillTextureEffectFullAlphaRatio = this.FillTextureEffectFullAlphaRatio.Combine(rhs.FillTextureEffectFullAlphaRatio);
                ret.EdgeEffectFullAlphaRatio = this.EdgeEffectFullAlphaRatio.Combine(rhs.EdgeEffectFullAlphaRatio);
                ret.MembraneShaderDestBlendMode = this.MembraneShaderDestBlendMode.Combine(rhs.MembraneShaderDestBlendMode);
                ret.ParticleShaderSourceBlendMode = this.ParticleShaderSourceBlendMode.Combine(rhs.ParticleShaderSourceBlendMode);
                ret.ParticleShaderBlendOperation = this.ParticleShaderBlendOperation.Combine(rhs.ParticleShaderBlendOperation);
                ret.ParticleShaderZTestFunction = this.ParticleShaderZTestFunction.Combine(rhs.ParticleShaderZTestFunction);
                ret.ParticleShaderDestBlendMode = this.ParticleShaderDestBlendMode.Combine(rhs.ParticleShaderDestBlendMode);
                ret.ParticleShaderParticleBirthRampUpTime = this.ParticleShaderParticleBirthRampUpTime.Combine(rhs.ParticleShaderParticleBirthRampUpTime);
                ret.ParticleShaderFullParticleBirthTime = this.ParticleShaderFullParticleBirthTime.Combine(rhs.ParticleShaderFullParticleBirthTime);
                ret.ParticleShaderParticleBirthRampDownTime = this.ParticleShaderParticleBirthRampDownTime.Combine(rhs.ParticleShaderParticleBirthRampDownTime);
                ret.ParticleShaderFullParticleBirthRatio = this.ParticleShaderFullParticleBirthRatio.Combine(rhs.ParticleShaderFullParticleBirthRatio);
                ret.ParticleShaderPersistentParticleBirthRatio = this.ParticleShaderPersistentParticleBirthRatio.Combine(rhs.ParticleShaderPersistentParticleBirthRatio);
                ret.ParticleShaderParticleLifetime = this.ParticleShaderParticleLifetime.Combine(rhs.ParticleShaderParticleLifetime);
                ret.ParticleShaderParticleLifetimePlusMinus = this.ParticleShaderParticleLifetimePlusMinus.Combine(rhs.ParticleShaderParticleLifetimePlusMinus);
                ret.ParticleShaderInitialSpeedAlongNormal = this.ParticleShaderInitialSpeedAlongNormal.Combine(rhs.ParticleShaderInitialSpeedAlongNormal);
                ret.ParticleShaderAccelerationAlongNormal = this.ParticleShaderAccelerationAlongNormal.Combine(rhs.ParticleShaderAccelerationAlongNormal);
                ret.ParticleShaderInitialVelocity1 = this.ParticleShaderInitialVelocity1.Combine(rhs.ParticleShaderInitialVelocity1);
                ret.ParticleShaderInitialVelocity2 = this.ParticleShaderInitialVelocity2.Combine(rhs.ParticleShaderInitialVelocity2);
                ret.ParticleShaderInitialVelocity3 = this.ParticleShaderInitialVelocity3.Combine(rhs.ParticleShaderInitialVelocity3);
                ret.ParticleShaderAcceleration1 = this.ParticleShaderAcceleration1.Combine(rhs.ParticleShaderAcceleration1);
                ret.ParticleShaderAcceleration2 = this.ParticleShaderAcceleration2.Combine(rhs.ParticleShaderAcceleration2);
                ret.ParticleShaderAcceleration3 = this.ParticleShaderAcceleration3.Combine(rhs.ParticleShaderAcceleration3);
                ret.ParticleShaderScaleKey1 = this.ParticleShaderScaleKey1.Combine(rhs.ParticleShaderScaleKey1);
                ret.ParticleShaderScaleKey2 = this.ParticleShaderScaleKey2.Combine(rhs.ParticleShaderScaleKey2);
                ret.ParticleShaderScaleKey1Time = this.ParticleShaderScaleKey1Time.Combine(rhs.ParticleShaderScaleKey1Time);
                ret.ParticleShaderScaleKey2Time = this.ParticleShaderScaleKey2Time.Combine(rhs.ParticleShaderScaleKey2Time);
                ret.ColorKey1Color = this.ColorKey1Color.Combine(rhs.ColorKey1Color);
                ret.ColorKey2Color = this.ColorKey2Color.Combine(rhs.ColorKey2Color);
                ret.ColorKey3Color = this.ColorKey3Color.Combine(rhs.ColorKey3Color);
                ret.ColorKey1ColorAlpha = this.ColorKey1ColorAlpha.Combine(rhs.ColorKey1ColorAlpha);
                ret.ColorKey2ColorAlpha = this.ColorKey2ColorAlpha.Combine(rhs.ColorKey2ColorAlpha);
                ret.ColorKey3ColorAlpha = this.ColorKey3ColorAlpha.Combine(rhs.ColorKey3ColorAlpha);
                ret.ColorKey1ColorKeyTime = this.ColorKey1ColorKeyTime.Combine(rhs.ColorKey1ColorKeyTime);
                ret.ColorKey2ColorKeyTime = this.ColorKey2ColorKeyTime.Combine(rhs.ColorKey2ColorKeyTime);
                ret.ColorKey3ColorKeyTime = this.ColorKey3ColorKeyTime.Combine(rhs.ColorKey3ColorKeyTime);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool Flags;
            public bool MembraneShaderSourceBlendMode;
            public bool MembraneShaderBlendOperation;
            public bool MembraneShaderZTestFunction;
            public bool FillTextureEffectColor;
            public bool FillTextureEffectAlphaFadeInTime;
            public bool FillTextureEffectFullAlphaTime;
            public bool FillTextureEffectAlphaFadeOutTime;
            public bool FillTextureEffectPersistentAlphaRatio;
            public bool FillTextureEffectAlphaPulseAmplitude;
            public bool FillTextureEffectAlphaPulseFrequency;
            public bool FillTextureEffectTextureAnimationSpeedU;
            public bool FillTextureEffectTextureAnimationSpeedV;
            public bool EdgeEffectFallOff;
            public bool EdgeEffectColor;
            public bool EdgeEffectAlphaFadeInTime;
            public bool EdgeEffectFullAlphaTime;
            public bool EdgeEffectAlphaFadeOutTime;
            public bool EdgeEffectPersistentAlphaRatio;
            public bool EdgeEffectAlphaPulseAmplitude;
            public bool EdgeEffectAlphaPulseFrequency;
            public bool FillTextureEffectFullAlphaRatio;
            public bool EdgeEffectFullAlphaRatio;
            public bool MembraneShaderDestBlendMode;
            public bool ParticleShaderSourceBlendMode;
            public bool ParticleShaderBlendOperation;
            public bool ParticleShaderZTestFunction;
            public bool ParticleShaderDestBlendMode;
            public bool ParticleShaderParticleBirthRampUpTime;
            public bool ParticleShaderFullParticleBirthTime;
            public bool ParticleShaderParticleBirthRampDownTime;
            public bool ParticleShaderFullParticleBirthRatio;
            public bool ParticleShaderPersistentParticleBirthRatio;
            public bool ParticleShaderParticleLifetime;
            public bool ParticleShaderParticleLifetimePlusMinus;
            public bool ParticleShaderInitialSpeedAlongNormal;
            public bool ParticleShaderAccelerationAlongNormal;
            public bool ParticleShaderInitialVelocity1;
            public bool ParticleShaderInitialVelocity2;
            public bool ParticleShaderInitialVelocity3;
            public bool ParticleShaderAcceleration1;
            public bool ParticleShaderAcceleration2;
            public bool ParticleShaderAcceleration3;
            public bool ParticleShaderScaleKey1;
            public bool ParticleShaderScaleKey2;
            public bool ParticleShaderScaleKey1Time;
            public bool ParticleShaderScaleKey2Time;
            public bool ColorKey1Color;
            public bool ColorKey2Color;
            public bool ColorKey3Color;
            public bool ColorKey1ColorAlpha;
            public bool ColorKey2ColorAlpha;
            public bool ColorKey3ColorAlpha;
            public bool ColorKey1ColorKeyTime;
            public bool ColorKey2ColorKeyTime;
            public bool ColorKey3ColorKeyTime;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.Flags = defaultOn;
                this.MembraneShaderSourceBlendMode = defaultOn;
                this.MembraneShaderBlendOperation = defaultOn;
                this.MembraneShaderZTestFunction = defaultOn;
                this.FillTextureEffectColor = defaultOn;
                this.FillTextureEffectAlphaFadeInTime = defaultOn;
                this.FillTextureEffectFullAlphaTime = defaultOn;
                this.FillTextureEffectAlphaFadeOutTime = defaultOn;
                this.FillTextureEffectPersistentAlphaRatio = defaultOn;
                this.FillTextureEffectAlphaPulseAmplitude = defaultOn;
                this.FillTextureEffectAlphaPulseFrequency = defaultOn;
                this.FillTextureEffectTextureAnimationSpeedU = defaultOn;
                this.FillTextureEffectTextureAnimationSpeedV = defaultOn;
                this.EdgeEffectFallOff = defaultOn;
                this.EdgeEffectColor = defaultOn;
                this.EdgeEffectAlphaFadeInTime = defaultOn;
                this.EdgeEffectFullAlphaTime = defaultOn;
                this.EdgeEffectAlphaFadeOutTime = defaultOn;
                this.EdgeEffectPersistentAlphaRatio = defaultOn;
                this.EdgeEffectAlphaPulseAmplitude = defaultOn;
                this.EdgeEffectAlphaPulseFrequency = defaultOn;
                this.FillTextureEffectFullAlphaRatio = defaultOn;
                this.EdgeEffectFullAlphaRatio = defaultOn;
                this.MembraneShaderDestBlendMode = defaultOn;
                this.ParticleShaderSourceBlendMode = defaultOn;
                this.ParticleShaderBlendOperation = defaultOn;
                this.ParticleShaderZTestFunction = defaultOn;
                this.ParticleShaderDestBlendMode = defaultOn;
                this.ParticleShaderParticleBirthRampUpTime = defaultOn;
                this.ParticleShaderFullParticleBirthTime = defaultOn;
                this.ParticleShaderParticleBirthRampDownTime = defaultOn;
                this.ParticleShaderFullParticleBirthRatio = defaultOn;
                this.ParticleShaderPersistentParticleBirthRatio = defaultOn;
                this.ParticleShaderParticleLifetime = defaultOn;
                this.ParticleShaderParticleLifetimePlusMinus = defaultOn;
                this.ParticleShaderInitialSpeedAlongNormal = defaultOn;
                this.ParticleShaderAccelerationAlongNormal = defaultOn;
                this.ParticleShaderInitialVelocity1 = defaultOn;
                this.ParticleShaderInitialVelocity2 = defaultOn;
                this.ParticleShaderInitialVelocity3 = defaultOn;
                this.ParticleShaderAcceleration1 = defaultOn;
                this.ParticleShaderAcceleration2 = defaultOn;
                this.ParticleShaderAcceleration3 = defaultOn;
                this.ParticleShaderScaleKey1 = defaultOn;
                this.ParticleShaderScaleKey2 = defaultOn;
                this.ParticleShaderScaleKey1Time = defaultOn;
                this.ParticleShaderScaleKey2Time = defaultOn;
                this.ColorKey1Color = defaultOn;
                this.ColorKey2Color = defaultOn;
                this.ColorKey3Color = defaultOn;
                this.ColorKey1ColorAlpha = defaultOn;
                this.ColorKey2ColorAlpha = defaultOn;
                this.ColorKey3ColorAlpha = defaultOn;
                this.ColorKey1ColorKeyTime = defaultOn;
                this.ColorKey2ColorKeyTime = defaultOn;
                this.ColorKey3ColorKeyTime = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Flags, null));
                ret.Add((MembraneShaderSourceBlendMode, null));
                ret.Add((MembraneShaderBlendOperation, null));
                ret.Add((MembraneShaderZTestFunction, null));
                ret.Add((FillTextureEffectColor, null));
                ret.Add((FillTextureEffectAlphaFadeInTime, null));
                ret.Add((FillTextureEffectFullAlphaTime, null));
                ret.Add((FillTextureEffectAlphaFadeOutTime, null));
                ret.Add((FillTextureEffectPersistentAlphaRatio, null));
                ret.Add((FillTextureEffectAlphaPulseAmplitude, null));
                ret.Add((FillTextureEffectAlphaPulseFrequency, null));
                ret.Add((FillTextureEffectTextureAnimationSpeedU, null));
                ret.Add((FillTextureEffectTextureAnimationSpeedV, null));
                ret.Add((EdgeEffectFallOff, null));
                ret.Add((EdgeEffectColor, null));
                ret.Add((EdgeEffectAlphaFadeInTime, null));
                ret.Add((EdgeEffectFullAlphaTime, null));
                ret.Add((EdgeEffectAlphaFadeOutTime, null));
                ret.Add((EdgeEffectPersistentAlphaRatio, null));
                ret.Add((EdgeEffectAlphaPulseAmplitude, null));
                ret.Add((EdgeEffectAlphaPulseFrequency, null));
                ret.Add((FillTextureEffectFullAlphaRatio, null));
                ret.Add((EdgeEffectFullAlphaRatio, null));
                ret.Add((MembraneShaderDestBlendMode, null));
                ret.Add((ParticleShaderSourceBlendMode, null));
                ret.Add((ParticleShaderBlendOperation, null));
                ret.Add((ParticleShaderZTestFunction, null));
                ret.Add((ParticleShaderDestBlendMode, null));
                ret.Add((ParticleShaderParticleBirthRampUpTime, null));
                ret.Add((ParticleShaderFullParticleBirthTime, null));
                ret.Add((ParticleShaderParticleBirthRampDownTime, null));
                ret.Add((ParticleShaderFullParticleBirthRatio, null));
                ret.Add((ParticleShaderPersistentParticleBirthRatio, null));
                ret.Add((ParticleShaderParticleLifetime, null));
                ret.Add((ParticleShaderParticleLifetimePlusMinus, null));
                ret.Add((ParticleShaderInitialSpeedAlongNormal, null));
                ret.Add((ParticleShaderAccelerationAlongNormal, null));
                ret.Add((ParticleShaderInitialVelocity1, null));
                ret.Add((ParticleShaderInitialVelocity2, null));
                ret.Add((ParticleShaderInitialVelocity3, null));
                ret.Add((ParticleShaderAcceleration1, null));
                ret.Add((ParticleShaderAcceleration2, null));
                ret.Add((ParticleShaderAcceleration3, null));
                ret.Add((ParticleShaderScaleKey1, null));
                ret.Add((ParticleShaderScaleKey2, null));
                ret.Add((ParticleShaderScaleKey1Time, null));
                ret.Add((ParticleShaderScaleKey2Time, null));
                ret.Add((ColorKey1Color, null));
                ret.Add((ColorKey2Color, null));
                ret.Add((ColorKey3Color, null));
                ret.Add((ColorKey1ColorAlpha, null));
                ret.Add((ColorKey2ColorAlpha, null));
                ret.Add((ColorKey3ColorAlpha, null));
                ret.Add((ColorKey1ColorKeyTime, null));
                ret.Add((ColorKey2ColorKeyTime, null));
                ret.Add((ColorKey3ColorKeyTime, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = EffectShaderData_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EffectShaderDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectShaderDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static EffectShaderData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static EffectShaderData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new EffectShaderData();
            ((EffectShaderDataSetterCommon)((IEffectShaderDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out EffectShaderData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEffectShaderDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((EffectShaderDataSetterCommon)((IEffectShaderDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static EffectShaderData GetNew()
        {
            return new EffectShaderData();
        }

    }
    #endregion

    #region Interface
    public partial interface IEffectShaderData :
        IEffectShaderDataGetter,
        ILoquiObjectSetter<IEffectShaderData>
    {
        new EffectShaderData.VersioningBreaks Versioning { get; set; }
        new EffectShader.Flag Flags { get; set; }
        new EffectShader.SourceBlendMode MembraneShaderSourceBlendMode { get; set; }
        new EffectShader.BlendOperation MembraneShaderBlendOperation { get; set; }
        new EffectShader.ZTestFunction MembraneShaderZTestFunction { get; set; }
        new Color FillTextureEffectColor { get; set; }
        new Single FillTextureEffectAlphaFadeInTime { get; set; }
        new Single FillTextureEffectFullAlphaTime { get; set; }
        new Single FillTextureEffectAlphaFadeOutTime { get; set; }
        new Single FillTextureEffectPersistentAlphaRatio { get; set; }
        new Single FillTextureEffectAlphaPulseAmplitude { get; set; }
        new Single FillTextureEffectAlphaPulseFrequency { get; set; }
        new Single FillTextureEffectTextureAnimationSpeedU { get; set; }
        new Single FillTextureEffectTextureAnimationSpeedV { get; set; }
        new Single EdgeEffectFallOff { get; set; }
        new Color EdgeEffectColor { get; set; }
        new Single EdgeEffectAlphaFadeInTime { get; set; }
        new Single EdgeEffectFullAlphaTime { get; set; }
        new Single EdgeEffectAlphaFadeOutTime { get; set; }
        new Single EdgeEffectPersistentAlphaRatio { get; set; }
        new Single EdgeEffectAlphaPulseAmplitude { get; set; }
        new Single EdgeEffectAlphaPulseFrequency { get; set; }
        new Single FillTextureEffectFullAlphaRatio { get; set; }
        new Single EdgeEffectFullAlphaRatio { get; set; }
        new EffectShader.SourceBlendMode MembraneShaderDestBlendMode { get; set; }
        new EffectShader.SourceBlendMode ParticleShaderSourceBlendMode { get; set; }
        new EffectShader.BlendOperation ParticleShaderBlendOperation { get; set; }
        new EffectShader.ZTestFunction ParticleShaderZTestFunction { get; set; }
        new EffectShader.SourceBlendMode ParticleShaderDestBlendMode { get; set; }
        new Single ParticleShaderParticleBirthRampUpTime { get; set; }
        new Single ParticleShaderFullParticleBirthTime { get; set; }
        new Single ParticleShaderParticleBirthRampDownTime { get; set; }
        new Single ParticleShaderFullParticleBirthRatio { get; set; }
        new Single ParticleShaderPersistentParticleBirthRatio { get; set; }
        new Single ParticleShaderParticleLifetime { get; set; }
        new Single ParticleShaderParticleLifetimePlusMinus { get; set; }
        new Single ParticleShaderInitialSpeedAlongNormal { get; set; }
        new Single ParticleShaderAccelerationAlongNormal { get; set; }
        new Single ParticleShaderInitialVelocity1 { get; set; }
        new Single ParticleShaderInitialVelocity2 { get; set; }
        new Single ParticleShaderInitialVelocity3 { get; set; }
        new Single ParticleShaderAcceleration1 { get; set; }
        new Single ParticleShaderAcceleration2 { get; set; }
        new Single ParticleShaderAcceleration3 { get; set; }
        new Single ParticleShaderScaleKey1 { get; set; }
        new Single ParticleShaderScaleKey2 { get; set; }
        new Single ParticleShaderScaleKey1Time { get; set; }
        new Single ParticleShaderScaleKey2Time { get; set; }
        new Color ColorKey1Color { get; set; }
        new Color ColorKey2Color { get; set; }
        new Color ColorKey3Color { get; set; }
        new Single ColorKey1ColorAlpha { get; set; }
        new Single ColorKey2ColorAlpha { get; set; }
        new Single ColorKey3ColorAlpha { get; set; }
        new Single ColorKey1ColorKeyTime { get; set; }
        new Single ColorKey2ColorKeyTime { get; set; }
        new Single ColorKey3ColorKeyTime { get; set; }
    }

    public partial interface IEffectShaderDataGetter :
        ILoquiObject,
        ILoquiObject<IEffectShaderDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => EffectShaderData_Registration.Instance;
        EffectShaderData.VersioningBreaks Versioning { get; }
        EffectShader.Flag Flags { get; }
        EffectShader.SourceBlendMode MembraneShaderSourceBlendMode { get; }
        EffectShader.BlendOperation MembraneShaderBlendOperation { get; }
        EffectShader.ZTestFunction MembraneShaderZTestFunction { get; }
        Color FillTextureEffectColor { get; }
        Single FillTextureEffectAlphaFadeInTime { get; }
        Single FillTextureEffectFullAlphaTime { get; }
        Single FillTextureEffectAlphaFadeOutTime { get; }
        Single FillTextureEffectPersistentAlphaRatio { get; }
        Single FillTextureEffectAlphaPulseAmplitude { get; }
        Single FillTextureEffectAlphaPulseFrequency { get; }
        Single FillTextureEffectTextureAnimationSpeedU { get; }
        Single FillTextureEffectTextureAnimationSpeedV { get; }
        Single EdgeEffectFallOff { get; }
        Color EdgeEffectColor { get; }
        Single EdgeEffectAlphaFadeInTime { get; }
        Single EdgeEffectFullAlphaTime { get; }
        Single EdgeEffectAlphaFadeOutTime { get; }
        Single EdgeEffectPersistentAlphaRatio { get; }
        Single EdgeEffectAlphaPulseAmplitude { get; }
        Single EdgeEffectAlphaPulseFrequency { get; }
        Single FillTextureEffectFullAlphaRatio { get; }
        Single EdgeEffectFullAlphaRatio { get; }
        EffectShader.SourceBlendMode MembraneShaderDestBlendMode { get; }
        EffectShader.SourceBlendMode ParticleShaderSourceBlendMode { get; }
        EffectShader.BlendOperation ParticleShaderBlendOperation { get; }
        EffectShader.ZTestFunction ParticleShaderZTestFunction { get; }
        EffectShader.SourceBlendMode ParticleShaderDestBlendMode { get; }
        Single ParticleShaderParticleBirthRampUpTime { get; }
        Single ParticleShaderFullParticleBirthTime { get; }
        Single ParticleShaderParticleBirthRampDownTime { get; }
        Single ParticleShaderFullParticleBirthRatio { get; }
        Single ParticleShaderPersistentParticleBirthRatio { get; }
        Single ParticleShaderParticleLifetime { get; }
        Single ParticleShaderParticleLifetimePlusMinus { get; }
        Single ParticleShaderInitialSpeedAlongNormal { get; }
        Single ParticleShaderAccelerationAlongNormal { get; }
        Single ParticleShaderInitialVelocity1 { get; }
        Single ParticleShaderInitialVelocity2 { get; }
        Single ParticleShaderInitialVelocity3 { get; }
        Single ParticleShaderAcceleration1 { get; }
        Single ParticleShaderAcceleration2 { get; }
        Single ParticleShaderAcceleration3 { get; }
        Single ParticleShaderScaleKey1 { get; }
        Single ParticleShaderScaleKey2 { get; }
        Single ParticleShaderScaleKey1Time { get; }
        Single ParticleShaderScaleKey2Time { get; }
        Color ColorKey1Color { get; }
        Color ColorKey2Color { get; }
        Color ColorKey3Color { get; }
        Single ColorKey1ColorAlpha { get; }
        Single ColorKey2ColorAlpha { get; }
        Single ColorKey3ColorAlpha { get; }
        Single ColorKey1ColorKeyTime { get; }
        Single ColorKey2ColorKeyTime { get; }
        Single ColorKey3ColorKeyTime { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class EffectShaderDataMixIn
    {
        public static void Clear(this IEffectShaderData item)
        {
            ((EffectShaderDataSetterCommon)((IEffectShaderDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static EffectShaderData.Mask<bool> GetEqualsMask(
            this IEffectShaderDataGetter item,
            IEffectShaderDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IEffectShaderDataGetter item,
            string? name = null,
            EffectShaderData.Mask<bool>? printMask = null)
        {
            return ((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IEffectShaderDataGetter item,
            FileGeneration fg,
            string? name = null,
            EffectShaderData.Mask<bool>? printMask = null)
        {
            ((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IEffectShaderDataGetter item,
            EffectShaderData.Mask<bool?> checkMask)
        {
            return ((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static EffectShaderData.Mask<bool> GetHasBeenSetMask(this IEffectShaderDataGetter item)
        {
            var ret = new EffectShaderData.Mask<bool>(false);
            ((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IEffectShaderDataGetter item,
            IEffectShaderDataGetter rhs)
        {
            return ((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IEffectShaderData lhs,
            IEffectShaderDataGetter rhs)
        {
            ((EffectShaderDataSetterTranslationCommon)((IEffectShaderDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IEffectShaderData lhs,
            IEffectShaderDataGetter rhs,
            EffectShaderData.TranslationMask? copyMask = null)
        {
            ((EffectShaderDataSetterTranslationCommon)((IEffectShaderDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IEffectShaderData lhs,
            IEffectShaderDataGetter rhs,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectShaderDataSetterTranslationCommon)((IEffectShaderDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = EffectShaderData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEffectShaderData lhs,
            IEffectShaderDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EffectShaderDataSetterTranslationCommon)((IEffectShaderDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static EffectShaderData DeepCopy(
            this IEffectShaderDataGetter item,
            EffectShaderData.TranslationMask? copyMask = null)
        {
            return ((EffectShaderDataSetterTranslationCommon)((IEffectShaderDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static EffectShaderData DeepCopy(
            this IEffectShaderDataGetter item,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? copyMask = null)
        {
            return ((EffectShaderDataSetterTranslationCommon)((IEffectShaderDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static EffectShaderData DeepCopy(
            this IEffectShaderDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EffectShaderDataSetterTranslationCommon)((IEffectShaderDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEffectShaderData item,
            XElement node,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEffectShaderData item,
            XElement node,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShaderData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IEffectShaderData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((EffectShaderDataSetterCommon)((IEffectShaderDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderData item,
            string path,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderData item,
            string path,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderData item,
            string path,
            ErrorMaskBuilder? errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IEffectShaderData item,
            Stream stream,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderData item,
            Stream stream,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IEffectShaderData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IEffectShaderData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectShaderDataSetterCommon)((IEffectShaderDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum EffectShaderData_FieldIndex
    {
        Versioning = 0,
        Flags = 1,
        MembraneShaderSourceBlendMode = 2,
        MembraneShaderBlendOperation = 3,
        MembraneShaderZTestFunction = 4,
        FillTextureEffectColor = 5,
        FillTextureEffectAlphaFadeInTime = 6,
        FillTextureEffectFullAlphaTime = 7,
        FillTextureEffectAlphaFadeOutTime = 8,
        FillTextureEffectPersistentAlphaRatio = 9,
        FillTextureEffectAlphaPulseAmplitude = 10,
        FillTextureEffectAlphaPulseFrequency = 11,
        FillTextureEffectTextureAnimationSpeedU = 12,
        FillTextureEffectTextureAnimationSpeedV = 13,
        EdgeEffectFallOff = 14,
        EdgeEffectColor = 15,
        EdgeEffectAlphaFadeInTime = 16,
        EdgeEffectFullAlphaTime = 17,
        EdgeEffectAlphaFadeOutTime = 18,
        EdgeEffectPersistentAlphaRatio = 19,
        EdgeEffectAlphaPulseAmplitude = 20,
        EdgeEffectAlphaPulseFrequency = 21,
        FillTextureEffectFullAlphaRatio = 22,
        EdgeEffectFullAlphaRatio = 23,
        MembraneShaderDestBlendMode = 24,
        ParticleShaderSourceBlendMode = 25,
        ParticleShaderBlendOperation = 26,
        ParticleShaderZTestFunction = 27,
        ParticleShaderDestBlendMode = 28,
        ParticleShaderParticleBirthRampUpTime = 29,
        ParticleShaderFullParticleBirthTime = 30,
        ParticleShaderParticleBirthRampDownTime = 31,
        ParticleShaderFullParticleBirthRatio = 32,
        ParticleShaderPersistentParticleBirthRatio = 33,
        ParticleShaderParticleLifetime = 34,
        ParticleShaderParticleLifetimePlusMinus = 35,
        ParticleShaderInitialSpeedAlongNormal = 36,
        ParticleShaderAccelerationAlongNormal = 37,
        ParticleShaderInitialVelocity1 = 38,
        ParticleShaderInitialVelocity2 = 39,
        ParticleShaderInitialVelocity3 = 40,
        ParticleShaderAcceleration1 = 41,
        ParticleShaderAcceleration2 = 42,
        ParticleShaderAcceleration3 = 43,
        ParticleShaderScaleKey1 = 44,
        ParticleShaderScaleKey2 = 45,
        ParticleShaderScaleKey1Time = 46,
        ParticleShaderScaleKey2Time = 47,
        ColorKey1Color = 48,
        ColorKey2Color = 49,
        ColorKey3Color = 50,
        ColorKey1ColorAlpha = 51,
        ColorKey2ColorAlpha = 52,
        ColorKey3ColorAlpha = 53,
        ColorKey1ColorKeyTime = 54,
        ColorKey2ColorKeyTime = 55,
        ColorKey3ColorKeyTime = 56,
    }
    #endregion

    #region Registration
    public partial class EffectShaderData_Registration : ILoquiRegistration
    {
        public static readonly EffectShaderData_Registration Instance = new EffectShaderData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 188,
            version: 0);

        public const string GUID = "b9b0e800-594c-4327-9bde-47e9f6d99eb7";

        public const ushort AdditionalFieldCount = 57;

        public const ushort FieldCount = 57;

        public static readonly Type MaskType = typeof(EffectShaderData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(EffectShaderData.ErrorMask);

        public static readonly Type ClassType = typeof(EffectShaderData);

        public static readonly Type GetterType = typeof(IEffectShaderDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEffectShaderData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.EffectShaderData";

        public const string Name = "EffectShaderData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)EffectShaderData_FieldIndex.Versioning;
                case "FLAGS":
                    return (ushort)EffectShaderData_FieldIndex.Flags;
                case "MEMBRANESHADERSOURCEBLENDMODE":
                    return (ushort)EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode;
                case "MEMBRANESHADERBLENDOPERATION":
                    return (ushort)EffectShaderData_FieldIndex.MembraneShaderBlendOperation;
                case "MEMBRANESHADERZTESTFUNCTION":
                    return (ushort)EffectShaderData_FieldIndex.MembraneShaderZTestFunction;
                case "FILLTEXTUREEFFECTCOLOR":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectColor;
                case "FILLTEXTUREEFFECTALPHAFADEINTIME":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime;
                case "FILLTEXTUREEFFECTFULLALPHATIME":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime;
                case "FILLTEXTUREEFFECTALPHAFADEOUTTIME":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime;
                case "FILLTEXTUREEFFECTPERSISTENTALPHARATIO":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio;
                case "FILLTEXTUREEFFECTALPHAPULSEAMPLITUDE":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude;
                case "FILLTEXTUREEFFECTALPHAPULSEFREQUENCY":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency;
                case "FILLTEXTUREEFFECTTEXTUREANIMATIONSPEEDU":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU;
                case "FILLTEXTUREEFFECTTEXTUREANIMATIONSPEEDV":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV;
                case "EDGEEFFECTFALLOFF":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectFallOff;
                case "EDGEEFFECTCOLOR":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectColor;
                case "EDGEEFFECTALPHAFADEINTIME":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime;
                case "EDGEEFFECTFULLALPHATIME":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime;
                case "EDGEEFFECTALPHAFADEOUTTIME":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime;
                case "EDGEEFFECTPERSISTENTALPHARATIO":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio;
                case "EDGEEFFECTALPHAPULSEAMPLITUDE":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude;
                case "EDGEEFFECTALPHAPULSEFREQUENCY":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency;
                case "FILLTEXTUREEFFECTFULLALPHARATIO":
                    return (ushort)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio;
                case "EDGEEFFECTFULLALPHARATIO":
                    return (ushort)EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio;
                case "MEMBRANESHADERDESTBLENDMODE":
                    return (ushort)EffectShaderData_FieldIndex.MembraneShaderDestBlendMode;
                case "PARTICLESHADERSOURCEBLENDMODE":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode;
                case "PARTICLESHADERBLENDOPERATION":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderBlendOperation;
                case "PARTICLESHADERZTESTFUNCTION":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderZTestFunction;
                case "PARTICLESHADERDESTBLENDMODE":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderDestBlendMode;
                case "PARTICLESHADERPARTICLEBIRTHRAMPUPTIME":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime;
                case "PARTICLESHADERFULLPARTICLEBIRTHTIME":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime;
                case "PARTICLESHADERPARTICLEBIRTHRAMPDOWNTIME":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime;
                case "PARTICLESHADERFULLPARTICLEBIRTHRATIO":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio;
                case "PARTICLESHADERPERSISTENTPARTICLEBIRTHRATIO":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio;
                case "PARTICLESHADERPARTICLELIFETIME":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderParticleLifetime;
                case "PARTICLESHADERPARTICLELIFETIMEPLUSMINUS":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus;
                case "PARTICLESHADERINITIALSPEEDALONGNORMAL":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal;
                case "PARTICLESHADERACCELERATIONALONGNORMAL":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal;
                case "PARTICLESHADERINITIALVELOCITY1":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1;
                case "PARTICLESHADERINITIALVELOCITY2":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2;
                case "PARTICLESHADERINITIALVELOCITY3":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3;
                case "PARTICLESHADERACCELERATION1":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderAcceleration1;
                case "PARTICLESHADERACCELERATION2":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderAcceleration2;
                case "PARTICLESHADERACCELERATION3":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderAcceleration3;
                case "PARTICLESHADERSCALEKEY1":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderScaleKey1;
                case "PARTICLESHADERSCALEKEY2":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderScaleKey2;
                case "PARTICLESHADERSCALEKEY1TIME":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time;
                case "PARTICLESHADERSCALEKEY2TIME":
                    return (ushort)EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time;
                case "COLORKEY1COLOR":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey1Color;
                case "COLORKEY2COLOR":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey2Color;
                case "COLORKEY3COLOR":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey3Color;
                case "COLORKEY1COLORALPHA":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey1ColorAlpha;
                case "COLORKEY2COLORALPHA":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey2ColorAlpha;
                case "COLORKEY3COLORALPHA":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey3ColorAlpha;
                case "COLORKEY1COLORKEYTIME":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey1ColorKeyTime;
                case "COLORKEY2COLORKEYTIME":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey2ColorKeyTime;
                case "COLORKEY3COLORKEYTIME":
                    return (ushort)EffectShaderData_FieldIndex.ColorKey3ColorKeyTime;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
            switch (enu)
            {
                case EffectShaderData_FieldIndex.Versioning:
                case EffectShaderData_FieldIndex.Flags:
                case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                case EffectShaderData_FieldIndex.FillTextureEffectColor:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                case EffectShaderData_FieldIndex.EdgeEffectColor:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShaderData_FieldIndex.ColorKey1Color:
                case EffectShaderData_FieldIndex.ColorKey2Color:
                case EffectShaderData_FieldIndex.ColorKey3Color:
                case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
            switch (enu)
            {
                case EffectShaderData_FieldIndex.Versioning:
                case EffectShaderData_FieldIndex.Flags:
                case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                case EffectShaderData_FieldIndex.FillTextureEffectColor:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                case EffectShaderData_FieldIndex.EdgeEffectColor:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShaderData_FieldIndex.ColorKey1Color:
                case EffectShaderData_FieldIndex.ColorKey2Color:
                case EffectShaderData_FieldIndex.ColorKey3Color:
                case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
            switch (enu)
            {
                case EffectShaderData_FieldIndex.Versioning:
                case EffectShaderData_FieldIndex.Flags:
                case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                case EffectShaderData_FieldIndex.FillTextureEffectColor:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                case EffectShaderData_FieldIndex.EdgeEffectColor:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShaderData_FieldIndex.ColorKey1Color:
                case EffectShaderData_FieldIndex.ColorKey2Color:
                case EffectShaderData_FieldIndex.ColorKey3Color:
                case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
            switch (enu)
            {
                case EffectShaderData_FieldIndex.Versioning:
                    return "Versioning";
                case EffectShaderData_FieldIndex.Flags:
                    return "Flags";
                case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                    return "MembraneShaderSourceBlendMode";
                case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                    return "MembraneShaderBlendOperation";
                case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                    return "MembraneShaderZTestFunction";
                case EffectShaderData_FieldIndex.FillTextureEffectColor:
                    return "FillTextureEffectColor";
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    return "FillTextureEffectAlphaFadeInTime";
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                    return "FillTextureEffectFullAlphaTime";
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    return "FillTextureEffectAlphaFadeOutTime";
                case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    return "FillTextureEffectPersistentAlphaRatio";
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    return "FillTextureEffectAlphaPulseAmplitude";
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    return "FillTextureEffectAlphaPulseFrequency";
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    return "FillTextureEffectTextureAnimationSpeedU";
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    return "FillTextureEffectTextureAnimationSpeedV";
                case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                    return "EdgeEffectFallOff";
                case EffectShaderData_FieldIndex.EdgeEffectColor:
                    return "EdgeEffectColor";
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                    return "EdgeEffectAlphaFadeInTime";
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                    return "EdgeEffectFullAlphaTime";
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    return "EdgeEffectAlphaFadeOutTime";
                case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    return "EdgeEffectPersistentAlphaRatio";
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    return "EdgeEffectAlphaPulseAmplitude";
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    return "EdgeEffectAlphaPulseFrequency";
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                    return "FillTextureEffectFullAlphaRatio";
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                    return "EdgeEffectFullAlphaRatio";
                case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                    return "MembraneShaderDestBlendMode";
                case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                    return "ParticleShaderSourceBlendMode";
                case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                    return "ParticleShaderBlendOperation";
                case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                    return "ParticleShaderZTestFunction";
                case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                    return "ParticleShaderDestBlendMode";
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    return "ParticleShaderParticleBirthRampUpTime";
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                    return "ParticleShaderFullParticleBirthTime";
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    return "ParticleShaderParticleBirthRampDownTime";
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    return "ParticleShaderFullParticleBirthRatio";
                case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    return "ParticleShaderPersistentParticleBirthRatio";
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                    return "ParticleShaderParticleLifetime";
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    return "ParticleShaderParticleLifetimePlusMinus";
                case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    return "ParticleShaderInitialSpeedAlongNormal";
                case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    return "ParticleShaderAccelerationAlongNormal";
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                    return "ParticleShaderInitialVelocity1";
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                    return "ParticleShaderInitialVelocity2";
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                    return "ParticleShaderInitialVelocity3";
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                    return "ParticleShaderAcceleration1";
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                    return "ParticleShaderAcceleration2";
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                    return "ParticleShaderAcceleration3";
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                    return "ParticleShaderScaleKey1";
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                    return "ParticleShaderScaleKey2";
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                    return "ParticleShaderScaleKey1Time";
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                    return "ParticleShaderScaleKey2Time";
                case EffectShaderData_FieldIndex.ColorKey1Color:
                    return "ColorKey1Color";
                case EffectShaderData_FieldIndex.ColorKey2Color:
                    return "ColorKey2Color";
                case EffectShaderData_FieldIndex.ColorKey3Color:
                    return "ColorKey3Color";
                case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                    return "ColorKey1ColorAlpha";
                case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                    return "ColorKey2ColorAlpha";
                case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                    return "ColorKey3ColorAlpha";
                case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                    return "ColorKey1ColorKeyTime";
                case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                    return "ColorKey2ColorKeyTime";
                case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                    return "ColorKey3ColorKeyTime";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
            switch (enu)
            {
                case EffectShaderData_FieldIndex.Versioning:
                case EffectShaderData_FieldIndex.Flags:
                case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                case EffectShaderData_FieldIndex.FillTextureEffectColor:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                case EffectShaderData_FieldIndex.EdgeEffectColor:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShaderData_FieldIndex.ColorKey1Color:
                case EffectShaderData_FieldIndex.ColorKey2Color:
                case EffectShaderData_FieldIndex.ColorKey3Color:
                case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
            switch (enu)
            {
                case EffectShaderData_FieldIndex.Versioning:
                case EffectShaderData_FieldIndex.Flags:
                case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                case EffectShaderData_FieldIndex.FillTextureEffectColor:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                case EffectShaderData_FieldIndex.EdgeEffectColor:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShaderData_FieldIndex.ColorKey1Color:
                case EffectShaderData_FieldIndex.ColorKey2Color:
                case EffectShaderData_FieldIndex.ColorKey3Color:
                case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            EffectShaderData_FieldIndex enu = (EffectShaderData_FieldIndex)index;
            switch (enu)
            {
                case EffectShaderData_FieldIndex.Versioning:
                    return typeof(EffectShaderData.VersioningBreaks);
                case EffectShaderData_FieldIndex.Flags:
                    return typeof(EffectShader.Flag);
                case EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShaderData_FieldIndex.MembraneShaderBlendOperation:
                    return typeof(EffectShader.BlendOperation);
                case EffectShaderData_FieldIndex.MembraneShaderZTestFunction:
                    return typeof(EffectShader.ZTestFunction);
                case EffectShaderData_FieldIndex.FillTextureEffectColor:
                    return typeof(Color);
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.EdgeEffectFallOff:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.EdgeEffectColor:
                    return typeof(Color);
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.MembraneShaderDestBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShaderData_FieldIndex.ParticleShaderBlendOperation:
                    return typeof(EffectShader.BlendOperation);
                case EffectShaderData_FieldIndex.ParticleShaderZTestFunction:
                    return typeof(EffectShader.ZTestFunction);
                case EffectShaderData_FieldIndex.ParticleShaderDestBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration1:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration2:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderAcceleration3:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ColorKey1Color:
                    return typeof(Color);
                case EffectShaderData_FieldIndex.ColorKey2Color:
                    return typeof(Color);
                case EffectShaderData_FieldIndex.ColorKey3Color:
                    return typeof(Color);
                case EffectShaderData_FieldIndex.ColorKey1ColorAlpha:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ColorKey2ColorAlpha:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ColorKey3ColorAlpha:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ColorKey1ColorKeyTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ColorKey2ColorKeyTime:
                    return typeof(Single);
                case EffectShaderData_FieldIndex.ColorKey3ColorKeyTime:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(EffectShaderDataXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static readonly Type BinaryWriteTranslation = typeof(EffectShaderDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class EffectShaderDataSetterCommon
    {
        public static readonly EffectShaderDataSetterCommon Instance = new EffectShaderDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEffectShaderData item)
        {
            ClearPartial();
            item.Versioning = default;
            item.Flags = default;
            item.MembraneShaderSourceBlendMode = default;
            item.MembraneShaderBlendOperation = default;
            item.MembraneShaderZTestFunction = default;
            item.FillTextureEffectColor = default;
            item.FillTextureEffectAlphaFadeInTime = default;
            item.FillTextureEffectFullAlphaTime = default;
            item.FillTextureEffectAlphaFadeOutTime = default;
            item.FillTextureEffectPersistentAlphaRatio = default;
            item.FillTextureEffectAlphaPulseAmplitude = default;
            item.FillTextureEffectAlphaPulseFrequency = default;
            item.FillTextureEffectTextureAnimationSpeedU = default;
            item.FillTextureEffectTextureAnimationSpeedV = default;
            item.EdgeEffectFallOff = default;
            item.EdgeEffectColor = default;
            item.EdgeEffectAlphaFadeInTime = default;
            item.EdgeEffectFullAlphaTime = default;
            item.EdgeEffectAlphaFadeOutTime = default;
            item.EdgeEffectPersistentAlphaRatio = default;
            item.EdgeEffectAlphaPulseAmplitude = default;
            item.EdgeEffectAlphaPulseFrequency = default;
            item.FillTextureEffectFullAlphaRatio = default;
            item.EdgeEffectFullAlphaRatio = default;
            item.MembraneShaderDestBlendMode = default;
            item.ParticleShaderSourceBlendMode = default;
            item.ParticleShaderBlendOperation = default;
            item.ParticleShaderZTestFunction = default;
            item.ParticleShaderDestBlendMode = default;
            item.ParticleShaderParticleBirthRampUpTime = default;
            item.ParticleShaderFullParticleBirthTime = default;
            item.ParticleShaderParticleBirthRampDownTime = default;
            item.ParticleShaderFullParticleBirthRatio = default;
            item.ParticleShaderPersistentParticleBirthRatio = default;
            item.ParticleShaderParticleLifetime = default;
            item.ParticleShaderParticleLifetimePlusMinus = default;
            item.ParticleShaderInitialSpeedAlongNormal = default;
            item.ParticleShaderAccelerationAlongNormal = default;
            item.ParticleShaderInitialVelocity1 = default;
            item.ParticleShaderInitialVelocity2 = default;
            item.ParticleShaderInitialVelocity3 = default;
            item.ParticleShaderAcceleration1 = default;
            item.ParticleShaderAcceleration2 = default;
            item.ParticleShaderAcceleration3 = default;
            item.ParticleShaderScaleKey1 = default;
            item.ParticleShaderScaleKey2 = default;
            item.ParticleShaderScaleKey1Time = default;
            item.ParticleShaderScaleKey2Time = default;
            item.ColorKey1Color = default;
            item.ColorKey2Color = default;
            item.ColorKey3Color = default;
            item.ColorKey1ColorAlpha = default;
            item.ColorKey2ColorAlpha = default;
            item.ColorKey3ColorAlpha = default;
            item.ColorKey1ColorKeyTime = default;
            item.ColorKey2ColorKeyTime = default;
            item.ColorKey3ColorKeyTime = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IEffectShaderData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EffectShaderDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IEffectShaderData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.DATA)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: EffectShaderDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class EffectShaderDataCommon
    {
        public static readonly EffectShaderDataCommon Instance = new EffectShaderDataCommon();

        public EffectShaderData.Mask<bool> GetEqualsMask(
            IEffectShaderDataGetter item,
            IEffectShaderDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EffectShaderData.Mask<bool>(false);
            ((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEffectShaderDataGetter item,
            IEffectShaderDataGetter rhs,
            EffectShaderData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MembraneShaderSourceBlendMode = item.MembraneShaderSourceBlendMode == rhs.MembraneShaderSourceBlendMode;
            ret.MembraneShaderBlendOperation = item.MembraneShaderBlendOperation == rhs.MembraneShaderBlendOperation;
            ret.MembraneShaderZTestFunction = item.MembraneShaderZTestFunction == rhs.MembraneShaderZTestFunction;
            ret.FillTextureEffectColor = item.FillTextureEffectColor.ColorOnlyEquals(rhs.FillTextureEffectColor);
            ret.FillTextureEffectAlphaFadeInTime = item.FillTextureEffectAlphaFadeInTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeInTime);
            ret.FillTextureEffectFullAlphaTime = item.FillTextureEffectFullAlphaTime.EqualsWithin(rhs.FillTextureEffectFullAlphaTime);
            ret.FillTextureEffectAlphaFadeOutTime = item.FillTextureEffectAlphaFadeOutTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeOutTime);
            ret.FillTextureEffectPersistentAlphaRatio = item.FillTextureEffectPersistentAlphaRatio.EqualsWithin(rhs.FillTextureEffectPersistentAlphaRatio);
            ret.FillTextureEffectAlphaPulseAmplitude = item.FillTextureEffectAlphaPulseAmplitude.EqualsWithin(rhs.FillTextureEffectAlphaPulseAmplitude);
            ret.FillTextureEffectAlphaPulseFrequency = item.FillTextureEffectAlphaPulseFrequency.EqualsWithin(rhs.FillTextureEffectAlphaPulseFrequency);
            ret.FillTextureEffectTextureAnimationSpeedU = item.FillTextureEffectTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedU);
            ret.FillTextureEffectTextureAnimationSpeedV = item.FillTextureEffectTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedV);
            ret.EdgeEffectFallOff = item.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff);
            ret.EdgeEffectColor = item.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor);
            ret.EdgeEffectAlphaFadeInTime = item.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime);
            ret.EdgeEffectFullAlphaTime = item.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime);
            ret.EdgeEffectAlphaFadeOutTime = item.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime);
            ret.EdgeEffectPersistentAlphaRatio = item.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio);
            ret.EdgeEffectAlphaPulseAmplitude = item.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude);
            ret.EdgeEffectAlphaPulseFrequency = item.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency);
            ret.FillTextureEffectFullAlphaRatio = item.FillTextureEffectFullAlphaRatio.EqualsWithin(rhs.FillTextureEffectFullAlphaRatio);
            ret.EdgeEffectFullAlphaRatio = item.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio);
            ret.MembraneShaderDestBlendMode = item.MembraneShaderDestBlendMode == rhs.MembraneShaderDestBlendMode;
            ret.ParticleShaderSourceBlendMode = item.ParticleShaderSourceBlendMode == rhs.ParticleShaderSourceBlendMode;
            ret.ParticleShaderBlendOperation = item.ParticleShaderBlendOperation == rhs.ParticleShaderBlendOperation;
            ret.ParticleShaderZTestFunction = item.ParticleShaderZTestFunction == rhs.ParticleShaderZTestFunction;
            ret.ParticleShaderDestBlendMode = item.ParticleShaderDestBlendMode == rhs.ParticleShaderDestBlendMode;
            ret.ParticleShaderParticleBirthRampUpTime = item.ParticleShaderParticleBirthRampUpTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampUpTime);
            ret.ParticleShaderFullParticleBirthTime = item.ParticleShaderFullParticleBirthTime.EqualsWithin(rhs.ParticleShaderFullParticleBirthTime);
            ret.ParticleShaderParticleBirthRampDownTime = item.ParticleShaderParticleBirthRampDownTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampDownTime);
            ret.ParticleShaderFullParticleBirthRatio = item.ParticleShaderFullParticleBirthRatio.EqualsWithin(rhs.ParticleShaderFullParticleBirthRatio);
            ret.ParticleShaderPersistentParticleBirthRatio = item.ParticleShaderPersistentParticleBirthRatio.EqualsWithin(rhs.ParticleShaderPersistentParticleBirthRatio);
            ret.ParticleShaderParticleLifetime = item.ParticleShaderParticleLifetime.EqualsWithin(rhs.ParticleShaderParticleLifetime);
            ret.ParticleShaderParticleLifetimePlusMinus = item.ParticleShaderParticleLifetimePlusMinus.EqualsWithin(rhs.ParticleShaderParticleLifetimePlusMinus);
            ret.ParticleShaderInitialSpeedAlongNormal = item.ParticleShaderInitialSpeedAlongNormal.EqualsWithin(rhs.ParticleShaderInitialSpeedAlongNormal);
            ret.ParticleShaderAccelerationAlongNormal = item.ParticleShaderAccelerationAlongNormal.EqualsWithin(rhs.ParticleShaderAccelerationAlongNormal);
            ret.ParticleShaderInitialVelocity1 = item.ParticleShaderInitialVelocity1.EqualsWithin(rhs.ParticleShaderInitialVelocity1);
            ret.ParticleShaderInitialVelocity2 = item.ParticleShaderInitialVelocity2.EqualsWithin(rhs.ParticleShaderInitialVelocity2);
            ret.ParticleShaderInitialVelocity3 = item.ParticleShaderInitialVelocity3.EqualsWithin(rhs.ParticleShaderInitialVelocity3);
            ret.ParticleShaderAcceleration1 = item.ParticleShaderAcceleration1.EqualsWithin(rhs.ParticleShaderAcceleration1);
            ret.ParticleShaderAcceleration2 = item.ParticleShaderAcceleration2.EqualsWithin(rhs.ParticleShaderAcceleration2);
            ret.ParticleShaderAcceleration3 = item.ParticleShaderAcceleration3.EqualsWithin(rhs.ParticleShaderAcceleration3);
            ret.ParticleShaderScaleKey1 = item.ParticleShaderScaleKey1.EqualsWithin(rhs.ParticleShaderScaleKey1);
            ret.ParticleShaderScaleKey2 = item.ParticleShaderScaleKey2.EqualsWithin(rhs.ParticleShaderScaleKey2);
            ret.ParticleShaderScaleKey1Time = item.ParticleShaderScaleKey1Time.EqualsWithin(rhs.ParticleShaderScaleKey1Time);
            ret.ParticleShaderScaleKey2Time = item.ParticleShaderScaleKey2Time.EqualsWithin(rhs.ParticleShaderScaleKey2Time);
            ret.ColorKey1Color = item.ColorKey1Color.ColorOnlyEquals(rhs.ColorKey1Color);
            ret.ColorKey2Color = item.ColorKey2Color.ColorOnlyEquals(rhs.ColorKey2Color);
            ret.ColorKey3Color = item.ColorKey3Color.ColorOnlyEquals(rhs.ColorKey3Color);
            ret.ColorKey1ColorAlpha = item.ColorKey1ColorAlpha.EqualsWithin(rhs.ColorKey1ColorAlpha);
            ret.ColorKey2ColorAlpha = item.ColorKey2ColorAlpha.EqualsWithin(rhs.ColorKey2ColorAlpha);
            ret.ColorKey3ColorAlpha = item.ColorKey3ColorAlpha.EqualsWithin(rhs.ColorKey3ColorAlpha);
            ret.ColorKey1ColorKeyTime = item.ColorKey1ColorKeyTime.EqualsWithin(rhs.ColorKey1ColorKeyTime);
            ret.ColorKey2ColorKeyTime = item.ColorKey2ColorKeyTime.EqualsWithin(rhs.ColorKey2ColorKeyTime);
            ret.ColorKey3ColorKeyTime = item.ColorKey3ColorKeyTime.EqualsWithin(rhs.ColorKey3ColorKeyTime);
        }
        
        public string ToString(
            IEffectShaderDataGetter item,
            string? name = null,
            EffectShaderData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IEffectShaderDataGetter item,
            FileGeneration fg,
            string? name = null,
            EffectShaderData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"EffectShaderData =>");
            }
            else
            {
                fg.AppendLine($"{name} (EffectShaderData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IEffectShaderDataGetter item,
            FileGeneration fg,
            EffectShaderData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.MembraneShaderSourceBlendMode ?? true)
            {
                fg.AppendItem(item.MembraneShaderSourceBlendMode, "MembraneShaderSourceBlendMode");
            }
            if (printMask?.MembraneShaderBlendOperation ?? true)
            {
                fg.AppendItem(item.MembraneShaderBlendOperation, "MembraneShaderBlendOperation");
            }
            if (printMask?.MembraneShaderZTestFunction ?? true)
            {
                fg.AppendItem(item.MembraneShaderZTestFunction, "MembraneShaderZTestFunction");
            }
            if (printMask?.FillTextureEffectColor ?? true)
            {
                fg.AppendItem(item.FillTextureEffectColor, "FillTextureEffectColor");
            }
            if (printMask?.FillTextureEffectAlphaFadeInTime ?? true)
            {
                fg.AppendItem(item.FillTextureEffectAlphaFadeInTime, "FillTextureEffectAlphaFadeInTime");
            }
            if (printMask?.FillTextureEffectFullAlphaTime ?? true)
            {
                fg.AppendItem(item.FillTextureEffectFullAlphaTime, "FillTextureEffectFullAlphaTime");
            }
            if (printMask?.FillTextureEffectAlphaFadeOutTime ?? true)
            {
                fg.AppendItem(item.FillTextureEffectAlphaFadeOutTime, "FillTextureEffectAlphaFadeOutTime");
            }
            if (printMask?.FillTextureEffectPersistentAlphaRatio ?? true)
            {
                fg.AppendItem(item.FillTextureEffectPersistentAlphaRatio, "FillTextureEffectPersistentAlphaRatio");
            }
            if (printMask?.FillTextureEffectAlphaPulseAmplitude ?? true)
            {
                fg.AppendItem(item.FillTextureEffectAlphaPulseAmplitude, "FillTextureEffectAlphaPulseAmplitude");
            }
            if (printMask?.FillTextureEffectAlphaPulseFrequency ?? true)
            {
                fg.AppendItem(item.FillTextureEffectAlphaPulseFrequency, "FillTextureEffectAlphaPulseFrequency");
            }
            if (printMask?.FillTextureEffectTextureAnimationSpeedU ?? true)
            {
                fg.AppendItem(item.FillTextureEffectTextureAnimationSpeedU, "FillTextureEffectTextureAnimationSpeedU");
            }
            if (printMask?.FillTextureEffectTextureAnimationSpeedV ?? true)
            {
                fg.AppendItem(item.FillTextureEffectTextureAnimationSpeedV, "FillTextureEffectTextureAnimationSpeedV");
            }
            if (printMask?.EdgeEffectFallOff ?? true)
            {
                fg.AppendItem(item.EdgeEffectFallOff, "EdgeEffectFallOff");
            }
            if (printMask?.EdgeEffectColor ?? true)
            {
                fg.AppendItem(item.EdgeEffectColor, "EdgeEffectColor");
            }
            if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
            {
                fg.AppendItem(item.EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
            }
            if (printMask?.EdgeEffectFullAlphaTime ?? true)
            {
                fg.AppendItem(item.EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
            }
            if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
            {
                fg.AppendItem(item.EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
            }
            if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
            {
                fg.AppendItem(item.EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
            }
            if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
            {
                fg.AppendItem(item.EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
            }
            if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
            {
                fg.AppendItem(item.EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
            }
            if (printMask?.FillTextureEffectFullAlphaRatio ?? true)
            {
                fg.AppendItem(item.FillTextureEffectFullAlphaRatio, "FillTextureEffectFullAlphaRatio");
            }
            if (printMask?.EdgeEffectFullAlphaRatio ?? true)
            {
                fg.AppendItem(item.EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
            }
            if (printMask?.MembraneShaderDestBlendMode ?? true)
            {
                fg.AppendItem(item.MembraneShaderDestBlendMode, "MembraneShaderDestBlendMode");
            }
            if (printMask?.ParticleShaderSourceBlendMode ?? true)
            {
                fg.AppendItem(item.ParticleShaderSourceBlendMode, "ParticleShaderSourceBlendMode");
            }
            if (printMask?.ParticleShaderBlendOperation ?? true)
            {
                fg.AppendItem(item.ParticleShaderBlendOperation, "ParticleShaderBlendOperation");
            }
            if (printMask?.ParticleShaderZTestFunction ?? true)
            {
                fg.AppendItem(item.ParticleShaderZTestFunction, "ParticleShaderZTestFunction");
            }
            if (printMask?.ParticleShaderDestBlendMode ?? true)
            {
                fg.AppendItem(item.ParticleShaderDestBlendMode, "ParticleShaderDestBlendMode");
            }
            if (printMask?.ParticleShaderParticleBirthRampUpTime ?? true)
            {
                fg.AppendItem(item.ParticleShaderParticleBirthRampUpTime, "ParticleShaderParticleBirthRampUpTime");
            }
            if (printMask?.ParticleShaderFullParticleBirthTime ?? true)
            {
                fg.AppendItem(item.ParticleShaderFullParticleBirthTime, "ParticleShaderFullParticleBirthTime");
            }
            if (printMask?.ParticleShaderParticleBirthRampDownTime ?? true)
            {
                fg.AppendItem(item.ParticleShaderParticleBirthRampDownTime, "ParticleShaderParticleBirthRampDownTime");
            }
            if (printMask?.ParticleShaderFullParticleBirthRatio ?? true)
            {
                fg.AppendItem(item.ParticleShaderFullParticleBirthRatio, "ParticleShaderFullParticleBirthRatio");
            }
            if (printMask?.ParticleShaderPersistentParticleBirthRatio ?? true)
            {
                fg.AppendItem(item.ParticleShaderPersistentParticleBirthRatio, "ParticleShaderPersistentParticleBirthRatio");
            }
            if (printMask?.ParticleShaderParticleLifetime ?? true)
            {
                fg.AppendItem(item.ParticleShaderParticleLifetime, "ParticleShaderParticleLifetime");
            }
            if (printMask?.ParticleShaderParticleLifetimePlusMinus ?? true)
            {
                fg.AppendItem(item.ParticleShaderParticleLifetimePlusMinus, "ParticleShaderParticleLifetimePlusMinus");
            }
            if (printMask?.ParticleShaderInitialSpeedAlongNormal ?? true)
            {
                fg.AppendItem(item.ParticleShaderInitialSpeedAlongNormal, "ParticleShaderInitialSpeedAlongNormal");
            }
            if (printMask?.ParticleShaderAccelerationAlongNormal ?? true)
            {
                fg.AppendItem(item.ParticleShaderAccelerationAlongNormal, "ParticleShaderAccelerationAlongNormal");
            }
            if (printMask?.ParticleShaderInitialVelocity1 ?? true)
            {
                fg.AppendItem(item.ParticleShaderInitialVelocity1, "ParticleShaderInitialVelocity1");
            }
            if (printMask?.ParticleShaderInitialVelocity2 ?? true)
            {
                fg.AppendItem(item.ParticleShaderInitialVelocity2, "ParticleShaderInitialVelocity2");
            }
            if (printMask?.ParticleShaderInitialVelocity3 ?? true)
            {
                fg.AppendItem(item.ParticleShaderInitialVelocity3, "ParticleShaderInitialVelocity3");
            }
            if (printMask?.ParticleShaderAcceleration1 ?? true)
            {
                fg.AppendItem(item.ParticleShaderAcceleration1, "ParticleShaderAcceleration1");
            }
            if (printMask?.ParticleShaderAcceleration2 ?? true)
            {
                fg.AppendItem(item.ParticleShaderAcceleration2, "ParticleShaderAcceleration2");
            }
            if (printMask?.ParticleShaderAcceleration3 ?? true)
            {
                fg.AppendItem(item.ParticleShaderAcceleration3, "ParticleShaderAcceleration3");
            }
            if (printMask?.ParticleShaderScaleKey1 ?? true)
            {
                fg.AppendItem(item.ParticleShaderScaleKey1, "ParticleShaderScaleKey1");
            }
            if (printMask?.ParticleShaderScaleKey2 ?? true)
            {
                fg.AppendItem(item.ParticleShaderScaleKey2, "ParticleShaderScaleKey2");
            }
            if (printMask?.ParticleShaderScaleKey1Time ?? true)
            {
                fg.AppendItem(item.ParticleShaderScaleKey1Time, "ParticleShaderScaleKey1Time");
            }
            if (printMask?.ParticleShaderScaleKey2Time ?? true)
            {
                fg.AppendItem(item.ParticleShaderScaleKey2Time, "ParticleShaderScaleKey2Time");
            }
            if (printMask?.ColorKey1Color ?? true)
            {
                fg.AppendItem(item.ColorKey1Color, "ColorKey1Color");
            }
            if (printMask?.ColorKey2Color ?? true)
            {
                fg.AppendItem(item.ColorKey2Color, "ColorKey2Color");
            }
            if (printMask?.ColorKey3Color ?? true)
            {
                fg.AppendItem(item.ColorKey3Color, "ColorKey3Color");
            }
            if (printMask?.ColorKey1ColorAlpha ?? true)
            {
                fg.AppendItem(item.ColorKey1ColorAlpha, "ColorKey1ColorAlpha");
            }
            if (printMask?.ColorKey2ColorAlpha ?? true)
            {
                fg.AppendItem(item.ColorKey2ColorAlpha, "ColorKey2ColorAlpha");
            }
            if (printMask?.ColorKey3ColorAlpha ?? true)
            {
                fg.AppendItem(item.ColorKey3ColorAlpha, "ColorKey3ColorAlpha");
            }
            if (printMask?.ColorKey1ColorKeyTime ?? true)
            {
                fg.AppendItem(item.ColorKey1ColorKeyTime, "ColorKey1ColorKeyTime");
            }
            if (printMask?.ColorKey2ColorKeyTime ?? true)
            {
                fg.AppendItem(item.ColorKey2ColorKeyTime, "ColorKey2ColorKeyTime");
            }
            if (printMask?.ColorKey3ColorKeyTime ?? true)
            {
                fg.AppendItem(item.ColorKey3ColorKeyTime, "ColorKey3ColorKeyTime");
            }
        }
        
        public bool HasBeenSet(
            IEffectShaderDataGetter item,
            EffectShaderData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IEffectShaderDataGetter item,
            EffectShaderData.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.Flags = true;
            mask.MembraneShaderSourceBlendMode = true;
            mask.MembraneShaderBlendOperation = true;
            mask.MembraneShaderZTestFunction = true;
            mask.FillTextureEffectColor = true;
            mask.FillTextureEffectAlphaFadeInTime = true;
            mask.FillTextureEffectFullAlphaTime = true;
            mask.FillTextureEffectAlphaFadeOutTime = true;
            mask.FillTextureEffectPersistentAlphaRatio = true;
            mask.FillTextureEffectAlphaPulseAmplitude = true;
            mask.FillTextureEffectAlphaPulseFrequency = true;
            mask.FillTextureEffectTextureAnimationSpeedU = true;
            mask.FillTextureEffectTextureAnimationSpeedV = true;
            mask.EdgeEffectFallOff = true;
            mask.EdgeEffectColor = true;
            mask.EdgeEffectAlphaFadeInTime = true;
            mask.EdgeEffectFullAlphaTime = true;
            mask.EdgeEffectAlphaFadeOutTime = true;
            mask.EdgeEffectPersistentAlphaRatio = true;
            mask.EdgeEffectAlphaPulseAmplitude = true;
            mask.EdgeEffectAlphaPulseFrequency = true;
            mask.FillTextureEffectFullAlphaRatio = true;
            mask.EdgeEffectFullAlphaRatio = true;
            mask.MembraneShaderDestBlendMode = true;
            mask.ParticleShaderSourceBlendMode = true;
            mask.ParticleShaderBlendOperation = true;
            mask.ParticleShaderZTestFunction = true;
            mask.ParticleShaderDestBlendMode = true;
            mask.ParticleShaderParticleBirthRampUpTime = true;
            mask.ParticleShaderFullParticleBirthTime = true;
            mask.ParticleShaderParticleBirthRampDownTime = true;
            mask.ParticleShaderFullParticleBirthRatio = true;
            mask.ParticleShaderPersistentParticleBirthRatio = true;
            mask.ParticleShaderParticleLifetime = true;
            mask.ParticleShaderParticleLifetimePlusMinus = true;
            mask.ParticleShaderInitialSpeedAlongNormal = true;
            mask.ParticleShaderAccelerationAlongNormal = true;
            mask.ParticleShaderInitialVelocity1 = true;
            mask.ParticleShaderInitialVelocity2 = true;
            mask.ParticleShaderInitialVelocity3 = true;
            mask.ParticleShaderAcceleration1 = true;
            mask.ParticleShaderAcceleration2 = true;
            mask.ParticleShaderAcceleration3 = true;
            mask.ParticleShaderScaleKey1 = true;
            mask.ParticleShaderScaleKey2 = true;
            mask.ParticleShaderScaleKey1Time = true;
            mask.ParticleShaderScaleKey2Time = true;
            mask.ColorKey1Color = true;
            mask.ColorKey2Color = true;
            mask.ColorKey3Color = true;
            mask.ColorKey1ColorAlpha = true;
            mask.ColorKey2ColorAlpha = true;
            mask.ColorKey3ColorAlpha = true;
            mask.ColorKey1ColorKeyTime = true;
            mask.ColorKey2ColorKeyTime = true;
            mask.ColorKey3ColorKeyTime = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEffectShaderDataGetter? lhs,
            IEffectShaderDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.MembraneShaderSourceBlendMode != rhs.MembraneShaderSourceBlendMode) return false;
            if (lhs.MembraneShaderBlendOperation != rhs.MembraneShaderBlendOperation) return false;
            if (lhs.MembraneShaderZTestFunction != rhs.MembraneShaderZTestFunction) return false;
            if (!lhs.FillTextureEffectColor.ColorOnlyEquals(rhs.FillTextureEffectColor)) return false;
            if (!lhs.FillTextureEffectAlphaFadeInTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeInTime)) return false;
            if (!lhs.FillTextureEffectFullAlphaTime.EqualsWithin(rhs.FillTextureEffectFullAlphaTime)) return false;
            if (!lhs.FillTextureEffectAlphaFadeOutTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeOutTime)) return false;
            if (!lhs.FillTextureEffectPersistentAlphaRatio.EqualsWithin(rhs.FillTextureEffectPersistentAlphaRatio)) return false;
            if (!lhs.FillTextureEffectAlphaPulseAmplitude.EqualsWithin(rhs.FillTextureEffectAlphaPulseAmplitude)) return false;
            if (!lhs.FillTextureEffectAlphaPulseFrequency.EqualsWithin(rhs.FillTextureEffectAlphaPulseFrequency)) return false;
            if (!lhs.FillTextureEffectTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedU)) return false;
            if (!lhs.FillTextureEffectTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedV)) return false;
            if (!lhs.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff)) return false;
            if (!lhs.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor)) return false;
            if (!lhs.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime)) return false;
            if (!lhs.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime)) return false;
            if (!lhs.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime)) return false;
            if (!lhs.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio)) return false;
            if (!lhs.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude)) return false;
            if (!lhs.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency)) return false;
            if (!lhs.FillTextureEffectFullAlphaRatio.EqualsWithin(rhs.FillTextureEffectFullAlphaRatio)) return false;
            if (!lhs.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio)) return false;
            if (lhs.MembraneShaderDestBlendMode != rhs.MembraneShaderDestBlendMode) return false;
            if (lhs.ParticleShaderSourceBlendMode != rhs.ParticleShaderSourceBlendMode) return false;
            if (lhs.ParticleShaderBlendOperation != rhs.ParticleShaderBlendOperation) return false;
            if (lhs.ParticleShaderZTestFunction != rhs.ParticleShaderZTestFunction) return false;
            if (lhs.ParticleShaderDestBlendMode != rhs.ParticleShaderDestBlendMode) return false;
            if (!lhs.ParticleShaderParticleBirthRampUpTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampUpTime)) return false;
            if (!lhs.ParticleShaderFullParticleBirthTime.EqualsWithin(rhs.ParticleShaderFullParticleBirthTime)) return false;
            if (!lhs.ParticleShaderParticleBirthRampDownTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampDownTime)) return false;
            if (!lhs.ParticleShaderFullParticleBirthRatio.EqualsWithin(rhs.ParticleShaderFullParticleBirthRatio)) return false;
            if (!lhs.ParticleShaderPersistentParticleBirthRatio.EqualsWithin(rhs.ParticleShaderPersistentParticleBirthRatio)) return false;
            if (!lhs.ParticleShaderParticleLifetime.EqualsWithin(rhs.ParticleShaderParticleLifetime)) return false;
            if (!lhs.ParticleShaderParticleLifetimePlusMinus.EqualsWithin(rhs.ParticleShaderParticleLifetimePlusMinus)) return false;
            if (!lhs.ParticleShaderInitialSpeedAlongNormal.EqualsWithin(rhs.ParticleShaderInitialSpeedAlongNormal)) return false;
            if (!lhs.ParticleShaderAccelerationAlongNormal.EqualsWithin(rhs.ParticleShaderAccelerationAlongNormal)) return false;
            if (!lhs.ParticleShaderInitialVelocity1.EqualsWithin(rhs.ParticleShaderInitialVelocity1)) return false;
            if (!lhs.ParticleShaderInitialVelocity2.EqualsWithin(rhs.ParticleShaderInitialVelocity2)) return false;
            if (!lhs.ParticleShaderInitialVelocity3.EqualsWithin(rhs.ParticleShaderInitialVelocity3)) return false;
            if (!lhs.ParticleShaderAcceleration1.EqualsWithin(rhs.ParticleShaderAcceleration1)) return false;
            if (!lhs.ParticleShaderAcceleration2.EqualsWithin(rhs.ParticleShaderAcceleration2)) return false;
            if (!lhs.ParticleShaderAcceleration3.EqualsWithin(rhs.ParticleShaderAcceleration3)) return false;
            if (!lhs.ParticleShaderScaleKey1.EqualsWithin(rhs.ParticleShaderScaleKey1)) return false;
            if (!lhs.ParticleShaderScaleKey2.EqualsWithin(rhs.ParticleShaderScaleKey2)) return false;
            if (!lhs.ParticleShaderScaleKey1Time.EqualsWithin(rhs.ParticleShaderScaleKey1Time)) return false;
            if (!lhs.ParticleShaderScaleKey2Time.EqualsWithin(rhs.ParticleShaderScaleKey2Time)) return false;
            if (!lhs.ColorKey1Color.ColorOnlyEquals(rhs.ColorKey1Color)) return false;
            if (!lhs.ColorKey2Color.ColorOnlyEquals(rhs.ColorKey2Color)) return false;
            if (!lhs.ColorKey3Color.ColorOnlyEquals(rhs.ColorKey3Color)) return false;
            if (!lhs.ColorKey1ColorAlpha.EqualsWithin(rhs.ColorKey1ColorAlpha)) return false;
            if (!lhs.ColorKey2ColorAlpha.EqualsWithin(rhs.ColorKey2ColorAlpha)) return false;
            if (!lhs.ColorKey3ColorAlpha.EqualsWithin(rhs.ColorKey3ColorAlpha)) return false;
            if (!lhs.ColorKey1ColorKeyTime.EqualsWithin(rhs.ColorKey1ColorKeyTime)) return false;
            if (!lhs.ColorKey2ColorKeyTime.EqualsWithin(rhs.ColorKey2ColorKeyTime)) return false;
            if (!lhs.ColorKey3ColorKeyTime.EqualsWithin(rhs.ColorKey3ColorKeyTime)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IEffectShaderDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Flags);
            hash.Add(item.MembraneShaderSourceBlendMode);
            hash.Add(item.MembraneShaderBlendOperation);
            hash.Add(item.MembraneShaderZTestFunction);
            hash.Add(item.FillTextureEffectColor);
            hash.Add(item.FillTextureEffectAlphaFadeInTime);
            hash.Add(item.FillTextureEffectFullAlphaTime);
            hash.Add(item.FillTextureEffectAlphaFadeOutTime);
            hash.Add(item.FillTextureEffectPersistentAlphaRatio);
            hash.Add(item.FillTextureEffectAlphaPulseAmplitude);
            hash.Add(item.FillTextureEffectAlphaPulseFrequency);
            hash.Add(item.FillTextureEffectTextureAnimationSpeedU);
            hash.Add(item.FillTextureEffectTextureAnimationSpeedV);
            hash.Add(item.EdgeEffectFallOff);
            hash.Add(item.EdgeEffectColor);
            hash.Add(item.EdgeEffectAlphaFadeInTime);
            hash.Add(item.EdgeEffectFullAlphaTime);
            hash.Add(item.EdgeEffectAlphaFadeOutTime);
            hash.Add(item.EdgeEffectPersistentAlphaRatio);
            hash.Add(item.EdgeEffectAlphaPulseAmplitude);
            hash.Add(item.EdgeEffectAlphaPulseFrequency);
            hash.Add(item.FillTextureEffectFullAlphaRatio);
            hash.Add(item.EdgeEffectFullAlphaRatio);
            hash.Add(item.MembraneShaderDestBlendMode);
            hash.Add(item.ParticleShaderSourceBlendMode);
            hash.Add(item.ParticleShaderBlendOperation);
            hash.Add(item.ParticleShaderZTestFunction);
            hash.Add(item.ParticleShaderDestBlendMode);
            hash.Add(item.ParticleShaderParticleBirthRampUpTime);
            hash.Add(item.ParticleShaderFullParticleBirthTime);
            hash.Add(item.ParticleShaderParticleBirthRampDownTime);
            hash.Add(item.ParticleShaderFullParticleBirthRatio);
            hash.Add(item.ParticleShaderPersistentParticleBirthRatio);
            hash.Add(item.ParticleShaderParticleLifetime);
            hash.Add(item.ParticleShaderParticleLifetimePlusMinus);
            hash.Add(item.ParticleShaderInitialSpeedAlongNormal);
            hash.Add(item.ParticleShaderAccelerationAlongNormal);
            hash.Add(item.ParticleShaderInitialVelocity1);
            hash.Add(item.ParticleShaderInitialVelocity2);
            hash.Add(item.ParticleShaderInitialVelocity3);
            hash.Add(item.ParticleShaderAcceleration1);
            hash.Add(item.ParticleShaderAcceleration2);
            hash.Add(item.ParticleShaderAcceleration3);
            hash.Add(item.ParticleShaderScaleKey1);
            hash.Add(item.ParticleShaderScaleKey2);
            hash.Add(item.ParticleShaderScaleKey1Time);
            hash.Add(item.ParticleShaderScaleKey2Time);
            hash.Add(item.ColorKey1Color);
            hash.Add(item.ColorKey2Color);
            hash.Add(item.ColorKey3Color);
            hash.Add(item.ColorKey1ColorAlpha);
            hash.Add(item.ColorKey2ColorAlpha);
            hash.Add(item.ColorKey3ColorAlpha);
            hash.Add(item.ColorKey1ColorKeyTime);
            hash.Add(item.ColorKey2ColorKeyTime);
            hash.Add(item.ColorKey3ColorKeyTime);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return EffectShaderData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IEffectShaderDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IEffectShaderDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class EffectShaderDataSetterTranslationCommon
    {
        public static readonly EffectShaderDataSetterTranslationCommon Instance = new EffectShaderDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IEffectShaderData item,
            IEffectShaderDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode) ?? true))
            {
                item.MembraneShaderSourceBlendMode = rhs.MembraneShaderSourceBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.MembraneShaderBlendOperation) ?? true))
            {
                item.MembraneShaderBlendOperation = rhs.MembraneShaderBlendOperation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.MembraneShaderZTestFunction) ?? true))
            {
                item.MembraneShaderZTestFunction = rhs.MembraneShaderZTestFunction;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectColor) ?? true))
            {
                item.FillTextureEffectColor = rhs.FillTextureEffectColor;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime) ?? true))
            {
                item.FillTextureEffectAlphaFadeInTime = rhs.FillTextureEffectAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime) ?? true))
            {
                item.FillTextureEffectFullAlphaTime = rhs.FillTextureEffectFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime) ?? true))
            {
                item.FillTextureEffectAlphaFadeOutTime = rhs.FillTextureEffectAlphaFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio) ?? true))
            {
                item.FillTextureEffectPersistentAlphaRatio = rhs.FillTextureEffectPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude) ?? true))
            {
                item.FillTextureEffectAlphaPulseAmplitude = rhs.FillTextureEffectAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency) ?? true))
            {
                item.FillTextureEffectAlphaPulseFrequency = rhs.FillTextureEffectAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU) ?? true))
            {
                item.FillTextureEffectTextureAnimationSpeedU = rhs.FillTextureEffectTextureAnimationSpeedU;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV) ?? true))
            {
                item.FillTextureEffectTextureAnimationSpeedV = rhs.FillTextureEffectTextureAnimationSpeedV;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                item.EdgeEffectFallOff = rhs.EdgeEffectFallOff;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectColor) ?? true))
            {
                item.EdgeEffectColor = rhs.EdgeEffectColor;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                item.EdgeEffectAlphaFadeInTime = rhs.EdgeEffectAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                item.EdgeEffectFullAlphaTime = rhs.EdgeEffectFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                item.EdgeEffectAlphaFadeOutTime = rhs.EdgeEffectAlphaFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                item.EdgeEffectPersistentAlphaRatio = rhs.EdgeEffectPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                item.EdgeEffectAlphaPulseAmplitude = rhs.EdgeEffectAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                item.EdgeEffectAlphaPulseFrequency = rhs.EdgeEffectAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio) ?? true))
            {
                item.FillTextureEffectFullAlphaRatio = rhs.FillTextureEffectFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                item.EdgeEffectFullAlphaRatio = rhs.EdgeEffectFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.MembraneShaderDestBlendMode) ?? true))
            {
                item.MembraneShaderDestBlendMode = rhs.MembraneShaderDestBlendMode;
            }
            if (rhs.Versioning.HasFlag(EffectShaderData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode) ?? true))
            {
                item.ParticleShaderSourceBlendMode = rhs.ParticleShaderSourceBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderBlendOperation) ?? true))
            {
                item.ParticleShaderBlendOperation = rhs.ParticleShaderBlendOperation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderZTestFunction) ?? true))
            {
                item.ParticleShaderZTestFunction = rhs.ParticleShaderZTestFunction;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderDestBlendMode) ?? true))
            {
                item.ParticleShaderDestBlendMode = rhs.ParticleShaderDestBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime) ?? true))
            {
                item.ParticleShaderParticleBirthRampUpTime = rhs.ParticleShaderParticleBirthRampUpTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime) ?? true))
            {
                item.ParticleShaderFullParticleBirthTime = rhs.ParticleShaderFullParticleBirthTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime) ?? true))
            {
                item.ParticleShaderParticleBirthRampDownTime = rhs.ParticleShaderParticleBirthRampDownTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio) ?? true))
            {
                item.ParticleShaderFullParticleBirthRatio = rhs.ParticleShaderFullParticleBirthRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio) ?? true))
            {
                item.ParticleShaderPersistentParticleBirthRatio = rhs.ParticleShaderPersistentParticleBirthRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderParticleLifetime) ?? true))
            {
                item.ParticleShaderParticleLifetime = rhs.ParticleShaderParticleLifetime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus) ?? true))
            {
                item.ParticleShaderParticleLifetimePlusMinus = rhs.ParticleShaderParticleLifetimePlusMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal) ?? true))
            {
                item.ParticleShaderInitialSpeedAlongNormal = rhs.ParticleShaderInitialSpeedAlongNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal) ?? true))
            {
                item.ParticleShaderAccelerationAlongNormal = rhs.ParticleShaderAccelerationAlongNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1) ?? true))
            {
                item.ParticleShaderInitialVelocity1 = rhs.ParticleShaderInitialVelocity1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2) ?? true))
            {
                item.ParticleShaderInitialVelocity2 = rhs.ParticleShaderInitialVelocity2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3) ?? true))
            {
                item.ParticleShaderInitialVelocity3 = rhs.ParticleShaderInitialVelocity3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration1) ?? true))
            {
                item.ParticleShaderAcceleration1 = rhs.ParticleShaderAcceleration1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration2) ?? true))
            {
                item.ParticleShaderAcceleration2 = rhs.ParticleShaderAcceleration2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration3) ?? true))
            {
                item.ParticleShaderAcceleration3 = rhs.ParticleShaderAcceleration3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey1) ?? true))
            {
                item.ParticleShaderScaleKey1 = rhs.ParticleShaderScaleKey1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey2) ?? true))
            {
                item.ParticleShaderScaleKey2 = rhs.ParticleShaderScaleKey2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time) ?? true))
            {
                item.ParticleShaderScaleKey1Time = rhs.ParticleShaderScaleKey1Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time) ?? true))
            {
                item.ParticleShaderScaleKey2Time = rhs.ParticleShaderScaleKey2Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey1Color) ?? true))
            {
                item.ColorKey1Color = rhs.ColorKey1Color;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey2Color) ?? true))
            {
                item.ColorKey2Color = rhs.ColorKey2Color;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey3Color) ?? true))
            {
                item.ColorKey3Color = rhs.ColorKey3Color;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey1ColorAlpha) ?? true))
            {
                item.ColorKey1ColorAlpha = rhs.ColorKey1ColorAlpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey2ColorAlpha) ?? true))
            {
                item.ColorKey2ColorAlpha = rhs.ColorKey2ColorAlpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey3ColorAlpha) ?? true))
            {
                item.ColorKey3ColorAlpha = rhs.ColorKey3ColorAlpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey1ColorKeyTime) ?? true))
            {
                item.ColorKey1ColorKeyTime = rhs.ColorKey1ColorKeyTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey2ColorKeyTime) ?? true))
            {
                item.ColorKey2ColorKeyTime = rhs.ColorKey2ColorKeyTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey3ColorKeyTime) ?? true))
            {
                item.ColorKey3ColorKeyTime = rhs.ColorKey3ColorKeyTime;
            }
        }
        
        #endregion
        
        public EffectShaderData DeepCopy(
            IEffectShaderDataGetter item,
            EffectShaderData.TranslationMask? copyMask = null)
        {
            EffectShaderData ret = (EffectShaderData)((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public EffectShaderData DeepCopy(
            IEffectShaderDataGetter item,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? copyMask = null)
        {
            EffectShaderData ret = (EffectShaderData)((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public EffectShaderData DeepCopy(
            IEffectShaderDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            EffectShaderData ret = (EffectShaderData)((EffectShaderDataCommon)((IEffectShaderDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class EffectShaderData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShaderData_Registration.Instance;
        public static EffectShaderData_Registration Registration => EffectShaderData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EffectShaderDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return EffectShaderDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EffectShaderDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEffectShaderDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IEffectShaderDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IEffectShaderDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectShaderDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static EffectShaderDataXmlWriteTranslation Instance = new EffectShaderDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IEffectShaderDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<EffectShaderData.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)EffectShaderData_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<EffectShader.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)EffectShaderData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode) ?? true))
            {
                EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                    node: node,
                    name: nameof(item.MembraneShaderSourceBlendMode),
                    item: item.MembraneShaderSourceBlendMode,
                    fieldIndex: (int)EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.MembraneShaderBlendOperation) ?? true))
            {
                EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Write(
                    node: node,
                    name: nameof(item.MembraneShaderBlendOperation),
                    item: item.MembraneShaderBlendOperation,
                    fieldIndex: (int)EffectShaderData_FieldIndex.MembraneShaderBlendOperation,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.MembraneShaderZTestFunction) ?? true))
            {
                EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Write(
                    node: node,
                    name: nameof(item.MembraneShaderZTestFunction),
                    item: item.MembraneShaderZTestFunction,
                    fieldIndex: (int)EffectShaderData_FieldIndex.MembraneShaderZTestFunction,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectColor),
                    item: item.FillTextureEffectColor,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectAlphaFadeInTime),
                    item: item.FillTextureEffectAlphaFadeInTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectFullAlphaTime),
                    item: item.FillTextureEffectFullAlphaTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectAlphaFadeOutTime),
                    item: item.FillTextureEffectAlphaFadeOutTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectPersistentAlphaRatio),
                    item: item.FillTextureEffectPersistentAlphaRatio,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectAlphaPulseAmplitude),
                    item: item.FillTextureEffectAlphaPulseAmplitude,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectAlphaPulseFrequency),
                    item: item.FillTextureEffectAlphaPulseFrequency,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectTextureAnimationSpeedU),
                    item: item.FillTextureEffectTextureAnimationSpeedU,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectTextureAnimationSpeedV),
                    item: item.FillTextureEffectTextureAnimationSpeedV,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectFallOff),
                    item: item.EdgeEffectFallOff,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectFallOff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectColor),
                    item: item.EdgeEffectColor,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectAlphaFadeInTime),
                    item: item.EdgeEffectAlphaFadeInTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectFullAlphaTime),
                    item: item.EdgeEffectFullAlphaTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectAlphaFadeOutTime),
                    item: item.EdgeEffectAlphaFadeOutTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectPersistentAlphaRatio),
                    item: item.EdgeEffectPersistentAlphaRatio,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectAlphaPulseAmplitude),
                    item: item.EdgeEffectAlphaPulseAmplitude,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectAlphaPulseFrequency),
                    item: item.EdgeEffectAlphaPulseFrequency,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTextureEffectFullAlphaRatio),
                    item: item.FillTextureEffectFullAlphaRatio,
                    fieldIndex: (int)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EdgeEffectFullAlphaRatio),
                    item: item.EdgeEffectFullAlphaRatio,
                    fieldIndex: (int)EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.MembraneShaderDestBlendMode) ?? true))
            {
                EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                    node: node,
                    name: nameof(item.MembraneShaderDestBlendMode),
                    item: item.MembraneShaderDestBlendMode,
                    fieldIndex: (int)EffectShaderData_FieldIndex.MembraneShaderDestBlendMode,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode) ?? true))
            {
                EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderSourceBlendMode),
                    item: item.ParticleShaderSourceBlendMode,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderBlendOperation) ?? true))
            {
                EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderBlendOperation),
                    item: item.ParticleShaderBlendOperation,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderBlendOperation,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderZTestFunction) ?? true))
            {
                EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderZTestFunction),
                    item: item.ParticleShaderZTestFunction,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderZTestFunction,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderDestBlendMode) ?? true))
            {
                EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderDestBlendMode),
                    item: item.ParticleShaderDestBlendMode,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderDestBlendMode,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderParticleBirthRampUpTime),
                    item: item.ParticleShaderParticleBirthRampUpTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderFullParticleBirthTime),
                    item: item.ParticleShaderFullParticleBirthTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderParticleBirthRampDownTime),
                    item: item.ParticleShaderParticleBirthRampDownTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderFullParticleBirthRatio),
                    item: item.ParticleShaderFullParticleBirthRatio,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderPersistentParticleBirthRatio),
                    item: item.ParticleShaderPersistentParticleBirthRatio,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderParticleLifetime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderParticleLifetime),
                    item: item.ParticleShaderParticleLifetime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderParticleLifetime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderParticleLifetimePlusMinus),
                    item: item.ParticleShaderParticleLifetimePlusMinus,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderInitialSpeedAlongNormal),
                    item: item.ParticleShaderInitialSpeedAlongNormal,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderAccelerationAlongNormal),
                    item: item.ParticleShaderAccelerationAlongNormal,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderInitialVelocity1),
                    item: item.ParticleShaderInitialVelocity1,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderInitialVelocity2),
                    item: item.ParticleShaderInitialVelocity2,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderInitialVelocity3),
                    item: item.ParticleShaderInitialVelocity3,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration1) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderAcceleration1),
                    item: item.ParticleShaderAcceleration1,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderAcceleration1,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration2) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderAcceleration2),
                    item: item.ParticleShaderAcceleration2,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderAcceleration2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration3) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderAcceleration3),
                    item: item.ParticleShaderAcceleration3,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderAcceleration3,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey1) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderScaleKey1),
                    item: item.ParticleShaderScaleKey1,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderScaleKey1,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey2) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderScaleKey2),
                    item: item.ParticleShaderScaleKey2,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderScaleKey2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderScaleKey1Time),
                    item: item.ParticleShaderScaleKey1Time,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderScaleKey2Time),
                    item: item.ParticleShaderScaleKey2Time,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey1Color) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey1Color),
                    item: item.ColorKey1Color,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey1Color,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey2Color) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey2Color),
                    item: item.ColorKey2Color,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey2Color,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey3Color) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey3Color),
                    item: item.ColorKey3Color,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey3Color,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey1ColorAlpha) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey1ColorAlpha),
                    item: item.ColorKey1ColorAlpha,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey1ColorAlpha,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey2ColorAlpha) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey2ColorAlpha),
                    item: item.ColorKey2ColorAlpha,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey2ColorAlpha,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey3ColorAlpha) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey3ColorAlpha),
                    item: item.ColorKey3ColorAlpha,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey3ColorAlpha,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey1ColorKeyTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey1ColorKeyTime),
                    item: item.ColorKey1ColorKeyTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey1ColorKeyTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey2ColorKeyTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey2ColorKeyTime),
                    item: item.ColorKey2ColorKeyTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey2ColorKeyTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShaderData_FieldIndex.ColorKey3ColorKeyTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorKey3ColorKeyTime),
                    item: item.ColorKey3ColorKeyTime,
                    fieldIndex: (int)EffectShaderData_FieldIndex.ColorKey3ColorKeyTime,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IEffectShaderDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.EffectShaderData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.EffectShaderData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEffectShaderDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IEffectShaderDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IEffectShaderDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class EffectShaderDataXmlCreateTranslation
    {
        public readonly static EffectShaderDataXmlCreateTranslation Instance = new EffectShaderDataXmlCreateTranslation();

        public static void FillPublicXml(
            IEffectShaderData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EffectShaderDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IEffectShaderData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<EffectShaderData.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<EffectShader.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderSourceBlendMode":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.MembraneShaderSourceBlendMode);
                    try
                    {
                        item.MembraneShaderSourceBlendMode = EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderBlendOperation":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.MembraneShaderBlendOperation);
                    try
                    {
                        item.MembraneShaderBlendOperation = EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderZTestFunction":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.MembraneShaderZTestFunction);
                    try
                    {
                        item.MembraneShaderZTestFunction = EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectColor":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectColor);
                    try
                    {
                        item.FillTextureEffectColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaFadeInTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeInTime);
                    try
                    {
                        item.FillTextureEffectAlphaFadeInTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectFullAlphaTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaTime);
                    try
                    {
                        item.FillTextureEffectFullAlphaTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaFadeOutTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaFadeOutTime);
                    try
                    {
                        item.FillTextureEffectAlphaFadeOutTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectPersistentAlphaRatio":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectPersistentAlphaRatio);
                    try
                    {
                        item.FillTextureEffectPersistentAlphaRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaPulseAmplitude":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseAmplitude);
                    try
                    {
                        item.FillTextureEffectAlphaPulseAmplitude = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaPulseFrequency":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectAlphaPulseFrequency);
                    try
                    {
                        item.FillTextureEffectAlphaPulseFrequency = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectTextureAnimationSpeedU":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedU);
                    try
                    {
                        item.FillTextureEffectTextureAnimationSpeedU = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectTextureAnimationSpeedV":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectTextureAnimationSpeedV);
                    try
                    {
                        item.FillTextureEffectTextureAnimationSpeedV = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFallOff":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectFallOff);
                    try
                    {
                        item.EdgeEffectFallOff = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectColor":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectColor);
                    try
                    {
                        item.EdgeEffectColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaFadeInTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeInTime);
                    try
                    {
                        item.EdgeEffectAlphaFadeInTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFullAlphaTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectFullAlphaTime);
                    try
                    {
                        item.EdgeEffectFullAlphaTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaFadeOutTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectAlphaFadeOutTime);
                    try
                    {
                        item.EdgeEffectAlphaFadeOutTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectPersistentAlphaRatio":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectPersistentAlphaRatio);
                    try
                    {
                        item.EdgeEffectPersistentAlphaRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaPulseAmplitude":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseAmplitude);
                    try
                    {
                        item.EdgeEffectAlphaPulseAmplitude = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaPulseFrequency":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectAlphaPulseFrequency);
                    try
                    {
                        item.EdgeEffectAlphaPulseFrequency = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectFullAlphaRatio":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.FillTextureEffectFullAlphaRatio);
                    try
                    {
                        item.FillTextureEffectFullAlphaRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFullAlphaRatio":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.EdgeEffectFullAlphaRatio);
                    try
                    {
                        item.EdgeEffectFullAlphaRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderDestBlendMode":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.MembraneShaderDestBlendMode);
                    try
                    {
                        item.MembraneShaderDestBlendMode = EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderSourceBlendMode":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderSourceBlendMode);
                    try
                    {
                        item.ParticleShaderSourceBlendMode = EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderBlendOperation":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderBlendOperation);
                    try
                    {
                        item.ParticleShaderBlendOperation = EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderZTestFunction":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderZTestFunction);
                    try
                    {
                        item.ParticleShaderZTestFunction = EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderDestBlendMode":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderDestBlendMode);
                    try
                    {
                        item.ParticleShaderDestBlendMode = EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleBirthRampUpTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampUpTime);
                    try
                    {
                        item.ParticleShaderParticleBirthRampUpTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderFullParticleBirthTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthTime);
                    try
                    {
                        item.ParticleShaderFullParticleBirthTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleBirthRampDownTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderParticleBirthRampDownTime);
                    try
                    {
                        item.ParticleShaderParticleBirthRampDownTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderFullParticleBirthRatio":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderFullParticleBirthRatio);
                    try
                    {
                        item.ParticleShaderFullParticleBirthRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderPersistentParticleBirthRatio":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderPersistentParticleBirthRatio);
                    try
                    {
                        item.ParticleShaderPersistentParticleBirthRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleLifetime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderParticleLifetime);
                    try
                    {
                        item.ParticleShaderParticleLifetime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleLifetimePlusMinus":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderParticleLifetimePlusMinus);
                    try
                    {
                        item.ParticleShaderParticleLifetimePlusMinus = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialSpeedAlongNormal":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderInitialSpeedAlongNormal);
                    try
                    {
                        item.ParticleShaderInitialSpeedAlongNormal = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAccelerationAlongNormal":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderAccelerationAlongNormal);
                    try
                    {
                        item.ParticleShaderAccelerationAlongNormal = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity1":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity1);
                    try
                    {
                        item.ParticleShaderInitialVelocity1 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity2":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity2);
                    try
                    {
                        item.ParticleShaderInitialVelocity2 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity3":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderInitialVelocity3);
                    try
                    {
                        item.ParticleShaderInitialVelocity3 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration1":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration1);
                    try
                    {
                        item.ParticleShaderAcceleration1 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration2":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration2);
                    try
                    {
                        item.ParticleShaderAcceleration2 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration3":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderAcceleration3);
                    try
                    {
                        item.ParticleShaderAcceleration3 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey1":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey1);
                    try
                    {
                        item.ParticleShaderScaleKey1 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey2":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey2);
                    try
                    {
                        item.ParticleShaderScaleKey2 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey1Time":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey1Time);
                    try
                    {
                        item.ParticleShaderScaleKey1Time = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey2Time":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ParticleShaderScaleKey2Time);
                    try
                    {
                        item.ParticleShaderScaleKey2Time = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1Color":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey1Color);
                    try
                    {
                        item.ColorKey1Color = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2Color":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey2Color);
                    try
                    {
                        item.ColorKey2Color = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3Color":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey3Color);
                    try
                    {
                        item.ColorKey3Color = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1ColorAlpha":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey1ColorAlpha);
                    try
                    {
                        item.ColorKey1ColorAlpha = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2ColorAlpha":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey2ColorAlpha);
                    try
                    {
                        item.ColorKey2ColorAlpha = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3ColorAlpha":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey3ColorAlpha);
                    try
                    {
                        item.ColorKey3ColorAlpha = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1ColorKeyTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey1ColorKeyTime);
                    try
                    {
                        item.ColorKey1ColorKeyTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2ColorKeyTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey2ColorKeyTime);
                    try
                    {
                        item.ColorKey2ColorKeyTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3ColorKeyTime":
                    errorMask?.PushIndex((int)EffectShaderData_FieldIndex.ColorKey3ColorKeyTime);
                    try
                    {
                        item.ColorKey3ColorKeyTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class EffectShaderDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            XElement node,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectShaderDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShaderData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            string path,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            Stream stream,
            out EffectShaderData.ErrorMask errorMask,
            EffectShaderData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((EffectShaderDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            XElement node,
            string? name = null,
            EffectShaderData.TranslationMask? translationMask = null)
        {
            ((EffectShaderDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((EffectShaderDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEffectShaderDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((EffectShaderDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectShaderDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static EffectShaderDataBinaryWriteTranslation Instance = new EffectShaderDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IEffectShaderDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                writer,
                item.MembraneShaderSourceBlendMode,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Write(
                writer,
                item.MembraneShaderBlendOperation,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Write(
                writer,
                item.MembraneShaderZTestFunction,
                length: 4);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectColor);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectAlphaFadeInTime);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectFullAlphaTime);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectAlphaFadeOutTime);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectPersistentAlphaRatio);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectAlphaPulseAmplitude);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectAlphaPulseFrequency);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectTextureAnimationSpeedU);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectTextureAnimationSpeedV);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectFallOff);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectColor);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectAlphaFadeInTime);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectFullAlphaTime);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectAlphaFadeOutTime);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectPersistentAlphaRatio);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectAlphaPulseAmplitude);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectAlphaPulseFrequency);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FillTextureEffectFullAlphaRatio);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeEffectFullAlphaRatio);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                writer,
                item.MembraneShaderDestBlendMode,
                length: 4);
            if (!item.Versioning.HasFlag(EffectShaderData.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                    writer,
                    item.ParticleShaderSourceBlendMode,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Write(
                    writer,
                    item.ParticleShaderBlendOperation,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Write(
                    writer,
                    item.ParticleShaderZTestFunction,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                    writer,
                    item.ParticleShaderDestBlendMode,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderParticleBirthRampUpTime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderFullParticleBirthTime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderParticleBirthRampDownTime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderFullParticleBirthRatio);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderPersistentParticleBirthRatio);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderParticleLifetime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderParticleLifetimePlusMinus);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderInitialSpeedAlongNormal);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderAccelerationAlongNormal);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderInitialVelocity1);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderInitialVelocity2);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderInitialVelocity3);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderAcceleration1);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderAcceleration2);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderAcceleration3);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderScaleKey1);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderScaleKey2);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderScaleKey1Time);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderScaleKey2Time);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey1Color);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey2Color);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey3Color);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey1ColorAlpha);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey2ColorAlpha);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey3ColorAlpha);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey1ColorKeyTime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey2ColorKeyTime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey3ColorKeyTime);
            }
        }

        public void Write(
            MutagenWriter writer,
            IEffectShaderDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.DATA),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IEffectShaderDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class EffectShaderDataBinaryCreateTranslation
    {
        public readonly static EffectShaderDataBinaryCreateTranslation Instance = new EffectShaderDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IEffectShaderData item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<EffectShader.Flag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.MembraneShaderSourceBlendMode = EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.MembraneShaderBlendOperation = EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.MembraneShaderZTestFunction = EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.FillTextureEffectColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.FillTextureEffectAlphaFadeInTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FillTextureEffectFullAlphaTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FillTextureEffectAlphaFadeOutTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FillTextureEffectPersistentAlphaRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FillTextureEffectAlphaPulseAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FillTextureEffectAlphaPulseFrequency = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FillTextureEffectTextureAnimationSpeedU = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FillTextureEffectTextureAnimationSpeedV = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EdgeEffectFallOff = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EdgeEffectColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.EdgeEffectAlphaFadeInTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EdgeEffectFullAlphaTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EdgeEffectAlphaFadeOutTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EdgeEffectPersistentAlphaRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EdgeEffectAlphaPulseAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EdgeEffectAlphaPulseFrequency = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FillTextureEffectFullAlphaRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EdgeEffectFullAlphaRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.MembraneShaderDestBlendMode = EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(frame: frame.SpawnWithLength(4));
            if (frame.Complete)
            {
                item.Versioning |= EffectShaderData.VersioningBreaks.Break0;
                return;
            }
            item.ParticleShaderSourceBlendMode = EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.ParticleShaderBlendOperation = EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.ParticleShaderZTestFunction = EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.ParticleShaderDestBlendMode = EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.ParticleShaderParticleBirthRampUpTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderFullParticleBirthTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderParticleBirthRampDownTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderFullParticleBirthRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderPersistentParticleBirthRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderParticleLifetime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderParticleLifetimePlusMinus = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderInitialSpeedAlongNormal = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderAccelerationAlongNormal = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderInitialVelocity1 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderInitialVelocity2 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderInitialVelocity3 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderAcceleration1 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderAcceleration2 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderAcceleration3 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderScaleKey1 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderScaleKey2 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderScaleKey1Time = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ParticleShaderScaleKey2Time = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ColorKey1Color = frame.ReadColor(ColorBinaryType.Alpha);
            item.ColorKey2Color = frame.ReadColor(ColorBinaryType.Alpha);
            item.ColorKey3Color = frame.ReadColor(ColorBinaryType.Alpha);
            item.ColorKey1ColorAlpha = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ColorKey2ColorAlpha = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ColorKey3ColorAlpha = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ColorKey1ColorKeyTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ColorKey2ColorKeyTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ColorKey3ColorKeyTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class EffectShaderDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IEffectShaderDataGetter item,
            MutagenWriter writer)
        {
            ((EffectShaderDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectShaderDataBinaryOverlay :
        BinaryOverlay,
        IEffectShaderDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShaderData_Registration.Instance;
        public static EffectShaderData_Registration Registration => EffectShaderData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EffectShaderDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EffectShaderDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEffectShaderDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IEffectShaderDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IEffectShaderDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEffectShaderDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => EffectShaderDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EffectShaderDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EffectShaderDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectShaderDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public EffectShaderData.VersioningBreaks Versioning { get; private set; }
        public EffectShader.Flag Flags => (EffectShader.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x0, 0x4));
        public EffectShader.SourceBlendMode MembraneShaderSourceBlendMode => (EffectShader.SourceBlendMode)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public EffectShader.BlendOperation MembraneShaderBlendOperation => (EffectShader.BlendOperation)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x8, 0x4));
        public EffectShader.ZTestFunction MembraneShaderZTestFunction => (EffectShader.ZTestFunction)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0xC, 0x4));
        public Color FillTextureEffectColor => _data.Slice(0x10, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single FillTextureEffectAlphaFadeInTime => SpanExt.GetFloat(_data.Slice(0x14, 0x4));
        public Single FillTextureEffectFullAlphaTime => SpanExt.GetFloat(_data.Slice(0x18, 0x4));
        public Single FillTextureEffectAlphaFadeOutTime => SpanExt.GetFloat(_data.Slice(0x1C, 0x4));
        public Single FillTextureEffectPersistentAlphaRatio => SpanExt.GetFloat(_data.Slice(0x20, 0x4));
        public Single FillTextureEffectAlphaPulseAmplitude => SpanExt.GetFloat(_data.Slice(0x24, 0x4));
        public Single FillTextureEffectAlphaPulseFrequency => SpanExt.GetFloat(_data.Slice(0x28, 0x4));
        public Single FillTextureEffectTextureAnimationSpeedU => SpanExt.GetFloat(_data.Slice(0x2C, 0x4));
        public Single FillTextureEffectTextureAnimationSpeedV => SpanExt.GetFloat(_data.Slice(0x30, 0x4));
        public Single EdgeEffectFallOff => SpanExt.GetFloat(_data.Slice(0x34, 0x4));
        public Color EdgeEffectColor => _data.Slice(0x38, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single EdgeEffectAlphaFadeInTime => SpanExt.GetFloat(_data.Slice(0x3C, 0x4));
        public Single EdgeEffectFullAlphaTime => SpanExt.GetFloat(_data.Slice(0x40, 0x4));
        public Single EdgeEffectAlphaFadeOutTime => SpanExt.GetFloat(_data.Slice(0x44, 0x4));
        public Single EdgeEffectPersistentAlphaRatio => SpanExt.GetFloat(_data.Slice(0x48, 0x4));
        public Single EdgeEffectAlphaPulseAmplitude => SpanExt.GetFloat(_data.Slice(0x4C, 0x4));
        public Single EdgeEffectAlphaPulseFrequency => SpanExt.GetFloat(_data.Slice(0x50, 0x4));
        public Single FillTextureEffectFullAlphaRatio => SpanExt.GetFloat(_data.Slice(0x54, 0x4));
        public Single EdgeEffectFullAlphaRatio => SpanExt.GetFloat(_data.Slice(0x58, 0x4));
        public EffectShader.SourceBlendMode MembraneShaderDestBlendMode => (EffectShader.SourceBlendMode)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x5C, 0x4));
        public EffectShader.SourceBlendMode ParticleShaderSourceBlendMode => (EffectShader.SourceBlendMode)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x60, 0x4));
        public EffectShader.BlendOperation ParticleShaderBlendOperation => (EffectShader.BlendOperation)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x64, 0x4));
        public EffectShader.ZTestFunction ParticleShaderZTestFunction => (EffectShader.ZTestFunction)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x68, 0x4));
        public EffectShader.SourceBlendMode ParticleShaderDestBlendMode => (EffectShader.SourceBlendMode)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x6C, 0x4));
        public Single ParticleShaderParticleBirthRampUpTime => SpanExt.GetFloat(_data.Slice(0x70, 0x4));
        public Single ParticleShaderFullParticleBirthTime => SpanExt.GetFloat(_data.Slice(0x74, 0x4));
        public Single ParticleShaderParticleBirthRampDownTime => SpanExt.GetFloat(_data.Slice(0x78, 0x4));
        public Single ParticleShaderFullParticleBirthRatio => SpanExt.GetFloat(_data.Slice(0x7C, 0x4));
        public Single ParticleShaderPersistentParticleBirthRatio => SpanExt.GetFloat(_data.Slice(0x80, 0x4));
        public Single ParticleShaderParticleLifetime => SpanExt.GetFloat(_data.Slice(0x84, 0x4));
        public Single ParticleShaderParticleLifetimePlusMinus => SpanExt.GetFloat(_data.Slice(0x88, 0x4));
        public Single ParticleShaderInitialSpeedAlongNormal => SpanExt.GetFloat(_data.Slice(0x8C, 0x4));
        public Single ParticleShaderAccelerationAlongNormal => SpanExt.GetFloat(_data.Slice(0x90, 0x4));
        public Single ParticleShaderInitialVelocity1 => SpanExt.GetFloat(_data.Slice(0x94, 0x4));
        public Single ParticleShaderInitialVelocity2 => SpanExt.GetFloat(_data.Slice(0x98, 0x4));
        public Single ParticleShaderInitialVelocity3 => SpanExt.GetFloat(_data.Slice(0x9C, 0x4));
        public Single ParticleShaderAcceleration1 => SpanExt.GetFloat(_data.Slice(0xA0, 0x4));
        public Single ParticleShaderAcceleration2 => SpanExt.GetFloat(_data.Slice(0xA4, 0x4));
        public Single ParticleShaderAcceleration3 => SpanExt.GetFloat(_data.Slice(0xA8, 0x4));
        public Single ParticleShaderScaleKey1 => SpanExt.GetFloat(_data.Slice(0xAC, 0x4));
        public Single ParticleShaderScaleKey2 => SpanExt.GetFloat(_data.Slice(0xB0, 0x4));
        public Single ParticleShaderScaleKey1Time => SpanExt.GetFloat(_data.Slice(0xB4, 0x4));
        public Single ParticleShaderScaleKey2Time => SpanExt.GetFloat(_data.Slice(0xB8, 0x4));
        public Color ColorKey1Color => _data.Slice(0xBC, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color ColorKey2Color => _data.Slice(0xC0, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color ColorKey3Color => _data.Slice(0xC4, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single ColorKey1ColorAlpha => SpanExt.GetFloat(_data.Slice(0xC8, 0x4));
        public Single ColorKey2ColorAlpha => SpanExt.GetFloat(_data.Slice(0xCC, 0x4));
        public Single ColorKey3ColorAlpha => SpanExt.GetFloat(_data.Slice(0xD0, 0x4));
        public Single ColorKey1ColorKeyTime => SpanExt.GetFloat(_data.Slice(0xD4, 0x4));
        public Single ColorKey2ColorKeyTime => SpanExt.GetFloat(_data.Slice(0xD8, 0x4));
        public Single ColorKey3ColorKeyTime => SpanExt.GetFloat(_data.Slice(0xDC, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected EffectShaderDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static EffectShaderDataBinaryOverlay EffectShaderDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new EffectShaderDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x60)
            {
                ret.Versioning |= EffectShaderData.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static EffectShaderDataBinaryOverlay EffectShaderDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return EffectShaderDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EffectShaderDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

