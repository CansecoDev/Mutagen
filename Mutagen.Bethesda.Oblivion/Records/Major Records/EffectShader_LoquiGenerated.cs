/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Loqui.Presentation;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class EffectShader : 
        OblivionMajorRecord,
        IEffectShader,
        ILoquiObject<EffectShader>,
        ILoquiObjectSetter,
        IEquatable<EffectShader>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static EffectShader_Registration Registration => EffectShader_Registration.Instance;

        #region Ctor
        protected EffectShader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FillTexture
        public bool FillTexture_IsSet
        {
            get => _hasBeenSetTracker[(int)EffectShader_FieldIndex.FillTexture];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)EffectShader_FieldIndex.FillTexture, nameof(FillTexture_IsSet));
        }
        bool IEffectShaderGetter.FillTexture_IsSet => FillTexture_IsSet;
        private String _FillTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String FillTexture
        {
            get => this._FillTexture;
            set => FillTexture_Set(value);
        }
        String IEffectShaderGetter.FillTexture => this.FillTexture;
        public void FillTexture_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _FillTexture, value, _hasBeenSetTracker, markSet, (int)EffectShader_FieldIndex.FillTexture, nameof(FillTexture), nameof(FillTexture_IsSet));
        }
        public void FillTexture_Unset()
        {
            this.FillTexture_Set(default(String), false);
        }
        #endregion
        #region ParticleShaderTexture
        public bool ParticleShaderTexture_IsSet
        {
            get => _hasBeenSetTracker[(int)EffectShader_FieldIndex.ParticleShaderTexture];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)EffectShader_FieldIndex.ParticleShaderTexture, nameof(ParticleShaderTexture_IsSet));
        }
        bool IEffectShaderGetter.ParticleShaderTexture_IsSet => ParticleShaderTexture_IsSet;
        private String _ParticleShaderTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ParticleShaderTexture
        {
            get => this._ParticleShaderTexture;
            set => ParticleShaderTexture_Set(value);
        }
        String IEffectShaderGetter.ParticleShaderTexture => this.ParticleShaderTexture;
        public void ParticleShaderTexture_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ParticleShaderTexture, value, _hasBeenSetTracker, markSet, (int)EffectShader_FieldIndex.ParticleShaderTexture, nameof(ParticleShaderTexture), nameof(ParticleShaderTexture_IsSet));
        }
        public void ParticleShaderTexture_Unset()
        {
            this.ParticleShaderTexture_Set(default(String), false);
        }
        #endregion
        #region Flags
        private EffectShader.Flag _Flags;
        public EffectShader.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region MembraneShaderSourceBlendMode
        private EffectShader.SourceBlendMode _MembraneShaderSourceBlendMode;
        public EffectShader.SourceBlendMode MembraneShaderSourceBlendMode
        {
            get => this._MembraneShaderSourceBlendMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MembraneShaderSourceBlendMode, value, nameof(MembraneShaderSourceBlendMode));
            }
        }
        #endregion
        #region MembraneShaderBlendOperation
        private EffectShader.BlendOperation _MembraneShaderBlendOperation;
        public EffectShader.BlendOperation MembraneShaderBlendOperation
        {
            get => this._MembraneShaderBlendOperation;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MembraneShaderBlendOperation, value, nameof(MembraneShaderBlendOperation));
            }
        }
        #endregion
        #region MembraneShaderZTestFunction
        private EffectShader.ZTestFunction _MembraneShaderZTestFunction;
        public EffectShader.ZTestFunction MembraneShaderZTestFunction
        {
            get => this._MembraneShaderZTestFunction;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MembraneShaderZTestFunction, value, nameof(MembraneShaderZTestFunction));
            }
        }
        #endregion
        #region FillTextureEffectColor
        private Color _FillTextureEffectColor;
        public Color FillTextureEffectColor
        {
            get => this._FillTextureEffectColor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectColor, value, nameof(FillTextureEffectColor));
            }
        }
        #endregion
        #region FillTextureEffectAlphaFadeInTime
        private Single _FillTextureEffectAlphaFadeInTime;
        public Single FillTextureEffectAlphaFadeInTime
        {
            get => this._FillTextureEffectAlphaFadeInTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectAlphaFadeInTime, value, nameof(FillTextureEffectAlphaFadeInTime));
            }
        }
        #endregion
        #region FillTextureEffectFullAlphaTime
        private Single _FillTextureEffectFullAlphaTime;
        public Single FillTextureEffectFullAlphaTime
        {
            get => this._FillTextureEffectFullAlphaTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectFullAlphaTime, value, nameof(FillTextureEffectFullAlphaTime));
            }
        }
        #endregion
        #region FillTextureEffectAlphaFadeOutTime
        private Single _FillTextureEffectAlphaFadeOutTime;
        public Single FillTextureEffectAlphaFadeOutTime
        {
            get => this._FillTextureEffectAlphaFadeOutTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectAlphaFadeOutTime, value, nameof(FillTextureEffectAlphaFadeOutTime));
            }
        }
        #endregion
        #region FillTextureEffectPersistentAlphaRatio
        private Single _FillTextureEffectPersistentAlphaRatio;
        public Single FillTextureEffectPersistentAlphaRatio
        {
            get => this._FillTextureEffectPersistentAlphaRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectPersistentAlphaRatio, value, nameof(FillTextureEffectPersistentAlphaRatio));
            }
        }
        #endregion
        #region FillTextureEffectAlphaPulseAmplitude
        private Single _FillTextureEffectAlphaPulseAmplitude;
        public Single FillTextureEffectAlphaPulseAmplitude
        {
            get => this._FillTextureEffectAlphaPulseAmplitude;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectAlphaPulseAmplitude, value, nameof(FillTextureEffectAlphaPulseAmplitude));
            }
        }
        #endregion
        #region FillTextureEffectAlphaPulseFrequency
        private Single _FillTextureEffectAlphaPulseFrequency;
        public Single FillTextureEffectAlphaPulseFrequency
        {
            get => this._FillTextureEffectAlphaPulseFrequency;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectAlphaPulseFrequency, value, nameof(FillTextureEffectAlphaPulseFrequency));
            }
        }
        #endregion
        #region FillTextureEffectTextureAnimationSpeedU
        private Single _FillTextureEffectTextureAnimationSpeedU;
        public Single FillTextureEffectTextureAnimationSpeedU
        {
            get => this._FillTextureEffectTextureAnimationSpeedU;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectTextureAnimationSpeedU, value, nameof(FillTextureEffectTextureAnimationSpeedU));
            }
        }
        #endregion
        #region FillTextureEffectTextureAnimationSpeedV
        private Single _FillTextureEffectTextureAnimationSpeedV;
        public Single FillTextureEffectTextureAnimationSpeedV
        {
            get => this._FillTextureEffectTextureAnimationSpeedV;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectTextureAnimationSpeedV, value, nameof(FillTextureEffectTextureAnimationSpeedV));
            }
        }
        #endregion
        #region EdgeEffectFallOff
        private Single _EdgeEffectFallOff;
        public Single EdgeEffectFallOff
        {
            get => this._EdgeEffectFallOff;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectFallOff, value, nameof(EdgeEffectFallOff));
            }
        }
        #endregion
        #region EdgeEffectColor
        private Color _EdgeEffectColor;
        public Color EdgeEffectColor
        {
            get => this._EdgeEffectColor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectColor, value, nameof(EdgeEffectColor));
            }
        }
        #endregion
        #region EdgeEffectAlphaFadeInTime
        private Single _EdgeEffectAlphaFadeInTime;
        public Single EdgeEffectAlphaFadeInTime
        {
            get => this._EdgeEffectAlphaFadeInTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectAlphaFadeInTime, value, nameof(EdgeEffectAlphaFadeInTime));
            }
        }
        #endregion
        #region EdgeEffectFullAlphaTime
        private Single _EdgeEffectFullAlphaTime;
        public Single EdgeEffectFullAlphaTime
        {
            get => this._EdgeEffectFullAlphaTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectFullAlphaTime, value, nameof(EdgeEffectFullAlphaTime));
            }
        }
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        private Single _EdgeEffectAlphaFadeOutTime;
        public Single EdgeEffectAlphaFadeOutTime
        {
            get => this._EdgeEffectAlphaFadeOutTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectAlphaFadeOutTime, value, nameof(EdgeEffectAlphaFadeOutTime));
            }
        }
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        private Single _EdgeEffectPersistentAlphaRatio;
        public Single EdgeEffectPersistentAlphaRatio
        {
            get => this._EdgeEffectPersistentAlphaRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectPersistentAlphaRatio, value, nameof(EdgeEffectPersistentAlphaRatio));
            }
        }
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        private Single _EdgeEffectAlphaPulseAmplitude;
        public Single EdgeEffectAlphaPulseAmplitude
        {
            get => this._EdgeEffectAlphaPulseAmplitude;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectAlphaPulseAmplitude, value, nameof(EdgeEffectAlphaPulseAmplitude));
            }
        }
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        private Single _EdgeEffectAlphaPulseFrequency;
        public Single EdgeEffectAlphaPulseFrequency
        {
            get => this._EdgeEffectAlphaPulseFrequency;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectAlphaPulseFrequency, value, nameof(EdgeEffectAlphaPulseFrequency));
            }
        }
        #endregion
        #region FillTextureEffectFullAlphaRatio
        private Single _FillTextureEffectFullAlphaRatio;
        public Single FillTextureEffectFullAlphaRatio
        {
            get => this._FillTextureEffectFullAlphaRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FillTextureEffectFullAlphaRatio, value, nameof(FillTextureEffectFullAlphaRatio));
            }
        }
        #endregion
        #region EdgeEffectFullAlphaRatio
        private Single _EdgeEffectFullAlphaRatio;
        public Single EdgeEffectFullAlphaRatio
        {
            get => this._EdgeEffectFullAlphaRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._EdgeEffectFullAlphaRatio, value, nameof(EdgeEffectFullAlphaRatio));
            }
        }
        #endregion
        #region MembraneShaderDestBlendMode
        private EffectShader.SourceBlendMode _MembraneShaderDestBlendMode;
        public EffectShader.SourceBlendMode MembraneShaderDestBlendMode
        {
            get => this._MembraneShaderDestBlendMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MembraneShaderDestBlendMode, value, nameof(MembraneShaderDestBlendMode));
            }
        }
        #endregion
        #region ParticleShaderSourceBlendMode
        private EffectShader.SourceBlendMode _ParticleShaderSourceBlendMode;
        public EffectShader.SourceBlendMode ParticleShaderSourceBlendMode
        {
            get => this._ParticleShaderSourceBlendMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderSourceBlendMode, value, nameof(ParticleShaderSourceBlendMode));
            }
        }
        #endregion
        #region ParticleShaderBlendOperation
        private EffectShader.BlendOperation _ParticleShaderBlendOperation;
        public EffectShader.BlendOperation ParticleShaderBlendOperation
        {
            get => this._ParticleShaderBlendOperation;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderBlendOperation, value, nameof(ParticleShaderBlendOperation));
            }
        }
        #endregion
        #region ParticleShaderZTestFunction
        private EffectShader.ZTestFunction _ParticleShaderZTestFunction;
        public EffectShader.ZTestFunction ParticleShaderZTestFunction
        {
            get => this._ParticleShaderZTestFunction;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderZTestFunction, value, nameof(ParticleShaderZTestFunction));
            }
        }
        #endregion
        #region ParticleShaderDestBlendMode
        private EffectShader.SourceBlendMode _ParticleShaderDestBlendMode;
        public EffectShader.SourceBlendMode ParticleShaderDestBlendMode
        {
            get => this._ParticleShaderDestBlendMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderDestBlendMode, value, nameof(ParticleShaderDestBlendMode));
            }
        }
        #endregion
        #region ParticleShaderParticleBirthRampUpTime
        private Single _ParticleShaderParticleBirthRampUpTime;
        public Single ParticleShaderParticleBirthRampUpTime
        {
            get => this._ParticleShaderParticleBirthRampUpTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderParticleBirthRampUpTime, value, nameof(ParticleShaderParticleBirthRampUpTime));
            }
        }
        #endregion
        #region ParticleShaderFullParticleBirthTime
        private Single _ParticleShaderFullParticleBirthTime;
        public Single ParticleShaderFullParticleBirthTime
        {
            get => this._ParticleShaderFullParticleBirthTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderFullParticleBirthTime, value, nameof(ParticleShaderFullParticleBirthTime));
            }
        }
        #endregion
        #region ParticleShaderParticleBirthRampDownTime
        private Single _ParticleShaderParticleBirthRampDownTime;
        public Single ParticleShaderParticleBirthRampDownTime
        {
            get => this._ParticleShaderParticleBirthRampDownTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderParticleBirthRampDownTime, value, nameof(ParticleShaderParticleBirthRampDownTime));
            }
        }
        #endregion
        #region ParticleShaderFullParticleBirthRatio
        private Single _ParticleShaderFullParticleBirthRatio;
        public Single ParticleShaderFullParticleBirthRatio
        {
            get => this._ParticleShaderFullParticleBirthRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderFullParticleBirthRatio, value, nameof(ParticleShaderFullParticleBirthRatio));
            }
        }
        #endregion
        #region ParticleShaderPersistentParticleBirthRatio
        private Single _ParticleShaderPersistentParticleBirthRatio;
        public Single ParticleShaderPersistentParticleBirthRatio
        {
            get => this._ParticleShaderPersistentParticleBirthRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderPersistentParticleBirthRatio, value, nameof(ParticleShaderPersistentParticleBirthRatio));
            }
        }
        #endregion
        #region ParticleShaderParticleLifetime
        private Single _ParticleShaderParticleLifetime;
        public Single ParticleShaderParticleLifetime
        {
            get => this._ParticleShaderParticleLifetime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderParticleLifetime, value, nameof(ParticleShaderParticleLifetime));
            }
        }
        #endregion
        #region ParticleShaderParticleLifetimePlusMinus
        private Single _ParticleShaderParticleLifetimePlusMinus;
        public Single ParticleShaderParticleLifetimePlusMinus
        {
            get => this._ParticleShaderParticleLifetimePlusMinus;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderParticleLifetimePlusMinus, value, nameof(ParticleShaderParticleLifetimePlusMinus));
            }
        }
        #endregion
        #region ParticleShaderInitialSpeedAlongNormal
        private Single _ParticleShaderInitialSpeedAlongNormal;
        public Single ParticleShaderInitialSpeedAlongNormal
        {
            get => this._ParticleShaderInitialSpeedAlongNormal;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderInitialSpeedAlongNormal, value, nameof(ParticleShaderInitialSpeedAlongNormal));
            }
        }
        #endregion
        #region ParticleShaderAccelerationAlongNormal
        private Single _ParticleShaderAccelerationAlongNormal;
        public Single ParticleShaderAccelerationAlongNormal
        {
            get => this._ParticleShaderAccelerationAlongNormal;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderAccelerationAlongNormal, value, nameof(ParticleShaderAccelerationAlongNormal));
            }
        }
        #endregion
        #region ParticleShaderInitialVelocity1
        private Single _ParticleShaderInitialVelocity1;
        public Single ParticleShaderInitialVelocity1
        {
            get => this._ParticleShaderInitialVelocity1;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderInitialVelocity1, value, nameof(ParticleShaderInitialVelocity1));
            }
        }
        #endregion
        #region ParticleShaderInitialVelocity2
        private Single _ParticleShaderInitialVelocity2;
        public Single ParticleShaderInitialVelocity2
        {
            get => this._ParticleShaderInitialVelocity2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderInitialVelocity2, value, nameof(ParticleShaderInitialVelocity2));
            }
        }
        #endregion
        #region ParticleShaderInitialVelocity3
        private Single _ParticleShaderInitialVelocity3;
        public Single ParticleShaderInitialVelocity3
        {
            get => this._ParticleShaderInitialVelocity3;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderInitialVelocity3, value, nameof(ParticleShaderInitialVelocity3));
            }
        }
        #endregion
        #region ParticleShaderAcceleration1
        private Single _ParticleShaderAcceleration1;
        public Single ParticleShaderAcceleration1
        {
            get => this._ParticleShaderAcceleration1;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderAcceleration1, value, nameof(ParticleShaderAcceleration1));
            }
        }
        #endregion
        #region ParticleShaderAcceleration2
        private Single _ParticleShaderAcceleration2;
        public Single ParticleShaderAcceleration2
        {
            get => this._ParticleShaderAcceleration2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderAcceleration2, value, nameof(ParticleShaderAcceleration2));
            }
        }
        #endregion
        #region ParticleShaderAcceleration3
        private Single _ParticleShaderAcceleration3;
        public Single ParticleShaderAcceleration3
        {
            get => this._ParticleShaderAcceleration3;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderAcceleration3, value, nameof(ParticleShaderAcceleration3));
            }
        }
        #endregion
        #region ParticleShaderScaleKey1
        private Single _ParticleShaderScaleKey1;
        public Single ParticleShaderScaleKey1
        {
            get => this._ParticleShaderScaleKey1;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderScaleKey1, value, nameof(ParticleShaderScaleKey1));
            }
        }
        #endregion
        #region ParticleShaderScaleKey2
        private Single _ParticleShaderScaleKey2;
        public Single ParticleShaderScaleKey2
        {
            get => this._ParticleShaderScaleKey2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderScaleKey2, value, nameof(ParticleShaderScaleKey2));
            }
        }
        #endregion
        #region ParticleShaderScaleKey1Time
        private Single _ParticleShaderScaleKey1Time;
        public Single ParticleShaderScaleKey1Time
        {
            get => this._ParticleShaderScaleKey1Time;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderScaleKey1Time, value, nameof(ParticleShaderScaleKey1Time));
            }
        }
        #endregion
        #region ParticleShaderScaleKey2Time
        private Single _ParticleShaderScaleKey2Time;
        public Single ParticleShaderScaleKey2Time
        {
            get => this._ParticleShaderScaleKey2Time;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ParticleShaderScaleKey2Time, value, nameof(ParticleShaderScaleKey2Time));
            }
        }
        #endregion
        #region ColorKey1Color
        private Color _ColorKey1Color;
        public Color ColorKey1Color
        {
            get => this._ColorKey1Color;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey1Color, value, nameof(ColorKey1Color));
            }
        }
        #endregion
        #region ColorKey2Color
        private Color _ColorKey2Color;
        public Color ColorKey2Color
        {
            get => this._ColorKey2Color;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey2Color, value, nameof(ColorKey2Color));
            }
        }
        #endregion
        #region ColorKey3Color
        private Color _ColorKey3Color;
        public Color ColorKey3Color
        {
            get => this._ColorKey3Color;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey3Color, value, nameof(ColorKey3Color));
            }
        }
        #endregion
        #region ColorKey1ColorAlpha
        private Single _ColorKey1ColorAlpha;
        public Single ColorKey1ColorAlpha
        {
            get => this._ColorKey1ColorAlpha;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey1ColorAlpha, value, nameof(ColorKey1ColorAlpha));
            }
        }
        #endregion
        #region ColorKey2ColorAlpha
        private Single _ColorKey2ColorAlpha;
        public Single ColorKey2ColorAlpha
        {
            get => this._ColorKey2ColorAlpha;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey2ColorAlpha, value, nameof(ColorKey2ColorAlpha));
            }
        }
        #endregion
        #region ColorKey3ColorAlpha
        private Single _ColorKey3ColorAlpha;
        public Single ColorKey3ColorAlpha
        {
            get => this._ColorKey3ColorAlpha;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey3ColorAlpha, value, nameof(ColorKey3ColorAlpha));
            }
        }
        #endregion
        #region ColorKey1ColorKeyTime
        private Single _ColorKey1ColorKeyTime;
        public Single ColorKey1ColorKeyTime
        {
            get => this._ColorKey1ColorKeyTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey1ColorKeyTime, value, nameof(ColorKey1ColorKeyTime));
            }
        }
        #endregion
        #region ColorKey2ColorKeyTime
        private Single _ColorKey2ColorKeyTime;
        public Single ColorKey2ColorKeyTime
        {
            get => this._ColorKey2ColorKeyTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey2ColorKeyTime, value, nameof(ColorKey2ColorKeyTime));
            }
        }
        #endregion
        #region ColorKey3ColorKeyTime
        private Single _ColorKey3ColorKeyTime;
        public Single ColorKey3ColorKeyTime
        {
            get => this._ColorKey3ColorKeyTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.RaiseAndSetIfChanged(ref this._ColorKey3ColorKeyTime, value, nameof(ColorKey3ColorKeyTime));
            }
        }
        #endregion

        IMask<bool> IEqualsMask<EffectShader>.GetEqualsMask(EffectShader rhs, EqualsMaskHelper.Include include) => EffectShaderCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IEffectShaderGetter>.GetEqualsMask(IEffectShaderGetter rhs, EqualsMaskHelper.Include include) => EffectShaderCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            EffectShader_Mask<bool> printMask = null)
        {
            return EffectShaderCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            EffectShaderCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new EffectShader_Mask<bool> GetHasBeenSetMask()
        {
            return EffectShaderCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is EffectShader rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(EffectShader rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (FillTexture_IsSet != rhs.FillTexture_IsSet) return false;
            if (FillTexture_IsSet)
            {
                if (!object.Equals(this.FillTexture, rhs.FillTexture)) return false;
            }
            if (ParticleShaderTexture_IsSet != rhs.ParticleShaderTexture_IsSet) return false;
            if (ParticleShaderTexture_IsSet)
            {
                if (!object.Equals(this.ParticleShaderTexture, rhs.ParticleShaderTexture)) return false;
            }
            if (this.Flags != rhs.Flags) return false;
            if (this.MembraneShaderSourceBlendMode != rhs.MembraneShaderSourceBlendMode) return false;
            if (this.MembraneShaderBlendOperation != rhs.MembraneShaderBlendOperation) return false;
            if (this.MembraneShaderZTestFunction != rhs.MembraneShaderZTestFunction) return false;
            if (!this.FillTextureEffectColor.ColorOnlyEquals(rhs.FillTextureEffectColor)) return false;
            if (!this.FillTextureEffectAlphaFadeInTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeInTime)) return false;
            if (!this.FillTextureEffectFullAlphaTime.EqualsWithin(rhs.FillTextureEffectFullAlphaTime)) return false;
            if (!this.FillTextureEffectAlphaFadeOutTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeOutTime)) return false;
            if (!this.FillTextureEffectPersistentAlphaRatio.EqualsWithin(rhs.FillTextureEffectPersistentAlphaRatio)) return false;
            if (!this.FillTextureEffectAlphaPulseAmplitude.EqualsWithin(rhs.FillTextureEffectAlphaPulseAmplitude)) return false;
            if (!this.FillTextureEffectAlphaPulseFrequency.EqualsWithin(rhs.FillTextureEffectAlphaPulseFrequency)) return false;
            if (!this.FillTextureEffectTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedU)) return false;
            if (!this.FillTextureEffectTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedV)) return false;
            if (!this.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff)) return false;
            if (!this.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor)) return false;
            if (!this.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime)) return false;
            if (!this.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime)) return false;
            if (!this.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime)) return false;
            if (!this.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio)) return false;
            if (!this.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude)) return false;
            if (!this.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency)) return false;
            if (!this.FillTextureEffectFullAlphaRatio.EqualsWithin(rhs.FillTextureEffectFullAlphaRatio)) return false;
            if (!this.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio)) return false;
            if (this.MembraneShaderDestBlendMode != rhs.MembraneShaderDestBlendMode) return false;
            if (this.ParticleShaderSourceBlendMode != rhs.ParticleShaderSourceBlendMode) return false;
            if (this.ParticleShaderBlendOperation != rhs.ParticleShaderBlendOperation) return false;
            if (this.ParticleShaderZTestFunction != rhs.ParticleShaderZTestFunction) return false;
            if (this.ParticleShaderDestBlendMode != rhs.ParticleShaderDestBlendMode) return false;
            if (!this.ParticleShaderParticleBirthRampUpTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampUpTime)) return false;
            if (!this.ParticleShaderFullParticleBirthTime.EqualsWithin(rhs.ParticleShaderFullParticleBirthTime)) return false;
            if (!this.ParticleShaderParticleBirthRampDownTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampDownTime)) return false;
            if (!this.ParticleShaderFullParticleBirthRatio.EqualsWithin(rhs.ParticleShaderFullParticleBirthRatio)) return false;
            if (!this.ParticleShaderPersistentParticleBirthRatio.EqualsWithin(rhs.ParticleShaderPersistentParticleBirthRatio)) return false;
            if (!this.ParticleShaderParticleLifetime.EqualsWithin(rhs.ParticleShaderParticleLifetime)) return false;
            if (!this.ParticleShaderParticleLifetimePlusMinus.EqualsWithin(rhs.ParticleShaderParticleLifetimePlusMinus)) return false;
            if (!this.ParticleShaderInitialSpeedAlongNormal.EqualsWithin(rhs.ParticleShaderInitialSpeedAlongNormal)) return false;
            if (!this.ParticleShaderAccelerationAlongNormal.EqualsWithin(rhs.ParticleShaderAccelerationAlongNormal)) return false;
            if (!this.ParticleShaderInitialVelocity1.EqualsWithin(rhs.ParticleShaderInitialVelocity1)) return false;
            if (!this.ParticleShaderInitialVelocity2.EqualsWithin(rhs.ParticleShaderInitialVelocity2)) return false;
            if (!this.ParticleShaderInitialVelocity3.EqualsWithin(rhs.ParticleShaderInitialVelocity3)) return false;
            if (!this.ParticleShaderAcceleration1.EqualsWithin(rhs.ParticleShaderAcceleration1)) return false;
            if (!this.ParticleShaderAcceleration2.EqualsWithin(rhs.ParticleShaderAcceleration2)) return false;
            if (!this.ParticleShaderAcceleration3.EqualsWithin(rhs.ParticleShaderAcceleration3)) return false;
            if (!this.ParticleShaderScaleKey1.EqualsWithin(rhs.ParticleShaderScaleKey1)) return false;
            if (!this.ParticleShaderScaleKey2.EqualsWithin(rhs.ParticleShaderScaleKey2)) return false;
            if (!this.ParticleShaderScaleKey1Time.EqualsWithin(rhs.ParticleShaderScaleKey1Time)) return false;
            if (!this.ParticleShaderScaleKey2Time.EqualsWithin(rhs.ParticleShaderScaleKey2Time)) return false;
            if (!this.ColorKey1Color.ColorOnlyEquals(rhs.ColorKey1Color)) return false;
            if (!this.ColorKey2Color.ColorOnlyEquals(rhs.ColorKey2Color)) return false;
            if (!this.ColorKey3Color.ColorOnlyEquals(rhs.ColorKey3Color)) return false;
            if (!this.ColorKey1ColorAlpha.EqualsWithin(rhs.ColorKey1ColorAlpha)) return false;
            if (!this.ColorKey2ColorAlpha.EqualsWithin(rhs.ColorKey2ColorAlpha)) return false;
            if (!this.ColorKey3ColorAlpha.EqualsWithin(rhs.ColorKey3ColorAlpha)) return false;
            if (!this.ColorKey1ColorKeyTime.EqualsWithin(rhs.ColorKey1ColorKeyTime)) return false;
            if (!this.ColorKey2ColorKeyTime.EqualsWithin(rhs.ColorKey2ColorKeyTime)) return false;
            if (!this.ColorKey3ColorKeyTime.EqualsWithin(rhs.ColorKey3ColorKeyTime)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (FillTexture_IsSet)
            {
                ret = HashHelper.GetHashCode(FillTexture).CombineHashCode(ret);
            }
            if (ParticleShaderTexture_IsSet)
            {
                ret = HashHelper.GetHashCode(ParticleShaderTexture).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MembraneShaderSourceBlendMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MembraneShaderBlendOperation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MembraneShaderZTestFunction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectAlphaFadeInTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectFullAlphaTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectAlphaFadeOutTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectPersistentAlphaRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectAlphaPulseAmplitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectAlphaPulseFrequency).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectTextureAnimationSpeedU).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectTextureAnimationSpeedV).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectFallOff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectAlphaFadeInTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectFullAlphaTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectAlphaFadeOutTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectPersistentAlphaRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectAlphaPulseAmplitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectAlphaPulseFrequency).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FillTextureEffectFullAlphaRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EdgeEffectFullAlphaRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MembraneShaderDestBlendMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderSourceBlendMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderBlendOperation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderZTestFunction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderDestBlendMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderParticleBirthRampUpTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderFullParticleBirthTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderParticleBirthRampDownTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderFullParticleBirthRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderPersistentParticleBirthRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderParticleLifetime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderParticleLifetimePlusMinus).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderInitialSpeedAlongNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderAccelerationAlongNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderInitialVelocity1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderInitialVelocity2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderInitialVelocity3).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderAcceleration1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderAcceleration2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderAcceleration3).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderScaleKey1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderScaleKey2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderScaleKey1Time).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParticleShaderScaleKey2Time).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey1Color).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey2Color).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey3Color).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey1ColorAlpha).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey2ColorAlpha).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey3ColorAlpha).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey1ColorKeyTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey2ColorKeyTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorKey3ColorKeyTime).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static EffectShader Create_Xml(
            XElement node,
            EffectShader_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static EffectShader Create_Xml(
            XElement node,
            out EffectShader_ErrorMask errorMask,
            bool doMasks = true,
            EffectShader_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static EffectShader Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new EffectShader();
            try
            {
                ret.DATADataTypeState |= EffectShader.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    EffectShaderCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static EffectShader Create_Xml(
            string path,
            EffectShader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static EffectShader Create_Xml(
            string path,
            out EffectShader_ErrorMask errorMask,
            EffectShader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EffectShader Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            EffectShader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static EffectShader Create_Xml(
            Stream stream,
            EffectShader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static EffectShader Create_Xml(
            Stream stream,
            out EffectShader_ErrorMask errorMask,
            EffectShader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EffectShader Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            EffectShader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out EffectShader_ErrorMask errorMask,
            EffectShader_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<EffectShader>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out EffectShader_ErrorMask errorMask,
            EffectShader_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out EffectShader_ErrorMask errorMask,
            EffectShader_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            OblivionMajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out EffectShader_ErrorMask errorMask,
            bool doMasks = true,
            EffectShader_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out EffectShader_ErrorMask errorMask,
            EffectShader_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out EffectShader_ErrorMask errorMask,
            EffectShader_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            EffectShaderCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            EffectShader item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= EffectShader.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((EffectShader_FieldIndex)index)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    return _hasBeenSetTracker[index];
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = EffectShader_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        public EffectShader(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(EffectShader obj, EffectShader rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new EffectShader(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static EffectShader Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static EffectShader Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out EffectShader_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static EffectShader Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<EffectShader>(
                record: new EffectShader(),
                frame: frame,
                errorMask: errorMask,
                recType: EffectShader_Registration.EFSH_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static EffectShader Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static EffectShader Create_Binary(
            string path,
            MasterReferences masterReferences,
            out EffectShader_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static EffectShader Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static EffectShader Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static EffectShader Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out EffectShader_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static EffectShader Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out EffectShader_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out EffectShader_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out EffectShader_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            EffectShaderCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            EffectShader item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            EffectShader item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTexture);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String FillTextureParse,
                            errorMask: errorMask))
                        {
                            item.FillTexture = FillTextureParse;
                        }
                        else
                        {
                            item.FillTexture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.FillTexture);
                case 0x324F4349: // ICO2
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderTexture);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String ParticleShaderTextureParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderTexture = ParticleShaderTextureParse;
                        }
                        else
                        {
                            item.ParticleShaderTexture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.ParticleShaderTexture);
                case 0x41544144: // DATA
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.Flags);
                            if (EnumBinaryTranslation<EffectShader.Flag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.Flag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.Flags = default(EffectShader.Flag);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode);
                            if (EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.SourceBlendMode MembraneShaderSourceBlendModeParse,
                                errorMask: errorMask))
                            {
                                item.MembraneShaderSourceBlendMode = MembraneShaderSourceBlendModeParse;
                            }
                            else
                            {
                                item.MembraneShaderSourceBlendMode = default(EffectShader.SourceBlendMode);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderBlendOperation);
                            if (EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.BlendOperation MembraneShaderBlendOperationParse,
                                errorMask: errorMask))
                            {
                                item.MembraneShaderBlendOperation = MembraneShaderBlendOperationParse;
                            }
                            else
                            {
                                item.MembraneShaderBlendOperation = default(EffectShader.BlendOperation);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderZTestFunction);
                            if (EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.ZTestFunction MembraneShaderZTestFunctionParse,
                                errorMask: errorMask))
                            {
                                item.MembraneShaderZTestFunction = MembraneShaderZTestFunctionParse;
                            }
                            else
                            {
                                item.MembraneShaderZTestFunction = default(EffectShader.ZTestFunction);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectColor);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                extraByte: true,
                                item: out Color FillTextureEffectColorParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectColor = FillTextureEffectColorParse;
                            }
                            else
                            {
                                item.FillTextureEffectColor = default(Color);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectAlphaFadeInTimeParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectAlphaFadeInTime = FillTextureEffectAlphaFadeInTimeParse;
                            }
                            else
                            {
                                item.FillTextureEffectAlphaFadeInTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectFullAlphaTimeParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectFullAlphaTime = FillTextureEffectFullAlphaTimeParse;
                            }
                            else
                            {
                                item.FillTextureEffectFullAlphaTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectAlphaFadeOutTimeParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectAlphaFadeOutTime = FillTextureEffectAlphaFadeOutTimeParse;
                            }
                            else
                            {
                                item.FillTextureEffectAlphaFadeOutTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectPersistentAlphaRatioParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectPersistentAlphaRatio = FillTextureEffectPersistentAlphaRatioParse;
                            }
                            else
                            {
                                item.FillTextureEffectPersistentAlphaRatio = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectAlphaPulseAmplitudeParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectAlphaPulseAmplitude = FillTextureEffectAlphaPulseAmplitudeParse;
                            }
                            else
                            {
                                item.FillTextureEffectAlphaPulseAmplitude = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectAlphaPulseFrequencyParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectAlphaPulseFrequency = FillTextureEffectAlphaPulseFrequencyParse;
                            }
                            else
                            {
                                item.FillTextureEffectAlphaPulseFrequency = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectTextureAnimationSpeedUParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectTextureAnimationSpeedU = FillTextureEffectTextureAnimationSpeedUParse;
                            }
                            else
                            {
                                item.FillTextureEffectTextureAnimationSpeedU = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectTextureAnimationSpeedVParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectTextureAnimationSpeedV = FillTextureEffectTextureAnimationSpeedVParse;
                            }
                            else
                            {
                                item.FillTextureEffectTextureAnimationSpeedV = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFallOff);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single EdgeEffectFallOffParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectFallOff = EdgeEffectFallOffParse;
                            }
                            else
                            {
                                item.EdgeEffectFallOff = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectColor);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                extraByte: true,
                                item: out Color EdgeEffectColorParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectColor = EdgeEffectColorParse;
                            }
                            else
                            {
                                item.EdgeEffectColor = default(Color);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single EdgeEffectAlphaFadeInTimeParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectAlphaFadeInTime = EdgeEffectAlphaFadeInTimeParse;
                            }
                            else
                            {
                                item.EdgeEffectAlphaFadeInTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single EdgeEffectFullAlphaTimeParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectFullAlphaTime = EdgeEffectFullAlphaTimeParse;
                            }
                            else
                            {
                                item.EdgeEffectFullAlphaTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single EdgeEffectAlphaFadeOutTimeParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectAlphaFadeOutTime = EdgeEffectAlphaFadeOutTimeParse;
                            }
                            else
                            {
                                item.EdgeEffectAlphaFadeOutTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single EdgeEffectPersistentAlphaRatioParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectPersistentAlphaRatio = EdgeEffectPersistentAlphaRatioParse;
                            }
                            else
                            {
                                item.EdgeEffectPersistentAlphaRatio = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single EdgeEffectAlphaPulseAmplitudeParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectAlphaPulseAmplitude = EdgeEffectAlphaPulseAmplitudeParse;
                            }
                            else
                            {
                                item.EdgeEffectAlphaPulseAmplitude = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single EdgeEffectAlphaPulseFrequencyParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectAlphaPulseFrequency = EdgeEffectAlphaPulseFrequencyParse;
                            }
                            else
                            {
                                item.EdgeEffectAlphaPulseFrequency = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FillTextureEffectFullAlphaRatioParse,
                                errorMask: errorMask))
                            {
                                item.FillTextureEffectFullAlphaRatio = FillTextureEffectFullAlphaRatioParse;
                            }
                            else
                            {
                                item.FillTextureEffectFullAlphaRatio = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single EdgeEffectFullAlphaRatioParse,
                                errorMask: errorMask))
                            {
                                item.EdgeEffectFullAlphaRatio = EdgeEffectFullAlphaRatioParse;
                            }
                            else
                            {
                                item.EdgeEffectFullAlphaRatio = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode);
                            if (EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.SourceBlendMode MembraneShaderDestBlendModeParse,
                                errorMask: errorMask))
                            {
                                item.MembraneShaderDestBlendMode = MembraneShaderDestBlendModeParse;
                            }
                            else
                            {
                                item.MembraneShaderDestBlendMode = default(EffectShader.SourceBlendMode);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break0;
                            return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode);
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode);
                            if (EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.SourceBlendMode ParticleShaderSourceBlendModeParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderSourceBlendMode = ParticleShaderSourceBlendModeParse;
                            }
                            else
                            {
                                item.ParticleShaderSourceBlendMode = default(EffectShader.SourceBlendMode);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderBlendOperation);
                            if (EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.BlendOperation ParticleShaderBlendOperationParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderBlendOperation = ParticleShaderBlendOperationParse;
                            }
                            else
                            {
                                item.ParticleShaderBlendOperation = default(EffectShader.BlendOperation);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderZTestFunction);
                            if (EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.ZTestFunction ParticleShaderZTestFunctionParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderZTestFunction = ParticleShaderZTestFunctionParse;
                            }
                            else
                            {
                                item.ParticleShaderZTestFunction = default(EffectShader.ZTestFunction);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderDestBlendMode);
                            if (EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out EffectShader.SourceBlendMode ParticleShaderDestBlendModeParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderDestBlendMode = ParticleShaderDestBlendModeParse;
                            }
                            else
                            {
                                item.ParticleShaderDestBlendMode = default(EffectShader.SourceBlendMode);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderParticleBirthRampUpTimeParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderParticleBirthRampUpTime = ParticleShaderParticleBirthRampUpTimeParse;
                            }
                            else
                            {
                                item.ParticleShaderParticleBirthRampUpTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderFullParticleBirthTimeParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderFullParticleBirthTime = ParticleShaderFullParticleBirthTimeParse;
                            }
                            else
                            {
                                item.ParticleShaderFullParticleBirthTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderParticleBirthRampDownTimeParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderParticleBirthRampDownTime = ParticleShaderParticleBirthRampDownTimeParse;
                            }
                            else
                            {
                                item.ParticleShaderParticleBirthRampDownTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderFullParticleBirthRatioParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderFullParticleBirthRatio = ParticleShaderFullParticleBirthRatioParse;
                            }
                            else
                            {
                                item.ParticleShaderFullParticleBirthRatio = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderPersistentParticleBirthRatioParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderPersistentParticleBirthRatio = ParticleShaderPersistentParticleBirthRatioParse;
                            }
                            else
                            {
                                item.ParticleShaderPersistentParticleBirthRatio = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleLifetime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderParticleLifetimeParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderParticleLifetime = ParticleShaderParticleLifetimeParse;
                            }
                            else
                            {
                                item.ParticleShaderParticleLifetime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderParticleLifetimePlusMinusParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderParticleLifetimePlusMinus = ParticleShaderParticleLifetimePlusMinusParse;
                            }
                            else
                            {
                                item.ParticleShaderParticleLifetimePlusMinus = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderInitialSpeedAlongNormalParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderInitialSpeedAlongNormal = ParticleShaderInitialSpeedAlongNormalParse;
                            }
                            else
                            {
                                item.ParticleShaderInitialSpeedAlongNormal = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderAccelerationAlongNormalParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderAccelerationAlongNormal = ParticleShaderAccelerationAlongNormalParse;
                            }
                            else
                            {
                                item.ParticleShaderAccelerationAlongNormal = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderInitialVelocity1Parse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderInitialVelocity1 = ParticleShaderInitialVelocity1Parse;
                            }
                            else
                            {
                                item.ParticleShaderInitialVelocity1 = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderInitialVelocity2Parse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderInitialVelocity2 = ParticleShaderInitialVelocity2Parse;
                            }
                            else
                            {
                                item.ParticleShaderInitialVelocity2 = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderInitialVelocity3Parse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderInitialVelocity3 = ParticleShaderInitialVelocity3Parse;
                            }
                            else
                            {
                                item.ParticleShaderInitialVelocity3 = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration1);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderAcceleration1Parse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderAcceleration1 = ParticleShaderAcceleration1Parse;
                            }
                            else
                            {
                                item.ParticleShaderAcceleration1 = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration2);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderAcceleration2Parse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderAcceleration2 = ParticleShaderAcceleration2Parse;
                            }
                            else
                            {
                                item.ParticleShaderAcceleration2 = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration3);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderAcceleration3Parse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderAcceleration3 = ParticleShaderAcceleration3Parse;
                            }
                            else
                            {
                                item.ParticleShaderAcceleration3 = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey1);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderScaleKey1Parse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderScaleKey1 = ParticleShaderScaleKey1Parse;
                            }
                            else
                            {
                                item.ParticleShaderScaleKey1 = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey2);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderScaleKey2Parse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderScaleKey2 = ParticleShaderScaleKey2Parse;
                            }
                            else
                            {
                                item.ParticleShaderScaleKey2 = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderScaleKey1TimeParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderScaleKey1Time = ParticleShaderScaleKey1TimeParse;
                            }
                            else
                            {
                                item.ParticleShaderScaleKey1Time = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ParticleShaderScaleKey2TimeParse,
                                errorMask: errorMask))
                            {
                                item.ParticleShaderScaleKey2Time = ParticleShaderScaleKey2TimeParse;
                            }
                            else
                            {
                                item.ParticleShaderScaleKey2Time = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1Color);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                extraByte: true,
                                item: out Color ColorKey1ColorParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey1Color = ColorKey1ColorParse;
                            }
                            else
                            {
                                item.ColorKey1Color = default(Color);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2Color);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                extraByte: true,
                                item: out Color ColorKey2ColorParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey2Color = ColorKey2ColorParse;
                            }
                            else
                            {
                                item.ColorKey2Color = default(Color);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3Color);
                            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                extraByte: true,
                                item: out Color ColorKey3ColorParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey3Color = ColorKey3ColorParse;
                            }
                            else
                            {
                                item.ColorKey3Color = default(Color);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1ColorAlpha);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ColorKey1ColorAlphaParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey1ColorAlpha = ColorKey1ColorAlphaParse;
                            }
                            else
                            {
                                item.ColorKey1ColorAlpha = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2ColorAlpha);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ColorKey2ColorAlphaParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey2ColorAlpha = ColorKey2ColorAlphaParse;
                            }
                            else
                            {
                                item.ColorKey2ColorAlpha = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3ColorAlpha);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ColorKey3ColorAlphaParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey3ColorAlpha = ColorKey3ColorAlphaParse;
                            }
                            else
                            {
                                item.ColorKey3ColorAlpha = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1ColorKeyTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ColorKey1ColorKeyTimeParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey1ColorKeyTime = ColorKey1ColorKeyTimeParse;
                            }
                            else
                            {
                                item.ColorKey1ColorKeyTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2ColorKeyTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ColorKey2ColorKeyTimeParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey2ColorKeyTime = ColorKey2ColorKeyTimeParse;
                            }
                            else
                            {
                                item.ColorKey2ColorKeyTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ColorKey3ColorKeyTimeParse,
                                errorMask: errorMask))
                            {
                                item.ColorKey3ColorKeyTime = ColorKey3ColorKeyTimeParse;
                            }
                            else
                            {
                                item.ColorKey3ColorKeyTime = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime);
                default:
                    return OblivionMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public EffectShader Copy(
            EffectShader_CopyMask copyMask = null,
            IEffectShaderGetter def = null)
        {
            return EffectShader.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static EffectShader Copy(
            IEffectShader item,
            EffectShader_CopyMask copyMask = null,
            IEffectShaderGetter def = null)
        {
            EffectShader ret;
            if (item.GetType().Equals(typeof(EffectShader)))
            {
                ret = new EffectShader();
            }
            else
            {
                ret = (EffectShader)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static EffectShader Copy_ToLoqui(
            IEffectShaderGetter item,
            EffectShader_CopyMask copyMask = null,
            IEffectShaderGetter def = null)
        {
            EffectShader ret;
            if (item.GetType().Equals(typeof(EffectShader)))
            {
                ret = new EffectShader() as EffectShader;
            }
            else
            {
                ret = (EffectShader)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IEffectShaderGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEffectShaderGetter rhs,
            EffectShader_CopyMask copyMask,
            IEffectShaderGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEffectShaderGetter rhs,
            out EffectShader_ErrorMask errorMask,
            EffectShader_CopyMask copyMask = null,
            IEffectShaderGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EffectShaderCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IEffectShaderGetter rhs,
            ErrorMaskBuilder errorMask,
            EffectShader_CopyMask copyMask = null,
            IEffectShaderGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            EffectShaderCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    this.FillTexture = (String)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    this.ParticleShaderTexture = (String)obj;
                    break;
                case EffectShader_FieldIndex.Flags:
                    this.Flags = (EffectShader.Flag)obj;
                    break;
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    this.MembraneShaderSourceBlendMode = (EffectShader.SourceBlendMode)obj;
                    break;
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    this.MembraneShaderBlendOperation = (EffectShader.BlendOperation)obj;
                    break;
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    this.MembraneShaderZTestFunction = (EffectShader.ZTestFunction)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    this.FillTextureEffectColor = (Color)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    this.FillTextureEffectAlphaFadeInTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    this.FillTextureEffectFullAlphaTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    this.FillTextureEffectAlphaFadeOutTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    this.FillTextureEffectPersistentAlphaRatio = (Single)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    this.FillTextureEffectAlphaPulseAmplitude = (Single)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    this.FillTextureEffectAlphaPulseFrequency = (Single)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    this.FillTextureEffectTextureAnimationSpeedU = (Single)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    this.FillTextureEffectTextureAnimationSpeedV = (Single)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    this.EdgeEffectFallOff = (Single)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectColor:
                    this.EdgeEffectColor = (Color)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    this.EdgeEffectAlphaFadeInTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    this.EdgeEffectFullAlphaTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    this.EdgeEffectAlphaFadeOutTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    this.EdgeEffectPersistentAlphaRatio = (Single)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    this.EdgeEffectAlphaPulseAmplitude = (Single)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    this.EdgeEffectAlphaPulseFrequency = (Single)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    this.FillTextureEffectFullAlphaRatio = (Single)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    this.EdgeEffectFullAlphaRatio = (Single)obj;
                    break;
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    this.MembraneShaderDestBlendMode = (EffectShader.SourceBlendMode)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    this.ParticleShaderSourceBlendMode = (EffectShader.SourceBlendMode)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    this.ParticleShaderBlendOperation = (EffectShader.BlendOperation)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    this.ParticleShaderZTestFunction = (EffectShader.ZTestFunction)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    this.ParticleShaderDestBlendMode = (EffectShader.SourceBlendMode)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    this.ParticleShaderParticleBirthRampUpTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    this.ParticleShaderFullParticleBirthTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    this.ParticleShaderParticleBirthRampDownTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    this.ParticleShaderFullParticleBirthRatio = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    this.ParticleShaderPersistentParticleBirthRatio = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    this.ParticleShaderParticleLifetime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    this.ParticleShaderParticleLifetimePlusMinus = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    this.ParticleShaderInitialSpeedAlongNormal = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    this.ParticleShaderAccelerationAlongNormal = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    this.ParticleShaderInitialVelocity1 = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    this.ParticleShaderInitialVelocity2 = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    this.ParticleShaderInitialVelocity3 = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    this.ParticleShaderAcceleration1 = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    this.ParticleShaderAcceleration2 = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    this.ParticleShaderAcceleration3 = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    this.ParticleShaderScaleKey1 = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    this.ParticleShaderScaleKey2 = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    this.ParticleShaderScaleKey1Time = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    this.ParticleShaderScaleKey2Time = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey1Color:
                    this.ColorKey1Color = (Color)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey2Color:
                    this.ColorKey2Color = (Color)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey3Color:
                    this.ColorKey3Color = (Color)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    this.ColorKey1ColorAlpha = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    this.ColorKey2ColorAlpha = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    this.ColorKey3ColorAlpha = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    this.ColorKey1ColorKeyTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    this.ColorKey2ColorKeyTime = (Single)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    this.ColorKey3ColorKeyTime = (Single)obj;
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            EffectShaderCommon.Clear(this, cmds);
        }


        public new static EffectShader Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new EffectShader();
            foreach (var pair in fields)
            {
                CopyInInternal_EffectShader(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_EffectShader(EffectShader obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out EffectShader_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    obj.FillTexture = (String)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    obj.ParticleShaderTexture = (String)pair.Value;
                    break;
                case EffectShader_FieldIndex.Flags:
                    obj.Flags = (EffectShader.Flag)pair.Value;
                    break;
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    obj.MembraneShaderSourceBlendMode = (EffectShader.SourceBlendMode)pair.Value;
                    break;
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    obj.MembraneShaderBlendOperation = (EffectShader.BlendOperation)pair.Value;
                    break;
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    obj.MembraneShaderZTestFunction = (EffectShader.ZTestFunction)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    obj.FillTextureEffectColor = (Color)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    obj.FillTextureEffectAlphaFadeInTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    obj.FillTextureEffectFullAlphaTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    obj.FillTextureEffectAlphaFadeOutTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    obj.FillTextureEffectPersistentAlphaRatio = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    obj.FillTextureEffectAlphaPulseAmplitude = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    obj.FillTextureEffectAlphaPulseFrequency = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    obj.FillTextureEffectTextureAnimationSpeedU = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    obj.FillTextureEffectTextureAnimationSpeedV = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    obj.EdgeEffectFallOff = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectColor:
                    obj.EdgeEffectColor = (Color)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    obj.EdgeEffectAlphaFadeInTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    obj.EdgeEffectFullAlphaTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    obj.EdgeEffectAlphaFadeOutTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    obj.EdgeEffectPersistentAlphaRatio = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    obj.EdgeEffectAlphaPulseAmplitude = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    obj.EdgeEffectAlphaPulseFrequency = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    obj.FillTextureEffectFullAlphaRatio = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    obj.EdgeEffectFullAlphaRatio = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    obj.MembraneShaderDestBlendMode = (EffectShader.SourceBlendMode)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    obj.ParticleShaderSourceBlendMode = (EffectShader.SourceBlendMode)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    obj.ParticleShaderBlendOperation = (EffectShader.BlendOperation)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    obj.ParticleShaderZTestFunction = (EffectShader.ZTestFunction)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    obj.ParticleShaderDestBlendMode = (EffectShader.SourceBlendMode)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    obj.ParticleShaderParticleBirthRampUpTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    obj.ParticleShaderFullParticleBirthTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    obj.ParticleShaderParticleBirthRampDownTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    obj.ParticleShaderFullParticleBirthRatio = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    obj.ParticleShaderPersistentParticleBirthRatio = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    obj.ParticleShaderParticleLifetime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    obj.ParticleShaderParticleLifetimePlusMinus = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    obj.ParticleShaderInitialSpeedAlongNormal = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    obj.ParticleShaderAccelerationAlongNormal = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    obj.ParticleShaderInitialVelocity1 = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    obj.ParticleShaderInitialVelocity2 = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    obj.ParticleShaderInitialVelocity3 = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    obj.ParticleShaderAcceleration1 = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    obj.ParticleShaderAcceleration2 = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    obj.ParticleShaderAcceleration3 = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    obj.ParticleShaderScaleKey1 = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    obj.ParticleShaderScaleKey2 = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    obj.ParticleShaderScaleKey1Time = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    obj.ParticleShaderScaleKey2Time = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey1Color:
                    obj.ColorKey1Color = (Color)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey2Color:
                    obj.ColorKey2Color = (Color)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey3Color:
                    obj.ColorKey3Color = (Color)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    obj.ColorKey1ColorAlpha = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    obj.ColorKey2ColorAlpha = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    obj.ColorKey3ColorAlpha = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    obj.ColorKey1ColorKeyTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    obj.ColorKey2ColorKeyTime = (Single)pair.Value;
                    break;
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    obj.ColorKey3ColorKeyTime = (Single)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IEffectShader : IEffectShaderGetter, IOblivionMajorRecord, ILoquiClass<IEffectShader, IEffectShaderGetter>, ILoquiClass<EffectShader, IEffectShaderGetter>
    {
        new String FillTexture { get; set; }
        new bool FillTexture_IsSet { get; set; }
        void FillTexture_Set(String item, bool hasBeenSet = true);
        void FillTexture_Unset();

        new String ParticleShaderTexture { get; set; }
        new bool ParticleShaderTexture_IsSet { get; set; }
        void ParticleShaderTexture_Set(String item, bool hasBeenSet = true);
        void ParticleShaderTexture_Unset();

        new EffectShader.Flag Flags { get; set; }

        new EffectShader.SourceBlendMode MembraneShaderSourceBlendMode { get; set; }

        new EffectShader.BlendOperation MembraneShaderBlendOperation { get; set; }

        new EffectShader.ZTestFunction MembraneShaderZTestFunction { get; set; }

        new Color FillTextureEffectColor { get; set; }

        new Single FillTextureEffectAlphaFadeInTime { get; set; }

        new Single FillTextureEffectFullAlphaTime { get; set; }

        new Single FillTextureEffectAlphaFadeOutTime { get; set; }

        new Single FillTextureEffectPersistentAlphaRatio { get; set; }

        new Single FillTextureEffectAlphaPulseAmplitude { get; set; }

        new Single FillTextureEffectAlphaPulseFrequency { get; set; }

        new Single FillTextureEffectTextureAnimationSpeedU { get; set; }

        new Single FillTextureEffectTextureAnimationSpeedV { get; set; }

        new Single EdgeEffectFallOff { get; set; }

        new Color EdgeEffectColor { get; set; }

        new Single EdgeEffectAlphaFadeInTime { get; set; }

        new Single EdgeEffectFullAlphaTime { get; set; }

        new Single EdgeEffectAlphaFadeOutTime { get; set; }

        new Single EdgeEffectPersistentAlphaRatio { get; set; }

        new Single EdgeEffectAlphaPulseAmplitude { get; set; }

        new Single EdgeEffectAlphaPulseFrequency { get; set; }

        new Single FillTextureEffectFullAlphaRatio { get; set; }

        new Single EdgeEffectFullAlphaRatio { get; set; }

        new EffectShader.SourceBlendMode MembraneShaderDestBlendMode { get; set; }

        new EffectShader.SourceBlendMode ParticleShaderSourceBlendMode { get; set; }

        new EffectShader.BlendOperation ParticleShaderBlendOperation { get; set; }

        new EffectShader.ZTestFunction ParticleShaderZTestFunction { get; set; }

        new EffectShader.SourceBlendMode ParticleShaderDestBlendMode { get; set; }

        new Single ParticleShaderParticleBirthRampUpTime { get; set; }

        new Single ParticleShaderFullParticleBirthTime { get; set; }

        new Single ParticleShaderParticleBirthRampDownTime { get; set; }

        new Single ParticleShaderFullParticleBirthRatio { get; set; }

        new Single ParticleShaderPersistentParticleBirthRatio { get; set; }

        new Single ParticleShaderParticleLifetime { get; set; }

        new Single ParticleShaderParticleLifetimePlusMinus { get; set; }

        new Single ParticleShaderInitialSpeedAlongNormal { get; set; }

        new Single ParticleShaderAccelerationAlongNormal { get; set; }

        new Single ParticleShaderInitialVelocity1 { get; set; }

        new Single ParticleShaderInitialVelocity2 { get; set; }

        new Single ParticleShaderInitialVelocity3 { get; set; }

        new Single ParticleShaderAcceleration1 { get; set; }

        new Single ParticleShaderAcceleration2 { get; set; }

        new Single ParticleShaderAcceleration3 { get; set; }

        new Single ParticleShaderScaleKey1 { get; set; }

        new Single ParticleShaderScaleKey2 { get; set; }

        new Single ParticleShaderScaleKey1Time { get; set; }

        new Single ParticleShaderScaleKey2Time { get; set; }

        new Color ColorKey1Color { get; set; }

        new Color ColorKey2Color { get; set; }

        new Color ColorKey3Color { get; set; }

        new Single ColorKey1ColorAlpha { get; set; }

        new Single ColorKey2ColorAlpha { get; set; }

        new Single ColorKey3ColorAlpha { get; set; }

        new Single ColorKey1ColorKeyTime { get; set; }

        new Single ColorKey2ColorKeyTime { get; set; }

        new Single ColorKey3ColorKeyTime { get; set; }

    }

    public partial interface IEffectShaderGetter : IOblivionMajorRecordGetter
    {
        #region FillTexture
        String FillTexture { get; }
        bool FillTexture_IsSet { get; }

        #endregion
        #region ParticleShaderTexture
        String ParticleShaderTexture { get; }
        bool ParticleShaderTexture_IsSet { get; }

        #endregion
        #region Flags
        EffectShader.Flag Flags { get; }

        #endregion
        #region MembraneShaderSourceBlendMode
        EffectShader.SourceBlendMode MembraneShaderSourceBlendMode { get; }

        #endregion
        #region MembraneShaderBlendOperation
        EffectShader.BlendOperation MembraneShaderBlendOperation { get; }

        #endregion
        #region MembraneShaderZTestFunction
        EffectShader.ZTestFunction MembraneShaderZTestFunction { get; }

        #endregion
        #region FillTextureEffectColor
        Color FillTextureEffectColor { get; }

        #endregion
        #region FillTextureEffectAlphaFadeInTime
        Single FillTextureEffectAlphaFadeInTime { get; }

        #endregion
        #region FillTextureEffectFullAlphaTime
        Single FillTextureEffectFullAlphaTime { get; }

        #endregion
        #region FillTextureEffectAlphaFadeOutTime
        Single FillTextureEffectAlphaFadeOutTime { get; }

        #endregion
        #region FillTextureEffectPersistentAlphaRatio
        Single FillTextureEffectPersistentAlphaRatio { get; }

        #endregion
        #region FillTextureEffectAlphaPulseAmplitude
        Single FillTextureEffectAlphaPulseAmplitude { get; }

        #endregion
        #region FillTextureEffectAlphaPulseFrequency
        Single FillTextureEffectAlphaPulseFrequency { get; }

        #endregion
        #region FillTextureEffectTextureAnimationSpeedU
        Single FillTextureEffectTextureAnimationSpeedU { get; }

        #endregion
        #region FillTextureEffectTextureAnimationSpeedV
        Single FillTextureEffectTextureAnimationSpeedV { get; }

        #endregion
        #region EdgeEffectFallOff
        Single EdgeEffectFallOff { get; }

        #endregion
        #region EdgeEffectColor
        Color EdgeEffectColor { get; }

        #endregion
        #region EdgeEffectAlphaFadeInTime
        Single EdgeEffectAlphaFadeInTime { get; }

        #endregion
        #region EdgeEffectFullAlphaTime
        Single EdgeEffectFullAlphaTime { get; }

        #endregion
        #region EdgeEffectAlphaFadeOutTime
        Single EdgeEffectAlphaFadeOutTime { get; }

        #endregion
        #region EdgeEffectPersistentAlphaRatio
        Single EdgeEffectPersistentAlphaRatio { get; }

        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        Single EdgeEffectAlphaPulseAmplitude { get; }

        #endregion
        #region EdgeEffectAlphaPulseFrequency
        Single EdgeEffectAlphaPulseFrequency { get; }

        #endregion
        #region FillTextureEffectFullAlphaRatio
        Single FillTextureEffectFullAlphaRatio { get; }

        #endregion
        #region EdgeEffectFullAlphaRatio
        Single EdgeEffectFullAlphaRatio { get; }

        #endregion
        #region MembraneShaderDestBlendMode
        EffectShader.SourceBlendMode MembraneShaderDestBlendMode { get; }

        #endregion
        #region ParticleShaderSourceBlendMode
        EffectShader.SourceBlendMode ParticleShaderSourceBlendMode { get; }

        #endregion
        #region ParticleShaderBlendOperation
        EffectShader.BlendOperation ParticleShaderBlendOperation { get; }

        #endregion
        #region ParticleShaderZTestFunction
        EffectShader.ZTestFunction ParticleShaderZTestFunction { get; }

        #endregion
        #region ParticleShaderDestBlendMode
        EffectShader.SourceBlendMode ParticleShaderDestBlendMode { get; }

        #endregion
        #region ParticleShaderParticleBirthRampUpTime
        Single ParticleShaderParticleBirthRampUpTime { get; }

        #endregion
        #region ParticleShaderFullParticleBirthTime
        Single ParticleShaderFullParticleBirthTime { get; }

        #endregion
        #region ParticleShaderParticleBirthRampDownTime
        Single ParticleShaderParticleBirthRampDownTime { get; }

        #endregion
        #region ParticleShaderFullParticleBirthRatio
        Single ParticleShaderFullParticleBirthRatio { get; }

        #endregion
        #region ParticleShaderPersistentParticleBirthRatio
        Single ParticleShaderPersistentParticleBirthRatio { get; }

        #endregion
        #region ParticleShaderParticleLifetime
        Single ParticleShaderParticleLifetime { get; }

        #endregion
        #region ParticleShaderParticleLifetimePlusMinus
        Single ParticleShaderParticleLifetimePlusMinus { get; }

        #endregion
        #region ParticleShaderInitialSpeedAlongNormal
        Single ParticleShaderInitialSpeedAlongNormal { get; }

        #endregion
        #region ParticleShaderAccelerationAlongNormal
        Single ParticleShaderAccelerationAlongNormal { get; }

        #endregion
        #region ParticleShaderInitialVelocity1
        Single ParticleShaderInitialVelocity1 { get; }

        #endregion
        #region ParticleShaderInitialVelocity2
        Single ParticleShaderInitialVelocity2 { get; }

        #endregion
        #region ParticleShaderInitialVelocity3
        Single ParticleShaderInitialVelocity3 { get; }

        #endregion
        #region ParticleShaderAcceleration1
        Single ParticleShaderAcceleration1 { get; }

        #endregion
        #region ParticleShaderAcceleration2
        Single ParticleShaderAcceleration2 { get; }

        #endregion
        #region ParticleShaderAcceleration3
        Single ParticleShaderAcceleration3 { get; }

        #endregion
        #region ParticleShaderScaleKey1
        Single ParticleShaderScaleKey1 { get; }

        #endregion
        #region ParticleShaderScaleKey2
        Single ParticleShaderScaleKey2 { get; }

        #endregion
        #region ParticleShaderScaleKey1Time
        Single ParticleShaderScaleKey1Time { get; }

        #endregion
        #region ParticleShaderScaleKey2Time
        Single ParticleShaderScaleKey2Time { get; }

        #endregion
        #region ColorKey1Color
        Color ColorKey1Color { get; }

        #endregion
        #region ColorKey2Color
        Color ColorKey2Color { get; }

        #endregion
        #region ColorKey3Color
        Color ColorKey3Color { get; }

        #endregion
        #region ColorKey1ColorAlpha
        Single ColorKey1ColorAlpha { get; }

        #endregion
        #region ColorKey2ColorAlpha
        Single ColorKey2ColorAlpha { get; }

        #endregion
        #region ColorKey3ColorAlpha
        Single ColorKey3ColorAlpha { get; }

        #endregion
        #region ColorKey1ColorKeyTime
        Single ColorKey1ColorKeyTime { get; }

        #endregion
        #region ColorKey2ColorKeyTime
        Single ColorKey2ColorKeyTime { get; }

        #endregion
        #region ColorKey3ColorKeyTime
        Single ColorKey3ColorKeyTime { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum EffectShader_FieldIndex
    {
        FormKey = 0,
        Version = 1,
        EditorID = 2,
        RecordType = 3,
        OblivionMajorRecordFlags = 4,
        FillTexture = 5,
        ParticleShaderTexture = 6,
        Flags = 7,
        MembraneShaderSourceBlendMode = 8,
        MembraneShaderBlendOperation = 9,
        MembraneShaderZTestFunction = 10,
        FillTextureEffectColor = 11,
        FillTextureEffectAlphaFadeInTime = 12,
        FillTextureEffectFullAlphaTime = 13,
        FillTextureEffectAlphaFadeOutTime = 14,
        FillTextureEffectPersistentAlphaRatio = 15,
        FillTextureEffectAlphaPulseAmplitude = 16,
        FillTextureEffectAlphaPulseFrequency = 17,
        FillTextureEffectTextureAnimationSpeedU = 18,
        FillTextureEffectTextureAnimationSpeedV = 19,
        EdgeEffectFallOff = 20,
        EdgeEffectColor = 21,
        EdgeEffectAlphaFadeInTime = 22,
        EdgeEffectFullAlphaTime = 23,
        EdgeEffectAlphaFadeOutTime = 24,
        EdgeEffectPersistentAlphaRatio = 25,
        EdgeEffectAlphaPulseAmplitude = 26,
        EdgeEffectAlphaPulseFrequency = 27,
        FillTextureEffectFullAlphaRatio = 28,
        EdgeEffectFullAlphaRatio = 29,
        MembraneShaderDestBlendMode = 30,
        ParticleShaderSourceBlendMode = 31,
        ParticleShaderBlendOperation = 32,
        ParticleShaderZTestFunction = 33,
        ParticleShaderDestBlendMode = 34,
        ParticleShaderParticleBirthRampUpTime = 35,
        ParticleShaderFullParticleBirthTime = 36,
        ParticleShaderParticleBirthRampDownTime = 37,
        ParticleShaderFullParticleBirthRatio = 38,
        ParticleShaderPersistentParticleBirthRatio = 39,
        ParticleShaderParticleLifetime = 40,
        ParticleShaderParticleLifetimePlusMinus = 41,
        ParticleShaderInitialSpeedAlongNormal = 42,
        ParticleShaderAccelerationAlongNormal = 43,
        ParticleShaderInitialVelocity1 = 44,
        ParticleShaderInitialVelocity2 = 45,
        ParticleShaderInitialVelocity3 = 46,
        ParticleShaderAcceleration1 = 47,
        ParticleShaderAcceleration2 = 48,
        ParticleShaderAcceleration3 = 49,
        ParticleShaderScaleKey1 = 50,
        ParticleShaderScaleKey2 = 51,
        ParticleShaderScaleKey1Time = 52,
        ParticleShaderScaleKey2Time = 53,
        ColorKey1Color = 54,
        ColorKey2Color = 55,
        ColorKey3Color = 56,
        ColorKey1ColorAlpha = 57,
        ColorKey2ColorAlpha = 58,
        ColorKey3ColorAlpha = 59,
        ColorKey1ColorKeyTime = 60,
        ColorKey2ColorKeyTime = 61,
        ColorKey3ColorKeyTime = 62,
    }
    #endregion

    #region Registration
    public class EffectShader_Registration : ILoquiRegistration
    {
        public static readonly EffectShader_Registration Instance = new EffectShader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 57,
            version: 0);

        public const string GUID = "2fe14395-5518-4c4a-85ff-7aba6d405e2b";

        public const ushort AdditionalFieldCount = 58;

        public const ushort FieldCount = 63;

        public static readonly Type MaskType = typeof(EffectShader_Mask<>);

        public static readonly Type ErrorMaskType = typeof(EffectShader_ErrorMask);

        public static readonly Type ClassType = typeof(EffectShader);

        public static readonly Type GetterType = typeof(IEffectShaderGetter);

        public static readonly Type SetterType = typeof(IEffectShader);

        public static readonly Type CommonType = typeof(EffectShaderCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.EffectShader";

        public const string Name = "EffectShader";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FILLTEXTURE":
                    return (ushort)EffectShader_FieldIndex.FillTexture;
                case "PARTICLESHADERTEXTURE":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderTexture;
                case "FLAGS":
                    return (ushort)EffectShader_FieldIndex.Flags;
                case "MEMBRANESHADERSOURCEBLENDMODE":
                    return (ushort)EffectShader_FieldIndex.MembraneShaderSourceBlendMode;
                case "MEMBRANESHADERBLENDOPERATION":
                    return (ushort)EffectShader_FieldIndex.MembraneShaderBlendOperation;
                case "MEMBRANESHADERZTESTFUNCTION":
                    return (ushort)EffectShader_FieldIndex.MembraneShaderZTestFunction;
                case "FILLTEXTUREEFFECTCOLOR":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectColor;
                case "FILLTEXTUREEFFECTALPHAFADEINTIME":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime;
                case "FILLTEXTUREEFFECTFULLALPHATIME":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime;
                case "FILLTEXTUREEFFECTALPHAFADEOUTTIME":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime;
                case "FILLTEXTUREEFFECTPERSISTENTALPHARATIO":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio;
                case "FILLTEXTUREEFFECTALPHAPULSEAMPLITUDE":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude;
                case "FILLTEXTUREEFFECTALPHAPULSEFREQUENCY":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency;
                case "FILLTEXTUREEFFECTTEXTUREANIMATIONSPEEDU":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU;
                case "FILLTEXTUREEFFECTTEXTUREANIMATIONSPEEDV":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV;
                case "EDGEEFFECTFALLOFF":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectFallOff;
                case "EDGEEFFECTCOLOR":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectColor;
                case "EDGEEFFECTALPHAFADEINTIME":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime;
                case "EDGEEFFECTFULLALPHATIME":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectFullAlphaTime;
                case "EDGEEFFECTALPHAFADEOUTTIME":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime;
                case "EDGEEFFECTPERSISTENTALPHARATIO":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio;
                case "EDGEEFFECTALPHAPULSEAMPLITUDE":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude;
                case "EDGEEFFECTALPHAPULSEFREQUENCY":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency;
                case "FILLTEXTUREEFFECTFULLALPHARATIO":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio;
                case "EDGEEFFECTFULLALPHARATIO":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio;
                case "MEMBRANESHADERDESTBLENDMODE":
                    return (ushort)EffectShader_FieldIndex.MembraneShaderDestBlendMode;
                case "PARTICLESHADERSOURCEBLENDMODE":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderSourceBlendMode;
                case "PARTICLESHADERBLENDOPERATION":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderBlendOperation;
                case "PARTICLESHADERZTESTFUNCTION":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderZTestFunction;
                case "PARTICLESHADERDESTBLENDMODE":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderDestBlendMode;
                case "PARTICLESHADERPARTICLEBIRTHRAMPUPTIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime;
                case "PARTICLESHADERFULLPARTICLEBIRTHTIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime;
                case "PARTICLESHADERPARTICLEBIRTHRAMPDOWNTIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime;
                case "PARTICLESHADERFULLPARTICLEBIRTHRATIO":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio;
                case "PARTICLESHADERPERSISTENTPARTICLEBIRTHRATIO":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio;
                case "PARTICLESHADERPARTICLELIFETIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderParticleLifetime;
                case "PARTICLESHADERPARTICLELIFETIMEPLUSMINUS":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus;
                case "PARTICLESHADERINITIALSPEEDALONGNORMAL":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal;
                case "PARTICLESHADERACCELERATIONALONGNORMAL":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal;
                case "PARTICLESHADERINITIALVELOCITY1":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderInitialVelocity1;
                case "PARTICLESHADERINITIALVELOCITY2":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderInitialVelocity2;
                case "PARTICLESHADERINITIALVELOCITY3":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderInitialVelocity3;
                case "PARTICLESHADERACCELERATION1":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderAcceleration1;
                case "PARTICLESHADERACCELERATION2":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderAcceleration2;
                case "PARTICLESHADERACCELERATION3":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderAcceleration3;
                case "PARTICLESHADERSCALEKEY1":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderScaleKey1;
                case "PARTICLESHADERSCALEKEY2":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderScaleKey2;
                case "PARTICLESHADERSCALEKEY1TIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderScaleKey1Time;
                case "PARTICLESHADERSCALEKEY2TIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderScaleKey2Time;
                case "COLORKEY1COLOR":
                    return (ushort)EffectShader_FieldIndex.ColorKey1Color;
                case "COLORKEY2COLOR":
                    return (ushort)EffectShader_FieldIndex.ColorKey2Color;
                case "COLORKEY3COLOR":
                    return (ushort)EffectShader_FieldIndex.ColorKey3Color;
                case "COLORKEY1COLORALPHA":
                    return (ushort)EffectShader_FieldIndex.ColorKey1ColorAlpha;
                case "COLORKEY2COLORALPHA":
                    return (ushort)EffectShader_FieldIndex.ColorKey2ColorAlpha;
                case "COLORKEY3COLORALPHA":
                    return (ushort)EffectShader_FieldIndex.ColorKey3ColorAlpha;
                case "COLORKEY1COLORKEYTIME":
                    return (ushort)EffectShader_FieldIndex.ColorKey1ColorKeyTime;
                case "COLORKEY2COLORKEYTIME":
                    return (ushort)EffectShader_FieldIndex.ColorKey2ColorKeyTime;
                case "COLORKEY3COLORKEYTIME":
                    return (ushort)EffectShader_FieldIndex.ColorKey3ColorKeyTime;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    return "FillTexture";
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    return "ParticleShaderTexture";
                case EffectShader_FieldIndex.Flags:
                    return "Flags";
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    return "MembraneShaderSourceBlendMode";
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    return "MembraneShaderBlendOperation";
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    return "MembraneShaderZTestFunction";
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    return "FillTextureEffectColor";
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    return "FillTextureEffectAlphaFadeInTime";
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    return "FillTextureEffectFullAlphaTime";
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    return "FillTextureEffectAlphaFadeOutTime";
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    return "FillTextureEffectPersistentAlphaRatio";
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    return "FillTextureEffectAlphaPulseAmplitude";
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    return "FillTextureEffectAlphaPulseFrequency";
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    return "FillTextureEffectTextureAnimationSpeedU";
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    return "FillTextureEffectTextureAnimationSpeedV";
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    return "EdgeEffectFallOff";
                case EffectShader_FieldIndex.EdgeEffectColor:
                    return "EdgeEffectColor";
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    return "EdgeEffectAlphaFadeInTime";
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    return "EdgeEffectFullAlphaTime";
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    return "EdgeEffectAlphaFadeOutTime";
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    return "EdgeEffectPersistentAlphaRatio";
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    return "EdgeEffectAlphaPulseAmplitude";
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    return "EdgeEffectAlphaPulseFrequency";
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    return "FillTextureEffectFullAlphaRatio";
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    return "EdgeEffectFullAlphaRatio";
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    return "MembraneShaderDestBlendMode";
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    return "ParticleShaderSourceBlendMode";
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    return "ParticleShaderBlendOperation";
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    return "ParticleShaderZTestFunction";
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    return "ParticleShaderDestBlendMode";
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    return "ParticleShaderParticleBirthRampUpTime";
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    return "ParticleShaderFullParticleBirthTime";
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    return "ParticleShaderParticleBirthRampDownTime";
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    return "ParticleShaderFullParticleBirthRatio";
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    return "ParticleShaderPersistentParticleBirthRatio";
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    return "ParticleShaderParticleLifetime";
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    return "ParticleShaderParticleLifetimePlusMinus";
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    return "ParticleShaderInitialSpeedAlongNormal";
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    return "ParticleShaderAccelerationAlongNormal";
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    return "ParticleShaderInitialVelocity1";
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    return "ParticleShaderInitialVelocity2";
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    return "ParticleShaderInitialVelocity3";
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    return "ParticleShaderAcceleration1";
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    return "ParticleShaderAcceleration2";
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    return "ParticleShaderAcceleration3";
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    return "ParticleShaderScaleKey1";
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    return "ParticleShaderScaleKey2";
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    return "ParticleShaderScaleKey1Time";
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    return "ParticleShaderScaleKey2Time";
                case EffectShader_FieldIndex.ColorKey1Color:
                    return "ColorKey1Color";
                case EffectShader_FieldIndex.ColorKey2Color:
                    return "ColorKey2Color";
                case EffectShader_FieldIndex.ColorKey3Color:
                    return "ColorKey3Color";
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    return "ColorKey1ColorAlpha";
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    return "ColorKey2ColorAlpha";
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    return "ColorKey3ColorAlpha";
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    return "ColorKey1ColorKeyTime";
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    return "ColorKey2ColorKeyTime";
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return "ColorKey3ColorKeyTime";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    return typeof(String);
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    return typeof(String);
                case EffectShader_FieldIndex.Flags:
                    return typeof(EffectShader.Flag);
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    return typeof(EffectShader.BlendOperation);
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    return typeof(EffectShader.ZTestFunction);
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    return typeof(Color);
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectColor:
                    return typeof(Color);
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    return typeof(EffectShader.BlendOperation);
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    return typeof(EffectShader.ZTestFunction);
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey1Color:
                    return typeof(Color);
                case EffectShader_FieldIndex.ColorKey2Color:
                    return typeof(Color);
                case EffectShader_FieldIndex.ColorKey3Color:
                    return typeof(Color);
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return typeof(Single);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType ICO2_HEADER = new RecordType("ICO2");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = EFSH_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class EffectShaderCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IEffectShader item,
            IEffectShaderGetter rhs,
            IEffectShaderGetter def,
            ErrorMaskBuilder errorMask,
            EffectShader_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.FillTexture ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTexture);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FillTexture,
                        rhsHasBeenSet: rhs.FillTexture_IsSet,
                        defItem: def?.FillTexture ?? default(String),
                        defHasBeenSet: def?.FillTexture_IsSet ?? false,
                        outRhsItem: out var rhsFillTextureItem,
                        outDefItem: out var defFillTextureItem))
                    {
                        item.FillTexture = rhsFillTextureItem;
                    }
                    else
                    {
                        item.FillTexture_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderTexture ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderTexture);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ParticleShaderTexture,
                        rhsHasBeenSet: rhs.ParticleShaderTexture_IsSet,
                        defItem: def?.ParticleShaderTexture ?? default(String),
                        defHasBeenSet: def?.ParticleShaderTexture_IsSet ?? false,
                        outRhsItem: out var rhsParticleShaderTextureItem,
                        outDefItem: out var defParticleShaderTextureItem))
                    {
                        item.ParticleShaderTexture = rhsParticleShaderTextureItem;
                    }
                    else
                    {
                        item.ParticleShaderTexture_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MembraneShaderSourceBlendMode ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode);
                try
                {
                    item.MembraneShaderSourceBlendMode = rhs.MembraneShaderSourceBlendMode;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MembraneShaderBlendOperation ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderBlendOperation);
                try
                {
                    item.MembraneShaderBlendOperation = rhs.MembraneShaderBlendOperation;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MembraneShaderZTestFunction ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderZTestFunction);
                try
                {
                    item.MembraneShaderZTestFunction = rhs.MembraneShaderZTestFunction;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectColor ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectColor);
                try
                {
                    item.FillTextureEffectColor = rhs.FillTextureEffectColor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectAlphaFadeInTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime);
                try
                {
                    item.FillTextureEffectAlphaFadeInTime = rhs.FillTextureEffectAlphaFadeInTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectFullAlphaTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime);
                try
                {
                    item.FillTextureEffectFullAlphaTime = rhs.FillTextureEffectFullAlphaTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectAlphaFadeOutTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime);
                try
                {
                    item.FillTextureEffectAlphaFadeOutTime = rhs.FillTextureEffectAlphaFadeOutTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectPersistentAlphaRatio ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio);
                try
                {
                    item.FillTextureEffectPersistentAlphaRatio = rhs.FillTextureEffectPersistentAlphaRatio;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectAlphaPulseAmplitude ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude);
                try
                {
                    item.FillTextureEffectAlphaPulseAmplitude = rhs.FillTextureEffectAlphaPulseAmplitude;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectAlphaPulseFrequency ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency);
                try
                {
                    item.FillTextureEffectAlphaPulseFrequency = rhs.FillTextureEffectAlphaPulseFrequency;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectTextureAnimationSpeedU ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU);
                try
                {
                    item.FillTextureEffectTextureAnimationSpeedU = rhs.FillTextureEffectTextureAnimationSpeedU;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectTextureAnimationSpeedV ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV);
                try
                {
                    item.FillTextureEffectTextureAnimationSpeedV = rhs.FillTextureEffectTextureAnimationSpeedV;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectFallOff ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFallOff);
                try
                {
                    item.EdgeEffectFallOff = rhs.EdgeEffectFallOff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectColor ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectColor);
                try
                {
                    item.EdgeEffectColor = rhs.EdgeEffectColor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectAlphaFadeInTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime);
                try
                {
                    item.EdgeEffectAlphaFadeInTime = rhs.EdgeEffectAlphaFadeInTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectFullAlphaTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime);
                try
                {
                    item.EdgeEffectFullAlphaTime = rhs.EdgeEffectFullAlphaTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectAlphaFadeOutTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime);
                try
                {
                    item.EdgeEffectAlphaFadeOutTime = rhs.EdgeEffectAlphaFadeOutTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectPersistentAlphaRatio ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio);
                try
                {
                    item.EdgeEffectPersistentAlphaRatio = rhs.EdgeEffectPersistentAlphaRatio;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectAlphaPulseAmplitude ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude);
                try
                {
                    item.EdgeEffectAlphaPulseAmplitude = rhs.EdgeEffectAlphaPulseAmplitude;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectAlphaPulseFrequency ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency);
                try
                {
                    item.EdgeEffectAlphaPulseFrequency = rhs.EdgeEffectAlphaPulseFrequency;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FillTextureEffectFullAlphaRatio ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio);
                try
                {
                    item.FillTextureEffectFullAlphaRatio = rhs.FillTextureEffectFullAlphaRatio;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EdgeEffectFullAlphaRatio ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio);
                try
                {
                    item.EdgeEffectFullAlphaRatio = rhs.EdgeEffectFullAlphaRatio;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MembraneShaderDestBlendMode ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode);
                try
                {
                    item.MembraneShaderDestBlendMode = rhs.MembraneShaderDestBlendMode;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderSourceBlendMode ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode);
                try
                {
                    item.ParticleShaderSourceBlendMode = rhs.ParticleShaderSourceBlendMode;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderBlendOperation ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderBlendOperation);
                try
                {
                    item.ParticleShaderBlendOperation = rhs.ParticleShaderBlendOperation;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderZTestFunction ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderZTestFunction);
                try
                {
                    item.ParticleShaderZTestFunction = rhs.ParticleShaderZTestFunction;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderDestBlendMode ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderDestBlendMode);
                try
                {
                    item.ParticleShaderDestBlendMode = rhs.ParticleShaderDestBlendMode;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderParticleBirthRampUpTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime);
                try
                {
                    item.ParticleShaderParticleBirthRampUpTime = rhs.ParticleShaderParticleBirthRampUpTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderFullParticleBirthTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime);
                try
                {
                    item.ParticleShaderFullParticleBirthTime = rhs.ParticleShaderFullParticleBirthTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderParticleBirthRampDownTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime);
                try
                {
                    item.ParticleShaderParticleBirthRampDownTime = rhs.ParticleShaderParticleBirthRampDownTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderFullParticleBirthRatio ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio);
                try
                {
                    item.ParticleShaderFullParticleBirthRatio = rhs.ParticleShaderFullParticleBirthRatio;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderPersistentParticleBirthRatio ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio);
                try
                {
                    item.ParticleShaderPersistentParticleBirthRatio = rhs.ParticleShaderPersistentParticleBirthRatio;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderParticleLifetime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleLifetime);
                try
                {
                    item.ParticleShaderParticleLifetime = rhs.ParticleShaderParticleLifetime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderParticleLifetimePlusMinus ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus);
                try
                {
                    item.ParticleShaderParticleLifetimePlusMinus = rhs.ParticleShaderParticleLifetimePlusMinus;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderInitialSpeedAlongNormal ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal);
                try
                {
                    item.ParticleShaderInitialSpeedAlongNormal = rhs.ParticleShaderInitialSpeedAlongNormal;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderAccelerationAlongNormal ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal);
                try
                {
                    item.ParticleShaderAccelerationAlongNormal = rhs.ParticleShaderAccelerationAlongNormal;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderInitialVelocity1 ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1);
                try
                {
                    item.ParticleShaderInitialVelocity1 = rhs.ParticleShaderInitialVelocity1;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderInitialVelocity2 ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2);
                try
                {
                    item.ParticleShaderInitialVelocity2 = rhs.ParticleShaderInitialVelocity2;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderInitialVelocity3 ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3);
                try
                {
                    item.ParticleShaderInitialVelocity3 = rhs.ParticleShaderInitialVelocity3;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderAcceleration1 ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration1);
                try
                {
                    item.ParticleShaderAcceleration1 = rhs.ParticleShaderAcceleration1;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderAcceleration2 ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration2);
                try
                {
                    item.ParticleShaderAcceleration2 = rhs.ParticleShaderAcceleration2;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderAcceleration3 ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration3);
                try
                {
                    item.ParticleShaderAcceleration3 = rhs.ParticleShaderAcceleration3;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderScaleKey1 ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey1);
                try
                {
                    item.ParticleShaderScaleKey1 = rhs.ParticleShaderScaleKey1;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderScaleKey2 ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey2);
                try
                {
                    item.ParticleShaderScaleKey2 = rhs.ParticleShaderScaleKey2;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderScaleKey1Time ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time);
                try
                {
                    item.ParticleShaderScaleKey1Time = rhs.ParticleShaderScaleKey1Time;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParticleShaderScaleKey2Time ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time);
                try
                {
                    item.ParticleShaderScaleKey2Time = rhs.ParticleShaderScaleKey2Time;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey1Color ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1Color);
                try
                {
                    item.ColorKey1Color = rhs.ColorKey1Color;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey2Color ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2Color);
                try
                {
                    item.ColorKey2Color = rhs.ColorKey2Color;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey3Color ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3Color);
                try
                {
                    item.ColorKey3Color = rhs.ColorKey3Color;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey1ColorAlpha ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1ColorAlpha);
                try
                {
                    item.ColorKey1ColorAlpha = rhs.ColorKey1ColorAlpha;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey2ColorAlpha ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2ColorAlpha);
                try
                {
                    item.ColorKey2ColorAlpha = rhs.ColorKey2ColorAlpha;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey3ColorAlpha ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3ColorAlpha);
                try
                {
                    item.ColorKey3ColorAlpha = rhs.ColorKey3ColorAlpha;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey1ColorKeyTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1ColorKeyTime);
                try
                {
                    item.ColorKey1ColorKeyTime = rhs.ColorKey1ColorKeyTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey2ColorKeyTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2ColorKeyTime);
                try
                {
                    item.ColorKey2ColorKeyTime = rhs.ColorKey2ColorKeyTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorKey3ColorKeyTime ?? true)
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime);
                try
                {
                    item.ColorKey3ColorKeyTime = rhs.ColorKey3ColorKeyTime;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(
            IEffectShader item,
            NotifyingUnsetParameters cmds = null)
        {
            item.FillTexture_Unset();
            item.ParticleShaderTexture_Unset();
            item.Flags = default(EffectShader.Flag);
            item.MembraneShaderSourceBlendMode = default(EffectShader.SourceBlendMode);
            item.MembraneShaderBlendOperation = default(EffectShader.BlendOperation);
            item.MembraneShaderZTestFunction = default(EffectShader.ZTestFunction);
            item.FillTextureEffectColor = default(Color);
            item.FillTextureEffectAlphaFadeInTime = default(Single);
            item.FillTextureEffectFullAlphaTime = default(Single);
            item.FillTextureEffectAlphaFadeOutTime = default(Single);
            item.FillTextureEffectPersistentAlphaRatio = default(Single);
            item.FillTextureEffectAlphaPulseAmplitude = default(Single);
            item.FillTextureEffectAlphaPulseFrequency = default(Single);
            item.FillTextureEffectTextureAnimationSpeedU = default(Single);
            item.FillTextureEffectTextureAnimationSpeedV = default(Single);
            item.EdgeEffectFallOff = default(Single);
            item.EdgeEffectColor = default(Color);
            item.EdgeEffectAlphaFadeInTime = default(Single);
            item.EdgeEffectFullAlphaTime = default(Single);
            item.EdgeEffectAlphaFadeOutTime = default(Single);
            item.EdgeEffectPersistentAlphaRatio = default(Single);
            item.EdgeEffectAlphaPulseAmplitude = default(Single);
            item.EdgeEffectAlphaPulseFrequency = default(Single);
            item.FillTextureEffectFullAlphaRatio = default(Single);
            item.EdgeEffectFullAlphaRatio = default(Single);
            item.MembraneShaderDestBlendMode = default(EffectShader.SourceBlendMode);
            item.ParticleShaderSourceBlendMode = default(EffectShader.SourceBlendMode);
            item.ParticleShaderBlendOperation = default(EffectShader.BlendOperation);
            item.ParticleShaderZTestFunction = default(EffectShader.ZTestFunction);
            item.ParticleShaderDestBlendMode = default(EffectShader.SourceBlendMode);
            item.ParticleShaderParticleBirthRampUpTime = default(Single);
            item.ParticleShaderFullParticleBirthTime = default(Single);
            item.ParticleShaderParticleBirthRampDownTime = default(Single);
            item.ParticleShaderFullParticleBirthRatio = default(Single);
            item.ParticleShaderPersistentParticleBirthRatio = default(Single);
            item.ParticleShaderParticleLifetime = default(Single);
            item.ParticleShaderParticleLifetimePlusMinus = default(Single);
            item.ParticleShaderInitialSpeedAlongNormal = default(Single);
            item.ParticleShaderAccelerationAlongNormal = default(Single);
            item.ParticleShaderInitialVelocity1 = default(Single);
            item.ParticleShaderInitialVelocity2 = default(Single);
            item.ParticleShaderInitialVelocity3 = default(Single);
            item.ParticleShaderAcceleration1 = default(Single);
            item.ParticleShaderAcceleration2 = default(Single);
            item.ParticleShaderAcceleration3 = default(Single);
            item.ParticleShaderScaleKey1 = default(Single);
            item.ParticleShaderScaleKey2 = default(Single);
            item.ParticleShaderScaleKey1Time = default(Single);
            item.ParticleShaderScaleKey2Time = default(Single);
            item.ColorKey1Color = default(Color);
            item.ColorKey2Color = default(Color);
            item.ColorKey3Color = default(Color);
            item.ColorKey1ColorAlpha = default(Single);
            item.ColorKey2ColorAlpha = default(Single);
            item.ColorKey3ColorAlpha = default(Single);
            item.ColorKey1ColorKeyTime = default(Single);
            item.ColorKey2ColorKeyTime = default(Single);
            item.ColorKey3ColorKeyTime = default(Single);
        }

        public static EffectShader_Mask<bool> GetEqualsMask(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EffectShader_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EffectShader_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.FillTexture = item.FillTexture_IsSet == rhs.FillTexture_IsSet && object.Equals(item.FillTexture, rhs.FillTexture);
            ret.ParticleShaderTexture = item.ParticleShaderTexture_IsSet == rhs.ParticleShaderTexture_IsSet && object.Equals(item.ParticleShaderTexture, rhs.ParticleShaderTexture);
            ret.Flags = item.Flags == rhs.Flags;
            ret.MembraneShaderSourceBlendMode = item.MembraneShaderSourceBlendMode == rhs.MembraneShaderSourceBlendMode;
            ret.MembraneShaderBlendOperation = item.MembraneShaderBlendOperation == rhs.MembraneShaderBlendOperation;
            ret.MembraneShaderZTestFunction = item.MembraneShaderZTestFunction == rhs.MembraneShaderZTestFunction;
            ret.FillTextureEffectColor = item.FillTextureEffectColor.ColorOnlyEquals(rhs.FillTextureEffectColor);
            ret.FillTextureEffectAlphaFadeInTime = item.FillTextureEffectAlphaFadeInTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeInTime);
            ret.FillTextureEffectFullAlphaTime = item.FillTextureEffectFullAlphaTime.EqualsWithin(rhs.FillTextureEffectFullAlphaTime);
            ret.FillTextureEffectAlphaFadeOutTime = item.FillTextureEffectAlphaFadeOutTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeOutTime);
            ret.FillTextureEffectPersistentAlphaRatio = item.FillTextureEffectPersistentAlphaRatio.EqualsWithin(rhs.FillTextureEffectPersistentAlphaRatio);
            ret.FillTextureEffectAlphaPulseAmplitude = item.FillTextureEffectAlphaPulseAmplitude.EqualsWithin(rhs.FillTextureEffectAlphaPulseAmplitude);
            ret.FillTextureEffectAlphaPulseFrequency = item.FillTextureEffectAlphaPulseFrequency.EqualsWithin(rhs.FillTextureEffectAlphaPulseFrequency);
            ret.FillTextureEffectTextureAnimationSpeedU = item.FillTextureEffectTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedU);
            ret.FillTextureEffectTextureAnimationSpeedV = item.FillTextureEffectTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedV);
            ret.EdgeEffectFallOff = item.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff);
            ret.EdgeEffectColor = item.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor);
            ret.EdgeEffectAlphaFadeInTime = item.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime);
            ret.EdgeEffectFullAlphaTime = item.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime);
            ret.EdgeEffectAlphaFadeOutTime = item.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime);
            ret.EdgeEffectPersistentAlphaRatio = item.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio);
            ret.EdgeEffectAlphaPulseAmplitude = item.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude);
            ret.EdgeEffectAlphaPulseFrequency = item.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency);
            ret.FillTextureEffectFullAlphaRatio = item.FillTextureEffectFullAlphaRatio.EqualsWithin(rhs.FillTextureEffectFullAlphaRatio);
            ret.EdgeEffectFullAlphaRatio = item.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio);
            ret.MembraneShaderDestBlendMode = item.MembraneShaderDestBlendMode == rhs.MembraneShaderDestBlendMode;
            ret.ParticleShaderSourceBlendMode = item.ParticleShaderSourceBlendMode == rhs.ParticleShaderSourceBlendMode;
            ret.ParticleShaderBlendOperation = item.ParticleShaderBlendOperation == rhs.ParticleShaderBlendOperation;
            ret.ParticleShaderZTestFunction = item.ParticleShaderZTestFunction == rhs.ParticleShaderZTestFunction;
            ret.ParticleShaderDestBlendMode = item.ParticleShaderDestBlendMode == rhs.ParticleShaderDestBlendMode;
            ret.ParticleShaderParticleBirthRampUpTime = item.ParticleShaderParticleBirthRampUpTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampUpTime);
            ret.ParticleShaderFullParticleBirthTime = item.ParticleShaderFullParticleBirthTime.EqualsWithin(rhs.ParticleShaderFullParticleBirthTime);
            ret.ParticleShaderParticleBirthRampDownTime = item.ParticleShaderParticleBirthRampDownTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampDownTime);
            ret.ParticleShaderFullParticleBirthRatio = item.ParticleShaderFullParticleBirthRatio.EqualsWithin(rhs.ParticleShaderFullParticleBirthRatio);
            ret.ParticleShaderPersistentParticleBirthRatio = item.ParticleShaderPersistentParticleBirthRatio.EqualsWithin(rhs.ParticleShaderPersistentParticleBirthRatio);
            ret.ParticleShaderParticleLifetime = item.ParticleShaderParticleLifetime.EqualsWithin(rhs.ParticleShaderParticleLifetime);
            ret.ParticleShaderParticleLifetimePlusMinus = item.ParticleShaderParticleLifetimePlusMinus.EqualsWithin(rhs.ParticleShaderParticleLifetimePlusMinus);
            ret.ParticleShaderInitialSpeedAlongNormal = item.ParticleShaderInitialSpeedAlongNormal.EqualsWithin(rhs.ParticleShaderInitialSpeedAlongNormal);
            ret.ParticleShaderAccelerationAlongNormal = item.ParticleShaderAccelerationAlongNormal.EqualsWithin(rhs.ParticleShaderAccelerationAlongNormal);
            ret.ParticleShaderInitialVelocity1 = item.ParticleShaderInitialVelocity1.EqualsWithin(rhs.ParticleShaderInitialVelocity1);
            ret.ParticleShaderInitialVelocity2 = item.ParticleShaderInitialVelocity2.EqualsWithin(rhs.ParticleShaderInitialVelocity2);
            ret.ParticleShaderInitialVelocity3 = item.ParticleShaderInitialVelocity3.EqualsWithin(rhs.ParticleShaderInitialVelocity3);
            ret.ParticleShaderAcceleration1 = item.ParticleShaderAcceleration1.EqualsWithin(rhs.ParticleShaderAcceleration1);
            ret.ParticleShaderAcceleration2 = item.ParticleShaderAcceleration2.EqualsWithin(rhs.ParticleShaderAcceleration2);
            ret.ParticleShaderAcceleration3 = item.ParticleShaderAcceleration3.EqualsWithin(rhs.ParticleShaderAcceleration3);
            ret.ParticleShaderScaleKey1 = item.ParticleShaderScaleKey1.EqualsWithin(rhs.ParticleShaderScaleKey1);
            ret.ParticleShaderScaleKey2 = item.ParticleShaderScaleKey2.EqualsWithin(rhs.ParticleShaderScaleKey2);
            ret.ParticleShaderScaleKey1Time = item.ParticleShaderScaleKey1Time.EqualsWithin(rhs.ParticleShaderScaleKey1Time);
            ret.ParticleShaderScaleKey2Time = item.ParticleShaderScaleKey2Time.EqualsWithin(rhs.ParticleShaderScaleKey2Time);
            ret.ColorKey1Color = item.ColorKey1Color.ColorOnlyEquals(rhs.ColorKey1Color);
            ret.ColorKey2Color = item.ColorKey2Color.ColorOnlyEquals(rhs.ColorKey2Color);
            ret.ColorKey3Color = item.ColorKey3Color.ColorOnlyEquals(rhs.ColorKey3Color);
            ret.ColorKey1ColorAlpha = item.ColorKey1ColorAlpha.EqualsWithin(rhs.ColorKey1ColorAlpha);
            ret.ColorKey2ColorAlpha = item.ColorKey2ColorAlpha.EqualsWithin(rhs.ColorKey2ColorAlpha);
            ret.ColorKey3ColorAlpha = item.ColorKey3ColorAlpha.EqualsWithin(rhs.ColorKey3ColorAlpha);
            ret.ColorKey1ColorKeyTime = item.ColorKey1ColorKeyTime.EqualsWithin(rhs.ColorKey1ColorKeyTime);
            ret.ColorKey2ColorKeyTime = item.ColorKey2ColorKeyTime.EqualsWithin(rhs.ColorKey2ColorKeyTime);
            ret.ColorKey3ColorKeyTime = item.ColorKey3ColorKeyTime.EqualsWithin(rhs.ColorKey3ColorKeyTime);
            OblivionMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IEffectShaderGetter item,
            string name = null,
            EffectShader_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IEffectShaderGetter item,
            FileGeneration fg,
            string name = null,
            EffectShader_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(EffectShader)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(EffectShader)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.FillTexture ?? true)
                {
                    fg.AppendLine($"FillTexture => {item.FillTexture}");
                }
                if (printMask?.ParticleShaderTexture ?? true)
                {
                    fg.AppendLine($"ParticleShaderTexture => {item.ParticleShaderTexture}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.MembraneShaderSourceBlendMode ?? true)
                {
                    fg.AppendLine($"MembraneShaderSourceBlendMode => {item.MembraneShaderSourceBlendMode}");
                }
                if (printMask?.MembraneShaderBlendOperation ?? true)
                {
                    fg.AppendLine($"MembraneShaderBlendOperation => {item.MembraneShaderBlendOperation}");
                }
                if (printMask?.MembraneShaderZTestFunction ?? true)
                {
                    fg.AppendLine($"MembraneShaderZTestFunction => {item.MembraneShaderZTestFunction}");
                }
                if (printMask?.FillTextureEffectColor ?? true)
                {
                    fg.AppendLine($"FillTextureEffectColor => {item.FillTextureEffectColor}");
                }
                if (printMask?.FillTextureEffectAlphaFadeInTime ?? true)
                {
                    fg.AppendLine($"FillTextureEffectAlphaFadeInTime => {item.FillTextureEffectAlphaFadeInTime}");
                }
                if (printMask?.FillTextureEffectFullAlphaTime ?? true)
                {
                    fg.AppendLine($"FillTextureEffectFullAlphaTime => {item.FillTextureEffectFullAlphaTime}");
                }
                if (printMask?.FillTextureEffectAlphaFadeOutTime ?? true)
                {
                    fg.AppendLine($"FillTextureEffectAlphaFadeOutTime => {item.FillTextureEffectAlphaFadeOutTime}");
                }
                if (printMask?.FillTextureEffectPersistentAlphaRatio ?? true)
                {
                    fg.AppendLine($"FillTextureEffectPersistentAlphaRatio => {item.FillTextureEffectPersistentAlphaRatio}");
                }
                if (printMask?.FillTextureEffectAlphaPulseAmplitude ?? true)
                {
                    fg.AppendLine($"FillTextureEffectAlphaPulseAmplitude => {item.FillTextureEffectAlphaPulseAmplitude}");
                }
                if (printMask?.FillTextureEffectAlphaPulseFrequency ?? true)
                {
                    fg.AppendLine($"FillTextureEffectAlphaPulseFrequency => {item.FillTextureEffectAlphaPulseFrequency}");
                }
                if (printMask?.FillTextureEffectTextureAnimationSpeedU ?? true)
                {
                    fg.AppendLine($"FillTextureEffectTextureAnimationSpeedU => {item.FillTextureEffectTextureAnimationSpeedU}");
                }
                if (printMask?.FillTextureEffectTextureAnimationSpeedV ?? true)
                {
                    fg.AppendLine($"FillTextureEffectTextureAnimationSpeedV => {item.FillTextureEffectTextureAnimationSpeedV}");
                }
                if (printMask?.EdgeEffectFallOff ?? true)
                {
                    fg.AppendLine($"EdgeEffectFallOff => {item.EdgeEffectFallOff}");
                }
                if (printMask?.EdgeEffectColor ?? true)
                {
                    fg.AppendLine($"EdgeEffectColor => {item.EdgeEffectColor}");
                }
                if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
                {
                    fg.AppendLine($"EdgeEffectAlphaFadeInTime => {item.EdgeEffectAlphaFadeInTime}");
                }
                if (printMask?.EdgeEffectFullAlphaTime ?? true)
                {
                    fg.AppendLine($"EdgeEffectFullAlphaTime => {item.EdgeEffectFullAlphaTime}");
                }
                if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
                {
                    fg.AppendLine($"EdgeEffectAlphaFadeOutTime => {item.EdgeEffectAlphaFadeOutTime}");
                }
                if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
                {
                    fg.AppendLine($"EdgeEffectPersistentAlphaRatio => {item.EdgeEffectPersistentAlphaRatio}");
                }
                if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
                {
                    fg.AppendLine($"EdgeEffectAlphaPulseAmplitude => {item.EdgeEffectAlphaPulseAmplitude}");
                }
                if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
                {
                    fg.AppendLine($"EdgeEffectAlphaPulseFrequency => {item.EdgeEffectAlphaPulseFrequency}");
                }
                if (printMask?.FillTextureEffectFullAlphaRatio ?? true)
                {
                    fg.AppendLine($"FillTextureEffectFullAlphaRatio => {item.FillTextureEffectFullAlphaRatio}");
                }
                if (printMask?.EdgeEffectFullAlphaRatio ?? true)
                {
                    fg.AppendLine($"EdgeEffectFullAlphaRatio => {item.EdgeEffectFullAlphaRatio}");
                }
                if (printMask?.MembraneShaderDestBlendMode ?? true)
                {
                    fg.AppendLine($"MembraneShaderDestBlendMode => {item.MembraneShaderDestBlendMode}");
                }
                if (printMask?.ParticleShaderSourceBlendMode ?? true)
                {
                    fg.AppendLine($"ParticleShaderSourceBlendMode => {item.ParticleShaderSourceBlendMode}");
                }
                if (printMask?.ParticleShaderBlendOperation ?? true)
                {
                    fg.AppendLine($"ParticleShaderBlendOperation => {item.ParticleShaderBlendOperation}");
                }
                if (printMask?.ParticleShaderZTestFunction ?? true)
                {
                    fg.AppendLine($"ParticleShaderZTestFunction => {item.ParticleShaderZTestFunction}");
                }
                if (printMask?.ParticleShaderDestBlendMode ?? true)
                {
                    fg.AppendLine($"ParticleShaderDestBlendMode => {item.ParticleShaderDestBlendMode}");
                }
                if (printMask?.ParticleShaderParticleBirthRampUpTime ?? true)
                {
                    fg.AppendLine($"ParticleShaderParticleBirthRampUpTime => {item.ParticleShaderParticleBirthRampUpTime}");
                }
                if (printMask?.ParticleShaderFullParticleBirthTime ?? true)
                {
                    fg.AppendLine($"ParticleShaderFullParticleBirthTime => {item.ParticleShaderFullParticleBirthTime}");
                }
                if (printMask?.ParticleShaderParticleBirthRampDownTime ?? true)
                {
                    fg.AppendLine($"ParticleShaderParticleBirthRampDownTime => {item.ParticleShaderParticleBirthRampDownTime}");
                }
                if (printMask?.ParticleShaderFullParticleBirthRatio ?? true)
                {
                    fg.AppendLine($"ParticleShaderFullParticleBirthRatio => {item.ParticleShaderFullParticleBirthRatio}");
                }
                if (printMask?.ParticleShaderPersistentParticleBirthRatio ?? true)
                {
                    fg.AppendLine($"ParticleShaderPersistentParticleBirthRatio => {item.ParticleShaderPersistentParticleBirthRatio}");
                }
                if (printMask?.ParticleShaderParticleLifetime ?? true)
                {
                    fg.AppendLine($"ParticleShaderParticleLifetime => {item.ParticleShaderParticleLifetime}");
                }
                if (printMask?.ParticleShaderParticleLifetimePlusMinus ?? true)
                {
                    fg.AppendLine($"ParticleShaderParticleLifetimePlusMinus => {item.ParticleShaderParticleLifetimePlusMinus}");
                }
                if (printMask?.ParticleShaderInitialSpeedAlongNormal ?? true)
                {
                    fg.AppendLine($"ParticleShaderInitialSpeedAlongNormal => {item.ParticleShaderInitialSpeedAlongNormal}");
                }
                if (printMask?.ParticleShaderAccelerationAlongNormal ?? true)
                {
                    fg.AppendLine($"ParticleShaderAccelerationAlongNormal => {item.ParticleShaderAccelerationAlongNormal}");
                }
                if (printMask?.ParticleShaderInitialVelocity1 ?? true)
                {
                    fg.AppendLine($"ParticleShaderInitialVelocity1 => {item.ParticleShaderInitialVelocity1}");
                }
                if (printMask?.ParticleShaderInitialVelocity2 ?? true)
                {
                    fg.AppendLine($"ParticleShaderInitialVelocity2 => {item.ParticleShaderInitialVelocity2}");
                }
                if (printMask?.ParticleShaderInitialVelocity3 ?? true)
                {
                    fg.AppendLine($"ParticleShaderInitialVelocity3 => {item.ParticleShaderInitialVelocity3}");
                }
                if (printMask?.ParticleShaderAcceleration1 ?? true)
                {
                    fg.AppendLine($"ParticleShaderAcceleration1 => {item.ParticleShaderAcceleration1}");
                }
                if (printMask?.ParticleShaderAcceleration2 ?? true)
                {
                    fg.AppendLine($"ParticleShaderAcceleration2 => {item.ParticleShaderAcceleration2}");
                }
                if (printMask?.ParticleShaderAcceleration3 ?? true)
                {
                    fg.AppendLine($"ParticleShaderAcceleration3 => {item.ParticleShaderAcceleration3}");
                }
                if (printMask?.ParticleShaderScaleKey1 ?? true)
                {
                    fg.AppendLine($"ParticleShaderScaleKey1 => {item.ParticleShaderScaleKey1}");
                }
                if (printMask?.ParticleShaderScaleKey2 ?? true)
                {
                    fg.AppendLine($"ParticleShaderScaleKey2 => {item.ParticleShaderScaleKey2}");
                }
                if (printMask?.ParticleShaderScaleKey1Time ?? true)
                {
                    fg.AppendLine($"ParticleShaderScaleKey1Time => {item.ParticleShaderScaleKey1Time}");
                }
                if (printMask?.ParticleShaderScaleKey2Time ?? true)
                {
                    fg.AppendLine($"ParticleShaderScaleKey2Time => {item.ParticleShaderScaleKey2Time}");
                }
                if (printMask?.ColorKey1Color ?? true)
                {
                    fg.AppendLine($"ColorKey1Color => {item.ColorKey1Color}");
                }
                if (printMask?.ColorKey2Color ?? true)
                {
                    fg.AppendLine($"ColorKey2Color => {item.ColorKey2Color}");
                }
                if (printMask?.ColorKey3Color ?? true)
                {
                    fg.AppendLine($"ColorKey3Color => {item.ColorKey3Color}");
                }
                if (printMask?.ColorKey1ColorAlpha ?? true)
                {
                    fg.AppendLine($"ColorKey1ColorAlpha => {item.ColorKey1ColorAlpha}");
                }
                if (printMask?.ColorKey2ColorAlpha ?? true)
                {
                    fg.AppendLine($"ColorKey2ColorAlpha => {item.ColorKey2ColorAlpha}");
                }
                if (printMask?.ColorKey3ColorAlpha ?? true)
                {
                    fg.AppendLine($"ColorKey3ColorAlpha => {item.ColorKey3ColorAlpha}");
                }
                if (printMask?.ColorKey1ColorKeyTime ?? true)
                {
                    fg.AppendLine($"ColorKey1ColorKeyTime => {item.ColorKey1ColorKeyTime}");
                }
                if (printMask?.ColorKey2ColorKeyTime ?? true)
                {
                    fg.AppendLine($"ColorKey2ColorKeyTime => {item.ColorKey2ColorKeyTime}");
                }
                if (printMask?.ColorKey3ColorKeyTime ?? true)
                {
                    fg.AppendLine($"ColorKey3ColorKeyTime => {item.ColorKey3ColorKeyTime}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IEffectShaderGetter item,
            EffectShader_Mask<bool?> checkMask)
        {
            if (checkMask.FillTexture.HasValue && checkMask.FillTexture.Value != item.FillTexture_IsSet) return false;
            if (checkMask.ParticleShaderTexture.HasValue && checkMask.ParticleShaderTexture.Value != item.ParticleShaderTexture_IsSet) return false;
            return true;
        }

        public static EffectShader_Mask<bool> GetHasBeenSetMask(IEffectShaderGetter item)
        {
            var ret = new EffectShader_Mask<bool>();
            ret.FillTexture = item.FillTexture_IsSet;
            ret.ParticleShaderTexture = item.ParticleShaderTexture_IsSet;
            ret.Flags = true;
            ret.MembraneShaderSourceBlendMode = true;
            ret.MembraneShaderBlendOperation = true;
            ret.MembraneShaderZTestFunction = true;
            ret.FillTextureEffectColor = true;
            ret.FillTextureEffectAlphaFadeInTime = true;
            ret.FillTextureEffectFullAlphaTime = true;
            ret.FillTextureEffectAlphaFadeOutTime = true;
            ret.FillTextureEffectPersistentAlphaRatio = true;
            ret.FillTextureEffectAlphaPulseAmplitude = true;
            ret.FillTextureEffectAlphaPulseFrequency = true;
            ret.FillTextureEffectTextureAnimationSpeedU = true;
            ret.FillTextureEffectTextureAnimationSpeedV = true;
            ret.EdgeEffectFallOff = true;
            ret.EdgeEffectColor = true;
            ret.EdgeEffectAlphaFadeInTime = true;
            ret.EdgeEffectFullAlphaTime = true;
            ret.EdgeEffectAlphaFadeOutTime = true;
            ret.EdgeEffectPersistentAlphaRatio = true;
            ret.EdgeEffectAlphaPulseAmplitude = true;
            ret.EdgeEffectAlphaPulseFrequency = true;
            ret.FillTextureEffectFullAlphaRatio = true;
            ret.EdgeEffectFullAlphaRatio = true;
            ret.MembraneShaderDestBlendMode = true;
            ret.ParticleShaderSourceBlendMode = true;
            ret.ParticleShaderBlendOperation = true;
            ret.ParticleShaderZTestFunction = true;
            ret.ParticleShaderDestBlendMode = true;
            ret.ParticleShaderParticleBirthRampUpTime = true;
            ret.ParticleShaderFullParticleBirthTime = true;
            ret.ParticleShaderParticleBirthRampDownTime = true;
            ret.ParticleShaderFullParticleBirthRatio = true;
            ret.ParticleShaderPersistentParticleBirthRatio = true;
            ret.ParticleShaderParticleLifetime = true;
            ret.ParticleShaderParticleLifetimePlusMinus = true;
            ret.ParticleShaderInitialSpeedAlongNormal = true;
            ret.ParticleShaderAccelerationAlongNormal = true;
            ret.ParticleShaderInitialVelocity1 = true;
            ret.ParticleShaderInitialVelocity2 = true;
            ret.ParticleShaderInitialVelocity3 = true;
            ret.ParticleShaderAcceleration1 = true;
            ret.ParticleShaderAcceleration2 = true;
            ret.ParticleShaderAcceleration3 = true;
            ret.ParticleShaderScaleKey1 = true;
            ret.ParticleShaderScaleKey2 = true;
            ret.ParticleShaderScaleKey1Time = true;
            ret.ParticleShaderScaleKey2Time = true;
            ret.ColorKey1Color = true;
            ret.ColorKey2Color = true;
            ret.ColorKey3Color = true;
            ret.ColorKey1ColorAlpha = true;
            ret.ColorKey2ColorAlpha = true;
            ret.ColorKey3ColorAlpha = true;
            ret.ColorKey1ColorKeyTime = true;
            ret.ColorKey2ColorKeyTime = true;
            ret.ColorKey3ColorKeyTime = true;
            return ret;
        }

        public static EffectShader_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static EffectShader_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (EffectShader_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.RecordType:
                    return (EffectShader_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static EffectShader_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static EffectShader_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            EffectShader item,
            bool doMasks,
            out EffectShader_ErrorMask errorMask,
            EffectShader_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            EffectShader item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.EffectShader");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.EffectShader");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this EffectShader item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.FillTexture_IsSet
                && (translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTexture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTexture),
                    item: item.FillTexture,
                    fieldIndex: (int)EffectShader_FieldIndex.FillTexture,
                    errorMask: errorMask);
            }
            if (item.ParticleShaderTexture_IsSet
                && (translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderTexture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderTexture),
                    item: item.ParticleShaderTexture,
                    fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderTexture,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<EffectShader.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)EffectShader_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode) ?? true))
                {
                    EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                        node: node,
                        name: nameof(item.MembraneShaderSourceBlendMode),
                        item: item.MembraneShaderSourceBlendMode,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderBlendOperation) ?? true))
                {
                    EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Write(
                        node: node,
                        name: nameof(item.MembraneShaderBlendOperation),
                        item: item.MembraneShaderBlendOperation,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderBlendOperation,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderZTestFunction) ?? true))
                {
                    EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Write(
                        node: node,
                        name: nameof(item.MembraneShaderZTestFunction),
                        item: item.MembraneShaderZTestFunction,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderZTestFunction,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectColor) ?? true))
                {
                    ColorXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectColor),
                        item: item.FillTextureEffectColor,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectColor,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectAlphaFadeInTime),
                        item: item.FillTextureEffectAlphaFadeInTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectFullAlphaTime),
                        item: item.FillTextureEffectFullAlphaTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectAlphaFadeOutTime),
                        item: item.FillTextureEffectAlphaFadeOutTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectPersistentAlphaRatio),
                        item: item.FillTextureEffectPersistentAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectAlphaPulseAmplitude),
                        item: item.FillTextureEffectAlphaPulseAmplitude,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectAlphaPulseFrequency),
                        item: item.FillTextureEffectAlphaPulseFrequency,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectTextureAnimationSpeedU),
                        item: item.FillTextureEffectTextureAnimationSpeedU,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectTextureAnimationSpeedV),
                        item: item.FillTextureEffectTextureAnimationSpeedV,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectFallOff),
                        item: item.EdgeEffectFallOff,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFallOff,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
                {
                    ColorXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectColor),
                        item: item.EdgeEffectColor,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectColor,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectAlphaFadeInTime),
                        item: item.EdgeEffectAlphaFadeInTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectFullAlphaTime),
                        item: item.EdgeEffectFullAlphaTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectAlphaFadeOutTime),
                        item: item.EdgeEffectAlphaFadeOutTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectPersistentAlphaRatio),
                        item: item.EdgeEffectPersistentAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectAlphaPulseAmplitude),
                        item: item.EdgeEffectAlphaPulseAmplitude,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectAlphaPulseFrequency),
                        item: item.EdgeEffectAlphaPulseFrequency,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectFullAlphaRatio),
                        item: item.FillTextureEffectFullAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectFullAlphaRatio),
                        item: item.EdgeEffectFullAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode) ?? true))
                {
                    EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                        node: node,
                        name: nameof(item.MembraneShaderDestBlendMode),
                        item: item.MembraneShaderDestBlendMode,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderDestBlendMode,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode) ?? true))
                    {
                        EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderSourceBlendMode),
                            item: item.ParticleShaderSourceBlendMode,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderBlendOperation) ?? true))
                    {
                        EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderBlendOperation),
                            item: item.ParticleShaderBlendOperation,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderBlendOperation,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderZTestFunction) ?? true))
                    {
                        EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderZTestFunction),
                            item: item.ParticleShaderZTestFunction,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderZTestFunction,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderDestBlendMode) ?? true))
                    {
                        EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderDestBlendMode),
                            item: item.ParticleShaderDestBlendMode,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderDestBlendMode,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderParticleBirthRampUpTime),
                            item: item.ParticleShaderParticleBirthRampUpTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderFullParticleBirthTime),
                            item: item.ParticleShaderFullParticleBirthTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderParticleBirthRampDownTime),
                            item: item.ParticleShaderParticleBirthRampDownTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderFullParticleBirthRatio),
                            item: item.ParticleShaderFullParticleBirthRatio,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderPersistentParticleBirthRatio),
                            item: item.ParticleShaderPersistentParticleBirthRatio,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleLifetime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderParticleLifetime),
                            item: item.ParticleShaderParticleLifetime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleLifetime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderParticleLifetimePlusMinus),
                            item: item.ParticleShaderParticleLifetimePlusMinus,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderInitialSpeedAlongNormal),
                            item: item.ParticleShaderInitialSpeedAlongNormal,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderAccelerationAlongNormal),
                            item: item.ParticleShaderAccelerationAlongNormal,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderInitialVelocity1),
                            item: item.ParticleShaderInitialVelocity1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderInitialVelocity2),
                            item: item.ParticleShaderInitialVelocity2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderInitialVelocity3),
                            item: item.ParticleShaderInitialVelocity3,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration1) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderAcceleration1),
                            item: item.ParticleShaderAcceleration1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration1,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration2) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderAcceleration2),
                            item: item.ParticleShaderAcceleration2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration2,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration3) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderAcceleration3),
                            item: item.ParticleShaderAcceleration3,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration3,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey1) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderScaleKey1),
                            item: item.ParticleShaderScaleKey1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey1,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey2) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderScaleKey2),
                            item: item.ParticleShaderScaleKey2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey2,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderScaleKey1Time),
                            item: item.ParticleShaderScaleKey1Time,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderScaleKey2Time),
                            item: item.ParticleShaderScaleKey2Time,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1Color) ?? true))
                    {
                        ColorXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey1Color),
                            item: item.ColorKey1Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1Color,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2Color) ?? true))
                    {
                        ColorXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey2Color),
                            item: item.ColorKey2Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2Color,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3Color) ?? true))
                    {
                        ColorXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey3Color),
                            item: item.ColorKey3Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3Color,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1ColorAlpha) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey1ColorAlpha),
                            item: item.ColorKey1ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1ColorAlpha,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2ColorAlpha) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey2ColorAlpha),
                            item: item.ColorKey2ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2ColorAlpha,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3ColorAlpha) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey3ColorAlpha),
                            item: item.ColorKey3ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3ColorAlpha,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1ColorKeyTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey1ColorKeyTime),
                            item: item.ColorKey1ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1ColorKeyTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2ColorKeyTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey2ColorKeyTime),
                            item: item.ColorKey2ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2ColorKeyTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey3ColorKeyTime),
                            item: item.ColorKey3ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3ColorKeyTime,
                            errorMask: errorMask);
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
        }

        public static void FillPublic_Xml(
            this EffectShader item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EffectShaderCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this EffectShader item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "FillTexture":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTexture);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String FillTextureParse,
                            errorMask: errorMask))
                        {
                            item.FillTexture = FillTextureParse;
                        }
                        else
                        {
                            item.FillTexture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderTexture":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderTexture);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String ParticleShaderTextureParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderTexture = ParticleShaderTextureParse;
                        }
                        else
                        {
                            item.ParticleShaderTexture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.Flags);
                        if (EnumXmlTranslation<EffectShader.Flag>.Instance.Parse(
                            node: node,
                            item: out EffectShader.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(EffectShader.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= EffectShader.DATADataType.Has;
                    break;
                case "MembraneShaderSourceBlendMode":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode);
                        if (EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            item: out EffectShader.SourceBlendMode MembraneShaderSourceBlendModeParse,
                            errorMask: errorMask))
                        {
                            item.MembraneShaderSourceBlendMode = MembraneShaderSourceBlendModeParse;
                        }
                        else
                        {
                            item.MembraneShaderSourceBlendMode = default(EffectShader.SourceBlendMode);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderBlendOperation":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderBlendOperation);
                        if (EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Parse(
                            node: node,
                            item: out EffectShader.BlendOperation MembraneShaderBlendOperationParse,
                            errorMask: errorMask))
                        {
                            item.MembraneShaderBlendOperation = MembraneShaderBlendOperationParse;
                        }
                        else
                        {
                            item.MembraneShaderBlendOperation = default(EffectShader.BlendOperation);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderZTestFunction":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderZTestFunction);
                        if (EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Parse(
                            node: node,
                            item: out EffectShader.ZTestFunction MembraneShaderZTestFunctionParse,
                            errorMask: errorMask))
                        {
                            item.MembraneShaderZTestFunction = MembraneShaderZTestFunctionParse;
                        }
                        else
                        {
                            item.MembraneShaderZTestFunction = default(EffectShader.ZTestFunction);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectColor":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color FillTextureEffectColorParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectColor = FillTextureEffectColorParse;
                        }
                        else
                        {
                            item.FillTextureEffectColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaFadeInTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectAlphaFadeInTimeParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectAlphaFadeInTime = FillTextureEffectAlphaFadeInTimeParse;
                        }
                        else
                        {
                            item.FillTextureEffectAlphaFadeInTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectFullAlphaTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectFullAlphaTimeParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectFullAlphaTime = FillTextureEffectFullAlphaTimeParse;
                        }
                        else
                        {
                            item.FillTextureEffectFullAlphaTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaFadeOutTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectAlphaFadeOutTimeParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectAlphaFadeOutTime = FillTextureEffectAlphaFadeOutTimeParse;
                        }
                        else
                        {
                            item.FillTextureEffectAlphaFadeOutTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectPersistentAlphaRatio":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectPersistentAlphaRatioParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectPersistentAlphaRatio = FillTextureEffectPersistentAlphaRatioParse;
                        }
                        else
                        {
                            item.FillTextureEffectPersistentAlphaRatio = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaPulseAmplitude":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectAlphaPulseAmplitudeParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectAlphaPulseAmplitude = FillTextureEffectAlphaPulseAmplitudeParse;
                        }
                        else
                        {
                            item.FillTextureEffectAlphaPulseAmplitude = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaPulseFrequency":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectAlphaPulseFrequencyParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectAlphaPulseFrequency = FillTextureEffectAlphaPulseFrequencyParse;
                        }
                        else
                        {
                            item.FillTextureEffectAlphaPulseFrequency = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectTextureAnimationSpeedU":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectTextureAnimationSpeedUParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectTextureAnimationSpeedU = FillTextureEffectTextureAnimationSpeedUParse;
                        }
                        else
                        {
                            item.FillTextureEffectTextureAnimationSpeedU = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectTextureAnimationSpeedV":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectTextureAnimationSpeedVParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectTextureAnimationSpeedV = FillTextureEffectTextureAnimationSpeedVParse;
                        }
                        else
                        {
                            item.FillTextureEffectTextureAnimationSpeedV = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFallOff":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFallOff);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EdgeEffectFallOffParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectFallOff = EdgeEffectFallOffParse;
                        }
                        else
                        {
                            item.EdgeEffectFallOff = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectColor":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color EdgeEffectColorParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectColor = EdgeEffectColorParse;
                        }
                        else
                        {
                            item.EdgeEffectColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaFadeInTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EdgeEffectAlphaFadeInTimeParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectAlphaFadeInTime = EdgeEffectAlphaFadeInTimeParse;
                        }
                        else
                        {
                            item.EdgeEffectAlphaFadeInTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFullAlphaTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EdgeEffectFullAlphaTimeParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectFullAlphaTime = EdgeEffectFullAlphaTimeParse;
                        }
                        else
                        {
                            item.EdgeEffectFullAlphaTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaFadeOutTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EdgeEffectAlphaFadeOutTimeParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectAlphaFadeOutTime = EdgeEffectAlphaFadeOutTimeParse;
                        }
                        else
                        {
                            item.EdgeEffectAlphaFadeOutTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectPersistentAlphaRatio":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EdgeEffectPersistentAlphaRatioParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectPersistentAlphaRatio = EdgeEffectPersistentAlphaRatioParse;
                        }
                        else
                        {
                            item.EdgeEffectPersistentAlphaRatio = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaPulseAmplitude":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EdgeEffectAlphaPulseAmplitudeParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectAlphaPulseAmplitude = EdgeEffectAlphaPulseAmplitudeParse;
                        }
                        else
                        {
                            item.EdgeEffectAlphaPulseAmplitude = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaPulseFrequency":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EdgeEffectAlphaPulseFrequencyParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectAlphaPulseFrequency = EdgeEffectAlphaPulseFrequencyParse;
                        }
                        else
                        {
                            item.EdgeEffectAlphaPulseFrequency = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectFullAlphaRatio":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FillTextureEffectFullAlphaRatioParse,
                            errorMask: errorMask))
                        {
                            item.FillTextureEffectFullAlphaRatio = FillTextureEffectFullAlphaRatioParse;
                        }
                        else
                        {
                            item.FillTextureEffectFullAlphaRatio = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFullAlphaRatio":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single EdgeEffectFullAlphaRatioParse,
                            errorMask: errorMask))
                        {
                            item.EdgeEffectFullAlphaRatio = EdgeEffectFullAlphaRatioParse;
                        }
                        else
                        {
                            item.EdgeEffectFullAlphaRatio = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderDestBlendMode":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode);
                        if (EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            item: out EffectShader.SourceBlendMode MembraneShaderDestBlendModeParse,
                            errorMask: errorMask))
                        {
                            item.MembraneShaderDestBlendMode = MembraneShaderDestBlendModeParse;
                        }
                        else
                        {
                            item.MembraneShaderDestBlendMode = default(EffectShader.SourceBlendMode);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderSourceBlendMode":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode);
                        if (EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            item: out EffectShader.SourceBlendMode ParticleShaderSourceBlendModeParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderSourceBlendMode = ParticleShaderSourceBlendModeParse;
                        }
                        else
                        {
                            item.ParticleShaderSourceBlendMode = default(EffectShader.SourceBlendMode);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~EffectShader.DATADataType.Break0;
                    break;
                case "ParticleShaderBlendOperation":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderBlendOperation);
                        if (EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Parse(
                            node: node,
                            item: out EffectShader.BlendOperation ParticleShaderBlendOperationParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderBlendOperation = ParticleShaderBlendOperationParse;
                        }
                        else
                        {
                            item.ParticleShaderBlendOperation = default(EffectShader.BlendOperation);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderZTestFunction":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderZTestFunction);
                        if (EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Parse(
                            node: node,
                            item: out EffectShader.ZTestFunction ParticleShaderZTestFunctionParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderZTestFunction = ParticleShaderZTestFunctionParse;
                        }
                        else
                        {
                            item.ParticleShaderZTestFunction = default(EffectShader.ZTestFunction);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderDestBlendMode":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderDestBlendMode);
                        if (EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            item: out EffectShader.SourceBlendMode ParticleShaderDestBlendModeParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderDestBlendMode = ParticleShaderDestBlendModeParse;
                        }
                        else
                        {
                            item.ParticleShaderDestBlendMode = default(EffectShader.SourceBlendMode);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleBirthRampUpTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderParticleBirthRampUpTimeParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderParticleBirthRampUpTime = ParticleShaderParticleBirthRampUpTimeParse;
                        }
                        else
                        {
                            item.ParticleShaderParticleBirthRampUpTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderFullParticleBirthTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderFullParticleBirthTimeParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderFullParticleBirthTime = ParticleShaderFullParticleBirthTimeParse;
                        }
                        else
                        {
                            item.ParticleShaderFullParticleBirthTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleBirthRampDownTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderParticleBirthRampDownTimeParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderParticleBirthRampDownTime = ParticleShaderParticleBirthRampDownTimeParse;
                        }
                        else
                        {
                            item.ParticleShaderParticleBirthRampDownTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderFullParticleBirthRatio":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderFullParticleBirthRatioParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderFullParticleBirthRatio = ParticleShaderFullParticleBirthRatioParse;
                        }
                        else
                        {
                            item.ParticleShaderFullParticleBirthRatio = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderPersistentParticleBirthRatio":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderPersistentParticleBirthRatioParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderPersistentParticleBirthRatio = ParticleShaderPersistentParticleBirthRatioParse;
                        }
                        else
                        {
                            item.ParticleShaderPersistentParticleBirthRatio = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleLifetime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleLifetime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderParticleLifetimeParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderParticleLifetime = ParticleShaderParticleLifetimeParse;
                        }
                        else
                        {
                            item.ParticleShaderParticleLifetime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleLifetimePlusMinus":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderParticleLifetimePlusMinusParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderParticleLifetimePlusMinus = ParticleShaderParticleLifetimePlusMinusParse;
                        }
                        else
                        {
                            item.ParticleShaderParticleLifetimePlusMinus = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialSpeedAlongNormal":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderInitialSpeedAlongNormalParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderInitialSpeedAlongNormal = ParticleShaderInitialSpeedAlongNormalParse;
                        }
                        else
                        {
                            item.ParticleShaderInitialSpeedAlongNormal = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAccelerationAlongNormal":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderAccelerationAlongNormalParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderAccelerationAlongNormal = ParticleShaderAccelerationAlongNormalParse;
                        }
                        else
                        {
                            item.ParticleShaderAccelerationAlongNormal = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity1":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderInitialVelocity1Parse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderInitialVelocity1 = ParticleShaderInitialVelocity1Parse;
                        }
                        else
                        {
                            item.ParticleShaderInitialVelocity1 = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity2":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderInitialVelocity2Parse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderInitialVelocity2 = ParticleShaderInitialVelocity2Parse;
                        }
                        else
                        {
                            item.ParticleShaderInitialVelocity2 = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity3":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderInitialVelocity3Parse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderInitialVelocity3 = ParticleShaderInitialVelocity3Parse;
                        }
                        else
                        {
                            item.ParticleShaderInitialVelocity3 = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration1":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration1);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderAcceleration1Parse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderAcceleration1 = ParticleShaderAcceleration1Parse;
                        }
                        else
                        {
                            item.ParticleShaderAcceleration1 = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration2":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration2);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderAcceleration2Parse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderAcceleration2 = ParticleShaderAcceleration2Parse;
                        }
                        else
                        {
                            item.ParticleShaderAcceleration2 = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration3":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration3);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderAcceleration3Parse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderAcceleration3 = ParticleShaderAcceleration3Parse;
                        }
                        else
                        {
                            item.ParticleShaderAcceleration3 = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey1":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey1);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderScaleKey1Parse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderScaleKey1 = ParticleShaderScaleKey1Parse;
                        }
                        else
                        {
                            item.ParticleShaderScaleKey1 = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey2":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey2);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderScaleKey2Parse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderScaleKey2 = ParticleShaderScaleKey2Parse;
                        }
                        else
                        {
                            item.ParticleShaderScaleKey2 = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey1Time":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderScaleKey1TimeParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderScaleKey1Time = ParticleShaderScaleKey1TimeParse;
                        }
                        else
                        {
                            item.ParticleShaderScaleKey1Time = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey2Time":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParticleShaderScaleKey2TimeParse,
                            errorMask: errorMask))
                        {
                            item.ParticleShaderScaleKey2Time = ParticleShaderScaleKey2TimeParse;
                        }
                        else
                        {
                            item.ParticleShaderScaleKey2Time = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1Color":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1Color);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color ColorKey1ColorParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey1Color = ColorKey1ColorParse;
                        }
                        else
                        {
                            item.ColorKey1Color = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2Color":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2Color);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color ColorKey2ColorParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey2Color = ColorKey2ColorParse;
                        }
                        else
                        {
                            item.ColorKey2Color = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3Color":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3Color);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color ColorKey3ColorParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey3Color = ColorKey3ColorParse;
                        }
                        else
                        {
                            item.ColorKey3Color = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1ColorAlpha":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1ColorAlpha);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ColorKey1ColorAlphaParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey1ColorAlpha = ColorKey1ColorAlphaParse;
                        }
                        else
                        {
                            item.ColorKey1ColorAlpha = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2ColorAlpha":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2ColorAlpha);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ColorKey2ColorAlphaParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey2ColorAlpha = ColorKey2ColorAlphaParse;
                        }
                        else
                        {
                            item.ColorKey2ColorAlpha = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3ColorAlpha":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3ColorAlpha);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ColorKey3ColorAlphaParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey3ColorAlpha = ColorKey3ColorAlphaParse;
                        }
                        else
                        {
                            item.ColorKey3ColorAlpha = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1ColorKeyTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1ColorKeyTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ColorKey1ColorKeyTimeParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey1ColorKeyTime = ColorKey1ColorKeyTimeParse;
                        }
                        else
                        {
                            item.ColorKey1ColorKeyTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2ColorKeyTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2ColorKeyTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ColorKey2ColorKeyTimeParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey2ColorKeyTime = ColorKey2ColorKeyTimeParse;
                        }
                        else
                        {
                            item.ColorKey2ColorKeyTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3ColorKeyTime":
                    try
                    {
                        errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ColorKey3ColorKeyTimeParse,
                            errorMask: errorMask))
                        {
                            item.ColorKey3ColorKeyTime = ColorKey3ColorKeyTimeParse;
                        }
                        else
                        {
                            item.ColorKey3ColorKeyTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            EffectShader item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out EffectShader_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = EffectShader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            EffectShader item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: EffectShader_Registration.EFSH_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            EffectShader item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.FillTexture_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FillTexture,
                    fieldIndex: (int)EffectShader_FieldIndex.FillTexture,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(EffectShader_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.ParticleShaderTexture_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleShaderTexture,
                    fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderTexture,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(EffectShader_Registration.ICO2_HEADER),
                    nullable: false);
            }
            if (item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(EffectShader_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4,
                        fieldIndex: (int)EffectShader_FieldIndex.Flags,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                        writer,
                        item.MembraneShaderSourceBlendMode,
                        length: 4,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Write(
                        writer,
                        item.MembraneShaderBlendOperation,
                        length: 4,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderBlendOperation,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Write(
                        writer,
                        item.MembraneShaderZTestFunction,
                        length: 4,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderZTestFunction,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectColor,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectColor,
                        errorMask: errorMask,
                        extraByte: true);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectAlphaFadeInTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectFullAlphaTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectAlphaFadeOutTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectPersistentAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectAlphaPulseAmplitude,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectAlphaPulseFrequency,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectTextureAnimationSpeedU,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectTextureAnimationSpeedV,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectFallOff,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFallOff,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectColor,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectColor,
                        errorMask: errorMask,
                        extraByte: true);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectAlphaFadeInTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectFullAlphaTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectAlphaFadeOutTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectPersistentAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectAlphaPulseAmplitude,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectAlphaPulseFrequency,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectFullAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectFullAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                        writer,
                        item.MembraneShaderDestBlendMode,
                        length: 4,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderDestBlendMode,
                        errorMask: errorMask);
                    if (!item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                            writer,
                            item.ParticleShaderSourceBlendMode,
                            length: 4,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Write(
                            writer,
                            item.ParticleShaderBlendOperation,
                            length: 4,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderBlendOperation,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Write(
                            writer,
                            item.ParticleShaderZTestFunction,
                            length: 4,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderZTestFunction,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                            writer,
                            item.ParticleShaderDestBlendMode,
                            length: 4,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderDestBlendMode,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderParticleBirthRampUpTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderFullParticleBirthTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderParticleBirthRampDownTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderFullParticleBirthRatio,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderPersistentParticleBirthRatio,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderParticleLifetime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleLifetime,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderParticleLifetimePlusMinus,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderInitialSpeedAlongNormal,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderAccelerationAlongNormal,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderInitialVelocity1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderInitialVelocity2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderInitialVelocity3,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderAcceleration1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration1,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderAcceleration2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration2,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderAcceleration3,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration3,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderScaleKey1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey1,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderScaleKey2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey2,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderScaleKey1Time,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderScaleKey2Time,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey1Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1Color,
                            errorMask: errorMask,
                            extraByte: true);
                        Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey2Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2Color,
                            errorMask: errorMask,
                            extraByte: true);
                        Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey3Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3Color,
                            errorMask: errorMask,
                            extraByte: true);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey1ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1ColorAlpha,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey2ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2ColorAlpha,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey3ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3ColorAlpha,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey1ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1ColorKeyTime,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey2ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2ColorKeyTime,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey3ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3ColorKeyTime,
                            errorMask: errorMask);
                    }
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class EffectShader_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<EffectShader_Mask<T>>
    {
        #region Ctors
        public EffectShader_Mask()
        {
        }

        public EffectShader_Mask(T initialValue)
        {
            this.FillTexture = initialValue;
            this.ParticleShaderTexture = initialValue;
            this.Flags = initialValue;
            this.MembraneShaderSourceBlendMode = initialValue;
            this.MembraneShaderBlendOperation = initialValue;
            this.MembraneShaderZTestFunction = initialValue;
            this.FillTextureEffectColor = initialValue;
            this.FillTextureEffectAlphaFadeInTime = initialValue;
            this.FillTextureEffectFullAlphaTime = initialValue;
            this.FillTextureEffectAlphaFadeOutTime = initialValue;
            this.FillTextureEffectPersistentAlphaRatio = initialValue;
            this.FillTextureEffectAlphaPulseAmplitude = initialValue;
            this.FillTextureEffectAlphaPulseFrequency = initialValue;
            this.FillTextureEffectTextureAnimationSpeedU = initialValue;
            this.FillTextureEffectTextureAnimationSpeedV = initialValue;
            this.EdgeEffectFallOff = initialValue;
            this.EdgeEffectColor = initialValue;
            this.EdgeEffectAlphaFadeInTime = initialValue;
            this.EdgeEffectFullAlphaTime = initialValue;
            this.EdgeEffectAlphaFadeOutTime = initialValue;
            this.EdgeEffectPersistentAlphaRatio = initialValue;
            this.EdgeEffectAlphaPulseAmplitude = initialValue;
            this.EdgeEffectAlphaPulseFrequency = initialValue;
            this.FillTextureEffectFullAlphaRatio = initialValue;
            this.EdgeEffectFullAlphaRatio = initialValue;
            this.MembraneShaderDestBlendMode = initialValue;
            this.ParticleShaderSourceBlendMode = initialValue;
            this.ParticleShaderBlendOperation = initialValue;
            this.ParticleShaderZTestFunction = initialValue;
            this.ParticleShaderDestBlendMode = initialValue;
            this.ParticleShaderParticleBirthRampUpTime = initialValue;
            this.ParticleShaderFullParticleBirthTime = initialValue;
            this.ParticleShaderParticleBirthRampDownTime = initialValue;
            this.ParticleShaderFullParticleBirthRatio = initialValue;
            this.ParticleShaderPersistentParticleBirthRatio = initialValue;
            this.ParticleShaderParticleLifetime = initialValue;
            this.ParticleShaderParticleLifetimePlusMinus = initialValue;
            this.ParticleShaderInitialSpeedAlongNormal = initialValue;
            this.ParticleShaderAccelerationAlongNormal = initialValue;
            this.ParticleShaderInitialVelocity1 = initialValue;
            this.ParticleShaderInitialVelocity2 = initialValue;
            this.ParticleShaderInitialVelocity3 = initialValue;
            this.ParticleShaderAcceleration1 = initialValue;
            this.ParticleShaderAcceleration2 = initialValue;
            this.ParticleShaderAcceleration3 = initialValue;
            this.ParticleShaderScaleKey1 = initialValue;
            this.ParticleShaderScaleKey2 = initialValue;
            this.ParticleShaderScaleKey1Time = initialValue;
            this.ParticleShaderScaleKey2Time = initialValue;
            this.ColorKey1Color = initialValue;
            this.ColorKey2Color = initialValue;
            this.ColorKey3Color = initialValue;
            this.ColorKey1ColorAlpha = initialValue;
            this.ColorKey2ColorAlpha = initialValue;
            this.ColorKey3ColorAlpha = initialValue;
            this.ColorKey1ColorKeyTime = initialValue;
            this.ColorKey2ColorKeyTime = initialValue;
            this.ColorKey3ColorKeyTime = initialValue;
        }
        #endregion

        #region Members
        public T FillTexture;
        public T ParticleShaderTexture;
        public T Flags;
        public T MembraneShaderSourceBlendMode;
        public T MembraneShaderBlendOperation;
        public T MembraneShaderZTestFunction;
        public T FillTextureEffectColor;
        public T FillTextureEffectAlphaFadeInTime;
        public T FillTextureEffectFullAlphaTime;
        public T FillTextureEffectAlphaFadeOutTime;
        public T FillTextureEffectPersistentAlphaRatio;
        public T FillTextureEffectAlphaPulseAmplitude;
        public T FillTextureEffectAlphaPulseFrequency;
        public T FillTextureEffectTextureAnimationSpeedU;
        public T FillTextureEffectTextureAnimationSpeedV;
        public T EdgeEffectFallOff;
        public T EdgeEffectColor;
        public T EdgeEffectAlphaFadeInTime;
        public T EdgeEffectFullAlphaTime;
        public T EdgeEffectAlphaFadeOutTime;
        public T EdgeEffectPersistentAlphaRatio;
        public T EdgeEffectAlphaPulseAmplitude;
        public T EdgeEffectAlphaPulseFrequency;
        public T FillTextureEffectFullAlphaRatio;
        public T EdgeEffectFullAlphaRatio;
        public T MembraneShaderDestBlendMode;
        public T ParticleShaderSourceBlendMode;
        public T ParticleShaderBlendOperation;
        public T ParticleShaderZTestFunction;
        public T ParticleShaderDestBlendMode;
        public T ParticleShaderParticleBirthRampUpTime;
        public T ParticleShaderFullParticleBirthTime;
        public T ParticleShaderParticleBirthRampDownTime;
        public T ParticleShaderFullParticleBirthRatio;
        public T ParticleShaderPersistentParticleBirthRatio;
        public T ParticleShaderParticleLifetime;
        public T ParticleShaderParticleLifetimePlusMinus;
        public T ParticleShaderInitialSpeedAlongNormal;
        public T ParticleShaderAccelerationAlongNormal;
        public T ParticleShaderInitialVelocity1;
        public T ParticleShaderInitialVelocity2;
        public T ParticleShaderInitialVelocity3;
        public T ParticleShaderAcceleration1;
        public T ParticleShaderAcceleration2;
        public T ParticleShaderAcceleration3;
        public T ParticleShaderScaleKey1;
        public T ParticleShaderScaleKey2;
        public T ParticleShaderScaleKey1Time;
        public T ParticleShaderScaleKey2Time;
        public T ColorKey1Color;
        public T ColorKey2Color;
        public T ColorKey3Color;
        public T ColorKey1ColorAlpha;
        public T ColorKey2ColorAlpha;
        public T ColorKey3ColorAlpha;
        public T ColorKey1ColorKeyTime;
        public T ColorKey2ColorKeyTime;
        public T ColorKey3ColorKeyTime;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is EffectShader_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(EffectShader_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.FillTexture, rhs.FillTexture)) return false;
            if (!object.Equals(this.ParticleShaderTexture, rhs.ParticleShaderTexture)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.MembraneShaderSourceBlendMode, rhs.MembraneShaderSourceBlendMode)) return false;
            if (!object.Equals(this.MembraneShaderBlendOperation, rhs.MembraneShaderBlendOperation)) return false;
            if (!object.Equals(this.MembraneShaderZTestFunction, rhs.MembraneShaderZTestFunction)) return false;
            if (!object.Equals(this.FillTextureEffectColor, rhs.FillTextureEffectColor)) return false;
            if (!object.Equals(this.FillTextureEffectAlphaFadeInTime, rhs.FillTextureEffectAlphaFadeInTime)) return false;
            if (!object.Equals(this.FillTextureEffectFullAlphaTime, rhs.FillTextureEffectFullAlphaTime)) return false;
            if (!object.Equals(this.FillTextureEffectAlphaFadeOutTime, rhs.FillTextureEffectAlphaFadeOutTime)) return false;
            if (!object.Equals(this.FillTextureEffectPersistentAlphaRatio, rhs.FillTextureEffectPersistentAlphaRatio)) return false;
            if (!object.Equals(this.FillTextureEffectAlphaPulseAmplitude, rhs.FillTextureEffectAlphaPulseAmplitude)) return false;
            if (!object.Equals(this.FillTextureEffectAlphaPulseFrequency, rhs.FillTextureEffectAlphaPulseFrequency)) return false;
            if (!object.Equals(this.FillTextureEffectTextureAnimationSpeedU, rhs.FillTextureEffectTextureAnimationSpeedU)) return false;
            if (!object.Equals(this.FillTextureEffectTextureAnimationSpeedV, rhs.FillTextureEffectTextureAnimationSpeedV)) return false;
            if (!object.Equals(this.EdgeEffectFallOff, rhs.EdgeEffectFallOff)) return false;
            if (!object.Equals(this.EdgeEffectColor, rhs.EdgeEffectColor)) return false;
            if (!object.Equals(this.EdgeEffectAlphaFadeInTime, rhs.EdgeEffectAlphaFadeInTime)) return false;
            if (!object.Equals(this.EdgeEffectFullAlphaTime, rhs.EdgeEffectFullAlphaTime)) return false;
            if (!object.Equals(this.EdgeEffectAlphaFadeOutTime, rhs.EdgeEffectAlphaFadeOutTime)) return false;
            if (!object.Equals(this.EdgeEffectPersistentAlphaRatio, rhs.EdgeEffectPersistentAlphaRatio)) return false;
            if (!object.Equals(this.EdgeEffectAlphaPulseAmplitude, rhs.EdgeEffectAlphaPulseAmplitude)) return false;
            if (!object.Equals(this.EdgeEffectAlphaPulseFrequency, rhs.EdgeEffectAlphaPulseFrequency)) return false;
            if (!object.Equals(this.FillTextureEffectFullAlphaRatio, rhs.FillTextureEffectFullAlphaRatio)) return false;
            if (!object.Equals(this.EdgeEffectFullAlphaRatio, rhs.EdgeEffectFullAlphaRatio)) return false;
            if (!object.Equals(this.MembraneShaderDestBlendMode, rhs.MembraneShaderDestBlendMode)) return false;
            if (!object.Equals(this.ParticleShaderSourceBlendMode, rhs.ParticleShaderSourceBlendMode)) return false;
            if (!object.Equals(this.ParticleShaderBlendOperation, rhs.ParticleShaderBlendOperation)) return false;
            if (!object.Equals(this.ParticleShaderZTestFunction, rhs.ParticleShaderZTestFunction)) return false;
            if (!object.Equals(this.ParticleShaderDestBlendMode, rhs.ParticleShaderDestBlendMode)) return false;
            if (!object.Equals(this.ParticleShaderParticleBirthRampUpTime, rhs.ParticleShaderParticleBirthRampUpTime)) return false;
            if (!object.Equals(this.ParticleShaderFullParticleBirthTime, rhs.ParticleShaderFullParticleBirthTime)) return false;
            if (!object.Equals(this.ParticleShaderParticleBirthRampDownTime, rhs.ParticleShaderParticleBirthRampDownTime)) return false;
            if (!object.Equals(this.ParticleShaderFullParticleBirthRatio, rhs.ParticleShaderFullParticleBirthRatio)) return false;
            if (!object.Equals(this.ParticleShaderPersistentParticleBirthRatio, rhs.ParticleShaderPersistentParticleBirthRatio)) return false;
            if (!object.Equals(this.ParticleShaderParticleLifetime, rhs.ParticleShaderParticleLifetime)) return false;
            if (!object.Equals(this.ParticleShaderParticleLifetimePlusMinus, rhs.ParticleShaderParticleLifetimePlusMinus)) return false;
            if (!object.Equals(this.ParticleShaderInitialSpeedAlongNormal, rhs.ParticleShaderInitialSpeedAlongNormal)) return false;
            if (!object.Equals(this.ParticleShaderAccelerationAlongNormal, rhs.ParticleShaderAccelerationAlongNormal)) return false;
            if (!object.Equals(this.ParticleShaderInitialVelocity1, rhs.ParticleShaderInitialVelocity1)) return false;
            if (!object.Equals(this.ParticleShaderInitialVelocity2, rhs.ParticleShaderInitialVelocity2)) return false;
            if (!object.Equals(this.ParticleShaderInitialVelocity3, rhs.ParticleShaderInitialVelocity3)) return false;
            if (!object.Equals(this.ParticleShaderAcceleration1, rhs.ParticleShaderAcceleration1)) return false;
            if (!object.Equals(this.ParticleShaderAcceleration2, rhs.ParticleShaderAcceleration2)) return false;
            if (!object.Equals(this.ParticleShaderAcceleration3, rhs.ParticleShaderAcceleration3)) return false;
            if (!object.Equals(this.ParticleShaderScaleKey1, rhs.ParticleShaderScaleKey1)) return false;
            if (!object.Equals(this.ParticleShaderScaleKey2, rhs.ParticleShaderScaleKey2)) return false;
            if (!object.Equals(this.ParticleShaderScaleKey1Time, rhs.ParticleShaderScaleKey1Time)) return false;
            if (!object.Equals(this.ParticleShaderScaleKey2Time, rhs.ParticleShaderScaleKey2Time)) return false;
            if (!object.Equals(this.ColorKey1Color, rhs.ColorKey1Color)) return false;
            if (!object.Equals(this.ColorKey2Color, rhs.ColorKey2Color)) return false;
            if (!object.Equals(this.ColorKey3Color, rhs.ColorKey3Color)) return false;
            if (!object.Equals(this.ColorKey1ColorAlpha, rhs.ColorKey1ColorAlpha)) return false;
            if (!object.Equals(this.ColorKey2ColorAlpha, rhs.ColorKey2ColorAlpha)) return false;
            if (!object.Equals(this.ColorKey3ColorAlpha, rhs.ColorKey3ColorAlpha)) return false;
            if (!object.Equals(this.ColorKey1ColorKeyTime, rhs.ColorKey1ColorKeyTime)) return false;
            if (!object.Equals(this.ColorKey2ColorKeyTime, rhs.ColorKey2ColorKeyTime)) return false;
            if (!object.Equals(this.ColorKey3ColorKeyTime, rhs.ColorKey3ColorKeyTime)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.FillTexture?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderTexture?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.MembraneShaderSourceBlendMode?.GetHashCode());
            ret = ret.CombineHashCode(this.MembraneShaderBlendOperation?.GetHashCode());
            ret = ret.CombineHashCode(this.MembraneShaderZTestFunction?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectAlphaFadeInTime?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectFullAlphaTime?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectAlphaFadeOutTime?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectPersistentAlphaRatio?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectAlphaPulseAmplitude?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectAlphaPulseFrequency?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectTextureAnimationSpeedU?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectTextureAnimationSpeedV?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectFallOff?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectColor?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectAlphaFadeInTime?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectFullAlphaTime?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectAlphaFadeOutTime?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectPersistentAlphaRatio?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectAlphaPulseAmplitude?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectAlphaPulseFrequency?.GetHashCode());
            ret = ret.CombineHashCode(this.FillTextureEffectFullAlphaRatio?.GetHashCode());
            ret = ret.CombineHashCode(this.EdgeEffectFullAlphaRatio?.GetHashCode());
            ret = ret.CombineHashCode(this.MembraneShaderDestBlendMode?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderSourceBlendMode?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderBlendOperation?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderZTestFunction?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderDestBlendMode?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderParticleBirthRampUpTime?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderFullParticleBirthTime?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderParticleBirthRampDownTime?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderFullParticleBirthRatio?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderPersistentParticleBirthRatio?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderParticleLifetime?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderParticleLifetimePlusMinus?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderInitialSpeedAlongNormal?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderAccelerationAlongNormal?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderInitialVelocity1?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderInitialVelocity2?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderInitialVelocity3?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderAcceleration1?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderAcceleration2?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderAcceleration3?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderScaleKey1?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderScaleKey2?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderScaleKey1Time?.GetHashCode());
            ret = ret.CombineHashCode(this.ParticleShaderScaleKey2Time?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey1Color?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey2Color?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey3Color?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey1ColorAlpha?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey2ColorAlpha?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey3ColorAlpha?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey1ColorKeyTime?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey2ColorKeyTime?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorKey3ColorKeyTime?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.FillTexture)) return false;
            if (!eval(this.ParticleShaderTexture)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.MembraneShaderSourceBlendMode)) return false;
            if (!eval(this.MembraneShaderBlendOperation)) return false;
            if (!eval(this.MembraneShaderZTestFunction)) return false;
            if (!eval(this.FillTextureEffectColor)) return false;
            if (!eval(this.FillTextureEffectAlphaFadeInTime)) return false;
            if (!eval(this.FillTextureEffectFullAlphaTime)) return false;
            if (!eval(this.FillTextureEffectAlphaFadeOutTime)) return false;
            if (!eval(this.FillTextureEffectPersistentAlphaRatio)) return false;
            if (!eval(this.FillTextureEffectAlphaPulseAmplitude)) return false;
            if (!eval(this.FillTextureEffectAlphaPulseFrequency)) return false;
            if (!eval(this.FillTextureEffectTextureAnimationSpeedU)) return false;
            if (!eval(this.FillTextureEffectTextureAnimationSpeedV)) return false;
            if (!eval(this.EdgeEffectFallOff)) return false;
            if (!eval(this.EdgeEffectColor)) return false;
            if (!eval(this.EdgeEffectAlphaFadeInTime)) return false;
            if (!eval(this.EdgeEffectFullAlphaTime)) return false;
            if (!eval(this.EdgeEffectAlphaFadeOutTime)) return false;
            if (!eval(this.EdgeEffectPersistentAlphaRatio)) return false;
            if (!eval(this.EdgeEffectAlphaPulseAmplitude)) return false;
            if (!eval(this.EdgeEffectAlphaPulseFrequency)) return false;
            if (!eval(this.FillTextureEffectFullAlphaRatio)) return false;
            if (!eval(this.EdgeEffectFullAlphaRatio)) return false;
            if (!eval(this.MembraneShaderDestBlendMode)) return false;
            if (!eval(this.ParticleShaderSourceBlendMode)) return false;
            if (!eval(this.ParticleShaderBlendOperation)) return false;
            if (!eval(this.ParticleShaderZTestFunction)) return false;
            if (!eval(this.ParticleShaderDestBlendMode)) return false;
            if (!eval(this.ParticleShaderParticleBirthRampUpTime)) return false;
            if (!eval(this.ParticleShaderFullParticleBirthTime)) return false;
            if (!eval(this.ParticleShaderParticleBirthRampDownTime)) return false;
            if (!eval(this.ParticleShaderFullParticleBirthRatio)) return false;
            if (!eval(this.ParticleShaderPersistentParticleBirthRatio)) return false;
            if (!eval(this.ParticleShaderParticleLifetime)) return false;
            if (!eval(this.ParticleShaderParticleLifetimePlusMinus)) return false;
            if (!eval(this.ParticleShaderInitialSpeedAlongNormal)) return false;
            if (!eval(this.ParticleShaderAccelerationAlongNormal)) return false;
            if (!eval(this.ParticleShaderInitialVelocity1)) return false;
            if (!eval(this.ParticleShaderInitialVelocity2)) return false;
            if (!eval(this.ParticleShaderInitialVelocity3)) return false;
            if (!eval(this.ParticleShaderAcceleration1)) return false;
            if (!eval(this.ParticleShaderAcceleration2)) return false;
            if (!eval(this.ParticleShaderAcceleration3)) return false;
            if (!eval(this.ParticleShaderScaleKey1)) return false;
            if (!eval(this.ParticleShaderScaleKey2)) return false;
            if (!eval(this.ParticleShaderScaleKey1Time)) return false;
            if (!eval(this.ParticleShaderScaleKey2Time)) return false;
            if (!eval(this.ColorKey1Color)) return false;
            if (!eval(this.ColorKey2Color)) return false;
            if (!eval(this.ColorKey3Color)) return false;
            if (!eval(this.ColorKey1ColorAlpha)) return false;
            if (!eval(this.ColorKey2ColorAlpha)) return false;
            if (!eval(this.ColorKey3ColorAlpha)) return false;
            if (!eval(this.ColorKey1ColorKeyTime)) return false;
            if (!eval(this.ColorKey2ColorKeyTime)) return false;
            if (!eval(this.ColorKey3ColorKeyTime)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new EffectShader_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new EffectShader_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(EffectShader_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.FillTexture = eval(this.FillTexture);
            obj.ParticleShaderTexture = eval(this.ParticleShaderTexture);
            obj.Flags = eval(this.Flags);
            obj.MembraneShaderSourceBlendMode = eval(this.MembraneShaderSourceBlendMode);
            obj.MembraneShaderBlendOperation = eval(this.MembraneShaderBlendOperation);
            obj.MembraneShaderZTestFunction = eval(this.MembraneShaderZTestFunction);
            obj.FillTextureEffectColor = eval(this.FillTextureEffectColor);
            obj.FillTextureEffectAlphaFadeInTime = eval(this.FillTextureEffectAlphaFadeInTime);
            obj.FillTextureEffectFullAlphaTime = eval(this.FillTextureEffectFullAlphaTime);
            obj.FillTextureEffectAlphaFadeOutTime = eval(this.FillTextureEffectAlphaFadeOutTime);
            obj.FillTextureEffectPersistentAlphaRatio = eval(this.FillTextureEffectPersistentAlphaRatio);
            obj.FillTextureEffectAlphaPulseAmplitude = eval(this.FillTextureEffectAlphaPulseAmplitude);
            obj.FillTextureEffectAlphaPulseFrequency = eval(this.FillTextureEffectAlphaPulseFrequency);
            obj.FillTextureEffectTextureAnimationSpeedU = eval(this.FillTextureEffectTextureAnimationSpeedU);
            obj.FillTextureEffectTextureAnimationSpeedV = eval(this.FillTextureEffectTextureAnimationSpeedV);
            obj.EdgeEffectFallOff = eval(this.EdgeEffectFallOff);
            obj.EdgeEffectColor = eval(this.EdgeEffectColor);
            obj.EdgeEffectAlphaFadeInTime = eval(this.EdgeEffectAlphaFadeInTime);
            obj.EdgeEffectFullAlphaTime = eval(this.EdgeEffectFullAlphaTime);
            obj.EdgeEffectAlphaFadeOutTime = eval(this.EdgeEffectAlphaFadeOutTime);
            obj.EdgeEffectPersistentAlphaRatio = eval(this.EdgeEffectPersistentAlphaRatio);
            obj.EdgeEffectAlphaPulseAmplitude = eval(this.EdgeEffectAlphaPulseAmplitude);
            obj.EdgeEffectAlphaPulseFrequency = eval(this.EdgeEffectAlphaPulseFrequency);
            obj.FillTextureEffectFullAlphaRatio = eval(this.FillTextureEffectFullAlphaRatio);
            obj.EdgeEffectFullAlphaRatio = eval(this.EdgeEffectFullAlphaRatio);
            obj.MembraneShaderDestBlendMode = eval(this.MembraneShaderDestBlendMode);
            obj.ParticleShaderSourceBlendMode = eval(this.ParticleShaderSourceBlendMode);
            obj.ParticleShaderBlendOperation = eval(this.ParticleShaderBlendOperation);
            obj.ParticleShaderZTestFunction = eval(this.ParticleShaderZTestFunction);
            obj.ParticleShaderDestBlendMode = eval(this.ParticleShaderDestBlendMode);
            obj.ParticleShaderParticleBirthRampUpTime = eval(this.ParticleShaderParticleBirthRampUpTime);
            obj.ParticleShaderFullParticleBirthTime = eval(this.ParticleShaderFullParticleBirthTime);
            obj.ParticleShaderParticleBirthRampDownTime = eval(this.ParticleShaderParticleBirthRampDownTime);
            obj.ParticleShaderFullParticleBirthRatio = eval(this.ParticleShaderFullParticleBirthRatio);
            obj.ParticleShaderPersistentParticleBirthRatio = eval(this.ParticleShaderPersistentParticleBirthRatio);
            obj.ParticleShaderParticleLifetime = eval(this.ParticleShaderParticleLifetime);
            obj.ParticleShaderParticleLifetimePlusMinus = eval(this.ParticleShaderParticleLifetimePlusMinus);
            obj.ParticleShaderInitialSpeedAlongNormal = eval(this.ParticleShaderInitialSpeedAlongNormal);
            obj.ParticleShaderAccelerationAlongNormal = eval(this.ParticleShaderAccelerationAlongNormal);
            obj.ParticleShaderInitialVelocity1 = eval(this.ParticleShaderInitialVelocity1);
            obj.ParticleShaderInitialVelocity2 = eval(this.ParticleShaderInitialVelocity2);
            obj.ParticleShaderInitialVelocity3 = eval(this.ParticleShaderInitialVelocity3);
            obj.ParticleShaderAcceleration1 = eval(this.ParticleShaderAcceleration1);
            obj.ParticleShaderAcceleration2 = eval(this.ParticleShaderAcceleration2);
            obj.ParticleShaderAcceleration3 = eval(this.ParticleShaderAcceleration3);
            obj.ParticleShaderScaleKey1 = eval(this.ParticleShaderScaleKey1);
            obj.ParticleShaderScaleKey2 = eval(this.ParticleShaderScaleKey2);
            obj.ParticleShaderScaleKey1Time = eval(this.ParticleShaderScaleKey1Time);
            obj.ParticleShaderScaleKey2Time = eval(this.ParticleShaderScaleKey2Time);
            obj.ColorKey1Color = eval(this.ColorKey1Color);
            obj.ColorKey2Color = eval(this.ColorKey2Color);
            obj.ColorKey3Color = eval(this.ColorKey3Color);
            obj.ColorKey1ColorAlpha = eval(this.ColorKey1ColorAlpha);
            obj.ColorKey2ColorAlpha = eval(this.ColorKey2ColorAlpha);
            obj.ColorKey3ColorAlpha = eval(this.ColorKey3ColorAlpha);
            obj.ColorKey1ColorKeyTime = eval(this.ColorKey1ColorKeyTime);
            obj.ColorKey2ColorKeyTime = eval(this.ColorKey2ColorKeyTime);
            obj.ColorKey3ColorKeyTime = eval(this.ColorKey3ColorKeyTime);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(EffectShader_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, EffectShader_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(EffectShader_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.FillTexture ?? true)
                {
                    fg.AppendLine($"FillTexture => {FillTexture}");
                }
                if (printMask?.ParticleShaderTexture ?? true)
                {
                    fg.AppendLine($"ParticleShaderTexture => {ParticleShaderTexture}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.MembraneShaderSourceBlendMode ?? true)
                {
                    fg.AppendLine($"MembraneShaderSourceBlendMode => {MembraneShaderSourceBlendMode}");
                }
                if (printMask?.MembraneShaderBlendOperation ?? true)
                {
                    fg.AppendLine($"MembraneShaderBlendOperation => {MembraneShaderBlendOperation}");
                }
                if (printMask?.MembraneShaderZTestFunction ?? true)
                {
                    fg.AppendLine($"MembraneShaderZTestFunction => {MembraneShaderZTestFunction}");
                }
                if (printMask?.FillTextureEffectColor ?? true)
                {
                    fg.AppendLine($"FillTextureEffectColor => {FillTextureEffectColor}");
                }
                if (printMask?.FillTextureEffectAlphaFadeInTime ?? true)
                {
                    fg.AppendLine($"FillTextureEffectAlphaFadeInTime => {FillTextureEffectAlphaFadeInTime}");
                }
                if (printMask?.FillTextureEffectFullAlphaTime ?? true)
                {
                    fg.AppendLine($"FillTextureEffectFullAlphaTime => {FillTextureEffectFullAlphaTime}");
                }
                if (printMask?.FillTextureEffectAlphaFadeOutTime ?? true)
                {
                    fg.AppendLine($"FillTextureEffectAlphaFadeOutTime => {FillTextureEffectAlphaFadeOutTime}");
                }
                if (printMask?.FillTextureEffectPersistentAlphaRatio ?? true)
                {
                    fg.AppendLine($"FillTextureEffectPersistentAlphaRatio => {FillTextureEffectPersistentAlphaRatio}");
                }
                if (printMask?.FillTextureEffectAlphaPulseAmplitude ?? true)
                {
                    fg.AppendLine($"FillTextureEffectAlphaPulseAmplitude => {FillTextureEffectAlphaPulseAmplitude}");
                }
                if (printMask?.FillTextureEffectAlphaPulseFrequency ?? true)
                {
                    fg.AppendLine($"FillTextureEffectAlphaPulseFrequency => {FillTextureEffectAlphaPulseFrequency}");
                }
                if (printMask?.FillTextureEffectTextureAnimationSpeedU ?? true)
                {
                    fg.AppendLine($"FillTextureEffectTextureAnimationSpeedU => {FillTextureEffectTextureAnimationSpeedU}");
                }
                if (printMask?.FillTextureEffectTextureAnimationSpeedV ?? true)
                {
                    fg.AppendLine($"FillTextureEffectTextureAnimationSpeedV => {FillTextureEffectTextureAnimationSpeedV}");
                }
                if (printMask?.EdgeEffectFallOff ?? true)
                {
                    fg.AppendLine($"EdgeEffectFallOff => {EdgeEffectFallOff}");
                }
                if (printMask?.EdgeEffectColor ?? true)
                {
                    fg.AppendLine($"EdgeEffectColor => {EdgeEffectColor}");
                }
                if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
                {
                    fg.AppendLine($"EdgeEffectAlphaFadeInTime => {EdgeEffectAlphaFadeInTime}");
                }
                if (printMask?.EdgeEffectFullAlphaTime ?? true)
                {
                    fg.AppendLine($"EdgeEffectFullAlphaTime => {EdgeEffectFullAlphaTime}");
                }
                if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
                {
                    fg.AppendLine($"EdgeEffectAlphaFadeOutTime => {EdgeEffectAlphaFadeOutTime}");
                }
                if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
                {
                    fg.AppendLine($"EdgeEffectPersistentAlphaRatio => {EdgeEffectPersistentAlphaRatio}");
                }
                if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
                {
                    fg.AppendLine($"EdgeEffectAlphaPulseAmplitude => {EdgeEffectAlphaPulseAmplitude}");
                }
                if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
                {
                    fg.AppendLine($"EdgeEffectAlphaPulseFrequency => {EdgeEffectAlphaPulseFrequency}");
                }
                if (printMask?.FillTextureEffectFullAlphaRatio ?? true)
                {
                    fg.AppendLine($"FillTextureEffectFullAlphaRatio => {FillTextureEffectFullAlphaRatio}");
                }
                if (printMask?.EdgeEffectFullAlphaRatio ?? true)
                {
                    fg.AppendLine($"EdgeEffectFullAlphaRatio => {EdgeEffectFullAlphaRatio}");
                }
                if (printMask?.MembraneShaderDestBlendMode ?? true)
                {
                    fg.AppendLine($"MembraneShaderDestBlendMode => {MembraneShaderDestBlendMode}");
                }
                if (printMask?.ParticleShaderSourceBlendMode ?? true)
                {
                    fg.AppendLine($"ParticleShaderSourceBlendMode => {ParticleShaderSourceBlendMode}");
                }
                if (printMask?.ParticleShaderBlendOperation ?? true)
                {
                    fg.AppendLine($"ParticleShaderBlendOperation => {ParticleShaderBlendOperation}");
                }
                if (printMask?.ParticleShaderZTestFunction ?? true)
                {
                    fg.AppendLine($"ParticleShaderZTestFunction => {ParticleShaderZTestFunction}");
                }
                if (printMask?.ParticleShaderDestBlendMode ?? true)
                {
                    fg.AppendLine($"ParticleShaderDestBlendMode => {ParticleShaderDestBlendMode}");
                }
                if (printMask?.ParticleShaderParticleBirthRampUpTime ?? true)
                {
                    fg.AppendLine($"ParticleShaderParticleBirthRampUpTime => {ParticleShaderParticleBirthRampUpTime}");
                }
                if (printMask?.ParticleShaderFullParticleBirthTime ?? true)
                {
                    fg.AppendLine($"ParticleShaderFullParticleBirthTime => {ParticleShaderFullParticleBirthTime}");
                }
                if (printMask?.ParticleShaderParticleBirthRampDownTime ?? true)
                {
                    fg.AppendLine($"ParticleShaderParticleBirthRampDownTime => {ParticleShaderParticleBirthRampDownTime}");
                }
                if (printMask?.ParticleShaderFullParticleBirthRatio ?? true)
                {
                    fg.AppendLine($"ParticleShaderFullParticleBirthRatio => {ParticleShaderFullParticleBirthRatio}");
                }
                if (printMask?.ParticleShaderPersistentParticleBirthRatio ?? true)
                {
                    fg.AppendLine($"ParticleShaderPersistentParticleBirthRatio => {ParticleShaderPersistentParticleBirthRatio}");
                }
                if (printMask?.ParticleShaderParticleLifetime ?? true)
                {
                    fg.AppendLine($"ParticleShaderParticleLifetime => {ParticleShaderParticleLifetime}");
                }
                if (printMask?.ParticleShaderParticleLifetimePlusMinus ?? true)
                {
                    fg.AppendLine($"ParticleShaderParticleLifetimePlusMinus => {ParticleShaderParticleLifetimePlusMinus}");
                }
                if (printMask?.ParticleShaderInitialSpeedAlongNormal ?? true)
                {
                    fg.AppendLine($"ParticleShaderInitialSpeedAlongNormal => {ParticleShaderInitialSpeedAlongNormal}");
                }
                if (printMask?.ParticleShaderAccelerationAlongNormal ?? true)
                {
                    fg.AppendLine($"ParticleShaderAccelerationAlongNormal => {ParticleShaderAccelerationAlongNormal}");
                }
                if (printMask?.ParticleShaderInitialVelocity1 ?? true)
                {
                    fg.AppendLine($"ParticleShaderInitialVelocity1 => {ParticleShaderInitialVelocity1}");
                }
                if (printMask?.ParticleShaderInitialVelocity2 ?? true)
                {
                    fg.AppendLine($"ParticleShaderInitialVelocity2 => {ParticleShaderInitialVelocity2}");
                }
                if (printMask?.ParticleShaderInitialVelocity3 ?? true)
                {
                    fg.AppendLine($"ParticleShaderInitialVelocity3 => {ParticleShaderInitialVelocity3}");
                }
                if (printMask?.ParticleShaderAcceleration1 ?? true)
                {
                    fg.AppendLine($"ParticleShaderAcceleration1 => {ParticleShaderAcceleration1}");
                }
                if (printMask?.ParticleShaderAcceleration2 ?? true)
                {
                    fg.AppendLine($"ParticleShaderAcceleration2 => {ParticleShaderAcceleration2}");
                }
                if (printMask?.ParticleShaderAcceleration3 ?? true)
                {
                    fg.AppendLine($"ParticleShaderAcceleration3 => {ParticleShaderAcceleration3}");
                }
                if (printMask?.ParticleShaderScaleKey1 ?? true)
                {
                    fg.AppendLine($"ParticleShaderScaleKey1 => {ParticleShaderScaleKey1}");
                }
                if (printMask?.ParticleShaderScaleKey2 ?? true)
                {
                    fg.AppendLine($"ParticleShaderScaleKey2 => {ParticleShaderScaleKey2}");
                }
                if (printMask?.ParticleShaderScaleKey1Time ?? true)
                {
                    fg.AppendLine($"ParticleShaderScaleKey1Time => {ParticleShaderScaleKey1Time}");
                }
                if (printMask?.ParticleShaderScaleKey2Time ?? true)
                {
                    fg.AppendLine($"ParticleShaderScaleKey2Time => {ParticleShaderScaleKey2Time}");
                }
                if (printMask?.ColorKey1Color ?? true)
                {
                    fg.AppendLine($"ColorKey1Color => {ColorKey1Color}");
                }
                if (printMask?.ColorKey2Color ?? true)
                {
                    fg.AppendLine($"ColorKey2Color => {ColorKey2Color}");
                }
                if (printMask?.ColorKey3Color ?? true)
                {
                    fg.AppendLine($"ColorKey3Color => {ColorKey3Color}");
                }
                if (printMask?.ColorKey1ColorAlpha ?? true)
                {
                    fg.AppendLine($"ColorKey1ColorAlpha => {ColorKey1ColorAlpha}");
                }
                if (printMask?.ColorKey2ColorAlpha ?? true)
                {
                    fg.AppendLine($"ColorKey2ColorAlpha => {ColorKey2ColorAlpha}");
                }
                if (printMask?.ColorKey3ColorAlpha ?? true)
                {
                    fg.AppendLine($"ColorKey3ColorAlpha => {ColorKey3ColorAlpha}");
                }
                if (printMask?.ColorKey1ColorKeyTime ?? true)
                {
                    fg.AppendLine($"ColorKey1ColorKeyTime => {ColorKey1ColorKeyTime}");
                }
                if (printMask?.ColorKey2ColorKeyTime ?? true)
                {
                    fg.AppendLine($"ColorKey2ColorKeyTime => {ColorKey2ColorKeyTime}");
                }
                if (printMask?.ColorKey3ColorKeyTime ?? true)
                {
                    fg.AppendLine($"ColorKey3ColorKeyTime => {ColorKey3ColorKeyTime}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class EffectShader_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<EffectShader_ErrorMask>
    {
        #region Members
        public Exception FillTexture;
        public Exception ParticleShaderTexture;
        public Exception Flags;
        public Exception MembraneShaderSourceBlendMode;
        public Exception MembraneShaderBlendOperation;
        public Exception MembraneShaderZTestFunction;
        public Exception FillTextureEffectColor;
        public Exception FillTextureEffectAlphaFadeInTime;
        public Exception FillTextureEffectFullAlphaTime;
        public Exception FillTextureEffectAlphaFadeOutTime;
        public Exception FillTextureEffectPersistentAlphaRatio;
        public Exception FillTextureEffectAlphaPulseAmplitude;
        public Exception FillTextureEffectAlphaPulseFrequency;
        public Exception FillTextureEffectTextureAnimationSpeedU;
        public Exception FillTextureEffectTextureAnimationSpeedV;
        public Exception EdgeEffectFallOff;
        public Exception EdgeEffectColor;
        public Exception EdgeEffectAlphaFadeInTime;
        public Exception EdgeEffectFullAlphaTime;
        public Exception EdgeEffectAlphaFadeOutTime;
        public Exception EdgeEffectPersistentAlphaRatio;
        public Exception EdgeEffectAlphaPulseAmplitude;
        public Exception EdgeEffectAlphaPulseFrequency;
        public Exception FillTextureEffectFullAlphaRatio;
        public Exception EdgeEffectFullAlphaRatio;
        public Exception MembraneShaderDestBlendMode;
        public Exception ParticleShaderSourceBlendMode;
        public Exception ParticleShaderBlendOperation;
        public Exception ParticleShaderZTestFunction;
        public Exception ParticleShaderDestBlendMode;
        public Exception ParticleShaderParticleBirthRampUpTime;
        public Exception ParticleShaderFullParticleBirthTime;
        public Exception ParticleShaderParticleBirthRampDownTime;
        public Exception ParticleShaderFullParticleBirthRatio;
        public Exception ParticleShaderPersistentParticleBirthRatio;
        public Exception ParticleShaderParticleLifetime;
        public Exception ParticleShaderParticleLifetimePlusMinus;
        public Exception ParticleShaderInitialSpeedAlongNormal;
        public Exception ParticleShaderAccelerationAlongNormal;
        public Exception ParticleShaderInitialVelocity1;
        public Exception ParticleShaderInitialVelocity2;
        public Exception ParticleShaderInitialVelocity3;
        public Exception ParticleShaderAcceleration1;
        public Exception ParticleShaderAcceleration2;
        public Exception ParticleShaderAcceleration3;
        public Exception ParticleShaderScaleKey1;
        public Exception ParticleShaderScaleKey2;
        public Exception ParticleShaderScaleKey1Time;
        public Exception ParticleShaderScaleKey2Time;
        public Exception ColorKey1Color;
        public Exception ColorKey2Color;
        public Exception ColorKey3Color;
        public Exception ColorKey1ColorAlpha;
        public Exception ColorKey2ColorAlpha;
        public Exception ColorKey3ColorAlpha;
        public Exception ColorKey1ColorKeyTime;
        public Exception ColorKey2ColorKeyTime;
        public Exception ColorKey3ColorKeyTime;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    return FillTexture;
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    return ParticleShaderTexture;
                case EffectShader_FieldIndex.Flags:
                    return Flags;
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    return MembraneShaderSourceBlendMode;
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    return MembraneShaderBlendOperation;
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    return MembraneShaderZTestFunction;
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    return FillTextureEffectColor;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    return FillTextureEffectAlphaFadeInTime;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    return FillTextureEffectFullAlphaTime;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    return FillTextureEffectAlphaFadeOutTime;
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    return FillTextureEffectPersistentAlphaRatio;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    return FillTextureEffectAlphaPulseAmplitude;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    return FillTextureEffectAlphaPulseFrequency;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    return FillTextureEffectTextureAnimationSpeedU;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    return FillTextureEffectTextureAnimationSpeedV;
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    return EdgeEffectFallOff;
                case EffectShader_FieldIndex.EdgeEffectColor:
                    return EdgeEffectColor;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    return EdgeEffectAlphaFadeInTime;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    return EdgeEffectFullAlphaTime;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    return EdgeEffectAlphaFadeOutTime;
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    return EdgeEffectPersistentAlphaRatio;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    return EdgeEffectAlphaPulseAmplitude;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    return EdgeEffectAlphaPulseFrequency;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    return FillTextureEffectFullAlphaRatio;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    return EdgeEffectFullAlphaRatio;
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    return MembraneShaderDestBlendMode;
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    return ParticleShaderSourceBlendMode;
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    return ParticleShaderBlendOperation;
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    return ParticleShaderZTestFunction;
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    return ParticleShaderDestBlendMode;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    return ParticleShaderParticleBirthRampUpTime;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    return ParticleShaderFullParticleBirthTime;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    return ParticleShaderParticleBirthRampDownTime;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    return ParticleShaderFullParticleBirthRatio;
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    return ParticleShaderPersistentParticleBirthRatio;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    return ParticleShaderParticleLifetime;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    return ParticleShaderParticleLifetimePlusMinus;
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    return ParticleShaderInitialSpeedAlongNormal;
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    return ParticleShaderAccelerationAlongNormal;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    return ParticleShaderInitialVelocity1;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    return ParticleShaderInitialVelocity2;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    return ParticleShaderInitialVelocity3;
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    return ParticleShaderAcceleration1;
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    return ParticleShaderAcceleration2;
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    return ParticleShaderAcceleration3;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    return ParticleShaderScaleKey1;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    return ParticleShaderScaleKey2;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    return ParticleShaderScaleKey1Time;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    return ParticleShaderScaleKey2Time;
                case EffectShader_FieldIndex.ColorKey1Color:
                    return ColorKey1Color;
                case EffectShader_FieldIndex.ColorKey2Color:
                    return ColorKey2Color;
                case EffectShader_FieldIndex.ColorKey3Color:
                    return ColorKey3Color;
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    return ColorKey1ColorAlpha;
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    return ColorKey2ColorAlpha;
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    return ColorKey3ColorAlpha;
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    return ColorKey1ColorKeyTime;
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    return ColorKey2ColorKeyTime;
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return ColorKey3ColorKeyTime;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    this.FillTexture = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    this.ParticleShaderTexture = ex;
                    break;
                case EffectShader_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    this.MembraneShaderSourceBlendMode = ex;
                    break;
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    this.MembraneShaderBlendOperation = ex;
                    break;
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    this.MembraneShaderZTestFunction = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    this.FillTextureEffectColor = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    this.FillTextureEffectAlphaFadeInTime = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    this.FillTextureEffectFullAlphaTime = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    this.FillTextureEffectAlphaFadeOutTime = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    this.FillTextureEffectPersistentAlphaRatio = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    this.FillTextureEffectAlphaPulseAmplitude = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    this.FillTextureEffectAlphaPulseFrequency = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    this.FillTextureEffectTextureAnimationSpeedU = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    this.FillTextureEffectTextureAnimationSpeedV = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    this.EdgeEffectFallOff = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectColor:
                    this.EdgeEffectColor = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    this.EdgeEffectAlphaFadeInTime = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    this.EdgeEffectFullAlphaTime = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    this.EdgeEffectAlphaFadeOutTime = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    this.EdgeEffectPersistentAlphaRatio = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    this.EdgeEffectAlphaPulseAmplitude = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    this.EdgeEffectAlphaPulseFrequency = ex;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    this.FillTextureEffectFullAlphaRatio = ex;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    this.EdgeEffectFullAlphaRatio = ex;
                    break;
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    this.MembraneShaderDestBlendMode = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    this.ParticleShaderSourceBlendMode = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    this.ParticleShaderBlendOperation = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    this.ParticleShaderZTestFunction = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    this.ParticleShaderDestBlendMode = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    this.ParticleShaderParticleBirthRampUpTime = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    this.ParticleShaderFullParticleBirthTime = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    this.ParticleShaderParticleBirthRampDownTime = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    this.ParticleShaderFullParticleBirthRatio = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    this.ParticleShaderPersistentParticleBirthRatio = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    this.ParticleShaderParticleLifetime = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    this.ParticleShaderParticleLifetimePlusMinus = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    this.ParticleShaderInitialSpeedAlongNormal = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    this.ParticleShaderAccelerationAlongNormal = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    this.ParticleShaderInitialVelocity1 = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    this.ParticleShaderInitialVelocity2 = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    this.ParticleShaderInitialVelocity3 = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    this.ParticleShaderAcceleration1 = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    this.ParticleShaderAcceleration2 = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    this.ParticleShaderAcceleration3 = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    this.ParticleShaderScaleKey1 = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    this.ParticleShaderScaleKey2 = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    this.ParticleShaderScaleKey1Time = ex;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    this.ParticleShaderScaleKey2Time = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey1Color:
                    this.ColorKey1Color = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey2Color:
                    this.ColorKey2Color = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey3Color:
                    this.ColorKey3Color = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    this.ColorKey1ColorAlpha = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    this.ColorKey2ColorAlpha = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    this.ColorKey3ColorAlpha = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    this.ColorKey1ColorKeyTime = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    this.ColorKey2ColorKeyTime = ex;
                    break;
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    this.ColorKey3ColorKeyTime = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    this.FillTexture = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    this.ParticleShaderTexture = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    this.MembraneShaderSourceBlendMode = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    this.MembraneShaderBlendOperation = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    this.MembraneShaderZTestFunction = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    this.FillTextureEffectColor = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    this.FillTextureEffectAlphaFadeInTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    this.FillTextureEffectFullAlphaTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    this.FillTextureEffectAlphaFadeOutTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    this.FillTextureEffectPersistentAlphaRatio = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    this.FillTextureEffectAlphaPulseAmplitude = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    this.FillTextureEffectAlphaPulseFrequency = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    this.FillTextureEffectTextureAnimationSpeedU = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    this.FillTextureEffectTextureAnimationSpeedV = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    this.EdgeEffectFallOff = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectColor:
                    this.EdgeEffectColor = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    this.EdgeEffectAlphaFadeInTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    this.EdgeEffectFullAlphaTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    this.EdgeEffectAlphaFadeOutTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    this.EdgeEffectPersistentAlphaRatio = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    this.EdgeEffectAlphaPulseAmplitude = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    this.EdgeEffectAlphaPulseFrequency = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    this.FillTextureEffectFullAlphaRatio = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    this.EdgeEffectFullAlphaRatio = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    this.MembraneShaderDestBlendMode = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    this.ParticleShaderSourceBlendMode = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    this.ParticleShaderBlendOperation = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    this.ParticleShaderZTestFunction = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    this.ParticleShaderDestBlendMode = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    this.ParticleShaderParticleBirthRampUpTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    this.ParticleShaderFullParticleBirthTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    this.ParticleShaderParticleBirthRampDownTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    this.ParticleShaderFullParticleBirthRatio = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    this.ParticleShaderPersistentParticleBirthRatio = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    this.ParticleShaderParticleLifetime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    this.ParticleShaderParticleLifetimePlusMinus = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    this.ParticleShaderInitialSpeedAlongNormal = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    this.ParticleShaderAccelerationAlongNormal = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    this.ParticleShaderInitialVelocity1 = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    this.ParticleShaderInitialVelocity2 = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    this.ParticleShaderInitialVelocity3 = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    this.ParticleShaderAcceleration1 = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    this.ParticleShaderAcceleration2 = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    this.ParticleShaderAcceleration3 = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    this.ParticleShaderScaleKey1 = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    this.ParticleShaderScaleKey2 = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    this.ParticleShaderScaleKey1Time = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    this.ParticleShaderScaleKey2Time = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey1Color:
                    this.ColorKey1Color = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey2Color:
                    this.ColorKey2Color = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey3Color:
                    this.ColorKey3Color = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    this.ColorKey1ColorAlpha = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    this.ColorKey2ColorAlpha = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    this.ColorKey3ColorAlpha = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    this.ColorKey1ColorKeyTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    this.ColorKey2ColorKeyTime = (Exception)obj;
                    break;
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    this.ColorKey3ColorKeyTime = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (FillTexture != null) return true;
            if (ParticleShaderTexture != null) return true;
            if (Flags != null) return true;
            if (MembraneShaderSourceBlendMode != null) return true;
            if (MembraneShaderBlendOperation != null) return true;
            if (MembraneShaderZTestFunction != null) return true;
            if (FillTextureEffectColor != null) return true;
            if (FillTextureEffectAlphaFadeInTime != null) return true;
            if (FillTextureEffectFullAlphaTime != null) return true;
            if (FillTextureEffectAlphaFadeOutTime != null) return true;
            if (FillTextureEffectPersistentAlphaRatio != null) return true;
            if (FillTextureEffectAlphaPulseAmplitude != null) return true;
            if (FillTextureEffectAlphaPulseFrequency != null) return true;
            if (FillTextureEffectTextureAnimationSpeedU != null) return true;
            if (FillTextureEffectTextureAnimationSpeedV != null) return true;
            if (EdgeEffectFallOff != null) return true;
            if (EdgeEffectColor != null) return true;
            if (EdgeEffectAlphaFadeInTime != null) return true;
            if (EdgeEffectFullAlphaTime != null) return true;
            if (EdgeEffectAlphaFadeOutTime != null) return true;
            if (EdgeEffectPersistentAlphaRatio != null) return true;
            if (EdgeEffectAlphaPulseAmplitude != null) return true;
            if (EdgeEffectAlphaPulseFrequency != null) return true;
            if (FillTextureEffectFullAlphaRatio != null) return true;
            if (EdgeEffectFullAlphaRatio != null) return true;
            if (MembraneShaderDestBlendMode != null) return true;
            if (ParticleShaderSourceBlendMode != null) return true;
            if (ParticleShaderBlendOperation != null) return true;
            if (ParticleShaderZTestFunction != null) return true;
            if (ParticleShaderDestBlendMode != null) return true;
            if (ParticleShaderParticleBirthRampUpTime != null) return true;
            if (ParticleShaderFullParticleBirthTime != null) return true;
            if (ParticleShaderParticleBirthRampDownTime != null) return true;
            if (ParticleShaderFullParticleBirthRatio != null) return true;
            if (ParticleShaderPersistentParticleBirthRatio != null) return true;
            if (ParticleShaderParticleLifetime != null) return true;
            if (ParticleShaderParticleLifetimePlusMinus != null) return true;
            if (ParticleShaderInitialSpeedAlongNormal != null) return true;
            if (ParticleShaderAccelerationAlongNormal != null) return true;
            if (ParticleShaderInitialVelocity1 != null) return true;
            if (ParticleShaderInitialVelocity2 != null) return true;
            if (ParticleShaderInitialVelocity3 != null) return true;
            if (ParticleShaderAcceleration1 != null) return true;
            if (ParticleShaderAcceleration2 != null) return true;
            if (ParticleShaderAcceleration3 != null) return true;
            if (ParticleShaderScaleKey1 != null) return true;
            if (ParticleShaderScaleKey2 != null) return true;
            if (ParticleShaderScaleKey1Time != null) return true;
            if (ParticleShaderScaleKey2Time != null) return true;
            if (ColorKey1Color != null) return true;
            if (ColorKey2Color != null) return true;
            if (ColorKey3Color != null) return true;
            if (ColorKey1ColorAlpha != null) return true;
            if (ColorKey2ColorAlpha != null) return true;
            if (ColorKey3ColorAlpha != null) return true;
            if (ColorKey1ColorKeyTime != null) return true;
            if (ColorKey2ColorKeyTime != null) return true;
            if (ColorKey3ColorKeyTime != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("EffectShader_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"FillTexture => {FillTexture}");
            fg.AppendLine($"ParticleShaderTexture => {ParticleShaderTexture}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"MembraneShaderSourceBlendMode => {MembraneShaderSourceBlendMode}");
            fg.AppendLine($"MembraneShaderBlendOperation => {MembraneShaderBlendOperation}");
            fg.AppendLine($"MembraneShaderZTestFunction => {MembraneShaderZTestFunction}");
            fg.AppendLine($"FillTextureEffectColor => {FillTextureEffectColor}");
            fg.AppendLine($"FillTextureEffectAlphaFadeInTime => {FillTextureEffectAlphaFadeInTime}");
            fg.AppendLine($"FillTextureEffectFullAlphaTime => {FillTextureEffectFullAlphaTime}");
            fg.AppendLine($"FillTextureEffectAlphaFadeOutTime => {FillTextureEffectAlphaFadeOutTime}");
            fg.AppendLine($"FillTextureEffectPersistentAlphaRatio => {FillTextureEffectPersistentAlphaRatio}");
            fg.AppendLine($"FillTextureEffectAlphaPulseAmplitude => {FillTextureEffectAlphaPulseAmplitude}");
            fg.AppendLine($"FillTextureEffectAlphaPulseFrequency => {FillTextureEffectAlphaPulseFrequency}");
            fg.AppendLine($"FillTextureEffectTextureAnimationSpeedU => {FillTextureEffectTextureAnimationSpeedU}");
            fg.AppendLine($"FillTextureEffectTextureAnimationSpeedV => {FillTextureEffectTextureAnimationSpeedV}");
            fg.AppendLine($"EdgeEffectFallOff => {EdgeEffectFallOff}");
            fg.AppendLine($"EdgeEffectColor => {EdgeEffectColor}");
            fg.AppendLine($"EdgeEffectAlphaFadeInTime => {EdgeEffectAlphaFadeInTime}");
            fg.AppendLine($"EdgeEffectFullAlphaTime => {EdgeEffectFullAlphaTime}");
            fg.AppendLine($"EdgeEffectAlphaFadeOutTime => {EdgeEffectAlphaFadeOutTime}");
            fg.AppendLine($"EdgeEffectPersistentAlphaRatio => {EdgeEffectPersistentAlphaRatio}");
            fg.AppendLine($"EdgeEffectAlphaPulseAmplitude => {EdgeEffectAlphaPulseAmplitude}");
            fg.AppendLine($"EdgeEffectAlphaPulseFrequency => {EdgeEffectAlphaPulseFrequency}");
            fg.AppendLine($"FillTextureEffectFullAlphaRatio => {FillTextureEffectFullAlphaRatio}");
            fg.AppendLine($"EdgeEffectFullAlphaRatio => {EdgeEffectFullAlphaRatio}");
            fg.AppendLine($"MembraneShaderDestBlendMode => {MembraneShaderDestBlendMode}");
            fg.AppendLine($"ParticleShaderSourceBlendMode => {ParticleShaderSourceBlendMode}");
            fg.AppendLine($"ParticleShaderBlendOperation => {ParticleShaderBlendOperation}");
            fg.AppendLine($"ParticleShaderZTestFunction => {ParticleShaderZTestFunction}");
            fg.AppendLine($"ParticleShaderDestBlendMode => {ParticleShaderDestBlendMode}");
            fg.AppendLine($"ParticleShaderParticleBirthRampUpTime => {ParticleShaderParticleBirthRampUpTime}");
            fg.AppendLine($"ParticleShaderFullParticleBirthTime => {ParticleShaderFullParticleBirthTime}");
            fg.AppendLine($"ParticleShaderParticleBirthRampDownTime => {ParticleShaderParticleBirthRampDownTime}");
            fg.AppendLine($"ParticleShaderFullParticleBirthRatio => {ParticleShaderFullParticleBirthRatio}");
            fg.AppendLine($"ParticleShaderPersistentParticleBirthRatio => {ParticleShaderPersistentParticleBirthRatio}");
            fg.AppendLine($"ParticleShaderParticleLifetime => {ParticleShaderParticleLifetime}");
            fg.AppendLine($"ParticleShaderParticleLifetimePlusMinus => {ParticleShaderParticleLifetimePlusMinus}");
            fg.AppendLine($"ParticleShaderInitialSpeedAlongNormal => {ParticleShaderInitialSpeedAlongNormal}");
            fg.AppendLine($"ParticleShaderAccelerationAlongNormal => {ParticleShaderAccelerationAlongNormal}");
            fg.AppendLine($"ParticleShaderInitialVelocity1 => {ParticleShaderInitialVelocity1}");
            fg.AppendLine($"ParticleShaderInitialVelocity2 => {ParticleShaderInitialVelocity2}");
            fg.AppendLine($"ParticleShaderInitialVelocity3 => {ParticleShaderInitialVelocity3}");
            fg.AppendLine($"ParticleShaderAcceleration1 => {ParticleShaderAcceleration1}");
            fg.AppendLine($"ParticleShaderAcceleration2 => {ParticleShaderAcceleration2}");
            fg.AppendLine($"ParticleShaderAcceleration3 => {ParticleShaderAcceleration3}");
            fg.AppendLine($"ParticleShaderScaleKey1 => {ParticleShaderScaleKey1}");
            fg.AppendLine($"ParticleShaderScaleKey2 => {ParticleShaderScaleKey2}");
            fg.AppendLine($"ParticleShaderScaleKey1Time => {ParticleShaderScaleKey1Time}");
            fg.AppendLine($"ParticleShaderScaleKey2Time => {ParticleShaderScaleKey2Time}");
            fg.AppendLine($"ColorKey1Color => {ColorKey1Color}");
            fg.AppendLine($"ColorKey2Color => {ColorKey2Color}");
            fg.AppendLine($"ColorKey3Color => {ColorKey3Color}");
            fg.AppendLine($"ColorKey1ColorAlpha => {ColorKey1ColorAlpha}");
            fg.AppendLine($"ColorKey2ColorAlpha => {ColorKey2ColorAlpha}");
            fg.AppendLine($"ColorKey3ColorAlpha => {ColorKey3ColorAlpha}");
            fg.AppendLine($"ColorKey1ColorKeyTime => {ColorKey1ColorKeyTime}");
            fg.AppendLine($"ColorKey2ColorKeyTime => {ColorKey2ColorKeyTime}");
            fg.AppendLine($"ColorKey3ColorKeyTime => {ColorKey3ColorKeyTime}");
        }
        #endregion

        #region Combine
        public EffectShader_ErrorMask Combine(EffectShader_ErrorMask rhs)
        {
            var ret = new EffectShader_ErrorMask();
            ret.FillTexture = this.FillTexture.Combine(rhs.FillTexture);
            ret.ParticleShaderTexture = this.ParticleShaderTexture.Combine(rhs.ParticleShaderTexture);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.MembraneShaderSourceBlendMode = this.MembraneShaderSourceBlendMode.Combine(rhs.MembraneShaderSourceBlendMode);
            ret.MembraneShaderBlendOperation = this.MembraneShaderBlendOperation.Combine(rhs.MembraneShaderBlendOperation);
            ret.MembraneShaderZTestFunction = this.MembraneShaderZTestFunction.Combine(rhs.MembraneShaderZTestFunction);
            ret.FillTextureEffectColor = this.FillTextureEffectColor.Combine(rhs.FillTextureEffectColor);
            ret.FillTextureEffectAlphaFadeInTime = this.FillTextureEffectAlphaFadeInTime.Combine(rhs.FillTextureEffectAlphaFadeInTime);
            ret.FillTextureEffectFullAlphaTime = this.FillTextureEffectFullAlphaTime.Combine(rhs.FillTextureEffectFullAlphaTime);
            ret.FillTextureEffectAlphaFadeOutTime = this.FillTextureEffectAlphaFadeOutTime.Combine(rhs.FillTextureEffectAlphaFadeOutTime);
            ret.FillTextureEffectPersistentAlphaRatio = this.FillTextureEffectPersistentAlphaRatio.Combine(rhs.FillTextureEffectPersistentAlphaRatio);
            ret.FillTextureEffectAlphaPulseAmplitude = this.FillTextureEffectAlphaPulseAmplitude.Combine(rhs.FillTextureEffectAlphaPulseAmplitude);
            ret.FillTextureEffectAlphaPulseFrequency = this.FillTextureEffectAlphaPulseFrequency.Combine(rhs.FillTextureEffectAlphaPulseFrequency);
            ret.FillTextureEffectTextureAnimationSpeedU = this.FillTextureEffectTextureAnimationSpeedU.Combine(rhs.FillTextureEffectTextureAnimationSpeedU);
            ret.FillTextureEffectTextureAnimationSpeedV = this.FillTextureEffectTextureAnimationSpeedV.Combine(rhs.FillTextureEffectTextureAnimationSpeedV);
            ret.EdgeEffectFallOff = this.EdgeEffectFallOff.Combine(rhs.EdgeEffectFallOff);
            ret.EdgeEffectColor = this.EdgeEffectColor.Combine(rhs.EdgeEffectColor);
            ret.EdgeEffectAlphaFadeInTime = this.EdgeEffectAlphaFadeInTime.Combine(rhs.EdgeEffectAlphaFadeInTime);
            ret.EdgeEffectFullAlphaTime = this.EdgeEffectFullAlphaTime.Combine(rhs.EdgeEffectFullAlphaTime);
            ret.EdgeEffectAlphaFadeOutTime = this.EdgeEffectAlphaFadeOutTime.Combine(rhs.EdgeEffectAlphaFadeOutTime);
            ret.EdgeEffectPersistentAlphaRatio = this.EdgeEffectPersistentAlphaRatio.Combine(rhs.EdgeEffectPersistentAlphaRatio);
            ret.EdgeEffectAlphaPulseAmplitude = this.EdgeEffectAlphaPulseAmplitude.Combine(rhs.EdgeEffectAlphaPulseAmplitude);
            ret.EdgeEffectAlphaPulseFrequency = this.EdgeEffectAlphaPulseFrequency.Combine(rhs.EdgeEffectAlphaPulseFrequency);
            ret.FillTextureEffectFullAlphaRatio = this.FillTextureEffectFullAlphaRatio.Combine(rhs.FillTextureEffectFullAlphaRatio);
            ret.EdgeEffectFullAlphaRatio = this.EdgeEffectFullAlphaRatio.Combine(rhs.EdgeEffectFullAlphaRatio);
            ret.MembraneShaderDestBlendMode = this.MembraneShaderDestBlendMode.Combine(rhs.MembraneShaderDestBlendMode);
            ret.ParticleShaderSourceBlendMode = this.ParticleShaderSourceBlendMode.Combine(rhs.ParticleShaderSourceBlendMode);
            ret.ParticleShaderBlendOperation = this.ParticleShaderBlendOperation.Combine(rhs.ParticleShaderBlendOperation);
            ret.ParticleShaderZTestFunction = this.ParticleShaderZTestFunction.Combine(rhs.ParticleShaderZTestFunction);
            ret.ParticleShaderDestBlendMode = this.ParticleShaderDestBlendMode.Combine(rhs.ParticleShaderDestBlendMode);
            ret.ParticleShaderParticleBirthRampUpTime = this.ParticleShaderParticleBirthRampUpTime.Combine(rhs.ParticleShaderParticleBirthRampUpTime);
            ret.ParticleShaderFullParticleBirthTime = this.ParticleShaderFullParticleBirthTime.Combine(rhs.ParticleShaderFullParticleBirthTime);
            ret.ParticleShaderParticleBirthRampDownTime = this.ParticleShaderParticleBirthRampDownTime.Combine(rhs.ParticleShaderParticleBirthRampDownTime);
            ret.ParticleShaderFullParticleBirthRatio = this.ParticleShaderFullParticleBirthRatio.Combine(rhs.ParticleShaderFullParticleBirthRatio);
            ret.ParticleShaderPersistentParticleBirthRatio = this.ParticleShaderPersistentParticleBirthRatio.Combine(rhs.ParticleShaderPersistentParticleBirthRatio);
            ret.ParticleShaderParticleLifetime = this.ParticleShaderParticleLifetime.Combine(rhs.ParticleShaderParticleLifetime);
            ret.ParticleShaderParticleLifetimePlusMinus = this.ParticleShaderParticleLifetimePlusMinus.Combine(rhs.ParticleShaderParticleLifetimePlusMinus);
            ret.ParticleShaderInitialSpeedAlongNormal = this.ParticleShaderInitialSpeedAlongNormal.Combine(rhs.ParticleShaderInitialSpeedAlongNormal);
            ret.ParticleShaderAccelerationAlongNormal = this.ParticleShaderAccelerationAlongNormal.Combine(rhs.ParticleShaderAccelerationAlongNormal);
            ret.ParticleShaderInitialVelocity1 = this.ParticleShaderInitialVelocity1.Combine(rhs.ParticleShaderInitialVelocity1);
            ret.ParticleShaderInitialVelocity2 = this.ParticleShaderInitialVelocity2.Combine(rhs.ParticleShaderInitialVelocity2);
            ret.ParticleShaderInitialVelocity3 = this.ParticleShaderInitialVelocity3.Combine(rhs.ParticleShaderInitialVelocity3);
            ret.ParticleShaderAcceleration1 = this.ParticleShaderAcceleration1.Combine(rhs.ParticleShaderAcceleration1);
            ret.ParticleShaderAcceleration2 = this.ParticleShaderAcceleration2.Combine(rhs.ParticleShaderAcceleration2);
            ret.ParticleShaderAcceleration3 = this.ParticleShaderAcceleration3.Combine(rhs.ParticleShaderAcceleration3);
            ret.ParticleShaderScaleKey1 = this.ParticleShaderScaleKey1.Combine(rhs.ParticleShaderScaleKey1);
            ret.ParticleShaderScaleKey2 = this.ParticleShaderScaleKey2.Combine(rhs.ParticleShaderScaleKey2);
            ret.ParticleShaderScaleKey1Time = this.ParticleShaderScaleKey1Time.Combine(rhs.ParticleShaderScaleKey1Time);
            ret.ParticleShaderScaleKey2Time = this.ParticleShaderScaleKey2Time.Combine(rhs.ParticleShaderScaleKey2Time);
            ret.ColorKey1Color = this.ColorKey1Color.Combine(rhs.ColorKey1Color);
            ret.ColorKey2Color = this.ColorKey2Color.Combine(rhs.ColorKey2Color);
            ret.ColorKey3Color = this.ColorKey3Color.Combine(rhs.ColorKey3Color);
            ret.ColorKey1ColorAlpha = this.ColorKey1ColorAlpha.Combine(rhs.ColorKey1ColorAlpha);
            ret.ColorKey2ColorAlpha = this.ColorKey2ColorAlpha.Combine(rhs.ColorKey2ColorAlpha);
            ret.ColorKey3ColorAlpha = this.ColorKey3ColorAlpha.Combine(rhs.ColorKey3ColorAlpha);
            ret.ColorKey1ColorKeyTime = this.ColorKey1ColorKeyTime.Combine(rhs.ColorKey1ColorKeyTime);
            ret.ColorKey2ColorKeyTime = this.ColorKey2ColorKeyTime.Combine(rhs.ColorKey2ColorKeyTime);
            ret.ColorKey3ColorKeyTime = this.ColorKey3ColorKeyTime.Combine(rhs.ColorKey3ColorKeyTime);
            return ret;
        }
        public static EffectShader_ErrorMask Combine(EffectShader_ErrorMask lhs, EffectShader_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static EffectShader_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new EffectShader_ErrorMask();
        }
        #endregion

    }
    public class EffectShader_CopyMask : OblivionMajorRecord_CopyMask
    {
        public EffectShader_CopyMask()
        {
        }

        public EffectShader_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.FillTexture = defaultOn;
            this.ParticleShaderTexture = defaultOn;
            this.Flags = defaultOn;
            this.MembraneShaderSourceBlendMode = defaultOn;
            this.MembraneShaderBlendOperation = defaultOn;
            this.MembraneShaderZTestFunction = defaultOn;
            this.FillTextureEffectColor = defaultOn;
            this.FillTextureEffectAlphaFadeInTime = defaultOn;
            this.FillTextureEffectFullAlphaTime = defaultOn;
            this.FillTextureEffectAlphaFadeOutTime = defaultOn;
            this.FillTextureEffectPersistentAlphaRatio = defaultOn;
            this.FillTextureEffectAlphaPulseAmplitude = defaultOn;
            this.FillTextureEffectAlphaPulseFrequency = defaultOn;
            this.FillTextureEffectTextureAnimationSpeedU = defaultOn;
            this.FillTextureEffectTextureAnimationSpeedV = defaultOn;
            this.EdgeEffectFallOff = defaultOn;
            this.EdgeEffectColor = defaultOn;
            this.EdgeEffectAlphaFadeInTime = defaultOn;
            this.EdgeEffectFullAlphaTime = defaultOn;
            this.EdgeEffectAlphaFadeOutTime = defaultOn;
            this.EdgeEffectPersistentAlphaRatio = defaultOn;
            this.EdgeEffectAlphaPulseAmplitude = defaultOn;
            this.EdgeEffectAlphaPulseFrequency = defaultOn;
            this.FillTextureEffectFullAlphaRatio = defaultOn;
            this.EdgeEffectFullAlphaRatio = defaultOn;
            this.MembraneShaderDestBlendMode = defaultOn;
            this.ParticleShaderSourceBlendMode = defaultOn;
            this.ParticleShaderBlendOperation = defaultOn;
            this.ParticleShaderZTestFunction = defaultOn;
            this.ParticleShaderDestBlendMode = defaultOn;
            this.ParticleShaderParticleBirthRampUpTime = defaultOn;
            this.ParticleShaderFullParticleBirthTime = defaultOn;
            this.ParticleShaderParticleBirthRampDownTime = defaultOn;
            this.ParticleShaderFullParticleBirthRatio = defaultOn;
            this.ParticleShaderPersistentParticleBirthRatio = defaultOn;
            this.ParticleShaderParticleLifetime = defaultOn;
            this.ParticleShaderParticleLifetimePlusMinus = defaultOn;
            this.ParticleShaderInitialSpeedAlongNormal = defaultOn;
            this.ParticleShaderAccelerationAlongNormal = defaultOn;
            this.ParticleShaderInitialVelocity1 = defaultOn;
            this.ParticleShaderInitialVelocity2 = defaultOn;
            this.ParticleShaderInitialVelocity3 = defaultOn;
            this.ParticleShaderAcceleration1 = defaultOn;
            this.ParticleShaderAcceleration2 = defaultOn;
            this.ParticleShaderAcceleration3 = defaultOn;
            this.ParticleShaderScaleKey1 = defaultOn;
            this.ParticleShaderScaleKey2 = defaultOn;
            this.ParticleShaderScaleKey1Time = defaultOn;
            this.ParticleShaderScaleKey2Time = defaultOn;
            this.ColorKey1Color = defaultOn;
            this.ColorKey2Color = defaultOn;
            this.ColorKey3Color = defaultOn;
            this.ColorKey1ColorAlpha = defaultOn;
            this.ColorKey2ColorAlpha = defaultOn;
            this.ColorKey3ColorAlpha = defaultOn;
            this.ColorKey1ColorKeyTime = defaultOn;
            this.ColorKey2ColorKeyTime = defaultOn;
            this.ColorKey3ColorKeyTime = defaultOn;
        }

        #region Members
        public bool FillTexture;
        public bool ParticleShaderTexture;
        public bool Flags;
        public bool MembraneShaderSourceBlendMode;
        public bool MembraneShaderBlendOperation;
        public bool MembraneShaderZTestFunction;
        public bool FillTextureEffectColor;
        public bool FillTextureEffectAlphaFadeInTime;
        public bool FillTextureEffectFullAlphaTime;
        public bool FillTextureEffectAlphaFadeOutTime;
        public bool FillTextureEffectPersistentAlphaRatio;
        public bool FillTextureEffectAlphaPulseAmplitude;
        public bool FillTextureEffectAlphaPulseFrequency;
        public bool FillTextureEffectTextureAnimationSpeedU;
        public bool FillTextureEffectTextureAnimationSpeedV;
        public bool EdgeEffectFallOff;
        public bool EdgeEffectColor;
        public bool EdgeEffectAlphaFadeInTime;
        public bool EdgeEffectFullAlphaTime;
        public bool EdgeEffectAlphaFadeOutTime;
        public bool EdgeEffectPersistentAlphaRatio;
        public bool EdgeEffectAlphaPulseAmplitude;
        public bool EdgeEffectAlphaPulseFrequency;
        public bool FillTextureEffectFullAlphaRatio;
        public bool EdgeEffectFullAlphaRatio;
        public bool MembraneShaderDestBlendMode;
        public bool ParticleShaderSourceBlendMode;
        public bool ParticleShaderBlendOperation;
        public bool ParticleShaderZTestFunction;
        public bool ParticleShaderDestBlendMode;
        public bool ParticleShaderParticleBirthRampUpTime;
        public bool ParticleShaderFullParticleBirthTime;
        public bool ParticleShaderParticleBirthRampDownTime;
        public bool ParticleShaderFullParticleBirthRatio;
        public bool ParticleShaderPersistentParticleBirthRatio;
        public bool ParticleShaderParticleLifetime;
        public bool ParticleShaderParticleLifetimePlusMinus;
        public bool ParticleShaderInitialSpeedAlongNormal;
        public bool ParticleShaderAccelerationAlongNormal;
        public bool ParticleShaderInitialVelocity1;
        public bool ParticleShaderInitialVelocity2;
        public bool ParticleShaderInitialVelocity3;
        public bool ParticleShaderAcceleration1;
        public bool ParticleShaderAcceleration2;
        public bool ParticleShaderAcceleration3;
        public bool ParticleShaderScaleKey1;
        public bool ParticleShaderScaleKey2;
        public bool ParticleShaderScaleKey1Time;
        public bool ParticleShaderScaleKey2Time;
        public bool ColorKey1Color;
        public bool ColorKey2Color;
        public bool ColorKey3Color;
        public bool ColorKey1ColorAlpha;
        public bool ColorKey2ColorAlpha;
        public bool ColorKey3ColorAlpha;
        public bool ColorKey1ColorKeyTime;
        public bool ColorKey2ColorKeyTime;
        public bool ColorKey3ColorKeyTime;
        #endregion

    }

    public class EffectShader_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool FillTexture;
        public bool ParticleShaderTexture;
        public bool Flags;
        public bool MembraneShaderSourceBlendMode;
        public bool MembraneShaderBlendOperation;
        public bool MembraneShaderZTestFunction;
        public bool FillTextureEffectColor;
        public bool FillTextureEffectAlphaFadeInTime;
        public bool FillTextureEffectFullAlphaTime;
        public bool FillTextureEffectAlphaFadeOutTime;
        public bool FillTextureEffectPersistentAlphaRatio;
        public bool FillTextureEffectAlphaPulseAmplitude;
        public bool FillTextureEffectAlphaPulseFrequency;
        public bool FillTextureEffectTextureAnimationSpeedU;
        public bool FillTextureEffectTextureAnimationSpeedV;
        public bool EdgeEffectFallOff;
        public bool EdgeEffectColor;
        public bool EdgeEffectAlphaFadeInTime;
        public bool EdgeEffectFullAlphaTime;
        public bool EdgeEffectAlphaFadeOutTime;
        public bool EdgeEffectPersistentAlphaRatio;
        public bool EdgeEffectAlphaPulseAmplitude;
        public bool EdgeEffectAlphaPulseFrequency;
        public bool FillTextureEffectFullAlphaRatio;
        public bool EdgeEffectFullAlphaRatio;
        public bool MembraneShaderDestBlendMode;
        public bool ParticleShaderSourceBlendMode;
        public bool ParticleShaderBlendOperation;
        public bool ParticleShaderZTestFunction;
        public bool ParticleShaderDestBlendMode;
        public bool ParticleShaderParticleBirthRampUpTime;
        public bool ParticleShaderFullParticleBirthTime;
        public bool ParticleShaderParticleBirthRampDownTime;
        public bool ParticleShaderFullParticleBirthRatio;
        public bool ParticleShaderPersistentParticleBirthRatio;
        public bool ParticleShaderParticleLifetime;
        public bool ParticleShaderParticleLifetimePlusMinus;
        public bool ParticleShaderInitialSpeedAlongNormal;
        public bool ParticleShaderAccelerationAlongNormal;
        public bool ParticleShaderInitialVelocity1;
        public bool ParticleShaderInitialVelocity2;
        public bool ParticleShaderInitialVelocity3;
        public bool ParticleShaderAcceleration1;
        public bool ParticleShaderAcceleration2;
        public bool ParticleShaderAcceleration3;
        public bool ParticleShaderScaleKey1;
        public bool ParticleShaderScaleKey2;
        public bool ParticleShaderScaleKey1Time;
        public bool ParticleShaderScaleKey2Time;
        public bool ColorKey1Color;
        public bool ColorKey2Color;
        public bool ColorKey3Color;
        public bool ColorKey1ColorAlpha;
        public bool ColorKey2ColorAlpha;
        public bool ColorKey3ColorAlpha;
        public bool ColorKey1ColorKeyTime;
        public bool ColorKey2ColorKeyTime;
        public bool ColorKey3ColorKeyTime;
        #endregion

        #region Ctors
        public EffectShader_TranslationMask()
            : base()
        {
        }

        public EffectShader_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.FillTexture = defaultOn;
            this.ParticleShaderTexture = defaultOn;
            this.Flags = defaultOn;
            this.MembraneShaderSourceBlendMode = defaultOn;
            this.MembraneShaderBlendOperation = defaultOn;
            this.MembraneShaderZTestFunction = defaultOn;
            this.FillTextureEffectColor = defaultOn;
            this.FillTextureEffectAlphaFadeInTime = defaultOn;
            this.FillTextureEffectFullAlphaTime = defaultOn;
            this.FillTextureEffectAlphaFadeOutTime = defaultOn;
            this.FillTextureEffectPersistentAlphaRatio = defaultOn;
            this.FillTextureEffectAlphaPulseAmplitude = defaultOn;
            this.FillTextureEffectAlphaPulseFrequency = defaultOn;
            this.FillTextureEffectTextureAnimationSpeedU = defaultOn;
            this.FillTextureEffectTextureAnimationSpeedV = defaultOn;
            this.EdgeEffectFallOff = defaultOn;
            this.EdgeEffectColor = defaultOn;
            this.EdgeEffectAlphaFadeInTime = defaultOn;
            this.EdgeEffectFullAlphaTime = defaultOn;
            this.EdgeEffectAlphaFadeOutTime = defaultOn;
            this.EdgeEffectPersistentAlphaRatio = defaultOn;
            this.EdgeEffectAlphaPulseAmplitude = defaultOn;
            this.EdgeEffectAlphaPulseFrequency = defaultOn;
            this.FillTextureEffectFullAlphaRatio = defaultOn;
            this.EdgeEffectFullAlphaRatio = defaultOn;
            this.MembraneShaderDestBlendMode = defaultOn;
            this.ParticleShaderSourceBlendMode = defaultOn;
            this.ParticleShaderBlendOperation = defaultOn;
            this.ParticleShaderZTestFunction = defaultOn;
            this.ParticleShaderDestBlendMode = defaultOn;
            this.ParticleShaderParticleBirthRampUpTime = defaultOn;
            this.ParticleShaderFullParticleBirthTime = defaultOn;
            this.ParticleShaderParticleBirthRampDownTime = defaultOn;
            this.ParticleShaderFullParticleBirthRatio = defaultOn;
            this.ParticleShaderPersistentParticleBirthRatio = defaultOn;
            this.ParticleShaderParticleLifetime = defaultOn;
            this.ParticleShaderParticleLifetimePlusMinus = defaultOn;
            this.ParticleShaderInitialSpeedAlongNormal = defaultOn;
            this.ParticleShaderAccelerationAlongNormal = defaultOn;
            this.ParticleShaderInitialVelocity1 = defaultOn;
            this.ParticleShaderInitialVelocity2 = defaultOn;
            this.ParticleShaderInitialVelocity3 = defaultOn;
            this.ParticleShaderAcceleration1 = defaultOn;
            this.ParticleShaderAcceleration2 = defaultOn;
            this.ParticleShaderAcceleration3 = defaultOn;
            this.ParticleShaderScaleKey1 = defaultOn;
            this.ParticleShaderScaleKey2 = defaultOn;
            this.ParticleShaderScaleKey1Time = defaultOn;
            this.ParticleShaderScaleKey2Time = defaultOn;
            this.ColorKey1Color = defaultOn;
            this.ColorKey2Color = defaultOn;
            this.ColorKey3Color = defaultOn;
            this.ColorKey1ColorAlpha = defaultOn;
            this.ColorKey2ColorAlpha = defaultOn;
            this.ColorKey3ColorAlpha = defaultOn;
            this.ColorKey1ColorKeyTime = defaultOn;
            this.ColorKey2ColorKeyTime = defaultOn;
            this.ColorKey3ColorKeyTime = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((FillTexture, null));
            ret.Add((ParticleShaderTexture, null));
            ret.Add((Flags, null));
            ret.Add((MembraneShaderSourceBlendMode, null));
            ret.Add((MembraneShaderBlendOperation, null));
            ret.Add((MembraneShaderZTestFunction, null));
            ret.Add((FillTextureEffectColor, null));
            ret.Add((FillTextureEffectAlphaFadeInTime, null));
            ret.Add((FillTextureEffectFullAlphaTime, null));
            ret.Add((FillTextureEffectAlphaFadeOutTime, null));
            ret.Add((FillTextureEffectPersistentAlphaRatio, null));
            ret.Add((FillTextureEffectAlphaPulseAmplitude, null));
            ret.Add((FillTextureEffectAlphaPulseFrequency, null));
            ret.Add((FillTextureEffectTextureAnimationSpeedU, null));
            ret.Add((FillTextureEffectTextureAnimationSpeedV, null));
            ret.Add((EdgeEffectFallOff, null));
            ret.Add((EdgeEffectColor, null));
            ret.Add((EdgeEffectAlphaFadeInTime, null));
            ret.Add((EdgeEffectFullAlphaTime, null));
            ret.Add((EdgeEffectAlphaFadeOutTime, null));
            ret.Add((EdgeEffectPersistentAlphaRatio, null));
            ret.Add((EdgeEffectAlphaPulseAmplitude, null));
            ret.Add((EdgeEffectAlphaPulseFrequency, null));
            ret.Add((FillTextureEffectFullAlphaRatio, null));
            ret.Add((EdgeEffectFullAlphaRatio, null));
            ret.Add((MembraneShaderDestBlendMode, null));
            ret.Add((ParticleShaderSourceBlendMode, null));
            ret.Add((ParticleShaderBlendOperation, null));
            ret.Add((ParticleShaderZTestFunction, null));
            ret.Add((ParticleShaderDestBlendMode, null));
            ret.Add((ParticleShaderParticleBirthRampUpTime, null));
            ret.Add((ParticleShaderFullParticleBirthTime, null));
            ret.Add((ParticleShaderParticleBirthRampDownTime, null));
            ret.Add((ParticleShaderFullParticleBirthRatio, null));
            ret.Add((ParticleShaderPersistentParticleBirthRatio, null));
            ret.Add((ParticleShaderParticleLifetime, null));
            ret.Add((ParticleShaderParticleLifetimePlusMinus, null));
            ret.Add((ParticleShaderInitialSpeedAlongNormal, null));
            ret.Add((ParticleShaderAccelerationAlongNormal, null));
            ret.Add((ParticleShaderInitialVelocity1, null));
            ret.Add((ParticleShaderInitialVelocity2, null));
            ret.Add((ParticleShaderInitialVelocity3, null));
            ret.Add((ParticleShaderAcceleration1, null));
            ret.Add((ParticleShaderAcceleration2, null));
            ret.Add((ParticleShaderAcceleration3, null));
            ret.Add((ParticleShaderScaleKey1, null));
            ret.Add((ParticleShaderScaleKey2, null));
            ret.Add((ParticleShaderScaleKey1Time, null));
            ret.Add((ParticleShaderScaleKey2Time, null));
            ret.Add((ColorKey1Color, null));
            ret.Add((ColorKey2Color, null));
            ret.Add((ColorKey3Color, null));
            ret.Add((ColorKey1ColorAlpha, null));
            ret.Add((ColorKey2ColorAlpha, null));
            ret.Add((ColorKey3ColorAlpha, null));
            ret.Add((ColorKey1ColorKeyTime, null));
            ret.Add((ColorKey2ColorKeyTime, null));
            ret.Add((ColorKey3ColorKeyTime, null));
        }
    }
    #endregion

    #endregion

}
