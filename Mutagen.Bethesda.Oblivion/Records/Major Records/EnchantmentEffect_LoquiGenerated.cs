/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class EnchantmentEffect : IEnchantmentEffect, ILoquiObjectSetter, IEquatable<EnchantmentEffect>
    {
        ILoquiRegistration ILoquiObject.Registration => EnchantmentEffect_Registration.Instance;
        public static EnchantmentEffect_Registration Registration => EnchantmentEffect_Registration.Instance;

        #region Ctor
        public EnchantmentEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MagicEffect
        protected readonly INotifyingSetItem<FormID> _MagicEffect = NotifyingSetItem.Factory<FormID>(markAsSet: false);
        public INotifyingSetItem<FormID> MagicEffect_Property => _MagicEffect;
        public FormID MagicEffect
        {
            get => this._MagicEffect.Item;
            set => this._MagicEffect.Set(value);
        }
        INotifyingSetItem<FormID> IEnchantmentEffect.MagicEffect_Property => this.MagicEffect_Property;
        INotifyingSetItemGetter<FormID> IEnchantmentEffectGetter.MagicEffect_Property => this.MagicEffect_Property;
        #endregion
        #region Magnitude
        protected readonly INotifyingSetItem<UInt32> _Magnitude = NotifyingSetItem.Factory<UInt32>(markAsSet: false);
        public INotifyingSetItem<UInt32> Magnitude_Property => _Magnitude;
        public UInt32 Magnitude
        {
            get => this._Magnitude.Item;
            set => this._Magnitude.Set(value);
        }
        INotifyingSetItem<UInt32> IEnchantmentEffect.Magnitude_Property => this.Magnitude_Property;
        INotifyingSetItemGetter<UInt32> IEnchantmentEffectGetter.Magnitude_Property => this.Magnitude_Property;
        #endregion
        #region Area
        protected readonly INotifyingSetItem<UInt32> _Area = NotifyingSetItem.Factory<UInt32>(markAsSet: false);
        public INotifyingSetItem<UInt32> Area_Property => _Area;
        public UInt32 Area
        {
            get => this._Area.Item;
            set => this._Area.Set(value);
        }
        INotifyingSetItem<UInt32> IEnchantmentEffect.Area_Property => this.Area_Property;
        INotifyingSetItemGetter<UInt32> IEnchantmentEffectGetter.Area_Property => this.Area_Property;
        #endregion
        #region Duration
        protected readonly INotifyingSetItem<UInt32> _Duration = NotifyingSetItem.Factory<UInt32>(markAsSet: false);
        public INotifyingSetItem<UInt32> Duration_Property => _Duration;
        public UInt32 Duration
        {
            get => this._Duration.Item;
            set => this._Duration.Set(value);
        }
        INotifyingSetItem<UInt32> IEnchantmentEffect.Duration_Property => this.Duration_Property;
        INotifyingSetItemGetter<UInt32> IEnchantmentEffectGetter.Duration_Property => this.Duration_Property;
        #endregion
        #region Type
        protected readonly INotifyingSetItem<EnchantmentEffect.EffectType> _Type = NotifyingSetItem.Factory<EnchantmentEffect.EffectType>(markAsSet: false);
        public INotifyingSetItem<EnchantmentEffect.EffectType> Type_Property => _Type;
        public EnchantmentEffect.EffectType Type
        {
            get => this._Type.Item;
            set => this._Type.Set(value);
        }
        INotifyingSetItem<EnchantmentEffect.EffectType> IEnchantmentEffect.Type_Property => this.Type_Property;
        INotifyingSetItemGetter<EnchantmentEffect.EffectType> IEnchantmentEffectGetter.Type_Property => this.Type_Property;
        #endregion
        #region ActorValue
        protected readonly INotifyingSetItem<ActorValue> _ActorValue = NotifyingSetItem.Factory<ActorValue>(markAsSet: false);
        public INotifyingSetItem<ActorValue> ActorValue_Property => _ActorValue;
        public ActorValue ActorValue
        {
            get => this._ActorValue.Item;
            set => this._ActorValue.Set(value);
        }
        INotifyingSetItem<ActorValue> IEnchantmentEffect.ActorValue_Property => this.ActorValue_Property;
        INotifyingSetItemGetter<ActorValue> IEnchantmentEffectGetter.ActorValue_Property => this.ActorValue_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => EnchantmentEffectCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => EnchantmentEffectCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => EnchantmentEffectCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            EnchantmentEffectCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return EnchantmentEffectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            EnchantmentEffect_Mask<bool> printMask = null)
        {
            return EnchantmentEffectCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            EnchantmentEffectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public EnchantmentEffect_Mask<bool> GetHasBeenSetMask()
        {
            return EnchantmentEffectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is EnchantmentEffect rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(EnchantmentEffect rhs)
        {
            if (rhs == null) return false;
            if (MagicEffect_Property.HasBeenSet != rhs.MagicEffect_Property.HasBeenSet) return false;
            if (MagicEffect_Property.HasBeenSet)
            {
                if (MagicEffect != rhs.MagicEffect) return false;
            }
            if (Magnitude_Property.HasBeenSet != rhs.Magnitude_Property.HasBeenSet) return false;
            if (Magnitude_Property.HasBeenSet)
            {
                if (Magnitude != rhs.Magnitude) return false;
            }
            if (Area_Property.HasBeenSet != rhs.Area_Property.HasBeenSet) return false;
            if (Area_Property.HasBeenSet)
            {
                if (Area != rhs.Area) return false;
            }
            if (Duration_Property.HasBeenSet != rhs.Duration_Property.HasBeenSet) return false;
            if (Duration_Property.HasBeenSet)
            {
                if (Duration != rhs.Duration) return false;
            }
            if (Type_Property.HasBeenSet != rhs.Type_Property.HasBeenSet) return false;
            if (Type_Property.HasBeenSet)
            {
                if (Type != rhs.Type) return false;
            }
            if (ActorValue_Property.HasBeenSet != rhs.ActorValue_Property.HasBeenSet) return false;
            if (ActorValue_Property.HasBeenSet)
            {
                if (ActorValue != rhs.ActorValue) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (MagicEffect_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MagicEffect).CombineHashCode(ret);
            }
            if (Magnitude_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Magnitude).CombineHashCode(ret);
            }
            if (Area_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Area).CombineHashCode(ret);
            }
            if (Duration_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Duration).CombineHashCode(ret);
            }
            if (Type_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            }
            if (ActorValue_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ActorValue).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static EnchantmentEffect Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static EnchantmentEffect Create_XML(
            XElement root,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static EnchantmentEffect Create_XML(
            XElement root,
            bool doMasks,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (EnchantmentEffect Object, EnchantmentEffect_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            EnchantmentEffect_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new EnchantmentEffect_ErrorMask()) : default(Func<EnchantmentEffect_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static EnchantmentEffect Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static EnchantmentEffect Create_XML(
            string path,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static EnchantmentEffect Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static EnchantmentEffect Create_XML(
            Stream stream,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<EnchantmentEffect, EnchantmentEffect_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out EnchantmentEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<EnchantmentEffect, EnchantmentEffect_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out EnchantmentEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out EnchantmentEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out EnchantmentEffect_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (EnchantmentEffect_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out EnchantmentEffect_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out EnchantmentEffect_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            EnchantmentEffectCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static EnchantmentEffect Create_XML_Internal(
            XElement root,
            Func<EnchantmentEffect_ErrorMask> errorMask)
        {
            var ret = new EnchantmentEffect();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            EnchantmentEffect item,
            XElement root,
            string name,
            Func<EnchantmentEffect_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "MagicEffect":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._MagicEffect.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)EnchantmentEffect_FieldIndex.MagicEffect,
                            subMask);
                    }
                    break;
                case "Magnitude":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Magnitude.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)EnchantmentEffect_FieldIndex.Magnitude,
                            subMask);
                    }
                    break;
                case "Area":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Area.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)EnchantmentEffect_FieldIndex.Area,
                            subMask);
                    }
                    break;
                case "Duration":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Duration.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)EnchantmentEffect_FieldIndex.Duration,
                            subMask);
                    }
                    break;
                case "Type":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<EnchantmentEffect.EffectType>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Type.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)EnchantmentEffect_FieldIndex.Type,
                            subMask);
                    }
                    break;
                case "ActorValue":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<ActorValue>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._ActorValue.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)EnchantmentEffect_FieldIndex.ActorValue,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static EnchantmentEffect Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static EnchantmentEffect Create_Binary(
            MutagenFrame frame,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static EnchantmentEffect Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (EnchantmentEffect Object, EnchantmentEffect_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            EnchantmentEffect_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new EnchantmentEffect_ErrorMask()) : default(Func<EnchantmentEffect_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static EnchantmentEffect Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static EnchantmentEffect Create_Binary(
            string path,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static EnchantmentEffect Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static EnchantmentEffect Create_Binary(
            Stream stream,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<EnchantmentEffect, EnchantmentEffect_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out EnchantmentEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<EnchantmentEffect, EnchantmentEffect_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out EnchantmentEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out EnchantmentEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            errorMask = (EnchantmentEffect_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            EnchantmentEffectCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static EnchantmentEffect Create_Binary_Internal(
            MutagenFrame frame,
            Func<EnchantmentEffect_ErrorMask> errorMask)
        {
            var ret = new EnchantmentEffect();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            EnchantmentEffect item,
            MutagenFrame frame,
            Func<EnchantmentEffect_ErrorMask> errorMask)
        {
        }

        #endregion

        public EnchantmentEffect Copy(
            EnchantmentEffect_CopyMask copyMask = null,
            IEnchantmentEffectGetter def = null)
        {
            return EnchantmentEffect.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static EnchantmentEffect Copy(
            IEnchantmentEffect item,
            EnchantmentEffect_CopyMask copyMask = null,
            IEnchantmentEffectGetter def = null)
        {
            EnchantmentEffect ret;
            if (item.GetType().Equals(typeof(EnchantmentEffect)))
            {
                ret = new EnchantmentEffect();
            }
            else
            {
                ret = (EnchantmentEffect)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            EnchantmentEffect_CopyMask copyMask = null,
            IEnchantmentEffectGetter def = null)
            where CopyType : class, IEnchantmentEffect
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(EnchantmentEffect)))
            {
                ret = new EnchantmentEffect() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static EnchantmentEffect Copy_ToLoqui(
            IEnchantmentEffectGetter item,
            EnchantmentEffect_CopyMask copyMask = null,
            IEnchantmentEffectGetter def = null)
        {
            var ret = new EnchantmentEffect();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    this._MagicEffect.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case EnchantmentEffect_FieldIndex.Magnitude:
                    this._Magnitude.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case EnchantmentEffect_FieldIndex.Area:
                    this._Area.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case EnchantmentEffect_FieldIndex.Duration:
                    this._Duration.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case EnchantmentEffect_FieldIndex.Type:
                    this._Type.Set(
                        (EnchantmentEffect.EffectType)obj,
                        cmds);
                    break;
                case EnchantmentEffect_FieldIndex.ActorValue:
                    this._ActorValue.Set(
                        (ActorValue)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            EnchantmentEffectCommon.Clear(this, cmds);
        }


        public static EnchantmentEffect Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new EnchantmentEffect();
            foreach (var pair in fields)
            {
                CopyInInternal_EnchantmentEffect(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_EnchantmentEffect(EnchantmentEffect obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out EnchantmentEffect_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    obj._MagicEffect.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case EnchantmentEffect_FieldIndex.Magnitude:
                    obj._Magnitude.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case EnchantmentEffect_FieldIndex.Area:
                    obj._Area.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case EnchantmentEffect_FieldIndex.Duration:
                    obj._Duration.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case EnchantmentEffect_FieldIndex.Type:
                    obj._Type.Set(
                        (EnchantmentEffect.EffectType)pair.Value,
                        null);
                    break;
                case EnchantmentEffect_FieldIndex.ActorValue:
                    obj._ActorValue.Set(
                        (ActorValue)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, EnchantmentEffect obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IEnchantmentEffect : IEnchantmentEffectGetter, ILoquiClass<IEnchantmentEffect, IEnchantmentEffectGetter>, ILoquiClass<EnchantmentEffect, IEnchantmentEffectGetter>
    {
        new FormID MagicEffect { get; set; }
        new INotifyingSetItem<FormID> MagicEffect_Property { get; }

        new UInt32 Magnitude { get; set; }
        new INotifyingSetItem<UInt32> Magnitude_Property { get; }

        new UInt32 Area { get; set; }
        new INotifyingSetItem<UInt32> Area_Property { get; }

        new UInt32 Duration { get; set; }
        new INotifyingSetItem<UInt32> Duration_Property { get; }

        new EnchantmentEffect.EffectType Type { get; set; }
        new INotifyingSetItem<EnchantmentEffect.EffectType> Type_Property { get; }

        new ActorValue ActorValue { get; set; }
        new INotifyingSetItem<ActorValue> ActorValue_Property { get; }

    }

    public interface IEnchantmentEffectGetter : ILoquiObject
    {
        #region MagicEffect
        FormID MagicEffect { get; }
        INotifyingSetItemGetter<FormID> MagicEffect_Property { get; }

        #endregion
        #region Magnitude
        UInt32 Magnitude { get; }
        INotifyingSetItemGetter<UInt32> Magnitude_Property { get; }

        #endregion
        #region Area
        UInt32 Area { get; }
        INotifyingSetItemGetter<UInt32> Area_Property { get; }

        #endregion
        #region Duration
        UInt32 Duration { get; }
        INotifyingSetItemGetter<UInt32> Duration_Property { get; }

        #endregion
        #region Type
        EnchantmentEffect.EffectType Type { get; }
        INotifyingSetItemGetter<EnchantmentEffect.EffectType> Type_Property { get; }

        #endregion
        #region ActorValue
        ActorValue ActorValue { get; }
        INotifyingSetItemGetter<ActorValue> ActorValue_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum EnchantmentEffect_FieldIndex
    {
        MagicEffect = 0,
        Magnitude = 1,
        Area = 2,
        Duration = 3,
        Type = 4,
        ActorValue = 5,
    }
    #endregion

    #region Registration
    public class EnchantmentEffect_Registration : ILoquiRegistration
    {
        public static readonly EnchantmentEffect_Registration Instance = new EnchantmentEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 53,
            version: 0);

        public const string GUID = "85ccb56e-7055-4f2a-894d-f998f0ac9ab8";

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(EnchantmentEffect_Mask<>);

        public static readonly Type ErrorMaskType = typeof(EnchantmentEffect_ErrorMask);

        public static readonly Type ClassType = typeof(EnchantmentEffect);

        public static readonly Type GetterType = typeof(IEnchantmentEffectGetter);

        public static readonly Type SetterType = typeof(IEnchantmentEffect);

        public static readonly Type CommonType = typeof(EnchantmentEffectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.EnchantmentEffect";

        public const string Name = "EnchantmentEffect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAGICEFFECT":
                    return (ushort)EnchantmentEffect_FieldIndex.MagicEffect;
                case "MAGNITUDE":
                    return (ushort)EnchantmentEffect_FieldIndex.Magnitude;
                case "AREA":
                    return (ushort)EnchantmentEffect_FieldIndex.Area;
                case "DURATION":
                    return (ushort)EnchantmentEffect_FieldIndex.Duration;
                case "TYPE":
                    return (ushort)EnchantmentEffect_FieldIndex.Type;
                case "ACTORVALUE":
                    return (ushort)EnchantmentEffect_FieldIndex.ActorValue;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                case EnchantmentEffect_FieldIndex.Magnitude:
                case EnchantmentEffect_FieldIndex.Area:
                case EnchantmentEffect_FieldIndex.Duration:
                case EnchantmentEffect_FieldIndex.Type:
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                case EnchantmentEffect_FieldIndex.Magnitude:
                case EnchantmentEffect_FieldIndex.Area:
                case EnchantmentEffect_FieldIndex.Duration:
                case EnchantmentEffect_FieldIndex.Type:
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                case EnchantmentEffect_FieldIndex.Magnitude:
                case EnchantmentEffect_FieldIndex.Area:
                case EnchantmentEffect_FieldIndex.Duration:
                case EnchantmentEffect_FieldIndex.Type:
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    return "MagicEffect";
                case EnchantmentEffect_FieldIndex.Magnitude:
                    return "Magnitude";
                case EnchantmentEffect_FieldIndex.Area:
                    return "Area";
                case EnchantmentEffect_FieldIndex.Duration:
                    return "Duration";
                case EnchantmentEffect_FieldIndex.Type:
                    return "Type";
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return "ActorValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                case EnchantmentEffect_FieldIndex.Magnitude:
                case EnchantmentEffect_FieldIndex.Area:
                case EnchantmentEffect_FieldIndex.Duration:
                case EnchantmentEffect_FieldIndex.Type:
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                case EnchantmentEffect_FieldIndex.Magnitude:
                case EnchantmentEffect_FieldIndex.Area:
                case EnchantmentEffect_FieldIndex.Duration:
                case EnchantmentEffect_FieldIndex.Type:
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    return typeof(FormID);
                case EnchantmentEffect_FieldIndex.Magnitude:
                    return typeof(UInt32);
                case EnchantmentEffect_FieldIndex.Area:
                    return typeof(UInt32);
                case EnchantmentEffect_FieldIndex.Duration:
                    return typeof(UInt32);
                case EnchantmentEffect_FieldIndex.Type:
                    return typeof(EnchantmentEffect.EffectType);
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return typeof(ActorValue);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType EFIT_HEADER = new RecordType("EFIT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = EFIT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class EnchantmentEffectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IEnchantmentEffect item,
            IEnchantmentEffectGetter rhs,
            EnchantmentEffect_CopyMask copyMask = null,
            IEnchantmentEffectGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            EnchantmentEffectCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IEnchantmentEffect item,
            IEnchantmentEffectGetter rhs,
            out EnchantmentEffect_ErrorMask errorMask,
            EnchantmentEffect_CopyMask copyMask = null,
            IEnchantmentEffectGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            EnchantmentEffectCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IEnchantmentEffect item,
            IEnchantmentEffectGetter rhs,
            IEnchantmentEffectGetter def,
            bool doMasks,
            out EnchantmentEffect_ErrorMask errorMask,
            EnchantmentEffect_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            EnchantmentEffect_ErrorMask retErrorMask = null;
            Func<EnchantmentEffect_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new EnchantmentEffect_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IEnchantmentEffect item,
            IEnchantmentEffectGetter rhs,
            IEnchantmentEffectGetter def,
            bool doMasks,
            Func<EnchantmentEffect_ErrorMask> errorMask,
            EnchantmentEffect_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.MagicEffect ?? true)
            {
                try
                {
                    item.MagicEffect_Property.SetToWithDefault(
                        rhs: rhs.MagicEffect_Property,
                        def: def?.MagicEffect_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)EnchantmentEffect_FieldIndex.MagicEffect, ex);
                }
            }
            if (copyMask?.Magnitude ?? true)
            {
                try
                {
                    item.Magnitude_Property.SetToWithDefault(
                        rhs: rhs.Magnitude_Property,
                        def: def?.Magnitude_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)EnchantmentEffect_FieldIndex.Magnitude, ex);
                }
            }
            if (copyMask?.Area ?? true)
            {
                try
                {
                    item.Area_Property.SetToWithDefault(
                        rhs: rhs.Area_Property,
                        def: def?.Area_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)EnchantmentEffect_FieldIndex.Area, ex);
                }
            }
            if (copyMask?.Duration ?? true)
            {
                try
                {
                    item.Duration_Property.SetToWithDefault(
                        rhs: rhs.Duration_Property,
                        def: def?.Duration_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)EnchantmentEffect_FieldIndex.Duration, ex);
                }
            }
            if (copyMask?.Type ?? true)
            {
                try
                {
                    item.Type_Property.SetToWithDefault(
                        rhs: rhs.Type_Property,
                        def: def?.Type_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)EnchantmentEffect_FieldIndex.Type, ex);
                }
            }
            if (copyMask?.ActorValue ?? true)
            {
                try
                {
                    item.ActorValue_Property.SetToWithDefault(
                        rhs: rhs.ActorValue_Property,
                        def: def?.ActorValue_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)EnchantmentEffect_FieldIndex.ActorValue, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IEnchantmentEffect obj,
            NotifyingFireParameters? cmds = null)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    obj.MagicEffect_Property.HasBeenSet = on;
                    break;
                case EnchantmentEffect_FieldIndex.Magnitude:
                    obj.Magnitude_Property.HasBeenSet = on;
                    break;
                case EnchantmentEffect_FieldIndex.Area:
                    obj.Area_Property.HasBeenSet = on;
                    break;
                case EnchantmentEffect_FieldIndex.Duration:
                    obj.Duration_Property.HasBeenSet = on;
                    break;
                case EnchantmentEffect_FieldIndex.Type:
                    obj.Type_Property.HasBeenSet = on;
                    break;
                case EnchantmentEffect_FieldIndex.ActorValue:
                    obj.ActorValue_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IEnchantmentEffect obj,
            NotifyingUnsetParameters? cmds = null)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    obj.MagicEffect_Property.Unset(cmds);
                    break;
                case EnchantmentEffect_FieldIndex.Magnitude:
                    obj.Magnitude_Property.Unset(cmds);
                    break;
                case EnchantmentEffect_FieldIndex.Area:
                    obj.Area_Property.Unset(cmds);
                    break;
                case EnchantmentEffect_FieldIndex.Duration:
                    obj.Duration_Property.Unset(cmds);
                    break;
                case EnchantmentEffect_FieldIndex.Type:
                    obj.Type_Property.Unset(cmds);
                    break;
                case EnchantmentEffect_FieldIndex.ActorValue:
                    obj.ActorValue_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IEnchantmentEffect obj)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    return obj.MagicEffect_Property.HasBeenSet;
                case EnchantmentEffect_FieldIndex.Magnitude:
                    return obj.Magnitude_Property.HasBeenSet;
                case EnchantmentEffect_FieldIndex.Area:
                    return obj.Area_Property.HasBeenSet;
                case EnchantmentEffect_FieldIndex.Duration:
                    return obj.Duration_Property.HasBeenSet;
                case EnchantmentEffect_FieldIndex.Type:
                    return obj.Type_Property.HasBeenSet;
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return obj.ActorValue_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IEnchantmentEffectGetter obj)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    return obj.MagicEffect;
                case EnchantmentEffect_FieldIndex.Magnitude:
                    return obj.Magnitude;
                case EnchantmentEffect_FieldIndex.Area:
                    return obj.Area;
                case EnchantmentEffect_FieldIndex.Duration:
                    return obj.Duration;
                case EnchantmentEffect_FieldIndex.Type:
                    return obj.Type;
                case EnchantmentEffect_FieldIndex.ActorValue:
                    return obj.ActorValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IEnchantmentEffect item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.MagicEffect_Property.Unset(cmds.ToUnsetParams());
            item.Magnitude_Property.Unset(cmds.ToUnsetParams());
            item.Area_Property.Unset(cmds.ToUnsetParams());
            item.Duration_Property.Unset(cmds.ToUnsetParams());
            item.Type_Property.Unset(cmds.ToUnsetParams());
            item.ActorValue_Property.Unset(cmds.ToUnsetParams());
        }

        public static EnchantmentEffect_Mask<bool> GetEqualsMask(
            this IEnchantmentEffectGetter item,
            IEnchantmentEffectGetter rhs)
        {
            var ret = new EnchantmentEffect_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IEnchantmentEffectGetter item,
            IEnchantmentEffectGetter rhs,
            EnchantmentEffect_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MagicEffect = item.MagicEffect_Property.Equals(rhs.MagicEffect_Property, (l, r) => l == r);
            ret.Magnitude = item.Magnitude_Property.Equals(rhs.Magnitude_Property, (l, r) => l == r);
            ret.Area = item.Area_Property.Equals(rhs.Area_Property, (l, r) => l == r);
            ret.Duration = item.Duration_Property.Equals(rhs.Duration_Property, (l, r) => l == r);
            ret.Type = item.Type_Property.Equals(rhs.Type_Property, (l, r) => l == r);
            ret.ActorValue = item.ActorValue_Property.Equals(rhs.ActorValue_Property, (l, r) => l == r);
        }

        public static string ToString(
            this IEnchantmentEffectGetter item,
            string name = null,
            EnchantmentEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IEnchantmentEffectGetter item,
            FileGeneration fg,
            string name = null,
            EnchantmentEffect_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(EnchantmentEffect)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(EnchantmentEffect)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MagicEffect ?? true)
                {
                    fg.AppendLine($"MagicEffect => {item.MagicEffect}");
                }
                if (printMask?.Magnitude ?? true)
                {
                    fg.AppendLine($"Magnitude => {item.Magnitude}");
                }
                if (printMask?.Area ?? true)
                {
                    fg.AppendLine($"Area => {item.Area}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {item.Duration}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.ActorValue ?? true)
                {
                    fg.AppendLine($"ActorValue => {item.ActorValue}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IEnchantmentEffectGetter item,
            EnchantmentEffect_Mask<bool?> checkMask)
        {
            if (checkMask.MagicEffect.HasValue && checkMask.MagicEffect.Value != item.MagicEffect_Property.HasBeenSet) return false;
            if (checkMask.Magnitude.HasValue && checkMask.Magnitude.Value != item.Magnitude_Property.HasBeenSet) return false;
            if (checkMask.Area.HasValue && checkMask.Area.Value != item.Area_Property.HasBeenSet) return false;
            if (checkMask.Duration.HasValue && checkMask.Duration.Value != item.Duration_Property.HasBeenSet) return false;
            if (checkMask.Type.HasValue && checkMask.Type.Value != item.Type_Property.HasBeenSet) return false;
            if (checkMask.ActorValue.HasValue && checkMask.ActorValue.Value != item.ActorValue_Property.HasBeenSet) return false;
            return true;
        }

        public static EnchantmentEffect_Mask<bool> GetHasBeenSetMask(IEnchantmentEffectGetter item)
        {
            var ret = new EnchantmentEffect_Mask<bool>();
            ret.MagicEffect = item.MagicEffect_Property.HasBeenSet;
            ret.Magnitude = item.Magnitude_Property.HasBeenSet;
            ret.Area = item.Area_Property.HasBeenSet;
            ret.Duration = item.Duration_Property.HasBeenSet;
            ret.Type = item.Type_Property.HasBeenSet;
            ret.ActorValue = item.ActorValue_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IEnchantmentEffectGetter item,
            bool doMasks,
            out EnchantmentEffect_ErrorMask errorMask,
            string name = null)
        {
            EnchantmentEffect_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new EnchantmentEffect_ErrorMask()) : default(Func<EnchantmentEffect_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IEnchantmentEffectGetter item,
            Func<EnchantmentEffect_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.EnchantmentEffect"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.EnchantmentEffect");
                    }
                    if (item.MagicEffect_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.MagicEffect),
                            item: item.MagicEffect_Property,
                            fieldIndex: (int)EnchantmentEffect_FieldIndex.MagicEffect,
                            errorMask: errorMask);
                    }
                    if (item.Magnitude_Property.HasBeenSet)
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Magnitude),
                            item: item.Magnitude_Property,
                            fieldIndex: (int)EnchantmentEffect_FieldIndex.Magnitude,
                            errorMask: errorMask);
                    }
                    if (item.Area_Property.HasBeenSet)
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Area),
                            item: item.Area_Property,
                            fieldIndex: (int)EnchantmentEffect_FieldIndex.Area,
                            errorMask: errorMask);
                    }
                    if (item.Duration_Property.HasBeenSet)
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Duration),
                            item: item.Duration_Property,
                            fieldIndex: (int)EnchantmentEffect_FieldIndex.Duration,
                            errorMask: errorMask);
                    }
                    if (item.Type_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<EnchantmentEffect.EffectType>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Type),
                            item: item.Type_Property,
                            fieldIndex: (int)EnchantmentEffect_FieldIndex.Type,
                            errorMask: errorMask);
                    }
                    if (item.ActorValue_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<ActorValue>.Instance.Write(
                            writer: writer,
                            name: nameof(item.ActorValue),
                            item: item.ActorValue_Property,
                            fieldIndex: (int)EnchantmentEffect_FieldIndex.ActorValue,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IEnchantmentEffectGetter item,
            bool doMasks,
            out EnchantmentEffect_ErrorMask errorMask)
        {
            EnchantmentEffect_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new EnchantmentEffect_ErrorMask()) : default(Func<EnchantmentEffect_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IEnchantmentEffectGetter item,
            Func<EnchantmentEffect_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IEnchantmentEffectGetter item,
            MutagenWriter writer,
            Func<EnchantmentEffect_ErrorMask> errorMask)
        {
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class EnchantmentEffect_Mask<T> : IMask<T>, IEquatable<EnchantmentEffect_Mask<T>>
    {
        #region Ctors
        public EnchantmentEffect_Mask()
        {
        }

        public EnchantmentEffect_Mask(T initialValue)
        {
            this.MagicEffect = initialValue;
            this.Magnitude = initialValue;
            this.Area = initialValue;
            this.Duration = initialValue;
            this.Type = initialValue;
            this.ActorValue = initialValue;
        }
        #endregion

        #region Members
        public T MagicEffect;
        public T Magnitude;
        public T Area;
        public T Duration;
        public T Type;
        public T ActorValue;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is EnchantmentEffect_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(EnchantmentEffect_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MagicEffect, rhs.MagicEffect)) return false;
            if (!object.Equals(this.Magnitude, rhs.Magnitude)) return false;
            if (!object.Equals(this.Area, rhs.Area)) return false;
            if (!object.Equals(this.Duration, rhs.Duration)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.ActorValue, rhs.ActorValue)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MagicEffect?.GetHashCode());
            ret = ret.CombineHashCode(this.Magnitude?.GetHashCode());
            ret = ret.CombineHashCode(this.Area?.GetHashCode());
            ret = ret.CombineHashCode(this.Duration?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.ActorValue?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MagicEffect)) return false;
            if (!eval(this.Magnitude)) return false;
            if (!eval(this.Area)) return false;
            if (!eval(this.Duration)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.ActorValue)) return false;
            return true;
        }
        #endregion

        #region Translate
        public EnchantmentEffect_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new EnchantmentEffect_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(EnchantmentEffect_Mask<R> obj, Func<T, R> eval)
        {
            obj.MagicEffect = eval(this.MagicEffect);
            obj.Magnitude = eval(this.Magnitude);
            obj.Area = eval(this.Area);
            obj.Duration = eval(this.Duration);
            obj.Type = eval(this.Type);
            obj.ActorValue = eval(this.ActorValue);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(EnchantmentEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, EnchantmentEffect_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(EnchantmentEffect_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MagicEffect ?? true)
                {
                    fg.AppendLine($"MagicEffect => {MagicEffect}");
                }
                if (printMask?.Magnitude ?? true)
                {
                    fg.AppendLine($"Magnitude => {Magnitude}");
                }
                if (printMask?.Area ?? true)
                {
                    fg.AppendLine($"Area => {Area}");
                }
                if (printMask?.Duration ?? true)
                {
                    fg.AppendLine($"Duration => {Duration}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.ActorValue ?? true)
                {
                    fg.AppendLine($"ActorValue => {ActorValue}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class EnchantmentEffect_ErrorMask : IErrorMask, IErrorMask<EnchantmentEffect_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MagicEffect;
        public Exception Magnitude;
        public Exception Area;
        public Exception Duration;
        public Exception Type;
        public Exception ActorValue;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    this.MagicEffect = ex;
                    break;
                case EnchantmentEffect_FieldIndex.Magnitude:
                    this.Magnitude = ex;
                    break;
                case EnchantmentEffect_FieldIndex.Area:
                    this.Area = ex;
                    break;
                case EnchantmentEffect_FieldIndex.Duration:
                    this.Duration = ex;
                    break;
                case EnchantmentEffect_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case EnchantmentEffect_FieldIndex.ActorValue:
                    this.ActorValue = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            EnchantmentEffect_FieldIndex enu = (EnchantmentEffect_FieldIndex)index;
            switch (enu)
            {
                case EnchantmentEffect_FieldIndex.MagicEffect:
                    this.MagicEffect = (Exception)obj;
                    break;
                case EnchantmentEffect_FieldIndex.Magnitude:
                    this.Magnitude = (Exception)obj;
                    break;
                case EnchantmentEffect_FieldIndex.Area:
                    this.Area = (Exception)obj;
                    break;
                case EnchantmentEffect_FieldIndex.Duration:
                    this.Duration = (Exception)obj;
                    break;
                case EnchantmentEffect_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case EnchantmentEffect_FieldIndex.ActorValue:
                    this.ActorValue = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("EnchantmentEffect_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MagicEffect => {MagicEffect}");
            fg.AppendLine($"Magnitude => {Magnitude}");
            fg.AppendLine($"Area => {Area}");
            fg.AppendLine($"Duration => {Duration}");
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"ActorValue => {ActorValue}");
        }
        #endregion

        #region Combine
        public EnchantmentEffect_ErrorMask Combine(EnchantmentEffect_ErrorMask rhs)
        {
            var ret = new EnchantmentEffect_ErrorMask();
            ret.MagicEffect = this.MagicEffect.Combine(rhs.MagicEffect);
            ret.Magnitude = this.Magnitude.Combine(rhs.Magnitude);
            ret.Area = this.Area.Combine(rhs.Area);
            ret.Duration = this.Duration.Combine(rhs.Duration);
            ret.Type = this.Type.Combine(rhs.Type);
            ret.ActorValue = this.ActorValue.Combine(rhs.ActorValue);
            return ret;
        }
        public static EnchantmentEffect_ErrorMask Combine(EnchantmentEffect_ErrorMask lhs, EnchantmentEffect_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class EnchantmentEffect_CopyMask
    {
        #region Members
        public bool MagicEffect;
        public bool Magnitude;
        public bool Area;
        public bool Duration;
        public bool Type;
        public bool ActorValue;
        #endregion

    }
    #endregion




    #endregion

}
